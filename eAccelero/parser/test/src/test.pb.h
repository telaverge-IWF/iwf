// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class User;
class Users;
class Result;
class Req;

enum Priviledge {
  PRIV_ADMIN = 0,
  PRIV_USER = 1,
  PRIV_OPERATOR = 2
};
bool Priviledge_IsValid(int value);
const Priviledge Priviledge_MIN = PRIV_ADMIN;
const Priviledge Priviledge_MAX = PRIV_OPERATOR;
const int Priviledge_ARRAYSIZE = Priviledge_MAX + 1;

const ::google::protobuf::EnumDescriptor* Priviledge_descriptor();
inline const ::std::string& Priviledge_Name(Priviledge value) {
  return ::google::protobuf::internal::NameOfEnum(
    Priviledge_descriptor(), value);
}
inline bool Priviledge_Parse(
    const ::std::string& name, Priviledge* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Priviledge>(
    Priviledge_descriptor(), name, value);
}
enum ReqType {
  REQ_GET_USERS = 0
};
bool ReqType_IsValid(int value);
const ReqType ReqType_MIN = REQ_GET_USERS;
const ReqType ReqType_MAX = REQ_GET_USERS;
const int ReqType_ARRAYSIZE = ReqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqType_descriptor();
inline const ::std::string& ReqType_Name(ReqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqType_descriptor(), value);
}
inline bool ReqType_Parse(
    const ::std::string& name, ReqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqType>(
    ReqType_descriptor(), name, value);
}
// ===================================================================

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string userName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional .Priviledge priviledge = 3;
  inline bool has_priviledge() const;
  inline void clear_priviledge();
  static const int kPriviledgeFieldNumber = 3;
  inline ::Priviledge priviledge() const;
  inline void set_priviledge(::Priviledge value);

  // repeated string groups = 4;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 4;
  inline const ::std::string& groups(int index) const;
  inline ::std::string* mutable_groups(int index);
  inline void set_groups(int index, const ::std::string& value);
  inline void set_groups(int index, const char* value);
  inline void set_groups(int index, const char* value, size_t size);
  inline ::std::string* add_groups();
  inline void add_groups(const ::std::string& value);
  inline void add_groups(const char* value);
  inline void add_groups(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // @@protoc_insertion_point(class_scope:User)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_priviledge();
  inline void clear_has_priviledge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::google::protobuf::int32 userid_;
  int priviledge_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Users : public ::google::protobuf::Message {
 public:
  Users();
  virtual ~Users();

  Users(const Users& from);

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Users& default_instance();

  void Swap(Users* other);

  // implements Message ----------------------------------------------

  Users* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Users& from);
  void MergeFrom(const Users& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .User users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::User& users(int index) const;
  inline ::User* mutable_users(int index);
  inline ::User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::User >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:Users)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::User > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Users* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 resultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // optional string descr = 2;
  inline bool has_descr() const;
  inline void clear_descr();
  static const int kDescrFieldNumber = 2;
  inline const ::std::string& descr() const;
  inline void set_descr(const ::std::string& value);
  inline void set_descr(const char* value);
  inline void set_descr(const char* value, size_t size);
  inline ::std::string* mutable_descr();
  inline ::std::string* release_descr();
  inline void set_allocated_descr(::std::string* descr);

  // @@protoc_insertion_point(class_scope:Result)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_descr();
  inline void clear_has_descr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* descr_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class Req : public ::google::protobuf::Message {
 public:
  Req();
  virtual ~Req();

  Req(const Req& from);

  inline Req& operator=(const Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Req& default_instance();

  void Swap(Req* other);

  // implements Message ----------------------------------------------

  Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Req& from);
  void MergeFrom(const Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ReqType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::ReqType type() const;
  inline void set_type(::ReqType value);

  // @@protoc_insertion_point(class_scope:Req)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Req* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// required int32 userId = 1;
inline bool User::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 User::userid() const {
  return userid_;
}
inline void User::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string userName = 2;
inline bool User::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& User::username() const {
  return *username_;
}
inline void User::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void User::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void User::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* User::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void User::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Priviledge priviledge = 3;
inline bool User::has_priviledge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_priviledge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_priviledge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_priviledge() {
  priviledge_ = 0;
  clear_has_priviledge();
}
inline ::Priviledge User::priviledge() const {
  return static_cast< ::Priviledge >(priviledge_);
}
inline void User::set_priviledge(::Priviledge value) {
  assert(::Priviledge_IsValid(value));
  set_has_priviledge();
  priviledge_ = value;
}

// repeated string groups = 4;
inline int User::groups_size() const {
  return groups_.size();
}
inline void User::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& User::groups(int index) const {
  return groups_.Get(index);
}
inline ::std::string* User::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline void User::set_groups(int index, const ::std::string& value) {
  groups_.Mutable(index)->assign(value);
}
inline void User::set_groups(int index, const char* value) {
  groups_.Mutable(index)->assign(value);
}
inline void User::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::add_groups() {
  return groups_.Add();
}
inline void User::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
}
inline void User::add_groups(const char* value) {
  groups_.Add()->assign(value);
}
inline void User::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_groups() {
  return &groups_;
}

// -------------------------------------------------------------------

// Users

// repeated .User users = 1;
inline int Users::users_size() const {
  return users_.size();
}
inline void Users::clear_users() {
  users_.Clear();
}
inline const ::User& Users::users(int index) const {
  return users_.Get(index);
}
inline ::User* Users::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::User* Users::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::User >&
Users::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::User >*
Users::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// Result

// required int32 resultCode = 1;
inline bool Result::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 Result::resultcode() const {
  return resultcode_;
}
inline void Result::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// optional string descr = 2;
inline bool Result::has_descr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_descr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_descr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_descr() {
  if (descr_ != &::google::protobuf::internal::kEmptyString) {
    descr_->clear();
  }
  clear_has_descr();
}
inline const ::std::string& Result::descr() const {
  return *descr_;
}
inline void Result::set_descr(const ::std::string& value) {
  set_has_descr();
  if (descr_ == &::google::protobuf::internal::kEmptyString) {
    descr_ = new ::std::string;
  }
  descr_->assign(value);
}
inline void Result::set_descr(const char* value) {
  set_has_descr();
  if (descr_ == &::google::protobuf::internal::kEmptyString) {
    descr_ = new ::std::string;
  }
  descr_->assign(value);
}
inline void Result::set_descr(const char* value, size_t size) {
  set_has_descr();
  if (descr_ == &::google::protobuf::internal::kEmptyString) {
    descr_ = new ::std::string;
  }
  descr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Result::mutable_descr() {
  set_has_descr();
  if (descr_ == &::google::protobuf::internal::kEmptyString) {
    descr_ = new ::std::string;
  }
  return descr_;
}
inline ::std::string* Result::release_descr() {
  clear_has_descr();
  if (descr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = descr_;
    descr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Result::set_allocated_descr(::std::string* descr) {
  if (descr_ != &::google::protobuf::internal::kEmptyString) {
    delete descr_;
  }
  if (descr) {
    set_has_descr();
    descr_ = descr;
  } else {
    clear_has_descr();
    descr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Req

// required .ReqType type = 1;
inline bool Req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ReqType Req::type() const {
  return static_cast< ::ReqType >(type_);
}
inline void Req::set_type(::ReqType value) {
  assert(::ReqType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Priviledge>() {
  return ::Priviledge_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ReqType>() {
  return ::ReqType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
