#!/bin/sh
#
# chkconfig: 2345 74 26
# description: This is a daemon which provides the Diametriq IWF service.

### BEGIN INIT INFO
# Provides: iwf
# Short-Description: start|stop|status|restart
### END INIT INFO

# Source function library.
PRODUCT=dre
. /etc/init.d/functions
. /etc/sysconfig/network
. /etc/profile.d/iwf.sh
#
# Set default options.	Override the defaults and define
# custom options in /etc/sysconfig/iwf
#
LOCKFILE="/var/lock/subsys/iwf"

[ -f /etc/sysconfig/iwf ] && . /etc/sysconfig/iwf

prog="$IWF_ROOT/bin/avamgr"
#for the daemon coredump generation
DAEMON_COREFILE_LIMIT="unlimited"
start() {

        if [  -e /etc/.iwf/boot ];then
            if [ "`cat /etc/.iwf/boot`" == "no" ];then
                echo "`date`:booting..." >>/etc/.iwf/boot_status
                service network restart >>/etc/.iwf/boot_status
                echo "yes" >/etc/.iwf/boot

            else
                echo "`date`:start by user" >>/etc/.iwf/boot_status
            fi
        else
            echo "`date`:booting..." >>/etc/.iwf/boot_status
            service network restart >>/etc/.iwf/boot_status
            echo "yes" >/etc/.iwf/boot

        fi

	# Check that networking is configured.
	service rsyslog restart > /dev/null
	[ ${NETWORKING} = "no" ] && exit 1

	if [ -e $LOCKFILE ]; then
		pid=`cat $LOCKFILE | awk '{print $1}'`
		ppid=`cat $LOCKFILE | awk '{print $2}'`

		# check if ppid matches pid
		if [ -z $pid ]; then
			echo "Invalid lock file found...removing it"
			rm -f $LOCKFILE >/dev/null
		else
			ps -f -p $pid --no-headers | grep -v "sh -c" |grep -v grep | tr -s " " | cut -d " " -f 3 | grep -w $ppid >/dev/null 2>&1
			if [[ $? -eq 0 ]]; then
				RETVAL=3
				echo -n "Diametriq IWF service is already running"
				failure
				echo
				return $RETVAL
			else
				echo "Invalid lock file found...removing it"
				rm -f $LOCKFILE >/dev/null
			fi
		fi
	fi

	echo -n $"Starting Diametriq IWF service: "
	if [ $UID -ne 0 ]; then
		RETVAL=4
		failure
	else
		
		check_and_config_tipc
		#check if licence file is present in the config dir
		if [ ! -e ${IWF_BASEDIR}/config/its.lic ];then
		    RETVAL=1
		    echo "copy its.lic to ${IWF_BASEDIR}/config and retry"
		    failure
		    return $RETVAL
		fi
		daemon ${IWF_BASEDIR}/bin/avamgr $BASICOPTS

		pid=`ps -elf| grep "$prog" | grep -v "sh -c" |grep -v grep | tr -s " " | cut -d " " -f 4`
		if [ ! -z $pid ]; then
			ps -f -p $pid --no-headers | awk '{print $2,$3}' > $LOCKFILE
		else
			RETVAL=5
			failure
			return $RETVAL
		fi

		RETVAL=$?
		[ $RETVAL -eq 0 ]
	fi;
	echo
	return $RETVAL
}

stop() {
	echo -n $"Shutting down Diametriq ${PRODUCT} service: "
	if [ $UID -ne 0 ]; then
		RETVAL=4
		failure
	else
		killproc ${IWF_BASEDIR}/bin/avamgr
		RETVAL=$?
		[ $RETVAL -eq 0 ] && rm -f $LOCKFILE
        dre_wait
	fi;
	echo
	return $RETVAL
}

restart() {
	stop
	start
}

function check_and_config_tipc
{

    tipc-config -b|grep "No active bearers" >/dev/null
    if [ $? -eq 0 ];then
	echo "configuring tipc..." 
	#get the tipc config info from /etc/dre.cfg and configure tipc
	tipc-config -netid=`get_dre_cfg_val "NetID"` 
	tipc-config -a=`get_dre_cfg_val "TipcNodeAddress"` 
	tipc-config -be=`get_dre_cfg_val "BearerName"`
	sed -i /tipc-config/d /etc/rc.d/rc.local	
    fi

}

#this function returns the value of the field name passed 
#$1 = field name passed
function get_dre_cfg_val()
{
    sed -n s/^$1=//p /etc/iwf.cfg
}

dre_wait()
{
    echo -n "Shutting down Diametriq ${PRODUCT} service: " 
    sleep=10

    #fetching the "config_process" line from avamr.cfg to get the process names
    CONFIG_FILE=$AVAMGR_CONFDIR/avamgr.json

    #PROCESSES will contain all process names seperated with "space" 
    PROCESSES=`grep "Process-Name-With-Args" $CONFIG_FILE | cut -d ":" -f 2 | cut -d "\"" -f 2 | tr -s " " | cut -d " " -f 1`

    #counting number of processes
    PCOUNT=`grep "Process-Name-With-Args" $CONFIG_FILE | cut -d ":" -f 2| cut -d "/" -f 6| cut -d " " -f 1|tr -s "\"" " "|tr -s "," " "|wc -l`
    KILLED=0

    #checking for all processes if they are already killed by "killproc" or not
    for PROCESS in $PROCESSES
    do
        #check if all processes have been killed, if yes return
        PID=`ps -eaf | grep -w "$PROCESS" | grep -v "grep"| tr -s " "|cut -d " " -f 2`
        if [ $PCOUNT -gt 0 ];then

        #if pid is zero decrement the count and check "PCOUNT" if all processes are checked or not
            if [ -z $PID ];then
                PCOUNT=`expr $PCOUNT - 1`

                #PCOUNT is 0 return 
                if [ $PCOUNT -eq 0 ];then
		            return
		        else
                    #if process is killed just continue for next process
                    continue ;
		        fi
            else

                #else "PID" is not zero set "KILLED" flag and break from "for" loop
                KILLED=1
                break ;
            fi
        fi
    done

    #checking if "KILLED" flag is set if yes wait for 10 sec and proceed
    if [ `expr $KILLED = 1` ];then

        while [ $sleep -gt 0 ]
        do
            echo -n "."
            sleep 1
            sleep=`expr $sleep - 1`
        done

        #fetching the "config_process" line from avamr.cfg to get the process names
        PROCESS_COUNT=`grep "Process-Name-With-Args" $CONFIG_FILE | cut -d ":" -f 2| cut -d "/" -f 6| cut -d " " -f 1|tr -s "\"" " "|tr -s "," " "|wc -l`

        while [ $PROCESS_COUNT -gt 0 ]
        do

            #store all process names in an array
            PROCESS[$PROCESS_COUNT]=`grep "Process-Name-With-Args" $CONFIG_FILE | cut -d ":" -f 2 | cut -d "\"" -f 2 | tr -s " " | cut -d " " -f 1 | head -$PROCESS_COUNT | tail -1`

            #fetch pid of all process one by one and store in "PID"
            PID=`ps -eaf | grep -w "${PROCESS[$PROCESS_COUNT]}" | grep -v "grep"| tr -s " "|cut -d " " -f 2`

            #check if "PID" is zero if yes do nothing else send a sigkill for respective process
            if [ -z $PID ];then
                echo -n
            else
                kill -9 $PID 2>/dev/null
            fi

            #decrement the process count
            PROCESS_COUNT=`expr $PROCESS_COUNT - 1`

        done
    fi
        #just for next line
        echo
}
RETVAL=0

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
        echo "${PRODUCT} Status:"
	status $prog
 	if [ $? == 0 ];then
            #get the avamgr pid
            avamgr_pid=`ps -eaf|grep $prog|grep -v grep| awk '{print $2}'`
            #get all the children of pid in $avamgr_pid
            for i in `ps --ppid $avamgr_pid |grep -v PID |awk '{print $4}'`
            do
                status $i
            done
	fi
	;;
  restart)
	restart
	;;
  condrestart)
	if status $prog > /dev/null; then
	    stop
	    start
	fi
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart}"
	exit 2
esac

exit $?
