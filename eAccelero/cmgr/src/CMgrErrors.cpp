/* ********************************-*-C-*-************************************
 * *                                                                          *
 * *          Copyright 2012 Diametriq, LLC All Rights Reserved.              *
 * *            Manufactured in the United States of America.                 *
 * *      1990 W. New Haven Ste. 303, Melbourne, Florida, 32904 U.S.A.        *
 * *                                                                          *
 * *   This product and related documentation is protected by copyright and   *
 * *   distributed under licenses restricting its use, copying, distribution  *
 * *   and decompilation.  No part of this product or related documentation   *
 * *   may be reproduced in any form by any means without prior written       *
 * *   authorization of Diametriq and its licensors, if any.                  *
 * *                                                                          *
 * *   RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the      *
 * *   government is subject to restrictions as set forth in subparagraph     *
 * *   (c)(1)(ii) of the Rights in Technical Data and Computer Software       *
 * *   clause at DFARS 252.227-7013 and FAR 52.227-19.                        *
 * *                                                                          *
 * ****************************************************************************/


#include <string>
#include <map>
#include "ErrorResp.h"

extern  std::map<int,std::string> errorMap;

void generate_error_map()
{

    errorMap[CONFIG_COMMON_ERR_NO_INPUT_PARAMS]=std::string("config.common.err.no.input.params");
    errorMap[CONFIG_COMMON_ERR_FAIL_TO_GET_CONN_FROM_CONN_POOL]=std::string("config.common.err.fail.to.get.conn.from.conn.pool");
    errorMap[CONFIG_COMMON_ERR_GENERIC_ERROR]=std::string("config.common.err.generic.error");
    errorMap[CONFIG_COMMON_ERR_DB_CONNECTION_FAILED]=std::string("config.common.err.db.connection.failed");
    errorMap[CONFIG_COMMON_ERR_DB_CONNECTION_REESTABLISH]=std::string("config.common.err.db.connection.reestablish");
    errorMap[CONFIG_COMMON_ERR_RESPONSE_HAS_NO_PARAMS]=std::string("config.common.err.response.has.no.params");
    errorMap[ERR_MANDATORY_PARAM_PEERNAME_MISSING]=std::string("err.mandatory.param.peername.missing");
    errorMap[ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.mandatory.param.realmname.missing");
    errorMap[MOD_PEER_ERR_PEER_REALM_NOT_PRESENT]=std::string("mod.peer.err.peer.realm.not.present");
    errorMap[MOD_PEER_ERR_PEER_NOT_PRESENT]=std::string("mod.peer.err.peer.not.present");
    errorMap[MOD_PEER_ERR_TIMERS_NOT_PRESENT]=std::string("mod.peer.err.timers.not.present");
    errorMap[MOD_PEER_ERR_NO_INPUT_PARAMS_PROVIDED]=std::string("mod.peer.err.no.input.params.provided");
    errorMap[MOD_PEER_ERR_DB_ERROR]=std::string("mod.peer.err.db.error");
    errorMap[MOD_PEER_ERR_TIMERS_FAILED_DB_ERROR]=std::string("mod.peer.err.timers.failed.db.error");
    errorMap[MOD_PEER_ERR_PEER_STATICALLY_CONFIGURED]=std::string("mod.peer.err.peer.statically.configured");
    errorMap[MOD_PEER_ERR_PEER_IN_OPEN_STATE]=std::string("mod.peer.err.peer.in.open.state");
    errorMap[SET_PEER_ERR_PEER_REALM_ALREADY_EXISTS]=std::string("set.peer.err.peer.realm.already.exists");
    errorMap[SET_PEER_ERR_TIMERS_FAILED_DB_ERROR]=std::string("set.peer.err.timers.failed.db.error");
    errorMap[SET_PEER_ERR_DB_ERROR]=std::string("set.peer.err.db.error");
    errorMap[SET_PEER_ERR_ALT_PEER_NOT_PRESENT]=std::string("set.peer.err.alt.peer.not.present");
    errorMap[SET_PEER_ERR_ALT_PEER_FIRST_PEER]=std::string("set.peer.err.alt.peer.first.peer");
    errorMap[SET_PEER_ERR_MAX_TRANSPORTS_REACHED]=std::string("set.peer.err.max.transports.reached");
    errorMap[ADD_DICTID_ERR_MANDATORY_PARAM_DICT_NAME_MISSING]=std::string("add.dictid.err.mandatory.param.dict.name.missing");
    errorMap[ADD_DICTID_ERR_DICTNAME_ALREADY_ASSOCIATED]=std::string("add.dictid.err.dictname.already.associated");
    errorMap[ADD_DICTID_ERR_DICTNAME_MAX_COUNT_REACHED]=std::string("add.dictid.err.dictname.max.count.reached");
    errorMap[ADD_DICTID_ERR_PEER_NOT_PRESENT]=std::string("add.dictid.err.peer.not.present");
    errorMap[ADD_DICTID_ERR_DB_ERROR]=std::string("add.dictid.err.db.error");
    errorMap[SET_PEERSTATUS_ERR_MANDATORY_PARAM_PEERNAME_MISSING]=std::string("set.peerstatus.err.mandatory.param.peername.missing");
    errorMap[SET_PEERSTATUS_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("set.peerstatus.err.mandatory.param.realmname.missing");
    errorMap[SET_PEERSTATUS_ERR_PEER_NOT_PRESENT]=std::string("set.peerstatus.err.peer.not.present");
    errorMap[SET_PEERSTATUS_ERR_DB_ERROR]=std::string("set.peerstatus.err.db.error");
    errorMap[SET_PEERSTATUS_ERR_PEER_NOT_IN_CLOSED_STATE]=std::string("set.peerstatus.err.peer.not.in.closed.state");
    errorMap[SET_PEERSTATUS_ERR_DISC_FAIL_SENDING_DPR_FAILED]=std::string("set.peerstatus.err.disc.fail.sending.dpr.failed");
    errorMap[SET_PEERSTATUS_ERR_DISC_FAIL_PEER_IN_CLOSED_STATE]=std::string("set.peerstatus.err.disc.fail.peer.in.closed.state");
    errorMap[MOD_HOST_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("mod.host.err.mandatory.param.realmname.missing");
    errorMap[MOD_HOST_ERR_MANDATORY_PARAM_HOSTNAME_MISSING]=std::string("mod.host.err.mandatory.param.hostname.missing");
    errorMap[MOD_HOST_ERR_HOST_NOT_PRESENT]=std::string("mod.host.err.host.not.present");
    errorMap[MOD_HOST_ERR_DB_ERROR]=std::string("mod.host.err.db.error");
    errorMap[SET_HOST_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("set.host.err.mandatory.param.realmname.missing");
    errorMap[SET_HOST_ERR_MANDATORY_PARAM_HOSTNAME_MISSING]=std::string("set.host.err.mandatory.param.hostname.missing");
    errorMap[SET_HOST_ERR_HOST_ALREADY_PRESENT]=std::string("set.host.err.host.already.present");
    errorMap[SET_HOST_ERR_DB_ERROR]=std::string("set.host.err.db.error");
    errorMap[SET_HOST_TRANSPORT_ERR_DB_ERROR]=std::string("set.host.transport.err.db.error");
    errorMap[ERR_HOST_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.host.mandatory.param.realmname.missing");
    errorMap[ERR_HOST_MANDATORY_PARAM_TRANSPORT_SLOT_MISSING]=std::string("err.host.mandatory.param.transport.slot.missing");
    errorMap[ERR_HOST_MANDATORY_PARAM_HOSTNAME_MISSING]=std::string("err.host.mandatory.param.hostname.missing");
    errorMap[ERR_HOST_DB_ERROR]=std::string("err.host.db.error");
    errorMap[DEL_PEER_ERR_PEER_NOT_IN_CLOSED_STATE]=std::string("del.peer.err.peer.not.in.closed.state");
    errorMap[DEL_PEER_ERR_PEER_CONFIGURED_IN_FILE]=std::string("del.peer.err.peer.configured.in.file");
    errorMap[DEL_PEER_ERR_PEER_NOT_PRESENT]=std::string("del.peer.err.peer.not.present");
    errorMap[DEL_PEER_ERR_TIMER_NOT_PRESENT]=std::string("del.peer.err.timer.not.present");
    errorMap[DEL_PEER_ERR_PEER_IN_REALM_AS_DESTINATION]=std::string("del.peer.err.peer.in.realm.as.destination");
    errorMap[DEL_PEER_ERR_DB_ERROR]=std::string("del.peer.err.db.error");
    errorMap[DEL_PEER_ERR_TIMERS_FAILED_DB_ERROR]=std::string("del.peer.err.timers.failed.db.error");
    errorMap[DEL_DICTID_ERR_NOT_ASSOCIATED_WITH_PEER]=std::string("del.dictid.err.not.associated.with.peer");
    errorMap[DEL_DICTID_ERR_DB_ERROR]=std::string("del.dictid.err.db.error");
    errorMap[DEL_HOST_ERR_DB_ERROR]=std::string("del.host.err.db.error");
    errorMap[DEL_HOST_TRANSPORT_ERR_DB_ERROR]=std::string("del.host.transport.err.db.error");
    errorMap[DEL_HOST_ERR_TRANSPORT_NOT_PRESENT]=std::string("del.host.err.transport.not.present");
    errorMap[DEL_HOST_ERR_NOT_PRESENT]=std::string("del.host.err.not.present");
    errorMap[DEL_ALTPEER_ERR_PEER_NOT_PRESENT]=std::string("del.altpeer.err.peer.not.present");
    errorMap[DEL_ALTPEER_ERR_DB_ERROR]=std::string("del.altpeer.err.db.error");
    errorMap[DEL_ALTPEER_ERR_MANDATORY_PARAMS_MISSING]=std::string("del.altpeer.err.mandatory.params.missing");
    errorMap[MOD_REALM_ERR_CANNOT_MODIFY_REALM]=std::string("mod.realm.err.cannot.modify.realm");
    errorMap[MOD_REALM_ERR_REALM_NOT_PRESENT]=std::string("mod.realm.err.realm.not.present");
    errorMap[MOD_REALM_ERR_INVALID_REALM_NAME]=std::string("mod.realm.err.invalid.realm.name");
    errorMap[MOD_REALM_ERR_DB_ERROR]=std::string("mod.realm.err.db.error");
    errorMap[MOD_REALM_ERR_MANDATORY_PARAM_MISSING]=std::string("mod.realm.err.mandatory.param.missing");
    errorMap[MOD_REALM_ERR_NO_PARAMS_PASSED]=std::string("mod.realm.err.no.params.passed");
    errorMap[MOD_REALM_ERR_REALM_IS_NOT_PRESENT]=std::string("mod.realm.err.realm.is.not.present");
    errorMap[SET_REALM_ERR_INVALID_REALM]=std::string("set.realm.err.invalid.realm");
    errorMap[SET_REALM_ERR_REALM_ALREADY_ADDED]=std::string("set.realm.err.realm.already.added");
    errorMap[SET_REALM_ERR_DB_ERROR]=std::string("set.realm.err.db.error");
    errorMap[SET_REALM_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("set.realm.err.mandatory.param.realmname.missing");
    errorMap[SET_REALM_ERR_REALM_ALREADY_PRESENT]=std::string("set.realm.err.realm.already.present");
    errorMap[ERR_REALM_INVALID_REALM]=std::string("err.realm.invalid.realm");
    errorMap[ERR_REALM_REALM_ALREADY_ADDED]=std::string("err.realm.realm.already.added");
    errorMap[ERR_REALM_DB_ERROR]=std::string("err.realm.db.error");
    errorMap[ERR_REALM_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.realm.mandatory.param.realmname.missing");
    errorMap[ERR_REALM_REALM_ALREADY_PRESENT]=std::string("err.realm.realm.already.present");
    errorMap[SET_DEST_ERR_REALM_NOT_PRESENT]=std::string("set.dest.err.realm.not.present");
    errorMap[SET_DEST_ERR_MAX_NO_OF_DEST_PER_REALM_REACHED]=std::string("set.dest.err.max.no.of.dest.per.realm.reached");
    errorMap[SET_DEST_ERR_DEST_ALREADY_EXISTS]=std::string("set.dest.err.dest.already.exists");
    errorMap[SET_DEST_ERR_INVALID_PEER_NAME]=std::string("set.dest.err.invalid.peer.name");
    errorMap[SET_DEST_ERR_DB_ERROR]=std::string("set.dest.err.db.error");
    errorMap[SET_DEST_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("set.dest.err.mandatory.param.realmname.missing");
    errorMap[SET_DEST_ERR_MANDATORY_PARAM_APPID_MISSING]=std::string("set.dest.err.mandatory.param.appid.missing");
    errorMap[SET_DEST_ERR_MANDATORY_PARAM_PEERNAME_MISSING]=std::string("set.dest.err.mandatory.param.peername.missing");
    errorMap[ERR_DEST_REALM_NOT_PRESENT]=std::string("err.dest.realm.not.present");
    errorMap[ERR_DEST_MAX_NO_OF_DEST_PER_REALM_REACHED]=std::string("err.dest.max.no.of.dest.per.realm.reached");
    errorMap[ERR_DEST_DEST_ALREADY_EXISTS]=std::string("err.dest.dest.already.exists");
    errorMap[ERR_DEST_INVALID_PEER_NAME]=std::string("err.dest.invalid.peer.name");
    errorMap[ERR_DEST_DB_ERROR]=std::string("err.dest.db.error");
    errorMap[ERR_DEST_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.dest.mandatory.param.realmname.missing");
    errorMap[ERR_DEST_MANDATORY_PARAM_APPID_MISSING]=std::string("err.dest.mandatory.param.appid.missing");
    errorMap[ERR_DEST_MANDATORY_PARAM_PEERNAME_MISSING]=std::string("err.dest.mandatory.param.peername.missing");
    errorMap[MOD_DEST_ERR_MANDATORY_PARAM_MISSING]=std::string("mod.dest.err.mandatory.param.missing");
    errorMap[MOD_DEST_ERR_NO_PARAMS_PASSED]=std::string("mod.dest.err.no.params.passed");
    errorMap[MOD_DEST_ERR_DEST_TO_MODIFY_NOT_PRESENT]=std::string("mod.dest.err.dest.to.modify.not.present");
    errorMap[MOD_DEST_ERR_DB_ERROR]=std::string("mod.dest.err.db.error");
    errorMap[ENBPXYIAVP_ERR_CANNOT_CHANGE_PROXY_INFO]=std::string("enbpxyiavp.err.cannot.change.proxy.info");
    errorMap[ENBPXYIAVP_ERR_REALM_ENTRY_NOT_FOUND]=std::string("enbpxyiavp.err.realm.entry.not.found");
    errorMap[ENBPXYIAVP_ERR_DB_ERROR]=std::string("enbpxyiavp.err.db.error");
    errorMap[DISPXYIAVP_ERR_CANNOT_CHANGE_PROXY_INFO]=std::string("dispxyiavp.err.cannot.change.proxy.info");
    errorMap[DISPXYIAVP_ERR_REALM_ENTRY_NOT_FOUND]=std::string("dispxyiavp.err.realm.entry.not.found");
    errorMap[DISPXYIAVP_ERR_DB_ERROR]=std::string("dispxyiavp.err.db.error");
    errorMap[MOD_DEFROUTE_ERR_REALM_DEST_ALREADY_EXISTS]=std::string("mod.defroute.err.realm.dest.already.exists");
    errorMap[MOD_DEFROUTE_ERR_DB_ERROR]=std::string("mod.defroute.err.db.error");
    errorMap[MOD_DEFROUTE_ERR_MANDATORY_PARAM_MISSING]=std::string("mod.defroute.err.mandatory.param.missing");
    errorMap[MOD_DEFROUTE_ERR_NO_FIELD_IS_SET_FOR_MODIFICATION]=std::string("mod.defroute.err.no.field.is.set.for.modification");
    errorMap[MOD_DEFROUTE_ERR_RECORD_NOT_PRESENT]=std::string("mod.defroute.err.record.not.present");
    errorMap[SET_DEFROUTE_ERR_REALM_DEST_ALREADY_EXISTS]=std::string("set.defroute.err.realm.dest.already.exists");
    errorMap[SET_DEFROUTE_ERR_DB_ERROR]=std::string("set.defroute.err.db.error");
    errorMap[SET_DEFROUTE_ERR_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("set.defroute.err.mandatory.param.realmname.missing");
    errorMap[ERR_DEFROUTE_REALM_DEST_ALREADY_EXISTS]=std::string("err.defroute.realm.dest.already.exists");
    errorMap[ERR_DEFROUTE_DB_ERROR]=std::string("err.defroute.db.error");
    errorMap[ERR_DEFROUTE_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.defroute.mandatory.param.realmname.missing");
    errorMap[ERR_DEFROUTE_MANDATORY_PARAM_HOSTNAME_MISSING]=std::string("err.defroute.mandatory.param.hostname.missing");
    errorMap[DEL_REALM_ERR_CANNOT_MODIFY_REALM_IN_XML]=std::string("del.realm.err.cannot.modify.realm.in.config.file");
    errorMap[DEL_REALM_ERR_REALM_NOT_PRESENT]=std::string("del.realm.err.realm.not.present");
    errorMap[DEL_REALM_ERR_DB_ERROR]=std::string("del.realm.err.db.error");
    errorMap[DEL_REALM_ERR_CANNOT_DEL_SINCE_DESTS_PRESENT]=std::string("del.realm.err.cannot.del.since.dests.present");
    errorMap[DEL_REALM_ERR_REALM_IS_NOT_PRESENT]=std::string("del.realm.err.realm.is.not.present");
    errorMap[DEL_DEST_ERR_INVALID_REALM_NAME]=std::string("del.dest.err.invalid.realm.name");
    errorMap[DEL_DEST_ERR_DB_ERROR]=std::string("del.dest.err.db.error");
    errorMap[DEL_DEST_ERR_DEST_IS_NOT_IN_REALM]=std::string("del.dest.err.dest.is.not.in.realm");
    errorMap[DEL_DEFROUTE_ERR_DB_ERROR]=std::string("del.defroute.err.db.error");
    errorMap[DEL_DEFROUTE_ERR_DEF_ROUTE_NOT_PRESENT]=std::string("del.defroute.err.def.route.not.present");
    errorMap[ADD_PEERGROUP_ERR_DB_ERROR]=std::string("add.peergroup.err.db.error");
    errorMap[ADD_PEERGROUP_ERR_MANDATORY_PEERGROUPNAME_MISSING]=std::string("add.peergroup.err.mandatory.peergroupname.missing");
    errorMap[ADD_PEERGROUP_ERR_PEER_GROUP_ALREADY_PRESENT]=std::string("add.peergroup.err.peer.group.already.present");
    errorMap[ERR_PEERGROUP_DB_ERROR]=std::string("err.peergroup.db.error");
    errorMap[ERR_PEERGROUP_MANDATORY_PEERGROUPNAME_MISSING]=std::string("err.peergroup.mandatory.peergroupname.missing");
    errorMap[ERR_PEERGROUP_PEER_GROUP_ALREADY_PRESENT]=std::string("err.peergroup.peer.group.already.present");
    errorMap[DEL_LBALGO_ERR_DB_ERROR]=std::string("del.lbalgo.err.db.error");
    errorMap[DEL_LBALGO_ERR_LBMETHOD_DOESNT_EXIST]=std::string("del.lbalgo.err.lbmethod.doesnt.exist");
    errorMap[ADD_LBALGO_ERR_DB_ERROR]=std::string("add.lbalgo.err.db.error");
    errorMap[ADD_LBALGO_ERR_MANDATORY_LBMETHOD_MISSING]=std::string("add.lbalgo.err.mandatory.lbmethod.missing");
    errorMap[ADD_LBALGO_ERR_LBALGO_ALREADY_PRESENT]=std::string("add.lbalgo.err.lbalgo.already.present");
    errorMap[MOD_LBALGO_ERR_DB_ERROR]=std::string("mod.lbalgo.err.db.error");
    errorMap[MOD_LBALGO_ERR_MANDATORY_LBMETHOD_MISSING]=std::string("mod.lbalgo.err.mandatory.lbmethod.missing");
    errorMap[MOD_LBALGO_ERR_LBALGO_NOT_PRESENT]=std::string("mod.lbalgo.err.lbalgo.not.present");
    errorMap[ERR_LBALGO_DB_ERROR]=std::string("err.lbalgo.db.error");
    errorMap[ERR_LBALGO_MANDATORY_LBMETHOD_MISSING]=std::string("err.lbalgo.mandatory.lbmethod.missing");
    errorMap[ERR_LBALGO_PEER_GROUP_NOT_PRESENT]=std::string("err.lbalgo.peer.group.not.present");
    errorMap[MOD_PEERGROUP_ERR_DB_ERROR]=std::string("mod.peergroup.err.db.error");
    errorMap[MOD_PEERGROUP_ERR_MANDATORY_PARAM_MISSING]=std::string("mod.peergroup.err.mandatory.param.missing");
    errorMap[MOD_PEERGROUP_ERR_PEER_GROUP_DOESNT_EXIST]=std::string("mod.peergroup.err.peer.group.doesnt.exist");
    errorMap[DEL_PEERGROUP_ERR_DB_ERROR]=std::string("del.peergroup.err.db.error");
    errorMap[DEL_PEERGROUP_ERR_PEER_GROUP_DOESNT_EXIST]=std::string("del.peergroup.err.peer.group.doesnt.exist");
    errorMap[ADD_PEERCONFIG_ERR_PEER_GROUP_DOESNT_EXIST]=std::string("add.peerconfig.err.peer.group.doesnt.exist");
    errorMap[ADD_PEERCONFIG_ERR_PEER_DOESNT_EXIST]=std::string("add.peerconfig.err.peer.doesnt.exist");
    errorMap[ADD_PEERCONFIG_ERR_MANDATORY_PARAM_MISSING]=std::string("add.peerconfig.err.mandatory.param.missing");
    errorMap[ADD_PEERCONFIG_ERR_DB_ERROR]=std::string("add.peerconfig.err.db.error");
    errorMap[ADD_PEERCONFIG_ERR_PEER_WITH_REALM_ALREADY_PRESENT_IN_GROUP]=std::string("add.peerconfig.err.peer.with.realm.already.present.in.group");
    errorMap[MOD_PEERCONFIG_ERR_PEER_GROUP_DOESNT_EXIST]=std::string("mod.peerconfig.err.peer.group.doesnt.exist");
    errorMap[MOD_PEERCONFIG_ERR_PEER_DOESNT_EXIST]=std::string("mod.peerconfig.err.peer.doesnt.exist");
    errorMap[MOD_PEERCONFIG_ERR_MANDATORY_PARAM_MISSING]=std::string("mod.peerconfig.err.mandatory.param.missing");
    errorMap[MOD_PEERCONFIG_ERR_DB_ERROR]=std::string("mod.peerconfig.err.db.error");
    errorMap[MOD_PEERCONFIG_ERR_PEER_WITH_REALM_NOT_PRESENT_IN_GROUP]=std::string("mod.peerconfig.err.peer.with.realm.not.present.in.group");
    errorMap[ERR_PEERCONFIG_PEER_GROUP_DOESNT_EXIST]=std::string("err.peerconfig.peer.group.doesnt.exist");
    errorMap[ERR_PEERCONFIG_PEER_DOESNT_EXIST]=std::string("err.peerconfig.peer.doesnt.exist");
    errorMap[ERR_PEERCONFIG_MANDATORY_PEERGROUP_MISSING]=std::string("err.peerconfig.mandatory.peergroup.missing");
    errorMap[ERR_PEERCONFIG_MANDATORY_PEER_MISSING]=std::string("err.peerconfig.mandatory.peer.missing");
    errorMap[ERR_PEERCONFIG_MANDATORY_REALM_MISSING]=std::string("err.peerconfig.mandatory.realm.missing");
    errorMap[ERR_PEERCONFIG_DB_ERROR]=std::string("err.peerconfig.db.error");
    errorMap[ERR_PEERCONFIG_PEER_WITH_REALM_NOT_PRESENT_IN_GROUP]=std::string("err.peerconfig.peer.with.realm.not.present.in.group");
    errorMap[DEL_PEERCONFIG_ERR_PEER_GROUP_DOESNT_EXIST]=std::string("del.peerconfig.err.peer.group.doesnt.exist");
    errorMap[DEL_PEERCONFIG_ERR_PEER_DOESNT_EXIST]=std::string("del.peerconfig.err.peer.doesnt.exist");
    errorMap[DEL_PEERCONFIG_ERR_MANDATORY_PARAM_MISSING]=std::string("del.peerconfig.err.mandatory.param.missing");
    errorMap[DEL_PEERCONFIG_ERR_DB_ERROR]=std::string("del.peerconfig.err.db.error");
    errorMap[DEL_PEERCONFIG_ERR_PEER_WITH_REALM_NOT_PRESENT_IN_GROUP]=std::string("del.peerconfig.err.peer.with.realm.not.present.in.group");
    errorMap[GET_PEERGROUP_ERR_DB_ERROR]=std::string("get.peergroup.err.db.error");
    errorMap[GET_PEERGROUP_ERR_NO_DATA_PRESENT]=std::string("get.peergroup.err.no.data.present");
    errorMap[GET_DICTID_ERR_DB_ERROR]=std::string("get.dictid.err.db.error");
    errorMap[GET_DICTID_ERR_NO_DATA_PRESENT]=std::string("get.dictid.err.no.data.present");
    errorMap[GET_PEERCONFIG_ERR_DB_ERROR]=std::string("get.peerconfig.err.db.error");
    errorMap[GET_PEERCONFIG_ERR_NO_DATA_PRESENT]=std::string("get.peerconfig.err.no.data.present");
    errorMap[GET_LBALGO_ERR_DB_ERROR]=std::string("get.lbalgo.err.db.error");
    errorMap[GET_LBALGO_ERR_NO_DATA_PRESENT]=std::string("get.lbalgo.err.no.data.present");
    errorMap[GET_PEER_ERR_DB_ERROR]=std::string("get.peer.err.db.error");
    errorMap[GET_PEER_ERR_NO_DATA_PRESENT]=std::string("get.peer.err.no.data.present");
    errorMap[GET_REALMOFPEER_ERR_DB_ERROR]=std::string("get.realmofpeer.err.db.error");
    errorMap[GET_REALMOFPEER_ERR_NO_DATA_PRESENT]=std::string("get.realmofpeer.err.no.data.present");
    errorMap[GET_REALM_ERR_DB_ERROR]=std::string("get.realm.err.db.error");
    errorMap[GET_REALM_ERR_NO_DATA_PRESENT]=std::string("get.realm.err.no.data.present");
    errorMap[GET_DEST_ERR_DB_ERROR]=std::string("get.dest.err.db.error");
    errorMap[GET_DEST_ERR_NO_DATA_PRESENT]=std::string("get.dest.err.no.data.present");
    errorMap[GET_DEST_ERR_PEER_NOT_PRESENT]=std::string("get.dest.err.peer.not.present");
    errorMap[GET_DEST_ERR_REALM_NOT_PRESENT]=std::string("get.dest.err.realm.not.present");
    errorMap[GET_DEFROUTE_ERR_DB_ERROR]=std::string("get.defroute.err.db.error");
    errorMap[GET_DEFROUTE_ERR_NO_DATA_PRESENT]=std::string("get.defroute.err.no.data.present");
    errorMap[GET_HOST_ERR_DB_ERROR]=std::string("get.host.err.db.error");
    errorMap[GET_HOST_ERR_NO_DATA_PRESENT]=std::string("get.host.err.no.data.present");
    errorMap[USER_AUTHENTICATION_ERR_INVALID_USERNAME]=std::string("user.authentication.err.invalid.username");
    errorMap[USER_AUTHENTICATION_ERR_INVALID_PASSWORD]=std::string("user.authentication.err.invalid.password");
    errorMap[GET_USER_ERR_DB_ERROR]=std::string("get.user.err.db.error");
    errorMap[GET_USER_ERR_NO_DATA_PRESENT]=std::string("get.user.err.no.data.present");
    errorMap[ADD_USER_ERR_DB_ERROR]=std::string("add.user.err.db.error");
    errorMap[ADD_USER_ERR_USERNAME_ALREADY_PRESENT]=std::string("add.user.err.username.already.present");
    errorMap[MOD_USER_ERR_DB_ERROR]=std::string("mod.user.err.db.error");
    errorMap[MOD_USER_ERR_USERNAME_NOT_PRESENT]=std::string("mod.user.err.username.not.present");
    errorMap[DEL_USER_ERR_DB_ERROR]=std::string("del.user.err.db.error");
    errorMap[DEL_USER_ERR_USERNAME_NOT_PRESENT]=std::string("del.user.err.username.not.present");
    errorMap[GET_AVAMGR_ERR_DB_ERROR]=std::string("get.avamgr.err.db.error");
    errorMap[GET_AVAMGR_ERR_NO_DATA_PRESENT]=std::string("get.avamgr.err.no.data.present");
    errorMap[SET_AVAMGR_ERR_DB_ERROR]=std::string("set.avamgr.err.db.error");
    errorMap[GET_LOGCONFIG_ERR_DB_ERROR]=std::string("get.logconfig.err.db.error");
    errorMap[GET_LOGCONFIG_ERR_NO_DATA_PRESENT]=std::string("get.logconfig.err.no.data.present");
    errorMap[SET_LOGCONFIG_ERR_DB_ERROR]=std::string("set.logconfig.err.db.error");
    errorMap[SET_LOGCONFIG_ERR_MANDATORY_PARAM_COMPONENT_MISSING]=std::string("set.logconfig.err.mandatory.param.component.missing");
    errorMap[SET_LOGCONFIG_ERR_COMPONENT_ALREADY_PRESENT]=std::string("set.logconfig.err.component.already.present");
    errorMap[MOD_LOGCONFIG_ERR_DB_ERROR]=std::string("mod.logconfig.err.db.error");
    errorMap[MOD_LOGCONFIG_ERR_MANDATORY_PARAM_COMPONENT_MISSING]=std::string("mod.logconfig.err.mandatory.param.component.missing");
    errorMap[MOD_LOGCONFIG_ERR_COMPONENT_NOT_PRESENT]=std::string("mod.logconfig.err.component.not.present");
    errorMap[GET_TRACECONFIG_ERR_DB_ERROR]=std::string("get.traceconfig.err.db.error");
    errorMap[GET_TRACECONFIG_ERR_NO_DATA_PRESENT]=std::string("get.traceconfig.err.no.data.present");
    errorMap[SET_TRACECONFIG_ERR_DB_ERROR]=std::string("set.traceconfig.err.db.error");
    errorMap[SET_TRACECONFIG_ERR_MANDATORY_PARAM_FILTERNAME_MISSING]=std::string("set.traceconfig.err.mandatory.param.filtername.missing");
    errorMap[SET_TRACECONFIG_ERR_MANDATORY_PARAM_MISSING]=std::string("set.traceconfig.err.mandatory.param.missing");
    errorMap[SET_TRACECONFIG_ERR_FILTER_ALREADY_PRESENT]=std::string("set.traceconfig.err.filter.already.present");
    errorMap[SET_TRACECONFIG_ERR_REACHED_MAX_FILTER]=std::string("set.traceconfig.err.reached.max.filter");
    errorMap[MOD_TRACECONFIG_ERR_DB_ERROR]=std::string("mod.traceconfig.err.db.error");
    errorMap[MOD_TRACECONFIG_ERR_MANDATORY_PARAM_FILTERNAME_MISSING]=std::string("mod.traceconfig.err.mandatory.param.filtername.missing");
    errorMap[MOD_TRACECONFIG_ERR_FILTER_NOT_PRESENT]=std::string("mod.traceconfig.err.filter.not.present");
    errorMap[ENABLE_TRACECONFIG_ERR_DB_ERROR]=std::string("enable.traceconfig.err.db.error");
    errorMap[ENABLE_TRACECONFIG_ERR_MANDATORY_PARAM_ENABLE_MISSING]=std::string("enable.traceconfig.err.mandatory.param.enable.missing");
    errorMap[DEL_TRACECONFIG_ERR_DB_ERROR]=std::string("del.traceconfig.err.db.error");
    errorMap[DEL_TRACECONFIG_ERR_MANDATORY_PARAM_FILTERNAME_MISSING]=std::string("del.traceconfig.err.mandatory.param.filtername.missing");
    errorMap[DEL_TRACECONFIG_ERR_FILTER_NOT_PRESENT]=std::string("del.traceconfig.err.filter.not.present");
    errorMap[ERROR_TRACECONFIG_DB_ERROR]=std::string("error.traceconfig.db.error");
    errorMap[ERROR_TRACECONFIG_MANDATORY_PARAM_ENABLE_MISSING]=std::string("error.traceconfig.mandatory.param.enable.missing");
    errorMap[ERR_HOST_TRANSPORT_DB_ERROR]=std::string("err.host.transport.db.error");
    errorMap[SET_ASFCONFIG_ERR_DB_ERROR]=std::string("set.asfconfig.err.db.error");
    errorMap[SET_ASFCONFIG_ERR_COMPONENT_ALREADY_PRESENT]=std::string("set.asfconfig.err.component.already.present");
    errorMap[MOD_ASFCONFIG_ERR_DB_ERROR]=std::string("mod.asfconfig.err.db.error");
    errorMap[MOD_ASFCONFIG_ERR_COMPONENT_NOT_PRESENT]=std::string("mod.asfconfig.err.component.not.present");
    errorMap[GET_ASFCONFIG_ERR_NO_DATA_PRESENT]=std::string("get.asfconfig.err.no.data.present");
    errorMap[GET_ASFCONFIG_ERR_DB_ERROR]=std::string("get.asfconfig.err.db.error");
    errorMap[ERR_ASFGROUP_DB_ERROR]=std::string("err.asfgroup.db.error");
    errorMap[ERR_ASFGROUP_MANDATORY_PARAM_GROUPNAME_MISSING]=std::string("err.asfgroup.mandatory.param.groupname.missing");
    errorMap[DEL_ASFCONFIG_ERR_DB_ERROR]=std::string("del.asfconfig.err.db.error");
    errorMap[DEL_ASFCONFIG_ERR_FILTER_NOT_PRESENT]=std::string("del.asfconfig.err.filter.not.present");
    errorMap[SET_ASFRESPTIME_ERR_DB_ERROR]=std::string("set.asfresptime.err.db.error");
    errorMap[SET_ASF_ERR_RESPTIME_ALREADY_PRESENT]=std::string("set.asf.err.resptime.already.present");
    errorMap[GET_ASFRESPTIME_ERR_DB_ERROR]=std::string("get.asfresptime.err.db.error");
    errorMap[GET_ASFRESPTIME_ERR_NO_DATA_PRESENT]=std::string("get.asfresptime.err.no.data.present");
    errorMap[GET_SCTPCONFIG_ERR_DB_ERROR]=std::string("get.sctpconfig.err.db.error");
    errorMap[GET_SCTPCONFIG_ERR_NO_DATA_PRESENT]=std::string("get.sctpconfig.err.no.data.present");
    errorMap[GET_TRUSTEDCA_ERR_DB_ERROR]=std::string("get.trustedca.err.db.error");
    errorMap[GET_TRUSTEDCA_ERR_NO_DATA_PRESENT]=std::string("get.trustedca.err.no.data.present");
    errorMap[GET_STACKGENERAL_ERR_DB_ERROR]=std::string("get.stackgeneral.err.db.error");
    errorMap[GET_STACKGENERAL_ERR_NO_DATA_PRESENT]=std::string("get.stackgeneral.err.no.data.present");
    errorMap[GET_TLSCONFIG_ERR_DB_ERROR]=std::string("get.tlsconfig.err.db.error");
    errorMap[GET_TLSCONFIG_ERR_NO_DATA_PRESENT]=std::string("get.tlsconfig.err.no.data.present");
    errorMap[GET_CIPHERSUITE_ERR_DB_ERROR]=std::string("get.ciphersuite.err.db.error");
    errorMap[GET_CIPHERSUITE_ERR_NO_DATA_PRESENT]=std::string("get.ciphersuite.err.no.data.present");
    errorMap[SET_SCTPCONFIG_ERR_DB_ERROR]=std::string("set.sctpconfig.err.db.error");
    errorMap[SET_STACKGENERAL_ERR_DB_ERROR]=std::string("set.stackgeneral.err.db.error");
    errorMap[SET_TLSCONFIG_ERR_DB_ERROR]=std::string("set.tlsconfig.err.db.error");
    errorMap[ADD_TRUSTEDCA_ERR_DB_ERROR]=std::string("add.trustedca.err.db.error");
    errorMap[ADD_TRUSTEDCA_MANDATORY_PARAM_CAFILE_MISSING]=std::string("add.trustedca.mandatory.param.cafile.missing");
    errorMap[ADD_TRUSTEDCA_ERR_CAFILE_ALREADY_PRESENT]=std::string("add.trustedca.err.cafile.already.present");
    errorMap[MOD_TRUSTEDCA_ERR_DB_ERROR]=std::string("mod.trustedca.err.db.error");
    errorMap[MOD_TRUSTEDCA_MANDATORY_PARAM_CAFILE_MISSING]=std::string("mod.trustedca.mandatory.param.cafile.missing");
    errorMap[MOD_TRUSTEDCA_ERR_CAFILE_NOT_PRESENT]=std::string("mod.trustedca.err.cafile.not.present");
    errorMap[DEL_TRUSTEDCA_ERR_DB_ERROR]=std::string("del.trustedca.err.db.error");
    errorMap[DEL_ASSOCTRUSTEDCA_ERR_DB_ERROR]=std::string("del.assoctrustedca.err.db.error");
    errorMap[DEL_TRUSTEDCA_MANDATORY_PARAM_CAFILE_MISSING]=std::string("del.trustedca.mandatory.param.cafile.missing");
    errorMap[DEL_TRUSTEDCA_ERR_CAFILE_NOT_PRESENT]=std::string("del.trustedca.err.cafile.not.present");
    errorMap[DEL_ASSOCTRUSTEDCA_ERR_CAFILE_NOT_PRESENT]=std::string("del.assoctrustedca.err.cafile.not.present");
    errorMap[ERR_TRUSTEDCA_ERR_DB_ERROR]=std::string("err.trustedca.err.db.error");
    errorMap[ERR_TRUSTEDCA_MANDATORY_PARAM_CAFILE_MISSING]=std::string("err.trustedca.mandatory.param.cafile.missing");
    errorMap[MOD_CIPHERSUITE_ERR_DB_ERROR]=std::string("mod.ciphersuite.err.db.error");
    errorMap[MOD_CIPHERSUITE_ERR_CIPHER_NOT_PRESENT]=std::string("mod.ciphersuite.err.cipher.not.present");
    errorMap[DEL_HOST_MULTIHOMING_ERR_DB_ERROR]=std::string("del.host.multihoming.err.db.error");
    errorMap[DEL_HOST_MULTIHOMING_SECONDARY_IP_NOT_PRESENT]=std::string("del.host.multihoming.secondary.ip.not.present");
    errorMap[ADD_HOST_MULTIHOMING_ERR_DB_ERROR]=std::string("add.host.multihoming.err.db.error");
    errorMap[ADD_HOST_MULTIHOMING_SECONDARY_IP_ALREADY_PRESENT]=std::string("add.host.multihoming.secondary.ip.already.present");
    errorMap[ADD_HOST_MULTIHOMING_SECONDARY_IP_REACHED_MAX_LIMIT]=std::string("add.host.multihoming.secondary.ip.reached.max.limit");
    errorMap[ADD_SECONDARY_ERR_IP_ALREADY_ASSOCIATED]=std::string("add.secondary.err.ip.already.associated");
    errorMap[ADD_SECONDARYIP_ERR_DB_ERROR]=std::string("add.secondaryip.err.db.error");
    errorMap[ADD_SECONDARY_ERR_IP_MAX_COUNT_REACHED]=std::string("add.secondary.err.ip.max.count.reached");
    errorMap[DEL_SECONDARYIP_ERR_NOT_ASSOCIATED_WITH_PEER]=std::string("del.secondaryip.err.not.associated.with.peer");
    errorMap[DEL_SECONDARYIP_ERR_DB_ERROR]=std::string("del.secondaryip.err.db.error");
    errorMap[DEL_HOST_LAST_TRANSPORT_ENTRY]=std::string("del.host.last.transport.entry");
    errorMap[GET_STATIC_ROUTING_ERR_DB_ERROR]=std::string("get.static.routing.err.db.error");
    errorMap[GET_STATIC_ROUTING_CONFIG_ERR_DB_ERROR]=std::string("get.static.routing.config.err.db.error");
    errorMap[GET_STATIC_ROUTING_ERR_NO_DATA_PRESENT]=std::string("get.static.routing.err.no.data.present");
    errorMap[MOD_STATIC_ROUTING_ERR_DB_ERROR]=std::string("mod.static.routing.err.db.error");
    errorMap[MOD_STATIC_ROUTING_ERR_DB_ERROR]=std::string("mod.static.routing.err.db.error");
    errorMap[MOD_STATIC_ROUTING_ERR_ROUTE_NOT_PRESENT]=std::string("mod.static.routing.err.route.not.present");
    errorMap[ADD_STATIC_ROUTING_ERR_DB_ERROR]=std::string("add.static.routing.err.db.error");
    errorMap[ADD_STATIC_ROUTING_ERR_DB_ERROR]=std::string("add.static.routing.err.db.error");
    errorMap[ADD_STATIC_ROUTING_ERR_ROUTE_ALREADY_PRESENT]=std::string("add.static.routing.err.route.already.present");
    errorMap[DEL_STATIC_ROUTING_ERR_DB_ERROR]=std::string("del.static.routing.err.db.error");
    errorMap[DEL_STATIC_ROUTING_ERR_DB_ERROR]=std::string("del.static.routing.err.db.error");
    errorMap[DEL_STATIC_ROUTING_ERR_ROUTE_DOESNT_EXIST]=std::string("del.static.routing.err.route.doesnt.exist");
    errorMap[ERR_STATIC_ROUTING_MANDATORY_PARAM_PEERNAME_MISSING]=std::string("err.static.routing.mandatory.param.peername.missing");
    errorMap[ERR_STATIC_ROUTING_MANDATORY_PARAM_REALMNAME_MISSING]=std::string("err.static.routing.mandatory.param.realmname.missing");
    errorMap[ERR_STATIC_ROUTING_MANDATORY_PARAM_DESTINATION_HOST_MISSING]=std::string("err.static.routing.mandatory.param.destination.host.missing");
    errorMap[ERR_STATIC_ROUTING_MANDATORY_PARAM_DESTINATION_REALM_MISSING]=std::string("err.static.routing.mandatory.param.destination.realm.missing");
    errorMap[SET_PEER_ERR_IP_AND_PORT_ALREADY_PRESENT]=std::string("set.peer.err.ip.and.port.already.present");
    errorMap[SET_PEER_ERR_IP_AND_SECUREPORT_ALREADY_PRESENT]=std::string("set.peer.err.ip.and.secureport.already.present");
    errorMap[ADD_SECONDARYIP_ERR_PEER_NOT_PRESENT]=std::string("add.secondaryip.err.peer.not.present");
    errorMap[ADD_DICTID_ERR_INVALID_DICTNAME]=std::string("add.dictid.err.invalid.dictname");
    errorMap[DEL_DICTID_ERR_INVALID_DICTNAME]=std::string("del.dictid.err.invalid.dictname");
    errorMap[DEL_DICTID_ERR_PEER_NOT_PRESENT]=std::string("del.dictid.err.peer.not.present");
    errorMap[DEL_ALTPEER_ERR_ALTPEER_NOT_CONFIGURED]=std::string("del.altpeer.err.altpeer.not.configured");
    errorMap[SET_DEST_ERR_PEER_NOT_PRESENT]=std::string("set.dest.err.peer.not.present");
    errorMap[MOD_DEST_ERR_REALM_NOT_PRESENT]=std::string("mod.dest.err.realm.not.present");
    errorMap[MOD_DEST_ERR_PEER_NOT_PRESENT]=std::string("mod.dest.err.peer.not.present");
    errorMap[SET_DEFROUTE_ERR_REALM_NOT_PRESENT]=std::string("set.defroute.err.realm.not.present");
    errorMap[DEL_REALM_ERR_PART_OF_DCCA_CONFIG]=std::string("del.realm.err.part.of.dcca.config");
    errorMap[DEL_REALM_ERR_PART_OF_TRANSLATOR_RULE_CONFIG]=std::string("del.realm.err.part.of.translator.rule.config");
    errorMap[SET_DEFROUTE_ERR_PEER_NOT_PRESENT]=std::string("set.defroute.err.peer.not.present");
    errorMap[ADD_PEERGROUP_ERR_LBALGO_INVALID]=std::string("add.peergroup.err.lbalgo.invalid");
    errorMap[MOD_PEERGROUP_ERR_LBALGO_INVALID]=std::string("mod.peergroup.err.lbalgo.invalid");
    errorMap[DEL_PEERGROUP_ERR_LBALGO_INVALID]=std::string("del.peergroup.err.lbalgo.invalid");
    errorMap[ADD_USER_ERR_INVALID_ROLE]=std::string("add.user.err.invalid.role");
    errorMap[MOD_USER_ERR_INVALID_ROLE]=std::string("mod.user.err.invalid.role");
    errorMap[DEL_USER_ERR_INVALID_ROLE]=std::string("del.user.err.invalid.role");
    errorMap[SET_HOST_TRANSPORT_ERR_INVALID_LOCALHOST]=std::string("set.host.transport.err.invalid.localhost");
    errorMap[DEL_HOST_TRANSPORT_ERR_INVALID_LOCALHOST]=std::string("del.host.transport.err.invalid.localhost");
    errorMap[DEL_HOST_MULTIHOMING_INVALID_LOCALHOST]=std::string("del.host.multihoming.invalid.localhost");
    errorMap[ADD_HOST_MULTIHOMING_INVALID_LOCALHOST]=std::string("add.host.multihoming.invalid.localhost");
    errorMap[SET_ASFCONFIG_ERR_LBMETHOD_NOT_SUPPORTED]=std::string("set.asfconfig.err.lbmethod.not.supported");
    errorMap[MOD_ASFCONFIG_ERR_LBMETHOD_NOT_SUPPORTED]=std::string("mod.asfconfig.err.lbmethod.not.supported");
    errorMap[DEL_ASFCONFIG_ERR_LBMETHOD_NOT_SUPPORTED]=std::string("del.asfconfig.err.lbmethod.not.supported");
    errorMap[MOD_STATIC_ROUTING_ERR_PEER_NOT_CONFIGURED]=std::string("mod.static.routing.err.peer.not.configured");
    errorMap[ADD_STATIC_ROUTING_ERR_PEER_NOT_CONFIGURED]=std::string("add.static.routing.err.peer.not.configured");
    errorMap[DEL_STATIC_ROUTING_ERR_PEER_NOT_CONFIGURED]=std::string("del.static.routing.err.peer.not.configured");
    errorMap[GET_PEERGROUP_ERR_NO_PEERGROUP_PRESENT]=std::string("get.peergroup.err.no.peergroup.present");
    errorMap[GET_STATIC_ROUTING_ERR_NO_STATIC_ROUTE_PRESENT]=std::string("get.static.routing.err.no.static.route.present");
    errorMap[GET_PEER_ERR_NO_PEER_PRESENT]=std::string("get.peer.err.no.peer.present");
    errorMap[GET_REALM_ERR_NO_REALM_PRESENT]=std::string("get.realm.err.no.realm.present");
    errorMap[GET_PEERCONFIG_ERR_NO_PEERCONFIG_PRESENT]=std::string("get.peerconfig.err.no.peerconfig.present");
    errorMap[DEL_DICTID_LAST_DICTIONARY_ENTRY]=std::string("del.dictid.last.dictionary.entry");
    errorMap[SET_HOST_TRANSPORT_ERR_INVALID_COMBINATION_OF_TYPE_AND_PORT]=std::string("set.host.transport.err.invalid.combination.of.type.and.port");
    errorMap[SET_HOST_TRANSPORT_ERR_DUPLICATE_ENTRY_OF_TRANSPORT_CONFIG]=std::string("set.host.transport.err.duplicate.entry.of.transport.config");
    errorMap[DEL_PEER_ERR_USED_AS_ALTERNATE_PEER]=std::string("del.peer.err.used.as.alternate.peer");
    errorMap[GET_LOCK_ERR_RESOURSE_BUSY]=std::string("get.lock.err.resourse.busy");

}
