/* ********************************-*-C-*-************************************
 * *                                                                          *
 * *          Copyright 2012 Diametriq, LLC All Rights Reserved.              *
 * *            Manufactured in the United States of America.                 *
 * *      1990 W. New Haven Ste. 303, Melbourne, Florida, 32904 U.S.A.        *
 * *                                                                          *
 * *   This product and related documentation is protected by copyright and   *
 * *   distributed under licenses restricting its use, copying, distribution  *
 * *   and decompilation.  No part of this product or related documentation   *
 * *   may be reproduced in any form by any means without prior written       *
 * *   authorization of Diametriq and its licensors, if any.                  *
 * *                                                                          *
 * *   RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the      *
 * *   government is subject to restrictions as set forth in subparagraph     *
 * *   (c)(1)(ii) of the Rights in Technical Data and Computer Software       *
 * *   clause at DFARS 252.227-7013 and FAR 52.227-19.                        *
 * *                                                                          *
 * ****************************************************************************/


#include <string>
#include <map>
#include "IwfErrorResp.h"
#include "ErrorResp.h"

extern  std::map<int,std::string> iwfErrorMap;

void generate_iwf_error_map()
{
    iwfErrorMap[CONFIG_COMMON_ERR_NO_INPUT_PARAMS]=std::string("config.common.err.no.input.params");
    iwfErrorMap[CONFIG_COMMON_ERR_GENERIC_ERROR]=std::string("config.common.err.generic.error");
    iwfErrorMap[CONFIG_COMMON_ERR_DB_CONNECTION_FAILED]=std::string("config.common.err.db.connection.failed");
    iwfErrorMap[CONFIG_COMMON_ERR_DB_CONNECTION_REESTABLISH]=std::string("config.common.err.db.connection.reestablish");
    iwfErrorMap[CONFIG_COMMON_ERR_RESPONSE_HAS_NO_PARAMS]=std::string("config.common.err.response.has.no.params");
    iwfErrorMap[CONFIG_COMMON_ERR_STATS_GENERIC_ERROR]=std::string("config.common.err.stats.generic.error");
    iwfErrorMap[CONFIG_COMMON_ERR_STATS_RESET_GENERIC_ERROR]=std::string("config.common.err.stats.reset.generic.error");
    iwfErrorMap[CONFIG_COMMON_ERR_FAIL_TO_GET_CONN_FROM_CONN_POOL]=std::string("config.common.err.fail.to.get.conn.from.conn.pool");
    iwfErrorMap[CONFIG_COMMON_ERR_CMAPI_CONDVAR_TIMEOUT]=std::string("config.common.err.cmapi.condvar.timeout");
    iwfErrorMap[CONFIG_COMMON_MESS_NOT_READY]=std::string("config.common.mess.not.ready");
    iwfErrorMap[CONFIG_COMMON_NOT_ALLOWED_IN_STANDBY]=std::string("config.common.not.allowed.in.standby");
    iwfErrorMap[GENERIC_ERR_USED_IN_ASSOCIATION]=std::string("generic.err.used.in.association");
    iwfErrorMap[GENERIC_ERR_USED_IN_ASSOCIATION_IN_MULTIHOMING_IP]=std::string("generic.err.used.in.association.in.multihoming.ip");
    iwfErrorMap[GENERIC_SCTPENDPOINT_ERR_MULTIHOMING_IP_SAMEAS_PRIMARY_IP]=std::string("generic.sctpendpoint.err.multihoming.ip.sameas.primary.ip");
    iwfErrorMap[GENERIC_ERR_DB_ERROR]=std::string("generic.err.db.error");
    iwfErrorMap[GENERIC_ERR_ASSOCIATIONSET_IN_ACTIVE_STATE]=std::string("generic.err.associationset.in.active.state");
    iwfErrorMap[GENERIC_ASSOCIATION_ERR_MULTIHOMING_IP_MAXCOUNT]=std::string("generic.association.err.multihoming.ip.maxcount");
    iwfErrorMap[ERR_MANDATORY_PARAM_POINTCODE_MISSING]=std::string("err.mandatory.param.pointcode.missing");
    iwfErrorMap[ERR_MANDATORY_PARAM_SSN_MISSING]=std::string("err.mandatory.param.ssn.missing");
    iwfErrorMap[MOD_LOCALHOST_ERR_LOCALHOST_NOT_PRESENT]=std::string("mod.localhost.err.localhost.not.present");
    iwfErrorMap[MOD_LOCALHOST_ERR_SSN_NOT_PRESENT]=std::string("mod.localhost.err.ssn.not.present");
    iwfErrorMap[MOD_LOCALHOST_ERR_DATA_NOT_SET]=std::string("mod.localhost.err.data.not.set");
    iwfErrorMap[MOD_LOCALHOST_ERR_SSN_MAX_COUNT_REACHED]=std::string("mod.localhost.err.ssn.max.count.reached");
    iwfErrorMap[MOD_LOCALHOST_ERR_SSN_HOSTID_ALREADY_MAPPED]=std::string("mod.localhost.err.ssn.hostid.already.mapped");
    iwfErrorMap[MOD_LOCALHOST_ERR_DB_ERROR]=std::string("mod.localhost.err.db.error");
    iwfErrorMap[MOD_LOCALHOST_ERR_ASP_ID_ALREADY_PRESENT]=std::string("mod.localhost.err.asp.id.already.present");
    iwfErrorMap[SET_LOCALHOST_ERR_LOCALHOST_ALREADY_EXISTS]=std::string("set.localhost.err.localhost.already.exists");
    iwfErrorMap[SET_LOCALHOST_ERR_SSN_NOT_PRESENT]=std::string("set.localhost.err.ssn.not.present");
    iwfErrorMap[SET_LOCALHOST_ERR_DATA_NOT_SET]=std::string("set.localhost.err.data.not.set");
    iwfErrorMap[SET_LOCALHOST_ERR_SSN_HOSTID_ALREADY_MAPPED]=std::string("set.localhost.err.ssn.hostid.already.mapped");
    iwfErrorMap[SET_LOCALHOST_ERR_SSN_MAX_COUNT_REACHED]=std::string("set.localhost.err.ssn.max.count.reached");
    iwfErrorMap[SET_LOCALHOST_ERR_DB_ERROR]=std::string("set.localhost.err.db.error");
    iwfErrorMap[SET_LOCALSSN_ERR_DB_ERROR]=std::string("set.localssn.err.db.error");
    iwfErrorMap[SET_LOCALSSNMAPPING_ERR_DB_ERROR]=std::string("set.localssnmapping.err.db.error");
    iwfErrorMap[DEL_LOCALHOST_ERR_SSN_NOT_MAPPED]=std::string("del.localhost.err.ssn.not.mapped");
    iwfErrorMap[DEL_LOCALHOST_ERR_SSN_NOT_PRESENT]=std::string("del.localhost.err.ssn.not.present");
    iwfErrorMap[DEL_LOCALHOST_ERR_DATA_NOT_SET]=std::string("del.localhost.err.data.not.set");
    iwfErrorMap[DEL_LOCALHOST_ERR_DB_ERROR]=std::string("del.localhost.err.db.error");
    iwfErrorMap[DEL_LOCALSSNMAPPING_ERR_DB_ERROR]=std::string("del.localssnmapping.err.db.error");
    iwfErrorMap[DEL_LOCALHOST_ERR_LAST_SSN_NOT_ALLOWED_TO_DELETE]=std::string("del.localhost.err.last.ssn.not.allowed.to.delete");
    iwfErrorMap[GET_LOCALHOST_ERR_DB_ERROR]=std::string("get.localhost.err.db.error");
    iwfErrorMap[GET_LOCALHOST_ERR_NO_DATA]=std::string("get.localhost.err.no.data");
    iwfErrorMap[GET_PROTOCOL_ERR_NO_DATA]=std::string("get.protocol.err.no.data");
    iwfErrorMap[GET_SSN_MAPPING_ERR_NO_DATA]=std::string("get.ssn.mapping.err.no.data");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_NOT_PRESENT]=std::string("del.sctpendpoint.err.not.present");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_USED_IN_ASSOCIATION]=std::string("del.sctpendpoint.err.used.in.association");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_USED_IN_ASSOCIATION_AND_ASSOCIATION_IN_MULTIHOMING_IP]=std::string("del.sctpendpoint.err.used.in.association.and.association.in.multihoming.ip");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_DATA_NOT_SET]=std::string("del.sctpendpoint.err.data.not.set");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_DB_ERROR]=std::string("del.sctpendpoint.err.db.error");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_NOT_PRESENT]=std::string("mod.sctpendpoint.err.not.present");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_IP_PORT_ALREADY_PRESENT]=std::string("mod.sctpendpoint.err.ip.port.already.present");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_ASSOCIATION_IN_ACTIVE_STATE]=std::string("mod.sctpendpoint.err.association.in.active.state");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_DB_ERROR]=std::string("mod.sctpendpoint.err.db.error");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_DATA_NOT_SET]=std::string("mod.sctpendpoint.err.data.not.set");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_USED_IN_ASSOCIATION]=std::string("mod.sctpendpoint.err.used.in.association");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_ALREADY_PRESENT]=std::string("add.sctpendpoint.err.already.present");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_IP_PORT_ALREADY_PRESENT]=std::string("add.sctpendpoint.err.ip.port.already.present");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_DB_ERROR]=std::string("add.sctpendpoint.err.db.error");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_DATA_NOT_SET]=std::string("add.sctpendpoint.err.data.not.set");
    iwfErrorMap[GET_SCTPENDPOINT_ERR_DB_ERROR]=std::string("get.sctpendpoint.err.db.error");
    iwfErrorMap[GET_SCTPENDPOINT_ERR_NO_DATA]=std::string("get.sctpendpoint.err.no.data");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_NOT_PRESENT]=std::string("del.sctpprofile.err.not.present");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_USER_CANNOT_DELETE_DEFAULT_CONFIGURATION]=std::string("del.sctpprofile.err.user.cannot.delete.default.configuration");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_USED_IN_ASSOCIATION]=std::string("del.sctpprofile.err.used.in.association");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_USED_IN_ASSOCIATION_AND_ASSOCIATION_IN_MUTIHOMING_IP]=std::string("del.sctpprofile.err.used.in.association.and.association.in.mutihoming.ip");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_DATA_NOT_SET]=std::string("del.sctpprofile.err.data.not.set");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_DB_ERROR]=std::string("del.sctpprofile.err.db.error");
    iwfErrorMap[DEL_SCTPPROFILE_ERR_DEFAULT_PROFILE_NOT_ALLOWED]=std::string("del.sctpprofile.err.default.profile.not.allowed");
    iwfErrorMap[MOD_SCTPPROFILE_ERR_NOT_PRESENT]=std::string("mod.sctpprofile.err.not.present");
    iwfErrorMap[MOD_SCTPPROFILE_ERR_ASSOCIATION_IN_ACTIVE_STATE]=std::string("mod.sctpprofile.err.association.in.active.state");
    iwfErrorMap[MOD_SCTPPROFILE_ERR_DB_ERROR]=std::string("mod.sctpprofile.err.db.error");
    iwfErrorMap[MOD_SCTPPROFILE_ERR_DATA_NOT_SET]=std::string("mod.sctpprofile.err.data.not.set");
    iwfErrorMap[ADD_SCTPPROFILE_ERR_ALREADY_PRESENT]=std::string("add.sctpprofile.err.already.present");
    iwfErrorMap[ADD_SCTPPROFILE_ERR_DB_ERROR]=std::string("add.sctpprofile.err.db.error");
    iwfErrorMap[ADD_SCTPPROFILE_ERR_DATA_NOT_SET]=std::string("add.sctpprofile.err.data.not.set");
    iwfErrorMap[GET_SCTPPROFILE_ERR_DB_ERROR]=std::string("get.sctpprofile.err.db.error");
    iwfErrorMap[GET_SCTPPROFILE_ERR_NO_DATA]=std::string("get.sctpprofile.err.no.data");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_NO_PRESENT]=std::string("del.associationset.err.no.present");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_ASSOCIATIONSET_IN_ACTIVE_STATE]=std::string("del.associationset.err.associationset.in.active.state");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_USED_IN_ROUTE]=std::string("del.associationset.err.used.in.route");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_IS_ASSOCIATED]=std::string("del.associationset.err.is.associated");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_DB_ERROR]=std::string("del.associationset.err.db.error");
    iwfErrorMap[DEL_ASSOCIATIONSET_ERR_DATA_NOT_SET]=std::string("del.associationset.err.data.not.set");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_NO_PRESENT]=std::string("mod.associationset.err.no.present");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_ASSOCIATIONSET_IN_ACTIVE_STATE]=std::string("mod.associationset.err.associationset.in.active.state");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_ALREADY_ENABLED]=std::string("mod.associationset.err.already.enabled");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_NOT_CONTAIN_ANY_ASSOCIATION]=std::string("mod.associationset.err.not.contain.any.association");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_DB_ERROR]=std::string("mod.associationset.err.db.error");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_DATA_NOT_SET]=std::string("mod.associationset.err.data.not.set");
    iwfErrorMap[MOD_ASSOCIATIONSET_ERR_ADJPOINTCODE_ALREADY_PRESENT]=std::string("mod.associationset.err.adjpointcode.already.present");
    iwfErrorMap[ADD_ASSOCIATIONSET_ERR_ALREADY_PRESENT]=std::string("add.associationset.err.already.present");
    iwfErrorMap[ADD_ASSOCIATIONSET_ERR_DB_ERROR]=std::string("add.associationset.err.db.error");
    iwfErrorMap[ADD_ASSOCIATIONSET_ERR_DATA_NOT_SET]=std::string("add.associationset.err.data.not.set");
    iwfErrorMap[ADD_ASSOCIATIONSET_ERR_ADJPOINTCODE_ALREADY_PRESENT]=std::string("add.associationset.err.adjpointcode.already.present");
    iwfErrorMap[GET_ASSOCIATIONSET_ERR_DB_ERROR]=std::string("get.associationset.err.db.error");
    iwfErrorMap[GET_ASSOCIATIONSET_ERR_NO_DATA]=std::string("get.associationset.err.no.data");
    iwfErrorMap[GET_ASSOCIATIONSET_MAPPING_ERR_NO_DATA]=std::string("get.associationset.mapping.err.no.data");
    iwfErrorMap[ADD_ASSOCIATION_ERR_ASP_ID_NOT_PRESENT]=std::string("add.association.err.asp.id.not.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_FAILED_AT_BACKEND]=std::string("add.association.err.failed.at.backend");
    iwfErrorMap[ADD_ASSOCIATIONSET_ERR_DATA_NOT_SET]=std::string("add.association.err.data.not.set");
    iwfErrorMap[MOD_ASSOCIATION_ERR_ASP_ID_NOT_PRESENT]=std::string("mod.association.err.asp.id.not.present");
    iwfErrorMap[DEL_ASSOCIATION_ERR_NOT_PRESENT]=std::string("del.association.err.not.present");
    iwfErrorMap[DEL_ASSOCIATION_ERR_ASSOCIATION_IN_ACTIVE_STATE]=std::string("del.association.err.association.in.active.state");
    iwfErrorMap[DEL_ASSOCIATION_ERR_USED_IN_MULTIHOMING_IP]=std::string("del.association.err.used.in.multihoming.ip");
    iwfErrorMap[DEL_ASSOCIATION_ERR_DB_ERROR]=std::string("del.association.err.db.error");
    iwfErrorMap[DEL_ASSOCIATION_ERR_DATA_NOT_SET]=std::string("del.association.err.data.not.set");
    iwfErrorMap[MOD_ASSOCIATION_ERR_NOT_PRESENT]=std::string("mod.association.err.not.present");
    iwfErrorMap[MOD_ASSOCIATION_ERR_ASSOCIATION_IN_ACTIVE_STATE]=std::string("mod.association.err.association.in.active.state");
    iwfErrorMap[MOD_ASSOCIATION_ERR_SCTP_PROFILE_NOT_PRESENT]=std::string("mod.association.err.sctp.profile.not.present");
    iwfErrorMap[MOD_ASSOCIATION_ERR_SCTP_END_POINT_NOT_PRESENT]=std::string("mod.association.err.sctp.end.point.not.present");
    iwfErrorMap[MOD_ASSOCIATION_ERR_MAX_MULTIHOMING_IP]=std::string("mod.association.err.max.multihoming.ip");
    iwfErrorMap[MOD_ASSOCIATION_ERR_ALREADY_ENABLED]=std::string("mod.association.err.already.enabled");
    iwfErrorMap[MOD_ASSOCIATION_ERR_NOT_ASSOCIATED_TO_ANY_ASSOCIATIONSET]=std::string("mod.association.err.not.associated.to.any.associationset");
    iwfErrorMap[MOD_ASSOCIATION_ERR_DB_ERROR]=std::string("mod.association.err.db.error");
    iwfErrorMap[MOD_ASSOCIATION_ERR_DATA_NOT_SET]=std::string("mod.association.err.data.not.set");
    iwfErrorMap[MOD_ASSOCIATION_ERR_MULTIHOMING_IP_ALREADY_PRESENT]=std::string("mod.association.err.multihoming.ip.already.present");
    iwfErrorMap[MOD_ASSOCIATION_ERR_ASSOCIATION_SET_NOT_PRESENT]=std::string("mod.association.err.association.set.not.present");
    iwfErrorMap[MOD_ASSOCIATION_ERR_LOCALENDPOINT_ALREADY_USED_IN_ASSOCIATION]=std::string("mod.association.err.localendpoint.already.used.in.association");
    iwfErrorMap[MOD_ASSOCIATION_ERR_REMOTEENDPOINT_ALREADY_USED_IN_ASSOCIATION]=std::string("mod.association.err.remoteendpoint.already.used.in.association");
    iwfErrorMap[MOD_ASSOCIATION_ERR_SCTP_END_POINTS_ARE_SAME_IN_ASSOCIATION]=std::string("mod.association.err.sctp.end.points.are.same.in.association");
    iwfErrorMap[ADD_ASSOCIATION_ERR_ALREADY_PRESENT]=std::string("add.association.err.already.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_SCTP_PROFILE_NOT_PRESENT]=std::string("add.association.err.sctp.profile.not.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_SCTP_END_POINT_NOT_PRESENT]=std::string("add.association.err.sctp.end.point.not.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_ASSOCIATION_SET_NOT_PRESENT]=std::string("add.association.err.association.set.not.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_MAX_MULTIHOMING_IP]=std::string("add.association.err.max.multihoming.ip");
    iwfErrorMap[ADD_ASSOCIATION_ERR_MULTIHOMING_IP_ALREADY_PRESENT]=std::string("add.association.err.multihoming.ip.already.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_DB_ERROR]=std::string("add.association.err.db.error");
    iwfErrorMap[ADD_ASSOCIATION_ERR_DATA_NOT_SET]=std::string("add.association.err.data.not.set");
    iwfErrorMap[ADD_ASSOCIATION_ERR_ALREADY_ASSOCIATED_TO_ASSOCIATIONSET]=std::string("add.association.err.already.associated.to.associationset");
    iwfErrorMap[ADD_ASSOCIATION_ERR_LOCALENDPOINT_ALREADY_USED_IN_ASSOCIATION]=std::string("add.association.err.localendpoint.already.used.in.association");
    iwfErrorMap[ADD_ASSOCIATION_ERR_REMOTEENDPOINT_ALREADY_USED_IN_ASSOCIATION]=std::string("add.association.err.remoteendpoint.already.used.in.association");
    iwfErrorMap[ADD_ASSOCIATION_ERR_SCTP_END_POINTS_ARE_SAME_IN_ASSOCIATION]=std::string("add.association.err.sctp.end.points.are.same.in.association");
    iwfErrorMap[ADD_ASSOCIATION_MAPPING_ERR_REACHED_MAX_LIMIT]=std::string("add.association.mapping.err.reached.max.limit");
    iwfErrorMap[GET_ASSOCIATION_ERR_DB_ERROR]=std::string("get.association.err.db.error");
    iwfErrorMap[GET_ASSOCIATION_ERR_NO_DATA]=std::string("get.association.err.no.data");
    iwfErrorMap[GET_ASSOCIATION_MULTIHOMING_ERR_NO_DATA]=std::string("get.association.multihoming.err.no.data");
    iwfErrorMap[GET_MULTIHOMINGIP_ERR_NOT_PRESENT]=std::string("get.multihomingip.err.not.present");
    iwfErrorMap[GET_MULTIHOMINGIP_ERR_NO_DATA]=std::string("get.multihomingip.err.no.data");
    iwfErrorMap[DEL_MULTIHOMINGIP_ERR_ASSOCIATION_IN_ACTIVE_STATE]=std::string("del.multihomingip.err.association.in.active.state");
    iwfErrorMap[DEL_MULTIHOMINGIP_ERR_DB_ERROR]=std::string("del.multihomingip.err.db.error");
    iwfErrorMap[DEL_MULTIHOMINGIP_ERR_NOT_SET]=std::string("del.multihomingip.err.not.set");
    iwfErrorMap[DEL_MULTIHOMINGIP_ERR_NOT_PRESENT]=std::string("del.multihomingip.err.not.present");
    iwfErrorMap[DEL_MULTIHOMINGIP_ERR_ENDPOINT_NOT_PRESENT]=std::string("del.multihomingip.err.endpoint.not.present");
    iwfErrorMap[DEL_DESTINATION_ERR_NOT_PRESENT]=std::string("del.destination.err.not.present");
    iwfErrorMap[DEL_DESTINATION_ERR_USED_IN_ROUTE]=std::string("del.destination.err.used.in.route");
    iwfErrorMap[DEL_DESTINATION_ERR_USED_IN_TRANSLATOR_RULE]=std::string("del.destination.err.used.in.translator.rule");
    iwfErrorMap[DEL_DESTINATION_ERR_DB_ERROR]=std::string("del.destination.err.db.error");
    iwfErrorMap[DEL_DESTINATION_ERR_DATA_NOT_SET]=std::string("del.destination.err.data.not.set");
    iwfErrorMap[MOD_DESTINATION_ERR_NOT_PRESENT]=std::string("mod.destination.err.not.present");
    iwfErrorMap[MOD_DESTINATION_ERR_DB_ERROR]=std::string("mod.destination.err.db.error");
    iwfErrorMap[MOD_DESTINATION_ERR_DATA_NOT_SET]=std::string("mod.destination.err.data.not.set");
    iwfErrorMap[MOD_DESTINATION_ERR_USED_IN_ROUTE]=std::string("mod.destination.err.used.in.route");
    iwfErrorMap[MOD_DESTINATION_ERR_USED_IN_TRANSLATOR_RULE]=std::string("mod.destination.err.used.in.translator.rule");
    iwfErrorMap[ADD_DESTINATION_ERR_ALREADY_PRESENT]=std::string("add.destination.err.already.present");
    iwfErrorMap[ADD_DESTINATION_ERR_DB_ERROR]=std::string("add.destination.err.db.error");
    iwfErrorMap[ADD_DESTINATION_ERR_DATA_NOT_SET]=std::string("add.destination.err.data.not.set");
    iwfErrorMap[GET_DESTINATION_ERR_DB_ERROR]=std::string("get.destination.err.db.error");
    iwfErrorMap[GET_DESTINATION_ERR_NO_DATA]=std::string("get.destination.err.no.data");
    iwfErrorMap[DEL_ROUTE_ERR_ROUTE_NOT_PRESENT]=std::string("del.route.err.route.not.present");
    iwfErrorMap[DEL_ROUTE_ERR_ASSOCIATION_SET_NOT_PRESENT]=std::string("del.route.err.association.set.not.present");
    iwfErrorMap[DEL_ROUTE_ERR_DESTINATION_NOT_PRESENT]=std::string("del.route.err.destination.not.present");
    iwfErrorMap[DEL_ROUTE_ERR_ASSOCIATION_SET_IN_ACTIVE_STATE]=std::string("del.route.err.association.set.in.active.state");
    iwfErrorMap[DEL_ROUTE_ERR_DB_ERROR]=std::string("del.route.err.db.error");
    iwfErrorMap[DEL_ROUTE_ERR_DATA_NOT_SET]=std::string("del.route.err.data.not.set");
    iwfErrorMap[MOD_ROUTE_ERR_ROUTE_NOT_PRESENT]=std::string("mod.route.err.route.not.present");
    iwfErrorMap[MOD_ROUTE_ERR_ASSOCIATION_SET_NOT_PRESENT]=std::string("mod.route.err.association.set.not.present");
    iwfErrorMap[MOD_ROUTE_ERR_DESTINATION_NOT_PRESENT]=std::string("mod.route.err.destination.not.present");
    iwfErrorMap[MOD_ROUTE_ERR_ASSOCIATION_SET_ALREADY_HAVE_ROUTE]=std::string("mod.route.err.association.set.already.have.route");
    iwfErrorMap[MOD_ROUTE_ERR_DESTINATION_ALREADY_USED_IN_ROUTE]=std::string("mod.route.err.destination.already.used.in.route");
    iwfErrorMap[MOD_ROUTE_ERR_ASSOCIATION_SET_IN_ACTIVE_STATE]=std::string("mod.route.err.association.set.in.active.state");
    iwfErrorMap[MOD_ROUTE_ERR_DB_ERROR]=std::string("mod.route.err.db.error");
    iwfErrorMap[MOD_ROUTE_ERR_DATA_NOT_SET]=std::string("mod.route.err.data.not.set");
    iwfErrorMap[ADD_ROUTE_ERR_ROUTE_ALREADY_PRESENT]=std::string("add.route.err.route.already.present");
    iwfErrorMap[ADD_ROUTE_ERR_ASSOCIATION_SET_NOT_PRESENT]=std::string("add.route.err.association.set.not.present");
    iwfErrorMap[ADD_ROUTE_ERR_DESTINATION_NOT_PRESENT]=std::string("add.route.err.destination.not.present");
    iwfErrorMap[ADD_ROUTE_ERR_DESTINATION_ALREADY_USED_IN_ROUTE]=std::string("add.route.err.destination.already.used.in.route");
    iwfErrorMap[ADD_ROUTE_ERR_DATA_NOT_SET]=std::string("add.route.err.data.not.set");
    iwfErrorMap[ADD_ROUTE_ERR_ASSOCIATION_SET_ALREADY_HAVE_ROUTE]=std::string("add.route.err.association.set.already.have.route");
    iwfErrorMap[ADD_ROUTE_ERR_DB_ERROR]=std::string("add.route.err.db.error");
    iwfErrorMap[GET_ROUTE_ERR_DB_ERROR]=std::string("get.route.err.db.error");
    iwfErrorMap[GET_ROUTE_ERR_NO_DATA]=std::string("get.route.err.no.data");
    iwfErrorMap[DEL_TRANSRULES_ERR_TRANS_RULE_NOT_PRESENT]=std::string("del.transrules.err.trans.rule.not.present");
    iwfErrorMap[DEL_TRANSRULES_ERR_TRANSLATOR_NOT_PRESENT]=std::string("del.transrules.err.translator.not.present");
    iwfErrorMap[DEL_TRANSRULES_ERR_TRANSLATORTYPE_NOT_PRESENT]=std::string("del.transrules.err.translatortype.not.present");
    iwfErrorMap[DEL_TRANSRULES_ERR_MISSING_MANDATORY_PARAM]=std::string("del.transrules.err.missing.mandatory.param");
    iwfErrorMap[DEL_TRANSRULES_ERR_DB_ERROR]=std::string("del.transrules.err.db.error");
    iwfErrorMap[DEL_TRANSRULES_ERR_DATA_NOT_PRESENT]=std::string("del.transrules.err.data.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_TRANS_RULE_NOT_PRESENT]=std::string("mod.transrules.err.trans.rule.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_TRANSLATOR_NOT_PRESENT]=std::string("mod.transrules.err.translator.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_TRANSLATORTYPE_NOT_PRESENT]=std::string("mod.transrules.err.translatortype.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM]=std::string("mod.transrules.err.missing.mandatory.param");
    iwfErrorMap[MOD_TRANSRULES_ERR_DB_ERROR]=std::string("mod.transrules.err.db.error");
    iwfErrorMap[MOD_TRANSRULES_ERR_DESTINATION_NOT_PRESENT]=std::string("mod.transrules.err.destination.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_DATA_NOT_PRESENT]=std::string("mod.transrules.err.data.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_DESTINATION_HOST_NOT_PRESENT]=std::string("mod.transrules.err.destination.host.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_ALTERNATE_HOST_NOT_PRESENT]=std::string("mod.transrules.err.alternate.host.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_MCC_MNC_APPID_COMBINATION_ALREADY_PRESENT]=std::string("mod.transrules.err.mcc.mnc.appid.combination.already.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_MAX_VPLMN_ID]=std::string("mod.transrules.err.max.vplmn.id");
    iwfErrorMap[MOD_TRANSRULES_ERR_VPLMN_ID_ALREADY_PRESENT]=std::string("mod.transrules.err.vplmn.id.already.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_SERVICE_KEY_ALREADY_PRESENT]=std::string("mod.transrules.err.service.key.already.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_IMSI_PREFIX_AND_SERVICE_KEY_ALREADY_PRESENT]=std::string("mod.transrules.err.imsi.prefix.and.service.key.already.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_PROTOCOL_ACTION_NOT_PRESENT]=std::string("mod.transrules.err.protocol.action.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_SERVICE_KEY_ALREADY_PRESENT]=std::string("add.transrules.err.service.key.already.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_TRANS_RULE_NOT_PRESENT]=std::string("add.transrules.err.trans.rule.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_TRANS_RULE_ALREADY_PRESENT]=std::string("add.transrules.err.trans.rule.already.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_TRANSLATOR_NOT_PRESENT]=std::string("add.transrules.err.translator.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_TRANSLATORTYPE_NOT_PRESENT]=std::string("add.transrules.err.translatortype.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM]=std::string("add.transrules.err.missing.mandatory.param");
    iwfErrorMap[ADD_TRANSRULES_ERR_DB_ERROR]=std::string("add.transrules.err.db.error");
    iwfErrorMap[ADD_TRANSRULES_ERR_DESTINATION_NOT_PRESENT]=std::string("add.transrules.err.destination.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_DESTINATION_HOST_NOT_PRESENT]=std::string("add.transrules.err.destination.host.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_ALTERNATE_HOST_NOT_PRESENT]=std::string("add.transrules.err.alternate.host.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_DATA_NOT_PRESENT]=std::string("add.transrules.err.data.not.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_MCC_MNC_APPID_COMBINATION_ALREADY_PRESENT]=std::string("add.transrules.err.mcc.mnc.appid.combination.already.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_MAX_VPLMN_ID]=std::string("add.transrules.err.max.vplmn.id");
    iwfErrorMap[ADD_TRANSRULES_ERR_VPLMN_ID_ALREADY_PRESENT]=std::string("add.transrules.err.vplmn.id.already.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM_SERVICE_KEY_FOR_SS7]=std::string("add.transrules.err.missing.mandatory.param.service.key.for.ss7");
    iwfErrorMap[ADD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM_MCC_MNC_FOR_SS7]=std::string("add.transrules.err.missing.mandatory.param.mcc.mnc.for.ss7");
    iwfErrorMap[ADD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM_IMSIPREFIX_OR_SERVICEKEY_FOR_SS7]=std::string("add.transrules.err.missing.mandatory.param.imsiprefix.orservicekey.for.ss7");
    iwfErrorMap[ADD_TRANSRULES_ERR_MISSING_MANDATORY_PARAM_PROACTIONRULE_FOR_SS7]=std::string("add.transrules.err.missing.mandatory.param.proactionrule.for.ss7");
    iwfErrorMap[ADD_TRANSRULES_ERR_IMSI_PREFIX_AND_SERVICE_KEY_ALREADY_PRESENT]=std::string("add.transrules.err.imsi.prefix.and.service.key.already.present");
    iwfErrorMap[ADD_TRANSRULES_ERR_PROTOCOL_ACTION_NOT_PRESENT]=std::string("add.transrules.err.protocol.action.not.present");
    iwfErrorMap[GET_TRANSRULES_ERR_DB_ERROR]=std::string("get.transrules.err.db.error");
    iwfErrorMap[GET_TRANSRULES_ERR_NO_DATA]=std::string("get.transrules.err.no.data");
    iwfErrorMap[GET_TRANSLATOR_TYPE_ERR_NO_DATA]=std::string("get.translator.type.err.no.data");
    iwfErrorMap[GET_TRANSLATOR_ERR_NO_DATA]=std::string("get.translator.err.no.data");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_TRANSLATOR_MAPPING_NOT_PRESENT]=std::string("del.maps6aconfig.err.translator.mapping.not.present");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("del.maps6aconfig.err.translator.not.present");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_DB_ERROR]=std::string("del.maps6aconfig.err.db.error");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_TRANSLATOR_MAPPING_NOT_PRESENT]=std::string("mod.maps6aconfig.err.translator.mapping.not.present");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("mod.maps6aconfig.err.translator.not.present");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_DB_ERROR]=std::string("mod.maps6aconfig.err.db.error");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_DATA_NOT_PRESENT]=std::string("mod.maps6aconfig.err.data.not.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_TRANSLATOR_MAPPING_ALREADY_PRESENT]=std::string("add.maps6aconfig.err.translator.mapping.already.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("add.maps6aconfig.err.translator.not.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_DB_ERROR]=std::string("add.maps6aconfig.err.db.error");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_DATA_NOT_PRESENT]=std::string("add.maps6aconfig.err.data.not.present");
    iwfErrorMap[GET_MAPS6ACONFIG_ERR_DB_ERROR]=std::string("get.maps6aconfig.err.db.error");
    iwfErrorMap[GET_MAPS6ACONFIG_ERR_NO_DATA]=std::string("get.maps6aconfig.err.no.data");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_TRANSLATOR_MAPPING_NOT_PRESENT]=std::string("del.s6amapconfig.err.translator.mapping.not.present");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("del.s6amapconfig.err.translator.not.present");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_S6AMAP_SGSN_NOT_PRESENT]=std::string("del.s6amapconfig.err.s6amap.sgsn.not.present");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_DB_ERROR]=std::string("del.s6amapconfig.err.db.error");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_DATA_NOT_PRESENT]=std::string("del.s6amapconfig.err.data.not.present");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_TRANSLATOR_MAPPING_NOT_PRESENT]=std::string("mod.s6amapconfig.err.translator.mapping.not.present");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("mod.s6amapconfig.err.translator.not.present");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_S6AMAP_SGSN_ALREADY_PRESENT]=std::string("mod.s6amapconfig.err.s6amap.sgsn.already.present");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_DB_ERROR]=std::string("mod.s6amapconfig.err.db.error");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_DATA_NOT_PRESENT]=std::string("mod.s6amapconfig.err.data.not.present");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_TRANSLATOR_MAPPING_ALREADY_PRESENT]=std::string("add.s6amapconfig.err.translator.mapping.already.present");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("add.s6amapconfig.err.translator.not.present");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_S6AMAP_SGSN_ALREADY_PRESENT]=std::string("add.s6amapconfig.err.s6amap.sgsn.already.present");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_DB_ERROR]=std::string("add.s6amapconfig.err.db.error");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_DATA_NOT_PRESENT]=std::string("add.s6amapconfig.err.data.not.present");
    iwfErrorMap[GET_S6AMAPCONFIG_ERR_DB_ERROR]=std::string("get.s6amapconfig.err.db.error");
    iwfErrorMap[GET_S6AMAPCONFIG_ERR_NO_DATA]=std::string("get.s6amapconfig.err.no.data");
    iwfErrorMap[GET_S6AMAP_SGSNADDR_CONFIG_ERR_NO_DATA]=std::string("get.s6amap.sgsnaddr.config.err.no.data");
    iwfErrorMap[DEL_CAPROIDPSMSCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("del.caproidpsmsconfig.err.config.not.present");
    iwfErrorMap[DEL_CAPROIDPSMSCONFIG_ERR_DB_ERROR]=std::string("del.caproidpsmsconfig.err.db.error");
    iwfErrorMap[MOD_CAPROIDPSMSCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("mod.caproidpsmsconfig.err.config.not.present");
    iwfErrorMap[MOD_CAPROIDPSMSCONFIG_ERR_DB_ERROR]=std::string("mod.caproidpsmsconfig.err.db.error");
    iwfErrorMap[ADD_CAPROIDPSMSCONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("add.caproidpsmsconfig.err.config.already.present");
    iwfErrorMap[ADD_CAPROIDPSMSCONFIG_ERR_DB_ERROR]=std::string("add.caproidpsmsconfig.err.db.error");
    iwfErrorMap[GET_CAPROIDPSMSCONFIG_ERR_DB_ERROR]=std::string("get.caproidpsmsconfig.err.db.error");
    iwfErrorMap[GET_CAPROIDPSMSCONFIG_ERR_NO_DATA]=std::string("get.caproidpsmsconfig.err.no.data");
    iwfErrorMap[GET_CAPROCONFIG_ERR_NO_DATA]=std::string("get.caproconfig.err.no.data");
    iwfErrorMap[DEL_CAPROIDPCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("del.caproidpconfig.err.config.not.present");
    iwfErrorMap[DEL_CAPROIDPCONFIG_ERR_DB_ERROR]=std::string("del.caproidpconfig.err.db.error");
    iwfErrorMap[MOD_CAPROIDPCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("mod.caproidpconfig.err.config.not.present");
    iwfErrorMap[MOD_CAPROIDPCONFIG_ERR_DB_ERROR]=std::string("mod.caproidpconfig.err.db.error");
    iwfErrorMap[ADD_CAPROIDPCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("add.caproidpconfig.err.config.not.present");
    iwfErrorMap[ADD_CAPROIDPCONFIG_ERR_DB_ERROR]=std::string("add.caproidpconfig.err.db.error");
    iwfErrorMap[ADD_CAPROIDPCONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("add.caproidpconfig.err.config.already.present");
    iwfErrorMap[GET_CAPROIDPCONFIG_ERR_DB_ERROR]=std::string("get.caproidpconfig.err.db.error");
    iwfErrorMap[GET_CAPROIDPCONFIG_ERR_NO_DATA]=std::string("get.caproidpconfig.err.no.data");
    iwfErrorMap[GET_TELESERVICE_TO_SERVICE_ERR_NO_DATA]=std::string("get.teleservice.to.service.err.no.data");
    iwfErrorMap[GET_BEARERSERVICE_TO_SERVICE_ERR_NO_DATA]=std::string("get.bearerservice.to.service.err.no.data");
    iwfErrorMap[ADD_CAPROCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("add.caproconfig.err.config.not.present");
    iwfErrorMap[ADD_CAPROCONFIG_ERR_DB_ERROR]=std::string("add.caproconfig.err.db.error");
    iwfErrorMap[ADD_CAPROCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("add.caproconfig.err.translator.not.present");
    iwfErrorMap[ADD_CAPROCONFIG_ERR_DATA_NOT_PRESENT]=std::string("add.caproconfig.err.data.not.present");
    iwfErrorMap[GET_CAPROCONFIG_ERR_DB_ERROR]=std::string("get.caproconfig.err.db.error");
    iwfErrorMap[MOD_CAPROCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("mod.caproconfig.err.config.not.present");
    iwfErrorMap[MOD_CAPROCONFIG_ERR_DB_ERROR]=std::string("mod.caproconfig.err.db.error");
    iwfErrorMap[MOD_CAPROCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("mod.caproconfig.err.translator.not.present");
    iwfErrorMap[MOD_CAPROCONFIG_ERR_DATA_NOT_PRESENT]=std::string("mod.caproconfig.err.data.not.present");
    iwfErrorMap[DEL_CAPROCONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("del.caproconfig.err.config.not.present");
    iwfErrorMap[DEL_CAPROCONFIG_ERR_DB_ERROR]=std::string("del.caproconfig.err.db.error");
    iwfErrorMap[DEL_CAPROCONFIG_ERR_TRANSLATOR_NOT_PRESENT]=std::string("del.caproconfig.err.translator.not.present");
    iwfErrorMap[DEL_CAPROCONFIG_ERR_DATA_NOT_PRESENT]=std::string("del.caproconfig.err.data.not.present");
    iwfErrorMap[MOD_CAPROIDPEXTTELESERVICECONFIG_ERR_DB_ERROR]=std::string("mod.caproidpextteleserviceconfig.err.db.error");
    iwfErrorMap[MOD_CAPROIDPEXTTELESERVICECONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("mod.caproidpextteleserviceconfig.err.config.already.present");
    iwfErrorMap[MOD_CAPROIDPEXTBEARERSERVICECONFIG_ERR_DB_ERROR]=std::string("mod.caproidpextbearerserviceconfig.err.db.error");
    iwfErrorMap[MOD_CAPROIDPEXTBEARERSERVICECONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("mod.caproidpextbearerserviceconfig.err.config.already.present");
    iwfErrorMap[DEL_CAPROIDPEXTTELESERVICECONFIG_ERR_DB_ERROR]=std::string("del.caproidpextteleserviceconfig.err.db.error");
    iwfErrorMap[DEL_CAPROIDPEXTTELESERVICECONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("del.caproidpextteleserviceconfig.err.config.not.present");
    iwfErrorMap[DEL_CAPROIDPEXTBEARERSERVICECONFIG_ERR_DB_ERROR]=std::string("del.caproidpextbearerserviceconfig.err.db.error");
    iwfErrorMap[DEL_CAPROIDPEXTBEARERSERVICECONFIG_ERR_CONFIG_NOT_PRESENT]=std::string("del.caproidpextbearerserviceconfig.err.config.not.present");
    iwfErrorMap[ADD_CAPROIDPEXTTELESERVICECONFIG_ERR_DB_ERROR]=std::string("add.caproidpextteleserviceconfig.err.db.error");
    iwfErrorMap[ADD_CAPROIDPEXTTELESERVICECONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("add.caproidpextteleserviceconfig.err.config.already.present");
    iwfErrorMap[ADD_CAPROIDPEXTBEARERSERVICECONFIG_ERR_DB_ERROR]=std::string("add.caproidpextbearerserviceconfig.err.db.error");
    iwfErrorMap[ADD_CAPROIDPEXTBEARERSERVICECONFIG_ERR_CONFIG_ALREADY_PRESENT]=std::string("add.caproidpextbearerserviceconfig.err.config.already.present");
    iwfErrorMap[ADD_TIMER_ERR_CONFIG_NOT_PRESENT]=std::string("add.timer.err.config.not.present");
    iwfErrorMap[ADD_TIMER_ERR_DATA_NOT_SET]=std::string("add.timer.err.data.not.set");
    iwfErrorMap[ADD_TIMER_ERR_ALREADY_PRESENT]=std::string("add.timer.err.already.present");
    iwfErrorMap[ADD_TIMER_ERR_DB_ERROR]=std::string("add.timer.err.db.error");
    iwfErrorMap[GET_TIMER_ERR_DB_ERROR]=std::string("get.timer.err.db.error");
    iwfErrorMap[GET_TIMER_ERR_NO_DATA]=std::string("get.timer.err.no.data");
    iwfErrorMap[MOD_TIMER_ERR_DATA_NOT_PRESENT]=std::string("mod.timer.err.data.not.present");
    iwfErrorMap[MOD_TIMER_ERR_DATA_NOT_SET]=std::string("mod.timer.err.data.not.set");
    iwfErrorMap[MOD_TIMER_ERR_NOT_PRESENT]=std::string("mod.timer.err.not.present");
    iwfErrorMap[MOD_TIMER_ERR_DB_ERROR]=std::string("mod.timer.err.db.error");
    iwfErrorMap[DEL_TIMER_ERR_DATA_NOT_PRESENT]=std::string("del.timer.err.data.not.present");
    iwfErrorMap[DEL_TIMER_ERR_DATA_NOT_SET]=std::string("del.timer.err.data.not.set");
    iwfErrorMap[DEL_TIMER_ERR_DB_ERROR]=std::string("del.timer.err.db.error");
    iwfErrorMap[DEL_TIMER_ERR_NOT_PRESENT]=std::string("del.timer.err.not.present");
    iwfErrorMap[ADD_UAL_ERR_CONFIG_NOT_PRESENT]=std::string("add.ual.err.config.not.present");
    iwfErrorMap[ADD_UAL_ERR_ALREADY_PRESENT]=std::string("add.ual.err.already.present");
    iwfErrorMap[ADD_UAL_ERR_DB_ERROR]=std::string("add.ual.err.db.error");
    iwfErrorMap[GET_UAL_ERR_DB_ERROR]=std::string("get.ual.err.db.error");
    iwfErrorMap[GET_UAL_ERR_NO_DATA]=std::string("get.ual.err.no.data");
    iwfErrorMap[MOD_UAL_ERR_DATA_NOT_PRESENT]=std::string("mod.ual.err.data.not.present");
    iwfErrorMap[MOD_UAL_ERR_DATA_NOT_SET]=std::string("mod.ual.err.data.not.set");
    iwfErrorMap[MOD_UAL_ERR_NOT_PRESENT]=std::string("mod.ual.err.not.present");
    iwfErrorMap[MOD_UAL_ERR_DB_ERROR]=std::string("mod.ual.err.db.error");


    iwfErrorMap[DEL_SCTPENDPOINT_ERR_USED_IN_MULTIHOMING_IP]=std::string("del.sctpendpoint.err.used.in.multihoming.ip");
    iwfErrorMap[GENERIC_ERR_USED_IN_SCTPENDPOINT_IN_MULTIHOMING_IP]=std::string("generic.err.used.in.sctpendpoint.in.multihoming.ip");
    iwfErrorMap[GENERIC_SCTPENDPOINT_ERR_MULTIHOMING_IP_MAXCOUNT]=std::string("generic.sctpendpoint.err.multihoming.ip.maxcount");
    iwfErrorMap[DEL_SCTPENDPOINT_ERR_USED_IN_ASSOCIATION_AND_ASSOCIATION_IN_MULTIHOMING_IP]=std::string("del.sctpendpoint.err.used.in.association.and.association.in.multihoming.ip");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_MAX_MULTIHOMING_IP]=std::string("mod.sctpendpoint.err.max.multihoming.ip");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_MULTIHOMING_IP_ALREADY_PRESENT]=std::string("mod.sctpendpoint.err.multihoming.ip.already.present");
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_MULTIHOMING_IP_SAMEAS_PRIMARY_IP]=std::string("mod.sctpendpoint.err.multihoming.ip.sameas.primary.ip");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_MAX_MULTIHOMING_IP]=std::string("add.sctpendpoint.err.max.multihoming.ip");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_MULTIHOMING_IP_SAMEAS_PRIMARY_IP]=std::string("add.sctpendpoint.err.multihoming.ip.sameas.primary.ip");
    iwfErrorMap[ADD_SCTPENDPOINT_ERR_MULTIHOMING_IP_ALREADY_PRESENT]=std::string("add.sctpendpoint.err.multihoming.ip.already.present");
    iwfErrorMap[GET_SCTPENDPOINT_MULTIHOMING_ERR_NO_DATA]=std::string("get.sctpendpoint.multihoming.err.no.data");
    iwfErrorMap[DEL_VPLMN_ID_ERR_NOT_PRESENT]=std::string("del.vplmn.id.err.not.present");
    iwfErrorMap[DEL_VPLMN_ID_ERR_DB_ERROR]=std::string("del.vplmn.id.err.db.error");
    iwfErrorMap[DEL_VPLMN_ID_ERR_NOT_SET]=std::string("del.vplmn.id.err.not.set");
    iwfErrorMap[DEL_VPLMN_ID_ERR_TRANSRULE_NOT_PRESENT]=std::string("del.vplmn.id.err.transrule.not.present");
    iwfErrorMap[GET_VPLMN_ID_ERR_NOT_PRESENT]=std::string("get.vplmn.id.err.not.present");
    iwfErrorMap[GET_VPLMN_ID_ERR_NO_DATA]=std::string("get.vplmn.id.err.no.data");
    iwfErrorMap[GET_VPLMN_ID_ERR_DB_ERROR]=std::string("get.vplmn.id.err.db.error");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_ALLOWED_VPLMN_ID_NOT_PRESENT]=std::string("del.maps6aconfig.err.allowed.vplmn.id.not.present");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_DATA_NOT_PRESENT]=std::string("del.maps6aconfig.err.data.not.present");
    iwfErrorMap[DEL_MAPS6ACONFIG_ERR_ALLOWED_VPLMN_ID_SGSN_MAP_NOT_PRESENT]=std::string("del.maps6aconfig.err.allowed.vplmn.id.sgsn.map.not.present");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_ALLOWED_VPLMN_ID_SGSN_MAP_ALREADY_PRESENT]=std::string("mod.maps6aconfig.err.allowed.vplmn.id.sgsn.map.already.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_ALLOWED_VPLMN_ID_ALREADY_PRESENT]=std::string("add.maps6aconfig.err.allowed.vplmn.id.already.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_ALLOWED_VPLMN_ID_SGSN_MAP_ALREADY_PRESENT]=std::string("add.maps6aconfig.err.allowed.vplmn.id.sgsn.map.already.present");
    iwfErrorMap[ADD_MAPS6ACONFIG_ERR_SGSN_CONFIG_ALREADY_PRESENT]=std::string("add.maps6aconfig.err.sgsn.config.already.present");
    iwfErrorMap[MOD_MAPS6ACONFIG_ERR_SGSN_CONFIG_ALREADY_PRESENT]=std::string("mod.maps6aconfig.err.sgsn.config.already.present");
    iwfErrorMap[ADD_ASSOCIATION_ERR_FAILED_INVALID_LOCAL_ENDPOINT_IP]=std::string("add.association.err.failed.to.add.local.transport.invalid.ip"); 
    iwfErrorMap[MOD_SCTPENDPOINT_ERR_FAILED_INVALID_LOCAL_ENDPOINT_IP]=std::string("mod.sctpendpoint.err.failed.to.add.local.transport.invalid.ip");
    iwfErrorMap[ADD_FEATURE_ERR_CONFIG_NOT_PRESENT]=std::string("add.feature.err.config.not.present");
    iwfErrorMap[ADD_FEATURE_ERR_DATA_NOT_SET]=std::string("add.feature.err.data.not.set");
    iwfErrorMap[ADD_FEATURE_ERR_ALREADY_PRESENT]=std::string("add.feature.err.already.present");
    iwfErrorMap[ADD_FEATURE_ERR_DB_ERROR]=std::string("add.feature.err.db.error");
    iwfErrorMap[GET_FEATURE_ERR_DB_ERROR]=std::string("get.feature.err.db.error");
    iwfErrorMap[GET_FEATURE_ERR_NO_DATA]=std::string("get.feature.err.no.data");
    iwfErrorMap[MOD_FEATURE_ERR_DATA_NOT_PRESENT]=std::string("mod.feature.err.data.not.present");
    iwfErrorMap[MOD_FEATURE_ERR_DATA_NOT_SET]=std::string("mod.feature.err.data.not.set");
    iwfErrorMap[MOD_FEATURE_ERR_NOT_PRESENT]=std::string("mod.feature.err.not.present");
    iwfErrorMap[MOD_FEATURE_ERR_DB_ERROR]=std::string("mod.feature.err.db.error");
    iwfErrorMap[DEL_FEATURE_ERR_DATA_NOT_PRESENT]=std::string("del.feature.err.data.not.present");
    iwfErrorMap[DEL_FEATURE_ERR_DATA_NOT_SET]=std::string("del.feature.err.data.not.set");
    iwfErrorMap[DEL_FEATURE_ERR_DB_ERROR]=std::string("del.feature.err.db.error");
    iwfErrorMap[DEL_FEATURE_ERR_NOT_PRESENT]=std::string("del.feature.err.not.present");
    iwfErrorMap[ADD_DCCA_FEATURE_ERR_CONFIG_NOT_PRESENT]=std::string("add.dcca.feature.err.config.not.present");
    iwfErrorMap[ADD_DCCA_FEATURE_ERR_DATA_NOT_SET]=std::string("add.dcca.feature.err.data.not.set");
    iwfErrorMap[ADD_DCCA_FEATURE_ERR_ALREADY_PRESENT]=std::string("add.dcca.feature.err.already.present");
    iwfErrorMap[ADD_DCCA_FEATURE_ERR_DB_ERROR]=std::string("add.dcca.feature.err.db.error");
    iwfErrorMap[GET_DCCA_FEATURE_ERR_DB_ERROR]=std::string("get.dcca.feature.err.db.error");
    iwfErrorMap[GET_DCCA_FEATURE_ERR_NO_DATA]=std::string("get.dcca.feature.err.no.data");
    iwfErrorMap[MOD_DCCA_FEATURE_ERR_DATA_NOT_PRESENT]=std::string("mod.dcca.feature.err.data.not.present");
    iwfErrorMap[MOD_DCCA_FEATURE_ERR_DATA_NOT_SET]=std::string("mod.dcca.feature.err.data.not.set");
    iwfErrorMap[MOD_DCCA_FEATURE_ERR_NOT_PRESENT]=std::string("mod.dcca.feature.err.not.present");
    iwfErrorMap[MOD_DCCA_FEATURE_ERR_DB_ERROR]=std::string("mod.dcca.feature.err.db.error");
    iwfErrorMap[DEL_DCCA_FEATURE_ERR_DATA_NOT_PRESENT]=std::string("del.dcca.feature.err.data.not.present");
    iwfErrorMap[DEL_DCCA_FEATURE_ERR_DATA_NOT_SET]=std::string("del.dcca.feature.err.data.not.set");
    iwfErrorMap[DEL_DCCA_FEATURE_ERR_DB_ERROR]=std::string("del.dcca.feature.err.db.error");
    iwfErrorMap[DEL_DCCA_FEATURE_ERR_NOT_PRESENT]=std::string("del.dcca.feature.err.not.present");
    iwfErrorMap[ADD_DCCA_DEST_ERR_CONFIG_NOT_PRESENT]=std::string("add.dcca.dest.err.config.not.present");
    iwfErrorMap[ADD_DCCA_DEST_ERR_DATA_NOT_SET]=std::string("add.dcca.dest.err.data.not.set");
    iwfErrorMap[ADD_DCCA_DEST_ERR_ALREADY_PRESENT]=std::string("add.dcca.dest.err.already.present");
    iwfErrorMap[ADD_DCCA_DEST_ERR_MAX_ENDPOINTS_REACHED]=std::string("add.dcca.dest.err.max.endpoints.reached");
    iwfErrorMap[ADD_DCCA_DEST_ERR_DB_ERROR]=std::string("add.dcca.dest.err.db.error");
    iwfErrorMap[GET_DCCA_DEST_ERR_DB_ERROR]=std::string("get.dcca.dest.err.db.error");
    iwfErrorMap[GET_DCCA_DEST_ERR_NO_DATA]=std::string("get.dcca.dest.err.no.data");
    iwfErrorMap[MOD_DCCA_DEST_ERR_DATA_NOT_PRESENT]=std::string("mod.dcca.dest.err.data.not.present");
    iwfErrorMap[MOD_DCCA_DEST_ERR_DATA_NOT_SET]=std::string("mod.dcca.dest.err.data.not.set");
    iwfErrorMap[MOD_DCCA_DEST_ERR_NOT_PRESENT]=std::string("mod.dcca.dest.err.not.present");
    iwfErrorMap[MOD_DCCA_DEST_ERR_DB_ERROR]=std::string("mod.dcca.dest.err.db.error");
    iwfErrorMap[DEL_DCCA_DEST_ERR_DATA_NOT_PRESENT]=std::string("del.dcca.dest.err.data.not.present");
    iwfErrorMap[DEL_DCCA_DEST_ERR_DATA_NOT_SET]=std::string("del.dcca.dest.err.data.not.set");
    iwfErrorMap[DEL_DCCA_DEST_ERR_DB_ERROR]=std::string("del.dcca.dest.err.db.error");
    iwfErrorMap[DEL_DCCA_DEST_ERR_NOT_PRESENT]=std::string("del.dcca.dest.err.not.present");
    iwfErrorMap[ADD_DCCA_DEST_ERR_REALM_NOT_PRESENT]=std::string("add.dcca.dest.err.realm.not.present");
    iwfErrorMap[ADD_DCCA_DEST_ERR_ENDPOINT_ALREADY_PRESENT]=std::string("add.dcca.dest.err.endpoint.already.present");
    iwfErrorMap[DEL_DCCA_DEST_ERR_DESTREALM_NOT_PRESENT]=std::string("del.dcca.dest.err.destrealm.not.present");
    iwfErrorMap[DEL_DCCA_DEST_ERR_ENDPOINT_NOT_PRESENT]=std::string("del.dcca.dest.err.endpoint.not.present");
    iwfErrorMap[DEL_DCCA_DEST_ERR_REALM_NOT_PRESENT]=std::string("del.dcca.dest.err.realm.not.present");
    iwfErrorMap[DEL_ASSOCIATION_ERR_ASSOCIATED_TO_ASSOCIATION_SET_PART_OF_ROUTE]=std::string("del.association.err.associated.to.association.set.part.of.route");
    iwfErrorMap[GET_IWF_LOCK_ERR_RESOURSE_BUSY]=std::string("get.iwf.lock.err.resourse.busy");

    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_DATA_NOT_SET]=std::string("add.protocol.action.err.data.not.set");
    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_DB_ERROR]=std::string("add.protocol.action.err.db.error");
    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_ALREADY_PRESENT]=std::string("add.protocol.action.err.already.present");
    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_CALL_SCENARIO_ALREADY_PRESENT]=std::string("add.protocol.action.err.call.scenario.already.present");
    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_CALL_SCENARIO_EVENT_TYPE_ALREADY_PRESENT]=std::string("add.protocol.action.err.call.scenario.event.type.already.present");
    iwfErrorMap[ADD_PROTOCOL_ACTION_ERR_CALL_SCENARIO_EVENT_TYPE_DETAILS_ALREADY_PRESENT]=std::string("add.protocol.action.err.call.scenario.event.type.details.already.present");

    iwfErrorMap[MOD_PROTOCOL_ACTION_ERR_DATA_NOT_SET]=std::string("mod.protocol.action.err.data.not.set");
    iwfErrorMap[MOD_PROTOCOL_ACTION_ERR_DB_ERROR]=std::string("mod.protocol.action.err.db.error");
    iwfErrorMap[MOD_PROTOCOL_ACTION_ERR_RULE_NOT_PRESENT]=std::string("mod.protocol.action.err.rule.not.present");
    iwfErrorMap[MOD_PROTOCOL_ACTION_ERR_CALL_SCENARIO_EVENT_TYPE_DETAILS_ALREADY_PRESENT]=std::string("mod.protocol.action.err.call.scenario.event.type.details.already.present");

    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_DATA_NOT_SET]=std::string("del.protocol.action.err.data.not.set");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_DB_ERROR]=std::string("del.protocol.action.err.db.error");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_RULE_NOT_PRESENT]=std::string("del.protocol.action.err.rule.not.present");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_CALL_SCENARIO_NOT_PRESENT]=std::string("del.protocol.action.err.call.scenario.not.present");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_EVENT_TYPE_NOT_PRESENT]=std::string("del.protocol.action.err.event.type.not.present");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_EVENT_TYPE_DETAILS_NOT_PRESENT]=std::string("del.protocol.action.err.event.type.details.not.present");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_RULE_PART_OF_TRANSLATOR_RULE]=std::string("del.protocol.action.err.rule.part.of.translator.rule");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_DEFAULT_RRB_RULE_NOT_ALLOWED_TO_DELETE]=std::string("del.protocol.action.err.default.rrb.rule.not.allowed.to.delete");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_LAST_EVENT_TYPE_NOT_ALLOWED_TO_DELETE]=std::string("del.protocol.action.err.last.event.type.not.allowed.to.delete");
    iwfErrorMap[DEL_PROTOCOL_ACTION_ERR_LAST_CALL_SCENARIO_NOT_ALLOWED_TO_DELETE]=std::string("del.protocol.action.err.last.call.scenario.not.allowed.to.delete");
    iwfErrorMap[DEL_S6AMAPCONFIG_ERR_S6AMAP_SGSN_PREFIX_NOT_PRESENT]=std::string("del.s6amapconfig.err.s6amap.sgsn.prefix.not.present");
    iwfErrorMap[MOD_S6AMAPCONFIG_ERR_S6AMAP_SGSN_PREFIX_ALREADY_PRESENT]=std::string("mod.s6amapconfig.err.s6amap.sgsn.prefix.already.present");
    iwfErrorMap[ADD_S6AMAPCONFIG_ERR_S6AMAP_SGSN_PREFIX_ALREADY_PRESENT]=std::string("add.s6amapconfig.err.s6amap.sgsn.prefix.already.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_DEST_NOT_PART_OF_REMOTE_ROUTE]=std::string("mod.transrule.err.dest.not.part.of.remote.route");
    iwfErrorMap[MOD_TRANSRULES_ERR_ALT_DEST_NOT_PART_OF_REMOTE_ROUTE]=std::string("mod.transrules.err.alt.dest.not.part.of.remote.route");
    iwfErrorMap[ADD_TRANSRULES_ERR_DEST_NOT_PART_OF_REMOTE_ROUTE]=std::string("add.transrule.err.dest.not.part.of.remote.route");
    iwfErrorMap[ADD_TRANSRULES_ERR_ALT_DEST_NOT_PART_OF_REMOTE_ROUTE]=std::string("add.transrules.err.alt.dest.not.part.of.remote.route");
    iwfErrorMap[ADD_TRANSRULES_ERR_ALT_DESTINATION_NOT_PRESENT]=std::string("add.transrules.err.alt.destination.not.present");
    iwfErrorMap[MOD_TRANSRULES_ERR_ALT_DESTINATION_NOT_PRESENT]=std::string("mod.transrules.err.alt.destination.not.present");
}
