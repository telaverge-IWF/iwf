/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_FORMAT_SYM = 327,
     COLUMN_NAME_SYM = 328,
     COMMENT_SYM = 329,
     COMMITTED_SYM = 330,
     COMMIT_SYM = 331,
     COMPACT_SYM = 332,
     COMPLETION_SYM = 333,
     COMPRESSED_SYM = 334,
     CONCURRENT = 335,
     CONDITION_SYM = 336,
     CONNECTION_SYM = 337,
     CONSISTENT_SYM = 338,
     CONSTRAINT = 339,
     CONSTRAINT_CATALOG_SYM = 340,
     CONSTRAINT_NAME_SYM = 341,
     CONSTRAINT_SCHEMA_SYM = 342,
     CONTAINS_SYM = 343,
     CONTEXT_SYM = 344,
     CONTINUE_SYM = 345,
     CONTRIBUTORS_SYM = 346,
     CONVERT_SYM = 347,
     COUNT_SYM = 348,
     CPU_SYM = 349,
     CREATE = 350,
     CROSS = 351,
     CUBE_SYM = 352,
     CURDATE = 353,
     CURRENT_USER = 354,
     CURSOR_SYM = 355,
     CURSOR_NAME_SYM = 356,
     CURTIME = 357,
     DATABASE = 358,
     DATABASES = 359,
     DATAFILE_SYM = 360,
     DATA_SYM = 361,
     DATETIME = 362,
     DATE_ADD_INTERVAL = 363,
     DATE_SUB_INTERVAL = 364,
     DATE_SYM = 365,
     DAY_HOUR_SYM = 366,
     DAY_MICROSECOND_SYM = 367,
     DAY_MINUTE_SYM = 368,
     DAY_SECOND_SYM = 369,
     DAY_SYM = 370,
     DEALLOCATE_SYM = 371,
     DECIMAL_NUM = 372,
     DECIMAL_SYM = 373,
     DECLARE_SYM = 374,
     DEFAULT = 375,
     DEFINER_SYM = 376,
     DELAYED_SYM = 377,
     DELAY_KEY_WRITE_SYM = 378,
     DELETE_SYM = 379,
     DESC = 380,
     DESCRIBE = 381,
     DES_KEY_FILE = 382,
     DETERMINISTIC_SYM = 383,
     DIRECTORY_SYM = 384,
     DISABLE_SYM = 385,
     DISCARD = 386,
     DISK_SYM = 387,
     DISTINCT = 388,
     DIV_SYM = 389,
     DOUBLE_SYM = 390,
     DO_SYM = 391,
     DROP = 392,
     DUAL_SYM = 393,
     DUMPFILE = 394,
     DUPLICATE_SYM = 395,
     DYNAMIC_SYM = 396,
     EACH_SYM = 397,
     ELSE = 398,
     ELSEIF_SYM = 399,
     ENABLE_SYM = 400,
     ENCLOSED = 401,
     END = 402,
     ENDS_SYM = 403,
     END_OF_INPUT = 404,
     ENGINES_SYM = 405,
     ENGINE_SYM = 406,
     ENUM = 407,
     EQ = 408,
     EQUAL_SYM = 409,
     ERROR_SYM = 410,
     ERRORS = 411,
     ESCAPED = 412,
     ESCAPE_SYM = 413,
     EVENTS_SYM = 414,
     EVENT_SYM = 415,
     EVERY_SYM = 416,
     EXECUTE_SYM = 417,
     EXISTS = 418,
     EXIT_SYM = 419,
     EXPANSION_SYM = 420,
     EXTENDED_SYM = 421,
     EXTENT_SIZE_SYM = 422,
     EXTRACT_SYM = 423,
     FALSE_SYM = 424,
     FAST_SYM = 425,
     FAULTS_SYM = 426,
     FETCH_SYM = 427,
     FILE_SYM = 428,
     FIRST_SYM = 429,
     FIXED_SYM = 430,
     FLOAT_NUM = 431,
     FLOAT_SYM = 432,
     FLUSH_SYM = 433,
     FORCE_SYM = 434,
     FOREIGN = 435,
     FOR_SYM = 436,
     FOUND_SYM = 437,
     FROM = 438,
     FULL = 439,
     FULLTEXT_SYM = 440,
     FUNCTION_SYM = 441,
     GE = 442,
     GENERAL = 443,
     GEOMETRYCOLLECTION = 444,
     GEOMETRY_SYM = 445,
     GET_FORMAT = 446,
     GLOBAL_SYM = 447,
     GRANT = 448,
     GRANTS = 449,
     GROUP_SYM = 450,
     GROUP_CONCAT_SYM = 451,
     GT_SYM = 452,
     HANDLER_SYM = 453,
     HASH_SYM = 454,
     HAVING = 455,
     HELP_SYM = 456,
     HEX_NUM = 457,
     HIGH_PRIORITY = 458,
     HOST_SYM = 459,
     HOSTS_SYM = 460,
     HOUR_MICROSECOND_SYM = 461,
     HOUR_MINUTE_SYM = 462,
     HOUR_SECOND_SYM = 463,
     HOUR_SYM = 464,
     IDENT = 465,
     IDENTIFIED_SYM = 466,
     IDENT_QUOTED = 467,
     IF = 468,
     IGNORE_SYM = 469,
     IGNORE_SERVER_IDS_SYM = 470,
     IMPORT = 471,
     INDEXES = 472,
     INDEX_SYM = 473,
     INFILE = 474,
     INITIAL_SIZE_SYM = 475,
     INNER_SYM = 476,
     INOUT_SYM = 477,
     INSENSITIVE_SYM = 478,
     INSERT = 479,
     INSERT_METHOD = 480,
     INSTALL_SYM = 481,
     INTERVAL_SYM = 482,
     INTO = 483,
     INT_SYM = 484,
     INVOKER_SYM = 485,
     IN_SYM = 486,
     IO_SYM = 487,
     IPC_SYM = 488,
     IS = 489,
     ISOLATION = 490,
     ISSUER_SYM = 491,
     ITERATE_SYM = 492,
     JOIN_SYM = 493,
     KEYS = 494,
     KEY_BLOCK_SIZE = 495,
     KEY_SYM = 496,
     KILL_SYM = 497,
     LANGUAGE_SYM = 498,
     LAST_SYM = 499,
     LE = 500,
     LEADING = 501,
     LEAVES = 502,
     LEAVE_SYM = 503,
     LEFT = 504,
     LESS_SYM = 505,
     LEVEL_SYM = 506,
     LEX_HOSTNAME = 507,
     LIKE = 508,
     LIMIT = 509,
     LINEAR_SYM = 510,
     LINES = 511,
     LINESTRING = 512,
     LIST_SYM = 513,
     LOAD = 514,
     LOCAL_SYM = 515,
     LOCATOR_SYM = 516,
     LOCKS_SYM = 517,
     LOCK_SYM = 518,
     LOGFILE_SYM = 519,
     LOGS_SYM = 520,
     LONGBLOB = 521,
     LONGTEXT = 522,
     LONG_NUM = 523,
     LONG_SYM = 524,
     LOOP_SYM = 525,
     LOW_PRIORITY = 526,
     LT = 527,
     MASTER_BIND_SYM = 528,
     MASTER_CONNECT_RETRY_SYM = 529,
     MASTER_HOST_SYM = 530,
     MASTER_LOG_FILE_SYM = 531,
     MASTER_LOG_POS_SYM = 532,
     MASTER_PASSWORD_SYM = 533,
     MASTER_PORT_SYM = 534,
     MASTER_SERVER_ID_SYM = 535,
     MASTER_SSL_CAPATH_SYM = 536,
     MASTER_SSL_CA_SYM = 537,
     MASTER_SSL_CERT_SYM = 538,
     MASTER_SSL_CIPHER_SYM = 539,
     MASTER_SSL_KEY_SYM = 540,
     MASTER_SSL_SYM = 541,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 542,
     MASTER_SYM = 543,
     MASTER_USER_SYM = 544,
     MASTER_HEARTBEAT_PERIOD_SYM = 545,
     MATCH = 546,
     MAX_CONNECTIONS_PER_HOUR = 547,
     MAX_QUERIES_PER_HOUR = 548,
     MAX_ROWS = 549,
     MAX_SIZE_SYM = 550,
     MAX_SYM = 551,
     MAX_UPDATES_PER_HOUR = 552,
     MAX_USER_CONNECTIONS_SYM = 553,
     MAX_VALUE_SYM = 554,
     MEDIUMBLOB = 555,
     MEDIUMINT = 556,
     MEDIUMTEXT = 557,
     MEDIUM_SYM = 558,
     MEMORY_SYM = 559,
     MERGE_SYM = 560,
     MESSAGE_TEXT_SYM = 561,
     MICROSECOND_SYM = 562,
     MIGRATE_SYM = 563,
     MINUTE_MICROSECOND_SYM = 564,
     MINUTE_SECOND_SYM = 565,
     MINUTE_SYM = 566,
     MIN_ROWS = 567,
     MIN_SYM = 568,
     MODE_SYM = 569,
     MODIFIES_SYM = 570,
     MODIFY_SYM = 571,
     MOD_SYM = 572,
     MONTH_SYM = 573,
     MULTILINESTRING = 574,
     MULTIPOINT = 575,
     MULTIPOLYGON = 576,
     MUTEX_SYM = 577,
     MYSQL_ERRNO_SYM = 578,
     NAMES_SYM = 579,
     NAME_SYM = 580,
     NATIONAL_SYM = 581,
     NATURAL = 582,
     NCHAR_STRING = 583,
     NCHAR_SYM = 584,
     NDBCLUSTER_SYM = 585,
     NE = 586,
     NEG = 587,
     NEW_SYM = 588,
     NEXT_SYM = 589,
     NODEGROUP_SYM = 590,
     NONE_SYM = 591,
     NOT2_SYM = 592,
     NOT_SYM = 593,
     NOW_SYM = 594,
     NO_SYM = 595,
     NO_WAIT_SYM = 596,
     NO_WRITE_TO_BINLOG = 597,
     NULL_SYM = 598,
     NUM = 599,
     NUMERIC_SYM = 600,
     NVARCHAR_SYM = 601,
     OFFLINE_SYM = 602,
     OFFSET_SYM = 603,
     OLD_PASSWORD = 604,
     ON = 605,
     ONE_SHOT_SYM = 606,
     ONE_SYM = 607,
     ONLINE_SYM = 608,
     OPEN_SYM = 609,
     OPTIMIZE = 610,
     OPTIONS_SYM = 611,
     OPTION = 612,
     OPTIONALLY = 613,
     OR2_SYM = 614,
     ORDER_SYM = 615,
     OR_OR_SYM = 616,
     OR_SYM = 617,
     OUTER = 618,
     OUTFILE = 619,
     OUT_SYM = 620,
     OWNER_SYM = 621,
     PACK_KEYS_SYM = 622,
     PAGE_SYM = 623,
     PARAM_MARKER = 624,
     PARSER_SYM = 625,
     PARTIAL = 626,
     PARTITIONING_SYM = 627,
     PARTITIONS_SYM = 628,
     PARTITION_SYM = 629,
     PASSWORD = 630,
     PHASE_SYM = 631,
     PLUGINS_SYM = 632,
     PLUGIN_SYM = 633,
     POINT_SYM = 634,
     POLYGON = 635,
     PORT_SYM = 636,
     POSITION_SYM = 637,
     PRECISION = 638,
     PREPARE_SYM = 639,
     PRESERVE_SYM = 640,
     PREV_SYM = 641,
     PRIMARY_SYM = 642,
     PRIVILEGES = 643,
     PROCEDURE_SYM = 644,
     PROCESS = 645,
     PROCESSLIST_SYM = 646,
     PROFILE_SYM = 647,
     PROFILES_SYM = 648,
     PROXY_SYM = 649,
     PURGE = 650,
     QUARTER_SYM = 651,
     QUERY_SYM = 652,
     QUICK = 653,
     RANGE_SYM = 654,
     READS_SYM = 655,
     READ_ONLY_SYM = 656,
     READ_SYM = 657,
     READ_WRITE_SYM = 658,
     REAL = 659,
     REBUILD_SYM = 660,
     RECOVER_SYM = 661,
     REDOFILE_SYM = 662,
     REDO_BUFFER_SIZE_SYM = 663,
     REDUNDANT_SYM = 664,
     REFERENCES = 665,
     REGEXP = 666,
     RELAY = 667,
     RELAYLOG_SYM = 668,
     RELAY_LOG_FILE_SYM = 669,
     RELAY_LOG_POS_SYM = 670,
     RELAY_THREAD = 671,
     RELEASE_SYM = 672,
     RELOAD = 673,
     REMOVE_SYM = 674,
     RENAME = 675,
     REORGANIZE_SYM = 676,
     REPAIR = 677,
     REPEATABLE_SYM = 678,
     REPEAT_SYM = 679,
     REPLACE = 680,
     REPLICATION = 681,
     REQUIRE_SYM = 682,
     RESET_SYM = 683,
     RESIGNAL_SYM = 684,
     RESOURCES = 685,
     RESTORE_SYM = 686,
     RESTRICT = 687,
     RESUME_SYM = 688,
     RETURNS_SYM = 689,
     RETURN_SYM = 690,
     REVOKE = 691,
     RIGHT = 692,
     ROLLBACK_SYM = 693,
     ROLLUP_SYM = 694,
     ROUTINE_SYM = 695,
     ROWS_SYM = 696,
     ROW_FORMAT_SYM = 697,
     ROW_SYM = 698,
     RTREE_SYM = 699,
     SAVEPOINT_SYM = 700,
     SCHEDULE_SYM = 701,
     SCHEMA_NAME_SYM = 702,
     SECOND_MICROSECOND_SYM = 703,
     SECOND_SYM = 704,
     SECURITY_SYM = 705,
     SELECT_SYM = 706,
     SENSITIVE_SYM = 707,
     SEPARATOR_SYM = 708,
     SERIALIZABLE_SYM = 709,
     SERIAL_SYM = 710,
     SESSION_SYM = 711,
     SERVER_SYM = 712,
     SERVER_OPTIONS = 713,
     SET = 714,
     SET_VAR = 715,
     SHARE_SYM = 716,
     SHIFT_LEFT = 717,
     SHIFT_RIGHT = 718,
     SHOW = 719,
     SHUTDOWN = 720,
     SIGNAL_SYM = 721,
     SIGNED_SYM = 722,
     SIMPLE_SYM = 723,
     SLAVE = 724,
     SLOW = 725,
     SMALLINT = 726,
     SNAPSHOT_SYM = 727,
     SOCKET_SYM = 728,
     SONAME_SYM = 729,
     SOUNDS_SYM = 730,
     SOURCE_SYM = 731,
     SPATIAL_SYM = 732,
     SPECIFIC_SYM = 733,
     SQLEXCEPTION_SYM = 734,
     SQLSTATE_SYM = 735,
     SQLWARNING_SYM = 736,
     SQL_BIG_RESULT = 737,
     SQL_BUFFER_RESULT = 738,
     SQL_CACHE_SYM = 739,
     SQL_CALC_FOUND_ROWS = 740,
     SQL_NO_CACHE_SYM = 741,
     SQL_SMALL_RESULT = 742,
     SQL_SYM = 743,
     SQL_THREAD = 744,
     SSL_SYM = 745,
     STARTING = 746,
     STARTS_SYM = 747,
     START_SYM = 748,
     STATUS_SYM = 749,
     STDDEV_SAMP_SYM = 750,
     STD_SYM = 751,
     STOP_SYM = 752,
     STORAGE_SYM = 753,
     STRAIGHT_JOIN = 754,
     STRING_SYM = 755,
     SUBCLASS_ORIGIN_SYM = 756,
     SUBDATE_SYM = 757,
     SUBJECT_SYM = 758,
     SUBPARTITIONS_SYM = 759,
     SUBPARTITION_SYM = 760,
     SUBSTRING = 761,
     SUM_SYM = 762,
     SUPER_SYM = 763,
     SUSPEND_SYM = 764,
     SWAPS_SYM = 765,
     SWITCHES_SYM = 766,
     SYSDATE = 767,
     TABLES = 768,
     TABLESPACE = 769,
     TABLE_REF_PRIORITY = 770,
     TABLE_SYM = 771,
     TABLE_CHECKSUM_SYM = 772,
     TABLE_NAME_SYM = 773,
     TEMPORARY = 774,
     TEMPTABLE_SYM = 775,
     TERMINATED = 776,
     TEXT_STRING = 777,
     TEXT_SYM = 778,
     THAN_SYM = 779,
     THEN_SYM = 780,
     TIMESTAMP = 781,
     TIMESTAMP_ADD = 782,
     TIMESTAMP_DIFF = 783,
     TIME_SYM = 784,
     TINYBLOB = 785,
     TINYINT = 786,
     TINYTEXT = 787,
     TO_SYM = 788,
     TRAILING = 789,
     TRANSACTION_SYM = 790,
     TRIGGERS_SYM = 791,
     TRIGGER_SYM = 792,
     TRIM = 793,
     TRUE_SYM = 794,
     TRUNCATE_SYM = 795,
     TYPES_SYM = 796,
     TYPE_SYM = 797,
     UDF_RETURNS_SYM = 798,
     ULONGLONG_NUM = 799,
     UNCOMMITTED_SYM = 800,
     UNDEFINED_SYM = 801,
     UNDERSCORE_CHARSET = 802,
     UNDOFILE_SYM = 803,
     UNDO_BUFFER_SIZE_SYM = 804,
     UNDO_SYM = 805,
     UNICODE_SYM = 806,
     UNINSTALL_SYM = 807,
     UNION_SYM = 808,
     UNIQUE_SYM = 809,
     UNKNOWN_SYM = 810,
     UNLOCK_SYM = 811,
     UNSIGNED = 812,
     UNTIL_SYM = 813,
     UPDATE_SYM = 814,
     UPGRADE_SYM = 815,
     USAGE = 816,
     USER = 817,
     USE_FRM = 818,
     USE_SYM = 819,
     USING = 820,
     UTC_DATE_SYM = 821,
     UTC_TIMESTAMP_SYM = 822,
     UTC_TIME_SYM = 823,
     VALUES = 824,
     VALUE_SYM = 825,
     VARBINARY = 826,
     VARCHAR = 827,
     VARIABLES = 828,
     VARIANCE_SYM = 829,
     VARYING = 830,
     VAR_SAMP_SYM = 831,
     VIEW_SYM = 832,
     WAIT_SYM = 833,
     WARNINGS = 834,
     WEEK_SYM = 835,
     WHEN_SYM = 836,
     WHERE = 837,
     WHILE_SYM = 838,
     WITH = 839,
     WITH_CUBE_SYM = 840,
     WITH_ROLLUP_SYM = 841,
     WORK_SYM = 842,
     WRAPPER_SYM = 843,
     WRITE_SYM = 844,
     X509_SYM = 845,
     XA_SYM = 846,
     XML_SYM = 847,
     XOR = 848,
     YEAR_MONTH_SYM = 849,
     YEAR_SYM = 850,
     ZEROFILL = 851
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_FORMAT_SYM 327
#define COLUMN_NAME_SYM 328
#define COMMENT_SYM 329
#define COMMITTED_SYM 330
#define COMMIT_SYM 331
#define COMPACT_SYM 332
#define COMPLETION_SYM 333
#define COMPRESSED_SYM 334
#define CONCURRENT 335
#define CONDITION_SYM 336
#define CONNECTION_SYM 337
#define CONSISTENT_SYM 338
#define CONSTRAINT 339
#define CONSTRAINT_CATALOG_SYM 340
#define CONSTRAINT_NAME_SYM 341
#define CONSTRAINT_SCHEMA_SYM 342
#define CONTAINS_SYM 343
#define CONTEXT_SYM 344
#define CONTINUE_SYM 345
#define CONTRIBUTORS_SYM 346
#define CONVERT_SYM 347
#define COUNT_SYM 348
#define CPU_SYM 349
#define CREATE 350
#define CROSS 351
#define CUBE_SYM 352
#define CURDATE 353
#define CURRENT_USER 354
#define CURSOR_SYM 355
#define CURSOR_NAME_SYM 356
#define CURTIME 357
#define DATABASE 358
#define DATABASES 359
#define DATAFILE_SYM 360
#define DATA_SYM 361
#define DATETIME 362
#define DATE_ADD_INTERVAL 363
#define DATE_SUB_INTERVAL 364
#define DATE_SYM 365
#define DAY_HOUR_SYM 366
#define DAY_MICROSECOND_SYM 367
#define DAY_MINUTE_SYM 368
#define DAY_SECOND_SYM 369
#define DAY_SYM 370
#define DEALLOCATE_SYM 371
#define DECIMAL_NUM 372
#define DECIMAL_SYM 373
#define DECLARE_SYM 374
#define DEFAULT 375
#define DEFINER_SYM 376
#define DELAYED_SYM 377
#define DELAY_KEY_WRITE_SYM 378
#define DELETE_SYM 379
#define DESC 380
#define DESCRIBE 381
#define DES_KEY_FILE 382
#define DETERMINISTIC_SYM 383
#define DIRECTORY_SYM 384
#define DISABLE_SYM 385
#define DISCARD 386
#define DISK_SYM 387
#define DISTINCT 388
#define DIV_SYM 389
#define DOUBLE_SYM 390
#define DO_SYM 391
#define DROP 392
#define DUAL_SYM 393
#define DUMPFILE 394
#define DUPLICATE_SYM 395
#define DYNAMIC_SYM 396
#define EACH_SYM 397
#define ELSE 398
#define ELSEIF_SYM 399
#define ENABLE_SYM 400
#define ENCLOSED 401
#define END 402
#define ENDS_SYM 403
#define END_OF_INPUT 404
#define ENGINES_SYM 405
#define ENGINE_SYM 406
#define ENUM 407
#define EQ 408
#define EQUAL_SYM 409
#define ERROR_SYM 410
#define ERRORS 411
#define ESCAPED 412
#define ESCAPE_SYM 413
#define EVENTS_SYM 414
#define EVENT_SYM 415
#define EVERY_SYM 416
#define EXECUTE_SYM 417
#define EXISTS 418
#define EXIT_SYM 419
#define EXPANSION_SYM 420
#define EXTENDED_SYM 421
#define EXTENT_SIZE_SYM 422
#define EXTRACT_SYM 423
#define FALSE_SYM 424
#define FAST_SYM 425
#define FAULTS_SYM 426
#define FETCH_SYM 427
#define FILE_SYM 428
#define FIRST_SYM 429
#define FIXED_SYM 430
#define FLOAT_NUM 431
#define FLOAT_SYM 432
#define FLUSH_SYM 433
#define FORCE_SYM 434
#define FOREIGN 435
#define FOR_SYM 436
#define FOUND_SYM 437
#define FROM 438
#define FULL 439
#define FULLTEXT_SYM 440
#define FUNCTION_SYM 441
#define GE 442
#define GENERAL 443
#define GEOMETRYCOLLECTION 444
#define GEOMETRY_SYM 445
#define GET_FORMAT 446
#define GLOBAL_SYM 447
#define GRANT 448
#define GRANTS 449
#define GROUP_SYM 450
#define GROUP_CONCAT_SYM 451
#define GT_SYM 452
#define HANDLER_SYM 453
#define HASH_SYM 454
#define HAVING 455
#define HELP_SYM 456
#define HEX_NUM 457
#define HIGH_PRIORITY 458
#define HOST_SYM 459
#define HOSTS_SYM 460
#define HOUR_MICROSECOND_SYM 461
#define HOUR_MINUTE_SYM 462
#define HOUR_SECOND_SYM 463
#define HOUR_SYM 464
#define IDENT 465
#define IDENTIFIED_SYM 466
#define IDENT_QUOTED 467
#define IF 468
#define IGNORE_SYM 469
#define IGNORE_SERVER_IDS_SYM 470
#define IMPORT 471
#define INDEXES 472
#define INDEX_SYM 473
#define INFILE 474
#define INITIAL_SIZE_SYM 475
#define INNER_SYM 476
#define INOUT_SYM 477
#define INSENSITIVE_SYM 478
#define INSERT 479
#define INSERT_METHOD 480
#define INSTALL_SYM 481
#define INTERVAL_SYM 482
#define INTO 483
#define INT_SYM 484
#define INVOKER_SYM 485
#define IN_SYM 486
#define IO_SYM 487
#define IPC_SYM 488
#define IS 489
#define ISOLATION 490
#define ISSUER_SYM 491
#define ITERATE_SYM 492
#define JOIN_SYM 493
#define KEYS 494
#define KEY_BLOCK_SIZE 495
#define KEY_SYM 496
#define KILL_SYM 497
#define LANGUAGE_SYM 498
#define LAST_SYM 499
#define LE 500
#define LEADING 501
#define LEAVES 502
#define LEAVE_SYM 503
#define LEFT 504
#define LESS_SYM 505
#define LEVEL_SYM 506
#define LEX_HOSTNAME 507
#define LIKE 508
#define LIMIT 509
#define LINEAR_SYM 510
#define LINES 511
#define LINESTRING 512
#define LIST_SYM 513
#define LOAD 514
#define LOCAL_SYM 515
#define LOCATOR_SYM 516
#define LOCKS_SYM 517
#define LOCK_SYM 518
#define LOGFILE_SYM 519
#define LOGS_SYM 520
#define LONGBLOB 521
#define LONGTEXT 522
#define LONG_NUM 523
#define LONG_SYM 524
#define LOOP_SYM 525
#define LOW_PRIORITY 526
#define LT 527
#define MASTER_BIND_SYM 528
#define MASTER_CONNECT_RETRY_SYM 529
#define MASTER_HOST_SYM 530
#define MASTER_LOG_FILE_SYM 531
#define MASTER_LOG_POS_SYM 532
#define MASTER_PASSWORD_SYM 533
#define MASTER_PORT_SYM 534
#define MASTER_SERVER_ID_SYM 535
#define MASTER_SSL_CAPATH_SYM 536
#define MASTER_SSL_CA_SYM 537
#define MASTER_SSL_CERT_SYM 538
#define MASTER_SSL_CIPHER_SYM 539
#define MASTER_SSL_KEY_SYM 540
#define MASTER_SSL_SYM 541
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 542
#define MASTER_SYM 543
#define MASTER_USER_SYM 544
#define MASTER_HEARTBEAT_PERIOD_SYM 545
#define MATCH 546
#define MAX_CONNECTIONS_PER_HOUR 547
#define MAX_QUERIES_PER_HOUR 548
#define MAX_ROWS 549
#define MAX_SIZE_SYM 550
#define MAX_SYM 551
#define MAX_UPDATES_PER_HOUR 552
#define MAX_USER_CONNECTIONS_SYM 553
#define MAX_VALUE_SYM 554
#define MEDIUMBLOB 555
#define MEDIUMINT 556
#define MEDIUMTEXT 557
#define MEDIUM_SYM 558
#define MEMORY_SYM 559
#define MERGE_SYM 560
#define MESSAGE_TEXT_SYM 561
#define MICROSECOND_SYM 562
#define MIGRATE_SYM 563
#define MINUTE_MICROSECOND_SYM 564
#define MINUTE_SECOND_SYM 565
#define MINUTE_SYM 566
#define MIN_ROWS 567
#define MIN_SYM 568
#define MODE_SYM 569
#define MODIFIES_SYM 570
#define MODIFY_SYM 571
#define MOD_SYM 572
#define MONTH_SYM 573
#define MULTILINESTRING 574
#define MULTIPOINT 575
#define MULTIPOLYGON 576
#define MUTEX_SYM 577
#define MYSQL_ERRNO_SYM 578
#define NAMES_SYM 579
#define NAME_SYM 580
#define NATIONAL_SYM 581
#define NATURAL 582
#define NCHAR_STRING 583
#define NCHAR_SYM 584
#define NDBCLUSTER_SYM 585
#define NE 586
#define NEG 587
#define NEW_SYM 588
#define NEXT_SYM 589
#define NODEGROUP_SYM 590
#define NONE_SYM 591
#define NOT2_SYM 592
#define NOT_SYM 593
#define NOW_SYM 594
#define NO_SYM 595
#define NO_WAIT_SYM 596
#define NO_WRITE_TO_BINLOG 597
#define NULL_SYM 598
#define NUM 599
#define NUMERIC_SYM 600
#define NVARCHAR_SYM 601
#define OFFLINE_SYM 602
#define OFFSET_SYM 603
#define OLD_PASSWORD 604
#define ON 605
#define ONE_SHOT_SYM 606
#define ONE_SYM 607
#define ONLINE_SYM 608
#define OPEN_SYM 609
#define OPTIMIZE 610
#define OPTIONS_SYM 611
#define OPTION 612
#define OPTIONALLY 613
#define OR2_SYM 614
#define ORDER_SYM 615
#define OR_OR_SYM 616
#define OR_SYM 617
#define OUTER 618
#define OUTFILE 619
#define OUT_SYM 620
#define OWNER_SYM 621
#define PACK_KEYS_SYM 622
#define PAGE_SYM 623
#define PARAM_MARKER 624
#define PARSER_SYM 625
#define PARTIAL 626
#define PARTITIONING_SYM 627
#define PARTITIONS_SYM 628
#define PARTITION_SYM 629
#define PASSWORD 630
#define PHASE_SYM 631
#define PLUGINS_SYM 632
#define PLUGIN_SYM 633
#define POINT_SYM 634
#define POLYGON 635
#define PORT_SYM 636
#define POSITION_SYM 637
#define PRECISION 638
#define PREPARE_SYM 639
#define PRESERVE_SYM 640
#define PREV_SYM 641
#define PRIMARY_SYM 642
#define PRIVILEGES 643
#define PROCEDURE_SYM 644
#define PROCESS 645
#define PROCESSLIST_SYM 646
#define PROFILE_SYM 647
#define PROFILES_SYM 648
#define PROXY_SYM 649
#define PURGE 650
#define QUARTER_SYM 651
#define QUERY_SYM 652
#define QUICK 653
#define RANGE_SYM 654
#define READS_SYM 655
#define READ_ONLY_SYM 656
#define READ_SYM 657
#define READ_WRITE_SYM 658
#define REAL 659
#define REBUILD_SYM 660
#define RECOVER_SYM 661
#define REDOFILE_SYM 662
#define REDO_BUFFER_SIZE_SYM 663
#define REDUNDANT_SYM 664
#define REFERENCES 665
#define REGEXP 666
#define RELAY 667
#define RELAYLOG_SYM 668
#define RELAY_LOG_FILE_SYM 669
#define RELAY_LOG_POS_SYM 670
#define RELAY_THREAD 671
#define RELEASE_SYM 672
#define RELOAD 673
#define REMOVE_SYM 674
#define RENAME 675
#define REORGANIZE_SYM 676
#define REPAIR 677
#define REPEATABLE_SYM 678
#define REPEAT_SYM 679
#define REPLACE 680
#define REPLICATION 681
#define REQUIRE_SYM 682
#define RESET_SYM 683
#define RESIGNAL_SYM 684
#define RESOURCES 685
#define RESTORE_SYM 686
#define RESTRICT 687
#define RESUME_SYM 688
#define RETURNS_SYM 689
#define RETURN_SYM 690
#define REVOKE 691
#define RIGHT 692
#define ROLLBACK_SYM 693
#define ROLLUP_SYM 694
#define ROUTINE_SYM 695
#define ROWS_SYM 696
#define ROW_FORMAT_SYM 697
#define ROW_SYM 698
#define RTREE_SYM 699
#define SAVEPOINT_SYM 700
#define SCHEDULE_SYM 701
#define SCHEMA_NAME_SYM 702
#define SECOND_MICROSECOND_SYM 703
#define SECOND_SYM 704
#define SECURITY_SYM 705
#define SELECT_SYM 706
#define SENSITIVE_SYM 707
#define SEPARATOR_SYM 708
#define SERIALIZABLE_SYM 709
#define SERIAL_SYM 710
#define SESSION_SYM 711
#define SERVER_SYM 712
#define SERVER_OPTIONS 713
#define SET 714
#define SET_VAR 715
#define SHARE_SYM 716
#define SHIFT_LEFT 717
#define SHIFT_RIGHT 718
#define SHOW 719
#define SHUTDOWN 720
#define SIGNAL_SYM 721
#define SIGNED_SYM 722
#define SIMPLE_SYM 723
#define SLAVE 724
#define SLOW 725
#define SMALLINT 726
#define SNAPSHOT_SYM 727
#define SOCKET_SYM 728
#define SONAME_SYM 729
#define SOUNDS_SYM 730
#define SOURCE_SYM 731
#define SPATIAL_SYM 732
#define SPECIFIC_SYM 733
#define SQLEXCEPTION_SYM 734
#define SQLSTATE_SYM 735
#define SQLWARNING_SYM 736
#define SQL_BIG_RESULT 737
#define SQL_BUFFER_RESULT 738
#define SQL_CACHE_SYM 739
#define SQL_CALC_FOUND_ROWS 740
#define SQL_NO_CACHE_SYM 741
#define SQL_SMALL_RESULT 742
#define SQL_SYM 743
#define SQL_THREAD 744
#define SSL_SYM 745
#define STARTING 746
#define STARTS_SYM 747
#define START_SYM 748
#define STATUS_SYM 749
#define STDDEV_SAMP_SYM 750
#define STD_SYM 751
#define STOP_SYM 752
#define STORAGE_SYM 753
#define STRAIGHT_JOIN 754
#define STRING_SYM 755
#define SUBCLASS_ORIGIN_SYM 756
#define SUBDATE_SYM 757
#define SUBJECT_SYM 758
#define SUBPARTITIONS_SYM 759
#define SUBPARTITION_SYM 760
#define SUBSTRING 761
#define SUM_SYM 762
#define SUPER_SYM 763
#define SUSPEND_SYM 764
#define SWAPS_SYM 765
#define SWITCHES_SYM 766
#define SYSDATE 767
#define TABLES 768
#define TABLESPACE 769
#define TABLE_REF_PRIORITY 770
#define TABLE_SYM 771
#define TABLE_CHECKSUM_SYM 772
#define TABLE_NAME_SYM 773
#define TEMPORARY 774
#define TEMPTABLE_SYM 775
#define TERMINATED 776
#define TEXT_STRING 777
#define TEXT_SYM 778
#define THAN_SYM 779
#define THEN_SYM 780
#define TIMESTAMP 781
#define TIMESTAMP_ADD 782
#define TIMESTAMP_DIFF 783
#define TIME_SYM 784
#define TINYBLOB 785
#define TINYINT 786
#define TINYTEXT 787
#define TO_SYM 788
#define TRAILING 789
#define TRANSACTION_SYM 790
#define TRIGGERS_SYM 791
#define TRIGGER_SYM 792
#define TRIM 793
#define TRUE_SYM 794
#define TRUNCATE_SYM 795
#define TYPES_SYM 796
#define TYPE_SYM 797
#define UDF_RETURNS_SYM 798
#define ULONGLONG_NUM 799
#define UNCOMMITTED_SYM 800
#define UNDEFINED_SYM 801
#define UNDERSCORE_CHARSET 802
#define UNDOFILE_SYM 803
#define UNDO_BUFFER_SIZE_SYM 804
#define UNDO_SYM 805
#define UNICODE_SYM 806
#define UNINSTALL_SYM 807
#define UNION_SYM 808
#define UNIQUE_SYM 809
#define UNKNOWN_SYM 810
#define UNLOCK_SYM 811
#define UNSIGNED 812
#define UNTIL_SYM 813
#define UPDATE_SYM 814
#define UPGRADE_SYM 815
#define USAGE 816
#define USER 817
#define USE_FRM 818
#define USE_SYM 819
#define USING 820
#define UTC_DATE_SYM 821
#define UTC_TIMESTAMP_SYM 822
#define UTC_TIME_SYM 823
#define VALUES 824
#define VALUE_SYM 825
#define VARBINARY 826
#define VARCHAR 827
#define VARIABLES 828
#define VARIANCE_SYM 829
#define VARYING 830
#define VAR_SAMP_SYM 831
#define VIEW_SYM 832
#define WAIT_SYM 833
#define WARNINGS 834
#define WEEK_SYM 835
#define WHEN_SYM 836
#define WHERE 837
#define WHILE_SYM 838
#define WITH 839
#define WITH_CUBE_SYM 840
#define WITH_ROLLUP_SYM 841
#define WORK_SYM 842
#define WRAPPER_SYM 843
#define WRITE_SYM 844
#define X509_SYM 845
#define XA_SYM 846
#define XML_SYM 847
#define XOR 848
#define YEAR_MONTH_SYM 849
#define YEAR_SYM 850
#define ZEROFILL 851




/* Copy the first part of user declarations.  */
#line 24 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

#ifndef MCP_WL3749
static bool add_create_index_prepare (LEX *lex, Table_ident *table, enum ha_build_method method)
#else
static bool add_create_index_prepare (LEX *lex, Table_ident *table)
#endif
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
#ifndef MCP_WL3749
  lex->alter_info.build_method= method;
#endif
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 737 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
#ifndef MCP_WL3749
  enum ha_build_method build_method;
#endif
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
}
/* Line 187 of yacc.c.  */
#line 2061 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 788 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 2077 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  572
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   50152

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  616
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  886
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2504
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4253

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   851

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   609,     2,     2,     2,   603,   598,     2,
     606,   607,   601,   600,   608,   599,   614,   602,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   615,   612,
       2,     2,     2,     2,   613,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   604,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   610,   597,   611,   605,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   230,   234,   240,   242,   243,   245,   249,
     251,   255,   259,   263,   267,   268,   276,   277,   291,   292,
     306,   307,   321,   322,   329,   330,   334,   339,   344,   348,
     351,   362,   364,   368,   371,   374,   377,   380,   383,   386,
     389,   390,   404,   405,   412,   415,   416,   418,   422,   424,
     425,   428,   429,   432,   433,   435,   439,   444,   445,   448,
     449,   452,   454,   456,   458,   460,   462,   464,   466,   468,
     470,   472,   474,   476,   478,   479,   483,   485,   486,   489,
     490,   493,   496,   499,   502,   505,   509,   513,   515,   517,
     519,   522,   526,   530,   531,   536,   537,   541,   542,   544,
     548,   550,   551,   553,   557,   559,   560,   564,   565,   567,
     571,   573,   578,   579,   581,   583,   585,   586,   590,   593,
     597,   598,   602,   603,   609,   615,   616,   624,   630,   631,
     634,   636,   638,   640,   644,   646,   648,   650,   654,   655,
     657,   659,   661,   663,   666,   668,   672,   674,   676,   677,
     679,   680,   683,   687,   693,   695,   697,   699,   701,   703,
     705,   707,   709,   711,   713,   715,   717,   719,   721,   723,
     727,   729,   733,   734,   737,   739,   741,   743,   745,   747,
     749,   751,   753,   755,   757,   759,   761,   763,   764,   770,
     771,   774,   775,   779,   780,   783,   786,   789,   792,   793,
     800,   803,   804,   807,   809,   811,   815,   816,   817,   818,
     826,   827,   830,   833,   835,   837,   838,   839,   848,   849,
     856,   858,   861,   863,   866,   867,   868,   875,   876,   877,
     884,   885,   888,   889,   895,   896,   898,   899,   905,   906,
     909,   910,   916,   921,   922,   923,   932,   933,   941,   943,
     945,   947,   949,   951,   954,   959,   965,   966,   971,   976,
     981,   985,   989,   992,   995,   996,   999,  1001,  1004,  1008,
    1010,  1012,  1014,  1016,  1018,  1021,  1025,  1027,  1029,  1031,
    1033,  1035,  1037,  1039,  1041,  1043,  1045,  1048,  1052,  1054,
    1056,  1058,  1060,  1062,  1064,  1066,  1069,  1073,  1075,  1077,
    1079,  1081,  1083,  1085,  1087,  1089,  1091,  1094,  1098,  1100,
    1102,  1104,  1107,  1110,  1113,  1115,  1117,  1119,  1121,  1124,
    1128,  1132,  1136,  1140,  1144,  1148,  1152,  1156,  1161,  1162,
    1164,  1166,  1168,  1170,  1172,  1175,  1179,  1182,  1187,  1193,
    1194,  1200,  1201,  1202,  1208,  1209,  1217,  1219,  1220,  1222,
    1223,  1228,  1229,  1230,  1234,  1240,  1246,  1247,  1252,  1255,
    1258,  1261,  1264,  1265,  1267,  1268,  1270,  1272,  1276,  1278,
    1283,  1289,  1295,  1296,  1299,  1300,  1301,  1309,  1310,  1320,
    1322,  1326,  1328,  1330,  1331,  1334,  1335,  1339,  1341,  1345,
    1346,  1353,  1355,  1356,  1357,  1363,  1364,  1369,  1371,  1373,
    1375,  1379,  1381,  1385,  1386,  1387,  1393,  1395,  1399,  1401,
    1403,  1404,  1408,  1410,  1414,  1415,  1420,  1422,  1423,  1425,
    1428,  1430,  1434,  1439,  1443,  1447,  1451,  1456,  1461,  1465,
    1466,  1467,  1474,  1475,  1477,  1478,  1480,  1482,  1485,  1487,
    1489,  1490,  1492,  1494,  1497,  1499,  1500,  1504,  1505,  1507,
    1509,  1512,  1514,  1517,  1521,  1525,  1529,  1533,  1537,  1541,
    1545,  1549,  1553,  1557,  1561,  1565,  1569,  1573,  1574,  1581,
    1583,  1585,  1589,  1594,  1599,  1602,  1605,  1608,  1612,  1616,
    1621,  1626,  1628,  1630,  1632,  1634,  1636,  1638,  1640,  1642,
    1644,  1646,  1648,  1650,  1653,  1655,  1657,  1659,  1661,  1663,
    1665,  1669,  1671,  1673,  1676,  1679,  1687,  1696,  1705,  1714,
    1723,  1726,  1727,  1729,  1734,  1735,  1737,  1740,  1741,  1746,
    1750,  1754,  1758,  1760,  1763,  1765,  1767,  1771,  1774,  1778,
    1781,  1784,  1786,  1790,  1794,  1797,  1801,  1803,  1805,  1807,
    1809,  1811,  1814,  1816,  1818,  1820,  1823,  1827,  1830,  1834,
    1837,  1840,  1844,  1848,  1852,  1853,  1860,  1861,  1868,  1871,
    1873,  1875,  1877,  1879,  1881,  1883,  1885,  1887,  1889,  1891,
    1893,  1896,  1899,  1901,  1904,  1906,  1909,  1913,  1916,  1918,
    1920,  1922,  1924,  1926,  1928,  1930,  1933,  1934,  1936,  1938,
    1944,  1945,  1947,  1950,  1952,  1954,  1956,  1958,  1962,  1966,
    1970,  1974,  1975,  1977,  1978,  1980,  1981,  1983,  1986,  1988,
    1990,  1993,  1996,  2001,  2003,  2007,  2010,  2012,  2015,  2018,
    2021,  2024,  2027,  2030,  2033,  2036,  2039,  2042,  2045,  2047,
    2050,  2052,  2054,  2056,  2058,  2060,  2061,  2064,  2066,  2068,
    2070,  2072,  2074,  2075,  2078,  2080,  2082,  2083,  2085,  2087,
    2090,  2093,  2095,  2098,  2101,  2102,  2104,  2106,  2108,  2112,
    2114,  2118,  2119,  2121,  2122,  2124,  2130,  2131,  2135,  2139,
    2141,  2142,  2145,  2148,  2151,  2152,  2156,  2160,  2167,  2174,
    2176,  2178,  2181,  2184,  2187,  2189,  2192,  2195,  2197,  2199,
    2200,  2202,  2204,  2206,  2208,  2209,  2211,  2213,  2215,  2216,
    2218,  2221,  2222,  2224,  2225,  2227,  2228,  2230,  2232,  2235,
    2237,  2240,  2242,  2245,  2248,  2251,  2255,  2258,  2260,  2262,
    2264,  2266,  2270,  2272,  2274,  2276,  2281,  2284,  2286,  2291,
    2292,  2294,  2295,  2298,  2300,  2304,  2305,  2313,  2314,  2320,
    2328,  2329,  2335,  2336,  2342,  2343,  2349,  2350,  2355,  2356,
    2367,  2371,  2376,  2380,  2384,  2392,  2393,  2397,  2399,  2404,
    2405,  2409,  2410,  2413,  2414,  2416,  2417,  2420,  2423,  2426,
    2429,  2431,  2433,  2435,  2439,  2444,  2445,  2452,  2457,  2458,
    2464,  2465,  2472,  2477,  2481,  2483,  2484,  2486,  2488,  2491,
    2493,  2495,  2496,  2502,  2503,  2507,  2510,  2511,  2517,  2518,
    2519,  2526,  2528,  2532,  2534,  2536,  2540,  2543,  2547,  2550,
    2555,  2556,  2563,  2564,  2565,  2574,  2579,  2584,  2588,  2592,
    2595,  2598,  2605,  2611,  2615,  2621,  2623,  2625,  2627,  2628,
    2630,  2631,  2633,  2634,  2636,  2638,  2639,  2642,  2644,  2645,
    2647,  2649,  2651,  2652,  2658,  2662,  2663,  2669,  2673,  2677,
    2678,  2682,  2683,  2686,  2688,  2692,  2693,  2695,  2697,  2698,
    2701,  2703,  2707,  2708,  2714,  2715,  2717,  2719,  2720,  2727,
    2728,  2730,  2732,  2735,  2737,  2739,  2741,  2742,  2748,  2751,
    2752,  2758,  2759,  2761,  2763,  2766,  2768,  2770,  2772,  2774,
    2776,  2779,  2780,  2786,  2787,  2789,  2791,  2792,  2797,  2802,
    2806,  2812,  2814,  2818,  2822,  2823,  2830,  2832,  2834,  2836,
    2840,  2843,  2847,  2849,  2851,  2852,  2859,  2861,  2863,  2865,
    2869,  2873,  2878,  2879,  2886,  2887,  2890,  2891,  2896,  2897,
    2900,  2902,  2905,  2910,  2913,  2917,  2920,  2924,  2925,  2929,
    2930,  2931,  2938,  2941,  2943,  2945,  2948,  2951,  2960,  2965,
    2966,  2968,  2971,  2973,  2975,  2977,  2979,  2980,  2983,  2988,
    2992,  2994,  2996,  3000,  3005,  3006,  3007,  3008,  3011,  3014,
    3016,  3018,  3019,  3022,  3026,  3030,  3034,  3037,  3041,  3046,
    3050,  3055,  3059,  3064,  3066,  3070,  3075,  3079,  3083,  3090,
    3092,  3098,  3105,  3111,  3119,  3126,  3135,  3141,  3148,  3153,
    3158,  3164,  3168,  3173,  3175,  3179,  3183,  3187,  3191,  3195,
    3199,  3205,  3211,  3215,  3219,  3223,  3227,  3231,  3235,  3237,
    3239,  3241,  3243,  3245,  3247,  3249,  3251,  3253,  3255,  3257,
    3259,  3261,  3263,  3265,  3267,  3269,  3271,  3273,  3275,  3277,
    3279,  3283,  3285,  3287,  3289,  3291,  3295,  3298,  3301,  3304,
    3307,  3311,  3315,  3321,  3328,  3333,  3338,  3346,  3349,  3356,
    3362,  3369,  3376,  3381,  3386,  3392,  3397,  3404,  3407,  3412,
    3417,  3422,  3433,  3440,  3449,  3456,  3461,  3466,  3473,  3478,
    3483,  3488,  3495,  3500,  3508,  3516,  3524,  3531,  3538,  3545,
    3552,  3556,  3561,  3568,  3577,  3580,  3583,  3588,  3597,  3606,
    3613,  3620,  3623,  3628,  3635,  3642,  3651,  3660,  3667,  3676,
    3683,  3686,  3691,  3700,  3709,  3712,  3715,  3718,  3723,  3728,
    3733,  3738,  3742,  3751,  3756,  3763,  3768,  3773,  3778,  3785,
    3794,  3801,  3806,  3813,  3815,  3822,  3827,  3832,  3837,  3842,
    3847,  3854,  3859,  3860,  3866,  3873,  3876,  3880,  3881,  3886,
    3887,  3891,  3892,  3894,  3896,  3900,  3905,  3910,  3916,  3921,
    3926,  3931,  3937,  3942,  3943,  3944,  3952,  3957,  3963,  3968,
    3974,  3979,  3984,  3989,  3994,  3999,  4005,  4006,  4015,  4016,
    4020,  4024,  4026,  4031,  4032,  4034,  4035,  4038,  4039,  4041,
    4042,  4046,  4049,  4053,  4056,  4058,  4061,  4063,  4066,  4068,
    4070,  4072,  4075,  4076,  4078,  4080,  4084,  4086,  4090,  4092,
    4096,  4097,  4099,  4100,  4103,  4108,  4114,  4116,  4118,  4120,
    4122,  4127,  4129,  4133,  4137,  4141,  4142,  4149,  4150,  4157,
    4158,  4167,  4172,  4173,  4182,  4183,  4194,  4201,  4202,  4211,
    4212,  4223,  4230,  4232,  4235,  4238,  4239,  4244,  4248,  4254,
    4257,  4258,  4259,  4267,  4269,  4270,  4271,  4278,  4279,  4283,
    4284,  4285,  4291,  4292,  4294,  4295,  4297,  4298,  4301,  4305,
    4309,  4311,  4313,  4314,  4322,  4323,  4331,  4333,  4336,  4337,
    4338,  4341,  4342,  4345,  4346,  4348,  4350,  4352,  4354,  4358,
    4360,  4364,  4366,  4368,  4370,  4372,  4374,  4376,  4378,  4380,
    4382,  4384,  4386,  4388,  4390,  4392,  4394,  4396,  4398,  4400,
    4402,  4404,  4406,  4408,  4410,  4412,  4414,  4415,  4417,  4419,
    4420,  4423,  4424,  4426,  4427,  4428,  4432,  4433,  4434,  4438,
    4441,  4442,  4443,  4448,  4453,  4456,  4457,  4459,  4461,  4465,
    4469,  4471,  4474,  4475,  4477,  4478,  4483,  4488,  4491,  4492,
    4494,  4496,  4497,  4499,  4500,  4502,  4505,  4507,  4511,  4515,
    4517,  4519,  4521,  4523,  4525,  4526,  4529,  4531,  4533,  4535,
    4537,  4539,  4541,  4543,  4545,  4547,  4549,  4551,  4553,  4555,
    4557,  4559,  4561,  4563,  4565,  4567,  4569,  4571,  4573,  4575,
    4576,  4577,  4584,  4585,  4587,  4591,  4593,  4597,  4598,  4601,
    4605,  4607,  4610,  4612,  4613,  4617,  4618,  4619,  4627,  4630,
    4632,  4633,  4637,  4638,  4646,  4647,  4655,  4660,  4667,  4672,
    4677,  4682,  4683,  4690,  4695,  4700,  4706,  4713,  4718,  4720,
    4724,  4726,  4728,  4732,  4734,  4735,  4738,  4739,  4741,  4742,
    4743,  4752,  4753,  4754,  4761,  4762,  4764,  4766,  4768,  4770,
    4772,  4775,  4777,  4779,  4781,  4785,  4790,  4791,  4795,  4799,
    4801,  4804,  4807,  4808,  4812,  4813,  4819,  4823,  4825,  4829,
    4831,  4835,  4837,  4839,  4840,  4842,  4843,  4848,  4849,  4851,
    4855,  4857,  4859,  4861,  4862,  4863,  4870,  4871,  4872,  4884,
    4888,  4890,  4894,  4898,  4900,  4904,  4905,  4907,  4908,  4913,
    4914,  4921,  4922,  4928,  4929,  4936,  4938,  4942,  4945,  4950,
    4951,  4954,  4955,  4958,  4960,  4962,  4964,  4965,  4970,  4971,
    4973,  4974,  4976,  4978,  4982,  4984,  4986,  4989,  4992,  4995,
    4997,  4999,  5001,  5003,  5004,  5008,  5009,  5013,  5016,  5021,
    5026,  5030,  5035,  5040,  5042,  5046,  5050,  5057,  5060,  5063,
    5064,  5071,  5072,  5079,  5085,  5088,  5090,  5092,  5094,  5100,
    5106,  5109,  5112,  5114,  5119,  5123,  5126,  5130,  5133,  5136,
    5138,  5142,  5147,  5151,  5155,  5158,  5161,  5165,  5169,  5173,
    5177,  5181,  5185,  5189,  5193,  5195,  5197,  5199,  5201,  5203,
    5204,  5206,  5207,  5210,  5211,  5213,  5215,  5217,  5218,  5221,
    5222,  5225,  5226,  5229,  5232,  5233,  5238,  5239,  5244,  5246,
    5248,  5249,  5251,  5253,  5254,  5256,  5258,  5259,  5264,  5265,
    5266,  5272,  5274,  5275,  5279,  5283,  5285,  5288,  5291,  5294,
    5297,  5300,  5303,  5306,  5308,  5310,  5312,  5314,  5316,  5318,
    5320,  5322,  5323,  5325,  5326,  5330,  5334,  5336,  5337,  5341,
    5343,  5346,  5347,  5349,  5350,  5354,  5358,  5361,  5364,  5368,
    5369,  5371,  5373,  5376,  5377,  5378,  5379,  5380,  5402,  5404,
    5406,  5407,  5409,  5410,  5412,  5414,  5415,  5417,  5419,  5420,
    5423,  5426,  5428,  5432,  5437,  5441,  5445,  5446,  5449,  5452,
    5454,  5458,  5462,  5463,  5468,  5469,  5473,  5475,  5477,  5478,
    5482,  5485,  5489,  5491,  5493,  5496,  5497,  5500,  5504,  5506,
    5512,  5514,  5516,  5519,  5522,  5524,  5526,  5528,  5530,  5532,
    5535,  5538,  5540,  5542,  5544,  5546,  5548,  5550,  5552,  5555,
    5558,  5561,  5564,  5567,  5569,  5571,  5573,  5575,  5577,  5579,
    5581,  5585,  5591,  5593,  5595,  5597,  5599,  5601,  5605,  5610,
    5616,  5618,  5624,  5628,  5631,  5633,  5637,  5640,  5643,  5648,
    5650,  5652,  5654,  5656,  5658,  5660,  5662,  5664,  5666,  5668,
    5670,  5672,  5674,  5676,  5680,  5683,  5685,  5687,  5689,  5691,
    5693,  5695,  5697,  5699,  5701,  5703,  5705,  5707,  5709,  5711,
    5713,  5715,  5717,  5719,  5721,  5723,  5725,  5727,  5729,  5731,
    5733,  5735,  5737,  5739,  5741,  5743,  5745,  5747,  5749,  5751,
    5753,  5755,  5757,  5759,  5761,  5763,  5765,  5767,  5769,  5771,
    5773,  5775,  5777,  5779,  5781,  5783,  5785,  5787,  5789,  5791,
    5793,  5795,  5797,  5799,  5801,  5803,  5805,  5807,  5809,  5811,
    5813,  5815,  5817,  5819,  5821,  5823,  5825,  5827,  5829,  5831,
    5833,  5835,  5837,  5839,  5841,  5843,  5845,  5847,  5849,  5851,
    5853,  5855,  5857,  5859,  5861,  5863,  5865,  5867,  5869,  5871,
    5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,  5889,  5891,
    5893,  5895,  5897,  5899,  5901,  5903,  5905,  5907,  5909,  5911,
    5913,  5915,  5917,  5919,  5921,  5923,  5925,  5927,  5929,  5931,
    5933,  5935,  5937,  5939,  5941,  5943,  5945,  5947,  5949,  5951,
    5953,  5955,  5957,  5959,  5961,  5963,  5965,  5967,  5969,  5971,
    5973,  5975,  5977,  5979,  5981,  5983,  5985,  5987,  5989,  5991,
    5993,  5995,  5997,  5999,  6001,  6003,  6005,  6007,  6009,  6011,
    6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,  6029,  6031,
    6033,  6035,  6037,  6039,  6041,  6043,  6045,  6047,  6049,  6051,
    6053,  6055,  6057,  6059,  6061,  6063,  6065,  6067,  6069,  6071,
    6073,  6075,  6077,  6079,  6081,  6083,  6085,  6087,  6089,  6091,
    6093,  6095,  6097,  6099,  6101,  6103,  6105,  6107,  6109,  6111,
    6113,  6115,  6117,  6119,  6121,  6123,  6125,  6127,  6129,  6131,
    6133,  6135,  6137,  6139,  6141,  6143,  6145,  6147,  6149,  6151,
    6153,  6155,  6157,  6159,  6161,  6163,  6165,  6167,  6169,  6171,
    6173,  6175,  6177,  6179,  6181,  6183,  6185,  6187,  6189,  6191,
    6193,  6195,  6197,  6199,  6201,  6203,  6205,  6207,  6209,  6211,
    6213,  6215,  6217,  6219,  6221,  6223,  6225,  6227,  6229,  6231,
    6233,  6235,  6237,  6239,  6241,  6243,  6245,  6247,  6249,  6251,
    6253,  6255,  6257,  6259,  6261,  6263,  6265,  6267,  6269,  6271,
    6273,  6275,  6277,  6279,  6281,  6283,  6285,  6287,  6289,  6291,
    6293,  6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,  6311,
    6313,  6315,  6317,  6319,  6321,  6323,  6325,  6327,  6329,  6331,
    6333,  6335,  6337,  6339,  6341,  6343,  6345,  6346,  6351,  6352,
    6354,  6356,  6360,  6361,  6364,  6366,  6368,  6370,  6372,  6373,
    6375,  6376,  6378,  6380,  6382,  6383,  6386,  6389,  6392,  6394,
    6397,  6402,  6408,  6413,  6420,  6423,  6427,  6431,  6435,  6441,
    6443,  6447,  6451,  6454,  6457,  6460,  6462,  6464,  6469,  6474,
    6476,  6478,  6480,  6482,  6484,  6485,  6490,  6492,  6494,  6496,
    6500,  6504,  6506,  6508,  6511,  6514,  6515,  6519,  6524,  6528,
    6529,  6537,  6539,  6542,  6544,  6546,  6548,  6550,  6552,  6554,
    6555,  6561,  6563,  6565,  6567,  6569,  6571,  6575,  6582,  6589,
    6596,  6604,  6610,  6614,  6623,  6632,  6641,  6648,  6649,  6651,
    6653,  6656,  6657,  6659,  6661,  6665,  6666,  6670,  6671,  6675,
    6676,  6680,  6681,  6685,  6687,  6689,  6691,  6693,  6695,  6697,
    6699,  6701,  6703,  6705,  6707,  6710,  6713,  6715,  6719,  6722,
    6725,  6728,  6731,  6734,  6737,  6740,  6743,  6745,  6747,  6750,
    6751,  6753,  6757,  6759,  6762,  6765,  6768,  6770,  6774,  6778,
    6780,  6782,  6786,  6788,  6792,  6797,  6803,  6808,  6815,  6817,
    6818,  6822,  6826,  6828,  6830,  6831,  6834,  6837,  6840,  6843,
    6844,  6847,  6848,  6852,  6855,  6857,  6860,  6863,  6866,  6869,
    6872,  6873,  6877,  6878,  6880,  6881,  6885,  6888,  6889,  6891,
    6894,  6895,  6897,  6902,  6907,  6913,  6916,  6920,  6921,  6923,
    6924,  6929,  6930,  6932,  6934,  6935,  6937,  6938,  6941,  6944,
    6946,  6947,  6949,  6951,  6954,  6958,  6961,  6962,  6969,  6973,
    6974,  6975,  6976,  6978,  6981,  6983,  6985,  6987,  6989,  6991,
    6993,  6995,  6997,  6999,  7002,  7005,  7009,  7011,  7013,  7015,
    7017,  7019,  7021,  7023,  7025,  7027,  7029,  7031,  7033,  7035,
    7036,  7040,  7042,  7045,  7047,  7050,  7054,  7058,  7062,  7063,
    7067,  7071,  7072,  7080,  7081,  7085,  7087,  7091,  7092,  7096,
    7099,  7104,  7105,  7109,  7114,  7119,  7120,  7121,  7122,  7139,
    7148,  7156,  7157,  7158,  7159,  7160,  7161,  7177,  7178,  7179,
    7180,  7181,  7194,  7199,  7204,  7208,  7213,  7217,  7220,  7222,
    7226,  7232,  7234,  7236,  7237,  7239,  7241,  7242,  7245,  7246,
    7247,  7251,  7252,  7255,  7261
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     617,     0,    -1,   149,    -1,    -1,   620,   618,   612,   619,
      -1,   620,   149,    -1,    -1,   149,    -1,   621,    -1,  1430,
      -1,   963,    -1,  1021,    -1,  1023,    -1,   670,    -1,   633,
      -1,  1024,    -1,  1013,    -1,  1436,    -1,   640,    -1,   622,
      -1,  1260,    -1,  1292,    -1,  1212,    -1,  1214,    -1,   626,
      -1,  1298,    -1,  1404,    -1,  1395,    -1,   631,    -1,  1224,
      -1,  1500,    -1,  1317,    -1,  1320,    -1,  1387,    -1,  1029,
      -1,  1037,    -1,   813,    -1,  1044,    -1,   624,    -1,  1313,
      -1,  1439,    -1,  1032,    -1,  1016,    -1,  1227,    -1,  1307,
      -1,   705,    -1,  1402,    -1,  1437,    -1,  1438,    -1,  1056,
      -1,  1370,    -1,   698,    -1,  1278,    -1,  1002,    -1,  1005,
      -1,  1271,    -1,  1501,    -1,  1393,    -1,  1252,    -1,  1319,
      -1,  1492,    -1,   623,   384,  1364,    -1,   116,    -1,   137,
      -1,   384,  1364,   183,   625,    -1,  1361,    -1,   613,  1366,
      -1,    -1,   162,  1364,   627,   628,    -1,    -1,   565,   629,
      -1,   629,   608,   630,    -1,   630,    -1,   613,  1366,    -1,
      -1,   201,   632,  1366,    -1,    -1,    56,   288,   533,   634,
     635,    -1,   636,    -1,   635,   608,   636,    -1,   275,   153,
    1361,    -1,   273,   153,  1361,    -1,   289,   153,  1361,    -1,
     278,   153,  1361,    -1,   279,   153,  1192,    -1,   274,   153,
    1192,    -1,   286,   153,  1192,    -1,   282,   153,  1361,    -1,
     281,   153,  1361,    -1,   283,   153,  1361,    -1,   284,   153,
    1361,    -1,   285,   153,  1361,    -1,   287,   153,  1192,    -1,
     290,   153,  1349,    -1,   215,   153,   606,   637,   607,    -1,
     639,    -1,    -1,   638,    -1,   637,   608,   638,    -1,  1192,
      -1,   276,   153,  1361,    -1,   277,   153,  1194,    -1,   414,
     153,  1361,    -1,   415,   153,  1192,    -1,    -1,    95,   864,
     516,   867,  1357,   641,   802,    -1,    -1,    95,   979,   941,
     218,  1364,   945,   350,  1357,   642,   606,   958,   607,   946,
      -1,    -1,    95,   979,   942,   218,  1364,   944,   350,  1357,
     643,   606,   958,   607,   947,    -1,    -1,    95,   979,   943,
     218,  1364,   944,   350,  1357,   644,   606,   958,   607,   948,
      -1,    -1,    95,   103,   867,  1364,   645,   861,    -1,    -1,
      95,   646,  1458,    -1,    95,   562,   663,  1420,    -1,    95,
     264,   195,   765,    -1,    95,   514,   762,    -1,    95,   647,
      -1,   457,  1366,   180,   106,   588,  1366,   356,   606,   648,
     607,    -1,   649,    -1,   648,   608,   649,    -1,   562,  1361,
      -1,   204,  1361,    -1,   103,  1361,    -1,   366,  1361,    -1,
     375,  1361,    -1,   473,  1361,    -1,   381,  1192,    -1,    -1,
    1073,   160,   867,   664,   651,   350,   446,   652,   657,   654,
     659,   136,   660,    -1,    -1,   161,  1077,  1164,   653,   655,
     656,    -1,    22,  1077,    -1,    -1,   145,    -1,   130,   350,
     469,    -1,   130,    -1,    -1,   492,  1077,    -1,    -1,   148,
    1077,    -1,    -1,   658,    -1,   350,    78,   385,    -1,   350,
      78,   338,   385,    -1,    -1,    74,  1361,    -1,    -1,   661,
     662,    -1,   711,    -1,   713,    -1,   709,    -1,   730,    -1,
     748,    -1,   750,    -1,   745,    -1,   715,    -1,   717,    -1,
     718,    -1,   719,    -1,   720,    -1,   722,    -1,    -1,  1364,
     614,  1364,    -1,  1364,    -1,    -1,   665,   667,    -1,    -1,
     666,   668,    -1,    74,  1361,    -1,   243,   488,    -1,   340,
     488,    -1,    88,   488,    -1,   400,   488,   106,    -1,   315,
     488,   106,    -1,   669,    -1,   667,    -1,   128,    -1,  1083,
     128,    -1,   488,   450,   121,    -1,   488,   450,   230,    -1,
      -1,    49,   664,   671,   672,    -1,    -1,   606,   673,   607,
      -1,    -1,   674,    -1,   674,   608,  1077,    -1,  1077,    -1,
      -1,   676,    -1,   676,   608,   678,    -1,   678,    -1,    -1,
    1364,   677,   913,    -1,    -1,   680,    -1,   680,   608,   681,
      -1,   681,    -1,   682,   677,  1364,   913,    -1,    -1,   231,
      -1,   365,    -1,   222,    -1,    -1,   683,   708,   612,    -1,
     708,   612,    -1,   684,   708,   612,    -1,    -1,   685,   686,
     612,    -1,    -1,   119,   706,   687,   913,   707,    -1,   119,
    1364,    81,   181,   694,    -1,    -1,   119,   691,   198,   181,
     688,   692,   708,    -1,   119,  1364,   100,   181,   689,    -1,
      -1,   690,  1056,    -1,   164,    -1,    90,    -1,   693,    -1,
     692,   608,   693,    -1,   697,    -1,  1192,    -1,   695,    -1,
     480,   696,  1362,    -1,    -1,   570,    -1,   694,    -1,  1364,
      -1,   481,    -1,  1083,   182,    -1,   479,    -1,   466,   699,
     701,    -1,  1364,    -1,   695,    -1,    -1,   699,    -1,    -1,
     459,   702,    -1,   704,   153,   703,    -1,   702,   608,   704,
     153,   703,    -1,  1348,    -1,  1104,    -1,  1353,    -1,    63,
      -1,   501,    -1,    85,    -1,    87,    -1,    86,    -1,    54,
      -1,   447,    -1,   518,    -1,    73,    -1,   101,    -1,   306,
      -1,   323,    -1,   429,   700,   701,    -1,  1364,    -1,   706,
     608,  1364,    -1,    -1,   120,  1077,    -1,   711,    -1,   713,
      -1,   709,    -1,   730,    -1,   748,    -1,   750,    -1,   745,
      -1,   715,    -1,   717,    -1,   718,    -1,   719,    -1,   720,
      -1,   722,    -1,    -1,   213,   710,   725,   147,   213,    -1,
      -1,   712,   621,    -1,    -1,   435,   714,  1077,    -1,    -1,
     716,   754,    -1,   248,  1365,    -1,   237,  1365,    -1,   354,
    1364,    -1,    -1,   172,   723,  1364,   228,   721,   724,    -1,
      65,  1364,    -1,    -1,   334,   183,    -1,   183,    -1,  1364,
      -1,   724,   608,  1364,    -1,    -1,    -1,    -1,   726,  1077,
     525,   727,   684,   728,   729,    -1,    -1,   144,   725,    -1,
     143,   684,    -1,   731,    -1,   734,    -1,    -1,    -1,    52,
     732,  1077,   733,   736,   744,   147,    52,    -1,    -1,    52,
     735,   737,   744,   147,    52,    -1,   738,    -1,   736,   738,
      -1,   741,    -1,   737,   741,    -1,    -1,    -1,   581,   739,
    1077,   740,   525,   684,    -1,    -1,    -1,   581,   742,  1077,
     743,   525,   684,    -1,    -1,   143,   684,    -1,    -1,  1365,
     615,   746,   754,   747,    -1,    -1,  1365,    -1,    -1,  1365,
     615,   749,   752,   747,    -1,    -1,   751,   752,    -1,    -1,
      30,   753,   685,   683,   147,    -1,   270,   684,   147,   270,
      -1,    -1,    -1,   583,   755,  1077,   136,   756,   684,   147,
     583,    -1,    -1,   424,   684,   558,   757,  1077,   147,   424,
      -1,    29,    -1,     8,    -1,   224,    -1,   559,    -1,   124,
      -1,   787,   789,    -1,   787,    56,   784,   768,    -1,   787,
       6,   784,   763,   772,    -1,    -1,   564,   264,   195,  1364,
      -1,   787,     6,   784,   775,    -1,   787,   137,   784,   775,
      -1,   788,   767,   778,    -1,   788,   767,   781,    -1,     6,
     785,    -1,     6,   786,    -1,    -1,   769,   770,    -1,   771,
      -1,   770,   771,    -1,   770,   608,   771,    -1,   790,    -1,
     791,    -1,   792,    -1,   773,    -1,   774,    -1,   773,   774,
      -1,   773,   608,   774,    -1,   790,    -1,   791,    -1,   792,
      -1,   793,    -1,   796,    -1,   798,    -1,   800,    -1,   797,
      -1,   776,    -1,   777,    -1,   776,   777,    -1,   776,   608,
     777,    -1,   790,    -1,   791,    -1,   792,    -1,   798,    -1,
     800,    -1,   779,    -1,   780,    -1,   779,   780,    -1,   779,
     608,   780,    -1,   790,    -1,   794,    -1,   795,    -1,   796,
      -1,   798,    -1,   800,    -1,   797,    -1,   782,    -1,   783,
      -1,   782,   783,    -1,   782,   608,   783,    -1,   790,    -1,
     798,    -1,   800,    -1,   105,  1361,    -1,   548,  1361,    -1,
     407,  1361,    -1,  1364,    -1,  1364,    -1,   401,    -1,   403,
      -1,   338,     4,    -1,   220,  1244,   801,    -1,    24,  1244,
     801,    -1,   295,  1244,   801,    -1,   167,  1244,   801,    -1,
     549,  1244,   801,    -1,   408,  1244,   801,    -1,   335,  1244,
    1193,    -1,    74,  1244,  1361,    -1,  1285,   151,  1244,   875,
      -1,    -1,   800,    -1,   578,    -1,   341,    -1,  1193,    -1,
     210,    -1,   606,   803,    -1,   868,   808,   805,    -1,   253,
    1357,    -1,   606,   253,  1357,   607,    -1,   881,   607,   868,
     808,   805,    -1,    -1,   808,   857,   607,   804,  1443,    -1,
      -1,    -1,  1328,   860,   857,   806,  1440,    -1,    -1,  1328,
     860,   606,   857,   607,   807,  1443,    -1,   809,    -1,    -1,
     810,    -1,    -1,   374,   812,   811,   815,    -1,    -1,    -1,
     374,   814,   815,    -1,    46,   816,   825,   826,   833,    -1,
     818,   241,   606,   819,   607,    -1,    -1,   818,   199,   817,
     823,    -1,   399,   823,    -1,   399,   822,    -1,   258,   823,
      -1,   258,   822,    -1,    -1,   255,    -1,    -1,   820,    -1,
     821,    -1,   820,   608,   821,    -1,  1364,    -1,    70,   606,
     819,   607,    -1,   606,  1073,   831,  1074,   607,    -1,   606,
    1073,   831,  1074,   607,    -1,    -1,   373,  1193,    -1,    -1,
      -1,   505,    46,   818,   199,   824,   827,   832,    -1,    -1,
     505,    46,   818,   241,   606,   829,   607,   828,   832,    -1,
     830,    -1,   829,   608,   830,    -1,  1364,    -1,  1080,    -1,
      -1,   504,  1193,    -1,    -1,   606,   834,   607,    -1,   835,
      -1,   834,   608,   835,    -1,    -1,   374,   836,   837,   838,
     854,   849,    -1,  1364,    -1,    -1,    -1,   569,   250,   524,
     839,   841,    -1,    -1,   569,   231,   840,   842,    -1,   299,
      -1,   844,    -1,   844,    -1,   606,   843,   607,    -1,   844,
      -1,   843,   608,   844,    -1,    -1,    -1,   606,   845,   847,
     846,   607,    -1,   848,    -1,   847,   608,   848,    -1,   299,
      -1,  1080,    -1,    -1,   606,   850,   607,    -1,   851,    -1,
     850,   608,   851,    -1,    -1,   505,   852,   853,   854,    -1,
    1366,    -1,    -1,   855,    -1,   855,   856,    -1,   856,    -1,
     514,  1244,  1366,    -1,  1285,   151,  1244,   875,    -1,   335,
    1244,  1193,    -1,   294,  1244,  1195,    -1,   312,  1244,  1195,
      -1,   106,   129,  1244,  1361,    -1,   218,   129,  1244,  1361,
      -1,    74,  1244,  1361,    -1,    -1,    -1,   451,   858,  1067,
    1071,   859,   879,    -1,    -1,    18,    -1,    -1,   862,    -1,
     863,    -1,   862,   863,    -1,   874,    -1,   873,    -1,    -1,
     865,    -1,   866,    -1,   866,   865,    -1,   519,    -1,    -1,
     213,  1083,   163,    -1,    -1,   870,    -1,   871,    -1,   871,
     869,    -1,   871,    -1,   871,   870,    -1,   871,   608,   870,
      -1,   151,  1244,   875,    -1,   294,  1244,  1194,    -1,   312,
    1244,  1194,    -1,    26,  1244,  1192,    -1,   375,  1244,  1361,
      -1,    74,  1244,  1361,    -1,    25,  1244,  1194,    -1,   367,
    1244,  1192,    -1,   367,  1244,   120,    -1,    60,  1244,  1192,
      -1,   517,  1244,  1192,    -1,   123,  1244,  1192,    -1,   442,
    1244,   877,    -1,    -1,   553,  1244,   872,   606,  1306,   607,
      -1,   873,    -1,   874,    -1,   225,  1244,   878,    -1,   106,
     129,  1244,  1361,    -1,   218,   129,  1244,  1361,    -1,   514,
    1364,    -1,   498,   132,    -1,   498,   304,    -1,    82,  1244,
    1361,    -1,   240,  1244,  1192,    -1,   924,   915,  1244,   917,
      -1,   924,    68,  1244,   923,    -1,  1366,    -1,  1366,    -1,
     120,    -1,   175,    -1,   141,    -1,    79,    -1,   409,    -1,
      77,    -1,   340,    -1,   174,    -1,   244,    -1,  1187,    -1,
    1066,  1070,    -1,   500,    -1,   404,    -1,   118,    -1,   229,
      -1,   882,    -1,   883,    -1,   882,   608,   883,    -1,   884,
      -1,   885,    -1,   890,   886,    -1,   890,   930,    -1,   936,
     960,   945,   606,   958,   607,   946,    -1,   942,   939,   960,
     944,   606,   958,   607,   947,    -1,   943,   939,   960,   944,
     606,   958,   607,   948,    -1,   888,   937,   960,   945,   606,
     958,   607,   946,    -1,   888,   180,   241,   960,   606,   958,
     607,   930,    -1,   888,   887,    -1,    -1,   887,    -1,    61,
     606,  1077,   607,    -1,    -1,   889,    -1,    84,   960,    -1,
      -1,  1356,   891,   892,   910,    -1,   900,   908,   904,    -1,
     901,   909,   904,    -1,   177,   902,   904,    -1,    38,    -1,
      38,   907,    -1,    43,    -1,    42,    -1,   896,   907,   927,
      -1,   896,   927,    -1,   897,   907,   928,    -1,   897,   928,
      -1,    33,   907,    -1,    33,    -1,   898,   907,   927,    -1,
     899,   907,   928,    -1,   571,   907,    -1,   595,   908,   904,
      -1,   110,    -1,   529,    -1,   526,    -1,   107,    -1,   530,
      -1,    40,   908,    -1,   895,    -1,   300,    -1,   266,    -1,
     269,   571,    -1,   269,   898,   927,    -1,   532,   927,    -1,
     523,   908,   927,    -1,   302,   927,    -1,   267,   927,    -1,
     118,   902,   904,    -1,   345,   902,   904,    -1,   175,   902,
     904,    -1,    -1,   152,   893,   606,   962,   607,   927,    -1,
      -1,   459,   894,   606,   962,   607,   927,    -1,   269,   927,
      -1,   455,    -1,   190,    -1,   189,    -1,   379,    -1,   320,
      -1,   257,    -1,   319,    -1,   380,    -1,   321,    -1,    59,
      -1,   329,    -1,   326,    59,    -1,   896,   575,    -1,   572,
      -1,   326,   572,    -1,   346,    -1,   329,   572,    -1,   326,
      59,   575,    -1,   329,   575,    -1,   229,    -1,   531,    -1,
     471,    -1,   301,    -1,    32,    -1,   404,    -1,   135,    -1,
     135,   383,    -1,    -1,   907,    -1,   903,    -1,   606,   344,
     608,   344,   607,    -1,    -1,   905,    -1,   905,   906,    -1,
     906,    -1,   467,    -1,   557,    -1,   596,    -1,   606,   268,
     607,    -1,   606,   544,   607,    -1,   606,   117,   607,    -1,
     606,   344,   607,    -1,    -1,   907,    -1,    -1,   903,    -1,
      -1,   911,    -1,   911,   912,    -1,   912,    -1,   343,    -1,
    1083,   343,    -1,   120,   914,    -1,   350,   559,   339,  1076,
      -1,    25,    -1,   455,   120,   570,    -1,   929,   241,    -1,
     554,    -1,   554,   241,    -1,    74,  1361,    -1,    68,   921,
      -1,    72,   120,    -1,    72,   175,    -1,    72,   141,    -1,
     498,   120,    -1,   498,   132,    -1,   498,   304,    -1,   892,
     922,    -1,   339,  1076,    -1,  1347,    -1,    59,   459,    -1,
      58,    -1,  1366,    -1,    33,    -1,   916,    -1,   120,    -1,
      -1,   915,   917,    -1,  1366,    -1,    33,    -1,   919,    -1,
     120,    -1,  1366,    -1,    -1,    68,   923,    -1,   921,    -1,
     120,    -1,    -1,   120,    -1,    20,    -1,    33,    20,    -1,
      20,    33,    -1,   551,    -1,   551,    33,    -1,    33,   551,
      -1,    -1,   925,    -1,   926,    -1,    47,    -1,   915,   916,
     928,    -1,    33,    -1,    33,   915,   916,    -1,    -1,    33,
      -1,    -1,   387,    -1,   410,  1357,   931,   933,   934,    -1,
      -1,   606,   932,   607,    -1,   932,   608,  1364,    -1,  1364,
      -1,    -1,   291,   184,    -1,   291,   371,    -1,   291,   468,
      -1,    -1,   350,   559,   935,    -1,   350,   124,   935,    -1,
     350,   559,   935,   350,   124,   935,    -1,   350,   124,   935,
     350,   559,   935,    -1,   432,    -1,    50,    -1,   459,   343,
      -1,   340,     5,    -1,   459,   120,    -1,   938,    -1,   387,
     241,    -1,   554,   939,    -1,   241,    -1,   218,    -1,    -1,
     938,    -1,   239,    -1,   218,    -1,   217,    -1,    -1,   554,
      -1,   185,    -1,   477,    -1,    -1,   944,    -1,   944,   952,
      -1,    -1,   949,    -1,    -1,   951,    -1,    -1,   950,    -1,
     954,    -1,   949,   954,    -1,   955,    -1,   950,   955,    -1,
     956,    -1,   951,   956,    -1,   565,   957,    -1,   542,   957,
      -1,   240,  1244,  1192,    -1,    74,  1361,    -1,   953,    -1,
     952,    -1,   953,    -1,   953,    -1,   584,   370,  1360,    -1,
      45,    -1,   444,    -1,   199,    -1,   958,   608,   959,  1185,
      -1,   959,  1185,    -1,  1364,    -1,  1364,   606,   344,   607,
      -1,    -1,  1356,    -1,    -1,   614,  1364,    -1,  1345,    -1,
     962,   608,  1345,    -1,    -1,    13,   979,   998,   516,  1357,
     964,   975,    -1,    -1,    13,   103,   974,   965,   862,    -1,
      13,   103,  1364,   560,   106,   129,   325,    -1,    -1,    13,
     389,   664,   966,   665,    -1,    -1,    13,   186,   664,   967,
     665,    -1,    -1,    13,  1466,  1461,   968,  1468,    -1,    -1,
      13,  1461,   969,  1468,    -1,    -1,    13,  1461,   160,   664,
     970,   971,   972,   654,   659,   973,    -1,    13,   514,   764,
      -1,    13,   264,   195,   766,    -1,    13,   514,   761,    -1,
      13,   514,   760,    -1,    13,   457,  1366,   356,   606,   648,
     607,    -1,    -1,   350,   446,   652,    -1,   658,    -1,   350,
     446,   652,   658,    -1,    -1,   420,   533,   664,    -1,    -1,
     136,   660,    -1,    -1,  1364,    -1,    -1,   131,   514,    -1,
     216,   514,    -1,   991,   809,    -1,   991,   980,    -1,   980,
      -1,   810,    -1,   982,    -1,   137,   374,   989,    -1,   405,
     374,  1031,   981,    -1,    -1,   355,   374,  1031,   981,   976,
    1031,    -1,    14,   374,  1031,   981,    -1,    -1,    61,   374,
     981,   977,  1026,    -1,    -1,   422,   374,  1031,   981,   978,
    1018,    -1,    66,   374,  1031,  1193,    -1,   540,   374,   981,
      -1,   985,    -1,    -1,   353,    -1,   347,    -1,   419,   372,
      -1,    12,    -1,   989,    -1,    -1,     6,   374,  1031,   983,
     984,    -1,    -1,   606,   834,   607,    -1,   373,  1193,    -1,
      -1,   421,   374,  1031,   986,   987,    -1,    -1,    -1,   989,
     988,   228,   606,   834,   607,    -1,   990,    -1,   989,   608,
     990,    -1,  1364,    -1,   993,    -1,   991,   608,   993,    -1,
       6,   997,    -1,   992,   884,  1000,    -1,     6,   885,    -1,
     992,   606,   881,   607,    -1,    -1,    56,   997,  1356,   994,
     890,  1000,    -1,    -1,    -1,   316,   997,  1356,   995,   892,
     910,   996,  1000,    -1,   137,   997,  1356,   999,    -1,   137,
     180,   241,   960,    -1,   137,   387,   241,    -1,   137,   938,
    1356,    -1,   130,   239,    -1,   145,   239,    -1,    13,   997,
    1356,   459,   120,  1347,    -1,    13,   997,  1356,   137,   120,
      -1,   420,  1001,  1357,    -1,    92,   533,   915,   917,   922,
      -1,   869,    -1,   179,    -1,  1178,    -1,    -1,    71,    -1,
      -1,   214,    -1,    -1,   432,    -1,    50,    -1,    -1,     8,
    1364,    -1,   174,    -1,    -1,   533,    -1,   153,    -1,    18,
      -1,    -1,   493,   469,  1007,  1003,  1011,    -1,   497,   469,
    1007,    -1,    -1,   469,   493,  1007,  1004,  1011,    -1,   469,
     497,  1007,    -1,   493,   535,  1006,    -1,    -1,   584,    83,
     472,    -1,    -1,  1008,  1009,    -1,  1010,    -1,  1009,   608,
    1010,    -1,    -1,   489,    -1,   416,    -1,    -1,   558,  1012,
      -1,   639,    -1,  1012,   608,   639,    -1,    -1,    60,  1389,
    1014,  1218,  1015,    -1,    -1,   398,    -1,   166,    -1,    -1,
     422,  1031,  1389,  1017,  1218,  1018,    -1,    -1,  1019,    -1,
    1020,    -1,  1020,  1019,    -1,   398,    -1,   166,    -1,   563,
      -1,    -1,    14,  1031,  1389,  1022,  1218,    -1,    34,  1361,
      -1,    -1,    61,  1389,  1025,  1218,  1026,    -1,    -1,  1027,
      -1,  1028,    -1,  1028,  1027,    -1,   398,    -1,   170,    -1,
     303,    -1,   166,    -1,    57,    -1,   181,   560,    -1,    -1,
     355,  1031,  1389,  1030,  1218,    -1,    -1,   342,    -1,   260,
      -1,    -1,   420,  1389,  1033,  1035,    -1,   420,   562,   663,
    1034,    -1,  1367,   533,  1367,    -1,  1034,   608,  1367,   533,
    1367,    -1,  1036,    -1,  1035,   608,  1036,    -1,  1357,   533,
    1357,    -1,    -1,    48,   218,  1038,  1039,   231,  1043,    -1,
    1040,    -1,  1042,    -1,  1041,    -1,  1040,   608,  1041,    -1,
    1357,  1052,    -1,  1357,  1050,  1052,    -1,  1364,    -1,   120,
      -1,    -1,   259,   218,   228,    48,  1045,  1046,    -1,  1049,
      -1,  1047,    -1,  1048,    -1,  1047,   608,  1048,    -1,  1357,
    1052,  1055,    -1,  1357,  1050,  1052,  1055,    -1,    -1,   374,
     812,  1051,   606,   981,   607,    -1,    -1,  1053,  1054,    -1,
      -1,   938,   606,  1160,   607,    -1,    -1,   214,   247,    -1,
    1057,    -1,   451,  1060,    -1,   606,  1058,   607,  1443,    -1,
     451,  1062,    -1,   606,  1058,   607,    -1,   451,  1139,    -1,
     606,  1059,   607,    -1,    -1,  1062,  1061,  1440,    -1,    -1,
      -1,  1063,  1067,  1071,  1064,  1065,  1070,    -1,  1181,  1187,
      -1,  1207,    -1,  1066,    -1,  1207,  1066,    -1,  1066,  1207,
      -1,   183,  1121,  1170,  1175,  1172,  1181,  1187,  1198,    -1,
     183,   138,  1170,  1187,    -1,    -1,  1068,    -1,  1068,  1069,
      -1,  1069,    -1,  1457,    -1,   486,    -1,   484,    -1,    -1,
     181,   559,    -1,   263,   231,   461,   314,    -1,  1071,   608,
    1072,    -1,  1072,    -1,   601,    -1,  1073,  1351,  1074,    -1,
    1073,  1077,  1074,  1075,    -1,    -1,    -1,    -1,    18,  1364,
      -1,    18,  1361,    -1,  1364,    -1,  1361,    -1,    -1,   606,
     607,    -1,  1077,  1081,  1077,    -1,  1077,   593,  1077,    -1,
    1077,  1082,  1077,    -1,   338,  1077,    -1,  1078,   234,   539,
      -1,  1078,   234,  1083,   539,    -1,  1078,   234,   169,    -1,
    1078,   234,  1083,   169,    -1,  1078,   234,   555,    -1,  1078,
     234,  1083,   555,    -1,  1078,    -1,  1078,   234,   343,    -1,
    1078,   234,  1083,   343,    -1,  1078,   154,  1079,    -1,  1078,
    1085,  1079,    -1,  1078,  1085,  1086,   606,  1452,   607,    -1,
    1079,    -1,  1080,   231,   606,  1452,   607,    -1,  1080,  1083,
     231,   606,  1452,   607,    -1,  1080,   231,   606,  1077,   607,
      -1,  1080,   231,   606,  1077,   608,  1114,   607,    -1,  1080,
    1083,   231,   606,  1077,   607,    -1,  1080,  1083,   231,   606,
    1077,   608,  1114,   607,    -1,  1080,    31,  1080,    16,  1079,
      -1,  1080,  1083,    31,  1080,    16,  1079,    -1,  1080,   475,
     253,  1080,    -1,  1080,   253,  1087,  1174,    -1,  1080,  1083,
     253,  1087,  1174,    -1,  1080,   411,  1080,    -1,  1080,  1083,
     411,  1080,    -1,  1080,    -1,  1080,   597,  1080,    -1,  1080,
     598,  1080,    -1,  1080,   462,  1080,    -1,  1080,   463,  1080,
      -1,  1080,   600,  1080,    -1,  1080,   599,  1080,    -1,  1080,
     600,   227,  1077,  1164,    -1,  1080,   599,   227,  1077,  1164,
      -1,  1080,   601,  1080,    -1,  1080,   602,  1080,    -1,  1080,
     603,  1080,    -1,  1080,   134,  1080,    -1,  1080,   317,  1080,
      -1,  1080,   604,  1080,    -1,  1087,    -1,   362,    -1,   359,
      -1,    16,    -1,    15,    -1,   338,    -1,   337,    -1,   609,
      -1,   337,    -1,   153,    -1,   187,    -1,   197,    -1,   245,
      -1,   272,    -1,   331,    -1,    12,    -1,    17,    -1,  1353,
      -1,  1088,    -1,  1089,    -1,  1092,    -1,  1090,    -1,  1087,
      68,  1366,    -1,  1348,    -1,  1346,    -1,  1104,    -1,  1100,
      -1,  1087,   361,  1087,    -1,   600,  1087,    -1,   599,  1087,
      -1,   605,  1087,    -1,  1084,  1087,    -1,   606,  1452,   607,
      -1,   606,  1077,   607,    -1,   606,  1077,   608,  1114,   607,
      -1,   443,   606,  1077,   608,  1114,   607,    -1,   163,   606,
    1452,   607,    -1,   610,  1364,  1077,   611,    -1,   291,  1115,
       9,   606,  1080,  1094,   607,    -1,    33,  1087,    -1,    53,
     606,  1077,    18,  1112,   607,    -1,    52,  1117,  1119,  1118,
     147,    -1,    92,   606,  1077,   608,  1112,   607,    -1,    92,
     606,  1077,   565,   916,   607,    -1,   120,   606,  1353,   607,
      -1,   569,   606,  1354,   607,    -1,   227,  1077,  1164,   600,
    1077,    -1,    59,   606,  1114,   607,    -1,    59,   606,  1114,
     565,   916,   607,    -1,    99,  1076,    -1,   110,   606,  1077,
     607,    -1,   115,   606,  1077,   607,    -1,   209,   606,  1077,
     607,    -1,   224,   606,  1077,   608,  1077,   608,  1077,   608,
    1077,   607,    -1,   227,   606,  1077,   608,  1077,   607,    -1,
     227,   606,  1077,   608,  1077,   608,  1114,   607,    -1,   249,
     606,  1077,   608,  1077,   607,    -1,   311,   606,  1077,   607,
      -1,   318,   606,  1077,   607,    -1,   437,   606,  1077,   608,
    1077,   607,    -1,   449,   606,  1077,   607,    -1,   529,   606,
    1077,   607,    -1,   526,   606,  1077,   607,    -1,   526,   606,
    1077,   608,  1077,   607,    -1,   538,   606,  1077,   607,    -1,
     538,   606,   246,  1077,   183,  1077,   607,    -1,   538,   606,
     534,  1077,   183,  1077,   607,    -1,   538,   606,    44,  1077,
     183,  1077,   607,    -1,   538,   606,   246,   183,  1077,   607,
      -1,   538,   606,   534,   183,  1077,   607,    -1,   538,   606,
      44,   183,  1077,   607,    -1,   538,   606,  1077,   183,  1077,
     607,    -1,   562,   606,   607,    -1,   595,   606,  1077,   607,
      -1,     7,   606,  1077,   608,  1077,   607,    -1,     7,   606,
    1077,   608,   227,  1077,  1164,   607,    -1,    98,  1076,    -1,
     102,  1076,    -1,   102,   606,  1077,   607,    -1,   108,   606,
    1077,   608,   227,  1077,  1164,   607,    -1,   109,   606,  1077,
     608,   227,  1077,  1164,   607,    -1,   168,   606,  1164,   183,
    1077,   607,    -1,   191,   606,  1166,   608,  1077,   607,    -1,
     339,  1076,    -1,   339,   606,  1077,   607,    -1,   382,   606,
    1080,   231,  1077,   607,    -1,   502,   606,  1077,   608,  1077,
     607,    -1,   502,   606,  1077,   608,   227,  1077,  1164,   607,
      -1,   506,   606,  1077,   608,  1077,   608,  1077,   607,    -1,
     506,   606,  1077,   608,  1077,   607,    -1,   506,   606,  1077,
     183,  1077,   181,  1077,   607,    -1,   506,   606,  1077,   183,
    1077,   607,    -1,   512,  1076,    -1,   512,   606,  1077,   607,
      -1,   527,   606,  1165,   608,  1077,   608,  1077,   607,    -1,
     528,   606,  1165,   608,  1077,   608,  1077,   607,    -1,   566,
    1076,    -1,   568,  1076,    -1,   567,  1076,    -1,    20,   606,
    1077,   607,    -1,    58,   606,  1077,   607,    -1,    66,   606,
    1114,   607,    -1,    69,   606,  1077,   607,    -1,   103,   606,
     607,    -1,   213,   606,  1077,   608,  1077,   608,  1077,   607,
      -1,   307,   606,  1077,   607,    -1,   317,   606,  1077,   608,
    1077,   607,    -1,   349,   606,  1077,   607,    -1,   375,   606,
    1077,   607,    -1,   396,   606,  1077,   607,    -1,   424,   606,
    1077,   608,  1077,   607,    -1,   425,   606,  1077,   608,  1077,
     608,  1077,   607,    -1,   540,   606,  1077,   608,  1077,   607,
      -1,   580,   606,  1077,   607,    -1,   580,   606,  1077,   608,
    1077,   607,    -1,  1091,    -1,    88,   606,  1077,   608,  1077,
     607,    -1,   189,   606,  1114,   607,    -1,   257,   606,  1114,
     607,    -1,   319,   606,  1114,   607,    -1,   320,   606,  1114,
     607,    -1,   321,   606,  1114,   607,    -1,   379,   606,  1077,
     608,  1077,   607,    -1,   380,   606,  1114,   607,    -1,    -1,
    1360,   606,  1093,  1097,   607,    -1,  1364,   614,  1364,   606,
    1113,   607,    -1,  1095,  1096,    -1,   231,    42,   314,    -1,
      -1,   231,   327,   243,   314,    -1,    -1,   584,   397,   165,
      -1,    -1,  1098,    -1,  1099,    -1,  1098,   608,  1099,    -1,
    1073,  1077,  1074,  1075,    -1,    27,   606,  1110,   607,    -1,
      27,   606,   133,  1110,   607,    -1,    36,   606,  1110,   607,
      -1,    37,   606,  1110,   607,    -1,    39,   606,  1110,   607,
      -1,    93,   606,  1169,   601,   607,    -1,    93,   606,  1110,
     607,    -1,    -1,    -1,    93,   606,   133,  1101,  1114,  1102,
     607,    -1,   313,   606,  1110,   607,    -1,   313,   606,   133,
    1110,   607,    -1,   296,   606,  1110,   607,    -1,   296,   606,
     133,  1110,   607,    -1,   496,   606,  1110,   607,    -1,   574,
     606,  1110,   607,    -1,   495,   606,  1110,   607,    -1,   576,
     606,  1110,   607,    -1,   507,   606,  1110,   607,    -1,   507,
     606,   133,  1110,   607,    -1,    -1,   196,   606,  1107,  1103,
    1114,  1109,  1108,   607,    -1,    -1,   613,  1105,  1106,    -1,
    1366,   460,  1077,    -1,  1366,    -1,   613,  1379,  1366,   961,
      -1,    -1,   133,    -1,    -1,   453,  1345,    -1,    -1,  1182,
      -1,    -1,  1169,  1111,  1077,    -1,    33,   908,    -1,    59,
     908,   927,    -1,   329,   908,    -1,   467,    -1,   467,   229,
      -1,   557,    -1,   557,   229,    -1,   110,    -1,   529,    -1,
     107,    -1,   118,   902,    -1,    -1,  1114,    -1,  1077,    -1,
    1114,   608,  1077,    -1,  1116,    -1,   606,  1116,   607,    -1,
    1353,    -1,  1116,   608,  1353,    -1,    -1,  1077,    -1,    -1,
     143,  1077,    -1,   581,  1077,   525,  1077,    -1,  1119,   581,
    1077,   525,  1077,    -1,  1133,    -1,  1124,    -1,  1123,    -1,
    1120,    -1,   610,  1364,  1120,   611,    -1,  1122,    -1,  1123,
     608,  1122,    -1,  1120,  1132,  1120,    -1,  1120,   499,  1133,
      -1,    -1,  1120,  1132,  1120,   350,  1125,  1077,    -1,    -1,
    1120,   499,  1133,   350,  1126,  1077,    -1,    -1,  1120,  1132,
    1120,   565,  1127,   606,  1163,   607,    -1,  1120,   327,   238,
    1133,    -1,    -1,  1120,   249,  1149,   238,  1120,   350,  1128,
    1077,    -1,    -1,  1120,   249,  1149,   238,  1133,  1129,   565,
     606,  1163,   607,    -1,  1120,   327,   249,  1149,   238,  1133,
      -1,    -1,  1120,   437,  1149,   238,  1120,   350,  1130,  1077,
      -1,    -1,  1120,   437,  1149,   238,  1133,  1131,   565,   606,
    1163,   607,    -1,  1120,   327,   437,  1149,   238,  1133,    -1,
     238,    -1,   221,   238,    -1,    96,   238,    -1,    -1,  1134,
    1357,  1168,  1158,    -1,  1148,  1147,  1144,    -1,   606,  1147,
    1135,   607,  1168,    -1,  1142,  1444,    -1,    -1,    -1,  1135,
     553,  1448,  1136,  1449,  1137,  1444,    -1,  1139,    -1,    -1,
      -1,  1140,  1455,  1071,  1141,   879,  1070,    -1,    -1,  1147,
    1143,  1123,    -1,    -1,    -1,  1145,  1067,  1071,  1146,   879,
      -1,    -1,   451,    -1,    -1,   363,    -1,    -1,   181,   238,
      -1,   181,   360,    46,    -1,   181,   195,    46,    -1,   179,
      -1,   214,    -1,    -1,  1151,   938,  1150,  1153,   606,  1162,
     607,    -1,    -1,   564,   938,  1150,  1154,   606,  1160,   607,
      -1,  1152,    -1,  1155,  1152,    -1,    -1,    -1,  1157,  1155,
      -1,    -1,  1159,  1156,    -1,    -1,  1162,    -1,  1364,    -1,
     387,    -1,  1161,    -1,  1162,   608,  1161,    -1,  1364,    -1,
    1163,   608,  1364,    -1,  1165,    -1,   111,    -1,   112,    -1,
     113,    -1,   114,    -1,   206,    -1,   207,    -1,   208,    -1,
     309,    -1,   310,    -1,   448,    -1,   594,    -1,   115,    -1,
     580,    -1,   209,    -1,   311,    -1,   318,    -1,   396,    -1,
     449,    -1,   307,    -1,   595,    -1,   110,    -1,   529,    -1,
     107,    -1,   526,    -1,    -1,    18,    -1,   153,    -1,    -1,
    1167,  1364,    -1,    -1,    12,    -1,    -1,    -1,   582,  1171,
    1077,    -1,    -1,    -1,   200,  1173,  1077,    -1,   158,  1087,
      -1,    -1,    -1,   195,    46,  1176,  1177,    -1,  1176,   608,
    1352,  1185,    -1,  1352,  1185,    -1,    -1,   585,    -1,   586,
      -1,   360,    46,  1179,    -1,  1179,   608,  1180,    -1,  1180,
      -1,  1354,  1185,    -1,    -1,  1182,    -1,    -1,   360,    46,
    1183,  1184,    -1,  1184,   608,  1352,  1185,    -1,  1352,  1185,
      -1,    -1,    19,    -1,   125,    -1,    -1,  1188,    -1,    -1,
    1188,    -1,   254,  1189,    -1,  1190,    -1,  1190,   608,  1190,
      -1,  1190,   348,  1190,    -1,  1364,    -1,  1346,    -1,   544,
      -1,   268,    -1,   344,    -1,    -1,   254,  1190,    -1,   344,
      -1,   202,    -1,   268,    -1,   544,    -1,   117,    -1,   176,
      -1,   344,    -1,   202,    -1,   268,    -1,   544,    -1,  1196,
      -1,   344,    -1,   544,    -1,   268,    -1,   117,    -1,   176,
      -1,   344,    -1,   544,    -1,   268,    -1,  1196,    -1,  1197,
      -1,   117,    -1,   176,    -1,    -1,    -1,   389,  1364,  1199,
     606,  1200,   607,    -1,    -1,  1201,    -1,  1201,   608,  1202,
      -1,  1202,    -1,  1073,  1077,  1074,    -1,    -1,  1204,  1205,
      -1,  1205,   608,  1206,    -1,  1206,    -1,   613,  1366,    -1,
    1366,    -1,    -1,   228,  1208,  1209,    -1,    -1,    -1,   364,
    1363,  1210,   918,  1211,  1329,  1332,    -1,   139,  1363,    -1,
    1203,    -1,    -1,   136,  1213,  1114,    -1,    -1,   137,  1223,
    1389,  1222,  1215,  1218,   999,    -1,    -1,   137,   979,   218,
    1364,   350,  1357,  1216,    -1,   137,   103,  1222,  1364,    -1,
     137,   186,  1222,  1364,   614,  1364,    -1,   137,   186,  1222,
    1364,    -1,   137,   389,  1222,   664,    -1,   137,   562,   663,
    1419,    -1,    -1,   137,   577,  1222,  1217,  1218,   999,    -1,
     137,   160,  1222,   664,    -1,   137,   537,  1222,   664,    -1,
     137,   514,   787,   798,   799,    -1,   137,   264,   195,   788,
     798,   799,    -1,   137,   457,  1222,  1366,    -1,  1219,    -1,
    1218,   608,  1219,    -1,  1357,    -1,  1221,    -1,  1220,   608,
    1221,    -1,  1358,    -1,    -1,   213,   163,    -1,    -1,   519,
      -1,    -1,    -1,   224,  1225,  1230,   998,  1232,  1226,  1234,
    1250,    -1,    -1,    -1,   425,  1228,  1231,  1232,  1229,  1234,
      -1,    -1,   271,    -1,   122,    -1,   203,    -1,  1259,    -1,
     122,    -1,   228,  1233,    -1,  1233,    -1,  1219,    -1,  1237,
      -1,   606,   607,  1237,    -1,   606,  1236,   607,  1237,    -1,
      -1,   459,  1235,  1241,    -1,  1236,   608,  1350,    -1,  1350,
      -1,   569,  1240,    -1,   570,  1240,    -1,    -1,   857,  1238,
    1440,    -1,    -1,   606,   857,   607,  1239,  1443,    -1,  1240,
     608,  1245,    -1,  1245,    -1,  1241,   608,  1242,    -1,  1242,
      -1,  1354,  1243,  1249,    -1,   153,    -1,   460,    -1,    -1,
    1243,    -1,    -1,   606,  1246,  1247,   607,    -1,    -1,  1248,
      -1,  1248,   608,  1249,    -1,  1249,    -1,  1077,    -1,   120,
      -1,    -1,    -1,   350,   140,  1251,   241,   559,  1257,    -1,
      -1,    -1,   559,  1253,  1259,   998,  1121,   459,  1255,  1254,
    1170,  1181,  1191,    -1,  1255,   608,  1256,    -1,  1256,    -1,
    1354,  1243,  1249,    -1,  1257,   608,  1258,    -1,  1258,    -1,
    1354,  1243,  1249,    -1,    -1,   271,    -1,    -1,   124,  1261,
    1269,  1262,    -1,    -1,   183,  1357,  1263,  1170,  1181,  1191,
      -1,    -1,  1266,  1264,   183,  1121,  1170,    -1,    -1,   183,
    1220,  1265,   565,  1121,  1170,    -1,  1267,    -1,  1266,   608,
    1267,    -1,  1364,  1268,    -1,  1364,   614,  1364,  1268,    -1,
      -1,   614,   601,    -1,    -1,  1270,  1269,    -1,   398,    -1,
     271,    -1,   214,    -1,    -1,   540,  1273,  1272,  1219,    -1,
      -1,   516,    -1,    -1,  1275,    -1,  1276,    -1,  1275,   608,
    1276,    -1,    94,    -1,   304,    -1,    41,   232,    -1,    89,
     511,    -1,   368,   171,    -1,   233,    -1,   510,    -1,   476,
      -1,    12,    -1,    -1,   181,   397,   344,    -1,    -1,   464,
    1279,  1280,    -1,   104,  1291,    -1,  1287,   513,  1286,  1291,
      -1,  1287,   536,  1286,  1291,    -1,   159,  1286,  1291,    -1,
     516,   494,  1286,  1291,    -1,   354,   513,  1286,  1291,    -1,
     377,    -1,   151,   876,  1283,    -1,   151,    12,  1283,    -1,
    1287,    70,  1288,  1357,  1286,  1291,    -1,  1284,   265,    -1,
     469,   205,    -1,    -1,    34,   159,  1289,  1290,  1281,  1186,
      -1,    -1,   413,   159,  1289,  1290,  1282,  1186,    -1,   940,
    1288,  1357,  1286,  1170,    -1,  1285,   150,    -1,    23,    -1,
      91,    -1,   388,    -1,    93,   606,   601,   607,   579,    -1,
      93,   606,   601,   607,   156,    -1,   579,  1186,    -1,   156,
    1186,    -1,   393,    -1,   392,  1274,  1277,  1186,    -1,  1378,
     494,  1291,    -1,  1287,   391,    -1,  1378,   573,  1291,    -1,
     915,  1291,    -1,    69,  1291,    -1,   194,    -1,   194,   181,
    1367,    -1,    95,   103,   867,  1364,    -1,    95,   516,  1357,
      -1,    95,   577,  1357,    -1,   288,   494,    -1,   469,   494,
      -1,    95,   389,   664,    -1,    95,   186,   664,    -1,    95,
     537,   664,    -1,   389,   494,  1291,    -1,   186,   494,  1291,
      -1,   389,    67,   664,    -1,   186,    67,   664,    -1,    95,
     160,   664,    -1,   494,    -1,   322,    -1,   265,    -1,   288,
      -1,    33,    -1,    -1,   498,    -1,    -1,  1288,  1364,    -1,
      -1,   184,    -1,   183,    -1,   231,    -1,    -1,   231,  1361,
      -1,    -1,   183,  1194,    -1,    -1,   253,  1361,    -1,   582,
    1077,    -1,    -1,  1295,  1357,  1293,  1297,    -1,    -1,  1295,
    1296,  1294,  1056,    -1,   125,    -1,   126,    -1,    -1,   166,
      -1,   373,    -1,    -1,  1345,    -1,  1364,    -1,    -1,   178,
    1031,  1299,  1300,    -1,    -1,    -1,  1389,  1301,  1306,  1302,
    1303,    -1,  1304,    -1,    -1,   584,   402,   263,    -1,  1304,
     608,  1305,    -1,  1305,    -1,   155,   265,    -1,   151,   265,
      -1,   188,   265,    -1,   470,   265,    -1,    33,   265,    -1,
     412,   265,    -1,   397,    48,    -1,   205,    -1,   388,    -1,
     265,    -1,   494,    -1,   469,    -1,   288,    -1,   127,    -1,
     430,    -1,    -1,  1218,    -1,    -1,   428,  1308,  1309,    -1,
    1309,   608,  1310,    -1,  1310,    -1,    -1,   469,  1311,  1312,
      -1,   288,    -1,   397,    48,    -1,    -1,    12,    -1,    -1,
     395,  1314,  1315,    -1,  1284,   265,  1316,    -1,   533,  1361,
      -1,    29,  1077,    -1,   242,  1318,  1077,    -1,    -1,    82,
      -1,   397,    -1,   564,  1364,    -1,    -1,    -1,    -1,    -1,
     259,  1325,  1321,  1327,  1326,   219,  1363,  1322,  1328,   228,
     516,  1357,  1323,   918,  1324,  1335,  1329,  1332,  1336,  1338,
    1341,    -1,   106,    -1,   592,    -1,    -1,   260,    -1,    -1,
      80,    -1,   271,    -1,    -1,   425,    -1,   214,    -1,    -1,
      70,  1330,    -1,  1330,  1331,    -1,  1331,    -1,   521,    46,
    1345,    -1,   358,   146,    46,  1345,    -1,   146,    46,  1345,
      -1,   157,    46,  1345,    -1,    -1,   256,  1333,    -1,  1333,
    1334,    -1,  1334,    -1,   521,    46,  1345,    -1,   491,    46,
    1345,    -1,    -1,   441,   211,    46,  1345,    -1,    -1,   214,
     344,  1337,    -1,   256,    -1,   441,    -1,    -1,   606,  1339,
     607,    -1,   606,   607,    -1,  1339,   608,  1340,    -1,  1340,
      -1,  1354,    -1,   613,  1366,    -1,    -1,   459,  1342,    -1,
    1342,   608,  1343,    -1,  1343,    -1,  1354,  1243,  1073,  1249,
    1074,    -1,   522,    -1,   328,    -1,   547,   522,    -1,  1344,
    1362,    -1,  1362,    -1,   202,    -1,    35,    -1,   369,    -1,
    1348,    -1,   600,  1349,    -1,   599,  1349,    -1,  1344,    -1,
    1349,    -1,   343,    -1,   169,    -1,   539,    -1,   202,    -1,
      35,    -1,   547,   202,    -1,   547,    35,    -1,   110,  1344,
      -1,   529,  1344,    -1,   526,  1344,    -1,   344,    -1,   268,
      -1,   544,    -1,   117,    -1,   176,    -1,  1354,    -1,  1351,
      -1,  1364,   614,   601,    -1,  1364,   614,  1364,   614,   601,
      -1,  1077,    -1,  1364,    -1,  1355,    -1,  1364,    -1,  1355,
      -1,  1364,   614,  1364,    -1,   614,  1364,   614,  1364,    -1,
    1364,   614,  1364,   614,  1364,    -1,  1364,    -1,  1364,   614,
    1364,   614,  1364,    -1,  1364,   614,  1364,    -1,   614,  1364,
      -1,  1364,    -1,  1364,   614,  1364,    -1,   614,  1364,    -1,
    1364,  1268,    -1,  1364,   614,  1364,  1268,    -1,  1364,    -1,
     210,    -1,   212,    -1,   522,    -1,   522,    -1,   522,    -1,
    1360,    -1,  1368,    -1,  1360,    -1,  1369,    -1,  1364,    -1,
    1361,    -1,   252,    -1,  1366,    -1,  1366,   613,  1366,    -1,
      99,  1076,    -1,  1369,    -1,    20,    -1,    28,    -1,    30,
      -1,    47,    -1,    48,    -1,    58,    -1,    60,    -1,    65,
      -1,    74,    -1,    76,    -1,    88,    -1,   116,    -1,   136,
      -1,   147,    -1,   162,    -1,   178,    -1,   198,    -1,   201,
      -1,   204,    -1,   226,    -1,   243,    -1,   340,    -1,   354,
      -1,   356,    -1,   366,    -1,   370,    -1,   374,    -1,   381,
      -1,   384,    -1,   419,    -1,   422,    -1,   428,    -1,   431,
      -1,   438,    -1,   445,    -1,   450,    -1,   457,    -1,   467,
      -1,   473,    -1,   469,    -1,   474,    -1,   493,    -1,   497,
      -1,   540,    -1,   551,    -1,   552,    -1,   588,    -1,   591,
      -1,   560,    -1,     5,    -1,     7,    -1,     8,    -1,     9,
      -1,    10,    -1,    11,    -1,    17,    -1,    22,    -1,    23,
      -1,    25,    -1,    24,    -1,    26,    -1,    27,    -1,    34,
      -1,    38,    -1,    41,    -1,    43,    -1,    42,    -1,    45,
      -1,    51,    -1,    54,    -1,    55,    -1,    57,    -1,    62,
      -1,    64,    -1,    63,    -1,    66,    -1,    67,    -1,    69,
      -1,    73,    -1,    72,    -1,    70,    -1,    75,    -1,    77,
      -1,    78,    -1,    79,    -1,    80,    -1,    82,    -1,    83,
      -1,    85,    -1,    87,    -1,    86,    -1,    89,    -1,    91,
      -1,    94,    -1,    97,    -1,   101,    -1,   106,    -1,   105,
      -1,   107,    -1,   110,    -1,   115,    -1,   121,    -1,   123,
      -1,   127,    -1,   129,    -1,   130,    -1,   131,    -1,   132,
      -1,   139,    -1,   140,    -1,   141,    -1,   148,    -1,   152,
      -1,   151,    -1,   150,    -1,   155,    -1,   156,    -1,   158,
      -1,   160,    -1,   159,    -1,   161,    -1,   165,    -1,   166,
      -1,   167,    -1,   171,    -1,   170,    -1,   182,    -1,   145,
      -1,   184,    -1,   173,    -1,   174,    -1,   175,    -1,   188,
      -1,   190,    -1,   189,    -1,   191,    -1,   194,    -1,   192,
      -1,   199,    -1,   205,    -1,   209,    -1,   211,    -1,   215,
      -1,   230,    -1,   216,    -1,   217,    -1,   220,    -1,   232,
      -1,   233,    -1,   235,    -1,   236,    -1,   225,    -1,   240,
      -1,   244,    -1,   247,    -1,   250,    -1,   251,    -1,   257,
      -1,   258,    -1,   260,    -1,   262,    -1,   264,    -1,   265,
      -1,   294,    -1,   288,    -1,   290,    -1,   275,    -1,   279,
      -1,   276,    -1,   277,    -1,   289,    -1,   278,    -1,   280,
      -1,   274,    -1,   286,    -1,   282,    -1,   281,    -1,   283,
      -1,   284,    -1,   285,    -1,   292,    -1,   293,    -1,   295,
      -1,   297,    -1,   298,    -1,   303,    -1,   304,    -1,   305,
      -1,   306,    -1,   307,    -1,   308,    -1,   311,    -1,   312,
      -1,   316,    -1,   314,    -1,   318,    -1,   319,    -1,   320,
      -1,   321,    -1,   322,    -1,   323,    -1,   325,    -1,   324,
      -1,   326,    -1,   329,    -1,   330,    -1,   334,    -1,   333,
      -1,   341,    -1,   335,    -1,   336,    -1,   346,    -1,   348,
      -1,   347,    -1,   349,    -1,   351,    -1,   352,    -1,   353,
      -1,   367,    -1,   368,    -1,   371,    -1,   372,    -1,   373,
      -1,   375,    -1,   376,    -1,   378,    -1,   377,    -1,   379,
      -1,   380,    -1,   385,    -1,   386,    -1,   388,    -1,   390,
      -1,   391,    -1,   392,    -1,   393,    -1,   394,    -1,   396,
      -1,   397,    -1,   398,    -1,   401,    -1,   405,    -1,   406,
      -1,   408,    -1,   407,    -1,   409,    -1,   412,    -1,   413,
      -1,   414,    -1,   415,    -1,   416,    -1,   418,    -1,   421,
      -1,   423,    -1,   426,    -1,   430,    -1,   433,    -1,   434,
      -1,   439,    -1,   440,    -1,   441,    -1,   442,    -1,   443,
      -1,   444,    -1,   446,    -1,   447,    -1,   449,    -1,   455,
      -1,   454,    -1,   456,    -1,   468,    -1,   461,    -1,   465,
      -1,   470,    -1,   472,    -1,   475,    -1,   476,    -1,   484,
      -1,   483,    -1,   486,    -1,   489,    -1,   492,    -1,   494,
      -1,   498,    -1,   500,    -1,   501,    -1,   502,    -1,   503,
      -1,   505,    -1,   504,    -1,   508,    -1,   509,    -1,   510,
      -1,   511,    -1,   518,    -1,   513,    -1,   517,    -1,   514,
      -1,   519,    -1,   520,    -1,   523,    -1,   524,    -1,   535,
      -1,   536,    -1,   526,    -1,   527,    -1,   528,    -1,   529,
      -1,   541,    -1,   542,    -1,   543,    -1,   186,    -1,   545,
      -1,   546,    -1,   549,    -1,   548,    -1,   555,    -1,   558,
      -1,   562,    -1,   563,    -1,   573,    -1,   577,    -1,   570,
      -1,   579,    -1,   578,    -1,   580,    -1,   587,    -1,   590,
      -1,   592,    -1,   595,    -1,    -1,   459,  1372,  1371,  1373,
      -1,    -1,   357,    -1,  1374,    -1,  1373,   608,  1374,    -1,
      -1,  1375,  1380,    -1,  1377,    -1,   192,    -1,   260,    -1,
     456,    -1,    -1,   351,    -1,    -1,   192,    -1,   260,    -1,
     456,    -1,    -1,   192,   614,    -1,   260,   614,    -1,   456,
     614,    -1,  1381,    -1,  1377,  1382,    -1,  1376,  1383,  1243,
    1386,    -1,  1376,   535,   235,   251,  1384,    -1,   613,  1366,
    1243,  1077,    -1,   613,   613,  1379,  1383,  1243,  1386,    -1,
     915,   920,    -1,   324,  1243,  1077,    -1,   324,   917,   922,
      -1,   375,  1243,  1385,    -1,   375,   181,  1367,  1243,  1385,
      -1,  1364,    -1,  1364,   614,  1364,    -1,   120,   614,  1364,
      -1,   402,   545,    -1,   402,    75,    -1,   423,   402,    -1,
     454,    -1,   522,    -1,   375,   606,   522,   607,    -1,   349,
     606,   522,   607,    -1,  1077,    -1,   120,    -1,   350,    -1,
      12,    -1,    33,    -1,    -1,   263,  1389,  1388,  1390,    -1,
     516,    -1,   513,    -1,  1391,    -1,  1390,   608,  1391,    -1,
    1357,  1168,  1392,    -1,   402,    -1,   589,    -1,   271,   589,
      -1,   402,   260,    -1,    -1,   556,  1394,  1389,    -1,   198,
    1357,   354,  1168,    -1,   198,  1359,    65,    -1,    -1,   198,
    1359,   402,  1396,  1397,  1170,  1187,    -1,  1398,    -1,  1364,
    1399,    -1,   174,    -1,   334,    -1,   174,    -1,   334,    -1,
     386,    -1,   244,    -1,    -1,  1401,  1400,   606,  1248,   607,
      -1,   153,    -1,   187,    -1,   245,    -1,   197,    -1,   272,
      -1,   436,   663,  1403,    -1,  1407,   350,  1406,  1418,   183,
    1420,    -1,  1407,   350,   186,  1418,   183,  1420,    -1,  1407,
     350,   389,  1418,   183,  1420,    -1,    12,  1408,   608,   193,
     357,   183,  1420,    -1,   394,   350,  1367,   183,  1420,    -1,
     193,   663,  1405,    -1,  1407,   350,  1406,  1418,   533,  1420,
    1425,  1426,    -1,  1407,   350,   186,  1418,   533,  1420,  1425,
    1426,    -1,  1407,   350,   389,  1418,   533,  1420,  1425,  1426,
      -1,   394,   350,  1367,   533,  1420,  1427,    -1,    -1,   516,
      -1,  1409,    -1,    12,  1408,    -1,    -1,   388,    -1,  1410,
      -1,  1409,   608,  1410,    -1,    -1,   451,  1411,  1422,    -1,
      -1,   224,  1412,  1422,    -1,    -1,   559,  1413,  1422,    -1,
      -1,   410,  1414,  1422,    -1,   124,    -1,   561,    -1,   218,
      -1,    13,    -1,    95,    -1,   137,    -1,   162,    -1,   418,
      -1,   465,    -1,   390,    -1,   173,    -1,   193,   357,    -1,
     464,   104,    -1,   508,    -1,    95,   519,   513,    -1,   263,
     513,    -1,   426,   469,    -1,   426,    64,    -1,    95,   577,
      -1,   464,   577,    -1,    95,   440,    -1,    13,   440,    -1,
      95,   562,    -1,   160,    -1,   537,    -1,    95,   514,    -1,
      -1,    16,    -1,  1417,  1415,  1416,    -1,  1417,    -1,   503,
     522,    -1,   236,   522,    -1,    62,   522,    -1,   601,    -1,
    1364,   614,   601,    -1,   601,   614,   601,    -1,  1357,    -1,
    1367,    -1,  1419,   608,  1367,    -1,  1421,    -1,  1420,   608,
    1421,    -1,  1367,   211,    46,   522,    -1,  1367,   211,    46,
     375,   522,    -1,  1367,   211,   584,  1366,    -1,  1367,   211,
     584,  1366,    18,  1361,    -1,  1367,    -1,    -1,   606,  1423,
     607,    -1,  1423,   608,  1424,    -1,  1424,    -1,  1364,    -1,
      -1,   427,  1416,    -1,   427,   490,    -1,   427,   590,    -1,
     427,   336,    -1,    -1,   584,  1428,    -1,    -1,   584,   193,
     357,    -1,  1428,  1429,    -1,  1429,    -1,   193,   357,    -1,
     293,  1192,    -1,   297,  1192,    -1,   292,  1192,    -1,   298,
    1192,    -1,    -1,    30,  1431,  1432,    -1,    -1,   587,    -1,
      -1,    16,   340,    55,    -1,    16,    55,    -1,    -1,   417,
      -1,   340,   417,    -1,    -1,   445,    -1,    76,  1432,  1433,
    1434,    -1,   438,  1432,  1433,  1434,    -1,   438,  1432,   533,
    1435,  1364,    -1,   445,  1364,    -1,   417,   445,  1364,    -1,
      -1,  1441,    -1,    -1,   553,  1448,  1442,  1057,    -1,    -1,
    1441,    -1,  1445,    -1,    -1,  1445,    -1,    -1,  1446,  1447,
      -1,  1182,  1186,    -1,  1188,    -1,    -1,   133,    -1,    12,
      -1,   451,  1138,    -1,   606,  1059,   607,    -1,  1449,  1444,
      -1,    -1,  1450,   553,  1448,  1451,  1449,  1444,    -1,  1453,
    1450,  1454,    -1,    -1,    -1,    -1,  1456,    -1,  1456,  1457,
      -1,  1457,    -1,   499,    -1,   203,    -1,   133,    -1,   487,
      -1,   482,    -1,   483,    -1,   485,    -1,    12,    -1,  1463,
    1459,    -1,  1462,  1460,    -1,  1464,  1461,  1468,    -1,  1468,
      -1,  1476,    -1,  1487,    -1,  1481,    -1,   650,    -1,  1468,
      -1,  1476,    -1,  1487,    -1,  1481,    -1,  1480,    -1,   650,
      -1,  1462,    -1,  1463,    -1,    -1,   121,   153,  1367,    -1,
    1465,    -1,  1465,  1466,    -1,  1466,    -1,   362,   425,    -1,
      11,   153,   546,    -1,    11,   153,   305,    -1,    11,   153,
     520,    -1,    -1,   488,   450,   121,    -1,   488,   450,   230,
      -1,    -1,  1467,   577,  1357,  1469,  1470,    18,  1472,    -1,
      -1,   606,  1471,   607,    -1,  1364,    -1,  1471,   608,  1364,
      -1,    -1,  1473,  1474,  1475,    -1,   451,  1060,    -1,   606,
    1058,   607,  1443,    -1,    -1,   584,    61,   357,    -1,   584,
      51,    61,   357,    -1,   584,   260,    61,   357,    -1,    -1,
      -1,    -1,   537,  1073,   664,   758,   759,   350,  1073,  1477,
    1357,   181,  1073,  1478,   142,   443,  1479,   708,    -1,    10,
    1073,   186,  1364,   434,   880,   474,  1361,    -1,  1073,   186,
    1364,   434,   880,   474,  1361,    -1,    -1,    -1,    -1,    -1,
      -1,  1073,   186,   664,   606,  1482,   675,   607,  1483,   434,
    1484,   913,  1485,   666,  1486,   708,    -1,    -1,    -1,    -1,
      -1,   389,  1073,   664,  1488,   606,  1489,   679,   607,  1490,
     666,  1491,   708,    -1,   591,  1494,  1493,  1495,    -1,   591,
     147,  1493,  1497,    -1,   591,   384,  1493,    -1,   591,    76,
    1493,  1496,    -1,   591,   438,  1493,    -1,   591,   406,    -1,
    1345,    -1,  1345,   608,  1345,    -1,  1345,   608,  1345,   608,
    1192,    -1,    30,    -1,   493,    -1,    -1,   238,    -1,   433,
      -1,    -1,   352,   376,    -1,    -1,    -1,   509,  1498,  1499,
      -1,    -1,   181,   308,    -1,   226,   378,  1364,   474,  1361,
      -1,   552,   378,  1364,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1678,  1678,  1691,  1690,  1715,  1722,  1724,  1728,  1729,
    1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,  1743,
    1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
    1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,  1762,  1763,
    1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,
    1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
    1784,  1788,  1798,  1799,  1803,  1813,  1820,  1831,  1830,  1841,
    1843,  1847,  1848,  1852,  1865,  1864,  1884,  1883,  1897,  1898,
    1902,  1907,  1914,  1918,  1922,  1926,  1930,  1935,  1939,  1943,
    1947,  1951,  1955,  1961,  1992,  1997,  2000,  2002,  2003,  2007,
    2021,  2025,  2041,  2045,  2057,  2056,  2103,  2098,  2128,  2122,
    2154,  2148,  2174,  2173,  2186,  2185,  2193,  2197,  2201,  2205,
    2212,  2225,  2226,  2230,  2234,  2238,  2242,  2246,  2250,  2254,
    2262,  2261,  2293,  2292,  2299,  2306,  2307,  2313,  2319,  2329,
    2335,  2341,  2343,  2350,  2351,  2355,  2361,  2370,  2371,  2379,
    2379,  2437,  2438,  2439,  2440,  2441,  2442,  2443,  2444,  2445,
    2446,  2447,  2448,  2449,  2454,  2468,  2484,  2503,  2504,  2508,
    2509,  2514,  2516,  2518,  2520,  2522,  2524,  2526,  2532,  2533,
    2534,  2538,  2542,  2550,  2549,  2562,  2564,  2567,  2569,  2573,
    2577,  2584,  2586,  2590,  2591,  2596,  2615,  2641,  2643,  2647,
    2648,  2652,  2678,  2679,  2680,  2681,  2685,  2686,  2690,  2691,
    2696,  2699,  2726,  2725,  2790,  2806,  2805,  2859,  2885,  2885,
    2908,  2909,  2914,  2916,  2921,  2944,  2957,  2961,  2978,  2979,
    2983,  2987,  2996,  3003,  3010,  3020,  3035,  3058,  3064,  3065,
    3071,  3074,  3078,  3086,  3106,  3108,  3126,  3132,  3134,  3136,
    3138,  3140,  3142,  3144,  3146,  3148,  3150,  3152,  3154,  3159,
    3174,  3189,  3207,  3208,  3212,  3213,  3214,  3215,  3216,  3217,
    3218,  3219,  3220,  3221,  3222,  3223,  3224,  3229,  3228,  3235,
    3235,  3292,  3291,  3320,  3320,  3334,  3387,  3430,  3451,  3450,
    3472,  3491,  3493,  3494,  3498,  3518,  3541,  3543,  3559,  3541,
    3578,  3580,  3581,  3585,  3586,  3591,  3597,  3590,  3618,  3617,
    3633,  3634,  3638,  3639,  3644,  3648,  3643,  3669,  3673,  3668,
    3692,  3702,  3707,  3706,  3742,  3743,  3748,  3747,  3780,  3780,
    3795,  3794,  3830,  3842,  3844,  3841,  3871,  3870,  3891,  3893,
    3898,  3900,  3902,  3919,  3924,  3930,  3937,  3938,  3946,  3952,
    3961,  3967,  3973,  3974,  3978,  3978,  3983,  3984,  3985,  3989,
    3990,  3991,  3995,  3999,  4000,  4001,  4005,  4006,  4007,  4008,
    4009,  4010,  4011,  4012,  4016,  4020,  4021,  4022,  4026,  4027,
    4028,  4029,  4030,  4034,  4038,  4039,  4040,  4044,  4045,  4046,
    4047,  4048,  4049,  4050,  4054,  4058,  4059,  4060,  4064,  4065,
    4066,  4071,  4079,  4087,  4095,  4107,  4119,  4124,  4129,  4137,
    4145,  4153,  4161,  4169,  4177,  4185,  4198,  4211,  4224,  4226,
    4230,  4235,  4248,  4249,  4300,  4301,  4304,  4319,  4337,  4342,
    4340,  4347,  4349,  4348,  4352,  4351,  4357,  4394,  4395,  4400,
    4399,  4418,  4437,  4436,  4453,  4457,  4465,  4464,  4467,  4469,
    4471,  4473,  4478,  4479,  4484,  4485,  4489,  4490,  4494,  4513,
    4523,  4534,  4543,  4544,  4560,  4562,  4561,  4566,  4564,  4575,
    4576,  4580,  4598,  4614,  4615,  4631,  4646,  4668,  4669,  4674,
    4673,  4697,  4707,  4729,  4728,  4746,  4745,  4765,  4787,  4791,
    4820,  4832,  4833,  4838,  4849,  4837,  4874,  4875,  4879,  4892,
    4913,  4926,  4952,  4953,  4958,  4957,  4994,  4999,  5000,  5004,
    5005,  5009,  5011,  5017,  5019,  5021,  5023,  5025,  5027,  5037,
    5052,  5036,  5066,  5067,  5071,  5072,  5076,  5077,  5081,  5082,
    5086,  5087,  5091,  5092,  5096,  5100,  5101,  5104,  5106,  5110,
    5111,  5115,  5116,  5117,  5121,  5126,  5131,  5136,  5141,  5146,
    5151,  5156,  5171,  5177,  5182,  5187,  5192,  5201,  5200,  5226,
    5227,  5228,  5233,  5238,  5243,  5245,  5247,  5249,  5255,  5263,
    5281,  5298,  5321,  5335,  5336,  5337,  5338,  5339,  5340,  5344,
    5345,  5346,  5350,  5351,  5355,  5356,  5357,  5358,  5363,  5370,
    5371,  5375,  5376,  5380,  5381,  5388,  5393,  5399,  5405,  5411,
    5429,  5435,  5437,  5441,  5445,  5446,  5450,  5455,  5454,  5477,
    5478,  5479,  5480,  5485,  5489,  5494,  5499,  5503,  5508,  5513,
    5519,  5524,  5530,  5534,  5539,  5544,  5562,  5564,  5566,  5579,
    5581,  5586,  5591,  5603,  5608,  5613,  5618,  5620,  5622,  5624,
    5626,  5628,  5630,  5632,  5635,  5634,  5639,  5638,  5642,  5644,
    5653,  5654,  5655,  5660,  5661,  5662,  5663,  5664,  5668,  5672,
    5673,  5677,  5678,  5682,  5683,  5684,  5685,  5686,  5690,  5691,
    5692,  5693,  5694,  5698,  5703,  5705,  5711,  5712,  5714,  5719,
    5728,  5729,  5733,  5734,  5738,  5739,  5740,  5744,  5745,  5746,
    5747,  5750,  5751,  5755,  5756,  5760,  5761,  5765,  5766,  5770,
    5771,  5772,  5779,  5786,  5787,  5793,  5799,  5805,  5811,  5812,
    5826,  5831,  5836,  5841,  5845,  5849,  5858,  5879,  5885,  5890,
    5891,  5895,  5903,  5907,  5908,  5912,  5913,  5917,  5926,  5930,
    5931,  5935,  5946,  5947,  5951,  5952,  5956,  5957,  5962,  5963,
    5967,  5974,  5983,  5991,  6002,  6003,  6004,  6005,  6006,  6007,
    6012,  6020,  6021,  6025,  6027,  6031,  6043,  6044,  6048,  6055,
    6068,  6069,  6071,  6073,  6079,  6084,  6090,  6096,  6103,  6113,
    6114,  6115,  6116,  6117,  6121,  6125,  6126,  6130,  6131,  6135,
    6136,  6140,  6141,  6142,  6146,  6147,  6151,  6155,  6168,  6180,
    6181,  6185,  6186,  6190,  6191,  6195,  6196,  6200,  6201,  6205,
    6206,  6210,  6211,  6215,  6216,  6220,  6222,  6226,  6227,  6231,
    6235,  6236,  6249,  6250,  6251,  6255,  6256,  6260,  6266,  6280,
    6281,  6285,  6286,  6290,  6291,  6304,  6299,  6350,  6349,  6363,
    6375,  6374,  6393,  6392,  6411,  6410,  6429,  6423,  6443,  6442,
    6475,  6480,  6485,  6490,  6495,  6505,  6506,  6507,  6508,  6512,
    6513,  6525,  6526,  6530,  6531,  6534,  6536,  6537,  6538,  6540,
    6542,  6543,  6552,  6553,  6557,  6566,  6564,  6578,  6592,  6591,
    6605,  6603,  6617,  6624,  6635,  6641,  6644,  6648,  6656,  6663,
    6667,  6672,  6671,  6687,  6689,  6694,  6702,  6701,  6717,  6721,
    6720,  6732,  6733,  6737,  6752,  6753,  6757,  6766,  6770,  6775,
    6780,  6779,  6790,  6799,  6789,  6814,  6823,  6827,  6836,  6845,
    6851,  6857,  6871,  6885,  6904,  6925,  6935,  6939,  6947,  6948,
    6952,  6953,  6957,  6958,  6959,  6963,  6965,  6970,  6983,  6984,
    6985,  6986,  6995,  6994,  7005,  7013,  7012,  7022,  7031,  7040,
    7041,  7048,  7048,  7054,  7055,  7059,  7060,  7061,  7065,  7066,
    7082,  7083,  7088,  7087,  7099,  7100,  7101,  7106,  7105,  7127,
    7128,  7132,  7133,  7137,  7138,  7139,  7144,  7143,  7165,  7174,
    7173,  7200,  7201,  7205,  7206,  7210,  7211,  7212,  7213,  7214,
    7215,  7220,  7219,  7241,  7242,  7243,  7248,  7247,  7253,  7260,
    7265,  7273,  7274,  7278,  7292,  7291,  7304,  7305,  7309,  7310,
    7314,  7324,  7334,  7335,  7340,  7339,  7350,  7351,  7355,  7356,
    7360,  7370,  7381,  7380,  7388,  7388,  7399,  7400,  7405,  7406,
    7415,  7424,  7425,  7429,  7434,  7439,  7444,  7449,  7448,  7468,
    7476,  7468,  7483,  7484,  7485,  7486,  7487,  7491,  7498,  7505,
    7507,  7518,  7519,  7523,  7524,  7552,  7582,  7584,  7590,  7600,
    7601,  7602,  7617,  7624,  7650,  7656,  7662,  7663,  7664,  7665,
    7666,  7670,  7671,  7676,  7727,  7734,  7777,  7783,  7789,  7795,
    7801,  7807,  7813,  7819,  7823,  7829,  7835,  7841,  7847,  7853,
    7857,  7863,  7873,  7879,  7887,  7893,  7903,  7909,  7918,  7928,
    7934,  7944,  7950,  7959,  7963,  7969,  7975,  7981,  7987,  7993,
    7999,  8005,  8011,  8017,  8023,  8029,  8035,  8041,  8047,  8051,
    8052,  8056,  8057,  8061,  8062,  8066,  8067,  8071,  8072,  8073,
    8074,  8075,  8076,  8080,  8081,  8085,  8086,  8087,  8088,  8089,
    8090,  8102,  8103,  8104,  8105,  8106,  8112,  8116,  8122,  8128,
    8134,  8140,  8142,  8149,  8156,  8162,  8164,  8173,  8180,  8188,
    8194,  8201,  8207,  8221,  8228,  8244,  8250,  8256,  8264,  8270,
    8276,  8282,  8288,  8303,  8315,  8321,  8327,  8333,  8339,  8345,
    8351,  8357,  8363,  8369,  8375,  8381,  8387,  8393,  8399,  8405,
    8411,  8419,  8440,  8447,  8453,  8460,  8467,  8474,  8481,  8488,
    8494,  8500,  8507,  8514,  8520,  8527,  8533,  8539,  8545,  8551,
    8557,  8575,  8585,  8591,  8597,  8604,  8611,  8626,  8632,  8638,
    8644,  8650,  8657,  8663,  8669,  8675,  8681,  8693,  8699,  8705,
    8711,  8717,  8729,  8735,  8751,  8757,  8764,  8771,  8778,  8785,
    8792,  8796,  8816,  8815,  8888,  8930,  8932,  8937,  8938,  8942,
    8943,  8947,  8948,  8952,  8959,  8967,  8993,  8999,  9005,  9011,
    9017,  9023,  9032,  9039,  9041,  9038,  9048,  9059,  9065,  9071,
    9077,  9083,  9089,  9095,  9101,  9107,  9114,  9113,  9132,  9131,
    9146,  9156,  9164,  9180,  9181,  9186,  9191,  9196,  9199,  9212,
    9211,  9228,  9230,  9232,  9234,  9236,  9238,  9240,  9242,  9244,
    9246,  9248,  9253,  9254,  9258,  9265,  9273,  9274,  9278,  9285,
    9293,  9294,  9298,  9299,  9303,  9311,  9322,  9323,  9332,  9343,
    9344,  9350,  9351,  9371,  9373,  9377,  9375,  9392,  9390,  9408,
    9406,  9413,  9422,  9420,  9438,  9437,  9447,  9458,  9456,  9475,
    9474,  9485,  9496,  9497,  9498,  9510,  9510,  9524,  9564,  9615,
    9619,  9624,  9616,  9636,  9656,  9664,  9656,  9673,  9672,  9695,
    9712,  9695,  9719,  9723,  9749,  9750,  9755,  9758,  9759,  9760,
    9764,  9765,  9770,  9769,  9775,  9774,  9782,  9783,  9786,  9788,
    9788,  9792,  9792,  9797,  9798,  9802,  9804,  9809,  9810,  9814,
    9825,  9838,  9839,  9840,  9841,  9842,  9843,  9844,  9845,  9846,
    9847,  9848,  9849,  9853,  9854,  9855,  9856,  9857,  9858,  9859,
    9860,  9861,  9865,  9866,  9867,  9868,  9871,  9873,  9874,  9878,
    9879,  9887,  9889,  9893,  9895,  9894,  9908,  9911,  9910,  9925,
    9931,  9946,  9948,  9952,  9954,  9959,  9960,  9980, 10005, 10009,
   10010, 10014, 10027, 10029, 10034, 10033, 10068, 10070, 10075, 10076,
   10077, 10082, 10088, 10092, 10093, 10097, 10104, 10111, 10118, 10128,
   10162, 10166, 10172, 10178, 10188, 10192, 10202, 10203, 10204, 10205,
   10206, 10207, 10211, 10212, 10213, 10214, 10215, 10219, 10220, 10221,
   10222, 10223, 10227, 10228, 10229, 10230, 10234, 10239, 10240, 10243,
   10246, 10245, 10276, 10277, 10281, 10282, 10286, 10298, 10298, 10308,
   10309, 10313, 10332, 10365, 10364, 10377, 10385, 10376, 10387, 10399,
   10411, 10410, 10428, 10427, 10439, 10439, 10472, 10479, 10502, 10523,
   10535, 10540, 10539, 10549, 10555, 10562, 10567, 10572, 10582, 10583,
   10587, 10598, 10599, 10603, 10614, 10615, 10619, 10620, 10628, 10636,
   10627, 10646, 10653, 10645, 10663, 10675, 10676, 10684, 10688, 10689,
   10700, 10701, 10705, 10714, 10715, 10716, 10718, 10717, 10728, 10729,
   10733, 10734, 10736, 10735, 10739, 10738, 10744, 10745, 10749, 10750,
   10754, 10764, 10765, 10769, 10770, 10775, 10774, 10788, 10789, 10793,
   10798, 10806, 10807, 10815, 10817, 10817, 10825, 10833, 10824, 10855,
   10856, 10860, 10868, 10869, 10873, 10883, 10884, 10891, 10890, 10906,
   10905, 10917, 10916, 10928, 10927, 10941, 10942, 10946, 10959, 10975,
   10976, 10980, 10981, 10985, 10986, 10987, 10992, 10991, 11013, 11015,
   11018, 11020, 11023, 11024, 11027, 11031, 11035, 11039, 11043, 11047,
   11051, 11055, 11059, 11067, 11070, 11080, 11079, 11092, 11099, 11107,
   11115, 11123, 11131, 11139, 11146, 11148, 11150, 11159, 11163, 11168,
   11167, 11173, 11172, 11177, 11186, 11193, 11198, 11203, 11208, 11210,
   11212, 11214, 11216, 11218, 11225, 11233, 11235, 11243, 11250, 11257,
   11267, 11274, 11280, 11289, 11297, 11301, 11305, 11312, 11319, 11325,
   11332, 11339, 11344, 11349, 11357, 11359, 11361, 11366, 11367, 11370,
   11372, 11376, 11377, 11381, 11382, 11386, 11387, 11391, 11392, 11396,
   11397, 11400, 11402, 11409, 11420, 11419, 11432, 11431, 11441, 11442,
   11446, 11447, 11448, 11452, 11453, 11454, 11469, 11468, 11481, 11490,
   11480, 11492, 11496, 11497, 11511, 11512, 11517, 11519, 11521, 11523,
   11525, 11527, 11529, 11531, 11533, 11535, 11537, 11539, 11544, 11546,
   11548, 11553, 11554, 11559, 11558, 11568, 11569, 11573, 11573, 11575,
   11576, 11580, 11581, 11586, 11585, 11596, 11600, 11604, 11616, 11626,
   11627, 11628, 11634, 11646, 11658, 11668, 11678, 11645, 11686, 11687,
   11691, 11692, 11696, 11697, 11709, 11713, 11714, 11715, 11718, 11720,
   11724, 11725, 11729, 11734, 11741, 11746, 11753, 11755, 11759, 11760,
   11764, 11769, 11777, 11778, 11781, 11783, 11791, 11793, 11797, 11798,
   11799, 11803, 11805, 11810, 11811, 11820, 11821, 11825, 11826, 11830,
   11843, 11867, 11879, 11890, 11909, 11917, 11929, 11944, 11965, 11966,
   11967, 11975, 11976, 11977, 11984, 11990, 11996, 12002, 12008, 12037,
   12065, 12066, 12067, 12071, 12081, 12091, 12097, 12106, 12121, 12122,
   12126, 12135, 12151, 12155, 12202, 12206, 12224, 12228, 12307, 12332,
   12363, 12364, 12380, 12390, 12394, 12400, 12406, 12416, 12422, 12431,
   12441, 12442, 12472, 12488, 12504, 12521, 12522, 12533, 12534, 12545,
   12546, 12547, 12551, 12568, 12590, 12605, 12606, 12607, 12608, 12609,
   12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618, 12619,
   12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628, 12629,
   12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638, 12639,
   12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648, 12649,
   12650, 12651, 12652, 12653, 12654, 12664, 12665, 12666, 12667, 12668,
   12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678,
   12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688,
   12689, 12690, 12691, 12692, 12693, 12694, 12695, 12696, 12697, 12698,
   12699, 12700, 12701, 12702, 12703, 12704, 12705, 12706, 12707, 12708,
   12709, 12710, 12711, 12712, 12713, 12714, 12715, 12716, 12717, 12718,
   12719, 12720, 12721, 12722, 12723, 12724, 12725, 12726, 12727, 12728,
   12729, 12730, 12731, 12732, 12733, 12734, 12735, 12736, 12737, 12738,
   12739, 12740, 12741, 12742, 12743, 12744, 12745, 12746, 12747, 12748,
   12749, 12750, 12751, 12752, 12753, 12754, 12755, 12756, 12757, 12758,
   12759, 12760, 12761, 12762, 12763, 12764, 12765, 12766, 12767, 12768,
   12769, 12770, 12771, 12772, 12773, 12774, 12775, 12776, 12777, 12778,
   12779, 12780, 12781, 12782, 12783, 12784, 12785, 12786, 12787, 12788,
   12789, 12790, 12791, 12792, 12793, 12794, 12795, 12796, 12797, 12798,
   12799, 12800, 12801, 12802, 12803, 12804, 12805, 12806, 12807, 12808,
   12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817, 12818,
   12819, 12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827, 12829,
   12831, 12832, 12833, 12835, 12837, 12838, 12839, 12840, 12841, 12842,
   12843, 12844, 12845, 12846, 12847, 12848, 12849, 12850, 12851, 12852,
   12853, 12854, 12855, 12856, 12857, 12858, 12859, 12860, 12861, 12862,
   12863, 12864, 12865, 12866, 12867, 12868, 12869, 12870, 12871, 12872,
   12873, 12874, 12875, 12876, 12877, 12878, 12879, 12880, 12881, 12882,
   12883, 12884, 12885, 12886, 12887, 12888, 12889, 12890, 12891, 12892,
   12893, 12894, 12895, 12896, 12897, 12898, 12899, 12900, 12901, 12902,
   12903, 12904, 12905, 12906, 12907, 12908, 12909, 12910, 12911, 12912,
   12913, 12914, 12915, 12916, 12917, 12918, 12919, 12920, 12921, 12922,
   12923, 12924, 12925, 12926, 12927, 12928, 12929, 12930, 12931, 12932,
   12933, 12934, 12935, 12936, 12937, 12938, 12939, 12940, 12941, 12942,
   12943, 12944, 12945, 12946, 12947, 12948, 12955, 12954, 12969, 12970,
   12974, 12975, 12979, 12979, 13061, 13062, 13063, 13064, 13068, 13069,
   13073, 13074, 13075, 13076, 13080, 13081, 13082, 13083, 13087, 13088,
   13092, 13134, 13153, 13164, 13177, 13191, 13206, 13225, 13252, 13265,
   13292, 13335, 13349, 13350, 13351, 13352, 13356, 13357, 13366, 13378,
   13379, 13380, 13386, 13392, 13404, 13403, 13419, 13420, 13424, 13425,
   13429, 13442, 13443, 13444, 13445, 13450, 13449, 13469, 13481, 13494,
   13493, 13526, 13527, 13531, 13532, 13536, 13537, 13538, 13539, 13541,
   13540, 13553, 13554, 13555, 13556, 13557, 13563, 13568, 13574, 13585,
   13596, 13600, 13610, 13615, 13622, 13634, 13646, 13655, 13657, 13661,
   13662, 13669, 13671, 13675, 13676, 13681, 13680, 13684, 13683, 13687,
   13686, 13690, 13689, 13692, 13693, 13694, 13695, 13696, 13697, 13698,
   13699, 13700, 13701, 13702, 13703, 13704, 13705, 13706, 13707, 13708,
   13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13721,
   13722, 13726, 13727, 13731, 13741, 13751, 13764, 13779, 13792, 13805,
   13817, 13822, 13830, 13835, 13843, 13872, 13879, 13887, 13895, 13901,
   13905, 13909, 13910, 13914, 13941, 13943, 13947, 13951, 13955, 13962,
   13963, 13967, 13968, 13972, 13973, 13977, 13978, 13984, 13990, 13996,
   14006, 14005, 14015, 14016, 14021, 14022, 14023, 14028, 14029, 14030,
   14034, 14035, 14039, 14051, 14060, 14070, 14079, 14093, 14094, 14099,
   14098, 14114, 14115, 14116, 14119, 14121, 14125, 14125, 14149, 14150,
   14154, 14155, 14156, 14160, 14164, 14171, 14174, 14172, 14188, 14195,
   14216, 14233, 14235, 14239, 14240, 14244, 14245, 14253, 14254, 14255,
   14256, 14262, 14268, 14278, 14280, 14282, 14287, 14288, 14289, 14290,
   14291, 14295, 14296, 14297, 14298, 14299, 14300, 14310, 14311, 14316,
   14329, 14342, 14344, 14346, 14351, 14356, 14358, 14360, 14366, 14367,
   14369, 14375, 14374, 14392, 14393, 14397, 14402, 14410, 14410, 14435,
   14436, 14441, 14442, 14444, 14446, 14464, 14470, 14475, 14457, 14537,
   14555, 14580, 14612, 14616, 14624, 14647, 14576, 14712, 14736, 14745,
   14753, 14711, 14774, 14778, 14782, 14786, 14790, 14794, 14801, 14808,
   14815, 14825, 14826, 14830, 14831, 14832, 14836, 14837, 14842, 14844,
   14843, 14849, 14850, 14854, 14864
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_SYM", "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_USER", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE",
  "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM",
  "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM",
  "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM",
  "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_BIND_SYM",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFLINE_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM",
  "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM",
  "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "@3", "change", "@4",
  "master_defs", "master_def", "ignore_server_id_list", "ignore_server_id",
  "master_file_def", "create", "@5", "@6", "@7", "@8", "@9", "@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "@11", "ev_schedule_time", "@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "@13", "ev_sql_stmt_inner", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "@14", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_init_param",
  "sp_fdparam", "sp_pdparam_list", "sp_pdparams", "sp_pdparam",
  "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl",
  "@15", "@16", "sp_cursor_stmt", "@17", "sp_handler_type",
  "sp_hcond_list", "sp_hcond_element", "sp_cond", "sqlstate", "opt_value",
  "sp_hcond", "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "sp_decl_idents", "sp_opt_default", "sp_proc_stmt",
  "sp_proc_stmt_if", "@18", "sp_proc_stmt_statement", "@19",
  "sp_proc_stmt_return", "@20", "sp_proc_stmt_unlabeled", "@21",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "@22", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "@23", "@24", "@25", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "@26", "@27",
  "searched_case_stmt", "@28", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "@29", "@30",
  "searched_when_clause", "@31", "@32", "else_clause_opt",
  "sp_labeled_control", "@33", "sp_opt_label", "sp_labeled_block", "@34",
  "sp_unlabeled_block", "@35", "sp_block_content", "@36",
  "sp_unlabeled_control", "@37", "@38", "@39", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "@41", "create3", "@42", "@43", "opt_create_partitioning",
  "opt_partitioning", "partitioning", "@44", "have_partitioning",
  "partition_entry", "@45", "partition", "part_type_def", "@46",
  "opt_linear", "part_field_list", "part_field_item_list",
  "part_field_item", "part_column_list", "part_func", "sub_part_func",
  "opt_num_parts", "opt_sub_part", "@47", "@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "@49", "part_name",
  "opt_part_values", "@50", "@51", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "@52", "@53",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@54", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@55", "@56", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "@57", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@58", "type", "@59", "@60", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "@61", "@62", "@63", "@64", "@65", "@66", "@67",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "@68", "@69", "@70", "build_method",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "@71", "add_part_extra", "reorg_partition_rule", "@72",
  "reorg_parts_rule", "@73", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "@74", "@75", "@76",
  "opt_column", "opt_ignore", "opt_restrict", "opt_place", "opt_to",
  "slave", "@77", "@78", "start", "start_transaction_opts",
  "slave_thread_opts", "@79", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "checksum", "@80",
  "opt_checksum_type", "repair", "@81", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "analyze", "@82",
  "binlog_base64_event", "check", "@83", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "@84",
  "opt_no_write_to_binlog", "rename", "@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "@86",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "@87",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "@88", "cache_keys_spec", "@89",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "@90",
  "select_part2", "@91", "@92", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@93", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "@94", "@95", "@96", "variable",
  "@97", "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "in_sum_expr", "@98", "cast_type", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "@99", "@100", "@101", "@102",
  "@103", "@104", "@105", "normal_join", "table_factor", "@106",
  "select_derived_union", "@107", "@108", "select_init2_derived",
  "select_part2_derived", "@109", "@110", "select_derived", "@111",
  "select_derived2", "@112", "@113", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "@114", "@115",
  "index_hints_list", "opt_index_hints_list", "@116", "opt_key_definition",
  "@117", "opt_key_usage_list", "key_usage_element", "key_usage_list",
  "using_list", "interval", "interval_time_stamp", "date_time_type",
  "table_alias", "opt_table_alias", "opt_all", "where_clause", "@118",
  "having_clause", "@119", "opt_escape", "group_clause", "group_list",
  "olap_opt", "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "@120", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "@121", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "@122",
  "select_var_list", "select_var_ident", "into", "@123",
  "into_destination", "@124", "@125", "do", "@126", "drop", "@127", "@128",
  "@129", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "@130",
  "@131", "replace", "@132", "@133", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "@134", "fields", "insert_values", "@135", "@136", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "@137", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "@138", "update", "@139", "@140", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "@141", "single_multi", "@142", "@143", "@144", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "@145", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "@146", "show_param", "@147",
  "@148", "show_engine_param", "master_or_binary", "opt_storage", "opt_db",
  "opt_full", "from_or_in", "binlog_in", "binlog_from", "wild_and_where",
  "describe", "@149", "@150", "describe_command", "opt_extended_describe",
  "opt_describe_column", "flush", "@151", "flush_options", "@152", "@153",
  "opt_with_read_lock", "flush_options_list", "flush_option",
  "opt_table_list", "reset", "@154", "reset_options", "reset_option",
  "@155", "slave_reset_options", "purge", "@156", "purge_options",
  "purge_option", "kill", "kill_option", "use", "load", "@157", "@158",
  "@159", "@160", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "@161", "opt_option", "option_value_list", "option_type_value",
  "@162", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "@163",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "@164", "handler", "@165", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "@166",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "@167", "@168", "@169",
  "@170", "opt_and", "require_list", "require_list_element", "grant_ident",
  "user_list", "grant_list", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin", "@171",
  "opt_work", "opt_chain", "opt_release", "opt_savepoint", "commit",
  "rollback", "savepoint", "release", "union_clause", "union_list", "@172",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "@173",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "@174", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "@175",
  "view_list_opt", "view_list", "view_select", "@176", "view_select_aux",
  "view_check_option", "trigger_tail", "@177", "@178", "@179", "udf_tail",
  "sf_tail", "@180", "@181", "@182", "@183", "@184", "sp_tail", "@185",
  "@186", "@187", "@188", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@189",
  "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   124,    38,    45,
      43,    42,    47,    37,    94,   126,    40,    41,    44,    33,
     123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   616,   617,   618,   617,   617,   619,   619,   620,   620,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   621,   621,   621,   621,   621,   621,   621,   621,   621,
     621,   622,   623,   623,   624,   625,   625,   627,   626,   628,
     628,   629,   629,   630,   632,   631,   634,   633,   635,   635,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   637,   637,   637,   638,
     639,   639,   639,   639,   641,   640,   642,   640,   643,   640,
     644,   640,   645,   640,   646,   640,   640,   640,   640,   640,
     647,   648,   648,   649,   649,   649,   649,   649,   649,   649,
     651,   650,   653,   652,   652,   654,   654,   654,   654,   655,
     655,   656,   656,   657,   657,   658,   658,   659,   659,   661,
     660,   662,   662,   662,   662,   662,   662,   662,   662,   662,
     662,   662,   662,   662,   663,   664,   664,   665,   665,   666,
     666,   667,   667,   667,   667,   667,   667,   667,   668,   668,
     668,   669,   669,   671,   670,   672,   672,   673,   673,   674,
     674,   675,   675,   676,   676,   677,   678,   679,   679,   680,
     680,   681,   682,   682,   682,   682,   683,   683,   684,   684,
     685,   685,   687,   686,   686,   688,   686,   686,   690,   689,
     691,   691,   692,   692,   693,   694,   694,   695,   696,   696,
     697,   697,   697,   697,   697,   698,   699,   699,   700,   700,
     701,   701,   702,   702,   703,   703,   703,   704,   704,   704,
     704,   704,   704,   704,   704,   704,   704,   704,   704,   705,
     706,   706,   707,   707,   708,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   708,   710,   709,   712,
     711,   714,   713,   716,   715,   717,   718,   719,   721,   720,
     722,   723,   723,   723,   724,   724,   726,   727,   728,   725,
     729,   729,   729,   730,   730,   732,   733,   731,   735,   734,
     736,   736,   737,   737,   739,   740,   738,   742,   743,   741,
     744,   744,   746,   745,   747,   747,   749,   748,   751,   750,
     753,   752,   754,   755,   756,   754,   757,   754,   758,   758,
     759,   759,   759,   760,   761,   762,   763,   763,   764,   764,
     765,   766,   767,   767,   769,   768,   770,   770,   770,   771,
     771,   771,   772,   773,   773,   773,   774,   774,   774,   774,
     774,   774,   774,   774,   775,   776,   776,   776,   777,   777,
     777,   777,   777,   778,   779,   779,   779,   780,   780,   780,
     780,   780,   780,   780,   781,   782,   782,   782,   783,   783,
     783,   784,   785,   786,   787,   788,   789,   789,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,   799,   799,
     800,   800,   801,   801,   802,   802,   802,   802,   803,   804,
     803,   805,   806,   805,   807,   805,   808,   809,   809,   811,
     810,   812,   814,   813,   815,   816,   817,   816,   816,   816,
     816,   816,   818,   818,   819,   819,   820,   820,   821,   822,
     823,   824,   825,   825,   826,   827,   826,   828,   826,   829,
     829,   830,   831,   832,   832,   833,   833,   834,   834,   836,
     835,   837,   838,   839,   838,   840,   838,   841,   841,   842,
     842,   843,   843,   845,   846,   844,   847,   847,   848,   848,
     849,   849,   850,   850,   852,   851,   853,   854,   854,   855,
     855,   856,   856,   856,   856,   856,   856,   856,   856,   858,
     859,   857,   860,   860,   861,   861,   862,   862,   863,   863,
     864,   864,   865,   865,   866,   867,   867,   868,   868,   869,
     869,   870,   870,   870,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   872,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   873,
     874,   875,   876,   877,   877,   877,   877,   877,   877,   878,
     878,   878,   879,   879,   880,   880,   880,   880,   881,   882,
     882,   883,   883,   884,   884,   885,   885,   885,   885,   885,
     885,   886,   886,   887,   888,   888,   889,   891,   890,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
     892,   892,   892,   892,   893,   892,   894,   892,   892,   892,
     895,   895,   895,   895,   895,   895,   895,   895,   896,   897,
     897,   898,   898,   899,   899,   899,   899,   899,   900,   900,
     900,   900,   900,   901,   901,   901,   902,   902,   902,   903,
     904,   904,   905,   905,   906,   906,   906,   907,   907,   907,
     907,   908,   908,   909,   909,   910,   910,   911,   911,   912,
     912,   912,   912,   912,   912,   912,   912,   912,   912,   912,
     912,   912,   912,   912,   912,   912,   913,   914,   914,   915,
     915,   916,   916,   917,   917,   918,   918,   919,   919,   920,
     920,   921,   922,   922,   923,   923,   924,   924,   925,   925,
     925,   926,   926,   926,   927,   927,   927,   927,   927,   927,
     927,   928,   928,   929,   929,   930,   931,   931,   932,   932,
     933,   933,   933,   933,   934,   934,   934,   934,   934,   935,
     935,   935,   935,   935,   936,   937,   937,   938,   938,   939,
     939,   940,   940,   940,   941,   941,   942,   943,   944,   945,
     945,   946,   946,   947,   947,   948,   948,   949,   949,   950,
     950,   951,   951,   952,   952,   953,   953,   954,   954,   955,
     956,   956,   957,   957,   957,   958,   958,   959,   959,   960,
     960,   961,   961,   962,   962,   964,   963,   965,   963,   963,
     966,   963,   967,   963,   968,   963,   969,   963,   970,   963,
     963,   963,   963,   963,   963,   971,   971,   971,   971,   972,
     972,   973,   973,   974,   974,   975,   975,   975,   975,   975,
     975,   975,   975,   975,   975,   976,   975,   975,   977,   975,
     978,   975,   975,   975,   975,   979,   979,   979,   980,   981,
     981,   983,   982,   984,   984,   984,   986,   985,   987,   988,
     987,   989,   989,   990,   991,   991,   992,   993,   993,   993,
     994,   993,   995,   996,   993,   993,   993,   993,   993,   993,
     993,   993,   993,   993,   993,   993,   993,   993,   997,   997,
     998,   998,   999,   999,   999,  1000,  1000,  1000,  1001,  1001,
    1001,  1001,  1003,  1002,  1002,  1004,  1002,  1002,  1005,  1006,
    1006,  1008,  1007,  1009,  1009,  1010,  1010,  1010,  1011,  1011,
    1012,  1012,  1014,  1013,  1015,  1015,  1015,  1017,  1016,  1018,
    1018,  1019,  1019,  1020,  1020,  1020,  1022,  1021,  1023,  1025,
    1024,  1026,  1026,  1027,  1027,  1028,  1028,  1028,  1028,  1028,
    1028,  1030,  1029,  1031,  1031,  1031,  1033,  1032,  1032,  1034,
    1034,  1035,  1035,  1036,  1038,  1037,  1039,  1039,  1040,  1040,
    1041,  1042,  1043,  1043,  1045,  1044,  1046,  1046,  1047,  1047,
    1048,  1049,  1051,  1050,  1053,  1052,  1054,  1054,  1055,  1055,
    1056,  1057,  1057,  1058,  1058,  1059,  1059,  1061,  1060,  1063,
    1064,  1062,  1065,  1065,  1065,  1065,  1065,  1066,  1066,  1067,
    1067,  1068,  1068,  1069,  1069,  1069,  1070,  1070,  1070,  1071,
    1071,  1071,  1072,  1072,  1073,  1074,  1075,  1075,  1075,  1075,
    1075,  1076,  1076,  1077,  1077,  1077,  1077,  1077,  1077,  1077,
    1077,  1077,  1077,  1077,  1078,  1078,  1078,  1078,  1078,  1078,
    1079,  1079,  1079,  1079,  1079,  1079,  1079,  1079,  1079,  1079,
    1079,  1079,  1079,  1079,  1080,  1080,  1080,  1080,  1080,  1080,
    1080,  1080,  1080,  1080,  1080,  1080,  1080,  1080,  1080,  1081,
    1081,  1082,  1082,  1083,  1083,  1084,  1084,  1085,  1085,  1085,
    1085,  1085,  1085,  1086,  1086,  1087,  1087,  1087,  1087,  1087,
    1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,
    1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,
    1087,  1087,  1087,  1087,  1087,  1088,  1088,  1088,  1088,  1088,
    1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,
    1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,  1088,
    1088,  1088,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
    1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,  1089,
    1089,  1089,  1089,  1089,  1089,  1089,  1089,  1090,  1090,  1090,
    1090,  1090,  1090,  1090,  1090,  1090,  1090,  1090,  1090,  1090,
    1090,  1090,  1090,  1090,  1091,  1091,  1091,  1091,  1091,  1091,
    1091,  1091,  1093,  1092,  1092,  1094,  1094,  1095,  1095,  1096,
    1096,  1097,  1097,  1098,  1098,  1099,  1100,  1100,  1100,  1100,
    1100,  1100,  1100,  1101,  1102,  1100,  1100,  1100,  1100,  1100,
    1100,  1100,  1100,  1100,  1100,  1100,  1103,  1100,  1105,  1104,
    1106,  1106,  1106,  1107,  1107,  1108,  1108,  1109,  1109,  1111,
    1110,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,  1112,
    1112,  1112,  1113,  1113,  1114,  1114,  1115,  1115,  1116,  1116,
    1117,  1117,  1118,  1118,  1119,  1119,  1120,  1120,  1121,  1122,
    1122,  1123,  1123,  1124,  1124,  1125,  1124,  1126,  1124,  1127,
    1124,  1124,  1128,  1124,  1129,  1124,  1124,  1130,  1124,  1131,
    1124,  1124,  1132,  1132,  1132,  1134,  1133,  1133,  1133,  1135,
    1136,  1137,  1135,  1138,  1140,  1141,  1139,  1143,  1142,  1145,
    1146,  1144,  1147,  1148,  1149,  1149,  1150,  1150,  1150,  1150,
    1151,  1151,  1153,  1152,  1154,  1152,  1155,  1155,  1156,  1157,
    1156,  1159,  1158,  1160,  1160,  1161,  1161,  1162,  1162,  1163,
    1163,  1164,  1164,  1164,  1164,  1164,  1164,  1164,  1164,  1164,
    1164,  1164,  1164,  1165,  1165,  1165,  1165,  1165,  1165,  1165,
    1165,  1165,  1166,  1166,  1166,  1166,  1167,  1167,  1167,  1168,
    1168,  1169,  1169,  1170,  1171,  1170,  1172,  1173,  1172,  1174,
    1174,  1175,  1175,  1176,  1176,  1177,  1177,  1177,  1178,  1179,
    1179,  1180,  1181,  1181,  1183,  1182,  1184,  1184,  1185,  1185,
    1185,  1186,  1186,  1187,  1187,  1188,  1189,  1189,  1189,  1190,
    1190,  1190,  1190,  1190,  1191,  1191,  1192,  1192,  1192,  1192,
    1192,  1192,  1193,  1193,  1193,  1193,  1193,  1194,  1194,  1194,
    1194,  1194,  1195,  1195,  1195,  1195,  1196,  1197,  1197,  1198,
    1199,  1198,  1200,  1200,  1201,  1201,  1202,  1204,  1203,  1205,
    1205,  1206,  1206,  1208,  1207,  1210,  1211,  1209,  1209,  1209,
    1213,  1212,  1215,  1214,  1216,  1214,  1214,  1214,  1214,  1214,
    1214,  1217,  1214,  1214,  1214,  1214,  1214,  1214,  1218,  1218,
    1219,  1220,  1220,  1221,  1222,  1222,  1223,  1223,  1225,  1226,
    1224,  1228,  1229,  1227,  1230,  1230,  1230,  1230,  1231,  1231,
    1232,  1232,  1233,  1234,  1234,  1234,  1235,  1234,  1236,  1236,
    1237,  1237,  1238,  1237,  1239,  1237,  1240,  1240,  1241,  1241,
    1242,  1243,  1243,  1244,  1244,  1246,  1245,  1247,  1247,  1248,
    1248,  1249,  1249,  1250,  1251,  1250,  1253,  1254,  1252,  1255,
    1255,  1256,  1257,  1257,  1258,  1259,  1259,  1261,  1260,  1263,
    1262,  1264,  1262,  1265,  1262,  1266,  1266,  1267,  1267,  1268,
    1268,  1269,  1269,  1270,  1270,  1270,  1272,  1271,  1273,  1273,
    1274,  1274,  1275,  1275,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1277,  1277,  1279,  1278,  1280,  1280,  1280,
    1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1281,
    1280,  1282,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,
    1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,
    1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,  1280,
    1280,  1280,  1280,  1280,  1283,  1283,  1283,  1284,  1284,  1285,
    1285,  1286,  1286,  1287,  1287,  1288,  1288,  1289,  1289,  1290,
    1290,  1291,  1291,  1291,  1293,  1292,  1294,  1292,  1295,  1295,
    1296,  1296,  1296,  1297,  1297,  1297,  1299,  1298,  1301,  1302,
    1300,  1300,  1303,  1303,  1304,  1304,  1305,  1305,  1305,  1305,
    1305,  1305,  1305,  1305,  1305,  1305,  1305,  1305,  1305,  1305,
    1305,  1306,  1306,  1308,  1307,  1309,  1309,  1311,  1310,  1310,
    1310,  1312,  1312,  1314,  1313,  1315,  1316,  1316,  1317,  1318,
    1318,  1318,  1319,  1321,  1322,  1323,  1324,  1320,  1325,  1325,
    1326,  1326,  1327,  1327,  1327,  1328,  1328,  1328,  1329,  1329,
    1330,  1330,  1331,  1331,  1331,  1331,  1332,  1332,  1333,  1333,
    1334,  1334,  1335,  1335,  1336,  1336,  1337,  1337,  1338,  1338,
    1338,  1339,  1339,  1340,  1340,  1341,  1341,  1342,  1342,  1343,
    1344,  1344,  1344,  1344,  1345,  1345,  1345,  1346,  1347,  1347,
    1347,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,
    1348,  1348,  1348,  1349,  1349,  1349,  1349,  1349,  1350,  1350,
    1351,  1351,  1352,  1353,  1353,  1354,  1354,  1355,  1355,  1355,
    1356,  1356,  1356,  1356,  1357,  1357,  1357,  1358,  1358,  1359,
    1360,  1360,  1361,  1362,  1363,  1364,  1364,  1365,  1365,  1366,
    1366,  1366,  1367,  1367,  1367,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,  1368,
    1368,  1368,  1368,  1368,  1368,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
    1369,  1369,  1369,  1369,  1369,  1369,  1371,  1370,  1372,  1372,
    1373,  1373,  1375,  1374,  1376,  1376,  1376,  1376,  1377,  1377,
    1378,  1378,  1378,  1378,  1379,  1379,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1382,  1382,  1382,  1382,  1382,  1382,  1383,
    1383,  1383,  1384,  1384,  1384,  1384,  1385,  1385,  1385,  1386,
    1386,  1386,  1386,  1386,  1388,  1387,  1389,  1389,  1390,  1390,
    1391,  1392,  1392,  1392,  1392,  1394,  1393,  1395,  1395,  1396,
    1395,  1397,  1397,  1398,  1398,  1399,  1399,  1399,  1399,  1400,
    1399,  1401,  1401,  1401,  1401,  1401,  1402,  1403,  1403,  1403,
    1403,  1403,  1404,  1405,  1405,  1405,  1405,  1406,  1406,  1407,
    1407,  1408,  1408,  1409,  1409,  1411,  1410,  1412,  1410,  1413,
    1410,  1414,  1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,
    1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,
    1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,  1410,  1415,
    1415,  1416,  1416,  1417,  1417,  1417,  1418,  1418,  1418,  1418,
    1419,  1419,  1420,  1420,  1421,  1421,  1421,  1421,  1421,  1422,
    1422,  1423,  1423,  1424,  1425,  1425,  1425,  1425,  1425,  1426,
    1426,  1427,  1427,  1428,  1428,  1429,  1429,  1429,  1429,  1429,
    1431,  1430,  1432,  1432,  1433,  1433,  1433,  1434,  1434,  1434,
    1435,  1435,  1436,  1437,  1437,  1438,  1439,  1440,  1440,  1442,
    1441,  1443,  1443,  1443,  1444,  1444,  1446,  1445,  1447,  1447,
    1448,  1448,  1448,  1449,  1449,  1450,  1451,  1450,  1452,  1453,
    1454,  1455,  1455,  1456,  1456,  1457,  1457,  1457,  1457,  1457,
    1457,  1457,  1457,  1458,  1458,  1458,  1459,  1459,  1459,  1459,
    1459,  1460,  1460,  1460,  1460,  1460,  1460,  1461,  1461,  1462,
    1463,  1464,  1464,  1464,  1465,  1466,  1466,  1466,  1467,  1467,
    1467,  1469,  1468,  1470,  1470,  1471,  1471,  1473,  1472,  1474,
    1474,  1475,  1475,  1475,  1475,  1477,  1478,  1479,  1476,  1480,
    1480,  1482,  1483,  1484,  1485,  1486,  1481,  1488,  1489,  1490,
    1491,  1487,  1492,  1492,  1492,  1492,  1492,  1492,  1493,  1493,
    1493,  1494,  1494,  1495,  1495,  1495,  1496,  1496,  1497,  1498,
    1497,  1499,  1499,  1500,  1501
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     5,     1,     0,     1,     3,     1,
       3,     3,     3,     3,     0,     7,     0,    13,     0,    13,
       0,    13,     0,     6,     0,     3,     4,     4,     3,     2,
      10,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     3,     4,     0,     2,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     1,     0,     2,     0,
       2,     2,     2,     2,     2,     3,     3,     1,     1,     1,
       2,     3,     3,     0,     4,     0,     3,     0,     1,     3,
       1,     0,     1,     3,     1,     0,     3,     0,     1,     3,
       1,     4,     0,     1,     1,     1,     0,     3,     2,     3,
       0,     3,     0,     5,     5,     0,     7,     5,     0,     2,
       1,     1,     1,     3,     1,     1,     1,     3,     0,     1,
       1,     1,     1,     2,     1,     3,     1,     1,     0,     1,
       0,     2,     3,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     5,     0,
       2,     0,     3,     0,     2,     2,     2,     2,     0,     6,
       2,     0,     2,     1,     1,     3,     0,     0,     0,     7,
       0,     2,     2,     1,     1,     0,     0,     8,     0,     6,
       1,     2,     1,     2,     0,     0,     6,     0,     0,     6,
       0,     2,     0,     5,     0,     1,     0,     5,     0,     2,
       0,     5,     4,     0,     0,     8,     0,     7,     1,     1,
       1,     1,     1,     2,     4,     5,     0,     4,     4,     4,
       3,     3,     2,     2,     0,     2,     1,     2,     3,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     2,     2,     2,     1,     1,     1,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     4,     0,     1,
       1,     1,     1,     1,     2,     3,     2,     4,     5,     0,
       5,     0,     0,     5,     0,     7,     1,     0,     1,     0,
       4,     0,     0,     3,     5,     5,     0,     4,     2,     2,
       2,     2,     0,     1,     0,     1,     1,     3,     1,     4,
       5,     5,     0,     2,     0,     0,     7,     0,     9,     1,
       3,     1,     1,     0,     2,     0,     3,     1,     3,     0,
       6,     1,     0,     0,     5,     0,     4,     1,     1,     1,
       3,     1,     3,     0,     0,     5,     1,     3,     1,     1,
       0,     3,     1,     3,     0,     4,     1,     0,     1,     2,
       1,     3,     4,     3,     3,     3,     4,     4,     3,     0,
       0,     6,     0,     1,     0,     1,     1,     2,     1,     1,
       0,     1,     1,     2,     1,     0,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     6,     1,
       1,     3,     4,     4,     2,     2,     2,     3,     3,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     2,     2,     7,     8,     8,     8,     8,
       2,     0,     1,     4,     0,     1,     2,     0,     4,     3,
       3,     3,     1,     2,     1,     1,     3,     2,     3,     2,
       2,     1,     3,     3,     2,     3,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     2,     3,     2,     3,     2,
       2,     3,     3,     3,     0,     6,     0,     6,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     5,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     1,     3,     2,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     1,     2,
       2,     1,     2,     2,     0,     1,     1,     1,     3,     1,
       3,     0,     1,     0,     1,     5,     0,     3,     3,     1,
       0,     2,     2,     2,     0,     3,     3,     6,     6,     1,
       1,     2,     2,     2,     1,     2,     2,     1,     1,     0,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     1,
       2,     0,     1,     0,     1,     0,     1,     1,     2,     1,
       2,     1,     2,     2,     2,     3,     2,     1,     1,     1,
       1,     3,     1,     1,     1,     4,     2,     1,     4,     0,
       1,     0,     2,     1,     3,     0,     7,     0,     5,     7,
       0,     5,     0,     5,     0,     5,     0,     4,     0,    10,
       3,     4,     3,     3,     7,     0,     3,     1,     4,     0,
       3,     0,     2,     0,     1,     0,     2,     2,     2,     2,
       1,     1,     1,     3,     4,     0,     6,     4,     0,     5,
       0,     6,     4,     3,     1,     0,     1,     1,     2,     1,
       1,     0,     5,     0,     3,     2,     0,     5,     0,     0,
       6,     1,     3,     1,     1,     3,     2,     3,     2,     4,
       0,     6,     0,     0,     8,     4,     4,     3,     3,     2,
       2,     6,     5,     3,     5,     1,     1,     1,     0,     1,
       0,     1,     0,     1,     1,     0,     2,     1,     0,     1,
       1,     1,     0,     5,     3,     0,     5,     3,     3,     0,
       3,     0,     2,     1,     3,     0,     1,     1,     0,     2,
       1,     3,     0,     5,     0,     1,     1,     0,     6,     0,
       1,     1,     2,     1,     1,     1,     0,     5,     2,     0,
       5,     0,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     8,     4,     0,
       1,     2,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     3,     4,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     4,     3,     3,     6,     1,
       5,     6,     5,     7,     6,     8,     5,     6,     4,     4,
       5,     3,     4,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     4,     8,     8,     6,
       6,     2,     4,     6,     6,     8,     8,     6,     8,     6,
       2,     4,     8,     8,     2,     2,     2,     4,     4,     4,
       4,     3,     8,     4,     6,     4,     4,     4,     6,     8,
       6,     4,     6,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     1,     0,
       3,     2,     3,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     3,     0,     6,     0,     6,     0,
       8,     4,     0,     8,     0,    10,     6,     0,     8,     0,
      10,     6,     1,     2,     2,     0,     4,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     4,     4,     2,     0,     1,     1,     3,     3,
       1,     2,     0,     1,     0,     4,     4,     2,     0,     1,
       1,     0,     1,     0,     1,     2,     1,     3,     3,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       0,     6,     0,     1,     3,     1,     3,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     7,     4,     6,     4,     4,
       4,     0,     6,     4,     4,     5,     6,     4,     1,     3,
       1,     1,     3,     1,     0,     2,     0,     1,     0,     0,
       8,     0,     0,     6,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     3,     4,     0,     3,     3,     1,
       2,     2,     0,     3,     0,     5,     3,     1,     3,     1,
       3,     1,     1,     0,     1,     0,     4,     0,     1,     3,
       1,     1,     1,     0,     0,     6,     0,     0,    11,     3,
       1,     3,     3,     1,     3,     0,     1,     0,     4,     0,
       6,     0,     5,     0,     6,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     4,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     6,     2,     2,     0,
       6,     0,     6,     5,     2,     1,     1,     1,     5,     5,
       2,     2,     1,     4,     3,     2,     3,     2,     2,     1,
       3,     4,     3,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     0,
       1,     0,     2,     0,     1,     1,     1,     0,     2,     0,
       2,     0,     2,     2,     0,     4,     0,     4,     1,     1,
       0,     1,     1,     0,     1,     1,     0,     4,     0,     0,
       5,     1,     0,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     0,     3,     3,     1,     0,     3,     1,
       2,     0,     1,     0,     3,     3,     2,     2,     3,     0,
       1,     1,     2,     0,     0,     0,     0,    21,     1,     1,
       0,     1,     0,     1,     1,     0,     1,     1,     0,     2,
       2,     1,     3,     4,     3,     3,     0,     2,     2,     1,
       3,     3,     0,     4,     0,     3,     1,     1,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     3,     1,     5,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     1,     3,     4,     5,
       1,     5,     3,     2,     1,     3,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     0,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     0,     1,
       0,     1,     1,     1,     0,     2,     2,     2,     1,     2,
       4,     5,     4,     6,     2,     3,     3,     3,     5,     1,
       3,     3,     2,     2,     2,     1,     1,     4,     4,     1,
       1,     1,     1,     1,     0,     4,     1,     1,     1,     3,
       3,     1,     1,     2,     2,     0,     3,     4,     3,     0,
       7,     1,     2,     1,     1,     1,     1,     1,     1,     0,
       5,     1,     1,     1,     1,     1,     3,     6,     6,     6,
       7,     5,     3,     8,     8,     8,     6,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     4,     5,     4,     6,     1,     0,
       3,     3,     1,     1,     0,     2,     2,     2,     2,     0,
       2,     0,     3,     2,     1,     2,     2,     2,     2,     2,
       0,     3,     0,     1,     0,     3,     2,     0,     1,     2,
       0,     1,     4,     4,     5,     2,     3,     0,     1,     0,
       4,     0,     1,     1,     0,     1,     0,     2,     2,     1,
       0,     1,     1,     2,     3,     2,     0,     6,     3,     0,
       0,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     2,
       4,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2439,   983,  2370,     0,     0,     0,     0,     0,     0,
    2372,   114,    62,  1587,  1698,  1699,  1500,  1526,     2,     0,
     983,   164,     0,    74,  1528,     0,  1749,     0,     0,   983,
     442,     0,  1743,     0,     0,   983,  1531,  1733,   238,   164,
    2372,     0,  1029,  2198,  1625,     0,     0,     0,     0,  1608,
       0,  2255,  1576,     0,     0,     0,     0,     3,     8,    19,
       0,    38,    24,    28,    14,    18,    13,    51,    45,    36,
      10,    53,    54,    16,    42,    11,    12,    15,    34,    41,
      35,    37,    49,  1020,    22,    23,    29,    43,    58,    20,
      55,    52,    21,  1700,    25,    44,    39,    31,    59,    32,
      50,    33,    57,    27,    46,    26,     9,    17,    47,    48,
      40,    60,    30,    56,     0,   853,     0,     0,     0,   877,
     876,     0,     0,     0,   920,   836,  2437,  2438,  2439,   985,
     984,     0,  2372,  1852,   968,   994,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,  1866,  1922,  1923,  1925,  1924,  1926,  1927,
    1867,  1868,  1928,  1929,  1930,  1932,  1931,  1933,  1869,  1870,
    1934,  1935,  1936,  1937,  1871,  1872,  1938,  1940,  1939,  1873,
    1941,  1942,  1943,  1946,  1945,  1944,  1874,  1947,  1875,  1948,
    1949,  1950,  1951,  1952,  1953,  1954,  1956,  1955,  1876,  1957,
    1958,  1959,  1960,  1961,  1963,  1962,  1964,  1965,  1966,  1877,
    1967,  1968,  1969,  1970,  1971,  1972,  1973,  1878,  1974,  1975,
    1976,  1993,  1879,  1977,  1980,  1979,  1978,  1981,  1982,  1983,
    1985,  1984,  1986,  1880,  1987,  1988,  1989,  1991,  1990,  1995,
    1996,  1997,  1881,  1992,  1994,  2177,  1998,  2000,  1999,  2001,
    2003,  2002,  1882,  2004,  1883,  1884,  2005,  2006,  1850,  2007,
    1851,  2008,  2010,  2011,  2012,  2017,  1885,  2009,  2013,  2014,
    2015,  2016,  2018,  1886,  2019,  2020,  2021,  2022,  2023,  2024,
    2025,  2026,  2027,  2028,  2039,  2032,  2034,  2035,  2037,  2033,
    2038,  2042,  2041,  2043,  2044,  2045,  2040,  2030,  2036,  2031,
    2046,  2047,  2029,  2048,  2049,  2050,  2051,  2052,  2053,  2054,
    2055,  2056,  2057,  2058,  2060,  2059,  2061,  2062,  2063,  2064,
    2065,  2066,  2068,  2067,  2069,  2070,  2071,  2073,  2072,  2075,
    2076,  1887,  2074,  2077,  2079,  2078,  2080,  2081,  2082,  2083,
    1888,  1889,  1890,  2084,  2085,  1891,  2086,  2087,  2088,  1892,
    2089,  2090,  2092,  2091,  2093,  2094,  1893,  1894,  2095,  2096,
    2097,  2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,  2106,
    2107,  2108,  2110,  2109,  2111,  2112,  2113,  2114,  2115,  2116,
    2117,  1895,  2118,  1896,  2119,  2120,  1897,  2121,  1898,  2122,
    2123,  1899,  2124,  2125,  2126,  2127,  2128,  2129,  1900,  2130,
    2131,  2132,  1901,  2134,  2133,  2135,  1902,  2137,  2138,  1903,
    2136,  1905,  2139,  2140,  1904,  1906,  2141,  2142,  2144,  2143,
    2145,  2146,  2147,  1907,  2148,  1908,  2149,  2150,  2151,  2152,
    2153,  2155,  2154,  2156,  2157,  2158,  2159,  2161,  2163,  2162,
    2160,  2164,  2165,  2166,  2167,  2170,  2171,  2172,  2173,  2168,
    2169,  1909,  2174,  2175,  2176,  2178,  2179,  2181,  2180,  1910,
    1911,  2182,  2183,  1914,  2184,  2185,  2188,  2186,  2187,  2190,
    2189,  2191,  2192,  1912,  2193,  1913,  2194,  2195,   183,  1855,
     166,  1856,  1865,     0,  2247,  2246,   952,   969,  2373,  2374,
     535,     0,     0,     0,   534,   164,  2439,   119,     0,   531,
     532,   784,  1601,     0,  1524,  1524,  1524,     0,  1524,  1524,
       0,  1527,  1524,   164,  1524,     0,     0,    67,  1706,     0,
       0,     0,     0,  1849,     0,  1534,     0,  1750,  1751,     0,
    1758,     0,  1759,  1753,  2244,     0,     0,     0,     0,     0,
     164,   986,     0,  1585,     0,   228,   237,   239,   240,   236,
       0,  2374,  2385,  1021,  1027,  1039,  2199,  2196,  1683,   240,
     941,   941,   941,   939,   941,  1609,  1606,     0,     0,  1585,
    1752,  2491,     0,     0,     0,  2487,     0,  2492,     0,  1029,
       0,     0,     1,     5,     0,     0,  1988,  2088,  1696,  1694,
    1844,     0,   827,   854,     0,   832,     0,   830,  1861,  1860,
    1859,     0,   843,   842,   840,     0,   404,   921,     0,     0,
    2448,   834,   966,  2371,     0,   185,     0,    76,     0,     0,
       0,  2377,     0,     0,     0,     0,   118,     0,     0,     0,
     115,  1054,  1054,  2439,  2441,  2443,   535,   533,   786,   787,
     785,     0,     0,     0,  1605,  1604,  1603,     0,  1601,  1916,
    1866,  1927,     0,  1817,     0,     0,     0,  1300,     0,  1871,
       0,  1941,  1943,  1876,     0,     0,  1061,  1061,  1061,     0,
       0,     0,  1965,  1966,  1826,     0,     0,     0,  1814,  1827,
    2000,  2001,     0,  1816,  2006,     0,     0,     0,     0,  2023,
    1824,     0,     0,  2055,  2057,     0,     0,  2061,  2062,  2063,
    2064,  1801,  1116,     0,  1061,  1813,  1823,  2080,  1807,  2089,
    2093,  2094,     0,  2103,     0,     0,     0,  2128,  2132,     0,
       0,  2152,     0,     0,  1061,  1800,  2170,  2171,  2172,  2173,
       0,  1815,  1909,  1825,     0,  2184,  1061,  1061,  1061,     0,
       0,     0,  2191,  2195,     0,     0,     0,  2409,  1115,     0,
    1268,     0,  1294,  1073,  1079,  1093,     0,  1108,  1126,  1127,
    1129,  1223,  1128,  1134,  1133,  1501,  1811,  1132,  1131,  1812,
    1125,  1834,  1855,  1833,     0,     0,     0,     0,     0,     0,
       0,  1679,     0,     0,  1511,     0,  1524,    69,     0,  2291,
    2306,  2307,  2303,  2308,  2326,  2309,  2313,     0,  2305,  2297,
       0,  2312,     0,  2301,  2310,     0,  2295,     0,  2311,  2316,
    2327,  2299,  2304,  2282,     0,  2289,  2293,  1846,  1406,  2258,
    2259,     0,    75,  1536,  1537,  1535,   920,     0,  1748,     0,
    1762,     0,   981,   452,   443,     0,  1678,  1677,     0,  1744,
    2386,     0,     0,   957,  1539,  1586,     0,  1538,  1739,     0,
    1737,  1734,  1736,   229,     0,     0,   259,  2291,     0,  2276,
       0,  2380,  2377,  2387,  2422,  2417,  2416,  2419,  2420,  1045,
    2421,  1044,  2418,  2415,  1054,  1040,  1042,  1043,  2202,  1645,
       0,   720,     0,  1691,  1646,     0,     0,  1691,     0,  1441,
    1681,  1684,     0,  2211,  1659,   783,   782,   781,  2212,  1677,
       0,  1633,  1647,     0,  1610,  1652,     0,  2213,     0,  1680,
       0,  1441,  1691,     0,  1626,     0,     0,     0,     0,   235,
     935,   945,   937,   932,     0,   938,   934,     0,  2504,  2256,
     920,  1806,  1805,  1853,  2488,  1804,  2496,  2498,  2484,  2486,
    2493,  1023,     0,  2391,     6,    61,     0,  1703,  2446,  2447,
    2445,   736,     0,  1061,  1862,  2440,   167,   841,     0,   405,
     167,     0,     0,     0,     0,     0,   406,   407,   343,     0,
     838,     0,     0,   837,  2448,     0,     0,   996,   998,   997,
    1014,   187,   184,   165,     0,   954,  1518,  1520,   971,  2376,
       0,     0,  2378,  2382,  1114,  1113,     0,   112,   117,     0,
       0,     0,  2348,   116,  2342,  2444,  1054,  1054,  1054,  2436,
       0,  2424,  2431,  2432,  2435,  2434,  2433,  2430,     0,  2423,
    2426,  2427,  2429,  2428,  2448,  2442,     0,     0,     0,     0,
       0,  1588,  1591,  1595,  1599,  1602,     0,     0,  1411,  1147,
    1411,  1411,  1411,  1301,     0,     0,     0,     0,     0,     0,
       0,     0,  1411,     0,  1184,  1157,     0,  1185,     0,     0,
       0,     0,     0,  1820,     0,     0,  2409,     0,     0,     0,
    1273,     0,     0,     0,  2409,     0,     0,     0,     0,     0,
    1296,  1298,  1833,  1411,     0,     0,  1411,     0,     0,     0,
       0,     0,  1066,     0,  1191,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1411,  1411,     0,     0,
    1411,     0,  1200,     0,  1822,     0,     0,     0,  1821,     0,
       0,  1819,  1818,  1802,     0,  1204,  1206,  1205,     0,  1411,
    1411,     0,     0,  1137,  1136,  1138,     0,     0,     0,     0,
       0,     0,  1112,  1111,  1110,  1109,     0,     0,     0,  1117,
       0,  1118,  1119,     0,  1120,  1121,  1122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1139,     0,     0,     0,
    1803,  1232,     0,  1525,  1506,  1513,  1508,  1679,  1509,  1517,
     418,     0,  1514,  2340,  1510,     0,     0,  1502,     0,    68,
       0,  1729,     0,     0,     0,  1723,  1725,  1728,  1724,     0,
       0,  1730,  1727,     0,  1726,  1707,  1711,  1715,  1708,  2292,
    2290,  2324,  2323,  2328,     0,  2325,  2321,  2314,  2349,  2318,
       0,  2349,  2320,  2319,  2349,  2315,  2322,  2349,  2287,     0,
    1407,  1408,     0,  2257,     0,  1845,     0,     0,  1004,  1763,
    1764,  1760,  1406,  2245,  2248,     0,   453,     0,     0,   462,
       0,     0,    64,    65,     0,   988,     0,   987,   991,     0,
       0,     0,  1542,  1532,  1541,  1740,  1741,     0,   227,   252,
     247,   255,   249,   251,   250,   256,   257,   258,   253,   248,
     254,   241,     0,  2290,     0,  2287,  2381,     0,  2383,  2400,
    1028,  2388,  1051,  1030,  1050,     0,  1041,  2197,  2200,  2208,
    1687,   719,     0,     0,  1658,     0,   535,     0,     0,     0,
       0,     0,     0,  1627,     0,     0,   572,     0,  1651,  1442,
    1685,  1686,  1691,     0,     0,  1691,     0,  1664,  1681,     0,
    1691,  1622,     0,     0,  1614,  1619,  1615,     0,  1621,  1620,
    1623,  1611,  1612,  1687,  1638,  1665,  1681,  1650,  1657,     0,
    1637,  1644,     0,  1655,  1681,  1681,  1691,  1691,   948,   947,
     946,   942,   943,   948,     0,  1607,  1335,     0,     0,  2485,
    2499,  2483,  2494,  2495,  2482,  1024,  2392,  1022,  2393,     0,
       7,     4,  1697,  1695,  1704,  1705,   737,   736,   526,   529,
     528,     0,     0,  1864,     0,   833,     0,  1679,   831,     0,
       0,  1679,   354,  1679,   408,   825,   845,     0,     0,   835,
     967,     0,     0,   441,  1014,  1000,  1016,     0,   188,   190,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
      78,    95,   956,   955,     0,   953,   979,   978,   976,     0,
     977,   975,   970,   972,   973,  2375,  2379,   536,   736,  1679,
       0,   346,     0,     0,     0,     0,     0,   535,     0,     0,
    2425,   104,   788,   788,   788,  1593,  1521,  1589,  1523,  1844,
       0,     0,     0,  1597,     0,     0,  1412,  1411,     0,  1279,
       0,     0,     0,     0,  1302,     0,     0,     0,     0,     0,
       0,     0,  1253,     0,  1279,  1062,     0,  1211,     0,     0,
       0,     0,     0,     0,  1382,  1383,  1384,  1385,  1393,  1386,
    1387,  1388,  1395,  1400,  1389,  1390,  1396,  1397,  1398,  1391,
    1399,  1394,  1392,  1401,     0,  1381,     0,  1404,  1402,  1405,
    1403,     0,  1274,  1266,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1411,     0,     0,     0,  1411,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1411,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1180,     0,  1836,  1835,     0,     0,
       0,     0,  1141,     0,  1140,  1344,     0,  2394,  2410,     0,
    2214,  1269,  1271,     0,  1064,  1063,  1065,  1076,  1069,  1074,
    1067,  1071,     0,  1123,  1921,  1077,     0,     0,  1105,  2409,
    1420,  1106,  1091,  1096,  1097,     0,  1094,  1095,     0,  1099,
       0,  1098,  1102,  1103,  1104,  1107,     0,     0,     0,     0,
    1130,  1135,  1295,  1054,  1837,     0,   418,   421,   420,  1515,
     419,  1563,     0,   922,     0,     0,     0,    70,    72,  1720,
    1717,  1716,  1718,  1722,  1721,  1719,     0,  1731,  2317,     0,
    2298,     0,  2302,  2296,  2300,     0,     0,  2288,     0,  2294,
    1410,  1996,  2072,     0,  1413,  2261,  1529,  2503,     0,  1761,
       0,     0,     0,   982,     0,  1054,   451,   450,   449,   448,
       0,   464,   446,     0,    66,     0,     0,  1745,     0,     0,
       0,     0,   959,  1540,     0,  1742,  1738,  1735,     0,     0,
       0,     0,     0,     0,     0,  2384,  2402,  2401,  2389,  1054,
    1432,  1055,  1055,  1833,  2202,  2205,  2206,  2209,  2207,     0,
    2204,  2203,  2218,     0,  1689,  1692,  1693,     0,     0,  1673,
    1667,  1666,  1662,  1668,  1663,  1676,  1675,  1674,  1635,  1634,
    1452,  1453,  1451,  1445,  1446,  1450,  1449,  1630,  1682,  1672,
    1670,  1660,  1691,  1671,  1669,  1616,  1617,  1618,     0,  1441,
       0,  1689,  1691,  1681,     0,  1691,  1691,  1654,  1656,     0,
     936,   945,   933,   940,  1353,  1352,     0,  1309,     0,  1311,
    1308,  1307,  1306,     0,  1352,  2489,  2497,  2501,     0,  1441,
    2399,  2397,   527,  1563,  1563,     0,  1863,     0,     0,     0,
       0,     0,     0,     0,   168,   177,     0,     0,   352,   353,
    1563,   351,   394,   395,   398,   399,   400,     0,     0,     0,
       0,     0,     0,     0,     0,   121,   401,  1563,  1563,   348,
     374,   375,   378,   379,   380,   381,   382,   344,     0,   349,
     736,     0,   847,   849,  2449,  2450,  2451,  1003,   995,  1002,
     999,  1014,  1012,  1001,   778,   777,     0,  1015,   186,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1519,   980,   974,   113,   736,  1563,  1563,  1563,  1563,   350,
     383,   384,   387,   388,   389,   390,   393,   391,   392,     0,
       0,  1679,     0,     0,  2343,     0,  2477,     0,     0,     0,
     166,   537,   789,     0,     0,     0,     0,     0,  1413,     0,
    1847,  1596,  1335,  1600,  1599,     0,  1207,     0,  1246,     0,
    1248,  1249,  1250,     0,     0,     0,     0,     0,  1208,     0,
    1155,  1209,  1210,     0,     0,     0,     0,  1252,     0,  1186,
       0,     0,  1158,  1159,  1152,  1144,     0,  1225,     0,     0,
    1160,     0,     0,     0,     0,     0,  1226,  1297,     0,  1299,
    1837,     0,  1258,  1213,  1165,     0,  1256,     0,  1166,  1227,
    1228,  1229,  1192,  1215,  1216,     0,  1231,     0,  1217,     0,
       0,     0,     0,  1168,  1262,  1260,     0,     0,     0,     0,
    1264,  1201,  1170,     0,     0,     0,  1169,     0,     0,     0,
       0,     0,     0,     0,  1172,     0,  1153,  1261,  1263,  1221,
       0,  1181,     0,  2403,  1343,  2411,  1344,     0,     0,  2405,
    2395,  2400,  2408,  1145,     0,     0,     0,     0,     0,  1838,
    1070,  1075,  1068,  1072,  2409,     0,     0,     0,     0,  1089,
    1088,     0,     0,     0,  2409,  1420,  1092,     0,     0,  1242,
    1243,  1292,     0,  1507,  1516,  1561,  1562,  1564,     0,  2341,
     924,   923,  1512,  1504,   922,    73,     0,  1714,  1732,  1709,
    2353,     0,  2352,     0,  2336,  2339,  1844,     0,     0,     0,
    2271,  2265,  2272,  2274,  2268,  2273,  2275,  2266,  2267,  2262,
    2269,  1414,  1443,     0,  1005,  1007,  1008,  1006,  1014,     0,
       0,  2251,  2252,  2250,  2249,   454,     0,  1477,  1478,  1463,
    1464,  1462,  1465,   463,  1466,  1476,     0,   475,     0,   454,
    1747,  1746,     0,   989,   992,   993,   964,   963,   965,   958,
     960,   961,   519,  1546,     0,     0,     0,  1552,  1533,  1543,
       0,  1965,  2170,  2173,   242,   245,   244,   246,     0,     0,
       0,     0,     0,     0,  1049,  1335,  1493,  1046,  1034,  1443,
    1433,  1033,  1056,  1052,     0,  2201,     0,  2168,  2229,     0,
       0,     0,     0,     0,  2219,  1688,     0,  1639,     0,  1661,
       0,     0,  1632,     0,  1653,  1613,  1641,  1631,  1413,  1681,
    1628,  1629,   950,   949,   944,  1352,  1335,     0,     0,  1332,
    1354,     0,  1354,  1335,  1335,     0,  1335,  1406,  1349,     0,
       0,  2500,  1434,  2398,     0,     0,   829,   171,   174,   172,
       0,   173,     0,     0,   403,   402,     0,  1679,   396,   125,
     124,   126,   127,  1460,  1461,  1457,  1458,  1456,  1459,   129,
     128,   123,   844,     0,     0,     0,  1679,   376,   355,   356,
     359,   360,   361,   918,   918,     0,  1563,  1563,   918,  1563,
       0,     0,  1563,  1563,     0,     0,  1563,     0,     0,   918,
       0,  1563,   916,     0,     0,  1563,  1563,  1563,  1563,   918,
       0,     0,  1563,   441,  1563,     0,     0,   928,     0,     0,
    1563,     0,     0,  1563,     0,  1563,   861,   915,   539,   559,
     560,   826,   860,   862,   874,   437,     0,   894,   917,     0,
       0,     0,   135,  2453,     0,  1373,   189,    96,    81,    85,
      80,   100,  1470,  1471,  1469,  1467,  1468,   101,    83,    84,
      88,    87,    89,    90,    91,    86,    92,    82,    93,   102,
     103,    79,     0,     0,     0,     0,  1679,   385,     0,     0,
    1563,   345,   362,   363,   366,   367,   368,   369,   370,   373,
     371,   372,     0,  2344,  2346,     0,     0,   339,   338,     0,
     130,  2471,     0,     0,   604,   105,   437,   538,   541,     0,
       0,   790,     0,     0,     0,  1522,  1599,  1335,  1432,  1845,
    1413,     0,  1598,     0,     0,  1247,  1280,     0,  1303,     0,
    1149,   691,   691,  1290,  1288,   676,   691,  1284,  1289,  1286,
       0,   722,     0,   721,     0,     0,     0,  1254,  1251,     0,
       0,     0,     0,  1277,     0,     0,     0,  1154,     0,  1237,
    1259,  1257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1265,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1142,  1054,  2412,  2414,
    1025,     0,  2404,  2406,  2215,  2216,  2217,   821,  1270,     0,
    1086,  1082,     0,  1080,  1419,  1101,  1100,     0,     0,     0,
    1090,  1055,  1233,  1054,     0,  1293,  1839,   417,   571,  1505,
    1503,    71,  1712,  2350,     0,  2361,     0,     0,     0,     0,
       0,     0,     0,  2260,  1444,  1573,     0,  1014,  1018,  1854,
    1754,  2253,  2254,     0,   455,   456,   458,  1055,   472,   452,
       0,   444,   447,     0,     0,   962,  1039,     0,  1565,  1550,
    1557,  1551,     0,     0,     0,  1549,  1829,  1828,  1835,  2387,
       0,     0,  2281,     0,     0,     0,  2390,  1413,  1413,  1487,
       0,     0,  1031,  1036,  1032,  1035,     0,  1053,  1060,  1059,
    1830,  1837,     0,     0,     0,     0,   724,   723,   732,     0,
       0,     0,  2214,     0,   728,   730,   729,  2224,   727,  1690,
    1441,  1649,  1648,  1448,  1447,  1624,  1441,  1643,  1691,     0,
       0,  2394,  1347,     0,  1334,  1333,  1355,     0,  1335,  1354,
    1354,     0,  1314,  1313,  1577,  1580,     0,  1312,  1371,  1337,
    1039,  2490,  2502,     0,   735,   734,   570,   731,   569,   176,
     175,   181,   182,   423,   409,   422,   397,   122,   410,   411,
     377,     0,   357,   919,   819,   983,   898,     0,   605,   819,
     774,   779,   779,   896,     0,   983,     0,     0,     0,     0,
       0,   983,     0,     0,     0,  1563,     0,   909,   856,     0,
       0,     0,     0,     0,   910,     0,   857,  1563,     0,     0,
       0,     0,     0,   983,     0,     0,   439,     0,   983,   878,
     931,   930,   929,     0,   983,   983,     0,   565,   566,   564,
       0,     0,   557,   540,   736,   858,   438,   859,   604,     0,
     925,   601,   607,  1840,     0,   145,     0,     0,   846,     0,
     138,   136,   147,     0,     0,     0,  1376,     0,  1377,  1374,
    1375,     0,    97,    99,   416,   415,   414,   413,   386,     0,
       0,     0,  1679,   364,  2345,     0,     0,  2478,   342,   340,
     341,     0,     0,   191,   586,   587,   585,   584,     0,   426,
       0,  1892,   424,     0,   436,     0,   588,   589,   591,   592,
    1765,   736,   542,   812,   814,   813,   804,   803,   106,   108,
     110,     0,  1413,  1454,  1848,  1592,     0,  1182,  1304,     0,
       0,   692,  1281,   744,     0,  1291,   678,   677,  1283,  1285,
    1287,  1148,  1156,  1224,  1151,  1150,     0,     0,     0,  1189,
    1190,  1275,  1278,     0,     0,  1162,     0,  1164,     0,     0,
    1239,  1214,  1230,  1193,  1218,     0,  1167,  1143,     0,  1194,
       0,  1199,  1197,     0,  1171,     0,     0,  1178,     0,  1176,
       0,  1177,     0,  1179,  1220,  1222,  1345,  2413,  1026,     0,
       0,  1272,  1078,     0,  1087,  1084,     0,  1081,  1056,  1244,
    1234,     0,  1710,  2351,     0,  2286,  2338,  2337,  2354,  2354,
    2354,     0,  1415,     0,  1530,  1009,  1014,  1018,     0,  1010,
    1765,   459,     0,     0,     0,   479,     0,   477,   445,   990,
    1054,  1547,  1559,     0,  1567,     0,     0,  1544,  1554,     0,
       0,     0,  1553,   243,     0,  2278,  2279,  2277,  1443,  1421,
       0,     0,  1499,     0,  1494,  1047,     0,  1058,  1057,     0,
    2231,     0,  2230,  2242,  2243,  2240,  2241,  2239,  2220,     0,
    2226,  2225,     0,     0,     0,  2236,  2227,     0,     0,  1640,
    1642,  1636,   951,  2400,  1406,  1339,  1335,  1310,  1335,  1321,
       0,     0,  1335,  1317,  1315,  1319,     0,  1413,     0,  1336,
    1368,  1054,  1832,  1435,  1438,   358,   606,   820,   881,     0,
       0,     0,   779,   600,   819,   788,   780,   819,   819,     0,
       0,   550,   547,   900,   553,   879,   868,   880,   891,   893,
       0,   549,   567,     0,     0,   555,   819,   863,   907,   908,
     922,   544,     0,   580,   581,   579,   561,   568,   545,   546,
     902,     0,  1428,  1430,  1438,   552,   551,     0,   548,     0,
     913,   886,     0,   578,   576,   573,   575,   574,   577,   556,
     554,   873,     0,   918,   918,   895,     0,  1843,     0,   927,
     897,     0,   593,   602,   594,     0,     0,   146,   134,     0,
       0,   848,   850,     0,     0,   851,  2455,     0,  2457,     0,
    1017,     0,    94,     0,     0,   347,   412,   365,  2347,     0,
     202,  1054,     0,     0,   192,   194,   195,     0,     0,     0,
     537,   604,  1767,  1766,   425,   522,   543,     0,     0,     0,
    1599,  1594,     0,  1590,     0,  1305,     0,     0,     0,     0,
     738,   749,   747,   741,     0,   745,   746,  1282,     0,  1255,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1146,
       0,  1235,     0,     0,     0,     0,     0,     0,  1175,  1173,
    1174,  1443,  2394,   822,  1083,     0,  1245,     0,     0,     0,
    2359,  2359,  2359,  1572,  1571,     0,  1570,  1574,  1011,  1019,
       0,   457,   460,     0,     0,     0,   476,     0,   520,     0,
       0,     0,  1568,  1556,  2391,  1545,  1548,  1837,  2280,  1038,
       0,  1416,  1498,  1495,     0,  1488,  1490,  1492,     0,  1831,
       0,     0,  2235,  2221,   733,     0,     0,     0,     0,  2222,
    1340,  1338,  1348,     0,  1306,  1335,  1335,     0,  1306,     0,
       0,     0,  1579,  1432,  1581,  1372,     0,  1350,     0,  1439,
    1440,  1437,   883,     0,   819,   775,   776,   788,     0,   788,
     788,     0,     0,   867,     0,   971,     0,   872,   732,   562,
     906,   905,   563,     0,   865,     0,  1431,   440,   864,   888,
     870,  1731,   899,   926,   756,   672,   621,   612,   691,   615,
     614,   658,   629,   626,   676,   674,   644,   676,   676,   651,
     650,   668,   654,   634,   744,   744,   633,   671,   744,   655,
     653,   657,     0,   659,   676,   664,   652,   656,   673,   649,
     646,   670,   691,   628,   627,   630,   669,   744,     0,   662,
     691,   695,   632,   744,   751,     0,     0,   691,   693,  1842,
     132,   137,   148,   149,   839,  2454,     0,  2452,     0,  1013,
    1378,    98,     0,     0,   205,   203,   204,     0,   198,   200,
     195,  2465,     0,  2472,     0,     0,  2470,   427,   429,   437,
     590,   523,     0,     0,     0,     0,  1455,  1183,   689,   687,
     690,   688,   740,   739,   743,     0,   742,   751,     0,  1187,
    1188,  1276,  1267,  1212,     0,  1163,  1236,     0,     0,  1219,
    1195,  1198,  1196,  1202,  1203,  1046,  1046,   582,  2407,  1085,
    1713,  2362,     0,     0,  2358,  2356,     0,  2357,  2355,  2329,
       0,  2284,  2285,  2283,  2270,     0,     0,     0,  1054,   465,
       0,   482,   481,   478,  1443,  1558,  1560,  1566,  1555,     0,
    1417,  1432,   725,  1491,     0,  1048,  2233,  2232,  2234,  2228,
       0,     0,     0,     0,  1322,     0,  1326,  1331,  1327,     0,
    1318,  1316,     0,  1454,  1360,  1361,     0,     0,  1366,  1370,
    1443,  1438,     0,     0,   882,     0,     0,     0,     0,     0,
       0,   912,     0,   925,   869,   892,   914,   695,   983,  1429,
     887,   889,   959,     0,     0,   760,   620,   613,   631,   680,
     675,     0,   680,   680,   640,   658,   635,     0,   744,   648,
     639,   660,   663,   665,   667,   680,     0,   744,   637,   624,
     680,   703,     0,     0,     0,     0,   699,     0,   754,     0,
       0,   706,   608,   696,   698,     0,     0,   661,   744,   617,
     752,   751,   619,   744,   751,   680,     0,   694,   680,     0,
     139,   852,   279,  2456,  1029,     0,  2461,   120,  2469,  2479,
     202,     0,     0,   143,     0,   193,   732,   196,  2391,  1765,
       0,   432,     0,  1438,   817,     0,     0,   750,   748,     0,
       0,  1238,  1240,  1346,   583,  2335,  2334,  2333,  2330,     0,
       0,     0,     0,     0,     0,  2360,  2364,  1569,     0,     0,
       0,   473,     0,   469,   471,     0,   507,   521,  1425,  1438,
       0,  1443,     0,  1496,  1489,  2238,  2237,  2223,  1341,     0,
       0,     0,     0,     0,  1379,  1578,  1356,  1356,  1367,  1351,
    1436,   885,     0,   603,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   911,  1808,   901,   903,   866,     0,
     871,   558,     0,   759,     0,   764,   684,   685,   686,   641,
     681,   683,     0,   643,   611,   636,   666,   642,     0,   638,
     625,   709,   710,   712,   711,   708,  1061,   701,   718,     0,
       0,   713,   714,   715,   707,   697,   705,   700,   616,   618,
     622,   623,   609,     0,   610,  1841,     0,   141,   305,     0,
     291,   277,     0,     0,     0,   281,   150,   153,   151,     0,
     152,   158,     0,   159,   160,   161,   162,   163,   154,   303,
     304,   157,   155,   156,     0,  1857,     0,  1858,  2459,     0,
       0,  2458,   169,   199,     0,     0,   135,   144,  2473,   716,
     430,   428,     0,  2387,   791,     0,   816,     0,   793,   795,
     679,  1161,  2331,  2365,  2368,  2366,  2367,  2369,  2363,     0,
    1755,  1055,     0,   466,   467,     0,   485,     0,  1563,     0,
       0,  1563,  1563,  1563,  1563,   500,   508,   510,     0,  1426,
    1427,     0,  1422,  1424,  1418,  1479,   726,  1768,  2394,  1323,
       0,  1328,     0,  1320,     0,     0,  1364,  1362,   884,     0,
       0,   791,     0,     0,  1810,  1809,   925,     0,   757,     0,
     761,   762,   763,     0,   755,   682,     0,   823,     0,   717,
    1061,   704,   140,     0,   133,     0,     0,   290,   293,     0,
       0,   296,   286,   285,   287,     0,   280,   279,   279,   333,
     284,   330,   329,   322,  2391,     0,     0,     0,  2480,   201,
    1054,   147,     0,   434,   433,     0,  1563,   107,   792,   808,
     807,   797,  1438,     0,     0,   109,   794,   810,   801,   111,
     796,   809,   799,  1575,  1583,     0,   725,     0,   474,   473,
     470,     0,   483,     0,  1563,  1563,     0,     0,     0,     0,
       0,   480,   509,  1563,  1438,     0,  1037,     0,  1776,  1342,
       0,     0,  1380,     0,  1357,     0,     0,     0,     0,   791,
     595,   793,   795,   904,     0,   758,     0,     0,   744,     0,
     744,   702,   142,   306,   317,   320,   312,   292,     0,     0,
       0,   282,   279,     0,   266,   264,   265,   271,   272,   273,
     274,   275,   276,   267,   270,   268,   269,   279,     0,   210,
       0,     0,  2460,     0,  2462,     0,   179,   178,   170,     0,
     279,  2466,     0,  2474,  2391,   806,     0,   798,   815,   818,
       0,   802,   800,     0,     0,  1756,   461,   468,   493,   486,
     489,     0,   518,     0,     0,  1474,  1472,  1473,   514,  1475,
     515,   513,   511,   504,     0,   502,     0,  1423,  1480,     0,
       0,     0,     0,  1769,  1771,     0,  1497,  1325,  1330,  1359,
    1358,  1373,     0,   599,   598,   596,   597,     0,   770,     0,
     769,     0,   766,   765,   645,   824,   647,     0,     0,   279,
     313,     0,   288,     0,     0,     0,     0,   208,   336,     0,
     206,   324,   324,  2463,  2464,   180,  2481,     0,   149,   169,
     435,   805,   811,  1582,  1584,  1782,   493,     0,   491,     0,
     487,   484,   488,   516,   517,     0,   501,     0,   512,     0,
       0,     0,     0,     0,  1770,     0,     0,  1777,  1779,     0,
       0,   890,   772,   773,   771,     0,     0,   314,   320,   310,
     318,   279,     0,     0,   278,   297,   332,   209,     0,   334,
       0,   279,     0,   323,   325,   327,     0,   131,  2475,     0,
    1768,   490,     0,   498,   494,   496,   499,   507,   506,   503,
    1054,  1774,  1775,     0,  1772,     0,     0,  1778,  1365,  1363,
       0,     0,     0,   311,     0,     0,   309,   289,   294,   279,
       0,   279,   221,   220,     0,   212,   260,   331,     0,   211,
    2467,   279,     0,  1776,   492,     0,     0,   505,     0,     0,
    1483,  1485,  1773,  1781,  1780,   768,   767,   315,     0,   279,
       0,   279,     0,   279,     0,     0,     0,     0,     0,   207,
     279,  2476,     0,  1784,   497,   495,  1055,  1481,  1054,     0,
     307,   279,   295,   300,   337,     0,   215,   261,   262,     0,
     218,  2468,  1783,     0,  1788,  1486,  1484,   279,   279,   296,
     299,   335,     0,     0,   213,   214,   226,   225,   217,     0,
       0,     0,  1795,   279,   279,   301,   234,   232,   279,   222,
     230,   224,     0,   231,   263,   219,  1786,  1787,  1785,  1790,
       0,     0,  1792,  1793,     0,  1757,     0,   216,   233,  1794,
    1789,     0,  1796,  1798,     0,   223,  1791,     0,  1054,  1797,
       0,  1055,  1799
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   574,  1381,    57,    58,    59,    60,    61,  1252,
      62,   777,  1189,  1667,  1668,    63,   514,    64,   974,  1439,
    1440,  2761,  2762,  1441,    65,  1941,  3117,  3118,  3119,  1458,
     486,   487,  1854,  1855,   999,  2782,  2748,  3540,  2752,  3687,
    3814,  3726,  1872,  3085,  3541,  3542,  3696,   509,  1939,  1395,
    3838,  1834,  3948,  1835,    66,   605,   972,  1417,  1418,  3103,
    3104,  3355,  3105,  3347,  3348,  3349,  3350,  4091,  3922,  4030,
    4092,  4166,  4202,  4208,  4209,  4134,  4218,  4219,  4220,  4206,
     844,  4221,    67,   537,   538,   846,  1281,  2184,  1282,    68,
    4135,  4204,  3923,  3924,  3821,  3925,  3699,  3926,  3825,  3927,
    3702,  3928,  3929,  3930,  3931,  4083,  3932,  3820,  4127,  3919,
    3920,  4129,  4183,  4200,  3933,  3709,  3815,  4017,  3710,  3816,
    4078,  3915,  4079,  4122,  4179,  3916,  4018,  4125,  4021,  3934,
    3940,  4093,  3935,  3941,  3936,  3714,  3832,  3939,  3830,  3938,
    4131,  4088,  2409,  2781,   592,   593,   616,  1931,   594,   988,
     947,  1397,  1867,  1868,  2288,  2289,  2391,  2392,  2393,  1859,
    1860,  1861,  1919,  1920,  1921,  1841,  1842,  1843,  1401,  1838,
    1839,   595,   948,   958,  1862,  1863,  1864,  2397,  1923,  1924,
    1925,  1926,  1865,  1659,  1866,  2664,  2415,  2792,  3558,  3114,
    3733,  3954,  2793,  2794,  2736,  3047,  2716,    69,   526,   824,
    1249,  2158,  1250,  2553,  2554,  2555,  1706,  1707,  3419,  1711,
    2157,  3591,  3869,  3592,  3593,  2557,  3753,  2561,  2916,  2917,
    3185,  3421,  3596,  3971,  3871,  4051,  3969,  4047,  3970,  4049,
    4146,  4104,  4105,  3881,  3984,  3985,  4055,  4107,  3765,  3766,
    3767,  2177,  2566,  3424,  3362,  1913,  1387,  1388,   488,   489,
     490,   613,  2416,  2337,  2417,  2418,  3062,  2339,  2340,  2527,
    1315,  3059,  3036,  3395,  2788,  2795,  2796,  2797,  2798,  2799,
    3072,  3003,  2677,  2678,  2741,  3075,  3556,  3491,  3506,  3322,
    3323,  3324,  3325,  3326,  3327,  3328,  2825,  2826,  3649,  3650,
    3651,  2821,  2822,  3538,  3522,  3523,  3524,  3557,  3667,  3134,
    2607,  2608,  3603,  2616,  2617,  2655,  2960,  2656,  1391,  3135,
    3136,  3137,  3532,  3525,  3074,  3485,  3642,  3645,  3804,  4012,
    2679,  3004,  2680,  3007,   903,   631,  2681,  2682,  1942,  1943,
    3847,  3855,  3859,  3848,  3860,  3856,  3849,  3850,  3851,  3862,
    3858,  2806,  3562,  3563,  2996,  2881,  3806,    70,  1870,   941,
     950,   946,   964,   600,  1406,  1873,  2352,  3334,   582,  2341,
    3478,  3255,  3482,   124,  2342,  3016,  2343,  3242,  3464,  2344,
    3269,  3480,  3639,  3017,  3018,  2345,  2346,  2347,  3254,  3263,
    3796,  2683,   598,  2102,  3070,  2723,    71,  1363,  1358,    72,
     915,   910,   911,  1361,  1362,  1800,  2233,    73,   608,  1445,
      74,  1260,  2169,  2170,  2171,    75,   965,    76,    77,   609,
    1452,  1453,  1454,    78,  1245,   131,    79,   832,  1255,  1257,
    1258,    80,   604,   966,   967,   968,   969,  1878,    81,  1698,
    2134,  2135,  2136,  2137,  1414,  2354,  1415,  1416,  1887,  2909,
      82,    83,   571,  2058,   543,   853,   544,   545,  1740,  2197,
    3396,   864,   865,   866,  2592,  1293,  1294,  1295,  2202,  2597,
    1044,   742,   743,   744,   745,  1137,  1138,  3526,   746,  1147,
    1626,   747,   748,   749,   750,   751,   752,  1653,  2849,  2850,
    3151,  2088,  2089,  2090,   753,  1976,  2836,  1989,   754,  1130,
    1611,  1543,  3143,  2841,  1488,  1959,  2450,  2524,  2052,  1069,
    1070,  1034,  1966,  1494,  1807,  1808,  1809,  1810,  1811,  3230,
    3229,  3231,  3609,  3445,  3611,  3449,  2244,  1812,  1813,  2630,
    3443,  3778,  2053,  2054,  2055,  3161,  2631,  2976,  2649,  2650,
    3460,  2235,  1814,  2637,  3786,  3457,  3458,  3897,  3896,  3459,
    3235,  3236,  2989,  2990,  2757,  2758,  2759,  3613,  1534,  1535,
    1541,  1232,  1233,  1489,  2132,  2542,  3431,  3600,  2079,  3201,
    3598,  3772,  2348,  3042,  3043,  2199,  2200,  2653,  2993,  3241,
    1318,  3397,  2544,  1773,  1774,  3123,  4207,  2665,  2367,  3978,
    2154,  2155,  3886,  4059,  4149,  4150,  4151,  2942,  2943,  3205,
    3206,  2201,  2589,  2944,  3432,  3777,    84,   493,    85,  1665,
    2529,  1185,  2108,   976,  1475,  1476,   765,   506,    86,   515,
    2133,    87,   533,  1724,   816,   836,  1263,  1264,  2178,  2567,
    2574,  2179,  2579,  3194,  2569,  2921,  2922,  2097,  2098,  2570,
    2924,  3191,  3175,  3176,  2904,  3416,    88,   559,  2987,  2644,
    2645,  3863,  3864,   837,    89,   492,  1021,  1948,  1481,  1947,
    1022,  1023,  1950,   637,   638,    90,   917,   556,  1340,  1341,
    1342,  1789,    91,   548,   904,  2620,  2626,  1768,   828,  1181,
    1322,   907,  1323,  1754,  2217,  1304,    92,   937,   936,    93,
     578,  1383,    94,   778,  1205,  1677,  2532,  2892,  1206,  1207,
    2109,    95,   534,   841,   842,  1266,  1726,    96,   528,   829,
    1717,    97,   519,    98,    99,   820,  2910,  3866,  4045,   523,
    1700,  1241,  3115,  3888,  3993,  3994,  3996,  4067,  4068,  4100,
    4194,  4228,  4212,  4231,  4232,  4235,  4242,  4243,   756,   924,
     757,  3634,   758,   759,  2575,  2576,  2994,   760,  2577,   761,
    2997,   977,  1478,   512,   469,   589,   925,  2550,   763,  3716,
     944,   992,   471,   472,   100,   868,   547,  1297,  1298,  1299,
    1749,  1750,   908,  2067,  1751,  1752,  2214,  2209,  3213,  2966,
    2958,   101,   821,   476,  1243,  1244,  2143,   102,   558,   103,
    1234,  1694,  1695,  2129,  2541,  2130,   104,   849,   105,   803,
    1688,   804,  1210,   805,   806,  1224,  1218,  1227,  1221,  3579,
    3408,  3409,  2117,  1184,   993,   994,  1680,  2111,  2112,  3170,
    3411,  2895,  3585,  3586,   106,   132,   479,   611,   983,  1287,
     107,   108,   109,   110,  1290,  1376,  2193,  1377,  2059,  1378,
    1379,  1821,  1738,  1607,  1608,  2879,  1127,  1128,  2062,  2497,
    2498,   867,   620,  1009,  1001,   125,   126,   127,   623,   624,
     128,   962,   963,  2353,  2754,  3087,  3337,  3338,  3546,  3721,
    1003,  3552,  4037,  4170,  1004,  1005,  2783,  3554,  3842,  4039,
    4141,  1006,  2406,  3100,  3722,  3950,   111,   926,   568,  1374,
    1369,  1371,  1817,  2251,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3466
static const int yypact[] =
{
    4304,  2271,    69, -3466,   -37,   690, 42489,   632,  -138,  -138,
     451,  3435, -3466, -3466, -3466, -3466, -3466,  3832, -3466, 42489,
      69, -3466, 23027, -3466, -3466,   672,   827,    64,  -138,    69,
   -3466, 42489, -3466,   689,  1349,    69, -3466, -3466, 37777, -3466,
     451, 42489, -3466,   760, -3466, 37777,  1021,  1156,   688,   699,
     864, -3466, -3466, 42489,   904,  -140,  1277,  1088, -3466, -3466,
     963, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, 23620, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  1220, 42489,  1224, 42489,  1336, -3466,
   -3466, 42489, 36010, 42489,  1198,  1389, -3466, -3466,  1487, -3466,
   -3466,  -138,   451, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
    1006, -3466, -3466,  1104, -3466, -3466, -3466, -3466, -3466,  1684,
    1442,  1537, 36010, 42489, -3466, -3466,   230, -3466,  1228, -3466,
    1250,   772,  1187, 10989,  1536,  1536,  1536,  1583,  1536,  1536,
   42489, -3466,  1536, -3466,  1536,  1566,  -138, -3466, -3466,  3653,
   42489,  1458,   138,   -81, 36010,  1362, 42489, -3466, -3466, 10989,
   -3466,  1589, -3466, -3466, -3466,  -138,  1773,  1660,   231, 42489,
   -3466, -3466,  -138,   932,   939,  1252, -3466, -3466,  1387, -3466,
    4013,   155, -3466, -3466, -3466,  2128, -3466, -3466,  5528,  1387,
   -3466, -3466, -3466,  1275, -3466, -3466, -3466, 42489,  -138,  1592,
   -3466, -3466,   215,   215,   215, -3466,   215, -3466,   215, -3466,
    -140,  1266, -3466, -3466,  1270, 42489,   510,   522, -3466, -3466,
    1310,   965, -3466,  1358, 33065, -3466, 42489, -3466, -3466, -3466,
   -3466,  1578, -3466, -3466, -3466,  1922, -3466, -3466,  1429, 42489,
    1448, -3466, -3466, -3466, 23027,  1348, 42489, -3466, 23027, 23027,
     929,    12,  1628, 42489, 42489,  1778, -3466,  1955, 33065,  1544,
   -3466,   495,  1139,  1487,  1962, -3466,  1442, -3466, -3466, -3466,
   -3466,  1771,  1782,  1784, -3466, -3466, -3466, 38366,  1187,  1376,
    1417,  1423, 15259, -3466,  1433,  1436,  1457, 10989,  1460,  1464,
    1469,  1482,  1497,  1503,  1516,  1519,  1526,  1526,  1528,  1538,
    1553,  1555,   844,  1562, -3466,  1568,  1580,  1588, -3466, -3466,
    1591,  1594,  1603, -3466,  1617,  1621,  1624, 11599,  1629,  1635,
   -3466, 20058,  1646,  1656,  1696,  1721,  1724,  1741,  1752,  1754,
    1756, -3466, -3466, 10989,  1767, -3466, -3466,  1790, -3466,  1793,
    1797,  1809,  1813,  1816,  1820,  1823,  1848,  1850,  1852,  1864,
    1866,  1872,  1874,  1882,  1898, -3466,  1071,  1906,  1915,  1584,
    1933, -3466,  1939, -3466,   270,  1944,  1526,  1526,  1526,  1953,
    1957,  1961,  1963,  1983, 15259, 15259, 15259, 10989, -3466, 42489,
   -3466, 42489,  1910,  3126, -3466,  2871, 15259,   175, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466,  1412,  1556, -3466, -3466, -3466,
   -3466, -3466,  1985,  1470,  1930, 42489, 42489, 42489, 42489, 42489,
   36010,  1597, 42489, 33065, -3466, 42489,  1536,  1713,  2966,  1762,
    1749,  1791, -3466, -3466, -3466, -3466, -3466,  1967, -3466, -3466,
    1877, -3466,  1841, -3466, -3466,   378, -3466,    80, -3466, -3466,
   -3466, -3466, -3466, -3466,  2027,  1777, -3466, -3466,   112, -3466,
   -3466, 42489, -3466, -3466, -3466, -3466,  1198,  2110,  1910,  2547,
     209, 23027, -3466,  1764, -3466,  -187, -3466, -3466,  2336, -3466,
   -3466, 33065, 23027, -3466, -3466, -3466, 20651, -3466, -3466,  2557,
   -3466,  2008, -3466, -3466,  1556,  3682, -3466,  1762,  2275, -3466,
    2278,  2188,    12,  2090, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  2048,  2128, -3466, -3466, -3466, -3466,
    2487, -3466,  2196,   -20, -3466,  2052,   281,   -20, 33654,  2413,
     183, -3466,   179, -3466,  2494, -3466, -3466, -3466, -3466,  2187,
    2170, -3466, -3466,   320,  2262, -3466,  2530, -3466,   684, -3466,
    2198,  2413,   -20,   183, -3466,  2430,  2548,   465,  -141, -3466,
   -3466,     0, -3466, -3466,  2617, -3466, -3466, 23027, -3466, -3466,
    1198, -3466, -3466, -3466,  2095, -3466,  2359,  2206, -3466, -3466,
      28, -3466,  2111,   828,  2573, -3466,   583, 34243, -3466, -3466,
   -3466,  2604,  2620,  1526,  2124, -3466, -3466, -3466,  2742, -3466,
   -3466,  2152,  2655,  2655,  2655,  2758, -3466, -3466, -3466, 23027,
   -3466,  2316,  2190, -3466,  1448, 23027,  2537,  2161, -3466, -3466,
    2399, 10989, -3466, -3466,  4390,    15, -3466, -3466,   331, -3466,
    2715,  2361, -3466, -3466, -3466, -3466,  2613, -3466, -3466,  2742,
    2673,  2655,  2569,  2173, -3466, -3466, -3466, -3466, -3466, -3466,
     235, -3466, -3466, -3466, -3466, -3466, -3466, -3466,  1483, -3466,
   -3466, -3466, -3466, -3466,  1448, -3466, 23027, 42489, 42489, 42489,
   23027, -3466,  2174, -3466,  2169, -3466, 10989, 10989,   295,  2720,
    2779,  2779,  2779,  1910,  2212, 10989, 10989, 10989, 10989, 10989,
   10989, 10989,   310,  2199, -3466, -3466,  8549, -3466,  2203, 10989,
   10989,  2273, 10989,  1556, 10989, 24213, -3466,  3099, 10989,   326,
    2678, 10989, 10989, 10989, 10989,  2641, 10989, 10989, 24213,  2803,
    2207, -3466,  2200,   313, 10989, 10989,   978, 10989, 10989, 10989,
   10989, 10989, -3466,  8549, -3466, 10989, 10989, 10989, 10989, 15259,
   10989, 10989, 10989, 10989, 10989, 10989,  2779,  2779, 10989, 10989,
    1223,  8549, -3466, 10989,  1556,  2394,  2394, 10989,  1556,  7329,
   10989, -3466, -3466, -3466,  2217, -3466, -3466, -3466, 24213,  2779,
    2779, 10989, 10989,  2720,  2720,  2720,   172,  2218,   780, 10989,
   25399,  2205, -3466, -3466, -3466, -3466, 10989, 10989, 10989, -3466,
   15259, -3466, -3466,  2007, -3466, -3466, -3466, 12209, 15259, 15259,
    2220, 15259, 15259, 15259, 15259, 15259,  2575, 15259, 15259, 15869,
   16479, 15259, 15259, 15259, 15259,   811,  2720, 36010, 15259, 10989,
   -3466, -3466, 42489, -3466, -3466, -3466,  2223,  1597, -3466, -3466,
     -67,  2680, -3466, -3466,  2224, 23027,  2484, -3466,  2225, -3466,
    2576, -3466,  2577,  2579,  2589, -3466, -3466, -3466, -3466,  2792,
    2593, -3466, -3466,  2595, -3466, -3466,  2255, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  2353, -3466, -3466, -3466,  2261, -3466,
   33065,  2261, -3466, -3466,  2261, -3466, -3466,  2261,    29,  4630,
   -3466, -3466, 42489, -3466, 43078, -3466, 20651,   -37, -3466, -3466,
   -3466,  2609,   119,  2260, -3466, 23027, -3466,    85,    85,  2497,
    1340, 36010, -3466, -3466,   187,  2264,  2340,  2268, -3466,  2346,
   23027, 23027, -3466, -3466, -3466, -3466,  2868,   939, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,  2277,  2728,  2279, 33065,   750, -3466, 42489, -3466,  1353,
   -3466, -3466, -3466,  2280, -3466, 10989, -3466,  2281, -3466,  1261,
    2661, -3466,   -37, 10989, -3466,  2293,  1442, 42489, 42489, 42489,
   23027, 42489, 23027, -3466,    49,    49, -3466, 31298, -3466, -3466,
   -3466, -3466,   -20, 42489, 42489,   -20, 33065, -3466,   183, 42489,
     -20, -3466,  2664,  2387, -3466, -3466, -3466,  2726, -3466, -3466,
    2719,  2295, -3466,  2661, -3466, -3466,   183, -3466, -3466, 23027,
   -3466, -3466,   183, -3466,   183,   183,   -20,   -20,  2343, -3466,
   -3466,  2296, -3466,  2343,  2435, -3466,  1196,   215,  2532, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,    55,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466,   159, -3466, -3466,
   -3466,  1689,  2780, -3466, 36010,  2171,   -95,  1043,  2171,  1980,
     -37,  1063, -3466,  1063, -3466, -3466,  2560,  1115, 23027, -3466,
    2303, 38955, 23027, -3466, -3466, -3466,   151,  2305,  2306,  1910,
    2760,  2766,  2767,  2768,  2769,  2770,  2774,  2777,  2778,  2781,
    2785,  2786,  2788,  2789,  2791,  2793,  2794,  2796,  2801,  2325,
   -3466, -3466, -3466, -3466, 23027, -3466, -3466, -3466, -3466,  2385,
   -3466, -3466, -3466, -3466,  1605, -3466, -3466, -3466,   161,  1779,
    2368,  2398,   105, 33065,  2783, 42489, 42489,  1442, 42489, 42489,
   -3466, -3466, -3466, -3466, -3466,  2355, -3466, -3466, -3466,  1233,
   42489,  2782, 27764, -3466,   321,   323, -3466,  2779,  2363, -3466,
    2364,  2366,  2370, 10989,    78,   352,   392,  1420,  1397,   884,
     384,   190, -3466,  2372,  2365, -3466,   950, -3466,   388,   422,
     973,   982,  2380,  2381, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  2807, -3466,  1407, -3466, -3466, -3466,
   -3466,  2383, -3466, -3466,   993,   444,   498,   220,  2392,   502,
    1439,  1446,  2388, 24213, 42489,  2779,  2389,  1002,  1010,  2779,
    2400,   542,  1041,  1505,  1521,  1557,  1082,  1092,  1111,   544,
    1570,  2741,  1138,   548,   590,   612,   682,  1147,  2401,  2403,
     741,   194,  2779,  2404,  1153,   229,  2405,  2406,  1192,  9159,
    9769, 10379,   909,   774, -3466,  2408, -3466,  2200,  2411,  2414,
     260,  1225, -3466, 10989, -3466, -3466,   923,    62,  2442,   141,
    1000, -3466,  2552, 42489,  1978,   182, -3466, -3466, -3466, -3466,
   -3466, -3466,   799, -3466,  2416, -3466,  2418,  1695,  2421, 10989,
     166,  2421,  2841,   970,   970, 15259,  2953,  2970, 11599,   712,
   11599,   712,  2421,  2421,  2421, -3466, 15259,  2423, 15259, 15259,
   -3466,  2720,  1910,  2424,  1008, 42489,   -67, -3466, -3466, -3466,
   -3466,    77, 33065,   169, 23027, 23027, 36010,  2426, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  4446, 23027, -3466, 42489,
   -3466,  2499, -3466, -3466, -3466, 21244, 21244, -3466, 21244, -3466,
   -3466,   200,   242,  2633,  2448, -3466, -3466, -3466, 23027, -3466,
    2817,   -42, 23027,  2303,  2432, -3466, -3466, -3466, -3466, -3466,
    1320,  2534, -3466,  2434, -3466, 10989,   -37, -3466, 33065, 33065,
   23027, 23027,    57, -3466,  1573, -3466, -3466, -3466,  3682, 17089,
    2848,  2861, 21244, 21244, 21244, -3466, -3466, -3466, -3466, -3466,
    1200,  1910, -3466,  2433, -3466, -3466, -3466, -3466, -3466, 39544,
     103, -3466, -3466,   -37,  2865, -3466,  1910,  2445, 42489, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,   288, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,   -20, -3466, -3466, -3466, -3466, -3466,  2652,  2413,
    2262,  2865,   -20,   183, 23027,   -20,   -20, -3466, -3466,  1842,
   -3466,     0, -3466, -3466, -3466, -3466, 42489,  2211,  2594, -3466,
    2447, -3466, -3466, 23027, -3466,  2449, -3466,  2875,  3013,  2413,
   -3466, -3466, -3466,    77,    77,  2736, -3466,   -37,  2578,  2581,
    2583,  2585,  2587,  2614, -3466, -3466,   -37,   -37, -3466, -3466,
      77, -3466,  1142, -3466, -3466, -3466, -3466,   -37,   -37,   -37,
     -37,  1618,   -37,   -37,  1609, -3466, -3466,    77,    77, -3466,
    1272, -3466, -3466, -3466, -3466, -3466, -3466, -3466,   225, -3466,
    3725,   124, -3466,  2643, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  2471, -3466, -3466, 10989,
    2472,   -37,  1618,   -37,   -37,  1361,   -37,  1618,   -37,   -37,
     -37,   -37,   -37,  1618,  1618,   -37,  1386,   -37,  1618,  4390,
   -3466, -3466, -3466, -3466,   164,    77,    77,    77,    77, -3466,
    1998, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, 36010,
    2815,  2053,   506, 36010, -3466, 42489, -3466,   894, 42489,  2475,
    -144,  4679,  -156,  2734,  2738,  2744, 42489,  2521,  2448, 27764,
   -3466, -3466,  1196, -3466,  2477, 12819, -3466,  2485, -3466, 10989,
   -3466, -3466, -3466,  1217, 10989, 10989,  2948,  1958, -3466, 34832,
   -3466, -3466, -3466, 10989, 34832,  1958, 10989, -3466,  2490, -3466,
    2872,  2873, -3466, -3466, -3466, -3466, 10989, -3466, 10989, 10989,
   -3466, 10989, 10989, 10989, 10989, 10989, -3466, -3466, 15259, -3466,
    2492,  2501, -3466, -3466, -3466,  2502, -3466, 10989, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, 10989, -3466, 10989, -3466, 10989,
   10989, 10989, 10989, -3466, -3466, -3466, 13429, 10989, 10989,  2504,
   -3466, -3466, -3466, 10989, 10989, 10989, -3466, 10989,  1576, 10989,
    1774, 10989,  1904, 10989, -3466, 10989, -3466, -3466, -3466, -3466,
   10989, -3466,  1626, -3466, -3466,  2317, -3466,   923,  2507, -3466,
   -3466,  1353, -3466, -3466,  2505,  2506,  2508, 36010, 10989, -3466,
   -3466, -3466, -3466, -3466, -3466, 15259,   286,  2511, 15259, -3466,
    2841,  2641,  2641,  1718, 10989,   166,  2841, 10989,  2516,  2493,
   -3466, 10989, 42489, -3466, -3466, -3466, -3466, -3466, 36010, -3466,
   -3466, -3466, -3466, -3466,   169, -3466,  2225, -3466,  2303, -3466,
   -3466,  1639, -3466, 33065,  2512, -3466,  2513,  2582,  2592,  2596,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  2413,  1573, -3466,  2522, -3466, -3466,  2399,  2612,
    2542,  2877, -3466, -3466, -3466, 42489, 15259, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  3092,  2533,  2535, 42489,
    1910, -3466,  2607, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,   711, -3466, -3466,  2540,  2540, 18870, -3466, -3466, -3466,
    2997,   885,   885,   885, -3466, -3466, -3466, -3466,  2799, 33065,
    2968,  2976,  2980,   583, -3466,   122, -3466,  1212,  2925,  2413,
   -3466,  2981, 36599, -3466, 28353, -3466,  2551,  2931,  2553,    77,
   30709,  1048, 25991, 31887, -3466, -3466,  1361, -3466,   264, -3466,
   31298, 31298, -3466,  2824, -3466, -3466, -3466, -3466,  2448,   183,
   -3466, -3466, -3466,  2564, -3466, -3466,   947,  2936,  2937, -3466,
    2813,  1119,  2813,   947,   947, 24213,  1196,  2210, -3466,  1618,
    2869, -3466, -3466, -3466, 35421, 32476, -3466, -3466, -3466, -3466,
    3072, -3466,  3074,  1141, -3466, -3466,  1211,  1043, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466,  1980,  1211,  1211,  1063, -3466,   130, -3466,
   -3466, -3466, -3466,  2422,  3110,  2808,    77,    77,  3110,    77,
    2810,  2811,    77,    77,  2653,  3058,    77,  2950,  2679,  1838,
    2955,    77, -3466,  2687,  3073,    77,    77,    77,    77,  3110,
    2831,  3160,    77, -3466,    77,  2833,  2845,   146,  2844,  2854,
      77,   198, 42489,    77,  2855,    77, -3466, -3466,  4143, -3466,
   -3466, -3466, -3466, -3466, -3466,  -134, 21839, -3466, -3466,    20,
     278,  2689,  1304,  2624,  2626, 40133,  1910,  1618, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,   -37,  1320,  1211,  1211,  1779, -3466,  2883,  3045,
      77, -3466,  1897, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  2722, -3466,  3227,  2812,  2645, -3466, -3466,    54,
   -3466, -3466,  1146, 23027, 17684, -3466,  2878, -3466,  2858,   351,
     351, -3466, 23027, 23027, 23027, -3466,  2635,  1196,  2887,  1246,
    2448,  2654, -3466, 11599,  1235, -3466,  1910, 10989,  1910,  1776,
   -3466,  2651,  2651, -3466, -3466,  2656,  2651,  3029, -3466,  3031,
    2657, -3466,  2659, -3466,  1237,  2662,  2665,  1412, -3466, 10989,
   10989,  1242,  1264,   -93,   818,   823,   305, -3466,  1276,  2926,
   -3466, -3466,  1306,  1324,  1344,  1363,   825,  1374,  1673, 11599,
    1379,   386,   325, -3466,  1394,   834,   847,  1399, 10989,  1404,
   10989,  1414, 10989,  1474,  1478,  1489, -3466,  2048,  2317, -3466,
   -3466,  2666, -3466, -3466, -3466, -3466, -3466,  2660,  1910,  2668,
   -3466, -3466, 10989, -3466,   175, -3466, -3466, 15259,   347,  2670,
   -3466,  1910, -3466, -3466,  2671,  1412, -3466, -3466, -3466, -3466,
   -3466, -3466,  2684, -3466, 42489,   692,  2688, 28942, 33065, 33065,
   33065,  2675, 10989, -3466, -3466,  2921, 23027, -3466,  3076, -3466,
   -3466, -3466, -3466,  2681,  2683, -3466, -3466, -3466,  2841,  3037,
    2919, -3466, -3466,  2690, 33065, -3466,  2128, 24213, -3466,  2686,
   -3466,  2686,  1239,  2691,  1676, -3466, -3466, -3466,  2682,  2090,
   17089,  3116,  2173, 33065, 33065, 33065, -3466,  2448,  2448,   831,
    2743,  3070, -3466, -3466, -3466, -3466, 40722, -3466, -3466, -3466,
   -3466,  1036, 42489,  3059, 42489,  7939, -3466, -3466,  3241, 10989,
   33065,   -57,  1000,    77, -3466, -3466, -3466, -3466, -3466, -3466,
    2413, -3466, -3466, -3466, -3466, -3466,  2413, -3466,   -20,  1842,
     918,    62, -3466,  1964, -3466, -3466, -3466,  3077,   947,  2813,
    2813,  3078,  2961,   -56,  2704, -3466,    77, -3466, -3466, -3466,
    2128, -3466, -3466, 10989, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,   225, -3466, -3466, 24806,    69, -3466,   315, -3466, 24806,
   -3466,   151,   151, -3466, 24806,    69,  1361,  1618, 24806,  1618,
   41311,    69,   -37,   -37,  2250,    77,  1618, -3466, -3466,  3081,
   42489,  3083, 24806, 24806, -3466, 36010, -3466,    77,  1202,  1618,
    1361,  1361, 24806,    69, 24213,  1080, -3466,   -37,    69, -3466,
   -3466, -3466, -3466, 23027,    69,    69,  2191, -3466, -3466, -3466,
    1618, 41311, -3466, -3466,  5519, -3466, -3466, -3466, 18277, 42489,
     289,   186, -3466,  2700,  2932, -3466, 10989, 10989,  2969, 42489,
    2975, -3466,  3244, 42489,  3309, 41311, -3466,  2721, -3466,  2723,
   -3466,  1705, -3466, -3466, -3466, -3466, -3466, -3466, -3466,  2729,
   42489,  1211,  2053, -3466, -3466,   -37,  1146, -3466, -3466, -3466,
   -3466,  2979,  2999, 42489, -3466, -3466, -3466, -3466,  2876, -3466,
   23027,  3301, -3466,  2900, -3466,  2745,  2747, -3466, -3466, -3466,
     236,  3776, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, 27764,  2448,  3107, -3466, -3466,  2641, -3466,  1910, 10989,
     951, -3466, -3466,   180,  1095, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  2746,  2641,  2641, -3466,
   -3466,  2909, -3466, 10989, 10989, -3466, 10989, -3466,   945,  2757,
    2784, -3466, -3466, -3466, -3466, 10989, -3466, -3466,  2641, -3466,
   10989, -3466, -3466, 10989, -3466, 10989, 10989, -3466,  1508, -3466,
    1517, -3466,  1530, -3466, -3466, -3466,  2280, -3466, -3466,   780,
   42489, -3466, -3466,  1730, -3466, -3466, 10989, -3466, 36599, -3466,
   -3466,  2963, -3466, -3466,  3173, -3466, -3466, -3466,  -139,  -139,
    -139, 14039,  1910,  3230, -3466, -3466, -3466,  3076,  3120, -3466,
     140, -3466, 42489,  2772,  1369, -3466,  1763, -3466, -3466, -3466,
    2048,  2765, -3466,    77, 14039,  2540,  2900, -3466, -3466,  1239,
   24213, 28353, -3466, -3466, 33065,  2173,  2173,  2173,  2413,  3179,
    2612,  2612, -3466, 26583, -3466, -3466,  2915, -3466, -3466, 29531,
   -3466,  1230, -3466, -3466, 15259,  1568, -3466,  1910, -3466, 35421,
   -3466,  1910,    77,  2771,  2775, -3466, -3466, 41900, 10989, -3466,
   -3466, -3466, -3466,  1353,  2608, -3466,  1196, -3466,   947, -3466,
    3142,  3144,   947, -3466, -3466, -3466, 24213,  2448, 14039, -3466,
     861,  2048,  1910,  2776,  1051, -3466, -3466, -3466, -3466,  2787,
    3145,  3146,   151, -3466, 24806, -3466, -3466, 24806, 24806,    89,
   41311, -3466, -3466, -3466, -3466, -3466, -3466,  2795, -3466, -3466,
    1320, -3466, -3466, 32476,   -37, -3466, 24806,  2795, -3466, -3466,
     178, -3466,   -37, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, 41311,  2797, -3466,  1051, -3466, -3466,  1773, -3466, 41311,
   -3466, -3466, 41311, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  2806,  2452,  1734, -3466,  2790, -3466, 42489, -3466,
   -3466, 23027, -3466, -3466, -3466,  5428, 42489, -3466,  1910,  2641,
    3305, -3466, -3466,  2916,   -37,  3254, -3466,  1804, -3466,  2800,
   -3466, 40133, -3466,  1618,  1980, -3466, -3466, -3466, -3466,  2918,
     773, -3466,  2949,  2814,  2805, -3466, -3466,   -37,  2816,  2818,
    4143, 18277, -3466, -3466, -3466,  3376, -3466,  2820,  2821,  2823,
    2477, -3466, 31298, -3466,   983,  1910,  2827,  2830,  2840,  2842,
    3366,   153, -3466,  3367, 34832, -3466, -3466, -3466,  1827, -3466,
    2843,  2846,   215,  2847,  1548,   859,  1832,  3087,  3159, -3466,
    3021, -3466,  1615,  1174,  1636,  1651,  1672,  1678, -3466, -3466,
   -3466,   911,    62, -3466, -3466,  1835, -3466,  3156,  3063,    87,
    2838,  2838,  2838,  1568,  1910,  1837, -3466, -3466, -3466, -3466,
    3196, -3466, -3466,  2825,  2849, 42489, -3466,  2919,  2280, 24213,
   14039,  2851,  2822, -3466,   828, -3466, -3466,  2834,  2173, -3466,
    3405,  3252, -3466, -3466, 36010,  2853, -3466, -3466,  3149, -3466,
     104,  3054, -3466, -3466, -3466,   -57,  2942,  2943,    77,  1910,
   -3466, -3466,  2447,  2015,  2894,   947,   947,  2396,  2911, 10989,
   10989,  2874, -3466,  2887, -3466, -3466,   917,  2280, 10989, -3466,
   -3466, -3466,   519, 10989, 24806, -3466, -3466, -3466,  2879, -3466,
   -3466,  3357,  3361, -3466, 24806,  1605, 42489, -3466,  3241, -3466,
   -3466, -3466, -3466,  5428, -3466, 24213, -3466, -3466, -3466, 42489,
   -3466, 23027, -3466, -3466,  2880, -3466,  2651,  2651,  2651, -3466,
   -3466, -3466, -3466, -3466,  2656,  3100, -3466,  2656,  2656, -3466,
   -3466, -3466, -3466, -3466,   180,   314, -3466, -3466,   180, -3466,
   -3466, -3466,   145,   889,  2656, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  2651, -3466, -3466, -3466, -3466,   180,  2651, -3466,
    2651,  2131, -3466,   284,    99,  2651,  2651,  2651,  2882,  2870,
   -3466, -3466, -3466, -3466, -3466, -3466, 42489, -3466,   996, -3466,
   -3466, -3466,  1839,   -37, -3466, -3466, -3466,  2884,  2881, -3466,
   -3466, -3466,   278, -3466, 42489,  5428, -3466, -3466, -3466,  2878,
   -3466, -3466,  1101, 42489, 42489, 42489, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, 34832, -3466,  3457,  3148, -3466,
   -3466, -3466, -3466, -3466, 10989, -3466, -3466,  3182,  3332, -3466,
   -3466, -3466, -3466, -3466, -3466,  1212,  1212, -3466, -3466, -3466,
   -3466, -3466,  2977,  2978, -3466, -3466,  2982, -3466, -3466,   109,
    2083, -3466, -3466, -3466, -3466, 14039,  3257,  2985, -3466, -3466,
   42489,  2933, -3466, -3466,   911, -3466, -3466, -3466, -3466, 10989,
   -3466,  2887,  2250, -3466, 26583, -3466, -3466, -3466, -3466, -3466,
    2896,  2898,  7939,   780, -3466,  2944, -3466, -3466, -3466,  2945,
    1910,  1910, 42489,  3107, -3466, -3466,   151,   151, -3466,   917,
     911,  1051,  1320,  2919, -3466,  1682,  2901,  2902, 42489,  2905,
    2906, -3466,  3627,   289, -3466, -3466, -3466,  2131,    69, -3466,
   -3466,  2795,   711,  2907, 42489,  3222, -3466, -3466, -3466,   598,
   -3466,  2910,   598,   598, -3466,  2196, -3466,  2946,   180, -3466,
   -3466,  2956, -3466, -3466, -3466,   598,  2912,   180, -3466, -3466,
     598, -3466, 36010,  1554,   -37,  2993, -3466,  2958, -3466,  3414,
     171,  3294, -3466,  2131, -3466,  3295,  3198, -3466,   180, -3466,
   -3466,  3457, -3466,   180,  3457,   598,  3195, -3466,   598, 42489,
    3050, -3466, 48379, -3466, -3466,  -140,  2959, -3466, -3466, -3466,
    1279, 42489, 23027,  2969,  3115, -3466,  3241, -3466,   828,   236,
    2900, -3466,  1854,  1051,  2938,  1858,  1883, -3466, -3466,  2951,
    1693, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,   373,
    3193,  1618,  1618,  1618,  1618,  2083, -3466, -3466,  3000, 23027,
   15259,  3056,  1894, -3466, -3466,  1017,  2739, -3466,  1472,  1051,
   10989,  2413, 32476, -3466, -3466, -3466, -3466, -3466, -3466, 10989,
    2957, 10989,  2960,  1900, -3466, -3466,  3383,  3383, -3466, -3466,
   -3466, -3466,  1909, -3466, 42489, 42489,  1917, 42489, 42489,   885,
     885,   885,  1386,  1386, -3466, -3466, -3466, -3466, -3466,  3339,
   -3466, -3466,  1941, -3466,   902,  3218, -3466, -3466, -3466, -3466,
     598, -3466,   215, -3466, -3466, -3466, -3466, -3466,   215, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  1526, -3466, -3466,  3238,
    3008, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466,  2971, -3466, -3466, 10989,  3432,  3001, 42489,
     113, -3466, 49557, 49557, 42489, -3466, -3466, -3466, -3466,  4889,
   -3466, -3466,   678, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  3551, -3466,  2987, -3466, -3466,  2990,
     226, -3466, -3466, -3466,  5428,  3413,  1304, -3466, -3466, -3466,
   -3466, -3466,  2998,  2090,   742, 42489, -3466,  3256,   143,   224,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, 24213,
   -3466, -3466,  1320, -3466, -3466, 42489, -3466,  3080,    77,  3477,
    3479,    77,    77,    77,    77,  3003,  2739, -3466,  3463, -3466,
   -3466, 10989, -3466, -3466,  1910,  3228, -3466,  3563,    62,  1910,
   42489,  1910, 42489, -3466, 42489,   937, -3466, -3466, -3466,  1945,
    1947,   742,  1949,  1965, -3466, -3466,   289,  3039, -3466, 42489,
   -3466, -3466, -3466,   241, -3466, -3466,  1973, -3466,  2001, -3466,
    1526, -3466,  1910, 10989, -3466, 10989,  3065, -3466, -3466,  3466,
   42489, -3466, -3466, -3466, -3466, 10989, -3466, 48379, 48379, -3466,
   -3466, -3466, -3466,  3621,   828,  3593,  3298,  3596,  2339, -3466,
   -3466,  3244,  5428, -3466, -3466,   -37,    77, -3466,   742, -3466,
   -3466, -3466,  1051,  3053,  3291, -3466,   143, -3466, -3466, -3466,
     224, -3466, -3466,  3055, -3466,    77,  2250,  3057, -3466,  3056,
   -3466,  3061, -3466,   -37,    77,    77,  1494,  1494,  1320, 36010,
    3163, -3466, -3466,    77,  1051, 42489, -3466,  1077,  3416, -3466,
    2013,  2028, -3466,  3623, -3466,  3628,  3067,  3069,  3266,   742,
   -3466,   143,   224, -3466,  2919, -3466,   779,   779,   180,   215,
     180, -3466,  1910,  1910, -3466,   163, -3466, -3466,  3449,  3533,
   10989,  1910, 45434,  3079, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, 48968, 10989, -3466,
     678,  3551, -3466,  3324, -3466,  3325, -3466, -3466, -3466,  3556,
   48379, -3466,  3554, -3466,   828, -3466,  1618, -3466, -3466, -3466,
    1509, -3466, -3466, 24213, 14039, -3466, -3466, -3466,  3086, -3466,
   -3466,   -62, -3466,   -37,   -37, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  2045, -3466, 36010, -3466, -3466,  3649,
    3659,  3568,  3669,  1077, -3466,  -127, -3466, -3466, -3466, -3466,
   -3466, 40133, 40133, -3466, -3466, -3466, -3466,  2054, -3466,  3711,
   -3466,   762,  3369,  3370, -3466, -3466, -3466,  3140, 10989, 48379,
   -3466,  3576, -3466,  3511,  1862,  3455,  3114, -3466,  3112,  1158,
    3609, 49557, 49557, -3466, -3466, -3466, -3466,  3588, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466,  3292, -3466,  2058, -3466, 14649,
   -3466, -3466, -3466, -3466, -3466, 36010, -3466,  3163, -3466,  3128,
     215,   215,  3686,   215, -3466,  3689,  3695,  -127, -3466,  3135,
    2064, -3466, -3466, -3466, -3466,  3187,  3629, -3466,   250, -3466,
    1910, 46023,  3700, 42489, -3466, -3466, -3466, -3466, 10989, -3466,
   37188, 46612,  3150, -3466, -3466, -3466,  3304, -3466,  2339,  3543,
    3563, -3466,  3086, -3466,  3152, -3466,  2841,  2739, -3466, -3466,
    3151, -3466, -3466,   215, -3466,   215,   215, -3466, -3466, -3466,
     779,   779, 10989, -3466,  3610,  3231, -3466,  3153, -3466, 48379,
    1878, 48379, -3466, -3466,  3565,  3157,  1227, -3466,  3154, -3466,
   -3466, 48379,  3718,  3416, -3466, 14649,  3165, -3466, 10989,  3166,
    3162, -3466, -3466, -3466, -3466, -3466, -3466,  1910,  3723, 48379,
   42489, 43667,  3355, 47201,  3599, 42489,  5428,  3603,  3606, -3466,
   48379, -3466,   215,  3575, -3466, -3466,  1910, -3466, -3466,  3267,
   -3466, 44256, -3466,  2386, -3466,  3211, -3466, -3466,  3675,  1999,
   -3466, -3466, -3466,  3453,  3192, -3466, -3466, 48379, 48379, -3466,
   -3466, -3466, 30120, 10989, -3466, -3466, -3466, -3466, -3466,   583,
      30, 19463,  3341, 44845, 47790, -3466, -3466, -3466, 27175, -3466,
   -3466, -3466,  3622, -3466,  1910, -3466, -3466, -3466, -3466, -3466,
   36010,  2079, -3466, -3466, 24213, -3466, 30120, -3466, -3466, -3466,
   -3466, 22432,  3197, -3466,    77, -3466, -3466, 24213, -3466, -3466,
   14039, -3466, -3466
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3466, -3466, -3466, -3466, -3466,   107, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,  1702, -3466, -3466, -3466, -3466, -3466,
    1901, -3466,   716, -1685, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,   717,  1529,  3194, -3466,   466, -3466,    93, -3466,
   -3466, -3466, -2636,   -21,  -217, -3466, -3466,   714,    22,  2885,
    -216, -2745, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,   472,   470, -3466, -3466,   275, -3466, -3466, -1400, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466,  -409,  -361,  1836,
   -3466, -3466, -3466,  3785, -3466,  3283, -3466,  1253,  2106, -3466,
   -3466, -3466,   254,   296, -3466,   297, -3466,   298, -3466,   299,
   -3466,   300,   301,   307,   309, -3466,   311, -3466, -3466,  -362,
   -3466, -3466, -3466, -3466,   312, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  -231, -3466, -3466,   -58, -3466, -3466,  -219,   318,
   -3466,  -171,   322, -3466,   324, -3466,   -78, -3466,   -75, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,  2886, -3466, -3466, -3466, -1820, -3466, -3466, -2218,  2464,
   -3466, -1640, -3466, -3466, -1745, -3466, -3466, -1643,   748, -3466,
   -3466,   520,  -281, -3466, -1228, -1766, -1749, -3466, -3466, -3466,
   -1821, -1805,  -729,  2213, -1127, -2029, -3466, -3466, -3466,   327,
   -3466, -3466, -2335,  1527,  2010, -3466,  2468, -3466, -3466,   836,
   -3466, -3466,  1325,  1726, -3466,   975,  2640, -1142, -3466, -3466,
   -3466, -3466, -3466, -3466,   134,   304,    21, -3466, -3267,   704,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -2441, -3466,
   -3466, -3466,  -248, -3466, -3466,  -157, -3466, -3466,  -205, -3466,
     135, -2115, -3466, -3466, -3466, -3466,  2450, -1224, -3466,  3415,
   -3466,  -498,   793,  1569, -1935, -1762, -3466,  -861,  -859, -2662,
   -3466, -3466, -3466, -3078,  1130,  1171, -3466,   800,  1564, -2180,
   -3466,  1172, -3466, -3466,   661, -3466, -2807, -3466, -3466, -3466,
     622, -3466,   623, -3466, -3466, -3466, -1308,   591, -1016, -3466,
     272, -2203, -2251, -3466,   443, -3466,   400, -3380, -3466,  -546,
   -1909, -2206,    58, -3466, -3466,   413, -3026,   967, -3466, -3466,
   -3466, -3109, -3082, -3466,    31, -3466, -3466, -3466, -3466, -2515,
   -3466, -3466, -1383, -2434, -3466, -3466,  3437,  3439, -1423, -2748,
   -3465,    32,    34, -3466, -3466, -3466,  1989, -1730,    84,    74,
      81,  1518,  -986,   204, -1859, -3466,   282, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466,  1661,  1599,  -322, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -2556,   686, -3466, -3466,  1214, -3466, -3466,
   -3466, -2167,  -489, -2011, -2652, -3466, -3466, -3466, -3466, -3466,
   -3466,  1600, -3466, -3466,  2144,  2590, -3466, -3466, -3466, -3466,
   -3466, -3466,   464,  1781, -3466, -3466, -3466, -3466, -3466, -3466,
     701,  2509, -3466, -3466, -3466,   -11, -3466, -3466, -3466, -3466,
    2239, -3466, -3466, -3466, -3466,  2550, -3466, -3466, -3466, -3466,
   -3466, -3466,  1415, -3466,  1822, -3466, -1366, -3466, -3466,  1057,
    -933,  1775,  -560,  1912,   423, -3466,  3397, -3466, -3466, -3466,
   -1478, -2238, -3466,  3108,  -773, -2290,  2233,  -617, -1725,  1086,
    -650,  3221, -3466, -1081, -1063, -3466, -3466,  -611, -3466, -3466,
   -3466,  -613, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466,  1452, -3466, -3466, -3466, -3466, -1622, -3466,
   -3466, -3466, -3466, -3466,  1468, -3466,  2002, -3466,  -463, -3466,
    2908, -3466, -3466, -3466, -2091, -1751,  1732,  1003, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -2159, -3466, -3466,
   -3466, -3466, -3466,  1925, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -1624, -3466, -1769,   365, -3466,   524, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466,   -17,   895,   -15, -1985, -1034,  1585,
   -3466, -3466, -1202,  2962, -1869, -3466, -3466, -3466,  1905, -3466,
   -3466, -3466, -3466, -3466,   720, -2353, -1312, -3466, -3466, -2877,
    -843, -2094,  -833, -3466, -2117,   538, -1768, -1683, -1901,   116,
   -1156, -3466, -3466, -3466, -3466, -3466,  -180, -3466, -3466, -3466,
     565,  1802, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  -535,  -695, -3466,  2056,  2357, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466,  2773,  2749,  1870, -3466,
   -3466, -2348, -3466, -3466,  1831, -3466,   819, -2155, -1664,  1087,
   -3466, -3466,  1083, -2931, -3466, -3466, -3466, -3466, -3466, -3466,
    1025, -3466,    50,  3456, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466,  2543, -1012,  3379, -3466, -3466, -3466, -3466, -3466, -3466,
    2230, -3466, -3466, -3466, -3466, -3466, -3466,  2699,  3476,  -542,
   -1208, -3466,  -723,  2685,  2236,  -832, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,  2354,
     758, -3466, -3466, -3466,  2764, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
   -3466, -3466,  1122,   -66, -3466,    42,  -110, -3466,   -31, -3466,
   -3466, -3466, -3466, -3466,  -203, -3466, -3466,  -208,  -647,  -916,
   -1283,   525, -1692, -1865,  1114,  2750, -3072,  -658, -1098, -1099,
   -2196,   170, -3466, -3466,  2549,    48,   880,  -206,    -6, -2533,
    -108,  -548, -3466, -1777, -3466, -3466, -3466, -3466,  2302, -3466,
   -3466, -3466, -3466,  1440, -3466, -3466, -3466,  1081, -3466,   838,
     609, -3466, -3466,   149, -3466,  2352, -3466, -3466, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
    2798,  3515,  3209, -3466,  2828, -3466, -3466, -3466, -3466, -3466,
     479, -3466,   602, -3466, -1844,  2597,   809, -3466,  1525,  -155,
    -421, -3466, -3466,   476, -3466, -3466,   308,  3521,  3212, -3466,
   -3466, -3466, -3466, -3466, -2517,  -842, -3466, -3076, -2568, -1585,
   -3466, -3466, -1973, -2731, -3466, -3466,  -985, -3466, -3466, -3466,
   -3466, -1883, -3466, -3466, -3466,    40,  3579,  3580, -3466, -3466,
    -167, -3466,   458, -3466, -3466, -3466, -3466, -3466, -3466, -3466,
    3445, -3466, -3466, -3466, -3466,  3446, -3466, -3466, -3466, -3466,
   -3466,  3447, -3466, -3466, -3466, -3466, -3466,  1834, -3466, -3466,
   -3466, -3466, -3466, -3466, -3466, -3466
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2449
static const yytype_int16 yytable[] =
{
     470,   986,   902,  1382,  1000,  1008,   906,  1045,  1047,   508,
     932,  1291,  1483,   507,   591,  1053,   513,  2203,   525,  1596,
    1595,  1384,  2060,  1071,   532,   527,  1571,  2153,   468,  1029,
     755,  1548,   539,  1886,  1775,   542,   945,  2186,  2543,   539,
    1701,  2378,  1180,  3031,  1084,  1313,  1319,   560,  1883,  2658,
    1944,  1945,   134,  1660,  2605,  2609,  2611,  3234,  1347,  1617,
    2452,  2573,  2932,  2975,  1102,  2455,  1625,  1819,  1319,  1104,
    1348,  1513,  1108,   975,   978,  2813,  1115,  1116,  1117,  2428,
    1389,  2800,  1390,  2279,  2642,  1627,  1628,   580,  2503,  1631,
    1632,  1633,  1634,  2530,  1636,  1637,  1639,  1641,  1642,  1643,
    1644,  1645,  2291,  2623,  2624,  2594,  1709,  2185,  2338,   583,
    2398,   470,  3081,  2676,  2232,   470,   590,   596,  3428,  2292,
    1782,  1123,  1124,  1125,  2359,  3578,  2399,  2684,  1016,  2369,
    1230,  2688,  3530,  1166,  1165,  2375,  2376,  1230,  1792,   585,
    2380,  1262,  2703,   587,  3027,  2633,  1795,  1796,  3162,  3402,
    2742,  1932,  2712,  2643,  1857,  1704,  1132,  1133,   477,  2254,
    2255,   871,   872,  1822,  2720,  2395,  3461,  3266,   601,  1844,
     520,   610,  2499,  3373,  2773,  2387,  2266,   524,  2778,  3436,
    1349,  1442,  2396,   531,  1225,  3494,  3499,  1132,  1133,  3500,
    2248,  2823,   511,  2284,  2285,  2828,  3622,  1132,  1133,  2268,
    3130,  2430,  2349,   809,  3501,  1132,  1133,  2876,  3508,  1132,
    1133,   871,   872,  3131,  3529,  1685,  1715,  3845,  2742,  2100,
    2287,  1964,  1365,  2166,  2927,  1183,  3251,  3132,  2100,  2140,
    2095,  1922,  3476,  1302,  1167,  1132,  1133,  4050,   871,   872,
    2323,   114,  2827,  1167,  1132,  1133,  1324,  2999,  3008,  1857,
     921,  2382,  2383,  2384,  2385,  2668,  2669,  3248, -2332,  3426,
    2587, -1409,  2198,   579,   826,  1231,  1372,  1818,  3321,  2535,
    1846,  2241,  1231, -1844,  1657,  1132,  1133,  3835,  2779,  1386,
     602,  1386,   521,  1256,  1386,  2326,  4226,  3836,  3169,  1239,
    2412,  3671,  2963,  1393,  2984,  3568,  3818,  3068,  3845,  2721,
    2746,  1132,  1133,  3672,  3130,  1111,  4019,  1486,  -828,  1317,
    -524,   569,  1836,  -525,  1765,  2619, -2396,  3131,  2964,   625,
    1132,  1133,  1486,  3403,  2078,  1486,  3900,  1236,  2920,   129,
    2727,  3132,  1928,   989,  3130,   133,  1132,  1133,  1132,  1133,
    1132,  1133,   871,   872,  3839,  2582,  3597,  3131,   541, -2263,
    1840,   116,   981,  1356,  3112,  2766,  2767,  3599,  2744,  2627,
    2141,  3132,  1132,  1133,  4065,  3906,  1320,  1132,  1133,  1884,
    1967,  1766,   871,  3495,   615,   474,  2999,  2027,   475,  1464,
    1465,  1466,  3619,  3846,  1306,  -431,  2419,  1329,  1446,  3655,
   -1409, -2264,  1885,  4019,  4066,  1467,  2803,  1512,  3659,  1132,
    1133,  1132,  1133,  1132,  1133,  2745,   812,  1132,  1133,  2420,
    1071,   130,  2991,  1443,  1321,  1818,  1359,   922,  1686,  3678,
    2621,  1468, -2396,  3404,  3680,  1858,  1251,  2210,  1487,   982,
    1410,  1366,  1357,  1537,  4004,  3402,  1538,  1132,  1133,  2747,
     603,  1307,  1222,  1502,  2588,  1840,  1555,  3819,  1656,  3679,
    3112,  1815,  3681,  1837, -2263,  2167,  3477,  1015,  2968,  1132,
    1133,  1373,  3953,  3069,  3846,  2965,   570,  1308,  2672,  1463,
     606,  4227,  1112,  2641,  2734,  3673,   590,   596,  2211,  2979,
    1240,  2651,  3730,  2802,  3587,   133,  3837,  1177,  3009,  1360,
    1777,  2988,  3013,  1780,   596,  3000, -2264,  1447,  1784,  3467,
    1134,  1448,  2728,  1135,   807,   996,  3029,  3030,   590,  2985,
     817,  1658,  1449,  1132,  1133,  1169,  3040,  1132,  1133,   827,
    1858, -1409,  2291,   830,  1797,  1798,  1389,  1168,  1390,  1660,
    3729,  1134,  1622,   811,  1135,  1352,  1168,  2096,  1630,  2292,
     810,  1262,  2742,  1767,  4046,  1687,  1820,  2142,  3252,  1134,
    2804,   918,  1135,  1134,  3097,  1651,  1135,  1132,  1133,  1132,
    1133,  2815,  1303,  1132,  1133,  3113,  1262,  2860,  3246,   935,
    2350,  2398,  2080,  1804,  1497,  1498,  2338,  3405,   590,  1134,
     949,  3195,  1135,  2083,  3620,  2228,  2086,  2399,  1134,  2763,
    3406,  1135,   619,   470,  3398,  1536,  3071,  1389,   580,  1390,
     973,  2101,   580,   580,  1550,  1132,  1133,   987,   949,  3403,
    2101,  2632,   590,  2780,  1844,  2877,  1563,  1564,  1565,  1134,
    2168,   960,  1135,  1444,  2666,  1570,  2395,  1132,  1133,  1794,
    3188,  1024,  2686,  2687,  1450,  2689,  2220,  4007,  2692,  2693,
    2290,  2768,  2696,  2396,  2077,  1134,  2670,  2705,  1135,  3437,
    1663,  2708,  2709,  2710,  2711,   776,   522,  1226,  2715,  1965,
    2717,  3113,  1179,  1014,  1134,  1444,  2726,  1135,  1845,  2730,
    1309,  2732,  1681,  1325,   822,  1072,  2812,  3407,  3109,  2722,
    1134,   833,  1134,  1135,  1134,  1135,  3736,  1135,   851,  1933,
    1822,  1705,  1922, -2332,  2898,  2899,  2900,  1132,  1133,  3884,
    2765,  3237,  3001,  2394,  3374,  2820,  1134,   919, -1409,  1135,
    1703,  1134,  3608,  3481,  1135,  1846,  2212,  3502,  2938,  2939,
    1716, -2332,  3773,  2595, -1409,  1722,  2771,  3854,  1805,  1451,
    1927,  3133,  1806,  1129,  1136,  1131,  1731,   923,  2671,  2935,
    2936,  2937,  3096,  1134,  3914,  1134,  1135,  1134,  1135,  1910,
    1135,  1134,  2063,   540,  1135,  1974,  1132,  1133,  3942,  1174,
     470,  1176,   949,   470,   590,  1136,   470,   590,  3190,  1186,
    1316,  -828,  2548,  -524,   970,  1136,  -525,  1444,  1781,  1602,
    1603,  1134, -2263,  1136,  1135,  3011,  4188,  1136,  1175,  1132,
    1133,  1178,  1113,  1928,  1182,  2805,  2888,  1310,  1975,  4014,
    3907,  4016,  2028,  1134,  2401,  1235,  1135,  3215,  1758,  3038,
    3039,  2573, -2263,  1136,  1330,   580,  3845,  3258,  1311,  3224,
    3005,  3636,  1136,  3228, -2264,   590,   580,  1602,  1993,  4008,
     580,  4077,  2913,  1132,  1133,  3133,  2032,  2033,  1132,  1133,
    1132,  1133,  1646,  2622,  3199,  1824,  1149,  1223,  -431,  1132,
    1133,  2995,  1539,  1136, -2264,  1540,  1353,  1134,  1312,  3527,
    1135,  1134,  1132,  1133,  1135,  3133,  3116,  2049,  2050,  3002,
    2980,  2981,   590,  1253,  1132,  1133,  3406,  2166,  4040,  1136,
    3453,  2402,  4073,  2676,   997,  3496,  3319,  3223,  2186,  1344,
    2820,  3227,  3462,  2511,  2512,  1999,  2221,  2703,  1136,  1132,
    1133,  1134,  2407,  1134,  1135,  2291,  1135,  1134,   135,   517,
    1135,   580,  2845,  2846,  1136,  2742,  1136,  3727,  1136,  3012,
     473,  3014,  2292,  2408,  1132,  1133,  2702,  1208,  3025,  1955,
    1956,  1385,  2862,  2863,   561,  2469,  1732,  1775,  1775,  1444,
    1136,  3037,  2432,  3121,  2972,  1136,  2224,  3046,  3827,  1134,
    2222,  2398,  1135,   580,  2885,  2886,  1319,   628,  2185,   580,
    2227, -1701,  3060,  2230,  2231,  1132,  1133,  2399,  2070,  1938,
    2940,  1134,  2338, -1702,  1135,  3958,  2253,  1136,  1354,  1136,
     562,  1136,  3846,   961,   979,  1136,  1319,  3147,  1132,  1133,
    1486,  1242,  1973,  2861,  2510,  3344,  1980,  1132,  1133,  1968,
    3220,  1355,  1259,   617,  3345,  3366,  2395,  3987,  1132,  1133,
     580,  1472,  1473,  1474,  1479,  1136,  2562,  1132,  1133,  3261,
     771,  2628,  1612,  2396,  3559,  1132,  1133,  3488,  2403,  1152,
    1981,  3024,   998,  4044,    42,  2085,  2087,  1136,   478,  1844,
   -1369,  1134,  1647,  3032,  1135,  2648,  2060,  2515,  2516,  1072,
     516,   563,  1991,  1389,   834,  1390,  1132,  1133,  2742,  1650,
    2290,  3507,  1072,  3442,  1648,  3646,  3446,  3447,  3126,  3510,
    3239,  2187, -2448,  3486,  3487, -1369,  3535,  1596,  3601,  1002,
    1010,  2827, -2396,  2558,  2827,  2827,  3800,  1857,  2146,  2509,
    3198,  1136,  2043,  3947,  2195,  1136,  3454,  1132,  1133,  2519,
    1134,  2827,  3828,  1135,  1149,  4074,  1992,  1132,  1133,  2167,
    1995,  1559,  1597,  1845,  2099,  3509, -1701,   546,  3233,  4009,
    3528,  3531,  3533,  3534,   590,  3463,  1132,  1133, -1702,  1405,
    2104,  3455,  3893,  1134,   529,  1136,  1135,  1136,  3346,  1733,
    1846,  1136,  2071,  1714,  3903,  3247,  1596,  2646,  3249,  3250,
    2007,  2842,  2015,  1132,  1133,  3647,  2019,   554,  1922,  3822,
    3823,   590,  1132,  1133,  2394,  1317,  1654,  3260,  1132,  1133,
    2162,  2163,   691,  1132,  1133,  3894,  3240,  1134,  1345,   580,
    1135,  2907,  1134,  1136,  1134,  1135,  1471,  1135, -2396,    55,
    1477,  1927,  2064,  1134,  3648,  2941,  1135,  2273,  2020,   618,
    3045,  2095,  2400,   835,  2213,  1136,  1134,  1132,  1133,  1135,
    3889,  4010,  3126,   691,   590,   555,  3844,   773,  1134,  3127,
    2021,  1135,  1649,  3989,   518,  3377,  1690,   838,  1693,  2610,
     580,  1605,  1132,  1133,  3990,  1486,  1874,   573,  4011,   580,
    1132,  1133,   557,  1134,   831,   590,  1135,  3561,  3756,   629,
    1132,  1133,  1132,  1133,   580,   580,  2274,  1132,  1133,  1928,
    2065,  3829,  2661,  1840,  2784,  2401,  1687,  3757,  1134,   980,
     938,  1135,  3148,  3801,  2168,  1136,  2894,   572,   590,  1132,
    1133,  1735,  2275,  1840,  2419,  1697,  1826,  1152,   564,  1743,
    2022,  1132,  1133, -1679,  4089,  3128,  1857,  3895,  3006,  3006,
    1463,   470,   470,   470,   580,   470,   580,  2420,  4167,  1134,
     565,  1776,  1135,  1161,  1162,  1163,  1164,  1778,   470,  4251,
     590,  1132,  1133,   470,  4058,  2763,   630,  4168,  2147,  1759,
    1760,  1761,  1134,  1763,  1136,  1135,   839,  3257,  2072,  1132,
    1133,  1134,   566,   580,  1135,  1875,  1779,   575,  2276,  2026,
    1755,  1783,  1134,  3947,  2073,  1135,  1582,  2638,  1858,  1132,
    1133,  1134,  1840,  3127,  1135,  1736,   715,  1136,  2639,  1134,
    3802,  2662,  1135,   581,  2056,  2785,  3033,   584,  1132,  1133,
    -197,  1289,  2045,  2195,  1657,  3466,  1606,  2148,   590,  1132,
    1133,  1051,  4013,  2590,  1132,  1133,  3776,   567,  1804,   691,
    1134,   634,   580,  1135,  1657,  1879,   580,   715,   840,  1132,
    1133,  1136,   597,  2149,  1132,  1133,  1136,  2814,  1136,  1132,
    1133,  2663,  1409, -1679,  2277, -1369,  2843,  1136,  2196,  1132,
    1133,  2844,  1051,  2855,  2750,  3991,  2884,  2147,   580,  3138,
    1136,  1134,  2865,  2290,  1135,  3732,  3034,  3544,  1856,  2751,
    1052,  1134,  1136,  1745,  1135,  2866,  2066,   590,   635,   470,
     470,  3503,  1940,   470,  3504,  2514,  3567,  3384,  1596,  2923,
    1134,  2973,  1470,  1135,  1024,  2591,  1954,  1136,  2362,  2150,
    1762,  3456,  1764,  1657,   813,   939,  1737,  1936,  1937,  1132,
    1133,  1972,  1840,  1132,  1133,  3129,  2148,  1134,  4094,  4094,
    1135,  3344,  1136,   664,  1132,  1133,  1134,  3775,  2096,  1135,
    3345,   940,  1134,  2457,   550,  1135,  2044,  1134,   551,  1793,
    1135,  1746,  2149,  1132,  1133,  2974,  2463,  4048,   997,  2057,
    4052,   586,  1132,  1133,  1053,  1104,  1108,  2363,  1845,  1712,
    2548,   899,  3035,  1136,  2394,  1132,  1133,  1072,  2000,   599,
    2786,  1134,  2172,  1805,  1135,  2151,  2640,  1979,  2105,  2478,
    1818,   899,   669,  1132,  1133,   814,  1136,  1858,  3183,  1159,
    1160,  1161,  1162,  1163,  1164,  1136,  1134,  2060,  1876,  1135,
    1982,  1713,  1881,  1994,  1134,   636,  1136,  1135,  2150,  1983,
    3367,  1132,  1133,   715,  1134,  1136,  1134,  1135,  3992,  1135,
    1990,  1134,  3545,  1136,  1135,  4155,  4156,  2069,   116,  2003,
    3184,  2147,  1747,  1657,  2091,  1596,  3044,  2004,  1051,  3006,
     606,  1658,  2092,  1134,  2278,   552,  1135,   961,  2525,  2364,
    1132,  1133,  3210,   815,  1136,  1134,  1170,   607,  1135,  3129,
     899,  1658,  2091,  1467,  3346,  2401,  2787,  1804,  2008,  2093,
    2949,  1132,  1133,  3211,   680,   612,   590,  1927,   580,   580,
     590,  4144,  1446,  2400,  2151,  1134,  1132,  1133,  1135,  1469,
    2148,   580,   491,  2110,  3662,  1136,   998,  1103,   505,  2116,
    2116,  2702,  2116,  1134,  3212,  1136,  1135,  1132,  1133,  2012,
    2172,   553,   580,  1132,  1133,  3663,   580,  1132,  1133,  2013,
     610,  1402,  1403,  1134,  1136,  2365,  1135,  3560,  1132,  1133,
    3964,  2075,   590,   590,   580,   580, -2448,  1748,  2014,   248,
    1658,   250,  1134,  1072,  1268,  1135,  2116,  2116,  2116,  3664,
     696,  1136,   614,  1134,  2517,  2273,  1135,  1291,  1134,  1461,
    1136,  1135,  2437,  2208,   626,  2018,  1136,   871,   872,   764,
    2267,  1136,  2219,  1134,  2023,  2152,  1135,  1823,  1134,  2488,
    2031,  1135,  3975,  1134,  2161,  3717,  1135,  3794,  3795,   484,
     899,  1447,  3221,  1134,  1994,  1448,  1135,  2969,   768,  3621,
    3635,  3390,  3124,  2970,   775,  1136,  1449,  1319,   580,  1132,
    1133,  1132,  1133,  1319,  2274,  3890,  2971,  3891, -1599,  2036,
    2236,  2215,  1805,  3140,  3141,  2673,  1806,   580,  2174,  2175,
    1136, -1599,   808,  3744,  3745,  3746,  3747,   819,  1136,   823,
    2275,  2388,   843,  3635,  3153,  2404,  3469,  3470,  1136,  1149,
    1136,  1596,  2051,  1134,  2103,  1136,  1135,  1134,  3976,  1775,
    1135, -1599,  2817,   825,  2833,  2926,   845,  1949,  1134,  2839,
    1658,  1135,  1149,  1915, -1599,  2115,  2115,  1136,  2115,   914,
    2431,  2453,   474,   835,  2152,   475,  2453,  1134,  2138,  1136,
    1135,  2840,  1242,   933,   536,  2257,  1134,  1132,  1133,  1135,
    2286,   536,   934,  2847,  2264,  2265,  2276,  1596,  2646,  1134,
    1259,  2165,  1135,  1132,  1133,  2269,  2270,  2271,  2272,  1136,
    2280,  2281,  2115,  2115,  2115,  2366,  2087,  1134,  1450,  2673,
    1135,   530,   691,  2851,  2699,  3717,  3717,  1136,   942,  1132,
    1133,  1857,  2187,   590,   811,  1132,  1133,   590,   952,  2405,
     723,  2852,   470,  1170,   951,  1134,   961,  1136,  1135,  2358,
    2426,  2360,  2361,  2429,  2368,   959,  2370,  2371,  2372,  2373,
    2374,  2853,  1884,  2377,   971,  2379,  1136,  2490,   990,  2507,
    2410,   991,  2277,   590,  2229,   984,   985,  1136,   590,   995,
    2854,  1915,  1136,   114,  1134,  1885,  3489,  1135,   953,  3492,
    3493,  2856,  1026,  2247,  1170,  1969,  2859,  1136,  1170,  1017,
    2528,  2441,  1136,  1132,  1133,  1134,  3505,  1136,  1135,  1840,
    1018,  2864,  1019,  1451,  1971,  1169,  2867,  1136,  3857,  3861,
    1134,  2869,  1152,  1135,  1987,  1169,  2919,  2442,  2699,  1246,
    1169,  2871,  1247,  1027,  2172,  4162,  3867,  1970,  1169,  1028,
    1682,  1134,  2173,  1683,  1135,  1152,  1684,  1134,  3977,  1030,
    1135,  1134,  1031,  2400,  1135,  3330,  1996,  1169, -1679,  2883,
    3717,  3717,  1134,  1997,  1553,  1135,  1884,  3769,  3770,   954,
    2237,   590,  2962,  1032,  2390,  2443,  1035,  1136,  2444,  3868,
    1036,  1136,  1915,  3616,  3617,  1037,  2445,  1857,   923,  1885,
    3771,  2873,  1136,  1847,  1172,  2874,  2526,  2492,  1038,  4248,
    1596,  2923,   590,  1173,  3873,   899,  2875,  3876,  3877,  3878,
    3879,  1136,  2453,  1039,  2613,  2618,   715,   590,  2814,  1040,
    1136,  2237,  2009,  1169,  1916,  3158,  2273,  1840,  1424,  1425,
    1657,  2701,  1041,  1136,  3159,  1042,  3857,  1915,  2010,  1169,
    3861,  1051,  1043,  1134,  1046,  1134,  1135,  3160,  1135,  2556,
     854,  1136,  2174,  2175,  1048,  3717,  2657,  2453,  3023, -1679,
    1209,   912,   913,  2556,   916,  3383,  3511,  1154,  1155,  1049,
    3717,  1050,  2278,  1248,  2011,  1169,  1596,  3044,  1054,  1136,
    2578,  3857,  3861,  3717,  1055,  2274,  1618,  2016,  1169,  2176,
    1154,  1155,  3956,   590,  1848,  2238,  1056,  1917,  4041,  1211,
    1107,  1220,  1858,  2060,  1057,  3981,  2599,  1058,  2601,  3512,
    1059,  2275,  2239,  3513,   590,  3514,   590,   590,  1136,  1060,
    3973,  3974,  2700,  2240,  1776,  1776,  2282,  2283,  1840,  3986,
    2390,  1134,  3389,  1061,  1135,  2701,  3381,  1062,  1230,  1136,
    1063,  1212,  1916,  2496,  1169,  1066,  2238,  1134,  1657,  1597,
    1135,  1067,  3717,  3391,  1136,  1827,  2533,  2534,   590,   590,
    2598,  3515,  1073,  2239,  3717,  3717,  1437,  1438,  3392,  1828,
     955,   855,  1074,  1134,  2240,  1136,  1135,  2276,  3053,  1134,
    3054,  1136,  1135,  1840,  1331,  1136,  3580,   899,  1188,  3393,
    2857,  1169,   114,  2929,  2930,  3394,  1136,  2446,  2118,  3623,
    2119,  2241,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    3741,  2819,  1075,  1332,  3717,  1213, -1409,  2237,   871,   872,
    1214,  3055,  3092,  3093,  3717,  1157,  1158,  1159,  1160,  1161,
    1162,  1163,  1164,   956,  1217,   957,  2729,  1076,  1918,   854,
    1077,   856,  3056,  1916,  2190,  2191,  2192,  3164,  1169,  1657,
    2743,  1029,  2241,  2277,   984,   985,  1849,  1078,  1858,  2760,
    1619,  1333,  3717,  1215,  3717,  1850,  1334,  1658,  1079, -1409,
    1080,  1851,  1081,  1231,  3717,  3444,  3057,  1136,  1216,  1136,
    3186,  3187,  -753,  1083,   115,  3581,  3582,  1228,  3565,  3566,
    3583,  3584,  3717,  3146,  3717,  1229,  3717,  4085,  1916, -1409,
    1219, -1409,   116,  3717,  1657,   899,  1085,   927,   928,  1086,
     929,  2242,   930,  1087,  3717, -1409,  1917,   580,  2743,  3061,
   -1409,  3335,  3336,  1827,  1829,  1088,   580,   580,   580,  1089,
    3717,  3717,  1090,  3165, -1409,  2447,  1091,  1828,  3937,  1092,
    2764, -1409,  2238,  3089,  3370,  3378,  3717,  3717, -1409,  3385,
    1169,  3717,  3399,  1169,  3414,  3415,  3547,  2283, -1409,  2239,
     855,  4195,  2242,  1852,  1093,  1136,  1094,   117,  1095, -1409,
    2240,  3734,  3735,  2243, -1409,  3738,  3735,  3946,   984,   985,
    1096,  1136,  1097, -1409,  3516,  1658,  3653,  3654,  1098,   535,
    1099,  3517,  3626,  -604,  3351,  -875,  1830,  2448,  1100,  3657,
    3739,  3735,  2237,  2673,  3660,  1335,   899,  1136,  1490,  1491,
    1492,  3754,  3755,  1136,  1101,  2772,  2674,  3783,  3784,  1518,
    1503,  1831,  1105,  -604,  2243,  2449,  3788,  3187,  3518,  3682,
     856,  1106,  3684,  2673,  3791,  3735,  4252,  2558,  2110,  4198,
    4199,  1235,   590,   590,   590,   118,  2674, -1409,  2241,  1109,
     580,  1556,  1853,  2278,  1560,  1110,  1620,  1918,  3798,  3799,
    1114,   899,  3898,  3735,  3899,  3735,  3901,  3735,   590,  1118,
   -1409,  1597,  1621,  1119,  1578,  1579,  1336,  1120,  1583,  1121,
   -1409,  1832,  3902,  3735,  1072,  2977,  1658,   590,   590,   590,
    3908,  3909,  1829,  2789,  1237,  3375,  3519,  1598,  1599,  1122,
    2948,  1171,  2808,  2809,  2810,  1238,  2950,  2528,  2952, -1409,
    3058,  1254,  -604,  1522,   590,  1265,  2386,   628,  3910,  3909,
     857,   858,   859,   860,   861,   862,  1267,  2238,   119,  4081,
    3997,  3784,  3573,  3574,   120,  1284,  1230,   863,  1285,  3520,
    1337,  1658,  -604,  1286,  2239,  3998,  3784,   628,  3789,  3790,
    1884,  3792,  3793,  1289,  2947,  2240,  1300, -1409,  2242,  1292,
    1596,  3865,  4056,  4057,  1830,  1301,  1132,  1133,  1305,  1833,
     121,  4071,  3187,  1885,  2998,  4101,  4102,  1317,  2743, -1409,
    1884,  4119,  3091,  2743,  3010,  1326,   984,   985,  2743,  1831,
    3020,  1327,  2743,  1328,  3019,  3521,  4240,  4241,  3253,  1343,
    1586,  1587,  1346,  1885,  3019,  1350,  2743,  2743,  1351,   590,
    1364,  1523,  3041,  1367, -1409,  1526,  2743,  3049,  1597, -1409,
    2243,  1368,  1527,  3051,  3052,  1370,  2906,   580,  1375,  3264,
    3979,  3979,  1380,  2241,  1386,  3019,  1392,  3268,   122,  4161,
    3270,  4163,  2743,  3067,  3202,  3203,  3807,  1394,  1338,  1832,
    3021,  3022,  3807,   470,  3171,  3172,  3448,  3086,  1396,  3019,
    3412,  3413,  1514,  1515,  1516,  1517,  1518, -1409,  1399,  4181,
    1400,  1231,  1404, -1409,  3095,  3048,  1407,  1408,  1411,  1412,
    1455,  3082,  1339,  1413, -1409, -1409,  1457,  3106,  1456,  1460,
    1462,  1463,  1480,  1482,   580,   123,  2120,  -875,  1167, -1409,
    1528,  1486, -1409,  1493, -1409,  1113,  2675,  4213,  4214,   857,
     858,  3590,   860, -1409,   862,  3120,  1505,  2121, -1409,  -604,
    1507,  1542,  1552,  3758,  1554,  1553,   863, -1409, -1409,  1613,
    2122, -1409, -1409,  3098,  1594,  1604,  1629,  1833,  1635, -1409,
    2123,  1661,  1662,  2242,  1664,  3207, -1409,  1655,  1666,  -604,
    1673,  1669,  1670,  1530,  1671,  3759, -1409,  1519,  1520,  1521,
    1522,  2657,   766,   767,  1672,   769,   770, -1409,  1674,   772,
    1675,   774, -1409,  1676,  1596,  3865,  1678,  1679,  1702,  1699,
    1710, -1409,  1718,  1719,  3163,  1149,  1720,  2124,  2125,  1721,
    1725,  1729,  2599,  2296,  2297,  1728,  3602,  1730,  1739,  1744,
   -1679,  1291,  1753,  3050,  1757,  2243,  1785,  1787,  1786,   629,
    1788,  1799,  1148,  1790,  1801,  2126,  2556,  1803,  1816,  1825,
    1871,  1444,  1888,  1890,  1889,  2453,  -736,  -736,  2299,  1891,
    1892,  1893,  1894,  1895,  2578,  3197,  -736,  1896,   590,   629,
    1897,  1898,  2302,  1909,  1899, -1409,  2598,   590,  1900,  1901,
    2303,  1902,  1903,  2526,  1904,  1911,  1905,  1906,  1523,  1907,
    1524,  1525,  1526,   590,  1908,  1957,  1929,  3760, -1409,  1527,
    3108,  2208,  1930,  1946,  2305,  1952,  1978,  2127, -1409,  1935,
    1958,  1960,  2017,  1961,  1531,  1149,  -604,  1962,  1386,  1977,
    1597,  2306,  1053,  1104,  1108,  3719,  4106,  1984,  1985,  1533,
    1986,  1988,  1994,  4015,  1998,  2061,  2002, -1409,  2743,  1190,
    1134,  2743,  2743,  1135,  3019,  1149,  -604,  2006,  2024,  2311,
    2025,  2030,  2068,  2034,  2035,  2046,  3809,   590,  2047,  2128,
    2743,  2048, -1124,  2001,  2074,  1164,  2453,  2005,   643,  2084,
    2131, -1241,  2113,  3761,  2106,  3019,  2139,  1528,  2145,  2156,
    2159,  2188,   762,  3019,  2189, -1409,  3019,  2204,  2216,  2223,
    2029,  3762,  2218,  2245,  3768,  2246,  2250,  2249,  1152,  2252,
    1149,  2256,  3273,  2351,  2263,   580,  2258, -1409,   762,  2259,
    3329,  2260,  3259,  2261,  3763,  2262,  2314,  2355,  2357,  2389,
    3262,  2411,  4106,  2315,  2422,  2760,  2427,  1149,  2423,  1529,
    1530,  2431,  2435,  1191,  2424,  2440,  3433,  2458,  2316,  2459,
    2460,  2523,  1150,  3629,  1149,  2743,  2092, -1409,  2470,  2471,
     664,  2483,  1596,  4233,  2502,  2538,  1776,  1192,  2513,  2504,
    2505,  1193,  2506,  2522,  1151,  2539,  2536,  2537,   590,  2540,
    2546,  2551,  3332,  1187,  2549,  1596,  4244,  2552,  2559,  2560,
    2564,  1705,  1596,  4233,  4111,  4112,  2568,  4114,  1596,  4244,
    2580,  2583,  2317,  2196,  1194,  3356,  2581,  2848,  1152,  2584,
    3911, -1409,   668,  2585,  2195,  2602,  2603,  2604,  2625,   669,
    2318,  1195,  2629, -1409,  2634,  2635,  2636,  2652,  2659,  3422,
    2660,  2673,  2685,  1597,  2690,  2691,  2694,  2695,  1152,  2697,
   -1409,   762, -1409,  2698,  2704,   673,   762,  4152,   590,  4153,
    4154,  2706,  2707,  1154,  1155,  2713,  2714,  2718,   984,   985,
    1514,  1515,  1516,  1517,  1518, -1409, -1409,  2719,  2724, -1409,
   -1409,  1531,  2749,  3951,  3768,  2322,   762,  3949,  2725,  2731,
    2753,  1196,  2755,  2324,  1136,  1532,  1533,   899,  2743,  2769,
    2770,  3274,   762,  1152,  2774,  2775,  2776,  1818,  2743,  2811,
    3019,  2777,  2323,  3764,  1197,  1953,  4192,  2820,  2829,  1597,
    2830,   680,  2824,  3019,  2831,   580,  2832,  2453,  2891,  2834,
    1152,  2903,  2835,  2878,  2880,  2882,  4225,  2887,  2890,  1139,
    1140,  2901,  1153,   762,   762,   762,   762,  1152,  2911,  2896,
    2908,  2912,  1246,  2915,  2925,   762,  2931,  2918,  2928,  2934,
    2330,  2946,  2945,  1154,  1155,  1519,  1520,  1521,  1522,  2959,
    2951,  2983,  2986,  1141,  3076,  2978,  2982,  3077,  3084,  3080,
    3602,   691,  3026,  1142,  3028,  3083,  3207,  3088,  3090,  3101,
    3543,  3091,  3666,  1154,  1155,  3094,   695,   696,  1157,  1158,
    1159,  1160,  1161,  1162,  1163,  1164,  1156,  -441,  3106,  3102,
    3107,  2172,  3110,  3139,  1198,  3111,  2331,  3564,  3564,  3564,
    1143,  3122,  3142,  1199,  3149,  3167,  3168,  3179,  3150,   590,
    3177,  1144,  2332,  3189,  3200,  2333,  3208,  3216,  1200,  3182,
    3225,  3217,  3226,  2349,  3238,  3331,  3244,  3245,  1154,  1155,
    3333,  3548,  3343,  3243,  3361,  3352,  1201,  3272,  1145,  3372,
    3376,  3386,  3387,  3256,  2657,  3265,  1523,  3339,  1524,  1525,
    1526,  2335,  3271,  3354,  3594,  1154,  1155,  1527,  3388,  3400,
    3401,  3353,  3410,  3357,  3417,  3358,  3363,  3364,   590,  3365,
    3415,  3418,  1154,  1155,  3368,  1202,  1203,  3369,  1157,  1158,
    1159,  1160,  1161,  1162,  1163,  1164,  3614,  3370,  2949,  3371,
    3379,  3429,  3430,  3380,  3382,  3420,  3438,  1146,  3427, -1324,
    1204,  3434,  3564,  3435,  3440,  3441,  2801,  3638,  1157,  1158,
    1159,  1160,  1161,  1162,  1163,  1164, -1329,  3471,  3643,   474,
    3452,  3472,   475,  3490,  3539,  3468,  3484,  3949,  3536,  3550,
    3530,  3549,  3569,  4148,  2453,  1528,  3571,  3572,  3588,  3575,
    3576,  3589,  3595,  3605,  3577,  3606,   590,  3624,  3625,  3610,
    3612,  3627,  3628,  3644,  3641,   715,  3652,  3669,  3658,  3630,
     762,  3527,  3631,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
    1164,  3656,   721,  3685,  3670,  3674,  3676,   723,   480,  3683,
     724,  3677,  3686,  3720,  3737,  3724,   580,  1529,  1530,  3728,
    3743,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  3740,  3749,
    3752,  4148,  3665,  3780,  3785,  3768,  3782,  3797,  3803,  1159,
    1160,  1161,  1162,  1163,  1164,   762,   762,  3810,  3811,  3378,
    3813,  3831,  -308,   580,   762,   762,   762,   762,   762,   762,
     762,  4222,  3632,  3633,  3840,   762,   590,  3834,   762,   762,
    3853,   762,  3833,   762,  3872,  3843,  3874,   762,  3875,  3880,
     762,   762,   762,   762,  3883,   762,   762,  3885,  3564,  3564,
    -875,  3564,  3564,   762,   762,  4222,   762,   762,   762,   762,
     762,  4250,   762,  3887,   762,   762,   762,   762,   762,   762,
     762,   762,   762,   762,   762,  3904,  3914,   762,   762,  3917,
     762,  -326,   762,  -875,  3943,  3944,   762,  3945,   762,   762,
    3959,  3960,   643,  3963,  3966,   779,   780,  3968,  3983,  3999,
     762,   762,  3995,  4001,  4000,  4002,  3071,  4022,   762,  1531,
    4023,  4033,  4034,  3817,  4035,   762,   762,   762,  3824,   762,
    4038,  4027,  4046,  1532,  1533,  4060,   762,   762,   762,   481,
     762,   762,   762,   762,   762,  4061,   762,   762,   762,   762,
     762,   762,   762,   762,  4062,  4063,  4072,   762,   762,  4075,
    4076,  4077,  3725,  4082,  4084,  4086,  4087, -2183,  4090,  3564,
    4096,  2293,  4113,  4099,  4110,  4115,  1269,  3629,  2294,  2295,
     818,  4116,  4118,  1597,   664,  1270,  4120,  4140,   781,  3594,
    2296,  2297,  4126,  4121,  4142,  1271,  4159,  4158, -1482,  3750,
    4145,  4160,  4139,  4164,  4172,  4165,  4169,  1272,  1273,  1274,
    4178,  3982,  4175,  4177,  3614,  4180,  3614,   782,  3892,  4184,
    4186,  2298,   119,  1275,  4189,  2299,  2300,  4190,   120,  4193,
     783,  2301,  4197,  3905,  4201,  4203,   668,  4210,  4211,  2302,
    4234,  2296,  2297,   669,  4238,  4247,  3826,  2303,  2531,  3341,
    2381,  3342,  2667,   784,  3918,   785,  1007,  2304,  3553,  3841,
    3952,  4097,  3551,  4098,  3555,  3723,   786,  4245,  4205,   673,
     549,  2305,   909,  2933,  2180,  1398,  2299,  4215,  3697,  3698,
    3700,  3701,  3703,  3704,   762,  1386,   787,  4123,  2306,  3705,
    2302,  3706,   762,  3707,  3708,  2307,  2308,  4020,  2303,  4124,
    3711,  4095,  2309,  4032,  3712,  4031,  3713,  1869,  1033,  2094,
    2310,   788,  2735,   590,  -855,  1459,  2311,   789,  2528,  3988,
    2336,  1882,  2305,  3267,  2914,  2563,  3731,  3181,  1708,  3870,
    3967,  3423,   482,  3955,  3751,   680,  1386,  4174,  1065,  2306,
    4109,  3882,  4147,  3359,  2312,   627,  3099,  2733,  1914,  3066,
    2740,  3360,  -875,  3073,  1082,  3473,   790,  3497,  3498,  3537,
    3637,  3972,  3805,  3675,  3965,  3661,  3214,  2311,   632,  4003,
     633,  2421,  3957,  4005,  3962,   494,  4006,  3961,  2807,  3852,
    3808,  2313,  3475,  2314,  2737,  2234,  3640,  4108,  3065,   483,
    2315,  -530,  2565,  1802,   484,   691,  3474,  1597,  1126,  2164,
    2547,  2905,  1880,  1912,  3178,  2316,   931,  3718,  2586,  2501,
     695,   696,  2194,  1296,  3166,  2889,  1551,  2456,  2647,  3222,
     590,  2500,  3787,  3618,  4069,  3479,  3340,  4070,  1276,  -875,
    2520,  3615,   495,  3980,  2314,  2760,  2760,   485,  4196,  3604,
    2593,  2315,  2425,  2545,  1504,  1277,  2571,  3192,  3425,  1696,
    1723,  3232,  3193,  4043,  1769,   920,  2316,  1025,   496,  2317,
    2225,  4053,  4054,  1951,   905,   847,   780,  2226,  1791,  3483,
    2107,  1727,  3180,  4173,  4143,  4064,  4117,  2318,  4246,  4249,
    3668,  2319,   762,   791,  3196,  1742,  2205,   792,  3218,   590,
    -875,  3607,  2967,  3439,  2144,   850,  1283,  1689,  3742,  2893,
    1934,  3748,   852,   793,  1288,   621,   622,  1011,  1012,  1013,
    2317,   794,     0,     0,     0,     0,     0,  4128,     0,   795,
    2320,     0,     0,  1734,  4136,  2321,     0,     0,  2318,     0,
       0,     0,  2322,     0,     0,     0,   497,     0,     0,  2323,
    2324,     0,     0,     0,   796,     0,     0,     0,   781,     0,
       0,     0,     0,     0,     0,     0,     0,   797,   798,     0,
       0,     0,  4239,     0,     0,     0,     0,     0,     0,  1278,
    2325,     0,     0,     0,     0,     0,     0,   782,   762,   762,
     762,     0,     0,  2322,  2326,  2327,  2328,  2329,     0,   715,
     783,  2324,   762,  3630,  4182,     0,  3631,     0,     0,  4187,
       0,   799,     0,     0,     0,     0,   721,  2330,  2296,  2297,
       0,   723,     0,   784,   724,   785,  4026,     0,   762,   119,
       0,     0,     0,  1279,   762,   120,   786,   762,     0,   762,
     800,  4026,  1419,     0,     0,   762,  4223,   762,   762,     0,
    1280,  -736,  -736,  2299,  4036,  1597,   787,     0,     0,     0,
       0,  -736,   801,     0,   802,     0,   -63,  2302,  2330,     0,
       0,   498,     0,  2331,   590,  2303,  3632,  3633,  1597,     0,
    4223,   788,     0,     0,     0,  1597,     0,   789,     0,  2332,
       0,  1597,  2333,     0,     0,     0,     0,  1484,  1485,  2305,
       0,     0,     0,     0,     0,     0,  1495,  1496,     0,     0,
    1499,  1500,  1501,  1386,   762,  2334,  2306,  1506,     0,     0,
    1508,  1509,     0,  1510,  2331,  1511,   790,     0,  2335,     0,
       0,     0,  1544,  1545,  1546,  1547,     0,  1549,     0,   499,
    2332,     0,     0,  2333,  2311,  1557,  1558,     0,  1561,  1562,
       0,     0,     0,     0,  1566,     0,  1567,  1568,  1569,     0,
       0,  1572,  1573,  1574,  1575,  1576,  1577,     1,     2,  1580,
    1581,     0,  1584,     0,  1585,     0,     0,     0,  1588,  2335,
    1592,  1593,     0,     0,     3,  4026,     0,  -855,     4,     0,
       0,     0,  1600,  1601,     0,  4138,   500,     0,     0,     0,
    1609,   501,     5,     6,     0,     0,     0,  1614,  1615,  1616,
       7,  2314,     0,     0,     8,     9,     0,     0,  2315,   502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      10,     0,     0,  2316,     0,     0,     0,     0,     0,     0,
    1652,     0,     0,     0,   503,  4171,     0,     0,     0,    11,
       0,     0,     0,   791,     0,     0,     0,   848,     0,   504,
       0,     0,     0,     0,     0,  4026,     0,  4026,     0,     0,
      12,     0,     0,   793,  4191,     0,     0,     0,    13,    14,
      15,   794,     0,     0,     0,  4026,     0,  2317,   762,   795,
      16,    17,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,  2318,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,    19,  4026,  4026,     0,
       0,     0,  4237,     0,     0,     0,     0,   797,   798,  1190,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,     0,     0,
       0,     0,    22,     0,   762,    23,     0,     0,   762,     0,
    2322,     0,     0,   762,   762,     0,  1741,     0,  2324,     0,
       0,   799,   762,     0,  1756,   762,     0,     0,    24,     0,
      25,     0,     0,     0,     0,   762,     0,   762,   762,     0,
     762,   762,   762,   762,   762,     0,    26,   762,     0,     0,
     800,     0,     0,     0,     0,     0,   762,     0,     0,     0,
       0,     0,     0,    27,   762,     0,   762,    28,   762,   762,
     762,   762,   801,  1191,   802,   762,   762,   762,     0,     0,
       0,     0,   762,   762,   762,  2330,   762,     0,   762,     0,
     762,     0,   762,     0,   762,     0,     0,  1192,     0,   762,
       0,  1193,     0,     0,     0,  1420,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   762,     0,     0,
       0,     0,     0,     0,   762,     0,     0,   762,     0,     0,
       0,     0,     0,   762,  1194,     0,   762,     0,     0,     0,
     762,  2331,     0,   780,     0,     0,     0,     0,     0,     0,
       0,  1195,     0,     0,     0,     0,     0,  2332,     0,    29,
    2333,     0,     0,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
       0,  1428,  1429,  1430,  1431,  1432,  1433,  1434,    30,  1435,
    1436,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,   762,  2335,     0,     0,    32,
       0,     0,     0,     0,  2296,  2297,     0,     0,     0,     0,
       0,  1196,     0,     0,  1963,     0,     0,     0,     0,     0,
       0,    33,     0,     0,    34,   781,    35,     0,     0,    36,
       0,     0,    37,    38,  1197,     0,     0,  -736,  -736,  2299,
      39,     0,    40,     0,     0,     0,     0,  -736,     0,    41,
       0,     0,     0,  2302,   782,    42,     0,     0,     0,     0,
       0,  2303,     0,    43,     0,     0,     0,   783,    44,     0,
      45,     0,     0,    46,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2305,     0,     0,     0,     0,
     784,     0,   785,     0,     0,     0,     0,    47,     0,  1386,
       0,    48,  2306,   786,  1437,  1438,     0,     0,     0,     0,
    2038,  2040,  2042,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   787,     0,     0,     0,     0,     0,     0,
    2311,     0,     0,     0,  1198,     0,     0,     0,     0,     0,
       0,     0,     0,  1199,    49,     0,     0,     0,   788,     0,
    2076,     0,     0,     0,   789,     0,    50,     0,  1200,  2081,
      51,  2082,     0,    52,     0,     0,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,  1201,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,     0,    54,     0,  2314,     0,     0,
       0,     0,     1,     2,  2315,     0,     0,     0,     0,     0,
      55,     0,     0,     0,     0,  1202,  1203,     0,     0,  2316,
       0,     0,     0,     4,     0,     0,     0,     0,     0,     0,
       0,     0,  2413,     0,     0,     0,  2160,     5,     6,     0,
    1204,     0,     0,     0,     0,     7,     0,     0,     0,     8,
       9,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    10,     0,     0,     0,     0,
       0,     0,     0,  2317,     0,     0,     0,     0,     0,     0,
       0,     0,   762,     0,    11,     0,   762,     0,     0,     0,
       0,  2318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,   762,   762,
       0,     0,     0,    13,    14,    15,     0,     0,     0,     0,
     791,     0,     0,     0,     0,    16,    17,     0,   762,     0,
       0,     0,     0,     0,     0,     0,     0,   762,     0,   762,
     793,   762,     0,     0,     0,     0,  2322,     0,   794,     0,
       0,    19,     0,     0,  2324,     0,   795,     0,     0,     0,
       0,   762,     0,     0,     0,     0,   762,    20,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,    21,     0,     0,     0,     0,    22,     0,     0,
      23,   762,     0,     0,   797,   798,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2356,     0,     0,    24,     0,    25,     0,     0,     0,     0,
       0,  2330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,   799,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,    28,     0,   762,     0,     0,     0,   762,     0,
       0,     0,     0,     0,     0,     0,     0,   800,     0,     0,
       0,     0,     0,     0,     0,     0,  2434,  2331,     0,     0,
    2436,     0,     0,     0,     0,  2438,  2439,     0,     0,   801,
       0,   802,     0,  2332,  2454,     0,  2333,     0,     0,     0,
       0,     0,   762,     0,     0,     0,     0,  2461,     0,  2462,
       0,     0,  2464,  2465,  2466,  2467,  2468,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2472,     0,
       0,     0,  2335,     0,     0,     0,  2473,     0,  2474,     0,
    2475,  2476,  2477,     0,    29,     0,     0,  2480,  2481,  2482,
       0,     0,     0,     0,  2484,  2485,  2486,     0,  2487,     0,
    2489,     0,  2491,    30,  2493,     0,  2494,     0,     0,     0,
       0,  2495,     0,    31,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    32,  2414,     0,     0,     0,  2508,
       0,     0,     0,     0,     0,   762,   762,     0,     0,     0,
       0,     0,     0,     0,     0,  2518,    33,     0,  2521,    34,
       0,    35,     0,     0,    36,     0,     0,    37,    38,     0,
       0,     0,     0,     0,     0,    39,     0,    40,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
      42,     0,     0,     0,     0,     0,     0,     0,    43,     0,
       0,     0,     0,    44,     0,    45,     0,     0,    46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   762,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0,     0,    48,     0,     0,     0,
       0,     0,   762,   762,     0,   762,     0,     0,     0,     0,
       0,     0,     0,     0,   762,     0,     0,     0,     0,   762,
       0,     0,   762,     0,   762,   762,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
       0,     0,     0,     0,     0,   762,     0,     0,     0,     0,
       0,    50,     0,     0,     0,    51,     0,     0,    52,     0,
     762,     0,     0,    53,     0,     0,     0,     0,     0,     0,
    3275,  3276,     0,     0,     0,     0,  3277,     0,  3278,     0,
    3279,  3280,     0,   762,     0,     0,     0,     0,     0,     0,
      54,     0,     0,     0,     0,     0,     0,  3281,     0,     0,
       0,     0,     0,     0,     0,    55,     0,     0,     0,     0,
       0,     0,     0,   762,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   762,     0,     0,
       0,     0,     0,     0,     0,  3063,     0,     0,     0,     0,
       0,     0,  2294,     0,     0,  3282,     0,   762,  3283,     0,
       0,     0,     0,     0,  2296,  2297,  3284,     0,     0,     0,
       0,   869,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   826,   870,  3285,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2298,     0,     0,     0,  2299,
    3286,     0,     0,     0,     0,     0,   871,   872,     0,     0,
       0,     0,     0,  2302,     0,     0,     0,   873,     0,     0,
       0,  2303,     0,  3287,     0,  3288,     0,     0,     0,     0,
       0,  2304,     0,     0,     0,     0,     0,  3289,  3290,   874,
       0,   875,     0,   876,     0,  2305,     0,     0,     0,     0,
       0,     0,   877,     0,     0,     0,     0,     0,     0,  1386,
       0,     0,  2306,     0,     0,     0,     0,     0,     0,  2307,
       0,     0,     0,     0,  2816,     0,  3064,  3291,  2818,     0,
       0,     0,     0,     0,  2310,     0,     0,     0,     0,     0,
    2311,     0,     0,     0,     0,     0,     0,     0, -1679,   878,
    2837,  2838,     0,     0,   879,  3292,     0,   880,     0,     0,
       0,     0,     0,     0,  3293,  3294,     0,  3295,  2312,     0,
    2858,     0,     0,     0,     0,     0,     0,     0,     0,  2868,
       0,  2870,   881,  2872,   882,     0,     0,     0,     0,     0,
     883,     0,   884,     0,     0,     0,     0,     0,  3296,  3297,
    3298,     0,     0,     0,     0,     0,     0,  2314,     0,   762,
       0,     0,     0,     0,  2315,   885,   886,  3299,  3300,  3301,
       0,     0,     0,     0,  3302,     0,     0,  3303,     0,  2316,
       0,     0,     0,  2902,     0,     0,     0,   887,     0,     0,
       0,     0,     0,  3304,  3305,     0,     0,     0,   762,   762,
       0,     0,     0,     0,     0,     0,     0,   762,   888,     0,
       0,     0,   762,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3306,  3307,     0,
       0,     0,     0,  2317,     0,     0,   889,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2957,     0,     0,     0,
    2961,  2318,  3308,     0,     0,  2319,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2992,     0,     0,     0,     0,  2321,
       0,     0,   890,  3309,     0,     0,  2322,  3310,     0,     0,
       0,     0,     0,     0,  2324,     0,     0,     0,     0,  3311,
       0,     0,     0,     0,     0,   891,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   892,   893,     0,     0,
     894,   895,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   762,     0,     0,     0,     0,     0,  2327,
       0,   896,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3312,     0,     0,  3313,     0,     0,  3314,  3315,  3316,
    3317,  2330,     0,     0,   762,     0,     0,  3078,  3079,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   762,     0,
       0,     0,     0,     0,   897,     0,     0,     0,     0,     0,
       0,   762,     0,     0,     0,     0,     0,   898,     0,  3318,
    3319,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2331,     0,     0,
       0,     0, -2210,  3320,     0,     0,   899,     0,     0,     0,
       0,     0,     0,  2332,     0,     0,  2333,     0,     0,     0,
    3125,     0,     0,     0,   900,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3144,  3145,     0,     0,     0,     0,
       0,     0,  2335,     0,     0,     0,  3152,     0,     0,     0,
       0,  3154,     0,     0,  3155,     0,  3156,  3157,     0,     0,
       0,  3715,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -2210,     0,     0,     0,     0,     0,   901,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3174,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   762,
       0,     0,     0,     0,     0,  3174,     0,     0,     0,   762,
       0,     0,     0,     0,     0,     0,     0,     0,   762,     0,
     762,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3219,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3174,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   762,     0,     0,     0,     0,
       0,  3715,  3715,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     762,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   762,     0,   762,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   762,     0,  3715,  3715,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3174,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3450,  3451,     0,     0,     0,     0,     0,     0,     0,  2992,
       0,     0,     0,     0,  3465,     0,     0,     0,     0,   762,
       0,  3715,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3715,   762,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4042,
       0,     0,     0,   762,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   762,  3715,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3715,  3715,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   762,     0,
       0,     0,     0,     0,     0,  3570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3715,     0,     0,     0,     0,     0,  3174,   762,     0,     0,
    3715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2992,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2957,     0,     0,     0,     0,     0,     0,
       0,   762,     0,     0,     0,     0,     0,     0,  3715,     0,
    3715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3715,     0,     0,     0,   762,     0,     0,   762,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3715,     0,
    3715,     0,  3715,     0,     0,     0,     0,     0,     0,  3715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3715,  3715,     0,     0,
       0,     0,   762,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3715,  3715,     0,     0,     0,  3715,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   762,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3774,     0,     0,     0,     0,     0,     0,     0,     0,
    3779,     0,  3781,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3812,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2992,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3912,     0,  3913,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3921,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4024,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4029,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3174,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4080,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4130,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   136,     0,   639,   138,   139,   140,
     141,     0,     0,  4157,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,  4176,
     154,   155,   156,  1589,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,  4224,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,  3174,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,  1590,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,  1591,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,  2953,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,  2954,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,  2955,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,  2956,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,  1505,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,  2037,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,  2039,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,  2041,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,  1064,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,  1623,     0,     0,     0,     0,  1624,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,     0,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,  2433,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,  2479,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,  3173,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,   693,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,  4103,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,     0,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,   677,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,     0,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,  1638,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,     0,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   639,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   640,
       0,   144,   145,   146,   147,   148,   641,   150,     0,   151,
       0,     0,   642,   152,   643,   644,   645,   153,   646,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,   647,   648,   161,   162,     0,   163,   649,   650,   165,
       0,   166,   167,   168,   169,   651,   171,     0,   652,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   653,   189,     0,
     190,   654,   655,   191,     0,     0,   192,   656,   657,     0,
     193,   658,   659,     0,   194,   195,   196,   660,   661,   662,
       0,     0,     0,     0,   663,   199,   664,     0,     0,   665,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,   666,     0,   224,   225,   226,   667,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   670,   238,
     671,   240,     0,   241,     0,   672,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   674,   248,
     249,   250,   675,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,   676,   255,   256,  1640,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,   678,   266,
     267,     0,     0,     0,     0,     0,   679,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
     681,   290,   291,   292,   293,   682,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   683,   301,     0,     0,
     684,   303,   685,   304,     0,   305,   686,   687,   688,   689,
     690,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,   692,     0,   694,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   697,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,   698,   335,
     336,   337,   338,   339,   699,   341,   342,   343,   700,   701,
     346,   702,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   703,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,   704,   705,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,   706,   381,   382,   383,
     384,   385,   707,   387,   388,   389,   390,     0,   708,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,   709,   710,   415,   416,     0,   417,
     418,   711,   420,   421,   422,   712,   713,   423,   424,   425,
     426,   714,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,   716,   717,   718,   719,     0,
       0,     0,     0,     0,   439,   440,     0,   720,   721,   722,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   725,   455,     0,     0,   726,   727,   728,   729,   456,
       0,     0,   457,   730,     0,   731,   458,   459,   460,   732,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   733,     0,     0,     0,   734,   735,
       0,     0,     0,     0,   736,   737,     0,     0,   738,   739,
       0,     0,   740,   741,   136,     0,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,     0,   152,   643,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,  2181,
       0,     0,     0,     0,   198,   199,   664,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,   668,   227,
     228,     0,   229,   230,   231,   669,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,   673,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,     0,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,   680,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   691,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,   695,   696,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   715,   433,   434,     0,  2182,   436,   437,  2183,     0,
       0,     0,     0,     0,   439,   440,     0,     0,   721,   441,
     442,   443,   444,   723,   445,   446,   724,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   467,     0,     0,     0,     0,   136,
       0,   137,   138,   139,   140,   141,     0,     0,     0,     0,
       0,   142,   740,   741,   143,     0,   144,   145,   146,   147,
     148,   149,   150,     0,   151,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,   158,   159,     0,     0,   160,     0,     0,   161,   162,
       0,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,  2674,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,   628,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,  1884,     0,   254,     0,     0,     0,     0,   255,
     256,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,     0,     0,     0,   262,  1885,     0,   263,   264,     0,
       0,   265,     0,     0,   266,   267,     0,  2790,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,     0,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,   321,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,   330,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,   335,   336,   337,   338,  2791,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,  -437,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,   629,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,     0,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,   439,
     440,     0,     0,     0,   441,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,   451,
       0,     0,   452,     0,   453,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   462,   463,     0,   464,   465,   466,     0,     0,   467,
       0,     0,   136,     0,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,     0,     0,   143,  2739,   144,
     145,   146,   147,   148,   149,   150,     0,   151,     0,     0,
       0,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,   158,   159,     0,     0,   160,     0,
       0,   161,   162,     0,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,  2674,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,   628,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,  1884,     0,   254,     0,     0,
       0,     0,   255,   256,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,     0,     0,     0,   262,  1885,     0,
     263,   264,     0,     0,   265,     0,     0,   266,   267,     0,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,   321,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,   330,     0,   331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,   334,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,   629,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,     0,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,   441,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,   449,   450,
       0,     0,   451,     0,     0,   452,     0,   453,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,   462,   463,     0,   464,   465,   466,
       0,     0,   467,     0,     0,   136,     0,   137,   138,   139,
     140,   141,     0,     0,     0,     0,     0,   142,     0,     0,
     143,  2739,   144,   145,   146,   147,   148,   149,   150,     0,
     151,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,   158,   159,     0,
       0,   160,     0,     0,   161,   162,     0,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,   256,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,     0,     0,     0,
     262,     0,     0,   263,   264,     0,     0,   265,     0,     0,
     266,   267,     0,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,     0,     0,     0,
     321,   322,     0,     0,     0,     0,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,  2172,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,     0,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
     441,   442,   443,   444,     0,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,   451,     0,     0,   452,     0,
     453,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   462,   463,     0,
     464,   465,   466,     0,     0,   467,     0,     0,   136,     0,
     137,   138,   139,   140,   141,     0,     0,  2572,     0,     0,
     142,     0,     0,   143,   741,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,     0,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,     0,   467,     0,
       0,     0,     0,   136,     0,   137,   138,   139,   140,   141,
    4229,     0,     0,     0,     0,   142,  4230,   741,   143,     0,
     144,   145,   146,   147,   148,   149,   150,     0,   151,     0,
       0,     0,   152,     0,     0,     0,   153,     0,     0,   154,
     155,   156,     0,   157,     0,   158,   159,     0,     0,   160,
       0,     0,   161,   162,     0,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,     0,   254,     0,
       0,     0,     0,   255,   256,     0,     0,     0,   257,     0,
     258,   259,     0,   260,   261,     0,     0,     0,   262,     0,
       0,   263,   264,     0,     0,   265,     0,     0,   266,   267,
       0,     0,     0,     0,     0,   268,   269,     0,   270,     0,
     271,     0,   272,   273,     0,     0,     0,     0,     0,     0,
       0,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,   287,   288,   289,     0,
     290,   291,   292,   293,     0,   294,   295,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,     0,     0,   302,
     303,     0,   304,     0,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,     0,   315,   316,     0,
       0,   317,   318,   319,   320,     0,     0,     0,   321,   322,
       0,     0,     0,     0,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,   349,     0,   350,     0,   351,   352,
     353,   354,   355,     0,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,     0,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,     0,
       0,   433,   434,     0,   435,   436,   437,   438,     0,     0,
       0,     0,     0,   439,   440,     0,     0,     0,   441,   442,
     443,   444,     0,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,   451,     0,     0,   452,     0,   453,     0,
     454,   455,     0,     0,     0,     0,     0,     0,   456,     0,
       0,   457,     0,     0,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,     0,   462,   463,     0,   464,   465,
     466,     0,     0,   467,     0,     0,   136,     0,   137,   138,
     139,   140,   141,     0,  1068,     0,     0,     0,   142,     0,
       0,   143,   741,   144,   145,   146,   147,   148,   149,   150,
       0,   151,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,   158,   159,
       0,     0,   160,     0,     0,   161,   162,     0,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,   256,     0,  1261,
       0,   257,     0,   258,   259,     0,   260,   261,     0,     0,
       0,   262,     0,     0,   263,   264,     0,     0,   265,     0,
       0,   266,   267,     0,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,   321,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,     0,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,   449,   450,     0,     0,   451,     0,     0,   452,
       0,   453,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,     0,   462,   463,
       0,   464,   465,   466,     0,     0,   467,     0,     0,   136,
       0,   137,   138,   139,   140,   141,     0,     0,     0,     0,
       0,   142,     0,     0,   143,   510,   144,   145,   146,   147,
     148,   149,   150,     0,   151,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,   158,   159,     0,     0,   160,     0,     0,   161,   162,
       0,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,     0,   254,     0,     0,     0,     0,   255,
     256,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,     0,     0,     0,   262,     0,     0,   263,   264,     0,
       0,   265,     0,     0,   266,   267,     0,     0,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,     0,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,   321,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,   330,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,     0,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,   439,
     440,     0,     0,     0,   441,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,   451,
       0,     0,   452,     0,   453,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   462,   463,     0,   464,   465,   466,     0,     0,   467,
       0,     0,     0,     0,   136,  2114,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,   510,   143,
       0,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,     0,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,     0,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,     0,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,   441,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   467,     0,     0,   136,     0,   137,
     138,   139,   140,   141,     0,  2738,     0,     0,     0,   142,
       0,     0,   143,  2739,   144,   145,   146,   147,   148,   149,
     150,     0,   151,     0,     0,     0,   152,     0,     0,     0,
     153,     0,     0,   154,   155,   156,     0,   157,     0,   158,
     159,     0,     0,   160,     0,     0,   161,   162,     0,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,     0,   254,     0,     0,     0,     0,   255,   256,     0,
       0,     0,   257,     0,   258,   259,     0,   260,   261,     0,
       0,     0,   262,     0,     0,   263,   264,     0,     0,   265,
       0,     0,   266,   267,     0,     0,     0,     0,     0,   268,
     269,     0,   270,     0,   271,     0,   272,   273,     0,     0,
       0,     0,     0,     0,     0,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   289,     0,   290,   291,   292,   293,     0,   294,
     295,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,     0,     0,   302,   303,     0,   304,     0,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
       0,   315,   316,     0,     0,   317,   318,   319,   320,     0,
       0,     0,   321,   322,     0,     0,     0,     0,   323,   324,
     325,   326,     0,   327,   328,   329,   330,     0,   331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,   349,     0,
     350,     0,   351,   352,   353,   354,   355,     0,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,     0,     0,   433,   434,     0,   435,   436,
     437,   438,     0,     0,     0,     0,     0,   439,   440,     0,
       0,     0,   441,   442,   443,   444,     0,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,   451,     0,     0,
     452,     0,   453,     0,   454,   455,     0,     0,     0,     0,
       0,     0,   456,     0,     0,   457,     0,     0,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,     0,   462,
     463,     0,   464,   465,   466,     0,     0,   467,     0,     0,
       0,     0,   136,     0,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,  4230,   741,   143,     0,   144,
     145,   146,   147,   148,   149,   150,     0,   151,     0,     0,
       0,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,   158,   159,     0,     0,   160,     0,
       0,   161,   162,     0,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,     0,   254,     0,     0,
       0,     0,   255,   256,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,     0,     0,     0,   262,     0,     0,
     263,   264,     0,     0,   265,     0,     0,   266,   267,     0,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,   321,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,   330,     0,   331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,   334,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,     0,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,   441,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,   449,   450,
       0,     0,   451,     0,     0,   452,     0,   453,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,   462,   463,     0,   464,   465,   466,
       0,     0,   467,     0,     0,   136,     0,   137,   138,   139,
     140,   141,     0,     0,     0,     0,     0,   142,     0,     0,
     143,   510,   144,   145,   146,   147,   148,   149,   150,     0,
     151,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,   158,   159,     0,
       0,   160,     0,     0,   161,   162,     0,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   576,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,   256,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,     0,     0,     0,
     262,     0,     0,   263,   264,     0,     0,   265,     0,     0,
     266,   267,     0,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,     0,     0,     0,
     321,   322,     0,     0,     0,     0,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
     335,   336,   337,   577,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,     0,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
     441,   442,   443,   444,     0,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,   451,     0,     0,   452,     0,
     453,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   462,   463,     0,
     464,   465,   466,     0,     0,   467,     0,     0,   136,     0,
     137,   138,   139,   140,   141,     0,     0,     0,     0,     0,
     142,     0,     0,   143,   510,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,     0,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,     0,   467,     0,
       0,   136,     0,   137,   138,   139,   140,   141,     0,     0,
       0,     0,     0,   142,     0,     0,   143,   741,   144,   145,
     146,   147,   148,   149,   150,     0,   151,     0,     0,     0,
     152,     0,     0,     0,   153,     0,     0,   154,   155,   156,
       0,   157,     0,   158,   159,     0,     0,   160,     0,     0,
     161,   162,     0,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,     0,   254,     0,     0,     0,
       0,   255,   256,     0,     0,     0,   257,     0,   258,   259,
       0,   260,   261,     0,     0,     0,   262,     0,     0,   263,
     264,     0,     0,   265,     0,     0,   266,   267,     0,     0,
       0,     0,     0,   268,   269,     0,   270,     0,   271,     0,
     272,   273,     0,     0,     0,     0,     0,     0,     0,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,   287,   288,   289,     0,   290,   291,
     292,   293,     0,   294,   295,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,     0,     0,   302,   303,     0,
     304,     0,   305,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,     0,   315,   316,     0,     0,   317,
     318,   319,   320,     0,     0,     0,   321,   322,     0,     0,
       0,     0,   323,   324,   325,   326,     0,   327,   328,   329,
     330,     0,   331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,   349,     0,   350,     0,   351,   352,   353,   354,
     355,     0,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,     0,     0,   433,
     434,     0,   435,   436,   437,   438,     0,     0,     0,     0,
       0,   439,   440,     0,     0,     0,   441,   442,   443,   444,
       0,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,   451,     0,     0,   452,     0,   453,     0,   454,   455,
       0,     0,     0,     0,     0,     0,   456,     0,     0,   457,
       0,     0,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,     0,   462,   463,     0,   464,   465,   466,     0,
       0,   467,     0,     0,   136,     0,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   143,
    2739,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,     0,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,   588,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   133,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,   441,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,     0,   467,     0,   136,     0,   137,   138,
     139,   140,   141,     0,     0,     0,     0,     0,   142,     0,
       0,   143,  1610,   144,   145,   146,   147,   148,   149,   150,
       0,   151,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,   158,   159,
       0,     0,   160,     0,     0,   161,   162,     0,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,   256,     0,     0,
       0,   257,     0,   258,   259,     0,   260,   261,     0,     0,
       0,   262,     0,     0,   263,   264,     0,     0,   265,     0,
       0,   266,   267,   588,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,   321,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,   133,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,   449,   450,     0,     0,   451,     0,     0,   452,
       0,   453,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,     0,   462,   463,
       0,   464,   465,   466,     0,     0,   467,     0,   136,     0,
     137,   138,   139,   140,   141,     0,     0,     0,     0,     0,
     142,     0,     0,   143,  2612,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,   588,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,   133,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,     0,   467,     0,
     136,     0,   137,   138,   139,   140,   141,     0,     0,     0,
       0,     0,   142,     0,     0,     0,  3204,   144,   145,   146,
     147,   148,   149,     0,     0,  -328,     0,     0,     0,   152,
       0,     0,     0,   153,     0,     0,   154,   155,   156,     0,
     157,     0,     0,     0,     0,     0,   160,  3688,     0,   161,
     162,     0,   163,     0,     0,     0,     0,   166,   167,   168,
    3689,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     177,     0,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,     0,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,     0,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,     0,     0,     0,     0,     0,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,     0,     0,     0,   208,   209,   210,     0,     0,     0,
     211,     0,     0,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,     0,     0,     0,
     224,   225,   226,     0,     0,   227,   228,  3690,   229,   230,
     231,     0,     0,     0,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3691,     0,
     251,   252,   253,     0,     0,   254,     0,     0,     0,     0,
     255,     0,     0,     0,     0,   257,     0,   258,   259,     0,
     260,   261,  3692,     0,     0,   262,     0,     0,     0,   264,
       0,     0,   265,  3693,     0,   266,   267,     0,     0,     0,
       0,     0,   268,   269,     0,   270,     0,   271,     0,   272,
     273,     0,     0,     0,     0,  -283,     0,     0,     0,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,   287,   288,   289,     0,   290,   291,   292,
     293,     0,   294,   295,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,     0,     0,   302,   303,     0,   304,
       0,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,     0,   315,   316,     0,     0,   317,   318,
     319,   320,     0,     0,     0,     0,   322,     0,     0,     0,
       0,   323,   324,   325,   326,     0,   327,   328,   329,  3694,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   333,   334,     0,     0,   336,   337,   338,     0,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     348,   349,     0,   350,     0,   351,   352,   353,   354,   355,
       0,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,     0,     0,   372,     0,   374,  -283,
       0,   375,     0,     0,     0,   377,     0,     0,   379,   380,
    3695,     0,     0,     0,   382,   383,   384,   385,   386,   387,
       0,   389,   390,     0,   391,     0,     0,     0,     0,   393,
     394,   395,     0,     0,     0,     0,   397,     0,     0,     0,
     398,     0,     0,   400,     0,   402,     0,   403,     0,     0,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,   411,     0,     0,   412,     0,   414,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,     0,     0,   433,   434,
       0,   435,   436,   437,   438,     0,     0,     0,     0,     0,
     439,   440,     0,     0,     0,     0,   442,   443,   444,     0,
     445,   446,     0,   447,   448,     0,     0,     0,     0,     0,
     451,     0,     0,   452,     0,     0,     0,   454,   455,     0,
       0,     0,     0,     0,     0,   456,     0,     0,   457,     0,
       0,     0,   458,   459,   460,   461,     0,     0,  -283,     0,
       0,     0,   462,     0,     0,   464,     0,   466,     0,   136,
     467,   137,   138,   139,   140,   141,     0,     0,     0,     0,
       0,   142,     0,  4236,   143,     0,   144,   145,   146,   147,
     148,   149,   150,     0,   151,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,   158,   159,     0,     0,   160,     0,     0,   161,   162,
       0,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,     0,   254,     0,     0,     0,     0,   255,
     256,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,     0,     0,     0,   262,     0,     0,   263,   264,     0,
       0,   265,     0,     0,   266,   267,     0,     0,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,     0,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,   321,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,   330,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,     0,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,   439,
     440,     0,     0,     0,   441,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,   451,
       0,     0,   452,     0,   453,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   462,   463,     0,   464,   465,   466,     0,   136,   467,
     137,   138,   139,   140,   141,  1953,     0,     0,     0,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,     0,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,   136,   467,   137,
     138,   139,   140,   141,  2600,     0,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,     0,   151,     0,     0,     0,   152,     0,     0,     0,
     153,     0,     0,   154,   155,   156,     0,   157,     0,   158,
     159,     0,     0,   160,     0,     0,   161,   162,     0,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,     0,   254,     0,     0,     0,     0,   255,   256,     0,
       0,     0,   257,     0,   258,   259,     0,   260,   261,     0,
       0,     0,   262,     0,     0,   263,   264,     0,     0,   265,
       0,     0,   266,   267,     0,     0,     0,     0,     0,   268,
     269,     0,   270,     0,   271,     0,   272,   273,     0,     0,
       0,     0,     0,     0,     0,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   289,     0,   290,   291,   292,   293,     0,   294,
     295,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,     0,     0,   302,   303,     0,   304,     0,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
       0,   315,   316,     0,     0,   317,   318,   319,   320,     0,
       0,     0,   321,   322,     0,     0,     0,     0,   323,   324,
     325,   326,     0,   327,   328,   329,   330,     0,   331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,   349,     0,
     350,     0,   351,   352,   353,   354,   355,     0,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,     0,     0,   433,   434,     0,   435,   436,
     437,   438,     0,     0,     0,     0,     0,   439,   440,     0,
       0,     0,   441,   442,   443,   444,     0,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,   451,     0,     0,
     452,     0,   453,     0,   454,   455,     0,     0,     0,     0,
       0,     0,   456,     0,     0,   457,     0,     0,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,     0,   462,
     463,     0,   464,   465,   466,     0,   136,   467,   137,   138,
     139,   140,   141,  2897,     0,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
       0,   151,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,   158,   159,
       0,     0,   160,     0,     0,   161,   162,     0,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,   256,     0,     0,
       0,   257,     0,   258,   259,     0,   260,   261,     0,     0,
       0,   262,     0,     0,   263,   264,     0,     0,   265,     0,
       0,   266,   267,     0,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,   321,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,     0,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,   449,   450,     0,     0,   451,     0,     0,   452,
       0,   453,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,     0,   462,   463,
       0,   464,   465,   466,     0,   136,   467,   137,   138,   139,
     140,   141,  3209,     0,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,     0,
     151,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,   158,   159,     0,
       0,   160,     0,     0,   161,   162,     0,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,  2273,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,  2274,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,  2275,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,   256,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,     0,     0,     0,
     262,     0,     0,   263,   264,     0,     0,   265,     0,     0,
     266,   267,     0,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,  2276,     0,
       0,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,   984,   985,     0,
     321,   322,     0,     0,  2277,     0,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,  4216,
     535,  4217,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,     0,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
     441,   442,   443,   444,  2278,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,   451,     0,     0,   452,     0,
     453,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   462,   463,     0,
     464,   465,   466,     0,   136,   467,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,  2451,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,  2606,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,  2095,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,   588,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,  2096,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   133,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,   441,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,   136,   467,   137,   138,   139,   140,   141,
       0,     0,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,     0,   151,     0,
       0,     0,   152,     0,     0,     0,   153,     0,     0,   154,
     155,   156,     0,   157,     0,   158,   159,     0,     0,   160,
       0,     0,   161,   162,     0,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,     0,   254,     0,
       0,     0,     0,   255,   256,     0,     0,     0,   257,     0,
     258,   259,     0,   260,   261,     0,     0,     0,   262,     0,
       0,   263,   264,     0,     0,   265,     0,     0,   266,   267,
       0,     0,     0,     0,     0,   268,   269,     0,   270,     0,
     271,     0,   272,   273,     0,     0,  1770,     0,     0,     0,
       0,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,   287,   288,   289,     0,
     290,   291,   292,   293,     0,   294,   295,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,     0,     0,   302,
     303,     0,   304,     0,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,     0,   315,   316,     0,
       0,   317,   318,   319,   320,     0,     0,     0,   321,   322,
       0,     0,  1771,     0,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,   698,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,   349,     0,   350,     0,   351,   352,
     353,   354,   355,     0,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,     0,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,     0,
       0,   433,   434,     0,   435,   436,   437,   438,     0,     0,
       0,     0,     0,   439,   440,     0,     0,     0,   441,   442,
     443,   444,  1772,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,   451,     0,     0,   452,     0,   453,     0,
     454,   455,     0,     0,     0,     0,     0,     0,   456,     0,
       0,   457,     0,     0,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,     0,   462,   463,     0,   464,   465,
     466,     0,   136,   467,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,     0,   151,     0,     0,
    2614,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,   158,   159,     0,     0,   160,     0,
       0,   161,   162,     0,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,  2615,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,     0,   254,     0,     0,
       0,     0,   255,   256,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,     0,     0,     0,   262,     0,     0,
     263,   264,     0,     0,   265,     0,     0,   266,   267,   588,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,   321,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,   330,     0,   331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,   334,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,   133,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,   441,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,   449,   450,
       0,     0,   451,     0,     0,   452,     0,   453,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,   462,   463,     0,   464,   465,   466,
       0,   136,   467,   137,   138,   139,   140,   141,     0,     0,
       0,     0,     0,   142,     0,     0,   143,     0,   144,   145,
     146,   147,   148,   149,   150,     0,   151,     0,     0,  2451,
     152,     0,     0,     0,   153,     0,     0,   154,   155,   156,
       0,   157,     0,   158,   159,     0,     0,   160,     0,     0,
     161,   162,     0,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,  2606,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,     0,   254,     0,     0,     0,
       0,   255,   256,     0,     0,     0,   257,     0,   258,   259,
       0,   260,   261,     0,     0,     0,   262,     0,     0,   263,
     264,     0,     0,   265,     0,     0,   266,   267,   588,     0,
       0,     0,     0,   268,   269,     0,   270,     0,   271,     0,
     272,   273,     0,     0,     0,     0,     0,     0,     0,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,   287,   288,   289,     0,   290,   291,
     292,   293,     0,   294,   295,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,     0,     0,   302,   303,     0,
     304,     0,   305,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,     0,   315,   316,     0,     0,   317,
     318,   319,   320,     0,     0,     0,   321,   322,     0,     0,
       0,     0,   323,   324,   325,   326,     0,   327,   328,   329,
     330,     0,   331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,   349,     0,   350,     0,   351,   352,   353,   354,
     355,     0,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,     0,   133,   433,
     434,     0,   435,   436,   437,   438,     0,     0,     0,     0,
       0,   439,   440,     0,     0,     0,   441,   442,   443,   444,
       0,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,   451,     0,     0,   452,     0,   453,     0,   454,   455,
       0,     0,     0,     0,     0,     0,   456,     0,     0,   457,
       0,     0,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,     0,   462,   463,     0,   464,   465,   466,     0,
     136,   467,   137,   138,   139,   140,   141,     0,     0,     0,
       0,     0,   142,     0,     0,   143,     0,   144,   145,   146,
     147,   148,   149,   150,     0,   151,     0,     0,     0,   152,
       0,     0,     0,   153,     0,     0,   154,   155,   156,     0,
     157,     0,   158,   159,     0,     0,   160,     0,     0,   161,
     162,     0,   163,   164,     0,   165,     0,   166,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,   188,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,   943,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,   199,     0,     0,     0,     0,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,   207,     0,     0,   208,   209,   210,     0,     0,     0,
     211,     0,   212,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,     0,   254,     0,     0,     0,     0,
     255,   256,     0,     0,     0,   257,     0,   258,   259,     0,
     260,   261,     0,     0,     0,   262,     0,     0,   263,   264,
       0,     0,   265,     0,     0,   266,   267,   588,     0,     0,
       0,     0,   268,   269,     0,   270,     0,   271,     0,   272,
     273,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,   287,   288,   289,     0,   290,   291,   292,
     293,     0,   294,   295,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,     0,     0,   302,   303,     0,   304,
       0,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,     0,   315,   316,     0,     0,   317,   318,
     319,   320,     0,     0,     0,   321,   322,     0,     0,     0,
       0,   323,   324,   325,   326,     0,   327,   328,   329,   330,
       0,   331,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,   334,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,   349,     0,   350,     0,   351,   352,   353,   354,   355,
       0,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,   411,     0,     0,   412,   413,   414,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,     0,   133,   433,   434,
       0,   435,   436,   437,   438,     0,     0,     0,     0,     0,
     439,   440,     0,     0,     0,   441,   442,   443,   444,     0,
     445,   446,     0,   447,   448,     0,   449,   450,     0,     0,
     451,     0,     0,   452,     0,   453,     0,   454,   455,     0,
       0,     0,     0,     0,     0,   456,     0,     0,   457,     0,
       0,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,     0,   462,   463,     0,   464,   465,   466,     0,   136,
     467,   137,   138,   139,   140,   141,  1314,     0,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,     0,   151,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,   158,   159,     0,     0,   160,     0,     0,   161,   162,
       0,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,     0,   254,     0,     0,     0,     0,   255,
     256,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,     0,     0,     0,   262,     0,     0,   263,   264,     0,
       0,   265,     0,     0,   266,   267,   588,     0,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,     0,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,   321,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,   330,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,   133,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,   439,
     440,     0,     0,     0,   441,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,   451,
       0,     0,   452,     0,   453,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   462,   463,     0,   464,   465,   466,     0,   136,   467,
     137,   138,   139,   140,   141,     0,     0,     0,     0,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,   921,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,   922,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,   923,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,   136,   467,   137,
     138,   139,   140,   141,     0,     0,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,     0,   151,     0,     0,  2451,   152,     0,     0,     0,
     153,     0,     0,   154,   155,   156,     0,   157,     0,   158,
     159,     0,     0,   160,     0,     0,   161,   162,     0,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,     0,   254,     0,     0,     0,     0,   255,   256,     0,
       0,     0,   257,     0,   258,   259,     0,   260,   261,     0,
       0,     0,   262,     0,     0,   263,   264,     0,     0,   265,
       0,     0,   266,   267,   588,     0,     0,     0,     0,   268,
     269,     0,   270,     0,   271,     0,   272,   273,     0,     0,
       0,     0,     0,     0,     0,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   289,     0,   290,   291,   292,   293,     0,   294,
     295,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,     0,     0,   302,   303,     0,   304,     0,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
       0,   315,   316,     0,     0,   317,   318,   319,   320,     0,
       0,     0,   321,   322,     0,     0,     0,     0,   323,   324,
     325,   326,     0,   327,   328,   329,   330,     0,   331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,   349,     0,
     350,     0,   351,   352,   353,   354,   355,     0,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,     0,   133,   433,   434,     0,   435,   436,
     437,   438,     0,     0,     0,     0,     0,   439,   440,     0,
       0,     0,   441,   442,   443,   444,     0,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,   451,     0,     0,
     452,     0,   453,     0,   454,   455,     0,     0,     0,     0,
       0,     0,   456,     0,     0,   457,     0,     0,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,     0,   462,
     463,     0,   464,   465,   466,     0,   136,   467,   137,   138,
     139,   140,   141,     0,     0,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
       0,   151,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,   158,   159,
       0,     0,   160,     0,     0,   161,   162,     0,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,  2654,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,   256,     0,     0,
       0,   257,     0,   258,   259,     0,   260,   261,     0,     0,
       0,   262,     0,     0,   263,   264,     0,     0,   265,     0,
       0,   266,   267,   588,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,   321,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,   133,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,   449,   450,     0,     0,   451,     0,     0,   452,
       0,   453,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,     0,   462,   463,
       0,   464,   465,   466,     0,   136,   467,   137,   138,   139,
     140,   141,     0,     0,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,     0,
     151,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,   158,   159,     0,
       0,   160,     0,     0,   161,   162,     0,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,   256,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,     0,     0,     0,
     262,     0,     0,   263,   264,     0,     0,   265,     0,     0,
     266,   267,   588,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,     0,     0,     0,
     321,   322,     0,     0,     0,     0,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,   133,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
     441,   442,   443,   444,     0,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,   451,     0,     0,   452,     0,
     453,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   462,   463,     0,
     464,   465,   466,     0,   136,   467,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,  2596,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,     0,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,     0,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,   133,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,   441,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,   136,   467,   137,   138,   139,   140,   141,
       0,     0,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,     0,   151,     0,
       0,     0,   152,     0,     0,     0,   153,     0,     0,   154,
     155,   156,     0,   157,     0,   158,   159,     0,     0,   160,
       0,     0,   161,   162,     0,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,  4132,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,  4133,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,     0,   254,     0,
       0,     0,     0,   255,   256,     0,     0,     0,   257,     0,
     258,   259,     0,   260,   261,     0,     0,     0,   262,     0,
       0,   263,   264,     0,     0,   265,     0,     0,   266,   267,
       0,     0,     0,     0,     0,   268,   269,     0,   270,     0,
     271,     0,   272,   273,     0,     0,     0,     0,     0,     0,
       0,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,   287,   288,   289,     0,
     290,   291,   292,   293,     0,   294,   295,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,     0,     0,   302,
     303,     0,   304,     0,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,     0,   315,   316,     0,
       0,   317,   318,   319,   320,     0,     0,     0,   321,   322,
       0,     0,     0,     0,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,   349,     0,   350,     0,   351,   352,
     353,   354,   355,     0,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,     0,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,     0,
       0,   433,   434,     0,   435,   436,   437,   438,     0,     0,
       0,     0,     0,   439,   440,     0,     0,     0,   441,   442,
     443,   444,     0,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,   451,     0,     0,   452,     0,   453,     0,
     454,   455,     0,     0,     0,     0,     0,     0,   456,     0,
       0,   457,     0,     0,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,     0,   462,   463,     0,   464,   465,
     466,     0,   136,   467,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,     0,   151,     0,     0,
       0,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,   158,   159,     0,     0,   160,     0,
       0,   161,   162,     0,   163,   164,     0,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,   188,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,   199,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,   207,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,   212,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,   232,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
       0,   245,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,     0,   254,     0,     0,
       0,     0,   255,   256,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,     0,     0,     0,   262,     0,     0,
     263,   264,     0,     0,   265,     0,     0,   266,   267,     0,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,   321,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,   330,     0,   331,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   332,   333,   334,     0,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,   371,     0,   372,   373,
     374,     0,     0,   375,     0,   376,     0,   377,   378,     0,
     379,   380,     0,     0,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,     0,     0,
       0,   393,   394,   395,   396,     0,     0,     0,   397,     0,
       0,     0,   398,     0,   399,   400,   401,   402,     0,   403,
     404,   405,   406,   407,     0,     0,     0,   535,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,     0,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,   441,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,   449,   450,
       0,     0,   451,     0,     0,   452,     0,   453,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,   462,   463,     0,   464,   465,   466,
       0,   136,   467,   137,   138,   139,   140,   141,     0,     0,
       0,     0,     0,   142,     0,     0,   143,     0,   144,   145,
     146,   147,   148,   149,   150,     0,   151,     0,     0,     0,
     152,     0,     0,     0,   153,     0,     0,   154,   155,   156,
       0,   157,     0,   158,   159,     0,     0,   160,     0,     0,
     161,   162,     0,   163,   164,     0,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,   188,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,   199,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,   207,     0,     0,   208,   209,   210,     0,     0,
       0,   211,     0,   212,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,   223,     0,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,     0,     0,   232,     0,     0,     0,   233,  1020,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,     0,
     245,   246,     0,     0,     0,   247,   248,   249,   250,     0,
       0,   251,   252,   253,     0,     0,   254,     0,     0,     0,
       0,   255,   256,     0,     0,     0,   257,     0,   258,   259,
       0,   260,   261,     0,     0,     0,   262,     0,     0,   263,
     264,     0,     0,   265,     0,     0,   266,   267,     0,     0,
       0,     0,     0,   268,   269,     0,   270,     0,   271,     0,
     272,   273,     0,     0,     0,     0,     0,     0,     0,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,   287,   288,   289,     0,   290,   291,
     292,   293,     0,   294,   295,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,     0,     0,   302,   303,     0,
     304,     0,   305,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,     0,   315,   316,     0,     0,   317,
     318,   319,   320,     0,     0,     0,   321,   322,     0,     0,
       0,     0,   323,   324,   325,   326,     0,   327,   328,   329,
     330,     0,   331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   332,   333,   334,     0,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,   349,     0,   350,     0,   351,   352,   353,   354,
     355,     0,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,   371,     0,   372,   373,   374,
       0,     0,   375,     0,   376,     0,   377,   378,     0,   379,
     380,     0,     0,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,     0,     0,     0,
     393,   394,   395,   396,     0,     0,     0,   397,     0,     0,
       0,   398,     0,   399,   400,   401,   402,     0,   403,   404,
     405,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,     0,     0,   433,
     434,     0,   435,   436,   437,   438,     0,     0,     0,     0,
       0,   439,   440,     0,     0,     0,   441,   442,   443,   444,
       0,   445,   446,     0,   447,   448,     0,   449,   450,     0,
       0,   451,     0,     0,   452,     0,   453,     0,   454,   455,
       0,     0,     0,     0,     0,     0,   456,     0,     0,   457,
       0,     0,     0,   458,   459,   460,   461,     0,     0,     0,
       0,     0,     0,   462,   463,     0,   464,   465,   466,     0,
     136,   467,   137,   138,   139,   140,   141,     0,     0,     0,
       0,     0,   142,     0,     0,   143,     0,   144,   145,   146,
     147,   148,   149,   150,     0,   151,     0,     0,     0,   152,
       0,     0,     0,   153,     0,     0,   154,   155,   156,     0,
     157,     0,   158,   159,     0,     0,   160,     0,     0,   161,
     162,     0,   163,   164,     0,   165,     0,   166,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,   188,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,     0,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,   199,     0,     0,     0,  1877,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,   207,     0,     0,   208,   209,   210,     0,     0,     0,
     211,     0,   212,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,     0,     0,   232,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,     0,   245,
     246,     0,     0,     0,   247,   248,   249,   250,     0,     0,
     251,   252,   253,     0,     0,   254,     0,     0,     0,     0,
     255,   256,     0,     0,     0,   257,     0,   258,   259,     0,
     260,   261,     0,     0,     0,   262,     0,     0,   263,   264,
       0,     0,   265,     0,     0,   266,   267,     0,     0,     0,
       0,     0,   268,   269,     0,   270,     0,   271,     0,   272,
     273,     0,     0,     0,     0,     0,     0,     0,     0,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,   287,   288,   289,     0,   290,   291,   292,
     293,     0,   294,   295,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,     0,     0,   302,   303,     0,   304,
       0,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,     0,   315,   316,     0,     0,   317,   318,
     319,   320,     0,     0,     0,   321,   322,     0,     0,     0,
       0,   323,   324,   325,   326,     0,   327,   328,   329,   330,
       0,   331,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   332,   333,   334,     0,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,   349,     0,   350,     0,   351,   352,   353,   354,   355,
       0,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,   371,     0,   372,   373,   374,     0,
       0,   375,     0,   376,     0,   377,   378,     0,   379,   380,
       0,     0,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,     0,     0,     0,   393,
     394,   395,   396,     0,     0,     0,   397,     0,     0,     0,
     398,     0,   399,   400,   401,   402,     0,   403,   404,   405,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,   411,     0,     0,   412,   413,   414,
       0,     0,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,     0,     0,   433,   434,
       0,   435,   436,   437,   438,     0,     0,     0,     0,     0,
     439,   440,     0,     0,     0,   441,   442,   443,   444,     0,
     445,   446,     0,   447,   448,     0,   449,   450,     0,     0,
     451,     0,     0,   452,     0,   453,     0,   454,   455,     0,
       0,     0,     0,     0,     0,   456,     0,     0,   457,     0,
       0,     0,   458,   459,   460,   461,     0,     0,     0,     0,
       0,     0,   462,   463,     0,   464,   465,   466,     0,   136,
     467,   137,   138,   139,   140,   141,     0,     0,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,     0,   151,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,   158,   159,     0,     0,   160,     0,     0,   161,   162,
       0,   163,   164,     0,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,   188,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
     199,     0,     0,     0,  2206,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
     207,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,   212,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,   223,     0,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
       0,     0,   232,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,     0,   245,   246,
       0,     0,     0,   247,   248,   249,   250,     0,     0,   251,
     252,   253,     0,     0,   254,     0,     0,     0,     0,   255,
     256,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,     0,     0,     0,   262,     0,     0,   263,   264,     0,
       0,   265,     0,     0,   266,   267,     0,     0,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,     0,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,   321,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,   330,     0,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     332,   333,   334,     0,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,   371,     0,   372,   373,   374,     0,     0,
     375,     0,   376,     0,   377,   378,     0,   379,   380,     0,
       0,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,     0,     0,     0,   393,   394,
     395,   396,     0,     0,     0,   397,     0,     0,     0,   398,
       0,   399,   400,   401,   402,     0,   403,   404,   405,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,     0,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,  2207,
     440,     0,     0,     0,   441,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,   449,   450,     0,     0,   451,
       0,     0,   452,     0,   453,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,     0,     0,     0,
       0,   462,   463,     0,   464,   465,   466,     0,   136,   467,
     137,   138,   139,   140,   141,     0,     0,     0,     0,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,     0,   151,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
     158,   159,     0,     0,   160,     0,     0,   161,   162,     0,
     163,   164,     0,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,   188,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,   199,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,   207,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
     212,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,     0,
       0,   232,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,     0,   245,   246,     0,
       0,     0,   247,   248,   249,   250,     0,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,   256,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
       0,     0,     0,   262,     0,     0,   263,   264,     0,     0,
     265,     0,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,     0,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,   321,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,   330,     0,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
     333,   334,     0,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,   349,
    2756,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,   371,     0,   372,   373,   374,     0,     0,   375,
       0,   376,     0,   377,   378,     0,   379,   380,     0,     0,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,     0,     0,     0,   393,   394,   395,
     396,     0,     0,     0,   397,     0,     0,     0,   398,     0,
     399,   400,   401,   402,     0,   403,   404,   405,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,     0,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,   441,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,   449,   450,     0,     0,   451,     0,
       0,   452,     0,   453,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,     0,     0,     0,     0,
     462,   463,     0,   464,   465,   466,     0,   136,   467,   137,
     138,   139,   140,   141,     0,     0,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,     0,   151,     0,     0,     0,   152,     0,     0,     0,
     153,     0,     0,   154,   155,   156,     0,   157,     0,   158,
     159,     0,     0,   160,     0,     0,   161,   162,     0,   163,
     164,     0,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
     188,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,   199,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,   207,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,   212,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,     0,     0,
     232,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,     0,   245,   246,     0,     0,
       0,   247,   248,   249,   250,     0,     0,   251,   252,   253,
       0,     0,   254,     0,     0,     0,     0,   255,   256,     0,
       0,     0,   257,     0,   258,   259,     0,   260,   261,     0,
       0,     0,   262,     0,     0,   263,   264,     0,     0,   265,
       0,     0,   266,   267,     0,     0,     0,     0,     0,   268,
     269,     0,   270,     0,   271,     0,   272,   273,     0,     0,
       0,     0,     0,     0,     0,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   289,     0,   290,   291,   292,   293,     0,   294,
     295,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,     0,     0,   302,   303,     0,   304,     0,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
       0,   315,   316,     0,     0,   317,   318,   319,   320,     0,
       0,     0,   321,   322,     0,     0,     0,     0,   323,   324,
     325,   326,     0,   327,   328,   329,   330,     0,   331,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   332,   333,
     334,     0,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,   349,     0,
     350,     0,   351,   352,   353,   354,   355,     0,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,   371,     0,   372,   373,   374,     0,     0,   375,     0,
     376,     0,   377,   378,     0,   379,   380,     0,     0,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,     0,     0,     0,   393,   394,   395,   396,
       0,     0,     0,   397,     0,     0,     0,   398,     0,   399,
     400,   401,   402,     0,   403,   404,   405,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,     0,   133,   433,   434,     0,   435,   436,
     437,   438,     0,     0,     0,     0,     0,   439,   440,     0,
       0,     0,   441,   442,   443,   444,     0,   445,   446,     0,
     447,   448,     0,   449,   450,     0,     0,   451,     0,     0,
     452,     0,   453,     0,   454,   455,     0,     0,     0,     0,
       0,     0,   456,     0,     0,   457,     0,     0,     0,   458,
     459,   460,   461,     0,     0,     0,     0,     0,     0,   462,
     463,     0,   464,   465,   466,     0,   136,   467,   137,   138,
     139,   140,   141,  3015,     0,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
       0,   151,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,   158,   159,
       0,     0,   160,     0,     0,   161,   162,     0,   163,   164,
       0,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,   188,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,   199,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,   207,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,   212,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,     0,     0,   232,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,     0,   245,   246,     0,     0,     0,
     247,   248,   249,   250,     0,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,   256,     0,     0,
       0,   257,     0,   258,   259,     0,   260,   261,     0,     0,
       0,   262,     0,     0,   263,   264,     0,     0,   265,     0,
       0,   266,   267,     0,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,     0,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,   321,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,   330,     0,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   332,   333,   334,
       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
     371,     0,   372,   373,   374,     0,     0,   375,     0,   376,
       0,   377,   378,     0,   379,   380,     0,     0,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,     0,     0,     0,   393,   394,   395,   396,     0,
       0,     0,   397,     0,     0,     0,   398,     0,   399,   400,
     401,   402,     0,   403,   404,   405,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,     0,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,   441,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,   449,   450,     0,     0,   451,     0,     0,   452,
       0,   453,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,     0,     0,     0,     0,   462,   463,
       0,   464,   465,   466,     0,   136,   467,   137,   138,   139,
     140,   141,     0,     0,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,     0,
     151,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,   158,   159,     0,
       0,   160,     0,     0,   161,   162,     0,   163,   164,     0,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,   188,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,   199,     0,     0,     0,
    2206,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,   207,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,   212,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,   223,     0,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,     0,     0,   232,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,     0,   245,   246,     0,     0,     0,   247,
     248,   249,   250,     0,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,   256,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,     0,     0,     0,
     262,     0,     0,   263,   264,     0,     0,   265,     0,     0,
     266,   267,     0,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,     0,     0,
       0,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,     0,     0,     0,
     321,   322,     0,     0,     0,     0,   323,   324,   325,   326,
       0,   327,   328,   329,   330,     0,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   332,   333,   334,     0,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,   371,
       0,   372,   373,   374,     0,     0,   375,     0,   376,     0,
     377,   378,     0,   379,   380,     0,     0,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,     0,     0,     0,   393,   394,   395,   396,     0,     0,
       0,   397,     0,     0,     0,   398,     0,   399,   400,   401,
     402,     0,   403,   404,   405,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,     0,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
     441,   442,   443,   444,     0,   445,   446,     0,   447,   448,
       0,   449,   450,     0,     0,   451,     0,     0,   452,     0,
     453,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,     0,     0,     0,     0,   462,   463,     0,
     464,   465,   466,     0,   136,   467,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,     0,   151,
       0,     0,     0,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,   158,   159,     0,     0,
     160,     0,     0,   161,   162,     0,   163,   164,     0,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,   188,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,   199,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,   207,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,   212,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,     0,     0,   232,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,     0,   245,   246,     0,     0,     0,   247,   248,
     249,   250,     0,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,   256,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,     0,     0,     0,   262,
       0,     0,   263,   264,     0,     0,   265,     0,     0,   266,
     267,     0,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,     0,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,   321,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,   330,     0,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   332,   333,   334,     0,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,   371,     0,
     372,   373,   374,     0,     0,   375,     0,   376,     0,   377,
     378,     0,   379,   380,     0,     0,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
       0,     0,     0,   393,   394,   395,   396,     0,     0,     0,
     397,     0,     0,     0,   398,     0,   399,   400,   401,   402,
       0,   403,   404,   405,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,   413,   414,     0,     0,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,     0,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,   441,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
     449,   450,     0,     0,   451,     0,     0,   452,     0,   453,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,     0,     0,     0,     0,   462,   463,     0,   464,
     465,   466,     0,   136,   467,   137,   138,   139,   140,   141,
       0,     0,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,     0,   151,     0,
       0,     0,   152,     0,     0,     0,   153,     0,     0,   154,
     155,   156,     0,   157,     0,   158,   159,     0,     0,   160,
       0,     0,   161,   162,     0,   163,   164,     0,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,   188,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,   199,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,   207,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,   212,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
     223,     0,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,  1691,   231,     0,     0,   232,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,     0,   245,   246,     0,     0,     0,   247,   248,   249,
     250,     0,     0,   251,   252,   253,     0,     0,   254,     0,
       0,     0,     0,   255,   256,     0,     0,     0,   257,     0,
     258,   259,     0,   260,   261,     0,     0,     0,   262,     0,
       0,   263,   264,     0,     0,   265,     0,     0,   266,   267,
       0,     0,     0,     0,     0,   268,   269,     0,   270,     0,
     271,     0,   272,   273,     0,     0,     0,     0,     0,     0,
       0,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,   287,   288,   289,     0,
     290,   291,   292,   293,     0,   294,   295,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,     0,     0,   302,
     303,     0,   304,     0,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,     0,   315,   316,     0,
       0,   317,  1692,   319,   320,     0,     0,     0,   321,   322,
       0,     0,     0,     0,   323,   324,   325,   326,     0,   327,
     328,   329,   330,     0,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   332,   333,   334,     0,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,   349,     0,   350,     0,   351,   352,
     353,   354,   355,     0,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,   371,     0,   372,
     373,   374,     0,     0,   375,     0,   376,     0,   377,   378,
       0,   379,   380,     0,     0,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,     0,
       0,     0,   393,   394,   395,   396,     0,     0,     0,   397,
       0,     0,     0,   398,     0,   399,   400,   401,   402,     0,
     403,   404,   405,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,     0,
       0,   433,   434,     0,   435,   436,   437,   438,     0,     0,
       0,     0,     0,   439,   440,     0,     0,     0,   441,   442,
     443,   444,     0,   445,   446,     0,   447,   448,     0,   449,
     450,     0,     0,   451,     0,     0,   452,     0,   453,     0,
     454,   455,     0,     0,     0,     0,     0,     0,   456,     0,
       0,   457,     0,     0,     0,   458,   459,   460,   461,     0,
       0,     0,     0,     0,     0,   462,   463,     0,   464,   465,
     466,     0,   136,   467,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,     0,     0,     0,     0,   144,
     145,   146,   147,   148,   149,     0,     0,  -328,     0,     0,
       0,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,     0,     0,     0,     0,   160,  3688,
       0,   161,   162,     0,   163,     0,     0,     0,     0,   166,
     167,   168,  3689,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   177,     0,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,     0,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,     0,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,     0,     0,     0,   208,   209,   210,     0,
    -298,  -298,   211,     0,  -298,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,     0,
       0,     0,   224,   225,   226,     0,     0,   227,   228,  3690,
     229,   230,   231,     0,     0,     0,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,     0,   243,     0,     0,     0,
       0,     0,   246,     0,     0,     0,   247,   248,   249,   250,
    3691,     0,   251,   252,   253,     0,     0,   254,     0,     0,
       0,     0,   255,     0,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,  3692,     0,     0,   262,     0,     0,
       0,   264,     0,     0,   265,  3693,     0,   266,   267,     0,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,  -283,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,     0,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,  3694,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,   334,     0,     0,   336,   337,
     338,     0,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,     0,     0,   372,     0,
     374,  -283,     0,   375,     0,     0,     0,   377,     0,     0,
     379,   380,  3695,     0,     0,     0,   382,   383,   384,   385,
     386,   387,     0,   389,   390,     0,   391,     0,     0,     0,
       0,   393,   394,   395,     0,     0,     0,     0,   397,     0,
       0,     0,   398,     0,     0,   400,     0,   402,     0,   403,
       0,     0,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
       0,   414,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,     0,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,     0,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,     0,     0,
       0,     0,   451,     0,     0,   452,     0,     0,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
    -283,     0,     0,     0,   462,     0,     0,   464,     0,   466,
       0,   136,   467,   137,   138,   139,   140,   141,     0,     0,
       0,     0,     0,   142,     0,     0,     0,     0,   144,   145,
     146,   147,   148,   149,     0,     0,  -328,     0,     0,     0,
     152,     0,     0,     0,   153,     0,     0,   154,   155,   156,
       0,   157,     0,     0,     0,     0,     0,   160,  3688,     0,
     161,   162,     0,   163,     0,     0,     0,     0,   166,   167,
     168,  3689,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   177,     0,   179,   180,   181,   182,     0,   183,   184,
       0,   185,   186,   187,     0,   189,     0,   190,     0,     0,
     191,     0,     0,   192,     0,     0,     0,   193,     0,     0,
       0,   194,   195,   196,     0,     0,   197,     0,     0,     0,
       0,   198,     0,     0,     0,     0,     0,   200,     0,   201,
       0,     0,     0,   202,     0,   203,   204,   205,   206,     0,
       0,     0,     0,     0,     0,   208,   209,   210,     0,  -319,
       0,   211,     0,  -319,   213,     0,   214,   215,   216,     0,
       0,   217,   218,     0,   219,   220,   221,   222,     0,     0,
       0,   224,   225,   226,     0,     0,   227,   228,  3690,   229,
     230,   231,     0,     0,     0,     0,     0,     0,   233,     0,
     234,     0,   235,     0,   236,   237,   238,   239,   240,     0,
     241,     0,     0,     0,     0,   243,     0,     0,     0,     0,
       0,   246,     0,     0,     0,   247,   248,   249,   250,  3691,
       0,   251,   252,   253,     0,     0,   254,     0,     0,     0,
       0,   255,     0,     0,     0,     0,   257,     0,   258,   259,
       0,   260,   261,  3692,     0,     0,   262,     0,     0,     0,
     264,     0,     0,   265,  3693,     0,   266,   267,     0,     0,
       0,     0,     0,   268,   269,     0,   270,     0,   271,     0,
     272,   273,     0,     0,     0,     0,  -283,     0,     0,     0,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,     0,   287,   288,   289,     0,   290,   291,
     292,   293,     0,   294,   295,     0,     0,     0,     0,   296,
     297,   298,   299,   300,   301,     0,     0,   302,   303,     0,
     304,     0,   305,     0,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,     0,   315,   316,     0,     0,   317,
     318,   319,   320,     0,     0,     0,     0,   322,     0,     0,
       0,     0,   323,   324,   325,   326,     0,   327,   328,   329,
    3694,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   333,   334,     0,     0,   336,   337,   338,
       0,   340,   341,   342,   343,   344,   345,     0,     0,     0,
       0,   348,   349,     0,   350,     0,   351,   352,   353,   354,
     355,     0,   356,   357,   358,     0,     0,   359,     0,     0,
       0,   360,   361,   362,   363,   364,     0,     0,   365,   366,
     367,   368,   369,     0,   370,     0,     0,   372,     0,   374,
    -283,     0,   375,     0,     0,     0,   377,     0,     0,   379,
     380,  3695,     0,     0,     0,   382,   383,   384,   385,   386,
     387,     0,   389,   390,     0,   391,     0,     0,     0,     0,
     393,   394,   395,     0,     0,     0,     0,   397,     0,     0,
       0,   398,     0,     0,   400,     0,   402,     0,   403,     0,
       0,   406,   407,     0,     0,     0,     0,     0,     0,   408,
     409,     0,   410,     0,     0,   411,     0,     0,   412,     0,
     414,     0,     0,     0,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,     0,   429,   430,   431,   432,     0,     0,   433,
     434,     0,   435,   436,   437,   438,     0,     0,     0,     0,
       0,   439,   440,     0,     0,     0,     0,   442,   443,   444,
       0,   445,   446,     0,   447,   448,     0,     0,     0,     0,
       0,   451,     0,     0,   452,     0,     0,     0,   454,   455,
       0,     0,     0,     0,     0,     0,   456,     0,     0,   457,
       0,     0,     0,   458,   459,   460,   461,  -319,     0,  -283,
       0,     0,     0,   462,     0,     0,   464,     0,   466,     0,
     136,   467,   137,   138,   139,   140,   141,     0,     0,     0,
       0,     0,   142,     0,     0,     0,     0,   144,   145,   146,
     147,   148,   149,     0,     0,  -328,     0,     0,     0,   152,
       0,     0,     0,   153,     0,     0,   154,   155,   156,     0,
     157,     0,     0,     0,     0,     0,   160,  3688,     0,   161,
     162,     0,   163,     0,     0,     0,     0,   166,   167,   168,
    3689,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     177,     0,   179,   180,   181,   182,     0,   183,   184,     0,
     185,   186,   187,     0,   189,     0,   190,     0,     0,   191,
       0,     0,   192,     0,     0,     0,   193,     0,     0,     0,
     194,   195,   196,     0,     0,   197,     0,     0,     0,     0,
     198,     0,     0,     0,     0,     0,   200,     0,   201,     0,
       0,     0,   202,     0,   203,   204,   205,   206,     0,     0,
       0,     0,     0,     0,   208,   209,   210,     0,  -316,     0,
     211,     0,  -316,   213,     0,   214,   215,   216,     0,     0,
     217,   218,     0,   219,   220,   221,   222,     0,     0,     0,
     224,   225,   226,     0,     0,   227,   228,  3690,   229,   230,
     231,     0,     0,     0,     0,     0,     0,   233,     0,   234,
       0,   235,     0,   236,   237,   238,   239,   240,     0,   241,
       0,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     246,     0,     0,     0,   247,   248,   249,   250,  3691,     0,
     251,   252,   253,     0,     0,   254,     0,     0,     0,     0,
     255,     0,     0,     0,     0,   257,     0,   258,   259,     0,
     260,   261,  3692,     0,     0,   262,     0,     0,     0,   264,
       0,     0,   265,  3693,     0,   266,   267,     0,     0,     0,
       0,     0,   268,   269,     0,   270,     0,   271,     0,   272,
     273,     0,     0,     0,     0,  -283,     0,     0,     0,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,     0,   287,   288,   289,     0,   290,   291,   292,
     293,     0,   294,   295,     0,     0,     0,     0,   296,   297,
     298,   299,   300,   301,     0,     0,   302,   303,     0,   304,
       0,   305,     0,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,     0,   315,   316,     0,     0,   317,   318,
     319,   320,     0,     0,     0,     0,   322,     0,     0,     0,
       0,   323,   324,   325,   326,     0,   327,   328,   329,  3694,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   333,   334,     0,     0,   336,   337,   338,     0,
     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,
     348,   349,     0,   350,     0,   351,   352,   353,   354,   355,
       0,   356,   357,   358,     0,     0,   359,     0,     0,     0,
     360,   361,   362,   363,   364,     0,     0,   365,   366,   367,
     368,   369,     0,   370,     0,     0,   372,     0,   374,  -283,
       0,   375,     0,     0,     0,   377,     0,     0,   379,   380,
    3695,     0,     0,     0,   382,   383,   384,   385,   386,   387,
       0,   389,   390,     0,   391,     0,     0,     0,     0,   393,
     394,   395,     0,     0,     0,     0,   397,     0,     0,     0,
     398,     0,     0,   400,     0,   402,     0,   403,     0,     0,
     406,   407,     0,     0,     0,     0,     0,     0,   408,   409,
       0,   410,     0,     0,   411,     0,     0,   412,     0,   414,
       0,     0,     0,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,     0,   429,   430,   431,   432,     0,     0,   433,   434,
       0,   435,   436,   437,   438,     0,     0,     0,     0,     0,
     439,   440,     0,     0,     0,     0,   442,   443,   444,     0,
     445,   446,     0,   447,   448,     0,     0,     0,     0,     0,
     451,     0,     0,   452,     0,     0,     0,   454,   455,     0,
       0,     0,     0,     0,     0,   456,     0,     0,   457,     0,
       0,     0,   458,   459,   460,   461,  -316,     0,  -283,     0,
       0,     0,   462,     0,     0,   464,     0,   466,     0,   136,
     467,   137,   138,   139,   140,   141,     0,     0,     0,     0,
       0,   142,     0,     0,     0,     0,   144,   145,   146,   147,
     148,   149,     0,     0,  -328,     0,     0,     0,   152,     0,
       0,     0,   153,     0,     0,   154,   155,   156,     0,   157,
       0,     0,     0,     0,     0,   160,  3688,     0,   161,   162,
       0,   163,     0,     0,     0,     0,   166,   167,   168,  3689,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   177,
       0,   179,   180,   181,   182,     0,   183,   184,     0,   185,
     186,   187,     0,   189,     0,   190,     0,     0,   191,     0,
       0,   192,     0,     0,     0,   193,     0,     0,     0,   194,
     195,   196,     0,     0,   197,     0,     0,     0,     0,   198,
       0,     0,     0,     0,     0,   200,     0,   201,     0,     0,
       0,   202,     0,   203,   204,   205,   206,     0,     0,     0,
       0,     0,     0,   208,   209,   210,     0,     0,     0,   211,
       0,  4025,   213,     0,   214,   215,   216,     0,     0,   217,
     218,     0,   219,   220,   221,   222,     0,     0,     0,   224,
     225,   226,     0,     0,   227,   228,  3690,   229,   230,   231,
       0,     0,     0,     0,     0,     0,   233,     0,   234,     0,
     235,     0,   236,   237,   238,   239,   240,     0,   241,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,   246,
       0,     0,     0,   247,   248,   249,   250,  3691,     0,   251,
     252,   253,     0,     0,   254,     0,     0,     0,     0,   255,
       0,     0,     0,     0,   257,     0,   258,   259,     0,   260,
     261,  3692,     0,     0,   262,     0,     0,     0,   264,     0,
       0,   265,  3693,     0,   266,   267,     0,     0,     0,     0,
       0,   268,   269,     0,   270,     0,   271,     0,   272,   273,
       0,     0,     0,     0,  -283,     0,     0,     0,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,     0,   287,   288,   289,     0,   290,   291,   292,   293,
       0,   294,   295,     0,     0,     0,     0,   296,   297,   298,
     299,   300,   301,     0,     0,   302,   303,     0,   304,     0,
     305,     0,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,     0,   315,   316,     0,     0,   317,   318,   319,
     320,     0,     0,     0,     0,   322,     0,     0,     0,     0,
     323,   324,   325,   326,     0,   327,   328,   329,  3694,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   333,   334,     0,     0,   336,   337,   338,     0,   340,
     341,   342,   343,   344,   345,     0,     0,     0,     0,   348,
     349,     0,   350,     0,   351,   352,   353,   354,   355,     0,
     356,   357,   358,     0,     0,   359,     0,     0,     0,   360,
     361,   362,   363,   364,     0,     0,   365,   366,   367,   368,
     369,     0,   370,     0,     0,   372,     0,   374,  -283,     0,
     375,     0,     0,     0,   377,     0,     0,   379,   380,  3695,
       0,     0,     0,   382,   383,   384,   385,   386,   387,     0,
     389,   390,     0,   391,     0,     0,     0,     0,   393,   394,
     395,     0,     0,     0,     0,   397,     0,     0,     0,   398,
       0,     0,   400,     0,   402,     0,   403,     0,     0,   406,
     407,     0,     0,     0,     0,     0,     0,   408,   409,     0,
     410,     0,     0,   411,     0,     0,   412,     0,   414,     0,
       0,     0,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
       0,   429,   430,   431,   432,     0,     0,   433,   434,     0,
     435,   436,   437,   438,     0,     0,     0,     0,     0,   439,
     440,     0,     0,     0,     0,   442,   443,   444,     0,   445,
     446,     0,   447,   448,     0,     0,     0,     0,     0,   451,
       0,     0,   452,     0,     0,     0,   454,   455,     0,     0,
       0,     0,     0,     0,   456,     0,     0,   457,     0,     0,
       0,   458,   459,   460,   461,     0,     0,  -283,     0,     0,
       0,   462,     0,     0,   464,     0,   466,     0,   136,   467,
     137,   138,   139,   140,   141,     0,     0,     0,     0,     0,
     142,     0,     0,     0,     0,   144,   145,   146,   147,   148,
     149,     0,     0,  -328,     0,     0,     0,   152,     0,     0,
       0,   153,     0,     0,   154,   155,   156,     0,   157,     0,
       0,     0,     0,     0,   160,  3688,     0,   161,   162,     0,
     163,     0,     0,     0,     0,   166,   167,   168,  3689,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   177,     0,
     179,   180,   181,   182,     0,   183,   184,     0,   185,   186,
     187,     0,   189,     0,   190,     0,     0,   191,     0,     0,
     192,     0,     0,     0,   193,     0,     0,     0,   194,   195,
     196,     0,     0,   197,     0,     0,     0,     0,   198,     0,
       0,     0,     0,     0,   200,     0,   201,     0,     0,     0,
     202,     0,   203,   204,   205,   206,     0,     0,     0,     0,
       0,     0,   208,   209,   210,     0,     0,     0,   211,     0,
    -321,   213,     0,   214,   215,   216,     0,     0,   217,   218,
       0,   219,   220,   221,   222,     0,     0,     0,   224,   225,
     226,     0,     0,   227,   228,  3690,   229,   230,   231,     0,
       0,     0,     0,     0,     0,   233,     0,   234,     0,   235,
       0,   236,   237,   238,   239,   240,     0,   241,     0,     0,
       0,     0,   243,     0,     0,     0,     0,     0,   246,     0,
       0,     0,   247,   248,   249,   250,  3691,     0,   251,   252,
     253,     0,     0,   254,     0,     0,     0,     0,   255,     0,
       0,     0,     0,   257,     0,   258,   259,     0,   260,   261,
    3692,     0,     0,   262,     0,     0,     0,   264,     0,     0,
     265,  3693,     0,   266,   267,     0,     0,     0,     0,     0,
     268,   269,     0,   270,     0,   271,     0,   272,   273,     0,
       0,     0,     0,  -283,     0,     0,     0,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
       0,   287,   288,   289,     0,   290,   291,   292,   293,     0,
     294,   295,     0,     0,     0,     0,   296,   297,   298,   299,
     300,   301,     0,     0,   302,   303,     0,   304,     0,   305,
       0,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,     0,   315,   316,     0,     0,   317,   318,   319,   320,
       0,     0,     0,     0,   322,     0,     0,     0,     0,   323,
     324,   325,   326,     0,   327,   328,   329,  3694,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     333,   334,     0,     0,   336,   337,   338,     0,   340,   341,
     342,   343,   344,   345,     0,     0,     0,     0,   348,   349,
       0,   350,     0,   351,   352,   353,   354,   355,     0,   356,
     357,   358,     0,     0,   359,     0,     0,     0,   360,   361,
     362,   363,   364,     0,     0,   365,   366,   367,   368,   369,
       0,   370,     0,     0,   372,     0,   374,  -283,     0,   375,
       0,     0,     0,   377,     0,     0,   379,   380,  3695,     0,
       0,     0,   382,   383,   384,   385,   386,   387,     0,   389,
     390,     0,   391,     0,     0,     0,     0,   393,   394,   395,
       0,     0,     0,     0,   397,     0,     0,     0,   398,     0,
       0,   400,     0,   402,     0,   403,     0,     0,   406,   407,
       0,     0,     0,     0,     0,     0,   408,   409,     0,   410,
       0,     0,   411,     0,     0,   412,     0,   414,     0,     0,
       0,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,     0,
     429,   430,   431,   432,     0,     0,   433,   434,     0,   435,
     436,   437,   438,     0,     0,     0,     0,     0,   439,   440,
       0,     0,     0,     0,   442,   443,   444,     0,   445,   446,
       0,   447,   448,     0,     0,     0,     0,     0,   451,     0,
       0,   452,     0,     0,     0,   454,   455,     0,     0,     0,
       0,     0,     0,   456,     0,     0,   457,     0,     0,     0,
     458,   459,   460,   461,     0,     0,  -283,     0,     0,     0,
     462,     0,     0,   464,     0,   466,     0,   136,   467,   137,
     138,   139,   140,   141,     0,     0,     0,     0,     0,   142,
       0,     0,     0,     0,   144,   145,   146,   147,   148,   149,
       0,     0,  -328,     0,     0,     0,   152,     0,     0,     0,
     153,     0,     0,   154,   155,   156,     0,   157,     0,     0,
       0,     0,     0,   160,  3688,     0,   161,   162,     0,   163,
       0,     0,     0,     0,   166,   167,   168,  3689,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   177,     0,   179,
     180,   181,   182,     0,   183,   184,     0,   185,   186,   187,
       0,   189,     0,   190,     0,     0,   191,     0,     0,   192,
       0,     0,     0,   193,     0,     0,     0,   194,   195,   196,
       0,     0,   197,     0,     0,     0,     0,   198,     0,     0,
       0,     0,     0,   200,     0,   201,     0,     0,     0,   202,
       0,   203,   204,   205,   206,     0,     0,     0,     0,     0,
       0,   208,   209,   210,     0,     0,     0,   211,     0,  4137,
     213,     0,   214,   215,   216,     0,     0,   217,   218,     0,
     219,   220,   221,   222,     0,     0,     0,   224,   225,   226,
       0,     0,   227,   228,  3690,   229,   230,   231,     0,     0,
       0,     0,     0,     0,   233,     0,   234,     0,   235,     0,
     236,   237,   238,   239,   240,     0,   241,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,   246,     0,     0,
       0,   247,   248,   249,   250,  3691,     0,   251,   252,   253,
       0,     0,   254,     0,     0,     0,     0,   255,     0,     0,
       0,     0,   257,     0,   258,   259,     0,   260,   261,  3692,
       0,     0,   262,     0,     0,     0,   264,     0,     0,   265,
    3693,     0,   266,   267,     0,     0,     0,     0,     0,   268,
     269,     0,   270,     0,   271,     0,   272,   273,     0,     0,
       0,     0,  -283,     0,     0,     0,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,     0,
     287,   288,   289,     0,   290,   291,   292,   293,     0,   294,
     295,     0,     0,     0,     0,   296,   297,   298,   299,   300,
     301,     0,     0,   302,   303,     0,   304,     0,   305,     0,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
       0,   315,   316,     0,     0,   317,   318,   319,   320,     0,
       0,     0,     0,   322,     0,     0,     0,     0,   323,   324,
     325,   326,     0,   327,   328,   329,  3694,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
     334,     0,     0,   336,   337,   338,     0,   340,   341,   342,
     343,   344,   345,     0,     0,     0,     0,   348,   349,     0,
     350,     0,   351,   352,   353,   354,   355,     0,   356,   357,
     358,     0,     0,   359,     0,     0,     0,   360,   361,   362,
     363,   364,     0,     0,   365,   366,   367,   368,   369,     0,
     370,     0,     0,   372,     0,   374,  -283,     0,   375,     0,
       0,     0,   377,     0,     0,   379,   380,  3695,     0,     0,
       0,   382,   383,   384,   385,   386,   387,     0,   389,   390,
       0,   391,     0,     0,     0,     0,   393,   394,   395,     0,
       0,     0,     0,   397,     0,     0,     0,   398,     0,     0,
     400,     0,   402,     0,   403,     0,     0,   406,   407,     0,
       0,     0,     0,     0,     0,   408,   409,     0,   410,     0,
       0,   411,     0,     0,   412,     0,   414,     0,     0,     0,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,     0,   429,
     430,   431,   432,     0,     0,   433,   434,     0,   435,   436,
     437,   438,     0,     0,     0,     0,     0,   439,   440,     0,
       0,     0,     0,   442,   443,   444,     0,   445,   446,     0,
     447,   448,     0,     0,     0,     0,     0,   451,     0,     0,
     452,     0,     0,     0,   454,   455,     0,     0,     0,     0,
       0,     0,   456,     0,     0,   457,     0,     0,     0,   458,
     459,   460,   461,     0,     0,  -283,     0,     0,     0,   462,
       0,     0,   464,     0,   466,     0,   136,   467,   137,   138,
     139,   140,   141,     0,     0,     0,     0,     0,   142,     0,
       0,     0,     0,   144,   145,   146,   147,   148,   149,     0,
       0,  -328,     0,     0,     0,   152,     0,     0,     0,   153,
       0,     0,   154,   155,   156,     0,   157,     0,     0,     0,
       0,     0,   160,  3688,     0,   161,   162,     0,   163,     0,
       0,     0,     0,   166,   167,   168,  3689,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   177,     0,   179,   180,
     181,   182,     0,   183,   184,     0,   185,   186,   187,     0,
     189,     0,   190,     0,     0,   191,     0,     0,   192,     0,
       0,     0,   193,     0,     0,     0,   194,   195,   196,     0,
       0,   197,     0,     0,     0,     0,   198,     0,     0,     0,
       0,     0,   200,     0,   201,     0,     0,     0,   202,     0,
     203,   204,   205,   206,     0,     0,     0,     0,     0,     0,
     208,   209,   210,     0,     0,     0,   211,     0,  4185,   213,
       0,   214,   215,   216,     0,     0,   217,   218,     0,   219,
     220,   221,   222,     0,     0,     0,   224,   225,   226,     0,
       0,   227,   228,  3690,   229,   230,   231,     0,     0,     0,
       0,     0,     0,   233,     0,   234,     0,   235,     0,   236,
     237,   238,   239,   240,     0,   241,     0,     0,     0,     0,
     243,     0,     0,     0,     0,     0,   246,     0,     0,     0,
     247,   248,   249,   250,  3691,     0,   251,   252,   253,     0,
       0,   254,     0,     0,     0,     0,   255,     0,     0,     0,
       0,   257,     0,   258,   259,     0,   260,   261,  3692,     0,
       0,   262,     0,     0,     0,   264,     0,     0,   265,  3693,
       0,   266,   267,     0,     0,     0,     0,     0,   268,   269,
       0,   270,     0,   271,     0,   272,   273,     0,     0,     0,
       0,  -283,     0,     0,     0,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,     0,   287,
     288,   289,     0,   290,   291,   292,   293,     0,   294,   295,
       0,     0,     0,     0,   296,   297,   298,   299,   300,   301,
       0,     0,   302,   303,     0,   304,     0,   305,     0,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,     0,
     315,   316,     0,     0,   317,   318,   319,   320,     0,     0,
       0,     0,   322,     0,     0,     0,     0,   323,   324,   325,
     326,     0,   327,   328,   329,  3694,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   333,   334,
       0,     0,   336,   337,   338,     0,   340,   341,   342,   343,
     344,   345,     0,     0,     0,     0,   348,   349,     0,   350,
       0,   351,   352,   353,   354,   355,     0,   356,   357,   358,
       0,     0,   359,     0,     0,     0,   360,   361,   362,   363,
     364,     0,     0,   365,   366,   367,   368,   369,     0,   370,
       0,     0,   372,     0,   374,  -283,     0,   375,     0,     0,
       0,   377,     0,     0,   379,   380,  3695,     0,     0,     0,
     382,   383,   384,   385,   386,   387,     0,   389,   390,     0,
     391,     0,     0,     0,     0,   393,   394,   395,     0,     0,
       0,     0,   397,     0,     0,     0,   398,     0,     0,   400,
       0,   402,     0,   403,     0,     0,   406,   407,     0,     0,
       0,     0,     0,     0,   408,   409,     0,   410,     0,     0,
     411,     0,     0,   412,     0,   414,     0,     0,     0,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,     0,   429,   430,
     431,   432,     0,     0,   433,   434,     0,   435,   436,   437,
     438,     0,     0,     0,     0,     0,   439,   440,     0,     0,
       0,     0,   442,   443,   444,     0,   445,   446,     0,   447,
     448,     0,     0,     0,     0,     0,   451,     0,     0,   452,
       0,     0,     0,   454,   455,     0,     0,     0,     0,     0,
       0,   456,     0,     0,   457,     0,     0,     0,   458,   459,
     460,   461,     0,     0,  -283,     0,     0,     0,   462,     0,
       0,   464,     0,   466,     0,   136,   467,   137,   138,   139,
     140,   141,     0,     0,     0,     0,     0,   142,     0,     0,
       0,     0,   144,   145,   146,   147,   148,   149,     0,     0,
    -328,     0,     0,     0,   152,     0,     0,     0,   153,     0,
       0,   154,   155,   156,     0,   157,     0,     0,     0,     0,
       0,   160,  3688,     0,   161,   162,     0,   163,     0,     0,
       0,     0,   166,   167,   168,  3689,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   177,     0,   179,   180,   181,
     182,     0,   183,   184,     0,   185,   186,   187,     0,   189,
       0,   190,     0,     0,   191,     0,     0,   192,     0,     0,
       0,   193,     0,     0,     0,   194,   195,   196,     0,     0,
     197,     0,     0,     0,     0,   198,     0,     0,     0,     0,
       0,   200,     0,   201,     0,     0,     0,   202,     0,   203,
     204,   205,   206,     0,     0,     0,     0,     0,     0,   208,
     209,   210,     0,     0,     0,   211,     0,  -302,   213,     0,
     214,   215,   216,     0,     0,   217,   218,     0,   219,   220,
     221,   222,     0,     0,     0,   224,   225,   226,     0,     0,
     227,   228,  3690,   229,   230,   231,     0,     0,     0,     0,
       0,     0,   233,     0,   234,     0,   235,     0,   236,   237,
     238,   239,   240,     0,   241,     0,     0,     0,     0,   243,
       0,     0,     0,     0,     0,   246,     0,     0,     0,   247,
     248,   249,   250,  3691,     0,   251,   252,   253,     0,     0,
     254,     0,     0,     0,     0,   255,     0,     0,     0,     0,
     257,     0,   258,   259,     0,   260,   261,  3692,     0,     0,
     262,     0,     0,     0,   264,     0,     0,   265,  3693,     0,
     266,   267,     0,     0,     0,     0,     0,   268,   269,     0,
     270,     0,   271,     0,   272,   273,     0,     0,     0,     0,
    -283,     0,     0,     0,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,     0,   287,   288,
     289,     0,   290,   291,   292,   293,     0,   294,   295,     0,
       0,     0,     0,   296,   297,   298,   299,   300,   301,     0,
       0,   302,   303,     0,   304,     0,   305,     0,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,     0,   315,
     316,     0,     0,   317,   318,   319,   320,     0,     0,     0,
       0,   322,     0,     0,     0,     0,   323,   324,   325,   326,
       0,   327,   328,   329,  3694,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   333,   334,     0,
       0,   336,   337,   338,     0,   340,   341,   342,   343,   344,
     345,     0,     0,     0,     0,   348,   349,     0,   350,     0,
     351,   352,   353,   354,   355,     0,   356,   357,   358,     0,
       0,   359,     0,     0,     0,   360,   361,   362,   363,   364,
       0,     0,   365,   366,   367,   368,   369,     0,   370,     0,
       0,   372,     0,   374,  -283,     0,   375,     0,     0,     0,
     377,     0,     0,   379,   380,  3695,     0,     0,     0,   382,
     383,   384,   385,   386,   387,     0,   389,   390,     0,   391,
       0,     0,     0,     0,   393,   394,   395,     0,     0,     0,
       0,   397,     0,     0,     0,   398,     0,     0,   400,     0,
     402,     0,   403,     0,     0,   406,   407,     0,     0,     0,
       0,     0,     0,   408,   409,     0,   410,     0,     0,   411,
       0,     0,   412,     0,   414,     0,     0,     0,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,     0,   429,   430,   431,
     432,     0,     0,   433,   434,     0,   435,   436,   437,   438,
       0,     0,     0,     0,     0,   439,   440,     0,     0,     0,
       0,   442,   443,   444,     0,   445,   446,     0,   447,   448,
       0,     0,     0,     0,     0,   451,     0,     0,   452,     0,
       0,     0,   454,   455,     0,     0,     0,     0,     0,     0,
     456,     0,     0,   457,     0,     0,     0,   458,   459,   460,
     461,     0,     0,  -283,     0,     0,     0,   462,     0,     0,
     464,     0,   466,     0,   136,   467,   137,   138,   139,   140,
     141,     0,     0,     0,     0,     0,   142,     0,     0,     0,
       0,   144,   145,   146,   147,   148,   149,     0,     0,  -328,
       0,     0,     0,   152,     0,     0,     0,   153,     0,     0,
     154,   155,   156,     0,   157,     0,     0,     0,     0,     0,
     160,  3688,     0,   161,   162,     0,   163,     0,     0,     0,
       0,   166,   167,   168,  3689,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   177,     0,   179,   180,   181,   182,
       0,   183,   184,     0,   185,   186,   187,     0,   189,     0,
     190,     0,     0,   191,     0,     0,   192,     0,     0,     0,
     193,     0,     0,     0,   194,   195,   196,     0,     0,   197,
       0,     0,     0,     0,   198,     0,     0,     0,     0,     0,
     200,     0,   201,     0,     0,     0,   202,     0,   203,   204,
     205,   206,     0,     0,     0,     0,     0,     0,   208,   209,
     210,     0,     0,     0,   211,     0,     0,   213,     0,   214,
     215,   216,     0,     0,   217,   218,     0,   219,   220,   221,
     222,     0,     0,     0,   224,   225,   226,     0,     0,   227,
     228,  3690,   229,   230,   231,     0,     0,     0,     0,     0,
       0,   233,     0,   234,     0,   235,     0,   236,   237,   238,
     239,   240,     0,   241,     0,     0,     0,     0,   243,     0,
       0,     0,     0,     0,   246,     0,     0,     0,   247,   248,
     249,   250,  3691,     0,   251,   252,   253,     0,     0,   254,
       0,     0,     0,     0,   255,     0,     0,     0,     0,   257,
       0,   258,   259,     0,   260,   261,  3692,     0,     0,   262,
       0,     0,     0,   264,     0,     0,   265,  3693,     0,   266,
     267,     0,     0,     0,     0,     0,   268,   269,     0,   270,
       0,   271,     0,   272,   273,     0,     0,     0,     0,  -283,
       0,     0,     0,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,     0,   287,   288,   289,
       0,   290,   291,   292,   293,     0,   294,   295,     0,     0,
       0,     0,   296,   297,   298,   299,   300,   301,     0,     0,
     302,   303,     0,   304,     0,   305,     0,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,     0,   315,   316,
       0,     0,   317,   318,   319,   320,     0,     0,     0,     0,
     322,     0,     0,     0,     0,   323,   324,   325,   326,     0,
     327,   328,   329,  3694,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   333,   334,     0,     0,
     336,   337,   338,     0,   340,   341,   342,   343,   344,   345,
       0,     0,     0,     0,   348,   349,     0,   350,     0,   351,
     352,   353,   354,   355,     0,   356,   357,   358,     0,     0,
     359,     0,     0,     0,   360,   361,   362,   363,   364,     0,
       0,   365,   366,   367,   368,   369,     0,   370,     0,     0,
     372,     0,   374,  -283,     0,   375,     0,     0,     0,   377,
       0,     0,   379,   380,  3695,     0,     0,     0,   382,   383,
     384,   385,   386,   387,     0,   389,   390,     0,   391,     0,
       0,     0,     0,   393,   394,   395,     0,     0,     0,     0,
     397,     0,     0,     0,   398,     0,     0,   400,     0,   402,
       0,   403,     0,     0,   406,   407,     0,     0,     0,     0,
       0,     0,   408,   409,     0,   410,     0,     0,   411,     0,
       0,   412,     0,   414,     0,     0,     0,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,     0,   429,   430,   431,   432,
       0,     0,   433,   434,     0,   435,   436,   437,   438,     0,
       0,     0,     0,     0,   439,   440,     0,     0,     0,     0,
     442,   443,   444,     0,   445,   446,     0,   447,   448,     0,
       0,     0,     0,     0,   451,     0,     0,   452,     0,     0,
       0,   454,   455,     0,     0,     0,     0,     0,     0,   456,
       0,     0,   457,     0,     0,     0,   458,   459,   460,   461,
       0,     0,  -283,     0,     0,     0,   462,     0,     0,   464,
       0,   466,     0,   136,   467,   137,   138,   139,   140,   141,
       0,     0,     0,     0,     0,   142,     0,     0,     0,     0,
     144,   145,   146,   147,   148,   149,     0,     0,  -328,     0,
       0,     0,   152,     0,     0,     0,   153,     0,     0,   154,
     155,   156,     0,   157,     0,     0,     0,     0,     0,   160,
    3688,     0,   161,   162,     0,   163,     0,     0,     0,     0,
     166,   167,   168,  3689,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   177,     0,   179,   180,   181,   182,     0,
     183,   184,     0,   185,   186,   187,     0,   189,     0,   190,
       0,     0,   191,     0,     0,   192,     0,     0,     0,   193,
       0,     0,     0,   194,   195,   196,     0,     0,   197,     0,
       0,     0,     0,   198,     0,     0,     0,     0,     0,   200,
       0,   201,     0,     0,     0,   202,     0,   203,   204,   205,
     206,     0,     0,     0,     0,     0,     0,   208,   209,   210,
       0,     0,     0,   211,     0,     0,   213,     0,   214,   215,
     216,     0,     0,   217,   218,     0,   219,   220,   221,   222,
       0,     0,     0,   224,   225,   226,     0,     0,   227,   228,
    3690,   229,   230,   231,     0,     0,     0,     0,     0,     0,
     233,     0,   234,     0,   235,     0,   236,   237,   238,   239,
     240,     0,   241,     0,     0,     0,     0,   243,     0,     0,
       0,     0,     0,   246,     0,     0,     0,   247,   248,   249,
     250,  3691,     0,   251,   252,   253,     0,     0,   254,     0,
       0,     0,     0,   255,     0,     0,     0,     0,   257,     0,
     258,   259,     0,   260,   261,  3692,     0,     0,   262,     0,
       0,     0,   264,     0,     0,   265,  3693,     0,   266,   267,
       0,     0,     0,     0,     0,   268,   269,     0,   270,     0,
     271,     0,   272,   273,     0,     0,     0,     0,  -283,     0,
       0,     0,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,     0,   287,   288,   289,     0,
     290,   291,   292,   293,     0,   294,   295,     0,     0,     0,
       0,   296,   297,   298,   299,   300,   301,     0,     0,   302,
     303,     0,   304,     0,   305,     0,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,     0,   315,   316,     0,
       0,   317,   318,   319,   320,     0,     0,     0,     0,   322,
       0,     0,     0,     0,   323,   324,   325,   326,     0,   327,
     328,   329,  3694,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   333,   334,     0,     0,   336,
     337,   338,     0,   340,   341,   342,   343,   344,   345,     0,
       0,     0,     0,   348,   349,     0,   350,     0,   351,   352,
     353,   354,   355,     0,   356,   357,   358,     0,     0,   359,
       0,     0,     0,   360,   361,   362,   363,   364,     0,     0,
     365,   366,   367,   368,   369,     0,   370,     0,     0,   372,
       0,   374,  -283,     0,   375,     0,     0,     0,   377,     0,
       0,   379,   380,  3695,     0,     0,     0,   382,   383,   384,
     385,   386,   387,     0,   389,   390,     0,   391,     0,     0,
       0,     0,   393,   394,   395,     0,     0,     0,     0,   397,
       0,     0,     0,   398,     0,     0,   400,     0,   402,     0,
     403,     0,     0,   406,   407,     0,     0,     0,     0,     0,
       0,   408,   409,     0,   410,     0,     0,   411,     0,     0,
     412,     0,   414,     0,     0,     0,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,     0,   429,   430,   431,   432,     0,
       0,   433,   434,     0,   435,   436,   437,   438,     0,     0,
       0,     0,     0,   439,   440,     0,     0,     0,     0,   442,
     443,   444,     0,   445,   446,     0,   447,   448,     0,     0,
       0,     0,     0,   451,     0,     0,  4028,     0,     0,     0,
     454,   455,     0,     0,     0,     0,     0,     0,   456,     0,
       0,   457,     0,     0,     0,   458,   459,   460,   461,     0,
       0,  -283,     0,     0,     0,   462,     0,     0,   464,     0,
     466,     0,   136,   467,   137,   138,   139,   140,   141,     0,
       0,     0,     0,     0,   142,     0,     0,     0,     0,   144,
     145,   146,   147,   148,   149,     0,     0,     0,     0,     0,
       0,   152,     0,     0,     0,   153,     0,     0,   154,   155,
     156,     0,   157,     0,     0,     0,     0,     0,   160,     0,
       0,   161,   162,     0,   163,     0,     0,     0,     0,   166,
     167,   168,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   177,     0,   179,   180,   181,   182,     0,   183,
     184,     0,   185,   186,   187,     0,   189,     0,   190,     0,
       0,   191,     0,     0,   192,     0,     0,     0,   193,     0,
       0,     0,   194,   195,   196,     0,     0,   197,     0,     0,
       0,     0,   198,     0,     0,     0,     0,     0,   200,     0,
     201,     0,     0,     0,   202,     0,   203,   204,   205,   206,
       0,     0,     0,     0,     0,     0,   208,   209,   210,     0,
       0,     0,   211,     0,     0,   213,     0,   214,   215,   216,
       0,     0,   217,   218,     0,   219,   220,   221,   222,     0,
       0,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,     0,     0,     0,     0,     0,     0,   233,
       0,   234,     0,   235,     0,   236,   237,   238,   239,   240,
       0,   241,     0,     0,     0,     0,   243,     0,     0,     0,
       0,     0,   246,     0,     0,     0,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,     0,   254,     0,     0,
       0,     0,   255,     0,     0,     0,     0,   257,     0,   258,
     259,     0,   260,   261,     0,     0,     0,   262,     0,     0,
       0,   264,     0,     0,   265,     0,     0,   266,   267,     0,
       0,     0,     0,     0,   268,   269,     0,   270,     0,   271,
       0,   272,   273,     0,     0,     0,     0,     0,     0,     0,
       0,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,     0,   287,   288,   289,     0,   290,
     291,   292,   293,     0,   294,   295,     0,     0,     0,     0,
     296,   297,   298,   299,   300,   301,     0,     0,   302,   303,
       0,   304,     0,   305,     0,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,     0,   315,   316,     0,     0,
     317,   318,   319,   320,     0,     0,     0,     0,   322,     0,
       0,     0,     0,   323,   324,   325,   326,     0,   327,   328,
     329,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   333,   334,     0,     0,   336,   337,
     338,     0,   340,   341,   342,   343,   344,   345,     0,     0,
       0,     0,   348,   349,     0,   350,     0,   351,   352,   353,
     354,   355,     0,   356,   357,   358,     0,     0,   359,     0,
       0,     0,   360,   361,   362,   363,   364,     0,     0,   365,
     366,   367,   368,   369,     0,   370,     0,     0,   372,     0,
     374,     0,     0,   375,     0,     0,     0,   377,     0,     0,
     379,   380,     0,     0,     0,     0,   382,   383,   384,   385,
     386,   387,     0,   389,   390,     0,   391,     0,     0,     0,
       0,   393,   394,   395,     0,     0,     0,     0,   397,     0,
       0,     0,   398,     0,     0,   400,     0,   402,     0,   403,
       0,     0,   406,   407,     0,     0,     0,     0,     0,     0,
     408,   409,     0,   410,     0,     0,   411,     0,     0,   412,
       0,   414,     0,     0,     0,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,     0,   429,   430,   431,   432,     0,     0,
     433,   434,     0,   435,   436,   437,   438,     0,     0,     0,
       0,     0,   439,   440,     0,     0,     0,     0,   442,   443,
     444,     0,   445,   446,     0,   447,   448,     0,     0,     0,
       0,     0,   451,     0,     0,   452,     0,     0,     0,   454,
     455,     0,     0,     0,     0,     0,     0,   456,     0,     0,
     457,     0,     0,     0,   458,   459,   460,   461,     0,     0,
       0,     0,     0,     0,   462,     0,     0,   464,     0,   466,
       0,     0,   467
};

static const yytype_int16 yycheck[] =
{
       6,   612,   548,   936,   621,   622,   548,   657,   658,    20,
     570,   853,  1024,    19,   122,   662,    22,  1742,    29,  1118,
    1118,   937,  1607,   681,    35,    31,  1089,  1710,     6,   642,
     493,  1065,    38,  1416,  1317,    41,   584,  1729,  2132,    45,
    1242,  1906,   771,  2705,   694,   877,   879,    53,  1414,  2255,
    1473,  1474,     4,  1180,  2209,  2210,  2211,  2988,   901,  1140,
    1969,  2176,  2579,  2631,   714,  1974,  1147,  1379,   901,   716,
     902,  1056,   719,   608,   609,  2428,   726,   727,   728,  1948,
     941,  2416,   941,  1851,  2243,  1148,  1149,    93,  2061,  1152,
    1153,  1154,  1155,  2104,  1157,  1158,  1159,  1160,  1161,  1162,
    1163,  1164,  1868,  2220,  2221,  2199,  1248,  1729,  1870,   115,
    1931,   117,  2748,  2293,  1799,   121,   122,   123,  3194,  1868,
    1328,   734,   735,   736,  1892,    16,  1931,  2294,   626,  1897,
      18,  2298,    33,   746,   745,  1903,  1904,    18,  1346,   117,
    1908,   836,  2309,   121,  2700,  2236,  1354,  1355,  2879,    62,
    2346,    46,  2319,  2244,    24,    70,    15,    16,     9,  1823,
    1824,    58,    59,  1387,    18,  1931,  3238,  3044,   128,  1397,
     106,    16,  2055,    20,  2392,  1920,  1840,    28,   124,    75,
     903,   166,  1931,    34,   104,  3294,  3295,    15,    16,  3298,
    1814,  2442,    22,  1857,  1858,  2446,  3463,    15,    16,  1842,
      20,  1952,    78,    65,    59,    15,    16,  2497,  3317,    15,
      16,    58,    59,    33,  3323,   186,    29,    74,  2414,    50,
    1860,   143,   917,   166,  2572,   773,   137,    47,    50,   271,
     153,  1459,  3258,   253,    68,    15,    16,   299,    58,    59,
     374,    11,  2445,    68,    15,    16,    67,    61,  2682,    24,
      35,  1915,  1916,  1917,  1918,  2284,  2285,  3005,   149,  3190,
     138,   149,  1740,    93,    33,   153,   238,   360,  3075,  2113,
    1397,   327,   153,   354,   341,    15,    16,    51,   224,   120,
     131,   120,   218,   831,   120,   419,   256,    61,   427,    80,
     434,   120,   349,   943,   350,  3377,   183,     8,    74,   153,
      22,    15,    16,   132,    20,    35,   143,    12,   149,   254,
     149,   451,   407,   149,   265,  2216,   254,    33,   375,   486,
      15,    16,    12,   236,   158,    12,  3791,   816,  2566,   260,
     132,    47,  1459,   614,    20,   522,    15,    16,    15,    16,
      15,    16,    58,    59,  3724,  2189,  3424,    33,    40,   149,
     220,   121,   340,   494,   214,  2384,  2385,  3429,   338,  2228,
     402,    47,    15,    16,   491,   124,   183,    15,    16,   218,
      18,   322,    58,    59,   482,   513,    61,   183,   516,   996,
     997,   998,  3460,   240,   103,   149,   542,    67,    57,  3498,
     271,   149,   241,   143,   521,   160,    45,  1055,  3507,    15,
      16,    15,    16,    15,    16,   385,   514,    15,    16,   565,
    1068,   342,  2650,   398,   231,   360,   416,   202,   389,  3528,
     156,   186,   360,   336,  3533,   295,   613,   324,   133,   417,
     965,   920,   573,   107,  3899,    62,   110,    15,    16,   161,
     132,   160,    64,   133,  2195,   220,   133,   334,  1177,  3531,
     214,  1367,  3534,   548,   254,   398,  3263,   624,  2613,    15,
      16,   433,  3842,   174,   240,   522,   606,   186,  2288,   608,
     614,   441,   202,  2242,   608,   304,   482,   483,   375,  2638,
     271,  2249,  3558,  2418,  3415,   522,   260,   768,  2684,   489,
    1322,  2646,  2688,  1325,   500,   180,   254,   166,  1330,  3247,
     359,   170,   304,   362,   510,    10,  2702,  2703,   514,   565,
     516,   578,   181,    15,    16,   608,  2712,    15,    16,   288,
     295,   402,  2288,   529,  1356,  1357,  1387,   361,  1387,  1656,
    3556,   359,  1143,   614,   362,    70,   361,   460,  1151,  2288,
     402,  1236,  2738,   494,   606,   516,  1379,   589,   459,   359,
     199,   557,   362,   359,  2772,  1168,   362,    15,    16,    15,
      16,  2430,   582,    15,    16,   425,  1261,   181,  3002,   575,
     446,  2392,  1635,   451,  1037,  1038,  2338,   490,   584,   359,
     586,  2929,   362,  1646,  3461,  1793,  1649,  2392,   359,  2357,
     503,   362,   362,   599,  3162,  1058,   410,  1458,   604,  1458,
     606,   432,   608,   609,  1067,    15,    16,   613,   614,   236,
     432,  2235,   618,   559,  1842,  2498,  1079,  1080,  1081,   359,
     563,   599,   362,   608,  2267,  1088,  2392,    15,    16,  1352,
    2920,   637,  2296,  2297,   303,  2299,   348,  3904,  2302,  2303,
    1868,  2386,  2306,  2392,  1629,   359,  2286,  2311,   362,   545,
    1185,  2315,  2316,  2317,  2318,   506,   592,   577,  2322,   581,
    2324,   425,   770,   623,   359,   608,  2330,   362,  1397,  2333,
     389,  2335,  1220,   494,   525,   681,  2427,   590,  2793,   533,
     359,   532,   359,   362,   359,   362,  3563,   362,   533,   584,
    1914,   606,  1920,   584,  2538,  2539,  2540,    15,    16,  3771,
    2383,  2991,   387,  1931,   551,   606,   359,   558,   589,   362,
    1245,   359,  3443,  3269,   362,  1842,   613,   572,  2587,  2588,
     533,   612,  3599,  2201,   612,  1260,  2390,   584,   606,   398,
    1459,   551,   610,   739,   593,   741,  1284,   522,   608,  2583,
    2584,  2585,  2771,   359,   581,   359,   362,   359,   362,  1444,
     362,   359,   611,    39,   362,   565,    15,    16,  3834,   765,
     766,   767,   768,   769,   770,   593,   772,   773,  2923,   775,
     878,   612,  2138,   612,   604,   593,   612,   608,  1326,   607,
     608,   359,   582,   593,   362,  2686,  4166,   593,   766,    15,
      16,   769,   522,  1920,   772,   444,  2521,   516,   608,  3908,
     559,  3910,   608,   359,  1931,   811,   362,  2962,  1306,  2710,
    2711,  2926,   612,   593,   494,   821,    74,  3023,   537,  2978,
    2679,  3473,   593,  2982,   582,   831,   832,   607,   608,    50,
     836,   581,  2557,    15,    16,   551,   607,   608,    15,    16,
      15,    16,    31,   579,  2938,  1391,   134,   469,   612,    15,
      16,  2671,   526,   593,   612,   529,   391,   359,   577,   575,
     362,   359,    15,    16,   362,   551,  2801,   607,   608,   554,
    2639,  2640,   878,   825,    15,    16,   503,   166,  3954,   593,
    3233,   375,   120,  3063,   389,   571,   572,  2978,  2580,   205,
     606,  2982,   373,   607,   608,  1553,   608,  3064,   593,    15,
      16,   359,     8,   359,   362,  2671,   362,   359,   218,    82,
     362,   917,   607,   608,   593,  3111,   593,  3553,   593,  2687,
     288,  2689,  2671,    29,    15,    16,  2309,   778,  2696,   608,
     607,   937,   607,   608,    30,  1998,   186,  2220,  2221,   608,
     593,  2709,  1954,  2812,  2629,   593,  1789,  2715,   270,   359,
    1782,  2772,   362,   959,   607,   608,  1789,   185,  2580,   965,
    1792,   451,  2730,  1795,  1796,    15,    16,  2772,   169,  1467,
     139,   359,  2734,   451,   362,  3852,  1819,   593,   513,   593,
      76,   593,   240,   488,    55,   593,  1819,    42,    15,    16,
      12,   821,   608,   607,  2075,   222,   608,    15,    16,   607,
    2973,   536,   832,   483,   231,  3122,  2772,  3884,    15,    16,
    1016,  1017,  1018,  1019,  1020,   593,  2158,    15,    16,  3030,
     500,  2229,  1130,  2772,  3359,    15,    16,  3278,   522,   317,
     608,  2695,   537,  3964,   451,  1648,  1653,   593,   587,  2267,
     179,   359,   231,  2707,   362,  2247,  2631,  2081,  2082,  1055,
     378,   147,   608,  1914,   122,  1914,    15,    16,  3254,  1167,
    2288,  3312,  1068,  3218,   253,   467,  3225,  3226,   117,  3320,
      19,  1729,   577,  3276,  3277,   214,  3327,  2176,  3431,   621,
     622,  3284,   254,  2146,  3287,  3288,   184,    24,  1705,  2074,
    2934,   593,   183,  3838,   183,   593,   179,    15,    16,  2084,
     359,  3304,   424,   362,   134,   343,   608,    15,    16,   398,
     608,   133,  1118,  1842,  1662,  3318,   606,   357,  2987,   340,
    3323,  3324,  3325,  3326,  1130,   606,    15,    16,   606,   959,
    1665,   214,   195,   359,   445,   593,   362,   593,   365,   389,
    2267,   593,   343,  1251,  3796,  3004,  2245,  2245,  3007,  3008,
     608,  2463,   608,    15,    16,   557,   608,   469,  2386,  3692,
    3693,  1167,    15,    16,  2392,   254,  1172,  3026,    15,    16,
    1718,  1719,   328,    15,    16,   238,   125,   359,   494,  1185,
     362,  2547,   359,   593,   359,   362,  1016,   362,   360,   606,
    1020,  1920,   192,   359,   596,   364,   362,   117,   608,   485,
     120,   153,  1931,   271,  1750,   593,   359,    15,    16,   362,
    3778,   432,   117,   328,  1220,   516,  3733,   503,   359,   268,
     608,   362,   411,   146,   397,  3134,  1232,   288,  1234,   181,
    1236,   451,    15,    16,   157,    12,   121,   149,   459,  1245,
      15,    16,   378,   359,   530,  1251,   362,  3362,   231,   477,
      15,    16,    15,    16,  1260,  1261,   176,    15,    16,  2386,
     260,   583,   121,   220,   118,  2392,   516,   250,   359,   340,
     305,   362,   327,   371,   563,   593,   584,     0,  1284,    15,
      16,  1287,   202,   220,   542,  1237,  1394,   317,   384,  1295,
     608,    15,    16,   151,   136,   344,    24,   360,  2681,  2682,
     608,  1307,  1308,  1309,  1310,  1311,  1312,   565,    81,   359,
     406,  1317,   362,   601,   602,   603,   604,  1323,  1324,  4250,
    1326,    15,    16,  1329,  3986,  3093,   554,   100,   117,  1307,
    1308,  1309,   359,  1311,   593,   362,   397,  3020,   539,    15,
      16,   359,   438,  1349,   362,   230,  1324,   384,   268,   608,
    1302,  1329,   359,  4098,   555,   362,   133,   238,   295,    15,
      16,   359,   220,   268,   362,    12,   522,   593,   249,   359,
     468,   230,   362,   153,   451,   229,   174,   153,    15,    16,
     607,   553,   608,   183,   341,  3244,   606,   176,  1394,    15,
      16,   547,  3907,   181,    15,    16,  3602,   493,   451,   328,
     359,   214,  1408,   362,   341,  1411,  1412,   522,   469,    15,
      16,   593,   214,   202,    15,    16,   593,  2429,   593,    15,
      16,   210,   964,   151,   344,   564,   608,   593,   228,    15,
      16,   608,   547,   608,   130,   358,  2517,   117,  1444,   344,
     593,   359,   608,  2671,   362,  3560,   244,   451,  1400,   145,
     606,   359,   593,   192,   362,   608,   456,  1463,   271,  1465,
    1466,   572,  1468,  1469,   575,  2078,  3375,   608,  2567,  2567,
     359,   553,  1014,   362,  1480,   263,  1482,   593,   117,   268,
    1310,   564,  1312,   341,   122,   520,   133,  1465,  1466,    15,
      16,   607,   220,    15,    16,   544,   176,   359,  4031,  4032,
     362,   222,   593,   117,    15,    16,   359,  3601,   460,   362,
     231,   546,   359,  1976,   493,   362,   607,   359,   497,  1349,
     362,   260,   202,    15,    16,   607,  1989,  3968,   389,   606,
    3971,   195,    15,    16,  2181,  2182,  2183,   176,  2267,   199,
    2906,   498,   340,   593,  2772,    15,    16,  1553,  1554,   160,
     404,   359,   451,   606,   362,   344,   437,   607,  1666,  2022,
     360,   498,   176,    15,    16,   203,   593,   295,   199,   599,
     600,   601,   602,   603,   604,   593,   359,  3162,  1408,   362,
     607,   241,  1412,   600,   359,   398,   593,   362,   268,   607,
     607,    15,    16,   522,   359,   593,   359,   362,   521,   362,
     607,   359,   606,   593,   362,  4120,  4121,  1613,   121,   607,
     241,   117,   351,   341,   606,  2714,  2714,   607,   547,  3002,
     614,   578,   614,   359,   544,   469,   362,   488,  2091,   268,
      15,    16,   402,   271,   593,   359,   756,   533,   362,   544,
     498,   578,   606,   160,   365,  2772,   500,   451,   607,  1655,
     614,    15,    16,   423,   268,   213,  1662,  2386,  1664,  1665,
    1666,  4102,    57,  2392,   344,   359,    15,    16,   362,   186,
     176,  1677,    11,  1679,   120,   593,   537,   606,    17,  1685,
    1686,  3064,  1688,   359,   454,   593,   362,    15,    16,   607,
     451,   535,  1698,    15,    16,   141,  1702,    15,    16,   607,
      16,   953,   954,   359,   593,   344,   362,   606,    15,    16,
    3865,    16,  1718,  1719,  1720,  1721,   577,   456,   607,   210,
     578,   212,   359,  1729,   844,   362,  1732,  1733,  1734,   175,
     344,   593,   195,   359,    16,   117,   362,  2579,   359,   991,
     593,   362,   525,  1749,   516,   607,   593,    58,    59,   213,
     608,   593,  1758,   359,   607,   544,   362,    68,   359,   183,
     607,   362,   268,   359,  1716,  3542,   362,  3632,  3633,   519,
     498,   166,  2974,   359,   600,   170,   362,  2620,   195,  3462,
    3472,   607,  2816,  2626,   218,   593,   181,  2620,  1794,    15,
      16,    15,    16,  2626,   176,  3780,  2628,  3782,   565,   607,
    1806,  1753,   606,  2837,  2838,    71,   610,  1813,   569,   570,
     593,   565,   354,  3581,  3582,  3583,  3584,   228,   593,    46,
     202,  1929,   570,  3515,  2858,  1933,  3249,  3250,   593,   134,
     593,  2930,   607,   359,  1664,   593,   362,   359,   344,  3122,
     362,   608,   607,   183,   607,   606,   459,   614,   359,   607,
     578,   362,   134,    74,   608,  1685,  1686,   593,  1688,   584,
     614,  1969,   513,   271,   544,   516,  1974,   359,  1698,   593,
     362,   607,  1702,   607,    38,  1827,   359,    15,    16,   362,
     608,    45,   612,   607,  1836,  1837,   268,  2986,  2986,   359,
    1720,  1721,   362,    15,    16,  1847,  1848,  1849,  1850,   593,
    1852,  1853,  1732,  1733,  1734,   544,  2523,   359,   303,    71,
     362,   562,   328,   607,   180,  3692,  3693,   593,   560,    15,
      16,    24,  2580,  1929,   614,    15,    16,  1933,     6,  1935,
     544,   607,  1938,  1053,   356,   359,   488,   593,   362,  1891,
    1946,  1893,  1894,  1949,  1896,   516,  1898,  1899,  1900,  1901,
    1902,   607,   218,  1905,   606,  1907,   593,   183,   180,  2067,
    1938,     6,   344,  1969,  1794,   337,   338,   593,  1974,   425,
     607,    74,   593,    11,   359,   241,  3284,   362,    56,  3287,
    3288,   607,   606,  1813,  1104,   565,   607,   593,  1108,   218,
    2098,    33,   593,    15,    16,   359,  3304,   593,   362,   220,
     218,   607,   218,   398,   607,   608,   607,   593,  3738,  3739,
     359,   607,   317,   362,   607,   608,  2564,    59,   180,   255,
     608,   607,   258,   606,   451,   147,  3751,   607,   608,   606,
    1221,   359,   459,  1224,   362,   317,  1227,   359,   544,   606,
     362,   359,   606,  2772,   362,  3079,   607,   608,   151,  2512,
    3827,  3828,   359,   607,   608,   362,   218,   585,   586,   137,
      96,  2067,  2610,   606,   167,   107,   606,   593,   110,  3752,
     606,   593,    74,  3456,  3457,   606,   118,    24,   522,   241,
     608,   607,   593,   103,   614,   607,  2092,   183,   606,  4244,
    3189,  3189,  2098,   163,  3758,   498,   607,  3761,  3762,  3763,
    3764,   593,  2210,   606,  2212,  2213,   522,  2113,  3120,   606,
     593,    96,   607,   608,   335,   607,   117,   220,   276,   277,
     341,   387,   606,   593,   607,   606,  3856,    74,   607,   608,
    3860,   547,   606,   359,   606,   359,   362,   607,   362,  2145,
      12,   593,   569,   570,   606,  3922,  2254,  2255,  2694,   151,
     388,   551,   552,  2159,   554,   607,    25,   462,   463,   606,
    3937,   606,   544,   399,   607,   608,  3265,  3265,   606,   593,
    2176,  3901,  3902,  3950,   606,   176,   169,   607,   608,   606,
     462,   463,  3846,  2189,   204,   221,   606,   408,  3956,   440,
     606,   350,   295,  3778,   606,  3878,  2202,   606,  2204,    68,
     606,   202,   238,    72,  2210,    74,  2212,  2213,   593,   606,
    3874,  3875,   374,   249,  2220,  2221,   607,   608,   220,  3883,
     167,   359,   607,   606,   362,   387,  3142,   606,    18,   593,
     606,   440,   335,   607,   608,   606,   221,   359,   341,  2245,
     362,   606,  4019,   607,   593,    74,   607,   608,  2254,  2255,
    2202,   120,   606,   238,  4031,  4032,   414,   415,   607,    88,
     338,   133,   606,   359,   249,   593,   362,   268,    77,   359,
      79,   593,   362,   220,    12,   593,   193,   498,   565,   607,
     607,   608,    11,   607,   608,   607,   593,   329,  1686,   607,
    1688,   327,   597,   598,   599,   600,   601,   602,   603,   604,
     607,   525,   606,    41,  4081,   514,    96,    96,    58,    59,
     519,   120,   607,   608,  4091,   597,   598,   599,   600,   601,
     602,   603,   604,   401,   357,   403,  2332,   606,   549,    12,
     606,   203,   141,   335,  1732,  1733,  1734,   607,   608,   341,
    2346,  2954,   327,   344,   337,   338,   366,   606,   295,  2355,
     343,    89,  4129,   562,  4131,   375,    94,   578,   606,   149,
     606,   381,   606,   153,  4141,   350,   175,   593,   577,   593,
     607,   608,   241,   606,   103,   292,   293,   350,  3364,  3365,
     297,   298,  4159,  2846,  4161,   608,  4163,   525,   335,   179,
     513,   181,   121,  4170,   341,   498,   606,   563,   564,   606,
     566,   437,   568,   606,  4181,   195,   408,  2413,  2414,  2731,
     200,   607,   608,    74,   243,   606,  2422,  2423,  2424,   606,
    4197,  4198,   606,  2886,   214,   467,   606,    88,  3828,   606,
    2382,   221,   221,  2755,   607,   608,  4213,  4214,   228,   607,
     608,  4218,   607,   608,   607,   608,   607,   608,   238,   238,
     133,  4176,   437,   473,   606,   593,   606,   186,   606,   249,
     249,   607,   608,   499,   254,   607,   608,   128,   337,   338,
     606,   593,   606,   263,   343,   578,  3492,  3493,   606,   480,
     606,   350,  3468,    61,  3101,   214,   315,   529,   606,  3505,
     607,   608,    96,    71,  3510,   233,   498,   593,  1030,  1031,
    1032,   607,   608,   593,   606,   608,    84,   607,   608,   115,
    1042,   340,   606,    61,   499,   557,   607,   608,   387,  3535,
     203,   606,  3538,    71,   607,   608,  4251,  3590,  2534,   143,
     144,  2537,  2538,  2539,  2540,   264,    84,   327,   327,   606,
    2546,  1073,   562,   544,  1076,   606,   539,   549,   607,   608,
     606,   498,   607,   608,   607,   608,   607,   608,  2564,   606,
     350,  2567,   555,   606,  1096,  1097,   304,   606,  1100,   606,
     360,   400,   607,   608,  2580,   611,   578,  2583,  2584,  2585,
     607,   608,   243,  2413,   474,  3131,   455,  1119,  1120,   606,
    2596,   606,  2422,  2423,  2424,    48,  2602,  2705,  2604,   389,
     409,   265,   180,   209,  2610,    48,   608,   185,   607,   608,
     482,   483,   484,   485,   486,   487,   608,   221,   347,  4019,
     607,   608,  3395,  3396,   353,   350,    18,   499,   350,   498,
     368,   578,   180,   445,   238,   607,   608,   185,  3624,  3625,
     218,  3627,  3628,   553,  2596,   249,   159,   437,   437,   601,
    3749,  3749,   607,   608,   315,   459,    15,    16,   606,   488,
     389,   607,   608,   241,  2675,   607,   608,   254,  2674,   459,
     218,   607,   608,  2679,  2685,   181,   337,   338,  2684,   340,
    2691,   494,  2688,   513,  2690,   554,   607,   608,  3010,   159,
    1105,  1106,   494,   241,  2700,   265,  2702,  2703,   150,  2705,
      83,   307,  2713,   608,    96,   311,  2712,  2718,  2714,   499,
     499,   352,   318,  2724,  2725,   509,  2546,  2723,   607,  3041,
    3876,  3877,   149,   327,   120,  2731,   106,  3049,   457,  4129,
    3052,  4131,  2738,  2739,  2940,  2941,  3652,   613,   476,   400,
    2692,  2693,  3658,  2749,  2899,  2900,   350,  2753,     6,  2755,
    3171,  3172,   111,   112,   113,   114,   115,   149,   606,  4159,
     105,   153,     4,   553,  2770,  2717,   450,   577,   231,   608,
      55,  2749,   510,   374,   564,   565,   163,  2783,   417,   106,
     211,   608,   608,   614,  2790,   514,   153,   516,    68,   181,
     396,    12,   582,   581,   584,   522,   374,  4197,  4198,   482,
     483,  3418,   485,   195,   487,  2811,   607,   174,   200,   387,
     607,   133,     9,    74,   614,   608,   499,   607,   608,   614,
     187,   611,   612,  2775,   607,   607,   606,   488,   253,   221,
     197,   151,   608,   437,   350,  2943,   228,   614,   613,   387,
      48,   265,   265,   449,   265,   106,   238,   206,   207,   208,
     209,  2959,   495,   496,   265,   498,   499,   249,   265,   502,
     265,   504,   254,   608,  3963,  3963,   513,   606,   608,   260,
     373,   263,   608,   533,  2880,   134,   608,   244,   245,   533,
      12,   153,  2888,    25,    26,   608,  3432,   608,   608,   608,
     151,  3733,   231,  2723,   601,   499,   232,   171,   511,   477,
     181,   558,    31,   608,   608,   272,  2912,   472,   376,   129,
     350,   608,   607,   153,   608,  3023,    58,    59,    60,   153,
     153,   153,   153,   153,  2930,  2931,    68,   153,  2934,   477,
     153,   153,    74,   608,   153,   327,  2888,  2943,   153,   153,
      82,   153,   153,  2949,   153,   560,   153,   153,   307,   153,
     309,   310,   311,  2959,   153,  1487,   588,   218,   350,   318,
    2790,  2967,   564,   608,   106,   183,   601,   334,   360,   186,
     607,   607,   231,   607,   580,   134,   554,   607,   120,   607,
    2986,   123,  3629,  3630,  3631,  3545,  4049,   607,   607,   595,
     183,   608,   600,  3909,   606,   553,   607,   389,  3004,    33,
     359,  3007,  3008,   362,  3010,   134,   554,   607,   607,   151,
     607,   607,   460,   608,   608,   607,  3666,  3023,   607,   386,
    3026,   607,   606,  1555,   606,   604,  3134,  1559,    35,   606,
     582,   607,   533,   294,   608,  3041,   219,   396,   606,   505,
     606,   193,   493,  3049,   183,   437,  3052,   614,   183,   397,
    1582,   312,   607,   459,  3596,   608,   181,   608,   317,    46,
     134,   325,  3068,   420,   450,  3071,   488,   459,   519,   488,
    3076,   488,  3024,   488,   335,   488,   218,   606,   606,   264,
    3032,   606,  4145,   225,   350,  3091,   565,   134,   350,   448,
     449,   614,   607,   127,   350,   147,  3204,   607,   240,   227,
     227,   608,   231,   110,   134,  3111,   614,   499,   607,   607,
     117,   607,  4211,  4211,   607,   533,  3122,   151,   607,   614,
     614,   155,   614,   607,   253,   533,   614,   614,  3134,   533,
     608,   589,  3084,   776,   522,  4234,  4234,   260,    46,   606,
     533,   606,  4241,  4241,  4060,  4061,   606,  4063,  4247,  4247,
     153,   183,   294,   228,   188,  3107,   357,   231,   317,   183,
    3810,   553,   169,   183,   183,   614,   235,   614,   344,   176,
     312,   205,   608,   565,   238,   238,   363,   308,   106,  3185,
     106,    71,   374,  3189,   374,   374,   533,   129,   317,   239,
     582,   642,   584,   514,   239,   202,   647,  4113,  3204,  4115,
    4116,   514,   129,   462,   463,   374,    46,   374,   337,   338,
     111,   112,   113,   114,   115,   607,   608,   372,   374,   611,
     612,   580,   533,  3840,  3766,   367,   677,  3838,   374,   374,
     606,   265,   606,   375,   593,   594,   595,   498,  3244,   356,
     195,  3071,   693,   317,   522,    18,   434,   360,  3254,   614,
    3256,   606,   374,   514,   288,   601,  4172,   606,   229,  3265,
     229,   268,   606,  3269,   607,  3271,   607,  3375,   584,   607,
     317,   350,   607,   607,   614,   607,  4209,   607,   607,   153,
     154,   606,   411,   734,   735,   736,   737,   317,   607,   601,
     214,   608,   255,   374,   608,   746,   614,   607,   607,   183,
     442,   231,   559,   462,   463,   206,   207,   208,   209,    68,
     251,   350,   608,   187,   614,   238,   238,   385,    74,   350,
    3866,   328,   241,   197,   241,   350,  3434,    18,   607,   350,
    3336,   608,   339,   462,   463,   606,   343,   344,   597,   598,
     599,   600,   601,   602,   603,   604,   475,    46,  3354,   350,
     474,   451,   607,   607,   388,   608,   498,  3363,  3364,  3365,
     234,   254,   453,   397,   607,   402,   193,   247,   584,  3375,
     140,   245,   514,   608,   195,   517,   461,   606,   412,   607,
     238,   606,   238,    78,   608,   469,   241,   241,   462,   463,
     136,  3343,   474,   606,    18,   446,   430,   607,   272,    33,
      33,   314,   243,   608,  3512,   608,   307,   607,   309,   310,
     311,   553,   606,   608,  3420,   462,   463,   318,   397,   263,
     357,   607,   584,   607,   228,   607,   606,   606,  3434,   606,
     608,   606,   462,   463,   607,   469,   470,   607,   597,   598,
     599,   600,   601,   602,   603,   604,  3452,   607,   614,   607,
     607,    46,   200,   607,   607,   606,   402,   331,   607,   565,
     494,   608,  3468,   314,   522,   522,   608,  3478,   597,   598,
     599,   600,   601,   602,   603,   604,   565,   120,  3484,   513,
     606,   120,   516,   383,   614,   606,   606,  4098,   606,   608,
      33,   607,   344,  4110,  3602,   396,   314,   165,   241,   522,
     522,   516,   569,   607,   522,   607,  3512,   606,   606,   565,
     565,   606,   606,   291,   607,   522,   606,   559,   606,   526,
     971,   575,   529,   597,   598,   599,   600,   601,   602,   603,
     604,   575,   539,  3539,   120,   241,   241,   544,   103,   344,
     547,   343,   492,   584,   606,  3551,  3552,   448,   449,   434,
     357,   598,   599,   600,   601,   602,   603,   604,   607,   559,
     504,  4178,  3514,   606,   181,  4107,   606,   228,   350,   599,
     600,   601,   602,   603,   604,  1026,  1027,   339,   570,   608,
     148,    30,   581,  3589,  1035,  1036,  1037,  1038,  1039,  1040,
    1041,  4202,   599,   600,   181,  1046,  3602,   607,  1049,  1050,
     344,  1052,   615,  1054,   524,   607,   129,  1058,   129,   606,
    1061,  1062,  1063,  1064,   151,  1066,  1067,   389,  3624,  3625,
     185,  3627,  3628,  1074,  1075,  4236,  1077,  1078,  1079,  1080,
    1081,  4248,  1083,    70,  1085,  1086,  1087,  1088,  1089,  1090,
    1091,  1092,  1093,  1094,  1095,   606,   581,  1098,  1099,   183,
    1101,    30,  1103,   218,    61,   357,  1107,    61,  1109,  1110,
     607,   370,    35,   608,   607,    12,    13,   606,   505,    46,
    1121,  1122,   256,   606,    46,   606,   410,   228,  1129,   580,
     147,   357,   357,  3689,   128,  1136,  1137,  1138,  3694,  1140,
     136,   612,   606,   594,   595,    46,  1147,  1148,  1149,   264,
    1151,  1152,  1153,  1154,  1155,    46,  1157,  1158,  1159,  1160,
    1161,  1162,  1163,  1164,   146,    46,     5,  1168,  1169,   350,
     350,   581,  3552,   147,   213,   270,   612,   615,   119,  3735,
     142,     6,    46,   441,   606,    46,    54,   110,    13,    14,
     519,    46,   607,  3749,   117,    63,   559,   443,    95,  3755,
      25,    26,    52,   124,   211,    73,   525,   147,   607,  3589,
     608,   608,   612,   198,    46,   608,   612,    85,    86,    87,
     608,  3879,   607,   607,  3780,    52,  3782,   124,  3784,   424,
     181,    56,   347,   101,   181,    60,    61,   181,   353,   214,
     137,    66,   525,  3799,   583,   120,   169,   344,   606,    74,
     459,    25,    26,   176,   182,   608,  3699,    82,  2106,  3093,
    1909,  3094,  2283,   160,  3820,   162,   622,    92,  3352,  3726,
    3841,  4038,  3350,  4039,  3354,  3550,   173,  4236,  4189,   202,
      45,   106,   549,  2580,  1728,   950,    60,  4199,  3542,  3542,
    3542,  3542,  3542,  3542,  1295,   120,   193,  4078,   123,  3542,
      74,  3542,  1303,  3542,  3542,   130,   131,  3915,    82,  4078,
    3542,  4032,   137,  3941,  3542,  3940,  3542,  1403,   647,  1656,
     145,   218,  2345,  3879,   149,   989,   151,   224,  3986,  3885,
    1870,  1413,   106,  3047,  2559,  2159,  3559,  2912,  1248,  3755,
    3869,  3187,   457,  3845,  3590,   268,   120,  4145,   677,   123,
    4057,  3766,  4107,  3110,   179,   490,  2776,  2338,  1458,  2738,
    2346,  3111,   477,  2741,   693,  3254,   263,  3295,  3295,  3328,
    3477,  3873,  3650,  3523,  3866,  3512,  2959,   151,   491,  3898,
     491,  1942,  3848,  3901,  3860,   103,  3902,  3856,  2420,  3735,
    3658,   216,  3256,   218,  2345,  1801,  3482,  4055,  2734,   514,
     225,   516,  2171,  1363,   519,   328,  3255,  3963,   737,  1720,
    2138,  2546,  1412,  1454,  2907,   240,   569,  3544,  2193,  2057,
     343,   344,  1739,   865,  2888,  2523,  1068,  1975,  2246,  2976,
    3986,  2056,  3617,  3459,  4001,  3265,  3091,  4002,   306,   554,
    2085,  3453,   160,  3877,   218,  4001,  4002,   562,  4178,  3434,
    2198,   225,  1946,  2133,  1042,   323,  2175,  2924,  3189,  1236,
    1261,  2986,  2925,  3963,  1315,   559,   240,   638,   186,   294,
    1790,  3973,  3974,  1480,   548,    12,    13,  1791,  1343,  3271,
    1676,  1267,  2910,  4143,  4100,  3993,  4067,   312,  4241,  4247,
    3515,   316,  1493,   390,  2930,  1295,  1744,   394,  2967,  4055,
     218,  3442,  2612,  3215,  1702,   540,   847,  1229,  3579,  2534,
    1463,  3585,   541,   410,   852,   486,   486,   622,   622,   622,
     294,   418,    -1,    -1,    -1,    -1,    -1,  4083,    -1,   426,
     355,    -1,    -1,  1285,  4090,   360,    -1,    -1,   312,    -1,
      -1,    -1,   367,    -1,    -1,    -1,   264,    -1,    -1,   374,
     375,    -1,    -1,    -1,   451,    -1,    -1,    -1,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   464,   465,    -1,
      -1,    -1,  4230,    -1,    -1,    -1,    -1,    -1,    -1,   447,
     405,    -1,    -1,    -1,    -1,    -1,    -1,   124,  1589,  1590,
    1591,    -1,    -1,   367,   419,   420,   421,   422,    -1,   522,
     137,   375,  1603,   526,  4160,    -1,   529,    -1,    -1,  4165,
      -1,   508,    -1,    -1,    -1,    -1,   539,   442,    25,    26,
      -1,   544,    -1,   160,   547,   162,  3922,    -1,  1629,   347,
      -1,    -1,    -1,   501,  1635,   353,   173,  1638,    -1,  1640,
     537,  3937,   971,    -1,    -1,  1646,  4202,  1648,  1649,    -1,
     518,    58,    59,    60,  3950,  4211,   193,    -1,    -1,    -1,
      -1,    68,   559,    -1,   561,    -1,   384,    74,   442,    -1,
      -1,   389,    -1,   498,  4230,    82,   599,   600,  4234,    -1,
    4236,   218,    -1,    -1,    -1,  4241,    -1,   224,    -1,   514,
      -1,  4247,   517,    -1,    -1,    -1,    -1,  1026,  1027,   106,
      -1,    -1,    -1,    -1,    -1,    -1,  1035,  1036,    -1,    -1,
    1039,  1040,  1041,   120,  1715,   540,   123,  1046,    -1,    -1,
    1049,  1050,    -1,  1052,   498,  1054,   263,    -1,   553,    -1,
      -1,    -1,  1061,  1062,  1063,  1064,    -1,  1066,    -1,   457,
     514,    -1,    -1,   517,   151,  1074,  1075,    -1,  1077,  1078,
      -1,    -1,    -1,    -1,  1083,    -1,  1085,  1086,  1087,    -1,
      -1,  1090,  1091,  1092,  1093,  1094,  1095,    13,    14,  1098,
    1099,    -1,  1101,    -1,  1103,    -1,    -1,    -1,  1107,   553,
    1109,  1110,    -1,    -1,    30,  4081,    -1,   612,    34,    -1,
      -1,    -1,  1121,  1122,    -1,  4091,   514,    -1,    -1,    -1,
    1129,   519,    48,    49,    -1,    -1,    -1,  1136,  1137,  1138,
      56,   218,    -1,    -1,    60,    61,    -1,    -1,   225,   537,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      76,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
    1169,    -1,    -1,    -1,   562,  4141,    -1,    -1,    -1,    95,
      -1,    -1,    -1,   390,    -1,    -1,    -1,   394,    -1,   577,
      -1,    -1,    -1,    -1,    -1,  4161,    -1,  4163,    -1,    -1,
     116,    -1,    -1,   410,  4170,    -1,    -1,    -1,   124,   125,
     126,   418,    -1,    -1,    -1,  4181,    -1,   294,  1889,   426,
     136,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,    -1,   312,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   451,    -1,   162,  4213,  4214,    -1,
      -1,    -1,  4218,    -1,    -1,    -1,    -1,   464,   465,    33,
      -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,   198,    -1,  1955,   201,    -1,    -1,  1959,    -1,
     367,    -1,    -1,  1964,  1965,    -1,  1295,    -1,   375,    -1,
      -1,   508,  1973,    -1,  1303,  1976,    -1,    -1,   224,    -1,
     226,    -1,    -1,    -1,    -1,  1986,    -1,  1988,  1989,    -1,
    1991,  1992,  1993,  1994,  1995,    -1,   242,  1998,    -1,    -1,
     537,    -1,    -1,    -1,    -1,    -1,  2007,    -1,    -1,    -1,
      -1,    -1,    -1,   259,  2015,    -1,  2017,   263,  2019,  2020,
    2021,  2022,   559,   127,   561,  2026,  2027,  2028,    -1,    -1,
      -1,    -1,  2033,  2034,  2035,   442,  2037,    -1,  2039,    -1,
    2041,    -1,  2043,    -1,  2045,    -1,    -1,   151,    -1,  2050,
      -1,   155,    -1,    -1,    -1,   215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2068,    -1,    -1,
      -1,    -1,    -1,    -1,  2075,    -1,    -1,  2078,    -1,    -1,
      -1,    -1,    -1,  2084,   188,    -1,  2087,    -1,    -1,    -1,
    2091,   498,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,    -1,    -1,   514,    -1,   355,
     517,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,   284,   285,   286,   287,   374,   289,
     290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,    -1,  2146,   553,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,    -1,
      -1,   265,    -1,    -1,  1493,    -1,    -1,    -1,    -1,    -1,
      -1,   417,    -1,    -1,   420,    95,   422,    -1,    -1,   425,
      -1,    -1,   428,   429,   288,    -1,    -1,    58,    59,    60,
     436,    -1,   438,    -1,    -1,    -1,    -1,    68,    -1,   445,
      -1,    -1,    -1,    74,   124,   451,    -1,    -1,    -1,    -1,
      -1,    82,    -1,   459,    -1,    -1,    -1,   137,   464,    -1,
     466,    -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,    -1,
     160,    -1,   162,    -1,    -1,    -1,    -1,   493,    -1,   120,
      -1,   497,   123,   173,   414,   415,    -1,    -1,    -1,    -1,
    1589,  1590,  1591,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,   388,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   397,   540,    -1,    -1,    -1,   218,    -1,
    1629,    -1,    -1,    -1,   224,    -1,   552,    -1,   412,  1638,
     556,  1640,    -1,   559,    -1,    -1,    -1,    -1,   564,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   430,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   263,    -1,   591,    -1,   218,    -1,    -1,
      -1,    -1,    13,    14,   225,    -1,    -1,    -1,    -1,    -1,
     606,    -1,    -1,    -1,    -1,   469,   470,    -1,    -1,   240,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,  1715,    48,    49,    -1,
     494,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2433,    -1,    95,    -1,  2437,    -1,    -1,    -1,
      -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,    -1,    -1,  2459,  2460,
      -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
     390,    -1,    -1,    -1,    -1,   136,   137,    -1,  2479,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2488,    -1,  2490,
     410,  2492,    -1,    -1,    -1,    -1,   367,    -1,   418,    -1,
      -1,   162,    -1,    -1,   375,    -1,   426,    -1,    -1,    -1,
      -1,  2512,    -1,    -1,    -1,    -1,  2517,   178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   451,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
     201,  2542,    -1,    -1,   464,   465,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1889,    -1,    -1,   224,    -1,   226,    -1,    -1,    -1,    -1,
      -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   242,    -1,    -1,    -1,    -1,    -1,    -1,   508,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   259,    -1,
      -1,    -1,   263,    -1,  2605,    -1,    -1,    -1,  2609,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1955,   498,    -1,    -1,
    1959,    -1,    -1,    -1,    -1,  1964,  1965,    -1,    -1,   559,
      -1,   561,    -1,   514,  1973,    -1,   517,    -1,    -1,    -1,
      -1,    -1,  2653,    -1,    -1,    -1,    -1,  1986,    -1,  1988,
      -1,    -1,  1991,  1992,  1993,  1994,  1995,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2007,    -1,
      -1,    -1,   553,    -1,    -1,    -1,  2015,    -1,  2017,    -1,
    2019,  2020,  2021,    -1,   355,    -1,    -1,  2026,  2027,  2028,
      -1,    -1,    -1,    -1,  2033,  2034,  2035,    -1,  2037,    -1,
    2039,    -1,  2041,   374,  2043,    -1,  2045,    -1,    -1,    -1,
      -1,  2050,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,   606,    -1,    -1,    -1,  2068,
      -1,    -1,    -1,    -1,    -1,  2746,  2747,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2084,   417,    -1,  2087,   420,
      -1,   422,    -1,    -1,   425,    -1,    -1,   428,   429,    -1,
      -1,    -1,    -1,    -1,    -1,   436,    -1,   438,    -1,    -1,
      -1,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,
     451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   459,    -1,
      -1,    -1,    -1,   464,    -1,   466,    -1,    -1,   469,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2819,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   493,    -1,    -1,    -1,   497,    -1,    -1,    -1,
      -1,    -1,  2843,  2844,    -1,  2846,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2855,    -1,    -1,    -1,    -1,  2860,
      -1,    -1,  2863,    -1,  2865,  2866,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,  2886,    -1,    -1,    -1,    -1,
      -1,   552,    -1,    -1,    -1,   556,    -1,    -1,   559,    -1,
    2901,    -1,    -1,   564,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    33,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
      42,    43,    -1,  2924,    -1,    -1,    -1,    -1,    -1,    -1,
     591,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2954,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2968,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,   107,    -1,  2988,   110,    -1,
      -1,    -1,    -1,    -1,    25,    26,   118,    -1,    -1,    -1,
      -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,   135,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
     152,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    69,    -1,    -1,
      -1,    82,    -1,   175,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    -1,   189,   190,    91,
      -1,    93,    -1,    95,    -1,   106,    -1,    -1,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      -1,    -1,    -1,    -1,  2433,    -1,   137,   229,  2437,    -1,
      -1,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,   151,
    2459,  2460,    -1,    -1,   156,   257,    -1,   159,    -1,    -1,
      -1,    -1,    -1,    -1,   266,   267,    -1,   269,   179,    -1,
    2479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2488,
      -1,  2490,   184,  2492,   186,    -1,    -1,    -1,    -1,    -1,
     192,    -1,   194,    -1,    -1,    -1,    -1,    -1,   300,   301,
     302,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,  3190,
      -1,    -1,    -1,    -1,   225,   217,   218,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,    -1,    -1,   329,    -1,   240,
      -1,    -1,    -1,  2542,    -1,    -1,    -1,   239,    -1,    -1,
      -1,    -1,    -1,   345,   346,    -1,    -1,    -1,  3229,  3230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3238,   260,    -1,
      -1,    -1,  3243,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,    -1,
      -1,    -1,    -1,   294,    -1,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2605,    -1,    -1,    -1,
    2609,   312,   404,    -1,    -1,   316,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2653,    -1,    -1,    -1,    -1,   360,
      -1,    -1,   354,   455,    -1,    -1,   367,   459,    -1,    -1,
      -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,   377,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   388,   389,    -1,    -1,
     392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3384,    -1,    -1,    -1,    -1,    -1,   420,
      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   523,    -1,    -1,   526,    -1,    -1,   529,   530,   531,
     532,   442,    -1,    -1,  3415,    -1,    -1,  2746,  2747,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3429,    -1,
      -1,    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,
      -1,  3442,    -1,    -1,    -1,    -1,    -1,   469,    -1,   571,
     572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,    -1,
      -1,    -1,   494,   595,    -1,    -1,   498,    -1,    -1,    -1,
      -1,    -1,    -1,   514,    -1,    -1,   517,    -1,    -1,    -1,
    2819,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2843,  2844,    -1,    -1,    -1,    -1,
      -1,    -1,   553,    -1,    -1,    -1,  2855,    -1,    -1,    -1,
      -1,  2860,    -1,    -1,  2863,    -1,  2865,  2866,    -1,    -1,
      -1,  3542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   573,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2901,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3590,
      -1,    -1,    -1,    -1,    -1,  2924,    -1,    -1,    -1,  3600,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3609,    -1,
    3611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2988,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3686,    -1,    -1,    -1,    -1,
      -1,  3692,  3693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3771,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3813,    -1,  3815,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3825,    -1,  3827,  3828,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3229,  3230,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3238,
      -1,    -1,    -1,    -1,  3243,    -1,    -1,    -1,    -1,  3920,
      -1,  3922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3937,  3938,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3950,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3960,
      -1,    -1,    -1,  3964,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4018,  4019,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4031,  4032,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4049,    -1,
      -1,    -1,    -1,    -1,    -1,  3384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4081,    -1,    -1,    -1,    -1,    -1,  3415,  4088,    -1,    -1,
    4091,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3442,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4122,    -1,    -1,    -1,    -1,    -1,    -1,  4129,    -1,
    4131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4141,    -1,    -1,    -1,  4145,    -1,    -1,  4148,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4159,    -1,
    4161,    -1,  4163,    -1,    -1,    -1,    -1,    -1,    -1,  4170,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4197,  4198,    -1,    -1,
      -1,    -1,  4203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4213,  4214,    -1,    -1,    -1,  4218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3609,    -1,  3611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3686,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3771,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3813,    -1,  3815,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3825,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3920,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3938,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3964,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4018,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4088,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,  4122,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,  4148,
      41,    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,  4203,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,  4250,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,   246,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,   534,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,   607,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,   183,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,   338,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,   424,   425,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,   495,   496,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,   566,   567,   568,   569,   570,
      -1,    -1,   573,   574,    -1,   576,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,   599,   600,
      -1,    -1,    -1,    -1,   605,   606,    -1,    -1,   609,   610,
      -1,    -1,   613,   614,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,   343,   344,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,   613,   614,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,   218,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,   241,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,   253,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,   477,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
      -1,   497,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,
      -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,    -1,   590,   591,   592,    -1,    -1,   595,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   614,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,   218,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,   241,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,    -1,   497,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,   551,   552,
      -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,
      -1,    -1,   595,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   614,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,
     340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,
     560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,
     590,   591,   592,    -1,    -1,   595,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,   607,    -1,    -1,
      17,    -1,    -1,    20,   614,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,    -1,   595,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
     607,    -1,    -1,    -1,    -1,    17,   613,   614,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,
      -1,   303,   304,   305,   306,   307,   308,    -1,    -1,   311,
     312,    -1,   314,    -1,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,   341,
      -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,   391,
     392,   393,   394,    -1,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,    -1,   497,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,    -1,   508,   509,   510,   511,
      -1,   513,   514,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,   551,
     552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,
     562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,
     592,    -1,    -1,   595,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,   606,    -1,    -1,    -1,    17,    -1,
      -1,    20,   614,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,   228,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,
      -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,
      -1,   590,   591,   592,    -1,    -1,   595,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   614,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
      -1,   497,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,
      -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,    -1,   590,   591,   592,    -1,    -1,   595,
      -1,    -1,    -1,    -1,     5,   601,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,   614,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,    -1,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,   606,    -1,    -1,    -1,    17,
      -1,    -1,    20,   614,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,
     308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
      -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,    -1,   356,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,    -1,
     388,    -1,   390,   391,   392,   393,   394,    -1,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,    -1,
     508,   509,   510,   511,    -1,   513,   514,    -1,    -1,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,
     558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
     588,    -1,   590,   591,   592,    -1,    -1,   595,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,   613,   614,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,    -1,   497,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,   551,   552,
      -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,
      -1,    -1,   595,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,   614,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,
     340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,
     560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,
     590,   591,   592,    -1,    -1,   595,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   614,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,    -1,   595,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,   614,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,
     304,   305,   306,   307,   308,    -1,    -1,   311,   312,    -1,
     314,    -1,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,
     334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,    -1,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,    -1,   388,    -1,   390,   391,   392,   393,
     394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,    -1,   497,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,    -1,   508,   509,   510,   511,    -1,   513,
     514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,   551,   552,    -1,
      -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,   563,
      -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,    -1,
      -1,   595,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     614,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,    -1,   595,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   613,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,
      -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,
      -1,   590,   591,   592,    -1,    -1,   595,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   613,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,    -1,   595,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,   613,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,    -1,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,
     305,   306,   307,   308,    -1,    -1,   311,   312,    -1,   314,
      -1,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,   368,    -1,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
     385,   386,    -1,   388,    -1,   390,   391,   392,   393,   394,
      -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,   424,
      -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,    -1,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,
     455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,   489,    -1,    -1,   492,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,    -1,   508,   509,   510,   511,    -1,   513,   514,
      -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
     535,   536,    -1,    -1,    -1,    -1,   541,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,    -1,    -1,   558,    -1,    -1,    -1,   562,   563,    -1,
      -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,    -1,   577,   578,   579,   580,    -1,    -1,   583,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,   592,    -1,     5,
     595,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,   608,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
      -1,   497,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,
      -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,    -1,   590,   591,   592,    -1,     5,   595,
       7,     8,     9,    10,    11,   601,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,     5,   595,     7,
       8,     9,    10,    11,   601,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,
     308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
      -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,    -1,   356,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,    -1,
     388,    -1,   390,   391,   392,   393,   394,    -1,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,    -1,
     508,   509,   510,   511,    -1,   513,   514,    -1,    -1,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,
     558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
     588,    -1,   590,   591,   592,    -1,     5,   595,     7,     8,
       9,    10,    11,   601,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,
      -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,
      -1,   590,   591,   592,    -1,     5,   595,     7,     8,     9,
      10,    11,   601,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,   337,   338,    -1,
     340,   341,    -1,    -1,   344,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,   479,
     480,   481,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
     540,   541,   542,   543,   544,   545,   546,    -1,   548,   549,
      -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,
     560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,
     590,   591,   592,    -1,     5,   595,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,   120,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,   153,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,   460,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,     5,   595,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,
      -1,    -1,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,
      -1,   303,   304,   305,   306,   307,   308,    -1,    -1,   311,
     312,    -1,   314,    -1,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,   341,
      -1,    -1,   344,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,   391,
     392,   393,   394,    -1,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,    -1,   497,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,    -1,   508,   509,   510,   511,
      -1,   513,   514,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,
     542,   543,   544,   545,   546,    -1,   548,   549,    -1,   551,
     552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,
     562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,
     592,    -1,     5,   595,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,   120,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,    -1,   497,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,   551,   552,
      -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,
      -1,     5,   595,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,   120,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,
     304,   305,   306,   307,   308,    -1,    -1,   311,   312,    -1,
     314,    -1,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,
     334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,    -1,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,    -1,   388,    -1,   390,   391,   392,   393,
     394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,    -1,   497,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,    -1,   508,   509,   510,   511,    -1,   513,
     514,    -1,    -1,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,   551,   552,    -1,
      -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,   563,
      -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,    -1,
       5,   595,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    99,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,
     305,   306,   307,   308,    -1,    -1,   311,   312,    -1,   314,
      -1,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,
     335,   336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,    -1,   388,    -1,   390,   391,   392,   393,   394,
      -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,    -1,   497,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,    -1,   508,   509,   510,   511,    -1,   513,   514,
      -1,    -1,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
     535,   536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,
     555,    -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,
      -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,    -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,   588,    -1,   590,   591,   592,    -1,     5,
     595,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
      -1,   497,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,
      -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,    -1,   590,   591,   592,    -1,     5,   595,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,   202,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,     5,   595,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,
     308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
      -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,    -1,   356,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,    -1,
     388,    -1,   390,   391,   392,   393,   394,    -1,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,    -1,
     508,   509,   510,   511,    -1,   513,   514,    -1,    -1,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,
     558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
     588,    -1,   590,   591,   592,    -1,     5,   595,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,   120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,
      -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,
      -1,   590,   591,   592,    -1,     5,   595,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,
     340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,
     560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,
     590,   591,   592,    -1,     5,   595,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,     5,   595,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,
      -1,   303,   304,   305,   306,   307,   308,    -1,    -1,   311,
     312,    -1,   314,    -1,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,   341,
      -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,   391,
     392,   393,   394,    -1,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,    -1,   497,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,    -1,   508,   509,   510,   511,
      -1,   513,   514,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,   551,
     552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,
     562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,
     592,    -1,     5,   595,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    88,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,    -1,
      -1,   384,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,   419,    -1,   421,   422,
     423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,
     433,   434,    -1,    -1,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,    -1,
      -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,   472,
     473,   474,   475,   476,    -1,    -1,    -1,   480,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
     493,   494,    -1,    -1,   497,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,   551,   552,
      -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,
      -1,     5,   595,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,
     304,   305,   306,   307,   308,    -1,    -1,   311,   312,    -1,
     314,    -1,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,
     334,   335,   336,    -1,    -1,    -1,   340,   341,    -1,    -1,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,    -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,    -1,    -1,
     384,   385,   386,    -1,   388,    -1,   390,   391,   392,   393,
     394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,   419,    -1,   421,   422,   423,
      -1,    -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,
     434,    -1,    -1,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,
     454,   455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,   467,   468,   469,   470,    -1,   472,   473,
     474,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,   493,
     494,    -1,    -1,   497,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,    -1,   508,   509,   510,   511,    -1,   513,
     514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   535,   536,    -1,    -1,    -1,   540,   541,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,   551,   552,    -1,
      -1,   555,    -1,    -1,   558,    -1,   560,    -1,   562,   563,
      -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   587,   588,    -1,   590,   591,   592,    -1,
       5,   595,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,   116,    -1,    -1,    -1,   120,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,   136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,
     305,   306,   307,   308,    -1,    -1,   311,   312,    -1,   314,
      -1,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,
     335,   336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
      -1,   356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,    -1,    -1,   384,
     385,   386,    -1,   388,    -1,   390,   391,   392,   393,   394,
      -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,   419,    -1,   421,   422,   423,    -1,
      -1,   426,    -1,   428,    -1,   430,   431,    -1,   433,   434,
      -1,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,
     455,   456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,   467,   468,   469,   470,    -1,   472,   473,   474,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,
      -1,    -1,   497,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,    -1,   508,   509,   510,   511,    -1,   513,   514,
      -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
     535,   536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,
     555,    -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,
      -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,    -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,
      -1,    -1,   587,   588,    -1,   590,   591,   592,    -1,     5,
     595,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
     116,    -1,    -1,    -1,   120,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
     136,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
     356,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,    -1,    -1,   384,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,
     426,    -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,
      -1,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,
     456,   457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,   467,   468,   469,   470,    -1,   472,   473,   474,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,
      -1,   497,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,
      -1,    -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,    -1,   590,   591,   592,    -1,     5,   595,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,    -1,    -1,   384,   385,   386,
     387,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,   419,    -1,   421,   422,   423,    -1,    -1,   426,
      -1,   428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,
     457,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
     467,   468,   469,   470,    -1,   472,   473,   474,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,
     497,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,   540,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,
      -1,   558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,
     587,   588,    -1,   590,   591,   592,    -1,     5,   595,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      88,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,
     308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
      -1,    -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,    -1,   356,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,    -1,    -1,   384,   385,   386,    -1,
     388,    -1,   390,   391,   392,   393,   394,    -1,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,   419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,
     428,    -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,    -1,    -1,   454,   455,   456,   457,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,
     468,   469,   470,    -1,   472,   473,   474,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,   489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,    -1,
     508,   509,   510,   511,    -1,   513,   514,    -1,    -1,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,
      -1,    -1,   540,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,
     558,    -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,
     578,   579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,
     588,    -1,   590,   591,   592,    -1,     5,   595,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    88,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,   340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,    -1,   384,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
     419,    -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,
      -1,   430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,
     469,   470,    -1,   472,   473,   474,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,   540,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,
      -1,   560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,
      -1,   590,   591,   592,    -1,     5,   595,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    88,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,
     120,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,
     340,   341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,   419,
      -1,   421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,
     430,   431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,
     470,    -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
     540,   541,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,   551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,
     560,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,
     590,   591,   592,    -1,     5,   595,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    88,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,    -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,   419,    -1,
     421,   422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,
     431,    -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,    -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,
      -1,   472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,   493,   494,    -1,    -1,   497,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,    -1,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
     551,   552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,
     591,   592,    -1,     5,   595,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    88,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,   136,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,
      -1,   303,   304,   305,   306,   307,   308,    -1,    -1,   311,
     312,    -1,   314,    -1,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,    -1,    -1,   340,   341,
      -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,    -1,   356,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
      -1,    -1,   384,   385,   386,    -1,   388,    -1,   390,   391,
     392,   393,   394,    -1,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,   419,    -1,   421,
     422,   423,    -1,    -1,   426,    -1,   428,    -1,   430,   431,
      -1,   433,   434,    -1,    -1,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,   467,   468,   469,   470,    -1,
     472,   473,   474,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,
     492,   493,   494,    -1,    -1,   497,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,    -1,   508,   509,   510,   511,
      -1,   513,   514,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,   540,   541,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,   551,
     552,    -1,    -1,   555,    -1,    -1,   558,    -1,   560,    -1,
     562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,    -1,    -1,    -1,    -1,   587,   588,    -1,   590,   591,
     592,    -1,     5,   595,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,    -1,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,   172,
     173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,
      -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,    -1,    -1,
      -1,    -1,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,    -1,    -1,   421,    -1,
     423,   424,    -1,   426,    -1,    -1,    -1,   430,    -1,    -1,
     433,   434,   435,    -1,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,    -1,    -1,    -1,
      -1,   454,   455,   456,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,    -1,   470,    -1,   472,
      -1,    -1,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,    -1,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,    -1,    -1,   558,    -1,    -1,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
     583,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,   592,
      -1,     5,   595,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,
      94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,
      -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,   143,
      -1,   145,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,    -1,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,   290,    -1,   292,   293,
     294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,
     304,   305,   306,   307,   308,    -1,    -1,   311,   312,    -1,
     314,    -1,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,
     334,   335,   336,    -1,    -1,    -1,    -1,   341,    -1,    -1,
      -1,    -1,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,   380,    -1,    -1,    -1,
      -1,   385,   386,    -1,   388,    -1,   390,   391,   392,   393,
     394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,
      -1,   405,   406,   407,   408,   409,    -1,    -1,   412,   413,
     414,   415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,
     424,    -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,
     434,   435,    -1,    -1,    -1,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,
     454,   455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,
      -1,   465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,
      -1,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,
     484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,    -1,
     494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,
     504,   505,    -1,    -1,   508,   509,   510,   511,    -1,   513,
     514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,
     524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,
      -1,   535,   536,    -1,    -1,    -1,    -1,   541,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,    -1,    -1,
      -1,   555,    -1,    -1,   558,    -1,    -1,    -1,   562,   563,
      -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,
      -1,    -1,    -1,   577,   578,   579,   580,   581,    -1,   583,
      -1,    -1,    -1,   587,    -1,    -1,   590,    -1,   592,    -1,
       5,   595,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,
      -1,    -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,
     105,   106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,   139,   140,   141,    -1,   143,    -1,
     145,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,   172,   173,   174,
     175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,
      -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,   290,    -1,   292,   293,   294,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,
     305,   306,   307,   308,    -1,    -1,   311,   312,    -1,   314,
      -1,   316,    -1,   318,   319,   320,   321,   322,   323,   324,
     325,   326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,
     335,   336,    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,
      -1,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,   368,    -1,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,    -1,    -1,    -1,    -1,
     385,   386,    -1,   388,    -1,   390,   391,   392,   393,   394,
      -1,   396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,
     405,   406,   407,   408,   409,    -1,    -1,   412,   413,   414,
     415,   416,    -1,   418,    -1,    -1,   421,    -1,   423,   424,
      -1,   426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,
     435,    -1,    -1,    -1,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,
     455,   456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,
     475,   476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,
      -1,   486,    -1,    -1,   489,    -1,    -1,   492,    -1,   494,
      -1,    -1,    -1,   498,    -1,   500,   501,   502,   503,   504,
     505,    -1,    -1,   508,   509,   510,   511,    -1,   513,   514,
      -1,    -1,   517,   518,   519,   520,    -1,    -1,   523,   524,
      -1,   526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,
     535,   536,    -1,    -1,    -1,    -1,   541,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,    -1,    -1,    -1,
     555,    -1,    -1,   558,    -1,    -1,    -1,   562,   563,    -1,
      -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,
      -1,    -1,   577,   578,   579,   580,   581,    -1,   583,    -1,
      -1,    -1,   587,    -1,    -1,   590,    -1,   592,    -1,     5,
     595,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,
      -1,    97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
     106,   107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
      -1,   297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,
     306,   307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,
     316,    -1,   318,   319,   320,   321,   322,   323,   324,   325,
     326,    -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,
     336,    -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,   368,    -1,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,    -1,    -1,    -1,    -1,   385,
     386,    -1,   388,    -1,   390,   391,   392,   393,   394,    -1,
     396,   397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,
     406,   407,   408,   409,    -1,    -1,   412,   413,   414,   415,
     416,    -1,   418,    -1,    -1,   421,    -1,   423,   424,    -1,
     426,    -1,    -1,    -1,   430,    -1,    -1,   433,   434,   435,
      -1,    -1,    -1,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,   449,    -1,    -1,    -1,    -1,   454,   455,
     456,    -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,
      -1,    -1,   468,    -1,   470,    -1,   472,    -1,    -1,   475,
     476,    -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,
     486,    -1,    -1,   489,    -1,    -1,   492,    -1,   494,    -1,
      -1,    -1,   498,    -1,   500,   501,   502,   503,   504,   505,
      -1,    -1,   508,   509,   510,   511,    -1,   513,   514,    -1,
      -1,   517,   518,   519,   520,    -1,    -1,   523,   524,    -1,
     526,   527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,
     536,    -1,    -1,    -1,    -1,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,
      -1,    -1,   558,    -1,    -1,    -1,   562,   563,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,
      -1,   577,   578,   579,   580,    -1,    -1,   583,    -1,    -1,
      -1,   587,    -1,    -1,   590,    -1,   592,    -1,     5,   595,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,
      77,    78,    79,    80,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,
      97,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,
     107,    -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,    -1,   129,   130,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,   172,   173,   174,   175,    -1,
      -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,
     247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,   270,    -1,    -1,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,   290,    -1,   292,   293,   294,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,
     307,   308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,
      -1,   318,   319,   320,   321,   322,   323,   324,   325,   326,
      -1,    -1,   329,   330,    -1,    -1,   333,   334,   335,   336,
      -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,   368,    -1,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,    -1,    -1,    -1,    -1,   385,   386,
      -1,   388,    -1,   390,   391,   392,   393,   394,    -1,   396,
     397,   398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,
     407,   408,   409,    -1,    -1,   412,   413,   414,   415,   416,
      -1,   418,    -1,    -1,   421,    -1,   423,   424,    -1,   426,
      -1,    -1,    -1,   430,    -1,    -1,   433,   434,   435,    -1,
      -1,    -1,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,   449,    -1,    -1,    -1,    -1,   454,   455,   456,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   468,    -1,   470,    -1,   472,    -1,    -1,   475,   476,
      -1,    -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,
      -1,    -1,   489,    -1,    -1,   492,    -1,   494,    -1,    -1,
      -1,   498,    -1,   500,   501,   502,   503,   504,   505,    -1,
      -1,   508,   509,   510,   511,    -1,   513,   514,    -1,    -1,
     517,   518,   519,   520,    -1,    -1,   523,   524,    -1,   526,
     527,   528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,    -1,   541,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,    -1,    -1,    -1,   555,    -1,
      -1,   558,    -1,    -1,    -1,   562,   563,    -1,    -1,    -1,
      -1,    -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,
     577,   578,   579,   580,    -1,    -1,   583,    -1,    -1,    -1,
     587,    -1,    -1,   590,    -1,   592,    -1,     5,   595,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,
      -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
      -1,    -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,   132,    -1,    -1,    -1,    -1,    -1,
      -1,   139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,    -1,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,   175,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,   270,    -1,    -1,    -1,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,   290,    -1,   292,   293,   294,   295,    -1,   297,
     298,    -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,
     308,    -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,   329,   330,    -1,    -1,   333,   334,   335,   336,    -1,
      -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
     368,    -1,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,   380,    -1,    -1,    -1,    -1,   385,   386,    -1,
     388,    -1,   390,   391,   392,   393,   394,    -1,   396,   397,
     398,    -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,
     408,   409,    -1,    -1,   412,   413,   414,   415,   416,    -1,
     418,    -1,    -1,   421,    -1,   423,   424,    -1,   426,    -1,
      -1,    -1,   430,    -1,    -1,   433,   434,   435,    -1,    -1,
      -1,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,   449,    -1,    -1,    -1,    -1,   454,   455,   456,    -1,
      -1,    -1,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,
     468,    -1,   470,    -1,   472,    -1,    -1,   475,   476,    -1,
      -1,    -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,
      -1,   489,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,
     498,    -1,   500,   501,   502,   503,   504,   505,    -1,    -1,
     508,   509,   510,   511,    -1,   513,   514,    -1,    -1,   517,
     518,   519,   520,    -1,    -1,   523,   524,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,
      -1,    -1,    -1,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,    -1,    -1,    -1,   555,    -1,    -1,
     558,    -1,    -1,    -1,   562,   563,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,
     578,   579,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,
      -1,    -1,   590,    -1,   592,    -1,     5,   595,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    -1,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      89,    -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,
      -1,   110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,
     129,   130,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,
     139,   140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,   172,   173,   174,   175,    -1,    -1,    -1,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,   270,    -1,    -1,    -1,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,   303,   304,   305,   306,   307,   308,
      -1,    -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,
     319,   320,   321,   322,   323,   324,   325,   326,    -1,    -1,
     329,   330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,
      -1,    -1,   341,    -1,    -1,    -1,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,   368,
      -1,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,    -1,    -1,    -1,    -1,   385,   386,    -1,   388,
      -1,   390,   391,   392,   393,   394,    -1,   396,   397,   398,
      -1,    -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,
     409,    -1,    -1,   412,   413,   414,   415,   416,    -1,   418,
      -1,    -1,   421,    -1,   423,   424,    -1,   426,    -1,    -1,
      -1,   430,    -1,    -1,   433,   434,   435,    -1,    -1,    -1,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
     449,    -1,    -1,    -1,    -1,   454,   455,   456,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,
      -1,   470,    -1,   472,    -1,    -1,   475,   476,    -1,    -1,
      -1,    -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,
     489,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,   498,
      -1,   500,   501,   502,   503,   504,   505,    -1,    -1,   508,
     509,   510,   511,    -1,   513,   514,    -1,    -1,   517,   518,
     519,   520,    -1,    -1,   523,   524,    -1,   526,   527,   528,
     529,    -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,
      -1,    -1,   541,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,    -1,    -1,    -1,   555,    -1,    -1,   558,
      -1,    -1,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,
     579,   580,    -1,    -1,   583,    -1,    -1,    -1,   587,    -1,
      -1,   590,    -1,   592,    -1,     5,   595,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    -1,    82,    83,    -1,    85,    86,    87,    -1,    89,
      -1,    91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,
      -1,   101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,
     110,    -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,   139,
     140,   141,    -1,    -1,    -1,   145,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
     270,    -1,    -1,    -1,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
     290,    -1,   292,   293,   294,   295,    -1,   297,   298,    -1,
      -1,    -1,    -1,   303,   304,   305,   306,   307,   308,    -1,
      -1,   311,   312,    -1,   314,    -1,   316,    -1,   318,   319,
     320,   321,   322,   323,   324,   325,   326,    -1,    -1,   329,
     330,    -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,
      -1,   341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,   368,    -1,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
     380,    -1,    -1,    -1,    -1,   385,   386,    -1,   388,    -1,
     390,   391,   392,   393,   394,    -1,   396,   397,   398,    -1,
      -1,   401,    -1,    -1,    -1,   405,   406,   407,   408,   409,
      -1,    -1,   412,   413,   414,   415,   416,    -1,   418,    -1,
      -1,   421,    -1,   423,   424,    -1,   426,    -1,    -1,    -1,
     430,    -1,    -1,   433,   434,   435,    -1,    -1,    -1,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,   449,
      -1,    -1,    -1,    -1,   454,   455,   456,    -1,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,    -1,
     470,    -1,   472,    -1,    -1,   475,   476,    -1,    -1,    -1,
      -1,    -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,
      -1,    -1,   492,    -1,   494,    -1,    -1,    -1,   498,    -1,
     500,   501,   502,   503,   504,   505,    -1,    -1,   508,   509,
     510,   511,    -1,   513,   514,    -1,    -1,   517,   518,   519,
     520,    -1,    -1,   523,   524,    -1,   526,   527,   528,   529,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
      -1,   541,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,    -1,    -1,    -1,   555,    -1,    -1,   558,    -1,
      -1,    -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,
     570,    -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,    -1,   583,    -1,    -1,    -1,   587,    -1,    -1,
     590,    -1,   592,    -1,     5,   595,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    -1,    77,    78,    79,    80,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    89,    -1,
      91,    -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
     101,    -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,
      -1,    -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,
     141,    -1,    -1,    -1,   145,    -1,    -1,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
      -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,
      -1,    -1,    -1,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,   304,   305,   306,   307,   308,    -1,    -1,
     311,   312,    -1,   314,    -1,   316,    -1,   318,   319,   320,
     321,   322,   323,   324,   325,   326,    -1,    -1,   329,   330,
      -1,    -1,   333,   334,   335,   336,    -1,    -1,    -1,    -1,
     341,    -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,   368,    -1,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
      -1,    -1,    -1,    -1,   385,   386,    -1,   388,    -1,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,    -1,    -1,
     401,    -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,
      -1,   412,   413,   414,   415,   416,    -1,   418,    -1,    -1,
     421,    -1,   423,   424,    -1,   426,    -1,    -1,    -1,   430,
      -1,    -1,   433,   434,   435,    -1,    -1,    -1,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,   449,    -1,
      -1,    -1,    -1,   454,   455,   456,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,    -1,   468,    -1,   470,
      -1,   472,    -1,    -1,   475,   476,    -1,    -1,    -1,    -1,
      -1,    -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,
      -1,   492,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,
     501,   502,   503,   504,   505,    -1,    -1,   508,   509,   510,
     511,    -1,   513,   514,    -1,    -1,   517,   518,   519,   520,
      -1,    -1,   523,   524,    -1,   526,   527,   528,   529,    -1,
      -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,    -1,
     541,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,    -1,    -1,    -1,   555,    -1,    -1,   558,    -1,    -1,
      -1,   562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,
      -1,    -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,
      -1,    -1,   583,    -1,    -1,    -1,   587,    -1,    -1,   590,
      -1,   592,    -1,     5,   595,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    89,    -1,    91,
      -1,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,
      -1,    -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,
      -1,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
     132,    -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,
      -1,    -1,    -1,   145,    -1,    -1,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
      -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
     172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,
      -1,    -1,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,   290,    -1,
     292,   293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,
      -1,   303,   304,   305,   306,   307,   308,    -1,    -1,   311,
     312,    -1,   314,    -1,   316,    -1,   318,   319,   320,   321,
     322,   323,   324,   325,   326,    -1,    -1,   329,   330,    -1,
      -1,   333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,
      -1,    -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,   380,    -1,
      -1,    -1,    -1,   385,   386,    -1,   388,    -1,   390,   391,
     392,   393,   394,    -1,   396,   397,   398,    -1,    -1,   401,
      -1,    -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,
     412,   413,   414,   415,   416,    -1,   418,    -1,    -1,   421,
      -1,   423,   424,    -1,   426,    -1,    -1,    -1,   430,    -1,
      -1,   433,   434,   435,    -1,    -1,    -1,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,   449,    -1,    -1,
      -1,    -1,   454,   455,   456,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,   465,    -1,    -1,   468,    -1,   470,    -1,
     472,    -1,    -1,   475,   476,    -1,    -1,    -1,    -1,    -1,
      -1,   483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,
     492,    -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,
     502,   503,   504,   505,    -1,    -1,   508,   509,   510,   511,
      -1,   513,   514,    -1,    -1,   517,   518,   519,   520,    -1,
      -1,   523,   524,    -1,   526,   527,   528,   529,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,    -1,   541,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
      -1,    -1,    -1,   555,    -1,    -1,   558,    -1,    -1,    -1,
     562,   563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,
      -1,   573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,
      -1,   583,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,
     592,    -1,     5,   595,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,
      63,    64,    -1,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    89,    -1,    91,    -1,
      -1,    94,    -1,    -1,    97,    -1,    -1,    -1,   101,    -1,
      -1,    -1,   105,   106,   107,    -1,    -1,   110,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,   132,
      -1,    -1,    -1,    -1,    -1,    -1,   139,   140,   141,    -1,
      -1,    -1,   145,    -1,    -1,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,    -1,
      -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,
     173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
      -1,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,   290,    -1,   292,
     293,   294,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
     303,   304,   305,   306,   307,   308,    -1,    -1,   311,   312,
      -1,   314,    -1,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,    -1,   329,   330,    -1,    -1,
     333,   334,   335,   336,    -1,    -1,    -1,    -1,   341,    -1,
      -1,    -1,    -1,   346,   347,   348,   349,    -1,   351,   352,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,    -1,    -1,
      -1,    -1,   385,   386,    -1,   388,    -1,   390,   391,   392,
     393,   394,    -1,   396,   397,   398,    -1,    -1,   401,    -1,
      -1,    -1,   405,   406,   407,   408,   409,    -1,    -1,   412,
     413,   414,   415,   416,    -1,   418,    -1,    -1,   421,    -1,
     423,    -1,    -1,   426,    -1,    -1,    -1,   430,    -1,    -1,
     433,   434,    -1,    -1,    -1,    -1,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,   449,    -1,    -1,    -1,
      -1,   454,   455,   456,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,    -1,   470,    -1,   472,
      -1,    -1,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   484,    -1,   486,    -1,    -1,   489,    -1,    -1,   492,
      -1,   494,    -1,    -1,    -1,   498,    -1,   500,   501,   502,
     503,   504,   505,    -1,    -1,   508,   509,   510,   511,    -1,
     513,   514,    -1,    -1,   517,   518,   519,   520,    -1,    -1,
     523,   524,    -1,   526,   527,   528,   529,    -1,    -1,    -1,
      -1,    -1,   535,   536,    -1,    -1,    -1,    -1,   541,   542,
     543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,    -1,
      -1,    -1,   555,    -1,    -1,   558,    -1,    -1,    -1,   562,
     563,    -1,    -1,    -1,    -1,    -1,    -1,   570,    -1,    -1,
     573,    -1,    -1,    -1,   577,   578,   579,   580,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,   590,    -1,   592,
      -1,    -1,   595
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    30,    34,    48,    49,    56,    60,    61,
      76,    95,   116,   124,   125,   126,   136,   137,   149,   162,
     178,   193,   198,   201,   224,   226,   242,   259,   263,   355,
     374,   384,   395,   417,   420,   422,   425,   428,   429,   436,
     438,   445,   451,   459,   464,   466,   469,   493,   497,   540,
     552,   556,   559,   564,   591,   606,   617,   620,   621,   622,
     623,   624,   626,   631,   633,   640,   670,   698,   705,   813,
     963,  1002,  1005,  1013,  1016,  1021,  1023,  1024,  1029,  1032,
    1037,  1044,  1056,  1057,  1212,  1214,  1224,  1227,  1252,  1260,
    1271,  1278,  1292,  1295,  1298,  1307,  1313,  1317,  1319,  1320,
    1370,  1387,  1393,  1395,  1402,  1404,  1430,  1436,  1437,  1438,
    1439,  1492,  1500,  1501,    11,   103,   121,   186,   264,   347,
     353,   389,   457,   514,   979,  1461,  1462,  1463,  1466,   260,
     342,  1031,  1431,   522,  1361,   218,     5,     7,     8,     9,
      10,    11,    17,    20,    22,    23,    24,    25,    26,    27,
      28,    30,    34,    38,    41,    42,    43,    45,    47,    48,
      51,    54,    55,    57,    58,    60,    62,    63,    64,    65,
      66,    67,    69,    70,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    82,    83,    85,    86,    87,    88,    89,
      91,    94,    97,   101,   105,   106,   107,   110,   115,   116,
     121,   123,   127,   129,   130,   131,   132,   136,   139,   140,
     141,   145,   147,   148,   150,   151,   152,   155,   156,   158,
     159,   160,   161,   162,   165,   166,   167,   170,   171,   173,
     174,   175,   178,   182,   184,   186,   188,   189,   190,   191,
     192,   194,   198,   199,   201,   204,   205,   209,   210,   211,
     212,   215,   216,   217,   220,   225,   226,   230,   232,   233,
     235,   236,   240,   243,   244,   247,   250,   251,   257,   258,
     260,   262,   264,   265,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   288,   289,   290,
     292,   293,   294,   295,   297,   298,   303,   304,   305,   306,
     307,   308,   311,   312,   314,   316,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   329,   330,   333,   334,   335,
     336,   340,   341,   346,   347,   348,   349,   351,   352,   353,
     354,   356,   366,   367,   368,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   384,   385,   386,
     388,   390,   391,   392,   393,   394,   396,   397,   398,   401,
     405,   406,   407,   408,   409,   412,   413,   414,   415,   416,
     418,   419,   421,   422,   423,   426,   428,   430,   431,   433,
     434,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   449,   450,   454,   455,   456,   457,   461,   465,   467,
     468,   469,   470,   472,   473,   474,   475,   476,   483,   484,
     486,   489,   492,   493,   494,   497,   498,   500,   501,   502,
     503,   504,   505,   508,   509,   510,   511,   513,   514,   517,
     518,   519,   520,   523,   524,   526,   527,   528,   529,   535,
     536,   540,   541,   542,   543,   545,   546,   548,   549,   551,
     552,   555,   558,   560,   562,   563,   570,   573,   577,   578,
     579,   580,   587,   588,   590,   591,   592,   595,   664,  1360,
    1364,  1368,  1369,   288,   513,   516,  1389,  1389,   587,  1432,
     103,   264,   457,   514,   519,   562,   646,   647,   864,   865,
     866,   979,  1261,  1213,   103,   160,   186,   264,   389,   457,
     514,   519,   537,   562,   577,   979,  1223,  1364,  1031,   663,
     614,  1357,  1359,  1364,   632,  1225,   378,    82,   397,  1318,
     106,   218,   592,  1325,  1389,  1031,   814,  1364,  1314,   445,
     562,  1389,  1031,  1228,  1308,   480,   695,   699,   700,  1364,
     663,  1432,  1364,  1060,  1062,  1063,   357,  1372,  1279,   699,
     493,   497,   469,   535,   469,   516,  1273,   378,  1394,  1253,
    1364,    30,    76,   147,   384,   406,   438,   493,  1494,   451,
     606,  1058,     0,   149,   618,   384,   166,   373,  1296,  1357,
    1364,   153,   974,  1364,   153,   664,   195,   664,   252,  1361,
    1364,  1366,   760,   761,   764,   787,  1364,   214,   998,   160,
     969,  1461,  1389,  1432,  1038,   671,   614,   533,  1014,  1025,
      16,  1433,   213,   867,   195,  1366,   762,   787,   663,   362,
    1458,  1462,  1463,  1464,  1465,  1466,   516,   865,   185,   477,
     554,   941,   942,   943,   214,   271,   398,  1269,  1270,     7,
      20,    27,    33,    35,    36,    37,    39,    52,    53,    58,
      59,    66,    69,    88,    92,    93,    98,    99,   102,   103,
     108,   109,   110,   115,   117,   120,   163,   168,   169,   176,
     189,   191,   196,   202,   209,   213,   224,   227,   249,   257,
     268,   291,   296,   307,   311,   313,   317,   318,   319,   320,
     321,   328,   337,   338,   339,   343,   344,   349,   369,   375,
     379,   380,   382,   396,   424,   425,   437,   443,   449,   495,
     496,   502,   506,   507,   512,   522,   526,   527,   528,   529,
     538,   539,   540,   544,   547,   562,   566,   567,   568,   569,
     574,   576,   580,   595,   599,   600,   605,   606,   609,   610,
     613,   614,  1077,  1078,  1079,  1080,  1084,  1087,  1088,  1089,
    1090,  1091,  1092,  1100,  1104,  1114,  1344,  1346,  1348,  1349,
    1353,  1355,  1360,  1364,   213,  1222,  1222,  1222,   195,  1222,
    1222,   787,  1222,   663,  1222,   218,  1389,   627,  1299,    12,
      13,    95,   124,   137,   160,   162,   173,   193,   218,   224,
     263,   390,   394,   410,   418,   426,   451,   464,   465,   508,
     537,   559,   561,  1405,  1407,  1409,  1410,  1364,   354,    65,
     402,   614,  1366,   122,   203,   271,  1230,  1364,  1077,   228,
    1321,  1388,  1389,    46,   815,   183,    33,   288,  1284,  1315,
    1364,   663,  1033,  1389,   122,   271,  1231,  1259,   288,   397,
     469,  1309,  1310,   570,   696,   459,   701,    12,   394,  1403,
    1407,   533,  1433,  1061,    12,   133,   203,   482,   483,   484,
     485,   486,   487,   499,  1067,  1068,  1069,  1457,  1371,    23,
      34,    58,    59,    69,    91,    93,    95,   104,   151,   156,
     159,   184,   186,   192,   194,   217,   218,   239,   260,   288,
     354,   377,   388,   389,   392,   393,   413,   456,   469,   498,
     516,   579,   915,   940,  1280,  1284,  1285,  1287,  1378,   701,
    1007,  1008,  1007,  1007,   584,  1006,  1007,  1272,  1364,  1389,
    1259,    35,   202,   522,  1345,  1362,  1493,  1493,  1493,  1493,
    1493,  1062,  1058,   607,   612,  1364,  1294,  1293,   305,   520,
     546,   965,   560,    99,  1366,  1367,   967,   766,   788,  1364,
     966,   356,     6,    56,   137,   338,   401,   403,   789,   516,
     664,   488,  1467,  1468,   968,  1022,  1039,  1040,  1041,  1042,
    1357,   606,   672,  1364,   634,  1218,  1219,  1357,  1218,    55,
     340,   340,   417,  1434,   337,   338,  1083,  1364,   765,   788,
     180,     6,  1367,  1420,  1421,   425,    10,   389,   537,   650,
    1073,  1460,  1468,  1476,  1480,  1481,  1487,   650,  1073,  1459,
    1468,  1476,  1481,  1487,  1461,  1466,   867,   218,   218,   218,
     183,  1262,  1266,  1267,  1364,  1269,   606,   606,   606,  1087,
     606,   606,   606,  1077,  1117,   606,   606,   606,   606,   606,
     606,   606,   606,   606,  1076,  1076,   606,  1076,   606,   606,
     606,   547,   606,  1344,   606,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,  1077,   606,   606,   606,  1115,
    1116,  1353,  1364,   606,   606,   606,   606,   606,   606,   606,
     606,   606,  1077,   606,  1076,   606,   606,   606,   606,   606,
     606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
     606,   606,  1076,   606,  1344,   606,   606,   606,  1344,   606,
     606,    35,   202,   522,   606,  1076,  1076,  1076,   606,   606,
     606,   606,   606,  1087,  1087,  1087,  1077,  1452,  1453,  1364,
    1105,  1364,    15,    16,   359,   362,   593,  1081,  1082,   153,
     154,   187,   197,   234,   245,   272,   331,  1085,    31,   134,
     231,   253,   317,   411,   462,   463,   475,   597,   598,   599,
     600,   601,   602,   603,   604,  1083,  1087,    68,   361,   608,
    1362,   606,   614,   163,  1364,   664,  1364,   788,   664,  1366,
     798,  1285,   664,  1367,  1419,  1217,  1364,  1222,   565,   628,
      33,   127,   151,   155,   188,   205,   265,   288,   388,   397,
     412,   430,   469,   470,   494,  1300,  1304,  1305,  1389,   388,
    1408,   440,   440,   514,   519,   562,   577,   357,  1412,   513,
     350,  1414,    64,   469,  1411,   104,   577,  1413,   350,   608,
      18,   153,  1167,  1168,  1396,  1364,   998,   474,    48,    80,
     271,  1327,  1357,  1390,  1391,  1030,   255,   258,   399,   816,
     818,   613,   625,  1361,   265,  1034,  1367,  1035,  1036,  1357,
    1017,   228,  1219,  1232,  1233,    48,  1311,   608,  1362,    54,
      63,    73,    85,    86,    87,   101,   306,   323,   447,   501,
     518,   702,   704,  1408,   350,   350,   445,  1435,  1434,   553,
    1440,  1441,   601,  1071,  1072,  1073,  1069,  1373,  1374,  1375,
     159,   459,   253,   582,  1291,   606,   103,   160,   186,   389,
     516,   537,   577,  1291,    12,   876,  1366,   254,  1186,  1188,
     183,   231,  1286,  1288,    67,   494,   181,   494,   513,    67,
     494,    12,    41,    89,    94,   233,   304,   368,   476,   510,
    1274,  1275,  1276,   159,   205,   494,   494,  1186,  1291,  1288,
     265,   150,    70,   391,   513,   536,   494,   573,  1004,   416,
     489,  1009,  1010,  1003,    83,  1219,   998,   608,   352,  1496,
     509,  1497,   238,   433,  1495,   607,  1441,  1443,  1445,  1446,
     149,   619,  1056,  1297,  1345,  1364,   120,   862,   863,   873,
     874,   924,   106,  1076,   613,   665,     6,   767,   665,   606,
     105,   784,   784,   784,     4,  1357,   970,   450,   577,  1468,
    1218,   231,   608,   374,  1050,  1052,  1053,   673,   674,  1077,
     215,   273,   274,   275,   276,   277,   278,   279,   281,   282,
     283,   284,   285,   286,   287,   289,   290,   414,   415,   635,
     636,   639,   166,   398,   608,  1015,    57,   166,   170,   181,
     303,   398,  1026,  1027,  1028,    55,   417,   163,   645,   767,
     106,   784,   211,   608,  1073,  1073,  1073,   160,   186,   186,
    1468,  1357,  1364,  1364,  1364,  1220,  1221,  1357,  1358,  1364,
     608,  1264,   614,  1268,  1077,  1077,    12,   133,  1110,  1169,
    1110,  1110,  1110,   581,  1119,  1077,  1077,  1114,  1114,  1077,
    1077,  1077,   133,  1110,  1169,   607,  1077,   607,  1077,  1077,
    1077,  1077,  1353,  1452,   111,   112,   113,   114,   115,   206,
     207,   208,   209,   307,   309,   310,   311,   318,   396,   448,
     449,   580,   594,   595,  1164,  1165,  1114,   107,   110,   526,
     529,  1166,   133,  1107,  1077,  1077,  1077,  1077,  1164,  1077,
    1114,  1116,     9,   608,   614,   133,  1110,  1077,  1077,   133,
    1110,  1077,  1077,  1114,  1114,  1114,  1077,  1077,  1077,  1077,
    1114,  1080,  1077,  1077,  1077,  1077,  1077,  1077,  1110,  1110,
    1077,  1077,   133,  1110,  1077,  1077,  1165,  1165,  1077,    44,
     246,   534,  1077,  1077,   607,  1354,  1355,  1364,  1110,  1110,
    1077,  1077,   607,   608,   607,   451,   606,  1449,  1450,  1077,
     613,  1106,  1366,   614,  1077,  1077,  1077,  1079,   169,   343,
     539,   555,  1083,    12,    17,  1079,  1086,  1080,  1080,   606,
    1087,  1080,  1080,  1080,  1080,   253,  1080,  1080,   227,  1080,
     227,  1080,  1080,  1080,  1080,  1080,    31,   231,   253,   411,
    1366,  1087,  1077,  1093,  1364,   614,   798,   341,   578,   799,
     800,   151,   608,  1218,   350,  1215,   613,   629,   630,   265,
     265,   265,   265,    48,   265,   265,   608,  1301,   513,   606,
    1422,  1367,  1422,  1422,  1422,   186,   389,   516,  1406,  1410,
    1364,   174,   334,  1364,  1397,  1398,  1232,  1361,  1045,   260,
    1326,  1168,   608,  1218,    70,   606,   822,   823,   822,   823,
     373,   825,   199,   241,  1366,    29,   533,  1316,   608,   533,
     608,   533,  1218,  1233,  1229,    12,  1312,  1310,   608,   153,
     608,  1367,   186,   389,  1406,  1364,    12,   133,  1448,   608,
    1064,  1077,  1351,  1364,   608,   192,   260,   351,   456,  1376,
    1377,  1380,  1381,   231,  1289,  1361,  1077,   601,   867,   664,
     664,   664,  1357,   664,  1357,   265,   322,   494,  1283,  1283,
     268,   344,   544,  1189,  1190,  1346,  1364,  1291,  1364,   664,
    1291,  1367,  1286,   664,  1291,   232,   511,   171,   181,  1277,
     608,  1289,  1286,  1357,  1288,  1286,  1286,  1291,  1291,   558,
    1011,   608,  1011,   472,   451,   606,   610,  1120,  1121,  1122,
    1123,  1124,  1133,  1134,  1148,  1345,   376,  1498,   360,  1182,
    1188,  1447,   863,    68,   915,   129,  1366,    74,    88,   243,
     315,   340,   400,   488,   667,   669,   407,   548,   785,   786,
     220,   781,   782,   783,   790,   798,   800,   103,   204,   366,
     375,   381,   473,   562,   648,   649,  1361,    24,   295,   775,
     776,   777,   790,   791,   792,   798,   800,   768,   769,   775,
     964,   350,   658,   971,   121,   230,  1357,   120,  1043,  1364,
    1041,  1357,   812,  1052,   218,   241,   938,  1054,   607,   608,
     153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
     153,   153,   153,   153,   153,   153,   153,   153,   153,   608,
    1219,   560,  1027,   861,   862,    74,   335,   408,   549,   778,
     779,   780,   790,   794,   795,   796,   797,   798,   800,   588,
     564,   763,    46,   584,  1421,   186,   664,   664,   867,   664,
    1364,   641,   944,   945,   944,   944,   608,  1265,  1263,   614,
    1268,  1267,   183,   601,  1364,   608,   607,  1110,   607,  1111,
     607,   607,   607,  1077,   143,   581,  1118,    18,   607,   565,
     607,   607,   607,   608,   565,   608,  1101,   607,   601,   607,
     608,   608,   607,   607,   607,   607,   183,   607,   608,  1103,
     607,   608,   608,   608,   600,   608,   607,   607,   606,  1353,
    1364,  1110,   607,   607,   607,  1110,   607,   608,   607,   607,
     607,   607,   607,   607,   607,   608,   607,   231,   607,   608,
     608,   608,   608,   607,   607,   607,   608,   183,   608,  1110,
     607,   607,   607,   608,   608,   608,   607,   183,  1077,   183,
    1077,   183,  1077,   183,   607,   608,   607,   607,   607,   607,
     608,   607,  1114,  1138,  1139,  1140,   451,   606,  1059,  1444,
    1445,   553,  1454,   611,   192,   260,   456,  1379,   460,  1364,
     169,   343,   539,   555,   606,    16,  1077,  1452,   158,  1174,
    1080,  1077,  1077,  1080,   606,  1087,  1080,  1073,  1097,  1098,
    1099,   606,   614,  1364,   799,   153,   460,  1243,  1244,  1367,
      50,   432,   999,  1357,  1218,  1366,   608,  1305,  1218,  1306,
    1364,  1423,  1424,   533,   601,  1357,  1364,  1418,  1418,  1418,
     153,   174,   187,   197,   244,   245,   272,   334,   386,  1399,
    1401,   582,  1170,  1226,  1046,  1047,  1048,  1049,  1357,   219,
     271,   402,   589,  1392,  1391,   606,  1073,   117,   176,   202,
     268,   344,   544,  1193,  1196,  1197,   505,   826,   817,   606,
    1077,  1361,  1367,  1367,  1036,  1357,   166,   398,   563,  1018,
    1019,  1020,   451,   459,   569,   570,   606,   857,  1234,  1237,
     704,   110,   526,   529,   703,  1104,  1348,  1353,   193,   183,
    1418,  1418,  1418,  1442,  1072,   183,   228,  1065,  1066,  1181,
    1182,  1207,  1074,  1074,   614,  1374,   120,   535,  1364,  1383,
     324,   375,   613,   915,  1382,  1361,   183,  1290,   607,  1364,
     348,   608,  1291,   397,  1186,  1276,  1290,  1291,  1286,  1357,
    1291,  1291,   639,  1012,  1010,  1147,  1364,    96,   221,   238,
     249,   327,   437,   499,  1132,   459,   608,  1357,  1147,   608,
     181,  1499,    46,  1186,  1244,  1244,   325,  1361,   488,   488,
     488,   488,   488,   450,  1361,  1361,  1244,   608,   783,  1361,
    1361,  1361,  1361,   117,   176,   202,   268,   344,   544,  1192,
    1361,  1361,   607,   608,  1244,  1244,   608,   777,   770,   771,
     790,   791,   792,     6,    13,    14,    25,    26,    56,    60,
      61,    66,    74,    82,    92,   106,   123,   130,   131,   137,
     145,   151,   179,   216,   218,   225,   240,   294,   312,   316,
     355,   360,   367,   374,   375,   405,   419,   420,   421,   422,
     442,   498,   514,   517,   540,   553,   810,   869,   871,   873,
     874,   975,   980,   982,   985,   991,   992,   993,  1178,    78,
     446,   420,   972,  1469,  1051,   606,  1077,   606,  1361,  1192,
    1361,  1361,   117,   176,   268,   344,   544,  1194,  1361,  1192,
    1361,  1361,  1361,  1361,  1361,  1192,  1192,  1361,  1349,  1361,
    1192,   636,  1244,  1244,  1244,  1244,   608,   780,  1366,   264,
     167,   772,   773,   774,   790,   791,   792,   793,   796,   797,
     798,   800,   375,   522,  1366,  1364,  1488,     8,    29,   758,
     664,   606,   434,   253,   606,   802,   868,   870,   871,   542,
     565,   952,   350,   350,   350,  1221,  1364,   565,  1170,  1364,
    1121,   614,  1268,   227,  1077,   607,  1077,   525,  1077,  1077,
     147,    33,    59,   107,   110,   118,   329,   467,   529,   557,
    1112,    33,   916,  1366,  1077,   916,  1112,  1114,   607,   227,
     227,  1077,  1077,  1114,  1077,  1077,  1077,  1077,  1077,  1080,
     607,   607,  1077,  1077,  1077,  1077,  1077,  1077,  1114,   227,
    1077,  1077,  1077,   607,  1077,  1077,  1077,  1077,   183,  1077,
     183,  1077,   183,  1077,  1077,  1077,   607,  1455,  1456,  1457,
    1139,  1059,   607,  1448,   614,   614,   614,  1366,  1077,  1452,
    1079,   607,   608,   607,  1087,  1164,  1164,    16,  1077,  1452,
    1174,  1077,   607,   608,  1113,  1114,  1364,   875,  1366,  1216,
     999,   630,  1302,   607,   608,  1420,   614,   614,   533,   533,
     533,  1400,  1171,  1187,  1188,  1234,   608,  1050,  1052,   522,
    1363,   589,   260,   819,   820,   821,  1364,   831,  1080,    46,
     606,   833,   823,   819,   533,  1019,   858,  1235,   606,  1240,
    1245,  1240,   607,   857,  1236,  1350,  1351,  1354,  1364,  1238,
     153,   357,  1420,   183,   183,   183,  1057,   138,  1121,  1208,
     181,   263,  1070,  1207,  1187,  1066,    18,  1075,  1361,  1364,
     601,  1364,   614,   235,   614,  1243,   120,   916,   917,  1243,
     181,  1243,   613,  1366,    33,   120,   919,   920,  1366,  1194,
    1281,   156,   579,  1190,  1190,   344,  1282,  1170,  1286,   608,
    1135,  1142,  1147,  1120,   238,   238,   363,  1149,   238,   249,
     437,  1149,  1133,  1120,  1255,  1256,  1354,  1122,  1168,  1144,
    1145,  1192,   308,  1183,   120,   921,   923,  1366,   917,   106,
     106,   121,   230,   210,   801,  1193,   783,   649,   801,   801,
     777,   608,   771,    71,    84,   374,   885,   888,   889,   936,
     938,   942,   943,   997,   997,   374,  1244,  1244,   997,  1244,
     374,   374,  1244,  1244,   533,   129,  1244,   239,   514,   180,
     374,   387,   938,   997,   239,  1244,   514,   129,  1244,  1244,
    1244,  1244,   997,   374,    46,  1244,   812,  1244,   374,   372,
      18,   153,   533,  1001,   374,   374,  1244,   132,   304,  1364,
    1244,   374,  1244,   869,   608,   809,   810,   980,   606,   614,
     884,   890,  1356,  1364,   338,   385,    22,   161,   652,   533,
     130,   145,   654,   606,  1470,   606,   387,  1160,  1161,  1162,
    1364,   637,   638,  1192,  1361,  1193,   801,   801,   780,   356,
     195,  1244,   608,   774,   522,    18,   434,   606,   124,   224,
     559,   759,   651,  1482,   118,   229,   404,   500,   880,  1357,
     253,   374,   803,   808,   809,   881,   882,   883,   884,   885,
     808,   608,   870,    45,   199,   444,   957,   957,  1357,  1357,
    1357,   614,  1121,  1181,  1268,  1170,  1077,   607,  1077,   525,
     606,   907,   908,   908,   606,   902,   903,   907,   908,   229,
     229,   607,   607,   607,   607,   607,  1102,  1077,  1077,   607,
     607,  1109,  1182,   608,   608,   607,   608,   607,   231,  1094,
    1095,   607,   607,   607,   607,   608,   607,   607,  1077,   607,
     181,   607,   607,   608,   607,   608,   608,   607,  1077,   607,
    1077,   607,  1077,   607,   607,   607,  1071,  1457,   607,  1451,
     614,   961,   607,  1114,  1079,   607,   608,   607,  1074,  1099,
     607,   584,  1303,  1424,   584,  1427,   601,   601,  1420,  1420,
    1420,   606,  1077,   350,  1250,  1048,  1357,  1052,   214,  1055,
    1322,   607,   608,  1074,   818,   374,   834,   835,   607,  1367,
    1067,  1241,  1242,  1354,  1246,   608,   606,  1237,   607,   607,
     608,   614,  1440,   703,   183,  1420,  1420,  1420,  1170,  1170,
     139,   364,  1203,  1204,  1209,   559,   231,  1361,  1364,   614,
    1364,   251,  1364,    12,    33,   120,   350,  1077,  1386,    68,
     922,  1077,  1367,   349,   375,   522,  1385,  1379,  1243,  1186,
    1186,  1291,   639,   553,   607,  1444,  1143,   611,   238,  1133,
    1149,  1149,   238,   350,   350,   565,   608,  1254,  1243,  1158,
    1159,  1067,  1077,  1184,  1352,   771,   960,  1356,  1031,    61,
     180,   387,   554,   887,   937,   960,   938,   939,   939,  1356,
    1031,  1194,  1192,  1356,  1192,    12,   981,   989,   990,  1364,
    1031,  1361,  1361,   915,  1244,  1192,   241,   989,   241,  1356,
    1356,   875,  1244,   174,   244,   340,   878,  1192,  1194,  1194,
    1356,  1031,  1179,  1180,  1354,   120,  1192,   811,  1361,  1031,
    1357,  1031,  1031,    77,    79,   120,   141,   175,   409,   877,
    1192,   981,   872,     6,   137,   993,   881,  1364,     8,   174,
    1000,   410,   886,   887,   930,   891,   614,   385,  1077,  1077,
     350,   658,   664,   350,    74,   659,  1364,  1471,    18,   981,
     607,   608,   607,   608,   606,  1364,   801,   774,  1361,   880,
    1489,   350,   350,   675,   676,   678,  1364,   474,  1357,   857,
     607,   608,   214,   425,   805,  1328,   870,   642,   643,   644,
    1364,  1170,   254,  1191,  1164,  1077,   117,   268,   344,   544,
      20,    33,    47,   551,   915,   925,   926,   927,   344,   607,
    1164,  1164,   453,  1108,  1077,  1077,  1114,    42,   327,   607,
     584,  1096,  1077,  1164,  1077,  1077,  1077,  1077,   607,   607,
     607,  1141,  1449,  1364,   607,  1114,  1075,   402,   193,   427,
    1425,  1425,  1425,   120,  1077,  1248,  1249,   140,  1055,   247,
    1328,   821,   607,   199,   241,   836,   607,   608,  1071,   608,
    1243,  1247,  1248,  1245,  1239,  1237,  1350,  1364,  1420,  1187,
     195,  1175,  1363,  1363,   613,  1205,  1206,  1366,   461,   601,
     402,   423,   454,  1384,   923,  1243,   606,   606,  1383,  1077,
    1448,  1168,  1123,  1120,  1133,   238,   238,  1120,  1133,  1126,
    1125,  1127,  1256,  1170,  1249,  1156,  1157,  1071,   608,    19,
     125,  1185,   983,   606,   241,   241,   939,   960,   945,   960,
     960,   137,   459,   981,   994,   977,   608,  1193,   917,  1361,
     960,   999,  1361,   995,   981,   608,  1185,   815,   981,   986,
     981,   606,   607,  1364,  1357,    32,    33,    38,    40,    42,
      43,    59,   107,   110,   118,   135,   152,   175,   177,   189,
     190,   229,   257,   266,   267,   269,   300,   301,   302,   319,
     320,   321,   326,   329,   345,   346,   379,   380,   404,   455,
     459,   471,   523,   526,   529,   530,   531,   532,   571,   572,
     595,   892,   895,   896,   897,   898,   899,   900,   901,  1364,
    1164,   469,  1361,   136,   973,   607,   608,  1472,  1473,   607,
    1161,   638,   648,   474,   222,   231,   365,   679,   680,   681,
     682,  1073,   446,   607,   608,   677,  1361,   607,   607,   868,
     883,    18,   860,   606,   606,   606,  1190,   607,   607,   607,
     607,   607,    33,    20,   551,   915,    33,   916,   608,   607,
     607,  1345,   607,   607,   608,   607,   314,   243,   397,   607,
     607,   607,   607,   607,   607,   879,  1066,  1187,  1444,   607,
     263,   357,    62,   236,   336,   490,   503,   590,  1416,  1417,
     584,  1426,  1426,  1426,   607,   608,  1251,   228,   606,   824,
     606,   837,  1364,   835,   859,  1242,  1249,   607,  1443,    46,
     200,  1172,  1210,  1366,   608,   314,    75,   545,   402,  1385,
     522,   522,  1243,  1136,   350,  1129,  1133,  1133,   350,  1131,
    1077,  1077,   606,  1181,   179,   214,   564,  1151,  1152,  1155,
    1146,  1352,   373,   606,   984,  1077,   960,   945,   606,   944,
     944,   120,   120,   890,  1026,   990,   922,   892,   976,  1180,
     987,   989,   978,  1306,   606,   931,   907,   907,   908,   902,
     383,   893,   902,   902,   927,    59,   571,   896,   898,   927,
     927,    59,   572,   572,   575,   902,   894,   908,   927,   907,
     908,    25,    68,    72,    74,   120,   343,   350,   387,   455,
     498,   554,   910,   911,   912,   929,  1083,   575,   907,   927,
      33,   907,   928,   907,   907,   908,   606,   903,   909,   614,
     653,   660,   661,  1364,   451,   606,  1474,   607,  1361,   607,
     608,   677,  1477,   652,  1483,   678,   892,   913,   804,   808,
     606,   857,   958,   959,  1364,   958,   958,   916,   928,   344,
    1077,   314,   165,  1070,  1070,   522,   522,   522,    16,  1415,
     193,   292,   293,   297,   298,  1428,  1429,  1249,   241,   516,
    1073,   827,   829,   830,  1364,   569,   838,   879,  1176,  1352,
    1173,  1181,   915,   918,  1206,   607,   607,  1386,  1449,  1128,
     565,  1130,   565,  1163,  1364,  1191,   938,   938,  1152,   879,
    1185,  1193,   834,   607,   606,   606,   958,   606,   606,   110,
     526,   529,   599,   600,  1347,  1348,  1000,   910,  1031,   988,
    1018,   607,   932,  1364,   291,   933,   467,   557,   596,   904,
     905,   906,   606,   904,   904,   927,   575,   904,   606,   927,
     904,   921,   120,   141,   175,  1361,   339,   914,  1347,   559,
     120,   120,   132,   304,   241,   912,   241,   343,   927,   928,
     927,   928,   904,   344,   904,  1364,   492,   655,    52,    65,
     172,   213,   237,   248,   354,   435,   662,   709,   711,   712,
     713,   715,   716,   717,   718,   719,   720,   722,   730,   731,
     734,   745,   748,   750,   751,  1360,  1365,  1369,  1060,  1058,
     584,  1475,  1490,   681,  1364,  1357,   657,   658,   434,   922,
    1443,   805,   857,   806,   607,   608,  1185,   606,   607,   607,
     607,   607,  1416,   357,  1192,  1192,  1192,  1192,  1429,   559,
    1357,   831,   504,   832,   607,   608,   231,   250,    74,   106,
     218,   294,   312,   335,   514,   854,   855,   856,  1285,   585,
     586,   608,  1177,  1185,  1077,  1187,   917,  1211,  1137,  1077,
     606,  1077,   606,   607,   608,   181,  1150,  1150,   607,   958,
     958,   607,   958,   958,  1349,  1349,   996,   228,   607,   608,
     184,   371,   468,   350,   934,   906,   962,  1345,   962,  1076,
     339,   570,  1077,   148,   656,   732,   735,  1364,   183,   334,
     723,   710,  1365,  1365,  1364,   714,   621,   270,   424,   583,
     754,    30,   752,   615,   607,    51,    61,   260,   666,   913,
     181,   654,  1484,   607,  1440,    74,   240,   946,   949,   952,
     953,   954,   959,   344,   584,   947,   951,   953,   956,   948,
     950,   953,   955,  1257,  1258,  1354,  1323,  1074,  1193,   828,
     830,   840,   524,  1244,   129,   129,  1244,  1244,  1244,  1244,
     606,   849,   856,   151,  1352,   389,  1198,    70,  1329,  1444,
    1163,  1163,  1364,   195,   238,   360,  1154,  1153,   607,   607,
     946,   607,   607,  1000,   606,  1364,   124,   559,   607,   608,
     607,  1076,  1077,  1077,   581,   737,   741,   183,  1364,   725,
     726,  1077,   684,   708,   709,   711,   713,   715,   717,   718,
     719,   720,   722,   730,   745,   748,   750,   684,   755,   753,
     746,   749,  1443,    61,   357,    61,   128,   667,   668,  1083,
    1491,  1073,   659,   913,   807,  1361,  1244,   954,  1185,   607,
     370,   956,   955,   608,  1243,   918,   607,   832,   606,   842,
     844,   839,  1361,  1244,  1244,   268,   344,   544,  1195,  1196,
    1195,  1193,  1366,   505,   850,   851,  1244,  1185,  1364,   146,
     157,   358,   521,  1330,  1331,   256,  1332,   607,   607,    46,
      46,   606,   606,   930,   946,   947,   948,   834,    50,   340,
     432,   459,   935,   935,   927,  1345,   927,   733,   742,   143,
     741,   744,   228,   147,  1077,   147,   708,   612,   558,  1077,
     685,   754,   752,   357,   357,   128,   708,  1478,   136,  1485,
    1443,  1192,  1360,  1258,  1249,  1324,   606,   843,   844,   845,
     299,   841,   844,  1361,  1361,   852,   607,   608,   875,  1199,
      46,    46,   146,    46,  1331,   491,   521,  1333,  1334,  1160,
    1162,   607,     5,   120,   343,   350,   350,   581,   736,   738,
    1077,   684,   147,   721,   213,   525,   270,   612,   757,   136,
     119,   683,   686,   747,  1365,   747,   142,   660,   666,   441,
    1335,   607,   608,   299,   847,   848,  1080,   853,  1366,   851,
     606,  1345,  1345,    46,  1345,    46,    46,  1334,   607,   607,
     559,   124,   739,   738,   744,   743,    52,   724,  1364,   727,
    1077,   756,    90,   164,   691,   706,  1364,   147,   708,   612,
     443,  1486,   211,  1329,   844,   608,   846,   854,  1073,  1200,
    1201,  1202,  1345,  1345,  1345,   935,   935,  1077,   147,   525,
     608,   684,   147,   684,   198,   608,   687,    81,   100,   612,
    1479,   708,    46,  1332,   848,   607,  1077,   607,   608,   740,
      52,   684,  1364,   728,   424,   147,   181,  1364,   913,   181,
     181,   708,  1345,   214,  1336,  1074,  1202,   525,   143,   144,
     729,   583,   688,   120,   707,   694,   695,  1192,   689,   690,
     344,   606,  1338,   684,   684,   725,   479,   481,   692,   693,
     694,   697,  1083,  1364,  1077,  1056,   256,   441,  1337,   607,
     613,  1339,  1340,  1354,   459,  1341,   608,   708,   182,  1366,
     607,   608,  1342,  1343,  1354,   693,  1340,   608,  1243,  1343,
    1073,  1249,  1074
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1679 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 1691 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 1716 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:
#line 1789 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:
#line 1804 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:
#line 1814 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:
#line 1821 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:
#line 1831 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:
#line 1838 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 73:
#line 1853 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:
#line 1865 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:
#line 1873 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:
#line 1884 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
            lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_UNCHANGED;

            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 77:
#line 1893 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 80:
#line 1903 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:
#line 1908 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifndef MCP_WL3127
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
#endif
          }
    break;

  case 82:
#line 1915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 1919 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:
#line 1923 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:
#line 1927 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:
#line 1931 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 87:
#line 1936 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:
#line 1940 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:
#line 1944 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:
#line 1948 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 1952 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
#line 1956 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 93:
#line 1962 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 94:
#line 1993 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 99:
#line 2008 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 100:
#line 2022 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 101:
#line 2026 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 102:
#line 2042 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 103:
#line 2046 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 104:
#line 2057 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 105:
#line 2082 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 106:
#line 2103 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table), (yyvsp[(2) - (8)].build_method)))
/* #else
            if (add_create_index_prepare(Lex, $7))
   #endif
*/
              MYSQL_YYABORT;
          }
    break;

  case 107:
#line 2113 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index(Lex, (yyvsp[(3) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
/* #else
            if (add_create_index(Lex, $2, $4))
   #endif
*/              MYSQL_YYABORT;
          }
    break;

  case 108:
#line 2128 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table), (yyvsp[(2) - (8)].build_method)))
/* #else
            if (add_create_index_prepare(Lex, $7))
   #endif
*/
              MYSQL_YYABORT;
          }
    break;

  case 109:
#line 2138 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index(Lex, (yyvsp[(3) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
/* #else
            if (add_create_index(Lex, $2, $4))
   #endif
*/
              MYSQL_YYABORT;
          }
    break;

  case 110:
#line 2154 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table), (yyvsp[(2) - (8)].build_method)))
/* #else
            if (add_create_index_prepare(Lex, $7))
   #endif
*/
              MYSQL_YYABORT;
          }
    break;

  case 111:
#line 2164 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
/* #ifndef MCP_WL3749 */
            if (add_create_index(Lex, (yyvsp[(3) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
/* #else
            if (add_create_index(Lex, $2, $4))
   #endif
*/
              MYSQL_YYABORT;
          }
    break;

  case 112:
#line 2174 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 113:
#line 2179 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 114:
#line 2186 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 115:
#line 2192 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 116:
#line 2194 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 117:
#line 2198 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 118:
#line 2202 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 119:
#line 2206 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 120:
#line 2217 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 123:
#line 2231 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 124:
#line 2235 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:
#line 2239 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:
#line 2243 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:
#line 2247 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:
#line 2251 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 129:
#line 2255 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 130:
#line 2262 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 131:
#line 2282 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 132:
#line 2293 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 134:
#line 2300 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 135:
#line 2306 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 136:
#line 2308 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 137:
#line 2314 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 138:
#line 2320 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 139:
#line 2329 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 140:
#line 2336 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 142:
#line 2344 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 143:
#line 2350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 145:
#line 2356 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 146:
#line 2362 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 147:
#line 2370 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 148:
#line 2372 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 149:
#line 2379 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 150:
#line 2422 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 164:
#line 2454 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 165:
#line 2469 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 166:
#line 2485 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 167:
#line 2503 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 168:
#line 2504 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 169:
#line 2508 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 170:
#line 2509 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 171:
#line 2515 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 172:
#line 2517 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 173:
#line 2519 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 174:
#line 2521 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 175:
#line 2523 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 176:
#line 2525 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 177:
#line 2527 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 178:
#line 2532 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 179:
#line 2533 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 180:
#line 2534 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 181:
#line 2539 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 182:
#line 2543 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 183:
#line 2550 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 184:
#line 2558 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 189:
#line 2574 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 190:
#line 2578 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 195:
#line 2596 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 196:
#line 2616 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 201:
#line 2653 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 202:
#line 2678 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 203:
#line 2679 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 204:
#line 2680 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 205:
#line 2681 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 206:
#line 2685 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 208:
#line 2690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 210:
#line 2696 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 211:
#line 2700 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 212:
#line 2726 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 213:
#line 2734 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 214:
#line 2791 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 215:
#line 2806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == SP_HANDLER_CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(empty_c_string, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 216:
#line 2828 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 217:
#line 2860 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 218:
#line 2885 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 219:
#line 2889 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 220:
#line 2908 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 221:
#line 2909 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 222:
#line 2915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 223:
#line 2917 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 224:
#line 2922 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 225:
#line 2945 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 227:
#line 2962 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 228:
#line 2978 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 229:
#line 2979 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 230:
#line 2984 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 231:
#line 2988 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 232:
#line 2997 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 233:
#line 3004 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 234:
#line 3011 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 235:
#line 3021 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 236:
#line 3036 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 237:
#line 3059 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 238:
#line 3064 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 239:
#line 3066 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 240:
#line 3071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 242:
#line 3079 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 243:
#line 3088 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 244:
#line 3107 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 245:
#line 3109 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 246:
#line 3127 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 247:
#line 3133 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 248:
#line 3135 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 249:
#line 3137 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 250:
#line 3139 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 251:
#line 3141 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 252:
#line 3143 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 253:
#line 3145 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 254:
#line 3147 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 255:
#line 3149 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 256:
#line 3151 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 257:
#line 3153 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 258:
#line 3155 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 259:
#line 3160 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 260:
#line 3175 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 261:
#line 3190 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 262:
#line 3207 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 263:
#line 3208 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 277:
#line 3229 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 278:
#line 3231 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 279:
#line 3235 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 280:
#line 3244 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 281:
#line 3292 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 282:
#line 3294 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 283:
#line 3320 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 284:
#line 3326 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 285:
#line 3335 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 286:
#line 3388 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 287:
#line 3431 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 288:
#line 3451 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 289:
#line 3468 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 290:
#line 3473 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 294:
#line 3499 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 295:
#line 3519 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 296:
#line 3541 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 297:
#line 3543 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 298:
#line 3559 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 299:
#line 3571 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 305:
#line 3591 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 306:
#line 3597 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 307:
#line 3610 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 308:
#line 3618 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 309:
#line 3626 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 314:
#line 3644 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 315:
#line 3648 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 316:
#line 3660 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 317:
#line 3669 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 318:
#line 3673 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 319:
#line 3683 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 320:
#line 3692 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 322:
#line 3707 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 323:
#line 3725 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 324:
#line 3742 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 325:
#line 3743 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 326:
#line 3748 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 327:
#line 3764 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 328:
#line 3780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 329:
#line 3787 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 330:
#line 3795 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 331:
#line 3804 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 332:
#line 3832 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:
#line 3842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 334:
#line 3844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 335:
#line 3860 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 336:
#line 3871 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 337:
#line 3873 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 338:
#line 3892 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 339:
#line 3894 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 340:
#line 3899 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 341:
#line 3901 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 342:
#line 3903 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 346:
#line 3937 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 347:
#line 3939 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 348:
#line 3949 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 349:
#line 3955 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 354:
#line 3978 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 401:
#line 4072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 402:
#line 4080 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:
#line 4088 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 404:
#line 4096 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 405:
#line 4108 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 406:
#line 4120 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 407:
#line 4125 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 408:
#line 4130 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 409:
#line 4138 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 410:
#line 4146 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:
#line 4154 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:
#line 4162 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:
#line 4170 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:
#line 4178 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 415:
#line 4186 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 416:
#line 4199 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 417:
#line 4212 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 420:
#line 4231 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 421:
#line 4236 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 422:
#line 4248 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 423:
#line 4250 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 424:
#line 4300 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 425:
#line 4303 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 426:
#line 4305 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 427:
#line 4320 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 428:
#line 4339 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 429:
#line 4342 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 430:
#line 4343 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 431:
#line 4347 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 432:
#line 4349 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 433:
#line 4350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 434:
#line 4352 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 435:
#line 4353 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 436:
#line 4358 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 437:
#line 4394 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 439:
#line 4400 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 441:
#line 4418 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 442:
#line 4437 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 443:
#line 4449 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 445:
#line 4458 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 446:
#line 4465 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 447:
#line 4466 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 448:
#line 4468 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 449:
#line 4470 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 450:
#line 4472 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 451:
#line 4474 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 452:
#line 4478 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 453:
#line 4480 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 454:
#line 4484 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 455:
#line 4485 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 456:
#line 4489 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 457:
#line 4490 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 458:
#line 4495 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 459:
#line 4514 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 460:
#line 4524 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 461:
#line 4535 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 462:
#line 4543 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 463:
#line 4545 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 464:
#line 4560 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 465:
#line 4562 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 466:
#line 4563 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 467:
#line 4566 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 468:
#line 4571 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 469:
#line 4575 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 470:
#line 4576 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 471:
#line 4581 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 472:
#line 4599 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 473:
#line 4614 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 474:
#line 4616 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 475:
#line 4631 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 476:
#line 4647 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 477:
#line 4668 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 478:
#line 4669 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 479:
#line 4674 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 480:
#line 4693 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 481:
#line 4698 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 482:
#line 4707 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 483:
#line 4729 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 484:
#line 4744 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 485:
#line 4746 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 486:
#line 4761 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 487:
#line 4766 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 488:
#line 4787 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 489:
#line 4792 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 490:
#line 4821 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 491:
#line 4832 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 492:
#line 4833 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 493:
#line 4838 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 494:
#line 4849 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 495:
#line 4851 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 496:
#line 4874 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 497:
#line 4875 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 498:
#line 4880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 499:
#line 4893 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:
#line 4913 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 501:
#line 4927 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 502:
#line 4952 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 503:
#line 4953 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 504:
#line 4958 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 505:
#line 4990 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 506:
#line 4995 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 507:
#line 4999 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 508:
#line 5000 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 509:
#line 5004 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 510:
#line 5005 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 511:
#line 5010 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 512:
#line 5012 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 513:
#line 5018 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 514:
#line 5020 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 515:
#line 5022 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 516:
#line 5024 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 517:
#line 5026 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 518:
#line 5028 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 519:
#line 5037 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 520:
#line 5052 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 521:
#line 5056 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 522:
#line 5066 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 523:
#line 5067 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 524:
#line 5071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 525:
#line 5072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 526:
#line 5076 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 527:
#line 5077 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 528:
#line 5081 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 529:
#line 5082 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 530:
#line 5086 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 531:
#line 5087 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 532:
#line 5091 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 533:
#line 5092 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 534:
#line 5096 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 535:
#line 5100 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 536:
#line 5101 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 544:
#line 5122 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 545:
#line 5127 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 546:
#line 5132 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 547:
#line 5137 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 548:
#line 5142 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 549:
#line 5147 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 550:
#line 5152 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 551:
#line 5157 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 552:
#line 5172 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 553:
#line 5178 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 554:
#line 5183 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 555:
#line 5188 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 556:
#line 5193 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
#ifndef MCP_WL3749
            Lex->alter_info.flags|= ALTER_ROW_FORMAT;
#endif
          }
    break;

  case 557:
#line 5201 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 558:
#line 5205 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 561:
#line 5229 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 562:
#line 5234 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 563:
#line 5239 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 564:
#line 5244 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 565:
#line 5246 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 566:
#line 5248 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 567:
#line 5250 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 568:
#line 5256 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 569:
#line 5264 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 570:
#line 5282 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 571:
#line 5299 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 572:
#line 5322 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 573:
#line 5335 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 574:
#line 5336 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 575:
#line 5337 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 576:
#line 5338 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 577:
#line 5339 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 578:
#line 5340 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 579:
#line 5344 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 580:
#line 5345 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 581:
#line 5346 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 582:
#line 5350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 584:
#line 5355 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 585:
#line 5356 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 586:
#line 5357 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 587:
#line 5358 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 588:
#line 5364 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 594:
#line 5382 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 595:
#line 5389 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 596:
#line 5395 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 597:
#line 5401 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 598:
#line 5407 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 599:
#line 5412 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 600:
#line 5430 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 604:
#line 5445 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 605:
#line 5446 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 606:
#line 5450 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 607:
#line 5455 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 608:
#line 5464 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 609:
#line 5477 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 610:
#line 5478 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 611:
#line 5479 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 612:
#line 5481 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 613:
#line 5486 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 614:
#line 5490 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 615:
#line 5495 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 616:
#line 5500 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 617:
#line 5504 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 618:
#line 5509 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 619:
#line 5514 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 620:
#line 5520 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 621:
#line 5525 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 622:
#line 5531 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 623:
#line 5535 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 624:
#line 5540 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 625:
#line 5545 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 626:
#line 5563 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 627:
#line 5565 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 628:
#line 5567 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 629:
#line 5580 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 630:
#line 5582 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 631:
#line 5587 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 632:
#line 5592 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 633:
#line 5604 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 634:
#line 5609 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 635:
#line 5614 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 636:
#line 5619 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 637:
#line 5621 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 638:
#line 5623 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 639:
#line 5625 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 640:
#line 5627 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 641:
#line 5629 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 642:
#line 5631 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 643:
#line 5633 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 644:
#line 5635 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 645:
#line 5637 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 646:
#line 5639 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 647:
#line 5641 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 648:
#line 5643 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 649:
#line 5645 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 650:
#line 5653 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 651:
#line 5654 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 652:
#line 5656 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 653:
#line 5660 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 654:
#line 5661 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 655:
#line 5662 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 656:
#line 5663 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 657:
#line 5664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 658:
#line 5668 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 659:
#line 5672 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 660:
#line 5673 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 661:
#line 5677 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 662:
#line 5678 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 663:
#line 5682 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 664:
#line 5683 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 665:
#line 5684 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 666:
#line 5685 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 667:
#line 5686 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 668:
#line 5690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 669:
#line 5691 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 670:
#line 5692 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 671:
#line 5693 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 672:
#line 5694 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 673:
#line 5699 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 674:
#line 5704 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 675:
#line 5706 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 676:
#line 5711 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 677:
#line 5713 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 678:
#line 5715 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 679:
#line 5720 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 680:
#line 5728 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 681:
#line 5729 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 682:
#line 5733 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 683:
#line 5734 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 684:
#line 5738 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 685:
#line 5739 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 686:
#line 5740 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 687:
#line 5744 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 688:
#line 5745 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 689:
#line 5746 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 690:
#line 5747 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 691:
#line 5750 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 692:
#line 5751 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 693:
#line 5755 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 694:
#line 5756 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 695:
#line 5760 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 696:
#line 5761 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 697:
#line 5765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 699:
#line 5770 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 700:
#line 5771 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 701:
#line 5773 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {       
            Lex->default_value=(yyvsp[(2) - (2)].item);
/* #ifndef MCP_WL3749 */
            Lex->alter_info.flags|= ALTER_COLUMN_DEFAULT;
/* #endif */
          }
    break;

  case 702:
#line 5780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 703:
#line 5786 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 704:
#line 5788 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 705:
#line 5794 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 706:
#line 5800 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 707:
#line 5806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 708:
#line 5811 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 709:
#line 5813 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 710:
#line 5827 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 711:
#line 5832 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 712:
#line 5837 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 713:
#line 5842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 714:
#line 5846 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 715:
#line 5850 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 716:
#line 5859 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 717:
#line 5880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 718:
#line 5886 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 719:
#line 5890 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 720:
#line 5891 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 721:
#line 5896 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 722:
#line 5903 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 723:
#line 5907 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 724:
#line 5908 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 725:
#line 5912 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 726:
#line 5913 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 727:
#line 5918 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 728:
#line 5926 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 729:
#line 5930 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 730:
#line 5931 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 731:
#line 5936 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 732:
#line 5946 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 733:
#line 5947 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 734:
#line 5951 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 735:
#line 5952 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 736:
#line 5956 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 737:
#line 5957 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 738:
#line 5962 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 739:
#line 5964 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 740:
#line 5968 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 741:
#line 5975 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 742:
#line 5984 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 743:
#line 5992 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 744:
#line 6002 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 747:
#line 6005 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 748:
#line 6006 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 749:
#line 6008 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 750:
#line 6013 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 751:
#line 6020 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 752:
#line 6021 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 755:
#line 6036 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 756:
#line 6043 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 758:
#line 6049 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 759:
#line 6056 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 760:
#line 6068 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 761:
#line 6070 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 762:
#line 6072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 763:
#line 6074 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 764:
#line 6079 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 765:
#line 6085 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 766:
#line 6091 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 767:
#line 6098 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 768:
#line 6105 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 769:
#line 6113 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 770:
#line 6114 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 771:
#line 6115 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 772:
#line 6116 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 773:
#line 6117 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 774:
#line 6121 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 775:
#line 6125 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 776:
#line 6126 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 777:
#line 6130 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 778:
#line 6131 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 779:
#line 6135 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 781:
#line 6140 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 782:
#line 6141 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 783:
#line 6142 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 784:
#line 6146 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 785:
#line 6147 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 786:
#line 6151 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 787:
#line 6156 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 788:
#line 6168 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 791:
#line 6185 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 793:
#line 6190 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 795:
#line 6195 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 803:
#line 6215 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 804:
#line 6216 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 805:
#line 6221 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 806:
#line 6222 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 811:
#line 6237 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 812:
#line 6249 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 813:
#line 6250 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 814:
#line 6251 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 815:
#line 6255 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 816:
#line 6256 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 817:
#line 6261 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 818:
#line 6267 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 819:
#line 6280 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 820:
#line 6281 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 821:
#line 6285 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 822:
#line 6286 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 823:
#line 6290 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 824:
#line 6291 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 825:
#line 6304 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
/* #ifndef MCP_WL3749 */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
/* #else
            if (!lex->select_lex.add_table_to_list(thd, $4, NULL,
   #endif
*/
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
/* #ifndef MCP_WL3749 */
            lex->alter_info.build_method= (yyvsp[(2) - (5)].build_method);
/* #endif */
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 826:
#line 6338 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 827:
#line 6350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 828:
#line 6355 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 829:
#line 6364 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 830:
#line 6375 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 831:
#line 6386 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 832:
#line 6393 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 833:
#line 6404 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 834:
#line 6411 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 835:
#line 6422 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 836:
#line 6429 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 837:
#line 6441 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 838:
#line 6443 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 839:
#line 6463 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 840:
#line 6476 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 841:
#line 6481 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 842:
#line 6486 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 843:
#line 6491 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 844:
#line 6496 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 845:
#line 6505 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 846:
#line 6506 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 847:
#line 6507 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 848:
#line 6508 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 849:
#line 6512 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 850:
#line 6514 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 851:
#line 6525 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 852:
#line 6526 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 853:
#line 6530 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 854:
#line 6531 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 856:
#line 6536 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 857:
#line 6537 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 863:
#line 6554 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 864:
#line 6559 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 865:
#line 6566 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 867:
#line 6580 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 868:
#line 6592 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 870:
#line 6605 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 872:
#line 6618 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 873:
#line 6625 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 875:
#line 6641 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.build_method)= HA_BUILD_DEFAULT;
          }
    break;

  case 876:
#line 6645 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.build_method)= HA_BUILD_ONLINE;
          }
    break;

  case 877:
#line 6649 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.build_method)= HA_BUILD_OFFLINE;
          }
    break;

  case 878:
#line 6657 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 879:
#line 6664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 881:
#line 6672 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 882:
#line 6684 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 884:
#line 6690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 885:
#line 6695 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 886:
#line 6702 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 888:
#line 6717 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 889:
#line 6721 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 890:
#line 6725 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 891:
#line 6732 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 892:
#line 6733 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 893:
#line 6738 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 896:
#line 6758 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 897:
#line 6767 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 898:
#line 6771 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 899:
#line 6776 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 900:
#line 6780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 901:
#line 6786 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 902:
#line 6790 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 903:
#line 6799 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 904:
#line 6811 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 905:
#line 6815 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 906:
#line 6824 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 907:
#line 6828 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 908:
#line 6837 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 909:
#line 6846 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 910:
#line 6852 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 911:
#line 6858 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
/* #ifndef MCP_WL3749 */
            lex->alter_info.flags|= ALTER_COLUMN_DEFAULT;
/* #else
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
   #endif
*/
          }
    break;

  case 912:
#line 6872 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
/* #ifndef MCP_WL3749 */
            lex->alter_info.flags|= ALTER_COLUMN_DEFAULT;
/* #else
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
   #endif
*/
          }
    break;

  case 913:
#line 6886 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 914:
#line 6905 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 915:
#line 6926 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 916:
#line 6936 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 917:
#line 6940 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 918:
#line 6947 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 919:
#line 6948 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 920:
#line 6952 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 921:
#line 6953 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 922:
#line 6957 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 923:
#line 6958 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 924:
#line 6959 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 925:
#line 6963 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 926:
#line 6966 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags|= ALTER_COLUMN_ORDER;
          }
    break;

  case 927:
#line 6971 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags|= ALTER_COLUMN_ORDER;
          }
    break;

  case 928:
#line 6983 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 929:
#line 6984 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 930:
#line 6985 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 931:
#line 6986 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 932:
#line 6995 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 933:
#line 7004 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 934:
#line 7006 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 935:
#line 7013 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 936:
#line 7021 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 937:
#line 7023 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 938:
#line 7032 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 939:
#line 7040 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 940:
#line 7042 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 941:
#line 7048 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 942:
#line 7050 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 945:
#line 7059 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 946:
#line 7060 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 947:
#line 7061 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 948:
#line 7065 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 949:
#line 7067 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 952:
#line 7088 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 953:
#line 7095 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 954:
#line 7099 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 955:
#line 7100 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 956:
#line 7101 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 957:
#line 7106 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 958:
#line 7116 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 959:
#line 7127 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 960:
#line 7128 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 961:
#line 7132 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 962:
#line 7133 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 963:
#line 7137 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 964:
#line 7138 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 965:
#line 7139 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 966:
#line 7144 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 967:
#line 7154 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 968:
#line 7166 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 969:
#line 7174 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 970:
#line 7189 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 971:
#line 7200 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 972:
#line 7201 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 973:
#line 7205 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 974:
#line 7206 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 975:
#line 7210 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 976:
#line 7211 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 977:
#line 7212 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 978:
#line 7213 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 979:
#line 7214 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 980:
#line 7215 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 981:
#line 7220 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 982:
#line 7230 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 983:
#line 7241 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 984:
#line 7242 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 985:
#line 7243 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 986:
#line 7248 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 987:
#line 7252 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 988:
#line 7254 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 989:
#line 7261 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 990:
#line 7266 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 993:
#line 7279 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 994:
#line 7292 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 995:
#line 7296 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1000:
#line 7315 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1001:
#line 7325 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1002:
#line 7334 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1003:
#line 7335 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1004:
#line 7340 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1005:
#line 7346 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1010:
#line 7361 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1011:
#line 7371 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1012:
#line 7381 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1014:
#line 7388 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1016:
#line 7399 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 1018:
#line 7405 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1019:
#line 7406 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1020:
#line 7416 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1023:
#line 7430 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1025:
#line 7440 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1027:
#line 7449 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1029:
#line 7468 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1030:
#line 7476 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1032:
#line 7483 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1037:
#line 7493 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1040:
#line 7508 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1044:
#line 7525 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1045:
#line 7553 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1047:
#line 7585 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1048:
#line 7591 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1051:
#line 7603 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1052:
#line 7618 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1053:
#line 7625 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1054:
#line 7650 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1055:
#line 7656 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1056:
#line 7662 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1057:
#line 7663 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1058:
#line 7664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1059:
#line 7665 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1060:
#line 7666 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1061:
#line 7670 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1062:
#line 7671 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1063:
#line 7677 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1064:
#line 7728 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:
#line 7735 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1066:
#line 7778 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:
#line 7784 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:
#line 7790 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:
#line 7796 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:
#line 7802 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:
#line 7808 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:
#line 7814 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:
#line 7824 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:
#line 7830 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:
#line 7836 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:
#line 7842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:
#line 7848 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:
#line 7858 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:
#line 7864 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:
#line 7874 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:
#line 7880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:
#line 7888 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:
#line 7894 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1086:
#line 7904 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:
#line 7910 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1088:
#line 7919 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:
#line 7929 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:
#line 7935 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:
#line 7945 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:
#line 7951 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:
#line 7964 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:
#line 7970 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:
#line 7976 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:
#line 7982 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:
#line 7988 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:
#line 7994 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 8000 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:
#line 8006 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:
#line 8012 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
#line 8018 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:
#line 8024 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:
#line 8030 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:
#line 8036 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:
#line 8042 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1117:
#line 8071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1118:
#line 8072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1119:
#line 8073 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1120:
#line 8074 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1121:
#line 8075 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1122:
#line 8076 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1123:
#line 8080 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1124:
#line 8081 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1130:
#line 8091 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:
#line 8107 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:
#line 8113 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1137:
#line 8117 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:
#line 8123 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:
#line 8129 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:
#line 8135 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:
#line 8141 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1142:
#line 8143 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:
#line 8150 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:
#line 8157 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:
#line 8163 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1146:
#line 8165 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1147:
#line 8174 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:
#line 8181 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:
#line 8189 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:
#line 8195 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:
#line 8202 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:
#line 8208 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:
#line 8222 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:
#line 8230 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:
#line 8245 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:
#line 8251 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:
#line 8257 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1158:
#line 8265 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:
#line 8271 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:
#line 8277 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:
#line 8283 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:
#line 8289 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:
#line 8304 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:
#line 8316 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:
#line 8322 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:
#line 8328 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:
#line 8334 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:
#line 8340 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:
#line 8346 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:
#line 8352 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:
#line 8358 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:
#line 8364 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1173:
#line 8370 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:
#line 8376 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:
#line 8382 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:
#line 8388 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:
#line 8394 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:
#line 8400 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:
#line 8406 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:
#line 8412 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1181:
#line 8420 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:
#line 8441 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:
#line 8448 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1184:
#line 8454 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1185:
#line 8461 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1186:
#line 8468 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1187:
#line 8476 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:
#line 8483 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:
#line 8489 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:
#line 8495 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:
#line 8501 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1192:
#line 8508 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1193:
#line 8515 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:
#line 8521 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:
#line 8528 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:
#line 8534 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1197:
#line 8540 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1198:
#line 8546 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1199:
#line 8552 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:
#line 8558 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1201:
#line 8576 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1202:
#line 8586 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:
#line 8592 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1204:
#line 8598 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1205:
#line 8605 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1206:
#line 8612 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1207:
#line 8627 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:
#line 8633 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:
#line 8639 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:
#line 8645 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:
#line 8651 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1212:
#line 8658 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:
#line 8664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:
#line 8670 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:
#line 8676 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:
#line 8682 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1217:
#line 8694 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:
#line 8700 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:
#line 8706 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:
#line 8712 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:
#line 8718 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:
#line 8730 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:
#line 8736 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1224:
#line 8752 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1225:
#line 8758 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1226:
#line 8765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1227:
#line 8772 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1228:
#line 8779 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1229:
#line 8786 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1230:
#line 8793 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1231:
#line 8797 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1232:
#line 8816 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1233:
#line 8835 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1234:
#line 8889 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1235:
#line 8931 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1236:
#line 8933 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1237:
#line 8937 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1238:
#line 8938 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1239:
#line 8942 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1240:
#line 8943 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1241:
#line 8947 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1242:
#line 8948 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1243:
#line 8953 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1244:
#line 8960 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1245:
#line 8968 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1246:
#line 8994 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:
#line 9000 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:
#line 9006 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:
#line 9012 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:
#line 9018 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:
#line 9024 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:
#line 9033 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:
#line 9039 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1254:
#line 9041 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1255:
#line 9043 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:
#line 9049 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:
#line 9060 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
#line 9066 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1259:
#line 9072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1260:
#line 9078 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1261:
#line 9084 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1262:
#line 9090 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1263:
#line 9096 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1264:
#line 9102 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1265:
#line 9108 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1266:
#line 9114 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1267:
#line 9118 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1268:
#line 9132 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1269:
#line 9140 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1270:
#line 9147 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1271:
#line 9157 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1272:
#line 9165 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1273:
#line 9180 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1274:
#line 9181 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1275:
#line 9186 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:
#line 9191 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1277:
#line 9196 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1278:
#line 9200 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1279:
#line 9212 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1280:
#line 9221 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1281:
#line 9229 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1282:
#line 9231 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1283:
#line 9233 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1284:
#line 9235 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1285:
#line 9237 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1286:
#line 9239 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1287:
#line 9241 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1288:
#line 9243 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1289:
#line 9245 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1290:
#line 9247 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1291:
#line 9249 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1292:
#line 9253 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1293:
#line 9254 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1294:
#line 9259 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1295:
#line 9266 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1296:
#line 9273 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1297:
#line 9274 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1298:
#line 9279 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1299:
#line 9286 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1300:
#line 9293 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1301:
#line 9294 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1302:
#line 9298 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1303:
#line 9299 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1304:
#line 9304 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1305:
#line 9312 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1306:
#line 9322 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1307:
#line 9324 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1308:
#line 9332 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1309:
#line 9343 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1310:
#line 9344 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1311:
#line 9350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1312:
#line 9352 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1313:
#line 9372 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1314:
#line 9374 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1315:
#line 9377 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1316:
#line 9385 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1317:
#line 9392 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1318:
#line 9400 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1319:
#line 9408 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1320:
#line 9412 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1321:
#line 9414 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1322:
#line 9422 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1323:
#line 9430 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1324:
#line 9438 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1325:
#line 9442 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1326:
#line 9448 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1327:
#line 9458 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1328:
#line 9466 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1329:
#line 9475 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1330:
#line 9479 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1331:
#line 9486 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1332:
#line 9496 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1333:
#line 9497 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1334:
#line 9498 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1335:
#line 9510 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1336:
#line 9515 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1337:
#line 9525 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1338:
#line 9565 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                     (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union()) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1340:
#line 9619 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1341:
#line 9624 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1343:
#line 9637 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1344:
#line 9656 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1345:
#line 9664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1347:
#line 9673 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1348:
#line 9679 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1349:
#line 9695 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1350:
#line 9712 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1352:
#line 9719 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1353:
#line 9724 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1354:
#line 9749 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1355:
#line 9750 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1356:
#line 9755 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1357:
#line 9758 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1358:
#line 9759 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1359:
#line 9760 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1360:
#line 9764 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1361:
#line 9765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1362:
#line 9770 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1364:
#line 9775 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1369:
#line 9788 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1371:
#line 9792 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1373:
#line 9797 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1374:
#line 9798 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1375:
#line 9803 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1376:
#line 9805 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1379:
#line 9815 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1380:
#line 9826 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1381:
#line 9838 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1382:
#line 9839 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1383:
#line 9840 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1384:
#line 9841 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1385:
#line 9842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1386:
#line 9843 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1387:
#line 9844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1388:
#line 9845 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1389:
#line 9846 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1390:
#line 9847 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1391:
#line 9848 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1392:
#line 9849 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1393:
#line 9853 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1394:
#line 9854 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1395:
#line 9855 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1396:
#line 9856 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1397:
#line 9857 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1398:
#line 9858 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1399:
#line 9859 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1400:
#line 9860 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1401:
#line 9861 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1402:
#line 9865 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1403:
#line 9866 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1404:
#line 9867 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1405:
#line 9868 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1409:
#line 9878 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1410:
#line 9880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:
#line 9893 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1414:
#line 9895 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1415:
#line 9899 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1417:
#line 9911 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1418:
#line 9915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1419:
#line 9926 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1420:
#line 9931 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1423:
#line 9953 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1424:
#line 9955 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1425:
#line 9959 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1426:
#line 9961 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1427:
#line 9981 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1431:
#line 10015 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1434:
#line 10034 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1436:
#line 10069 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1437:
#line 10071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1438:
#line 10075 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1439:
#line 10076 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1440:
#line 10077 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1441:
#line 10082 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1442:
#line 10088 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1443:
#line 10092 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1444:
#line 10093 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1445:
#line 10098 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1446:
#line 10105 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1447:
#line 10112 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1448:
#line 10119 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1449:
#line 10129 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1450:
#line 10163 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1451:
#line 10167 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1452:
#line 10173 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:
#line 10179 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1454:
#line 10188 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1455:
#line 10193 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1456:
#line 10202 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1457:
#line 10203 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1458:
#line 10204 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1459:
#line 10205 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1460:
#line 10206 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:
#line 10207 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:
#line 10211 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:
#line 10212 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1464:
#line 10213 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:
#line 10214 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:
#line 10215 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1467:
#line 10219 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1468:
#line 10220 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1469:
#line 10221 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1470:
#line 10222 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1471:
#line 10223 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1472:
#line 10227 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1473:
#line 10228 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1474:
#line 10229 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1475:
#line 10230 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1476:
#line 10235 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1480:
#line 10246 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1482:
#line 10276 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1483:
#line 10277 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1486:
#line 10287 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1487:
#line 10298 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1488:
#line 10304 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1490:
#line 10309 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1491:
#line 10314 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1492:
#line 10333 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1493:
#line 10365 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1495:
#line 10377 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1496:
#line 10385 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1498:
#line 10388 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1499:
#line 10400 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1500:
#line 10411 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1501:
#line 10417 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1502:
#line 10428 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1503:
#line 10437 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1504:
#line 10439 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1505:
#line 10444 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
/* #ifndef MCP_WL3749 */
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str);
/* #else
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, $3.str);
   #endif
*/
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
/* #ifndef MCP_WL3749 */
            lex->alter_info.build_method= (yyvsp[(2) - (7)].build_method);
/* #endif */
            lex->alter_info.drop_list.push_back(ad);
/* #ifndef MCP_WL3749 */
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
/* #else
            if (!lex->current_select->add_table_to_list(lex->thd, $5, NULL,
   #endif
*/
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1506:
#line 10473 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1507:
#line 10480 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1508:
#line 10503 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1509:
#line 10524 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1510:
#line 10536 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1511:
#line 10540 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1512:
#line 10548 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1513:
#line 10550 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1514:
#line 10556 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1515:
#line 10563 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1516:
#line 10568 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1517:
#line 10573 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1520:
#line 10588 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1523:
#line 10604 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1524:
#line 10614 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1525:
#line 10615 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1526:
#line 10619 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1527:
#line 10620 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1528:
#line 10628 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1529:
#line 10636 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1530:
#line 10641 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1531:
#line 10646 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1532:
#line 10653 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1533:
#line 10658 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1534:
#line 10663 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1535:
#line 10675 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1536:
#line 10677 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1537:
#line 10684 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1538:
#line 10688 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1539:
#line 10690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1540:
#line 10700 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1541:
#line 10701 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1542:
#line 10706 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1543:
#line 10714 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1544:
#line 10715 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1545:
#line 10716 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1546:
#line 10718 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1548:
#line 10728 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1549:
#line 10729 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1550:
#line 10733 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1551:
#line 10734 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1552:
#line 10736 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1553:
#line 10737 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1554:
#line 10739 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1555:
#line 10740 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1560:
#line 10755 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1561:
#line 10764 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1562:
#line 10765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1563:
#line 10769 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1564:
#line 10770 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1565:
#line 10775 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1566:
#line 10780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1567:
#line 10788 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1569:
#line 10794 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1570:
#line 10799 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1571:
#line 10806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1572:
#line 10808 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1574:
#line 10817 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1576:
#line 10825 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1577:
#line 10833 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1578:
#line 10851 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1581:
#line 10861 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1584:
#line 10874 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1585:
#line 10883 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1586:
#line 10884 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1587:
#line 10891 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1589:
#line 10906 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1590:
#line 10915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1591:
#line 10917 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1592:
#line 10923 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1593:
#line 10928 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1594:
#line 10934 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1597:
#line 10947 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1598:
#line 10960 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1599:
#line 10975 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1600:
#line 10976 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1601:
#line 10980 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1602:
#line 10981 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1603:
#line 10985 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1604:
#line 10986 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1605:
#line 10987 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1606:
#line 10992 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1607:
#line 11003 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:
#line 11028 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1615:
#line 11032 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1616:
#line 11036 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1617:
#line 11040 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1618:
#line 11044 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1619:
#line 11048 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1620:
#line 11052 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1621:
#line 11056 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1622:
#line 11060 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1623:
#line 11067 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1624:
#line 11071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1625:
#line 11080 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1626:
#line 11088 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1627:
#line 11093 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1628:
#line 11100 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1629:
#line 11108 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1630:
#line 11116 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1631:
#line 11124 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1632:
#line 11132 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1633:
#line 11140 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1634:
#line 11147 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1635:
#line 11149 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1636:
#line 11151 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1637:
#line 11160 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1638:
#line 11164 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1639:
#line 11168 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1641:
#line 11173 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1643:
#line 11178 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1644:
#line 11187 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1645:
#line 11194 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1646:
#line 11199 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1647:
#line 11204 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1648:
#line 11209 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1649:
#line 11211 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1650:
#line 11213 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1651:
#line 11215 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1652:
#line 11217 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1653:
#line 11219 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1654:
#line 11226 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1655:
#line 11234 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1656:
#line 11236 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1657:
#line 11244 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1658:
#line 11251 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1659:
#line 11258 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1660:
#line 11268 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1661:
#line 11275 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1662:
#line 11281 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1663:
#line 11290 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1664:
#line 11298 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1665:
#line 11302 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1666:
#line 11306 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1667:
#line 11313 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1668:
#line 11320 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1669:
#line 11326 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1670:
#line 11333 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1671:
#line 11340 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1672:
#line 11345 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1673:
#line 11350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1674:
#line 11358 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1675:
#line 11360 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1676:
#line 11362 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1681:
#line 11376 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1682:
#line 11377 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1683:
#line 11381 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1684:
#line 11382 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1687:
#line 11391 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1688:
#line 11392 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1689:
#line 11396 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1690:
#line 11397 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1692:
#line 11403 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1693:
#line 11410 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1694:
#line 11420 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1695:
#line 11430 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1696:
#line 11432 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1697:
#line 11434 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1700:
#line 11446 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1701:
#line 11447 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1702:
#line 11448 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1703:
#line 11452 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1704:
#line 11453 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1705:
#line 11455 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1706:
#line 11469 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1707:
#line 11476 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1708:
#line 11481 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1709:
#line 11490 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1710:
#line 11491 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1712:
#line 11496 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1713:
#line 11498 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1715:
#line 11513 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1716:
#line 11518 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1717:
#line 11520 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1718:
#line 11522 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1719:
#line 11524 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1720:
#line 11526 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1721:
#line 11528 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1722:
#line 11530 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1723:
#line 11532 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1724:
#line 11534 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1725:
#line 11536 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1726:
#line 11538 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1727:
#line 11540 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            Lex->type|= REFRESH_SLAVE;
            Lex->reset_slave_info.all= false;
          }
    break;

  case 1728:
#line 11545 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1729:
#line 11547 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1730:
#line 11549 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1731:
#line 11553 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1732:
#line 11554 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1733:
#line 11559 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1734:
#line 11564 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1737:
#line 11573 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1738:
#line 11574 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 1739:
#line 11575 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1740:
#line 11576 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1741:
#line 11580 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1742:
#line 11581 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1743:
#line 11586 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1744:
#line 11592 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1746:
#line 11601 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1747:
#line 11605 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1748:
#line 11617 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1749:
#line 11626 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1750:
#line 11627 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1751:
#line 11628 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1752:
#line 11635 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1753:
#line 11646 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1754:
#line 11658 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1755:
#line 11668 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1756:
#line 11678 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1757:
#line 11682 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1758:
#line 11686 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1759:
#line 11687 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1760:
#line 11691 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1761:
#line 11692 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1762:
#line 11696 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1763:
#line 11698 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1764:
#line 11709 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1765:
#line 11713 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1766:
#line 11714 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1767:
#line 11715 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1772:
#line 11730 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1773:
#line 11735 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1774:
#line 11742 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1775:
#line 11747 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1780:
#line 11765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1781:
#line 11770 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1782:
#line 11777 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 1783:
#line 11779 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1785:
#line 11784 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1786:
#line 11791 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 1787:
#line 11793 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { }
    break;

  case 1788:
#line 11797 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1789:
#line 11798 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1790:
#line 11799 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1791:
#line 11804 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1792:
#line 11806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1793:
#line 11810 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1794:
#line 11812 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1795:
#line 11820 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1796:
#line 11821 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1799:
#line 11831 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1800:
#line 11844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1801:
#line 11868 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1802:
#line 11880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1803:
#line 11891 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1804:
#line 11910 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1805:
#line 11918 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1806:
#line 11930 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1807:
#line 11945 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1808:
#line 11965 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1809:
#line 11966 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1810:
#line 11968 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1811:
#line 11975 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1812:
#line 11976 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1813:
#line 11978 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1814:
#line 11985 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:
#line 11991 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1816:
#line 11997 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1817:
#line 12003 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1818:
#line 12009 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1819:
#line 12038 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1820:
#line 12065 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1821:
#line 12066 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1822:
#line 12067 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1823:
#line 12072 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1824:
#line 12082 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1825:
#line 12092 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1826:
#line 12098 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1827:
#line 12107 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1828:
#line 12121 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1829:
#line 12122 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1830:
#line 12127 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1831:
#line 12136 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1832:
#line 12151 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1833:
#line 12156 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1834:
#line 12202 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1835:
#line 12207 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1836:
#line 12224 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1837:
#line 12229 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1838:
#line 12308 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1839:
#line 12333 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1840:
#line 12363 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1841:
#line 12365 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1842:
#line 12381 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1843:
#line 12390 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1844:
#line 12395 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1845:
#line 12401 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1846:
#line 12407 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1847:
#line 12417 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1848:
#line 12423 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1849:
#line 12432 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1850:
#line 12441 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1851:
#line 12443 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1852:
#line 12473 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1853:
#line 12489 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1854:
#line 12505 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1855:
#line 12521 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1856:
#line 12523 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1857:
#line 12533 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1858:
#line 12535 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1859:
#line 12545 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1860:
#line 12546 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1861:
#line 12547 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1862:
#line 12552 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1863:
#line 12569 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1864:
#line 12591 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1865:
#line 12605 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1866:
#line 12606 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1867:
#line 12607 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1868:
#line 12608 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1869:
#line 12609 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1870:
#line 12610 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1871:
#line 12611 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1872:
#line 12612 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1873:
#line 12613 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1874:
#line 12614 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1875:
#line 12615 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1876:
#line 12616 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1877:
#line 12617 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1878:
#line 12618 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1879:
#line 12619 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1880:
#line 12620 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1881:
#line 12621 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1882:
#line 12622 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1883:
#line 12623 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1884:
#line 12624 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1885:
#line 12625 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1886:
#line 12626 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1887:
#line 12627 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1888:
#line 12628 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1889:
#line 12629 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1890:
#line 12630 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1891:
#line 12631 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1892:
#line 12632 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1893:
#line 12633 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1894:
#line 12634 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1895:
#line 12635 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1896:
#line 12636 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1897:
#line 12637 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1898:
#line 12638 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1899:
#line 12639 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1900:
#line 12640 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1901:
#line 12641 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1902:
#line 12642 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1903:
#line 12643 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1904:
#line 12644 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1905:
#line 12645 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1906:
#line 12646 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1907:
#line 12647 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1908:
#line 12648 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1909:
#line 12649 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1910:
#line 12650 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1911:
#line 12651 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1912:
#line 12652 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1913:
#line 12653 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1914:
#line 12654 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1915:
#line 12664 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1916:
#line 12665 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1917:
#line 12666 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1918:
#line 12667 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1919:
#line 12668 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1920:
#line 12669 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1921:
#line 12670 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1922:
#line 12671 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1923:
#line 12672 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1924:
#line 12673 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1925:
#line 12674 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1926:
#line 12675 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1927:
#line 12676 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1928:
#line 12677 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1929:
#line 12678 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1930:
#line 12679 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1931:
#line 12680 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1932:
#line 12681 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1933:
#line 12682 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1934:
#line 12683 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1935:
#line 12684 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1936:
#line 12685 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1937:
#line 12686 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1938:
#line 12687 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1939:
#line 12688 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1940:
#line 12689 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1941:
#line 12690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1942:
#line 12691 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1943:
#line 12692 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1944:
#line 12693 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1945:
#line 12694 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1946:
#line 12695 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1947:
#line 12696 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1948:
#line 12697 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1949:
#line 12698 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1950:
#line 12699 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1951:
#line 12700 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1952:
#line 12701 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1953:
#line 12702 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1954:
#line 12703 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1955:
#line 12704 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1956:
#line 12705 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1957:
#line 12706 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1958:
#line 12707 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1959:
#line 12708 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1960:
#line 12709 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1961:
#line 12710 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1962:
#line 12711 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1963:
#line 12712 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1964:
#line 12713 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1965:
#line 12714 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1966:
#line 12715 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1967:
#line 12716 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1968:
#line 12717 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1969:
#line 12718 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1970:
#line 12719 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1971:
#line 12720 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1972:
#line 12721 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1973:
#line 12722 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1974:
#line 12723 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1975:
#line 12724 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1976:
#line 12725 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1977:
#line 12726 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1978:
#line 12727 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1979:
#line 12728 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1980:
#line 12729 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1981:
#line 12730 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1982:
#line 12731 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1983:
#line 12732 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1984:
#line 12733 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1985:
#line 12734 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1986:
#line 12735 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1987:
#line 12736 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1988:
#line 12737 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1989:
#line 12738 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1990:
#line 12739 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1991:
#line 12740 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1992:
#line 12741 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1993:
#line 12742 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1994:
#line 12743 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1995:
#line 12744 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1996:
#line 12745 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1997:
#line 12746 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1998:
#line 12747 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 1999:
#line 12748 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2000:
#line 12749 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2001:
#line 12750 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2002:
#line 12751 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2003:
#line 12752 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2004:
#line 12753 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2005:
#line 12754 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2006:
#line 12755 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2007:
#line 12756 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2008:
#line 12757 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2009:
#line 12758 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2010:
#line 12759 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2011:
#line 12760 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2012:
#line 12761 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2013:
#line 12762 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2014:
#line 12763 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2015:
#line 12764 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2016:
#line 12765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2017:
#line 12766 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2018:
#line 12767 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2019:
#line 12768 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2020:
#line 12769 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2021:
#line 12770 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2022:
#line 12771 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2023:
#line 12772 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2024:
#line 12773 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2025:
#line 12774 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2026:
#line 12775 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2027:
#line 12776 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2028:
#line 12777 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2029:
#line 12778 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2030:
#line 12779 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2031:
#line 12780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2032:
#line 12781 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2033:
#line 12782 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2034:
#line 12783 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2035:
#line 12784 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2036:
#line 12785 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2037:
#line 12786 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2038:
#line 12787 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2039:
#line 12788 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2040:
#line 12789 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2041:
#line 12790 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2042:
#line 12791 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2043:
#line 12792 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2044:
#line 12793 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2045:
#line 12794 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2046:
#line 12795 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2047:
#line 12796 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2048:
#line 12797 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2049:
#line 12798 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2050:
#line 12799 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2051:
#line 12800 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2052:
#line 12801 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2053:
#line 12802 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2054:
#line 12803 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2055:
#line 12804 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2056:
#line 12805 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2057:
#line 12806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2058:
#line 12807 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2059:
#line 12808 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2060:
#line 12809 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2061:
#line 12810 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2062:
#line 12811 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2063:
#line 12812 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2064:
#line 12813 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2065:
#line 12814 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2066:
#line 12815 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2067:
#line 12816 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2068:
#line 12817 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2069:
#line 12818 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2070:
#line 12819 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2071:
#line 12820 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2072:
#line 12821 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2073:
#line 12822 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2074:
#line 12823 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2075:
#line 12824 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2076:
#line 12825 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2077:
#line 12826 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2078:
#line 12827 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2079:
#line 12829 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2080:
#line 12831 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2081:
#line 12832 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2082:
#line 12833 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2083:
#line 12835 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2084:
#line 12837 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2085:
#line 12838 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2086:
#line 12839 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2087:
#line 12840 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2088:
#line 12841 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2089:
#line 12842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2090:
#line 12843 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2091:
#line 12844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2092:
#line 12845 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2093:
#line 12846 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2094:
#line 12847 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2095:
#line 12848 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2096:
#line 12849 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2097:
#line 12850 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2098:
#line 12851 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2099:
#line 12852 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2100:
#line 12853 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2101:
#line 12854 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2102:
#line 12855 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2103:
#line 12856 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2104:
#line 12857 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2105:
#line 12858 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2106:
#line 12859 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2107:
#line 12860 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2108:
#line 12861 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2109:
#line 12862 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2110:
#line 12863 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2111:
#line 12864 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2112:
#line 12865 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2113:
#line 12866 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2114:
#line 12867 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2115:
#line 12868 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2116:
#line 12869 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2117:
#line 12870 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2118:
#line 12871 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2119:
#line 12872 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2120:
#line 12873 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2121:
#line 12874 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2122:
#line 12875 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2123:
#line 12876 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2124:
#line 12877 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2125:
#line 12878 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2126:
#line 12879 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2127:
#line 12880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2128:
#line 12881 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2129:
#line 12882 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2130:
#line 12883 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2131:
#line 12884 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2132:
#line 12885 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2133:
#line 12886 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2134:
#line 12887 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2135:
#line 12888 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2136:
#line 12889 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2137:
#line 12890 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2138:
#line 12891 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2139:
#line 12892 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2140:
#line 12893 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2141:
#line 12894 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2142:
#line 12895 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2143:
#line 12896 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2144:
#line 12897 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2145:
#line 12898 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2146:
#line 12899 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2147:
#line 12900 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2148:
#line 12901 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2149:
#line 12902 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2150:
#line 12903 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2151:
#line 12904 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2152:
#line 12905 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2153:
#line 12906 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2154:
#line 12907 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2155:
#line 12908 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2156:
#line 12909 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2157:
#line 12910 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2158:
#line 12911 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2159:
#line 12912 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2160:
#line 12913 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2161:
#line 12914 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2162:
#line 12915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2163:
#line 12916 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2164:
#line 12917 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2165:
#line 12918 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2166:
#line 12919 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2167:
#line 12920 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2168:
#line 12921 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2169:
#line 12922 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2170:
#line 12923 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2171:
#line 12924 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2172:
#line 12925 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2173:
#line 12926 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2174:
#line 12927 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2175:
#line 12928 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2176:
#line 12929 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2177:
#line 12930 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2178:
#line 12931 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2179:
#line 12932 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2180:
#line 12933 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2181:
#line 12934 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2182:
#line 12935 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2183:
#line 12936 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2184:
#line 12937 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2185:
#line 12938 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2186:
#line 12939 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2187:
#line 12940 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2188:
#line 12941 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2189:
#line 12942 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2190:
#line 12943 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2191:
#line 12944 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2192:
#line 12945 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2193:
#line 12946 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2194:
#line 12947 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2195:
#line 12948 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2196:
#line 12955 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2197:
#line 12965 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2198:
#line 12969 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2199:
#line 12970 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2202:
#line 12979 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2203:
#line 13010 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2204:
#line 13061 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2205:
#line 13062 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2206:
#line 13063 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2207:
#line 13064 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2208:
#line 13068 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2209:
#line 13069 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2210:
#line 13073 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2211:
#line 13074 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2212:
#line 13075 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2213:
#line 13076 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2214:
#line 13080 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2215:
#line 13081 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2216:
#line 13082 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2217:
#line 13083 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2220:
#line 13093 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2221:
#line 13135 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2222:
#line 13154 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2223:
#line 13165 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2224:
#line 13178 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2225:
#line 13192 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2226:
#line 13207 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2227:
#line 13226 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2228:
#line 13253 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2229:
#line 13266 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2230:
#line 13293 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2231:
#line 13336 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2232:
#line 13349 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2233:
#line 13350 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2234:
#line 13351 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2235:
#line 13352 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2236:
#line 13356 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2237:
#line 13358 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2238:
#line 13367 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2239:
#line 13378 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2240:
#line 13379 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2241:
#line 13381 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2242:
#line 13387 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2243:
#line 13393 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2244:
#line 13404 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2245:
#line 13415 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2250:
#line 13430 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2251:
#line 13442 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2252:
#line 13443 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2253:
#line 13444 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2254:
#line 13445 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2255:
#line 13450 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2256:
#line 13461 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2257:
#line 13470 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2258:
#line 13482 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2259:
#line 13494 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2260:
#line 13513 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2261:
#line 13526 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2262:
#line 13527 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2263:
#line 13531 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2264:
#line 13532 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2265:
#line 13536 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2266:
#line 13537 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2267:
#line 13538 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2268:
#line 13539 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2269:
#line 13541 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2270:
#line 13549 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2271:
#line 13553 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2272:
#line 13554 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2273:
#line 13555 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2274:
#line 13556 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2275:
#line 13557 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2276:
#line 13564 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2277:
#line 13569 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2278:
#line 13575 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2279:
#line 13586 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2280:
#line 13597 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2281:
#line 13601 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2282:
#line 13611 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2283:
#line 13617 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2284:
#line 13624 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2285:
#line 13636 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2286:
#line 13647 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2289:
#line 13661 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2290:
#line 13663 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2295:
#line 13681 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2296:
#line 13682 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2297:
#line 13684 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2298:
#line 13685 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2299:
#line 13687 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2300:
#line 13688 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2301:
#line 13690 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2302:
#line 13691 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2303:
#line 13692 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2304:
#line 13693 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2305:
#line 13694 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2306:
#line 13695 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2307:
#line 13696 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2308:
#line 13697 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2309:
#line 13698 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2310:
#line 13699 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2311:
#line 13700 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2312:
#line 13701 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2313:
#line 13702 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2314:
#line 13703 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2315:
#line 13704 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2316:
#line 13705 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2317:
#line 13706 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2318:
#line 13707 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2319:
#line 13708 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2320:
#line 13709 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2321:
#line 13710 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2322:
#line 13711 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2323:
#line 13712 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2324:
#line 13713 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2325:
#line 13714 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2326:
#line 13715 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2327:
#line 13716 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2328:
#line 13717 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2329:
#line 13721 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2330:
#line 13722 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2333:
#line 13732 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2334:
#line 13742 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2335:
#line 13752 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2336:
#line 13765 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2337:
#line 13780 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2338:
#line 13793 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2339:
#line 13806 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2340:
#line 13818 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2341:
#line 13823 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2342:
#line 13831 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2343:
#line 13836 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2344:
#line 13844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2345:
#line 13873 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2346:
#line 13880 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2347:
#line 13888 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2348:
#line 13896 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2349:
#line 13901 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2353:
#line 13915 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2355:
#line 13944 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2356:
#line 13948 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2357:
#line 13952 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2358:
#line 13956 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2359:
#line 13962 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2361:
#line 13967 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2362:
#line 13968 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2363:
#line 13972 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2364:
#line 13973 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2365:
#line 13977 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2366:
#line 13979 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2367:
#line 13985 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2368:
#line 13991 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2369:
#line 13997 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2370:
#line 14006 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2371:
#line 14011 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2372:
#line 14015 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2373:
#line 14016 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2374:
#line 14021 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2375:
#line 14022 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2376:
#line 14023 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2377:
#line 14028 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2378:
#line 14029 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2379:
#line 14030 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2380:
#line 14034 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2381:
#line 14035 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2382:
#line 14040 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2383:
#line 14052 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2384:
#line 14062 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2385:
#line 14071 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2386:
#line 14080 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2387:
#line 14093 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2389:
#line 14099 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2390:
#line 14104 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2391:
#line 14114 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2392:
#line 14115 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2393:
#line 14116 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2396:
#line 14125 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2397:
#line 14141 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2400:
#line 14154 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2401:
#line 14155 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2402:
#line 14156 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2403:
#line 14161 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2404:
#line 14165 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2406:
#line 14174 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2407:
#line 14180 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2408:
#line 14189 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2409:
#line 14195 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2410:
#line 14216 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2415:
#line 14244 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2416:
#line 14246 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2417:
#line 14253 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2418:
#line 14254 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2419:
#line 14255 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2420:
#line 14257 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2421:
#line 14263 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2422:
#line 14268 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2423:
#line 14279 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2424:
#line 14281 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2425:
#line 14283 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2439:
#line 14316 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2440:
#line 14330 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2441:
#line 14343 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2442:
#line 14345 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2443:
#line 14347 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2444:
#line 14352 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2445:
#line 14357 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2446:
#line 14359 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2447:
#line 14361 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2448:
#line 14366 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2449:
#line 14368 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2450:
#line 14370 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2451:
#line 14375 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2453:
#line 14392 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2455:
#line 14398 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2456:
#line 14403 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2457:
#line 14410 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2458:
#line 14419 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2461:
#line 14441 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2462:
#line 14443 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2463:
#line 14445 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2464:
#line 14447 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2465:
#line 14464 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2466:
#line 14470 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2467:
#line 14475 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2468:
#line 14505 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2469:
#line 14539 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2470:
#line 14557 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2471:
#line 14580 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2472:
#line 14612 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2473:
#line 14616 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2474:
#line 14624 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2475:
#line 14647 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2476:
#line 14656 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2477:
#line 14712 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2478:
#line 14736 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2479:
#line 14745 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2480:
#line 14753 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2481:
#line 14761 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2482:
#line 14775 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2483:
#line 14779 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2484:
#line 14783 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2485:
#line 14787 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2486:
#line 14791 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2487:
#line 14795 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2488:
#line 14802 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2489:
#line 14809 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2490:
#line 14816 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2491:
#line 14825 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2492:
#line 14826 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2493:
#line 14830 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2494:
#line 14831 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2495:
#line 14832 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2496:
#line 14836 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2497:
#line 14837 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2498:
#line 14842 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2499:
#line 14844 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2501:
#line 14849 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {}
    break;

  case 2502:
#line 14850 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2503:
#line 14855 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2504:
#line 14865 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 34286 "/opt/checkout/eAccelero/3rdparty/mysql-cluster-gpl-7.2.8/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



