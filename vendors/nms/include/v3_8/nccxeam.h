/* **********************************************************************
*                                                                       *
* Copyright (c) 1996 Natural MicroSystems Corp.  All rights reserved.   *
* Generated by User Definable Parameter  ( Version 1.0 )                *
* exported udpGenerateParameterSourceFiles() function.                  *
*                                                                       *
* ********************************************************************* */
                                     
                                     
#ifndef NCCXEAMBRAPARM_DEFINED       
#define NCCXEAMBRAPARM_DEFINED       
                                     
#include "ctadef.h"                  
                                     
#ifdef __cplusplus                   
extern "C"                           
{                                    
#endif                               
                                     
                                     
#define    NCC_SVCID    0x1C         
                                     
#define    NCC_ADI_EAM_PARMID    0x1C0111
                                     
typedef struct                       
{                                    
    DWORD    size;                   
    WORD    DIDnumber;               /* 0, expected number of DID             */
    WORD    ANInumber;               /* 1, expected number of ANI             */
    WORD    DIDBeforeANI;            /* 2, number of DID before ANI           */
    WORD    nobusyonReject;          /* 3, set to 1 to avoid playing          */
                                     /*    busy while rejecting a call        */
    WORD    trunkdirection;          /* 4, direction of the trunk:            */
                                     /*    0=TWO_WAY_TRUNK,                   */
                                     /*    1=TRUNK_INBOUND,                   */
                                     /*    2=TRUNK_OUTBOUND                   */
    WORD    cleardowntone;           /* 5, play busy while hanging up         */
    WORD    norejtoneUserAudio;      /* 6, do not signal reject when the      */
                                     /*    host wants to play user audio      */
                                     /*    to reject                          */
    WORD    askrepeat;               /* 7, reserved                           */
    WORD    timewaitdial;            /* 8, outbound time to wait for the      */
                                     /*    inbound to resynchronize if        */
                                     /*    no release guard                   */
    WORD    compelledT1;             /* 9, T1, compelled timer                */
    WORD    compelledT2;             /*10, T2, compelled timer                */
    WORD    compelledT3;             /*11, T3, compelled timer                */
    WORD    shortpulsetime;          /*12, nominal value of the short         */
                                     /*    pulse specifications               */
    WORD    maxshortpulsetime;       /*13, max variation value of the         */
                                     /*    short pulse specifications         */
    WORD    longpulsetime;           /*14, nominal value of the long          */
                                     /*    pulse specifications               */
    WORD    maxlongpulsetime;        /*15, maximum variation value of         */
                                     /*    the long pulse specifications      */
    WORD    seizureacktime;          /*16, time to wait for seizure ack.      */
                                     /*    before clearing forward. If        */
                                     /*    not needed (only necessary         */
                                     /*    for satellite connections)         */
                                     /*    it's zero                          */
    WORD    waitforanswertime;       /*17, time to wait for answer            */
                                     /*    (seconds)                          */
    WORD    waitforreleasetime;      /*18, time to wait for release           */
                                     /*    guard, before starting             */
                                     /*    the alarm sequence (seconds)       */
    WORD    alarmtimeout;            /*19, timeout before starting the        */
                                     /*    alarm sequence (seconds)           */
    WORD    alarminterpulse;         /*20, time between short and long        */
                                     /*    pulse in the alarm sequence        */
    WORD    tnGAsendnextDID;         /*21, Group A tone to send next DID      */
    WORD    tnGAsendCAT;             /*22, Group A tone to send category      */
    WORD    tnGAsendnextANI;         /*23, Group A tone to send next ANI      */
    WORD    tnGAswitchtoGB;          /*24, Group A tone to go to Group B      */
    WORD    tnGBcongestion;          /*25, Group B tone defining              */
                                     /*    congestion                         */
    WORD    tnGBunallocnumber;       /*26, Group B tone specifying            */
                                     /*    unallocated number                 */
    WORD    tnGBlinebusy;            /*27, Group B tone specifying            */
                                     /*    line busy                          */
    WORD    tnGBlineoutoforder;      /*28, Group B tone specifying            */
                                     /*    line out of order                  */
    WORD    tnDIDeoi;                /*29, DID tone for the end of info       */
    WORD    tnNoCategory;            /*30, normally 12 or 15. If category     */
                                     /*    is compusory, set to 0             */
    WORD    tnANIeoi;                /*31, ANI tone for the end of info       */
    WORD    tnanswerGBtoll;          /*32, Inbound accepts the call with a    */
                                     /*    Group B tone specifying that       */
                                     /*    call is charged                    */
    WORD    tnanswerGBfree;          /*33, Inbound accepts the call with a    */
                                     /*    Group B tone specifying that       */
                                     /*    call is free                       */
    WORD    tnanswerGA;              /*34, Inbound accepts the call with a    */
                                     /*    Group A tone                       */
    WORD    tnaltGB;                 /*35, alternate group B                  */
    WORD    tnoutGIIcategory;        /*36, the GII category that ooutbound    */
                                     /*    plays                              */
    WORD    tnGIcategory;            /*37, the default user category (if not  */
                                     /*    specified in the dialstring)       */
    WORD    tnGIANInotavailable;     /*38, what outbound sends if ANI is not  */
                                     /*    available (never 0)                */
    WORD    tnGIIfreecategory;       /*39, Free category (maintenance         */
                                     /*    equipment)                         */
    WORD    tnRepeatLastMinus1DID;   /*40, outbound tone - repeat DID N-1     */
    WORD    tnRepeatLastMinus2DID;   /*41, outbound tone - repeat DID N-2     */
    WORD    tnRepeatLastMinus3DID;   /*42, outbound tone - repeat DID N-3     */
    WORD    tnRepeatAllDID;          /*43, Re-start DIDs from beginning       */
    WORD    tnSendNextDIDfromANI;    /*44, This is the tone that inbound      */
                                     /*    sends to request the next DID      */
                                     /*    while receieving ANI. Where Group  */
                                     /*    C is defined, this is different    */
                                     /*    from tnGAsendnextDID, otherwise    */
                                     /*    must be the same                   */
    WORD    tnRepeatLastDID;         /*45, It switches to request DID again,  */
                                     /*    but asks for the last one dialed   */
    WORD    compelledtonelevel;      /*46, amplitude of cmpl tones            */
    WORD    idlecode;                /*47, idle code (1011)                   */
    WORD    pulsecode;               /*48, line code during pulse (1111)      */
    WORD    alarmcode;               /*49, line code during alarm (if equal   */
                                     /*    to idle, no alarms are handled)    */
                                     /*    (0011)                             */
    WORD    doalarms;                /*50, does outbound ever signal          */
                                     /*    alarms? 0 = no; 1 = yes            */
    WORD    releaseguard;            /*51, is Release Guard needed?           */
                                     /*    0 = no; 1 = yes                    */
    WORD    clearback;               /*52, is Clear Back needed after         */
                                     /*    Clear Forward? 0 = no; 1 = yes     */
    WORD    twoclearforward;         /*53, should the protocol send more      */
                                     /*    than one Clear Forward before      */
                                     /*    setting alarm status?              */
                                     /*    0 = no; 1 = yes                    */
    WORD    satelliteconnection;     /*54, IDN satellite connection           */
                                     /*    this means:                        */
                                     /*    - seizure ack is needed            */
                                     /*    - no release guard                 */
                                     /*    0 = no: land line                  */
                                     /*    1 = yes: satellite                 */
    WORD    nodigitbehavior;         /*55, No Digit Behavior                  */
                                     /*    0 => pulse congestion              */
                                     /*    1 => go to Group II                */
    WORD    validDIDmask;            /* 56, 16 tones; 1=valid, 0=not          */
    WORD    validANImask;            /* 57, 16 tones; 1=valid, 0=not          */
    WORD    validcategorymask;       /* 58, 16 tones; 1=valid, 0=not          */
    WORD    noANIfollowmask;         /* 59, 16 tones; 1=valid, 0=not          */
    WORD    categorynoANImask;       /* 60, 16 tones; 1=catnoANI              */
    WORD    clearbackdelay;          /* 61, delay to send clearback           */
    WORD    reanswerdelay;           /* 62, delay to send reanswer            */
    WORD    alarmsonqualtime;        /* 63, qualification for alarm (on)      */
    WORD    alarmsoffqualtime;       /* 64, qualification for alarm (off)     */
}    NCC_ADI_EAM_PARMS;              
                                     
extern const CTAPARM_DESC * const _nccParmDescTable[];
                                     
                                     
#ifdef __cplusplus                   
}                                    
#endif                               
                                     
#endif                               

