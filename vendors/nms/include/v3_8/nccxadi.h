/* **********************************************************************
   *                                                                       *
   * Copyright (c) 1996 Natural MicroSystems Corp.  All rights reserved.   *
   * Generated by User Definable Parameter  ( Version 1.0 )                *
   * exported udpGenerateParameterSourceFiles() function.                  *
   *                                                                       *
   * ********************************************************************* */

#ifndef NCCXADIPARM_DEFINED          
#define NCCXADIPARM_DEFINED          
                                     
#include "ctadef.h"                  
                                     
#ifdef __cplusplus                   
extern "C"                           
{                                    
#endif                               
                                     
                                     
#define    NCC_SVCID    0x1C         
                                     
#define    NCC_ADI_START_PARMID    0x1C0102
                                     
typedef struct                       
{                                    
    DWORD    size;                   
    DWORD    mediamask;
    DWORD    debugmask;
    DWORD    protocoldebugmask;	
    struct                           
    {                                
        DWORD    size;               
        DWORD    method;             /* 0=DTMFs, 1=PULSEs during dialing      */
        DWORD    breaktime;          /* Duration of outgoing pulse digit      */
                                     /* ON-HOOK                               */
        DWORD    maketime;           /* Duration of outgoing pulse digit      */
                                     /* OFF-HOOK                              */
        DWORD    interpulse;         /* Interdigit delay between pulsed digits*/
        DWORD    flashtime;          /* Duration of the flash-hook            */
        DWORD    shortpause;         /* Delay duration of comma in dial string*/
        DWORD    longpause;          /* Delay duration of dot in dial string  */
        DWORD    dtmfampl1;          /* Amplitude of DTMF low frequencies     */
        DWORD    dtmfampl2;          /* Amplitude of DTMF high frequencies    */
        DWORD    dtmfontime;         /* Duration of DTMF on                   */
        DWORD    dtmfofftime;        /* Duration of DTMF off                  */
        DWORD    dialtonewait;       /* Max time to wait for dialtone (1 sec) */
        DWORD    tonefreq1;          /* dialtone frequency to detect          */
        DWORD    tonebandw1;         /* dialtone bandwidth                    */
        DWORD    tonefreq2;          /* dialtone 2nd frequency to detect      */
                                     /* (dualtones)                           */
        DWORD    tonebandw2;         /* dialtone 2nd bandwidth                */
        INT32    tonequalampl;       /* dialtone broadband qual level in dBm  */
        DWORD    tonequaltime;       /* dialtone qualification time in ms     */
        DWORD    tonereflevel;       /* -3.2dBm dialtone qual thresh, output  */
                                     /* of filter                             */
        DWORD    reserved;           /* Reserved (filter bandpass gain)       */
        DWORD    tonetotaltime;      /* total time interrupted dialtone must  */
                                     /* be present                            */
    }    dial;                       
    struct                           
    {                                
        DWORD    size;              
        DWORD    columnfour;         /* 1=detect DTMFs A,B,C,D; 0=don't       */
        INT32    onqualampl;         /* minimum input level to qualify tone   */
        DWORD    onthreshold;        /* -2dBm, talkoff versus cut-thru        */
                                     /* qualify level                         */
        DWORD    onqualtime;         /* qualify time of DTMF in ms            */
        DWORD    offqualampl;        /* minimum input level to maintain valid */
                                     /* DTMF                                  */
        DWORD    offthreshold;       /* -5dBm, hysteresis for talkoff versus  */
                                     /* cutthru                               */
        DWORD    offqualtime;        /* disqualify time for tone              */
    }    dtmfdet;                     
    

    struct
    {                              
        DWORD    size;               
        DWORD    mode;               /* 0=none;                               */
                                     /* 1=set len, adapttime by boardtype;    */
                                     /* 2=use parms                           */
        DWORD    filterlength;       /* Filter length(ms) (0=no cancelling)   */
        DWORD    adapttime;          /* Adapt time (ms) (0=no cancelling)     */
        INT32    gain;               /* Gain (db)                             */
        DWORD    predelay;           /* Predelay (ms) (0=none)                */
    }    echocancel;                 
    struct                           
    {                                
        DWORD    size;               
        DWORD    freq1;              /* frequency to detect                   */
        DWORD    bandw1;             /* bandwidth                             */
        DWORD    freq2;              /* 2nd frequency to detect (dualtones)   */
        DWORD    bandw2;             /* 2nd bandwidth                         */
        INT32    qualampl;           /* broadband qual level                  */
        DWORD    qualtime;           /* qualification time                    */
        DWORD    reflevel;           /* qual thresh for output of filter      */
        DWORD    reserved;           /* Reserved (filter bandpass gain)       */
        DWORD    tonecount;          /* of tones, or 0 for continuous tones   */
        DWORD    minontime;          /* shortest allowable tone               */
        DWORD    maxontime;          /* longest allowable tone                */
        DWORD    minofftime;         /* shortest silence between tones        */
        DWORD    maxofftime;         /* longest silence between tones         */
    }    cleardown;                  
}    NCC_ADI_START_PARMS;            
                                     
#define    NCC_ADI_PLACECALL_PARMID    0x1C0103
                                     
typedef struct                       
{                                    
    DWORD    size;                   
    DWORD    connectmask;            /* ADI_CON_ON_ANSWER                     */
    DWORD    disconnectmask;         /* ADI_DIS_ON_TIMEOUT                    */ 
    struct                           
    {                                
        DWORD    size;               
        DWORD    timeout;            /* If no tone or voice is detected,      */
                                     /* send NO_RESPONSE                      */
        DWORD    busycount;          /* Number of busy cycles until 'busy'    */
                                     /* and quit                              */
        DWORD    ringcount;          /* Number of rings cycles until          */
                                     /* 'no-answer' and quit                  */
        DWORD    maxreorder;         /* Time separating fast vs slow busy     */
        DWORD    maxbusy;            /* Time separating busy vs ring cycle    */
        DWORD    maxring;            /* Time separating ring vs dial tones    */
        DWORD    maxringperiod;      /* Maximum ring period before            */
                                     /* CP_RING_QUIT                          */
        DWORD    voicemedium;        /* Time after VOICE BEGIN until          */
                                     /* VOICE MEDIUM                          */
        DWORD    voicelong;          /* Time after VOICE BEGIN until          */
                                     /* VOICE LONG                            */
        DWORD    voicextended;       /* Time after VOICE BEGIN until          */
                                     /* VOICE EXTENDED                        */
        DWORD    silencetime;        /* Silence period after voice til        */
                                     /* VOICE END                             */
        DWORD    precqualtime;       /* Precise tone qualification time       */
        DWORD    precmask;           /* What precise detectors to run         */
        DWORD    stopmask;           /* No additional reasons to quit         */
                                     /* call-progress                         */
        INT32    silencelevel;       /* Ref level below which data is"silence"*/
        DWORD    voicetoneratio;     /* 9.5dB, Logarithmic offset for VOX/TONE*/
        DWORD    qualtonetime1;      /* Time 1 in ms to qualify TONE state    */
        DWORD    qualtonetime2;      /* Time 2 in ms to qualify TONE state    */
        DWORD    qualvoicetime1;     /* Time in ms to qualify VOICE 1 state   */
        DWORD    qualvoicetime2;     /* Time in ms to qualify VOICE 2 state   */
        DWORD    leakagetime;        /* Leaky integrator time constant        */
        DWORD    noiselevel;         /* Level window for QT2 state            */
    }    callprog;                   
}    NCC_ADI_PLACECALL_PARMS;        
                                     
extern const CTAPARM_DESC * const _nccParmDescTable[];
                                     
                                     
#ifdef __cplusplus                   
}                                    
#endif                               
                                     
#endif                               

