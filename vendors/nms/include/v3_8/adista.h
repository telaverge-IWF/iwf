/* **********************************************************************
*                                                                       *
* Copyright (c) 1996 Natural MicroSystems Corp.  All rights reserved.   *
* Generated by User Definable Parameter  ( Version 1.0 )                *
* exported udpGenerateParameterSourceFiles() function.                  *
*                                                                       *
* ********************************************************************* */
                                     
                                     
#ifndef ADISTAPARM_DEFINED           
#define ADISTAPARM_DEFINED           
                                     
#include "ctadef.h"                  
                                     
#ifdef __cplusplus                   
extern "C"                           
{                                    
#endif                               
                                     
                                     
#define    ADI_STA_PARMID    0x10013 
                                     
typedef struct                       
{                                    
    DWORD    size;                   
    WORD    waitforPCtime;           /* 0 max time to wait for the host to    */
                                     /*   decide if a call is accepted or     */
                                     /*   rejected                            */
    WORD    numdigits;               /* 1 expected number of digits           */
    WORD    wait1stdigittime;        /* 2 waiting until first digit comes     */
    WORD    waitfordigitstime;       /* 3 waiting until N-th digit comes      */
    WORD    signalingflags;          /* 4 signaling options                   */
                                     /*   from low to hi                      */
                                     /*   default tone if PC doesn't respond  */
                                     /*     0 = reorder (fast busy)           */
                                     /*     1 = ringing                       */
                                     /*     2 = busy                          */
                                     /*   behav. upon release from Connected  */
                                     /*     0 = do nothing                    */
                                     /*     1 = deny battery for loopdroptime */
                                     /*     2 = play dialtone                 */
                                     /*     3 = play busy                     */
                                     /*     4 = play reorder                  */
                                     /*   Behaviour for playing dt on inbound */
                                     /*     0 = don't play dialtone           */
                                     /*     1 = play dialtone                 */
                                     /*   Behaviour when blocking             */
                                     /*     0 = Play reorder when blocking    */
                                     /*     1 = Deny battery when blocking    */
    WORD    maxringseconds;          /* 5 the maximum time to wait for the    */
                                     /*   remote to answer, in seconds        */
    WORD    loopdroptime;            /* 6 drop loop current after release     */
    WORD    cidsupport;              /* 7 not implemented                     */
    WORD    qualaddron;              /* 8 qual dur. ON during addressing      */
    WORD    qualaddroff;             /* 9 qual dur. OFF during addressing     */
    WORD    qualdisconnect;          /*10 qual dur. of disconnect             */
    WORD    qualpermsignal;          /*11 qual dur. of permanent signal       */
    WORD    outring1ontime;          /*12 ontime for the 1st ring cycle       */
    WORD    outring1offtime;         /*13 offtime for the 1st ring cycle      */
    WORD    outring2ontime;          /*14 ontime for the 2nd ring cycle       */
    WORD    outring2offtime;         /*15 offtime for the 2nd ring cycle      */
    WORD    ringamp;                 /*16 ringback tone amplitude             */
    WORD    ringfreql;               /*17 first frequency of ringback tone    */
    WORD    ringfreqh;               /*18 2nd frequency of ringback tone      */
    WORD    ringontime;              /*19 ringback tone on time               */
    WORD    ringofftime;             /*20 ringback tone, off time             */
    WORD    busyamp;                 /*21 busy tone amplitude                 */
    WORD    busyfreql;               /*22 first frequency of busy tone        */
    WORD    busyfreqh;               /*23 2nd frequency of busy tone          */
    WORD    busyontime;              /*24 busy tone, on time                  */
    WORD    busyofftime;             /*25 busy tone, off time                 */
    WORD    reorderamp;              /*26 fast busy tone amplitude            */
    WORD    reorderfreql;            /*27 first frequency of fast busy tone   */
    WORD    reorderfreqh;            /*28 2nd frequency of fast busy tone     */
    WORD    reorderontime;           /*29 fast busy tone on time              */
    WORD    reorderofftime;          /*30 fast busy tone off time             */
    WORD    dialtoneamp;             /*31 dialtone amplitude                  */
    WORD    dialtonefreql;           /*32 First frequency of dialtone         */
    WORD    dialtonefreqh;           /*33 2nd frequency of dialtone           */
    WORD    dialtoneontime;          /*34 cadenced dialtone, first on time    */
    WORD    dialtoneofftime;         /*35 cadenced dialtone, first off time   */
    WORD    maxflashtime;            /*36 Maximum flash-hook duration         */
                                     /* Note the interaction with             */
                                     /* qualdisconnect, that in this case     */
                                     /* represents the MINIMUM time.          */
}    ADI_STA_PARMS;                  
                                     
extern const CTAPARM_DESC * const _adiParmDescTable[];
                                     
                                     
#ifdef __cplusplus                   
}                                    
#endif                               
                                     
#endif                               

