############################################################################
#                                                                          #
#     Copyright 1997 IntelliNet Technologies, Inc. All Rights Reserved.    #
#             Manufactured in the United States of America.                #
#       1990 W. New Haven Ste. 312, Melbourne, Florida, 32904 U.S.A.       #
#                                                                          #
#   This product and related documentation is protected by copyright and   #
#   distributed under licenses restricting its use, copying, distribution  #
#   and decompilation.  No part of this product or related documentation   #
#   may be reproduced in any form by any means without prior written       #
#   authorization of IntelliNet Technologies and its licensors, if any.    #
#                                                                          #
#   RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the      #
#   government is subject to restrictions as set forth in subparagraph     #
#   (c)(1)(ii) of the Rights in Technical Data and Computer Software       #
#   clause at DFARS 252.227-7013 and FAR 52.227-19.                        #
#                                                                          #
############################################################################
#                                                                          #
# CONTRACT: INTERNAL                                                       #
#                                                                          #
############################################################################
#
#  ID: $Id: config.vars,v 9.2.20.1.20.1.8.1.6.1.2.1 2020/04/20 08:45:50 jkchaitanya Exp $
#
# LOG: $Log: config.vars,v $
# LOG: Revision 9.2.20.1.20.1.8.1.6.1.2.1  2020/04/20 08:45:50  jkchaitanya
# LOG: tcmalloc optimization added for IWF performance
# LOG:
# LOG: Revision 9.2.20.1.20.1.8.1.6.1  2014/11/17 05:01:22  jkchaitanya
# LOG: changes for HA Bug Fixes
# LOG:
# LOG: Revision 9.2.20.1.20.1.8.1  2014/02/25 13:20:59  jkchaitanya
# LOG: updated to add NEED_LARGE_CONTEXT for linux platform
# LOG:
# LOG: Revision 9.2.20.1.20.1  2012/12/18 16:11:58  brajappa
# LOG: Initial IWF branch creation and linux compilation changes
# LOG:
# LOG: Revision 9.2.20.1  2009/03/03 08:53:59  ssodhi
# LOG: config.vars works for solaris PLATFORM now
# LOG:
# LOG: Revision 9.2  2007/02/13 06:20:42  yranade
# LOG: Cleanup.
# LOG:
# LOG: Revision 9.1  2005/03/23 12:54:25  cvsadmin
# LOG: Begin PR6.5
# LOG:
# LOG: Revision 8.4  2005/03/21 13:53:18  cvsadmin
# LOG: PR6.4.2 Source Propagated to Current
# LOG:
# LOG: Revision 7.4.2.2.30.3  2005/02/01 07:11:31  dsatish
# LOG: AOT & AOP changes for Linux.
# LOG:
# LOG: Revision 7.4.2.2.30.2  2005/02/01 07:07:34  dsatish
# LOG: AOT & AOP Changes.
# LOG:
# LOG: Revision 7.4.2.2.30.1  2005/01/04 13:57:03  mmanikandan
# LOG: DEBUG is defined if DEBUG_BUILD is yes.
# LOG:
# LOG: Revision 7.4.2.2  2003/07/04 06:13:37  gururaj
# LOG: Added USE_HEAP for all the vendors
# LOG:
# LOG: Revision 7.4.2.1  2003/07/04 06:05:39  gururaj
# LOG: Added flag USE_HEAP
# LOG:
# LOG: Revision 7.4  2002/11/26 02:40:16  pmandal
# LOG: add flags for linux build
# LOG:
# LOG: Revision 7.3  2002/11/26 02:37:07  pmandal
# LOG: add missing flags for linux build
# LOG:
# LOG: Revision 7.2  2002/10/28 20:00:08  mmiers
# LOG: Sanitize config.vars for 64 bit build
# LOG:
# LOG: Revision 7.1  2002/08/26 22:10:27  mmiers
# LOG: Begin PR6.2
# LOG:
# LOG: Revision 6.4  2002/07/11 15:27:27  dalonso
# LOG: Update Adax build
# LOG:
# LOG: Revision 6.3  2002/05/06 21:00:37  mmiers
# LOG: Bug fixing.
# LOG:
# LOG: Revision 6.2  2002/04/18 19:08:27  randresol
# LOG: Build for gcc
# LOG:
# LOG: Revision 6.1  2002/02/28 16:14:38  mmiers
# LOG: Begin PR7.
# LOG:
# LOG: Revision 5.2  2002/01/30 22:00:11  mmiers
# LOG: Update for ENGINE build.
# LOG:
# LOG: Revision 5.1  2001/08/16 20:46:26  mmiers
# LOG: Start PR6.
# LOG:
# LOG: Revision 4.1  2001/05/04 16:22:01  mmiers
# LOG: Start PR5.
# LOG:
# LOG: Revision 3.1  2000/08/16 00:09:21  mmiers
# LOG:
# LOG: Begin round 4.
# LOG:
# LOG: Revision 1.1  2000/06/14 19:30:58  labuser
# LOG: Temporarily add config.vars for sun and gnu compiler
# LOG:
# LOG: Revision 1.26  1999/10/06 17:05:27  mmiers
# LOG:
# LOG:
# LOG: Get our split stack configuration to build.
# LOG:
# LOG: Revision 1.25  1999/09/03 22:09:11  skarmakar
# LOG:
# LOG:
# LOG: Remove taso flag from vendor build.
# LOG:
# LOG: Revision 1.24  1999/08/30 14:00:04  mmiers
# LOG:
# LOG:
# LOG: BUilding DEC standalone requires you to turn trace off.
# LOG:
# LOG: Revision 1.23  1999/08/26 01:27:06  mmiers
# LOG:
# LOG:
# LOG: Update linux clause.
# LOG:
# LOG: Revision 1.22  1999/08/23 21:45:21  labuser
# LOG:
# LOG:
# LOG: Screwed up build still.
# LOG:
# LOG: Revision 1.21  1999/08/23 21:07:15  labuser
# LOG:
# LOG:
# LOG: Try not to trash the Brite build...
# LOG:
# LOG: Revision 1.20  1999/08/23 20:35:39  mmiers
# LOG:
# LOG:
# LOG: Try to sanitize the build process by adding stack for toplevel config.
# LOG:
# LOG: Revision 1.19  1999/08/03 16:20:37  mmiers
# LOG:
# LOG:
# LOG: Build with ITU TCAP over ANSI SCCP.
# LOG:
# LOG: Revision 1.18  1999/08/02 21:52:41  mmiers
# LOG:
# LOG:
# LOG: Add a build config for DECUNIX
# LOG:
# LOG: Revision 1.17  1999/04/26 22:21:10  skarmakar
# LOG:
# LOG:
# LOG: Update with EBS build.
# LOG:
# LOG: Revision 1.16  1999/02/26 04:10:21  mmiers
# LOG:
# LOG:
# LOG: Compile with CC.
# LOG:
# LOG: Revision 1.15  1999/02/17 02:29:55  mmiers
# LOG:
# LOG:
# LOG: Update for ITU TCAP.
# LOG:
# LOG: Revision 1.14  1998/11/18 00:46:42  jrao
# LOG: DBGSUFFIX is now properly used
# LOG:
# LOG: Revision 1.13  1998/11/18 00:35:10  jrao
# LOG: Changed Library Suffix (LIBSUFFIX) to Debug Suffix (DBGSUFFIX)
# LOG:
# LOG: Revision 1.12  1998/11/17 16:54:31  jrao
# LOG: Added facility to produce Release and Debug versions of the library.
# LOG:
# LOG: Revision 1.11  1998/10/23 17:23:41  jrao
# LOG: Make -Dstd part of CXXFLAGS only.
# LOG:
# LOG: Revision 1.10  1998/10/22 14:41:33  mmiers
# LOG: Add the ASN compiler flags.
# LOG:
# LOG: Revision 1.9  1998/10/15 01:45:02  mmiers
# LOG: Add -D_REENTRANT for alpha.  Add connRef to SCCP_CONN_CTXT.
# LOG:
# LOG: Revision 1.8  1998/10/02 14:49:32  mmiers
# LOG: Copied this from IntelliSS7
# LOG:
# LOG: Revision 1.21  1998/10/01 02:05:52  mmiers
# LOG: Add namespace definition to define list
# LOG:
# LOG: Revision 1.20  1998/10/01 01:58:47  mmiers
# LOG: Cleanup for HPUX.
# LOG:
# LOG: Revision 1.19  1998/10/01 01:53:04  mmiers
# LOG: Update for alpha.
# LOG:
# LOG: Revision 1.18  1998/10/01 01:30:23  mmiers
# LOG: Update config.vars for alpha
# LOG:
# LOG: Revision 1.17  1998/09/26 21:01:45  mmiers
# LOG: Adapt DBC to UNIX.
# LOG:
# LOG: Revision 1.16  1998/09/22 23:56:22  jrao
# LOG: Changes made to accomodate HPUX code
# LOG:
# LOG: Revision 1.15  1998/09/21 00:01:29  jrao
# LOG: Added the HPUX target
# LOG:
# LOG: Revision 1.14  1998/06/25 01:11:21  mmiers
# LOG: Add Linux target.
# LOG:
# LOG: Revision 1.13  1998/06/23 02:31:06  mmiers
# LOG: Update Solaris build environment.  Part of getting SCCP working.
# LOG:
# LOG: Revision 1.12  1998/05/27 02:18:10  mmiers
# LOG: Reimplement fifos for NT and Solaris.  Nobody should be affected by this
# LOG: change (from a user perspective), but ITS_Worker has a new transport type,
# LOG: depending on whether or not the FIFO transport is reentrant.
# LOG:
# LOG: Revision 1.11  1998/05/22 03:28:19  mmiers
# LOG: Small update to start creating automatic documentation generation.
# LOG:
# LOG: Revision 1.10  1998/05/21 19:38:44  mmiers
# LOG: Gee whiz.  Building on NT with a real make facility.  What a concept.
# LOG:
# LOG: Revision 1.9  1998/05/20 04:44:02  mmiers
# LOG: Cleanup.
# LOG: Hubert, some iterators need to be constant while others don't.  Please
# LOG: see me about this.
# LOG:
# LOG: Revision 1.8  1998/05/20 02:48:47  mmiers
# LOG: Update the config.vars to contain new macros for $(LEX),
# LOG: $(YACC).
# LOG:
# LOG: Revision 1.7  1998/04/24 02:00:38  mmiers
# LOG: Build on Digital UNIX.
# LOG:
# LOG: Revision 1.6  1998/04/24 01:41:28  mmiers
# LOG: General cleanup of the build system.  Need to verify on Digital Unix
# LOG: to make sure this is ok.
# LOG:
# LOG: Revision 1.5  1998/04/13 21:16:29  mmiers
# LOG: Resolving some cross-platform issues.
# LOG:
# LOG: Revision 1.4  1998/04/09 01:47:16  mmiers
# LOG: Some of these are false positives, but most have had modifications.  More
# LOG: work on the infrastructure.
# LOG:
# LOG: Revision 1.3  1998/04/07 14:33:45  mmiers
# LOG: Add C++ definitions
# LOG:
# LOG: Revision 1.2  1998/03/13 04:46:43  mmiers
# LOG: For the most part, TCAP modifications.  Quite a few of these files are false
# LOG: positive due to timestamps.
# LOG:
# LOG: Revision 1.1  1998/01/24 22:36:54  mmiers
# LOG: Tree cleanup.
# LOG:
# LOG: Revision 1.1.1.1  1997/11/04 20:13:16  mmiers
# LOG: Baseline
# LOG:
#
############################################################################

#
# An atypical customer (BRITE):
#
# Add the following to your environment:
#
# STACK=DECSS7; export STACK
# PROTOCOL=CCITT; export PROTOCOL
# SCCP_PROT=ANSI; export SCCP_PROT
# BUILD_TYPE=WITH_TOOLKIT; export BUILD_TYPE
# DEBUG_BUILD=yes; export DEBUG_BUILD
#

#
# whose version?
#
ifeq ($(PROTOCOL),)
PROTOCOL=ANSI
endif

ifeq ($(SCCP_PROT),)
SCCP_PROT=ANSI
endif

#
# the stack must be set in the environment.
# the platform must be set in the environment.  The structure of this file
# assumes a "make" that understands conditionals.  That may be only GNU
# make, but as we assume GNU C++ or compatible, that's ok.
#

#
# Build types (BUILD_TYPE):
#
# STANDALONE - indicates that the vendor lib will not operate in conjunction
# with the support library or the IntelliNet stack.
# INTEGRATED - indicates that the vendor lib will operate in conjunction
# with the support library and the IntelliNet stack.
# WITH_TOOLKIT - indicates that the vendor lib will operate in conjunction
# with the support library, but is the only stack present.
#
ifeq ($(BUILD_TYPE),)
BUILD_TYPE=STANDALONE
endif

#
# Available stacks
# One of DATAKINETICS, NEWNET, EXCEL, NMS, INTELLINET, or DECSS7
#

############################################################################
#
# for DataKinetics
#
############################################################################
ifeq ($(STACK),DATAKINETICS)

#
# for QNX
#
ifeq ($(PLATFORM),QNX)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        ld
CXX=
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDATAKIN -D$(PROTOCOL) -DPLATFORM=$(PLATFORM)
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -Oile=100 -g2 $(INCLS)
CXXFLAGS=  -Oile=100 -g2 $(INCLS)
DBGSUFFIX= D
else
CFLAGS=    -Oile=100 $(INCLS)
CXXFLAGS=  -Oile=100 $(INCLS)
DBGSUFFIX= 
endif
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      yacc
LEX=       lex
LEXLIB=    -ll
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
# for NT
#
ifeq ($(PLATFORM),NT)
AR=        echo
ARFLAGS=
CP=        cp
RM=        rm -f
CC=        cl.exe
CXX=       cl.exe
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        link.exe
MV=        copy
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DNMS -D$(PROTOCOL) -Dalloca=_alloca \
           -DWIN32 -D_DEBUG -D_CONSOLE -D_MBCS -DPLATFORM=$(PLATFORM) \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= 
endif
LDFLAGS=   -nologo -subsystem:console -incremental:yes \
           -debug -machine:I386 -pdbtype:sept 
SOCKLIBS=
THREADLIBS=
SYSLIBS=   kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib \
           advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib \
           odbc32.lib odbccp32.lib
OEXT=      obj
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # DataKinetics

############################################################################
#
# for NMS
#
############################################################################
ifeq ($(STACK),NMS)

ifeq ($(PLATFORM),NT)
AR=        echo
ARFLAGS=
CP=        cp
RM=        rm -f
CC=        cl.exe
CXX=       cl.exe
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        link.exe
MV=        copy
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DNMS -D$(PROTOCOL) -Dalloca=_alloca \
           -DWIN32 -D_DEBUG -D_CONSOLE -D_MBCS -DPLATFORM=$(PLATFORM) \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= 
endif
LDFLAGS=   -nologo -subsystem:console -incremental:yes \
           -debug -machine:I386 -pdbtype:sept 
SOCKLIBS=
THREADLIBS=
SYSLIBS=   kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib \
           advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib \
           odbc32.lib odbccp32.lib
OEXT=      obj
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
SHAREDAR=  /usr/ccs/bin/ld
SHAREDARFLAGS=-G -z allextract -o
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
            -DDEBUG \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DSOLARIS -DUNIX
#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),TTC)
DEFINES := $(DEFINES) -DUSE_TTC_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),PRC)
DEFINES := $(DEFINES) -DUSE_PRC_SCCP -DSPLIT_STACK
endif
endif

SOFLAGS=-fPIC
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -O -g $(INCLS) $(DEFINES) $(SOFLAGS)
CXXFLAGS=  -g $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES) $(SOFLAGS)
CXXFLAGS=  -O $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   -lrt
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # NMS

############################################################################
#
# for DECSS7
#
############################################################################
ifeq ($(STACK),DECSS7)

#
# for alpha (old version)
#
ifeq ($(PLATFORM),alpha)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        g++
MV=        mv
CXX=       g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDECSS7 -D$(PROTOCOL) -DPLATFORM=$(PLATFORM) -D$(PLATFORM) \
           -Dunix -D_REENTRANT -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -taso -std1 -O -g3 $(INCLS) $(DEFINES)
CXXFLAGS=  -g $(INCLS) $(DEFINES)
DBGSUFFIX= D
else
CFLAGS=    -taso -std1 -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(INCLS) $(DEFINES)
DBGSUFFIX= 
endif
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
# for Alpha (next generation build)
#
ifeq ($(PLATFORM),DECUNIX)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        cxx
MV=        mv
CXX=       cxx
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDECSS7 -D$(PROTOCOL) -DPLATFORM=$(PLATFORM) -D$(PLATFORM) \
           -Dunix -D_REENTRANT -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE \
		   -DDIG_UNIX

#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP
endif
endif

#
# Build type
#
ifeq ($(BUILD_TYPE),STANDALONE)
DEFINES := $(DEFINES) -DSTANDALONE_DEC -DDISABLE_TRACE
endif
ifeq ($(BUILD_TYPE),INTEGRATED)
DEFINES := $(DEFINES) -DWITH_TOOLKIT
endif
ifeq ($(BUILD_TYPE),WITH_TOOLKIT)
DEFINES := $(DEFINES) -DSTANDALONE_DEC -DWITH_TOOLKIT
endif

#
# debug flags
#
ifeq ($(DEBUG_BUILD),yes)
DEFINES := $(DEFINES) -DDEBUG
endif

#
# C and C++ flags
#
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -std1 -g3 $(INCLS) $(DEFINES)
CXXFLAGS=  -g $(INCLS) $(DEFINES)
DBGSUFFIX= D
else
CFLAGS=    -std1 -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(INCLS) $(DEFINES)
DBGSUFFIX= 
endif

SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # DECSS7

############################################################################
#
# for NEWNET
#
############################################################################
ifeq ($(STACK), NEWNET)

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -O -g $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  -g $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # NEWNET

############################################################################
#
# for EXCEL
#
############################################################################
ifeq ($(STACK), EXCEL)

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -O -g $(INCLS) $(DEFINES)
CXXFLAGS=  -g $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # EXCEL

############################################################################
#
# for INTELLINET
#
############################################################################
ifeq ($(STACK),INTELLINET)

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
SHAREDAR=  /usr/ccs/bin/ld
SHAREDARFLAGS=-G -z allextract -o
CP=        cp
RM=        rm -f
CC=        cc
CXX=       CC
LD=        CC 
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) -DNEED_LARGE_CONTEXT \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE 
SOFLAGS=   -KPIC
#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
endif

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g $(INCLS) $(DEFINES) $(SOFLAGS) -mt
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES) $(SOFLAGS) -mt
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   -lrt 
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif


#
# for Solaris-64
#
ifeq ($(PLATFORM),solaris64)
AR=        ar
ARFLAGS=   cruv
SHAREDAR=  ld
SHAREDARFLAGS=-E -melf64_sparc --whole-archive -shared -o
CP=        cp
RM=        rm -f
CC=        gcc -m64
CXX=       g++ -m64
LD=        g++ -m64
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
endif

SOFLAGS=-fPIC
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -O -g $(INCLS) $(DEFINES) $(SOFLAGS)
CXXFLAGS=  -g $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES) $(SOFLAGS)
CXXFLAGS=  -O $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   -lrt
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
# for Linux
#
ifeq ($(PLATFORM),linux)
AR=        ar
ARFLAGS=   cruv
SHAREDAR=  ld
SHAREDARFLAGS=-shared --whole-archive -o
NOWHOLEARCHIVE=-Wl,--no-whole-archive
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP \
           -DPLATFORM=$(PLATFORM) -DNEED_LARGE_CONTEXT -D_MIT_POSIX_THREADS \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
THREADLIBS=-lpthread -L $(EACC_ROOT)/3rdparty/lib/ -ltcmalloc -L $(EACC_ROOT)/3rdparty/lib/ -lunwind

#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),TTC)
DEFINES := $(DEFINES) -DUSE_TTC_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),PRC)
DEFINES := $(DEFINES) -DUSE_PRC_SCCP -DSPLIT_STACK
endif
endif

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g -Wall $(INCLS) $(DEFINES) -fPIC
CXXFLAGS=  -g -Wall $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -g -O -Wall $(INCLS) $(DEFINES) -fPIC
CXXFLAGS=  -g -O -Wall $(CFLAGS) 
DBGSUFFIX= 
endif
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
#
# for HPUX
#
ifeq ($(PLATFORM),hpux)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        CC
CXX=       /opt/aCC/bin/aCC
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        /opt/aCC/bin/aCC
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DRW_MULTI_THREAD -DUSING_FLEX \
           -DPLATFORM=$(PLATFORM) -DHPUX -D_MIT_POSIX_THREADS -Dunix

#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
endif

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    +DAportable -g $(INCLS) $(DEFINES)
CXXFLAGS=  +DAportable -g $(INCLS) $(DEFINES) -Dstd=''
DBGSUFFIX= D 
else
CFLAGS=    +DAportable -O $(INCLS) $(DEFINES)
CXXFLAGS=  +DAportable +O1 $(INCLS) $(DEFINES) -Dstd=''
DBGSUFFIX= 
endif
# CXX=       /opt/CC/bin/CC
# LD=        /opt/CC/bin/CC
# INCLS=     -I. -I$(ITS_ROOT)/common/include -I/opt/aCC/include -I/usr
# DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DRW_MULTI_THREAD -DUSING_FLEX \
#            -DPLATFORM=$(PLATFORM) -DHPUX -D_MIT_POSIX_THREADS
# CFLAGS=    +DAportable +eh -Ae -g $(INCLS) $(DEFINES)
# CXXFLAGS=  +DAportable +eh -g $(INCLS) $(DEFINES)
SOCKLIBS=
THREADLIBS= -ldce
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
LDFLAGS=
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

#
# for Alpha (next generation build)
#
ifeq ($(PLATFORM),DECUNIX)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        g++
MV=        mv
CXX=       g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDECSS7 -D$(PROTOCOL) -DPLATFORM=$(PLATFORM) -D$(PLATFORM) \
           -Dunix -D_REENTRANT -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE

#
# SCCP type
#
ifneq ($(SCCP_PROT),$(PROTOCOL))
ifeq ($(SCCP_PROT),ANSI)
DEFINES := $(DEFINES) -DUSE_ANSI_SCCP -DSPLIT_STACK
endif
ifeq ($(SCCP_PROT),CCITT)
DEFINES := $(DEFINES) -DUSE_ITU_SCCP -DSPLIT_STACK
endif
endif

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -taso -std1 -O -g3 $(INCLS) $(DEFINES)
CXXFLAGS=  -g $(INCLS) $(DEFINES)
DBGSUFFIX= D
else
CFLAGS=    -taso -std1 -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(INCLS) $(DEFINES)
DBGSUFFIX= 
endif
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # INTELLINET

############################################################################
#
# for ADAX
#
############################################################################
ifeq ($(STACK),ADAX)

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
SHAREDAR=  /usr/ccs/bin/ld
SHAREDARFLAGS=-G -z allextract -o
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES)
CXXFLAGS=  $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # ADAX

############################################################################
#
# for SBE
#
############################################################################
ifeq ($(STACK),SBE)

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)
AR=        ar
ARFLAGS=   cruv
CP=        cp
RM=        rm -f
CC=        gcc
CXX=       g++
LD=        g++
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -O -g $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  -g $(CFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -O $(INCLS) $(DEFINES)
CXXFLAGS=  -O $(CFLAGS)
DBGSUFFIX= 
endif
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread
SYSLIBS=   
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
endif

endif # SBE
