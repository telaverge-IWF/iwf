/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.lexer;

import java.io.*;
import java.util.*;
import com.intellinet.diameter.mag.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TBlockComment(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TLineComment(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TDocumentation(text, line, pos); }
    Token new4(String text, int line, int pos) { return new TStringLiteral(text, line, pos); }
    Token new5(int line, int pos) { return new TDefinedAs(line, pos); }
    Token new6(int line, int pos) { return new TLBrace(line, pos); }
    Token new7(int line, int pos) { return new TRBrace(line, pos); }
    Token new8(int line, int pos) { return new TLBracket(line, pos); }
    Token new9(int line, int pos) { return new TRBracket(line, pos); }
    Token new10(int line, int pos) { return new TLAngle(line, pos); }
    Token new11(int line, int pos) { return new TRAngle(line, pos); }
    Token new12(int line, int pos) { return new TLParen(line, pos); }
    Token new13(int line, int pos) { return new TRParen(line, pos); }
    Token new14(int line, int pos) { return new TColon(line, pos); }
    Token new15(int line, int pos) { return new TSemiColon(line, pos); }
    Token new16(int line, int pos) { return new TAsterisk(line, pos); }
    Token new17(int line, int pos) { return new TComma(line, pos); }
    Token new18(int line, int pos) { return new TPeriod(line, pos); }
    Token new19(int line, int pos) { return new TVbar(line, pos); }
    Token new20(int line, int pos) { return new TMandatoryFlag(line, pos); }
    Token new21(int line, int pos) { return new TPrivateFlag(line, pos); }
    Token new22(int line, int pos) { return new TVendorFlag(line, pos); }
    Token new23(int line, int pos) { return new TYes(line, pos); }
    Token new24(int line, int pos) { return new TNo(line, pos); }
    Token new25(int line, int pos) { return new TBase(line, pos); }
    Token new26(int line, int pos) { return new TProtocol(line, pos); }
    Token new27(int line, int pos) { return new TDictId(line, pos); }
    Token new28(int line, int pos) { return new TReq(line, pos); }
    Token new29(int line, int pos) { return new TPxy(line, pos); }
    Token new30(int line, int pos) { return new TErr(line, pos); }
    Token new31(int line, int pos) { return new TDiameter(line, pos); }
    Token new32(int line, int pos) { return new TAvp(line, pos); }
    Token new33(int line, int pos) { return new THeader(line, pos); }
    Token new34(int line, int pos) { return new TOctetString(line, pos); }
    Token new35(int line, int pos) { return new TInteger32(line, pos); }
    Token new36(int line, int pos) { return new TInteger64(line, pos); }
    Token new37(int line, int pos) { return new TUnsigned32(line, pos); }
    Token new38(int line, int pos) { return new TUnsigned64(line, pos); }
    Token new39(int line, int pos) { return new TFloat32(line, pos); }
    Token new40(int line, int pos) { return new TFloat64(line, pos); }
    Token new41(int line, int pos) { return new TGrouped(line, pos); }
    Token new42(int line, int pos) { return new TAddress(line, pos); }
    Token new43(int line, int pos) { return new TTime(line, pos); }
    Token new44(int line, int pos) { return new TUtf8String(line, pos); }
    Token new45(int line, int pos) { return new TDiameterId(line, pos); }
    Token new46(int line, int pos) { return new TDiameterUri(line, pos); }
    Token new47(int line, int pos) { return new TEnumerated(line, pos); }
    Token new48(int line, int pos) { return new TIpFilterRule(line, pos); }
    Token new49(int line, int pos) { return new TQosFilterRule(line, pos); }
    Token new50(String text, int line, int pos) { return new TInteger(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {40, 40, 7}, {41, 41, 8}, {42, 42, 9}, {43, 43, 10}, {44, 44, 11}, {45, 45, 12}, {46, 46, 13}, {47, 47, 14}, {48, 57, 15}, {58, 58, 16}, {59, 59, 17}, {60, 60, 18}, {62, 62, 19}, {64, 64, 20}, {65, 65, 21}, {66, 67, 22}, {68, 68, 23}, {69, 69, 24}, {70, 70, 25}, {71, 71, 26}, {72, 72, 27}, {73, 73, 28}, {74, 76, 22}, {77, 77, 29}, {78, 78, 30}, {79, 79, 31}, {80, 80, 32}, {81, 81, 33}, {82, 82, 34}, {83, 83, 22}, {84, 84, 35}, {85, 85, 36}, {86, 86, 37}, {87, 88, 22}, {89, 89, 38}, {90, 90, 22}, {91, 91, 39}, {93, 93, 40}, {97, 99, 41}, {100, 100, 42}, {101, 111, 41}, {112, 112, 43}, {113, 122, 41}, {123, 123, 44}, {124, 124, 45}, {125, 125, 46}, },
            {{9, 32, -2}, },
            {{9, 12, -2}, {13, 13, 47}, {32, 32, 5}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 48}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{0, 9, 49}, {11, 12, 49}, {14, 33, 49}, {34, 34, 50}, {35, 91, 49}, {92, 92, 51}, {93, 65535, 49}, },
            {},
            {},
            {},
            {{48, 57, 15}, },
            {},
            {{48, 57, 15}, },
            {},
            {{42, 42, 52}, {47, 47, 53}, },
            {{48, 57, 15}, },
            {{58, 58, 54}, },
            {},
            {},
            {},
            {},
            {{45, 45, 55}, {48, 57, 56}, {65, 85, 57}, {86, 86, 58}, {87, 90, 57}, {95, 95, 59}, {97, 99, 60}, {100, 100, 61}, {101, 122, 60}, },
            {{45, 57, -23}, {65, 90, 57}, {95, 95, 59}, {97, 122, 60}, },
            {{45, 95, -24}, {97, 104, 60}, {105, 105, 62}, {106, 122, 60}, },
            {{45, 57, -23}, {65, 81, 57}, {82, 82, 63}, {83, 90, 57}, {95, 95, 59}, {97, 109, 60}, {110, 110, 64}, {111, 122, 60}, },
            {{45, 95, -24}, {97, 107, 60}, {108, 108, 65}, {109, 122, 60}, },
            {{45, 95, -24}, {97, 113, 60}, {114, 114, 66}, {115, 122, 60}, },
            {{45, 95, -24}, {97, 100, 60}, {101, 101, 67}, {102, 122, 60}, },
            {{45, 57, -23}, {65, 79, 57}, {80, 80, 68}, {81, 90, 57}, {95, 109, -26}, {110, 110, 69}, {111, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 95, -24}, {97, 98, 60}, {99, 99, 70}, {100, 122, 60}, },
            {{45, 57, -23}, {65, 87, 57}, {88, 88, 71}, {89, 90, 57}, {95, 122, -24}, },
            {{45, 95, -24}, {97, 110, 60}, {111, 111, 72}, {112, 122, 60}, },
            {{45, 57, -23}, {65, 68, 57}, {69, 69, 73}, {70, 90, 57}, {95, 122, -24}, },
            {{45, 104, -25}, {105, 105, 74}, {106, 122, 60}, },
            {{45, 57, -23}, {65, 83, 57}, {84, 84, 75}, {85, 90, 57}, {95, 109, -26}, {110, 110, 76}, {111, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {},
            {},
            {{45, 122, -24}, },
            {{45, 104, -25}, {105, 105, 77}, {106, 122, 60}, },
            {{45, 113, -28}, {114, 114, 78}, {115, 122, 60}, },
            {},
            {},
            {},
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {},
            {{0, 65535, -8}, },
            {{0, 9, 79}, {10, 10, 80}, {11, 12, 79}, {13, 13, 81}, {14, 41, 79}, {42, 42, 82}, {43, 65535, 79}, },
            {{0, 9, 83}, {10, 10, 84}, {11, 12, 83}, {13, 13, 85}, {14, 65535, 83}, },
            {{61, 61, 86}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 79, -30}, {80, 80, 87}, {81, 95, -30}, {97, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 95, -24}, {97, 99, 60}, {100, 100, 88}, {101, 122, 60}, },
            {{45, 95, -24}, {97, 97, 89}, {98, 122, 60}, },
            {{45, 81, -26}, {82, 82, 90}, {83, 95, -26}, {97, 122, 60}, },
            {{45, 95, -24}, {97, 116, 60}, {117, 117, 91}, {118, 122, 60}, },
            {{45, 110, -35}, {111, 111, 92}, {112, 122, 60}, },
            {{45, 110, -35}, {111, 111, 93}, {112, 122, 60}, },
            {{45, 95, -24}, {97, 97, 94}, {98, 122, 60}, },
            {{45, 57, -23}, {65, 69, 57}, {70, 70, 95}, {71, 90, 57}, {95, 122, -24}, },
            {{45, 95, -24}, {97, 115, 60}, {116, 116, 96}, {117, 122, 60}, },
            {{45, 115, -71}, {116, 116, 97}, {117, 122, 60}, },
            {{45, 57, -23}, {65, 88, 57}, {89, 89, 98}, {90, 90, 57}, {95, 122, -24}, },
            {{45, 57, -23}, {65, 82, 57}, {83, 83, 99}, {84, 90, 57}, {95, 122, -24}, },
            {{45, 57, -23}, {65, 80, 57}, {81, 81, 100}, {82, 90, 57}, {95, 122, -24}, },
            {{45, 95, -24}, {97, 108, 60}, {109, 109, 101}, {110, 122, 60}, },
            {{45, 69, -70}, {70, 70, 102}, {71, 122, -70}, },
            {{45, 95, -24}, {97, 114, 60}, {115, 115, 103}, {116, 122, 60}, },
            {{45, 98, -33}, {99, 99, 104}, {100, 122, 60}, },
            {{45, 110, -35}, {111, 111, 105}, {112, 122, 60}, },
            {{0, 41, -54}, {42, 42, 106}, {43, 65535, 79}, },
            {{0, 12, -54}, {13, 13, 107}, {14, 65535, -81}, },
            {{0, 9, 79}, {10, 10, 108}, {11, 65535, -81}, },
            {{0, 9, 109}, {10, 10, 110}, {11, 12, 109}, {13, 13, 111}, {14, 41, 109}, {42, 42, 112}, {43, 46, 109}, {47, 47, 113}, {48, 65535, 109}, },
            {{0, 65535, -55}, },
            {{13, 13, 114}, },
            {{10, 10, 115}, },
            {},
            {{45, 122, -24}, },
            {{45, 113, -28}, {114, 114, 116}, {115, 122, 60}, },
            {{45, 108, -76}, {109, 109, 117}, {110, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 108, -76}, {109, 109, 118}, {110, 122, 60}, },
            {{45, 95, -24}, {97, 97, 119}, {98, 122, 60}, },
            {{45, 116, -66}, {117, 117, 120}, {118, 122, 60}, },
            {{45, 99, -63}, {100, 100, 121}, {101, 122, 60}, },
            {{45, 104, -25}, {105, 105, 122}, {106, 122, 60}, },
            {{45, 100, -29}, {101, 101, 123}, {102, 122, 60}, },
            {{45, 100, -29}, {101, 101, 124}, {102, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 69, -70}, {70, 70, 125}, {71, 122, -70}, },
            {{45, 122, -24}, },
            {{45, 100, -29}, {101, 101, 126}, {102, 122, 60}, },
            {{45, 45, 55}, {48, 55, 56}, {56, 56, 127}, {57, 57, 56}, {65, 122, -24}, },
            {{45, 104, -25}, {105, 105, 128}, {106, 122, 60}, },
            {{45, 115, -71}, {116, 116, 129}, {117, 122, 60}, },
            {{45, 115, -71}, {116, 116, 130}, {117, 122, 60}, },
            {{0, 9, 131}, {10, 10, 132}, {11, 12, 131}, {13, 13, 133}, {14, 41, 131}, {42, 42, 106}, {43, 46, 131}, {47, 47, 134}, {48, 65535, 131}, },
            {{0, 65535, -83}, },
            {{0, 65535, -82}, },
            {{0, 9, 135}, {10, 10, 136}, {11, 12, 135}, {13, 13, 137}, {14, 41, 135}, {42, 42, 138}, {43, 65535, 135}, },
            {{0, 12, -111}, {13, 13, 139}, {14, 65535, -111}, },
            {{0, 9, 135}, {10, 10, 140}, {11, 65535, -111}, },
            {{0, 65535, -84}, },
            {},
            {},
            {},
            {{45, 100, -29}, {101, 101, 141}, {102, 122, 60}, },
            {{45, 57, -23}, {65, 72, 57}, {73, 73, 142}, {74, 84, 57}, {85, 85, 143}, {86, 90, 57}, {95, 100, -29}, {101, 101, 144}, {102, 122, 60}, },
            {{45, 100, -29}, {101, 101, 145}, {102, 122, 60}, },
            {{45, 115, -71}, {116, 116, 146}, {117, 122, 60}, },
            {{45, 95, -24}, {97, 111, 60}, {112, 112, 147}, {113, 122, 60}, },
            {{45, 100, -29}, {101, 101, 148}, {102, 122, 60}, },
            {{45, 107, -27}, {108, 108, 149}, {109, 122, 60}, },
            {{45, 95, -24}, {97, 102, 60}, {103, 103, 150}, {104, 122, 60}, },
            {{45, 115, -71}, {116, 116, 151}, {117, 122, 60}, },
            {{45, 104, -25}, {105, 105, 152}, {106, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 82, -74}, {83, 83, 153}, {84, 122, -74}, },
            {{45, 102, -125}, {103, 103, 154}, {104, 122, 60}, },
            {{45, 45, 155}, {48, 122, -24}, },
            {{45, 110, -35}, {111, 111, 156}, {112, 122, 60}, },
            {{0, 9, 157}, {10, 10, 158}, {11, 12, 157}, {13, 13, 159}, {14, 41, 157}, {42, 42, 160}, {43, 65535, 157}, },
            {{0, 12, -133}, {13, 13, 161}, {14, 65535, -133}, },
            {{0, 9, 157}, {10, 10, 162}, {11, 65535, -133}, },
            {},
            {{0, 65535, -111}, },
            {{0, 12, -111}, {13, 13, 163}, {14, 65535, -111}, },
            {{0, 9, 135}, {10, 10, 164}, {11, 65535, -111}, },
            {{0, 41, -84}, {42, 42, 138}, {43, 65535, -84}, },
            {{0, 65535, -139}, },
            {{0, 65535, -138}, },
            {{45, 114, -78}, {115, 115, 165}, {116, 122, 60}, },
            {{45, 99, -63}, {100, 100, 166}, {101, 122, 60}, },
            {{45, 81, -26}, {82, 82, 167}, {83, 122, -65}, },
            {{45, 115, -71}, {116, 116, 168}, {117, 122, 60}, },
            {{45, 113, -28}, {114, 114, 169}, {115, 122, 60}, },
            {{45, 45, 55}, {48, 50, 56}, {51, 51, 170}, {52, 53, 56}, {54, 54, 171}, {55, 57, 56}, {65, 122, -24}, },
            {{45, 100, -29}, {101, 101, 172}, {102, 122, 60}, },
            {{45, 113, -28}, {114, 114, 173}, {115, 122, 60}, },
            {{45, 115, -71}, {116, 116, 174}, {117, 122, 60}, },
            {{45, 100, -29}, {101, 101, 175}, {102, 122, 60}, },
            {{45, 82, -74}, {83, 83, 176}, {84, 122, -74}, },
            {{45, 107, -27}, {108, 108, 177}, {109, 122, 60}, },
            {{45, 115, -71}, {116, 116, 178}, {117, 122, 60}, },
            {{45, 95, -24}, {97, 109, 60}, {110, 110, 179}, {111, 122, 60}, },
            {{45, 104, -25}, {105, 105, 180}, {106, 122, 60}, },
            {{45, 98, -33}, {99, 99, 181}, {100, 122, 60}, },
            {{0, 65535, -133}, },
            {{0, 12, -133}, {13, 13, 182}, {14, 65535, -133}, },
            {{0, 9, 157}, {10, 10, 183}, {11, 65535, -133}, },
            {{0, 41, -108}, {42, 42, 160}, {43, 65535, -108}, },
            {{0, 65535, -161}, },
            {{0, 65535, -160}, },
            {{0, 65535, -139}, },
            {{0, 65535, -138}, },
            {{45, 114, -78}, {115, 115, 184}, {116, 122, 60}, },
            {{45, 100, -29}, {101, 101, 185}, {102, 122, 60}, },
            {{45, 72, -119}, {73, 73, 186}, {74, 90, 57}, {95, 122, -24}, },
            {{45, 100, -29}, {101, 101, 187}, {102, 122, 60}, },
            {{45, 95, -24}, {97, 97, 188}, {98, 122, 60}, },
            {{45, 45, 55}, {48, 49, 56}, {50, 50, 189}, {51, 57, 56}, {65, 122, -24}, },
            {{45, 45, 55}, {48, 51, 56}, {52, 52, 190}, {53, 57, 56}, {65, 122, -24}, },
            {{45, 99, -63}, {100, 100, 191}, {101, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 100, -29}, {101, 101, 192}, {102, 122, 60}, },
            {{45, 113, -28}, {114, 114, 193}, {115, 122, 60}, },
            {{45, 115, -71}, {116, 116, 194}, {117, 122, 60}, },
            {{45, 115, -71}, {116, 116, 195}, {117, 122, 60}, },
            {{45, 113, -28}, {114, 114, 196}, {115, 122, 60}, },
            {{45, 100, -29}, {101, 101, 197}, {102, 122, 60}, },
            {{45, 99, -63}, {100, 100, 198}, {101, 122, 60}, },
            {{45, 110, -35}, {111, 111, 199}, {112, 122, 60}, },
            {{0, 65535, -161}, },
            {{0, 65535, -160}, },
            {{45, 122, -24}, },
            {{45, 109, -156}, {110, 110, 200}, {111, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 113, -28}, {114, 114, 201}, {115, 122, 60}, },
            {{45, 115, -71}, {116, 116, 202}, {117, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 113, -28}, {114, 114, 203}, {115, 122, 60}, },
            {{45, 50, -148}, {51, 51, 204}, {52, 53, 56}, {54, 54, 205}, {55, 122, -148}, },
            {{45, 113, -28}, {114, 114, 206}, {115, 122, 60}, },
            {{45, 100, -29}, {101, 101, 207}, {102, 122, 60}, },
            {{45, 104, -25}, {105, 105, 208}, {106, 122, 60}, },
            {{45, 99, -63}, {100, 100, 209}, {101, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 107, -27}, {108, 108, 210}, {109, 122, 60}, },
            {{45, 115, -71}, {116, 116, 211}, {117, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 100, -29}, {101, 101, 212}, {102, 122, 60}, },
            {{45, 81, -26}, {82, 82, 213}, {83, 122, -65}, },
            {{45, 49, -172}, {50, 50, 214}, {51, 122, -172}, },
            {{45, 51, -173}, {52, 52, 215}, {53, 122, -173}, },
            {{45, 104, -25}, {105, 105, 216}, {106, 122, 60}, },
            {{45, 113, -28}, {114, 114, 217}, {115, 122, 60}, },
            {{45, 109, -156}, {110, 110, 218}, {111, 122, 60}, },
            {{45, 50, -148}, {51, 51, 219}, {52, 53, 56}, {54, 54, 220}, {55, 122, -148}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 99, -63}, {100, 100, 221}, {101, 122, 60}, },
            {{45, 116, -66}, {117, 117, 222}, {118, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 109, -156}, {110, 110, 223}, {111, 122, 60}, },
            {{45, 81, -26}, {82, 82, 224}, {83, 122, -65}, },
            {{45, 102, -125}, {103, 103, 225}, {104, 122, 60}, },
            {{45, 49, -172}, {50, 50, 226}, {51, 122, -172}, },
            {{45, 51, -173}, {52, 52, 227}, {53, 122, -173}, },
            {{45, 122, -24}, },
            {{45, 107, -27}, {108, 108, 228}, {109, 122, 60}, },
            {{45, 102, -125}, {103, 103, 229}, {104, 122, 60}, },
            {{45, 116, -66}, {117, 117, 230}, {118, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 122, -24}, },
            {{45, 100, -29}, {101, 101, 231}, {102, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 107, -27}, {108, 108, 232}, {109, 122, 60}, },
            {{45, 122, -24}, },
            {{45, 100, -29}, {101, 101, 233}, {102, 122, 60}, },
            {{45, 122, -24}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {0, 0, 0, 0, 0, 0, -1, 12, 13, 16, -1, 17, -1, 18, -1, 50, 14, 15, 10, 11, 25, 51, 51, 51, 51, 51, 51, 51, 51, 20, 24, 51, 21, 51, 51, 51, 51, 22, 23, 8, 9, 51, 51, 51, 6, 19, 7, 0, 0, -1, 4, -1, -1, 2, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, -1, -1, 2, 2, 2, 5, 32, 51, 51, 30, 51, 51, 51, 51, 51, 51, 51, 29, 51, 28, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, 3, 2, 2, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 43, 51, 51, 51, 51, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, 51, 51, 51, 51, 51, 51, 51, 51, 33, 51, 51, 51, 51, 51, 51, 51, 51, -1, -1, 42, 51, 46, 51, 51, 39, 40, 41, 51, 51, 51, 51, 51, 51, 27, 51, 51, 31, 51, 51, 51, 51, 51, 51, 51, 51, 26, 45, 51, 51, 35, 36, 51, 51, 51, 51, 51, 47, 51, 51, 51, 44, 37, 38, 51, 34, 51, 48, 51, 49, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
