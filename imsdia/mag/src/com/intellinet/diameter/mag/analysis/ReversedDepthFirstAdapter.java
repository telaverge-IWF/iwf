/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.analysis;

import com.intellinet.diameter.mag.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGrammar().apply(this);
        outStart(node);
    }

    public void inAGrammar(AGrammar node)
    {
        defaultIn(node);
    }

    public void outAGrammar(AGrammar node)
    {
        defaultOut(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        inAGrammar(node);
        {
            Object temp[] = node.getDefinition().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PDefinition) temp[i]).apply(this);
            }
        }
        if(node.getDictId() != null)
        {
            node.getDictId().apply(this);
        }
        if(node.getUrl() != null)
        {
            node.getUrl().apply(this);
        }
        if(node.getVendorId() != null)
        {
            node.getVendorId().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getNamespace().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).apply(this);
            }
        }
        if(node.getBase() != null)
        {
            node.getBase().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outAGrammar(node);
    }

    public void inADerivedDefinition(ADerivedDefinition node)
    {
        defaultIn(node);
    }

    public void outADerivedDefinition(ADerivedDefinition node)
    {
        defaultOut(node);
    }

    public void caseADerivedDefinition(ADerivedDefinition node)
    {
        inADerivedDefinition(node);
        if(node.getAvpFlagRules() != null)
        {
            node.getAvpFlagRules().apply(this);
        }
        if(node.getAvpType() != null)
        {
            node.getAvpType().apply(this);
        }
        if(node.getVendorId() != null)
        {
            node.getVendorId().apply(this);
        }
        if(node.getAvpCode() != null)
        {
            node.getAvpCode().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outADerivedDefinition(node);
    }

    public void inAEnumDefinition(AEnumDefinition node)
    {
        defaultIn(node);
    }

    public void outAEnumDefinition(AEnumDefinition node)
    {
        defaultOut(node);
    }

    public void caseAEnumDefinition(AEnumDefinition node)
    {
        inAEnumDefinition(node);
        {
            Object temp[] = node.getEnumerator().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PEnumerator) temp[i]).apply(this);
            }
        }
        if(node.getAvpCode() != null)
        {
            node.getAvpCode().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outAEnumDefinition(node);
    }

    public void inAGroupedDefinition(AGroupedDefinition node)
    {
        defaultIn(node);
    }

    public void outAGroupedDefinition(AGroupedDefinition node)
    {
        defaultOut(node);
    }

    public void caseAGroupedDefinition(AGroupedDefinition node)
    {
        inAGroupedDefinition(node);
        if(node.getGroupedBody() != null)
        {
            node.getGroupedBody().apply(this);
        }
        if(node.getGroupedHeader() != null)
        {
            node.getGroupedHeader().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outAGroupedDefinition(node);
    }

    public void inACommandDefinition(ACommandDefinition node)
    {
        defaultIn(node);
    }

    public void outACommandDefinition(ACommandDefinition node)
    {
        defaultOut(node);
    }

    public void caseACommandDefinition(ACommandDefinition node)
    {
        inACommandDefinition(node);
        if(node.getCommandBody() != null)
        {
            node.getCommandBody().apply(this);
        }
        if(node.getCommandHeader() != null)
        {
            node.getCommandHeader().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outACommandDefinition(node);
    }

    public void inAOctetStringAvpType(AOctetStringAvpType node)
    {
        defaultIn(node);
    }

    public void outAOctetStringAvpType(AOctetStringAvpType node)
    {
        defaultOut(node);
    }

    public void caseAOctetStringAvpType(AOctetStringAvpType node)
    {
        inAOctetStringAvpType(node);
        outAOctetStringAvpType(node);
    }

    public void inAInteger32AvpType(AInteger32AvpType node)
    {
        defaultIn(node);
    }

    public void outAInteger32AvpType(AInteger32AvpType node)
    {
        defaultOut(node);
    }

    public void caseAInteger32AvpType(AInteger32AvpType node)
    {
        inAInteger32AvpType(node);
        outAInteger32AvpType(node);
    }

    public void inAInteger64AvpType(AInteger64AvpType node)
    {
        defaultIn(node);
    }

    public void outAInteger64AvpType(AInteger64AvpType node)
    {
        defaultOut(node);
    }

    public void caseAInteger64AvpType(AInteger64AvpType node)
    {
        inAInteger64AvpType(node);
        outAInteger64AvpType(node);
    }

    public void inAUnsigned32AvpType(AUnsigned32AvpType node)
    {
        defaultIn(node);
    }

    public void outAUnsigned32AvpType(AUnsigned32AvpType node)
    {
        defaultOut(node);
    }

    public void caseAUnsigned32AvpType(AUnsigned32AvpType node)
    {
        inAUnsigned32AvpType(node);
        outAUnsigned32AvpType(node);
    }

    public void inAUnsigned64AvpType(AUnsigned64AvpType node)
    {
        defaultIn(node);
    }

    public void outAUnsigned64AvpType(AUnsigned64AvpType node)
    {
        defaultOut(node);
    }

    public void caseAUnsigned64AvpType(AUnsigned64AvpType node)
    {
        inAUnsigned64AvpType(node);
        outAUnsigned64AvpType(node);
    }

    public void inAFloat32AvpType(AFloat32AvpType node)
    {
        defaultIn(node);
    }

    public void outAFloat32AvpType(AFloat32AvpType node)
    {
        defaultOut(node);
    }

    public void caseAFloat32AvpType(AFloat32AvpType node)
    {
        inAFloat32AvpType(node);
        outAFloat32AvpType(node);
    }

    public void inAFloat64AvpType(AFloat64AvpType node)
    {
        defaultIn(node);
    }

    public void outAFloat64AvpType(AFloat64AvpType node)
    {
        defaultOut(node);
    }

    public void caseAFloat64AvpType(AFloat64AvpType node)
    {
        inAFloat64AvpType(node);
        outAFloat64AvpType(node);
    }

    public void inAGroupedAvpType(AGroupedAvpType node)
    {
        defaultIn(node);
    }

    public void outAGroupedAvpType(AGroupedAvpType node)
    {
        defaultOut(node);
    }

    public void caseAGroupedAvpType(AGroupedAvpType node)
    {
        inAGroupedAvpType(node);
        outAGroupedAvpType(node);
    }

    public void inAAddressAvpType(AAddressAvpType node)
    {
        defaultIn(node);
    }

    public void outAAddressAvpType(AAddressAvpType node)
    {
        defaultOut(node);
    }

    public void caseAAddressAvpType(AAddressAvpType node)
    {
        inAAddressAvpType(node);
        outAAddressAvpType(node);
    }

    public void inATimeAvpType(ATimeAvpType node)
    {
        defaultIn(node);
    }

    public void outATimeAvpType(ATimeAvpType node)
    {
        defaultOut(node);
    }

    public void caseATimeAvpType(ATimeAvpType node)
    {
        inATimeAvpType(node);
        outATimeAvpType(node);
    }

    public void inAUtf8StringAvpType(AUtf8StringAvpType node)
    {
        defaultIn(node);
    }

    public void outAUtf8StringAvpType(AUtf8StringAvpType node)
    {
        defaultOut(node);
    }

    public void caseAUtf8StringAvpType(AUtf8StringAvpType node)
    {
        inAUtf8StringAvpType(node);
        outAUtf8StringAvpType(node);
    }

    public void inADiameterIdAvpType(ADiameterIdAvpType node)
    {
        defaultIn(node);
    }

    public void outADiameterIdAvpType(ADiameterIdAvpType node)
    {
        defaultOut(node);
    }

    public void caseADiameterIdAvpType(ADiameterIdAvpType node)
    {
        inADiameterIdAvpType(node);
        outADiameterIdAvpType(node);
    }

    public void inADiameterUriAvpType(ADiameterUriAvpType node)
    {
        defaultIn(node);
    }

    public void outADiameterUriAvpType(ADiameterUriAvpType node)
    {
        defaultOut(node);
    }

    public void caseADiameterUriAvpType(ADiameterUriAvpType node)
    {
        inADiameterUriAvpType(node);
        outADiameterUriAvpType(node);
    }

    public void inAEnumeratedAvpType(AEnumeratedAvpType node)
    {
        defaultIn(node);
    }

    public void outAEnumeratedAvpType(AEnumeratedAvpType node)
    {
        defaultOut(node);
    }

    public void caseAEnumeratedAvpType(AEnumeratedAvpType node)
    {
        inAEnumeratedAvpType(node);
        outAEnumeratedAvpType(node);
    }

    public void inAIpFilterRuleAvpType(AIpFilterRuleAvpType node)
    {
        defaultIn(node);
    }

    public void outAIpFilterRuleAvpType(AIpFilterRuleAvpType node)
    {
        defaultOut(node);
    }

    public void caseAIpFilterRuleAvpType(AIpFilterRuleAvpType node)
    {
        inAIpFilterRuleAvpType(node);
        outAIpFilterRuleAvpType(node);
    }

    public void inAQosFilterRuleAvpType(AQosFilterRuleAvpType node)
    {
        defaultIn(node);
    }

    public void outAQosFilterRuleAvpType(AQosFilterRuleAvpType node)
    {
        defaultOut(node);
    }

    public void caseAQosFilterRuleAvpType(AQosFilterRuleAvpType node)
    {
        inAQosFilterRuleAvpType(node);
        outAQosFilterRuleAvpType(node);
    }

    public void inAEnumerator(AEnumerator node)
    {
        defaultIn(node);
    }

    public void outAEnumerator(AEnumerator node)
    {
        defaultOut(node);
    }

    public void caseAEnumerator(AEnumerator node)
    {
        inAEnumerator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getDocumentation() != null)
        {
            node.getDocumentation().apply(this);
        }
        outAEnumerator(node);
    }

    public void inAAvpFlagRules(AAvpFlagRules node)
    {
        defaultIn(node);
    }

    public void outAAvpFlagRules(AAvpFlagRules node)
    {
        defaultOut(node);
    }

    public void caseAAvpFlagRules(AAvpFlagRules node)
    {
        inAAvpFlagRules(node);
        if(node.getEncryptable() != null)
        {
            node.getEncryptable().apply(this);
        }
        {
            Object temp[] = node.getMustnt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAvpFlag) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getShouldnt().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAvpFlag) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getMay().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAvpFlag) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getMust().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAvpFlag) temp[i]).apply(this);
            }
        }
        outAAvpFlagRules(node);
    }

    public void inAMandatoryAvpFlag(AMandatoryAvpFlag node)
    {
        defaultIn(node);
    }

    public void outAMandatoryAvpFlag(AMandatoryAvpFlag node)
    {
        defaultOut(node);
    }

    public void caseAMandatoryAvpFlag(AMandatoryAvpFlag node)
    {
        inAMandatoryAvpFlag(node);
        outAMandatoryAvpFlag(node);
    }

    public void inAPrivateAvpFlag(APrivateAvpFlag node)
    {
        defaultIn(node);
    }

    public void outAPrivateAvpFlag(APrivateAvpFlag node)
    {
        defaultOut(node);
    }

    public void caseAPrivateAvpFlag(APrivateAvpFlag node)
    {
        inAPrivateAvpFlag(node);
        outAPrivateAvpFlag(node);
    }

    public void inAVendorAvpFlag(AVendorAvpFlag node)
    {
        defaultIn(node);
    }

    public void outAVendorAvpFlag(AVendorAvpFlag node)
    {
        defaultOut(node);
    }

    public void caseAVendorAvpFlag(AVendorAvpFlag node)
    {
        inAVendorAvpFlag(node);
        outAVendorAvpFlag(node);
    }

    public void inAYesEncryptable(AYesEncryptable node)
    {
        defaultIn(node);
    }

    public void outAYesEncryptable(AYesEncryptable node)
    {
        defaultOut(node);
    }

    public void caseAYesEncryptable(AYesEncryptable node)
    {
        inAYesEncryptable(node);
        outAYesEncryptable(node);
    }

    public void inANotEncryptable(ANotEncryptable node)
    {
        defaultIn(node);
    }

    public void outANotEncryptable(ANotEncryptable node)
    {
        defaultOut(node);
    }

    public void caseANotEncryptable(ANotEncryptable node)
    {
        inANotEncryptable(node);
        outANotEncryptable(node);
    }

    public void inAGroupedHeader(AGroupedHeader node)
    {
        defaultIn(node);
    }

    public void outAGroupedHeader(AGroupedHeader node)
    {
        defaultOut(node);
    }

    public void caseAGroupedHeader(AGroupedHeader node)
    {
        inAGroupedHeader(node);
        if(node.getVendorId() != null)
        {
            node.getVendorId().apply(this);
        }
        if(node.getAvpCode() != null)
        {
            node.getAvpCode().apply(this);
        }
        outAGroupedHeader(node);
    }

    public void inAGroupedBody(AGroupedBody node)
    {
        defaultIn(node);
    }

    public void outAGroupedBody(AGroupedBody node)
    {
        defaultOut(node);
    }

    public void caseAGroupedBody(AGroupedBody node)
    {
        inAGroupedBody(node);
        {
            Object temp[] = node.getOptional().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PGeneralAvpRef) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getRequired().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PGeneralAvpRef) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getFixed().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNamedAvpRef) temp[i]).apply(this);
            }
        }
        outAGroupedBody(node);
    }

    public void inACommandHeader(ACommandHeader node)
    {
        defaultIn(node);
    }

    public void outACommandHeader(ACommandHeader node)
    {
        defaultOut(node);
    }

    public void caseACommandHeader(ACommandHeader node)
    {
        inACommandHeader(node);
        if(node.getApplicationId() != null)
        {
            node.getApplicationId().apply(this);
        }
        if(node.getErr() != null)
        {
            node.getErr().apply(this);
        }
        if(node.getPxy() != null)
        {
            node.getPxy().apply(this);
        }
        if(node.getReq() != null)
        {
            node.getReq().apply(this);
        }
        if(node.getCommandId() != null)
        {
            node.getCommandId().apply(this);
        }
        outACommandHeader(node);
    }

    public void inACommandBody(ACommandBody node)
    {
        defaultIn(node);
    }

    public void outACommandBody(ACommandBody node)
    {
        defaultOut(node);
    }

    public void caseACommandBody(ACommandBody node)
    {
        inACommandBody(node);
        {
            Object temp[] = node.getOptional().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PGeneralAvpRef) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getRequired().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNamedAvpRef) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getFixed().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PNamedAvpRef) temp[i]).apply(this);
            }
        }
        outACommandBody(node);
    }

    public void inANamedAvpRef(ANamedAvpRef node)
    {
        defaultIn(node);
    }

    public void outANamedAvpRef(ANamedAvpRef node)
    {
        defaultOut(node);
    }

    public void caseANamedAvpRef(ANamedAvpRef node)
    {
        inANamedAvpRef(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getQualifier() != null)
        {
            node.getQualifier().apply(this);
        }
        outANamedAvpRef(node);
    }

    public void inAGeneralAvpRef(AGeneralAvpRef node)
    {
        defaultIn(node);
    }

    public void outAGeneralAvpRef(AGeneralAvpRef node)
    {
        defaultOut(node);
    }

    public void caseAGeneralAvpRef(AGeneralAvpRef node)
    {
        inAGeneralAvpRef(node);
        if(node.getAvpSpec() != null)
        {
            node.getAvpSpec().apply(this);
        }
        if(node.getQualifier() != null)
        {
            node.getQualifier().apply(this);
        }
        outAGeneralAvpRef(node);
    }

    public void inAQualifier(AQualifier node)
    {
        defaultIn(node);
    }

    public void outAQualifier(AQualifier node)
    {
        defaultOut(node);
    }

    public void caseAQualifier(AQualifier node)
    {
        inAQualifier(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outAQualifier(node);
    }

    public void inANamedAvpSpec(ANamedAvpSpec node)
    {
        defaultIn(node);
    }

    public void outANamedAvpSpec(ANamedAvpSpec node)
    {
        defaultOut(node);
    }

    public void caseANamedAvpSpec(ANamedAvpSpec node)
    {
        inANamedAvpSpec(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamedAvpSpec(node);
    }

    public void inAAnyAvpSpec(AAnyAvpSpec node)
    {
        defaultIn(node);
    }

    public void outAAnyAvpSpec(AAnyAvpSpec node)
    {
        defaultOut(node);
    }

    public void caseAAnyAvpSpec(AAnyAvpSpec node)
    {
        inAAnyAvpSpec(node);
        outAAnyAvpSpec(node);
    }
}
