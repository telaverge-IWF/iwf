/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.analysis;

import com.intellinet.diameter.mag.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGrammar(AGrammar node);
    void caseADerivedDefinition(ADerivedDefinition node);
    void caseAEnumDefinition(AEnumDefinition node);
    void caseAGroupedDefinition(AGroupedDefinition node);
    void caseACommandDefinition(ACommandDefinition node);
    void caseAOctetStringAvpType(AOctetStringAvpType node);
    void caseAInteger32AvpType(AInteger32AvpType node);
    void caseAInteger64AvpType(AInteger64AvpType node);
    void caseAUnsigned32AvpType(AUnsigned32AvpType node);
    void caseAUnsigned64AvpType(AUnsigned64AvpType node);
    void caseAFloat32AvpType(AFloat32AvpType node);
    void caseAFloat64AvpType(AFloat64AvpType node);
    void caseAGroupedAvpType(AGroupedAvpType node);
    void caseAAddressAvpType(AAddressAvpType node);
    void caseATimeAvpType(ATimeAvpType node);
    void caseAUtf8StringAvpType(AUtf8StringAvpType node);
    void caseADiameterIdAvpType(ADiameterIdAvpType node);
    void caseADiameterUriAvpType(ADiameterUriAvpType node);
    void caseAEnumeratedAvpType(AEnumeratedAvpType node);
    void caseAIpFilterRuleAvpType(AIpFilterRuleAvpType node);
    void caseAQosFilterRuleAvpType(AQosFilterRuleAvpType node);
    void caseAEnumerator(AEnumerator node);
    void caseAAvpFlagRules(AAvpFlagRules node);
    void caseAMandatoryAvpFlag(AMandatoryAvpFlag node);
    void caseAPrivateAvpFlag(APrivateAvpFlag node);
    void caseAVendorAvpFlag(AVendorAvpFlag node);
    void caseAYesEncryptable(AYesEncryptable node);
    void caseANotEncryptable(ANotEncryptable node);
    void caseAGroupedHeader(AGroupedHeader node);
    void caseAGroupedBody(AGroupedBody node);
    void caseACommandHeader(ACommandHeader node);
    void caseACommandBody(ACommandBody node);
    void caseANamedAvpRef(ANamedAvpRef node);
    void caseAGeneralAvpRef(AGeneralAvpRef node);
    void caseAQualifier(AQualifier node);
    void caseANamedAvpSpec(ANamedAvpSpec node);
    void caseAAnyAvpSpec(AAnyAvpSpec node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTBlockComment(TBlockComment node);
    void caseTLineComment(TLineComment node);
    void caseTDocumentation(TDocumentation node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTDefinedAs(TDefinedAs node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLAngle(TLAngle node);
    void caseTRAngle(TRAngle node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTColon(TColon node);
    void caseTSemiColon(TSemiColon node);
    void caseTAsterisk(TAsterisk node);
    void caseTComma(TComma node);
    void caseTPeriod(TPeriod node);
    void caseTVbar(TVbar node);
    void caseTMandatoryFlag(TMandatoryFlag node);
    void caseTPrivateFlag(TPrivateFlag node);
    void caseTVendorFlag(TVendorFlag node);
    void caseTYes(TYes node);
    void caseTNo(TNo node);
    void caseTBase(TBase node);
    void caseTProtocol(TProtocol node);
    void caseTDictId(TDictId node);
    void caseTReq(TReq node);
    void caseTPxy(TPxy node);
    void caseTErr(TErr node);
    void caseTDiameter(TDiameter node);
    void caseTAvp(TAvp node);
    void caseTHeader(THeader node);
    void caseTOctetString(TOctetString node);
    void caseTInteger32(TInteger32 node);
    void caseTInteger64(TInteger64 node);
    void caseTUnsigned32(TUnsigned32 node);
    void caseTUnsigned64(TUnsigned64 node);
    void caseTFloat32(TFloat32 node);
    void caseTFloat64(TFloat64 node);
    void caseTGrouped(TGrouped node);
    void caseTAddress(TAddress node);
    void caseTTime(TTime node);
    void caseTUtf8String(TUtf8String node);
    void caseTDiameterId(TDiameterId node);
    void caseTDiameterUri(TDiameterUri node);
    void caseTEnumerated(TEnumerated node);
    void caseTIpFilterRule(TIpFilterRule node);
    void caseTQosFilterRule(TQosFilterRule node);
    void caseTInteger(TInteger node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
