/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.node;

import java.util.*;
import com.intellinet.diameter.mag.analysis.*;

public final class ANamedAvpRef extends PNamedAvpRef
{
    private PQualifier _qualifier_;
    private TIdentifier _name_;

    public ANamedAvpRef()
    {
    }

    public ANamedAvpRef(
        PQualifier _qualifier_,
        TIdentifier _name_)
    {
        setQualifier(_qualifier_);

        setName(_name_);

    }
    public Object clone()
    {
        return new ANamedAvpRef(
            (PQualifier) cloneNode(_qualifier_),
            (TIdentifier) cloneNode(_name_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANamedAvpRef(this);
    }

    public PQualifier getQualifier()
    {
        return _qualifier_;
    }

    public void setQualifier(PQualifier node)
    {
        if(_qualifier_ != null)
        {
            _qualifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _qualifier_ = node;
    }

    public TIdentifier getName()
    {
        return _name_;
    }

    public void setName(TIdentifier node)
    {
        if(_name_ != null)
        {
            _name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _name_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_qualifier_)
            + toString(_name_);
    }

    void removeChild(Node child)
    {
        if(_qualifier_ == child)
        {
            _qualifier_ = null;
            return;
        }

        if(_name_ == child)
        {
            _name_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_qualifier_ == oldChild)
        {
            setQualifier((PQualifier) newChild);
            return;
        }

        if(_name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

    }
}
