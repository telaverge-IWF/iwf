/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.node;

import java.util.*;
import com.intellinet.diameter.mag.analysis.*;

public final class AGrammar extends PGrammar
{
    private TDocumentation _documentation_;
    private TBase _base_;
    private final LinkedList _namespace_ = new TypedLinkedList(new Namespace_Cast());
    private TInteger _id_;
    private TInteger _vendorId_;
    private TStringLiteral _url_;
    private TInteger _dictId_;
    private final LinkedList _definition_ = new TypedLinkedList(new Definition_Cast());

    public AGrammar()
    {
    }

    public AGrammar(
        TDocumentation _documentation_,
        TBase _base_,
        List _namespace_,
        TInteger _id_,
        TInteger _vendorId_,
        TStringLiteral _url_,
        TInteger _dictId_,
        List _definition_)
    {
        setDocumentation(_documentation_);

        setBase(_base_);

        {
            this._namespace_.clear();
            this._namespace_.addAll(_namespace_);
        }

        setId(_id_);

        setVendorId(_vendorId_);

        setUrl(_url_);

        setDictId(_dictId_);

        {
            this._definition_.clear();
            this._definition_.addAll(_definition_);
        }

    }
    public Object clone()
    {
        return new AGrammar(
            (TDocumentation) cloneNode(_documentation_),
            (TBase) cloneNode(_base_),
            cloneList(_namespace_),
            (TInteger) cloneNode(_id_),
            (TInteger) cloneNode(_vendorId_),
            (TStringLiteral) cloneNode(_url_),
            (TInteger) cloneNode(_dictId_),
            cloneList(_definition_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGrammar(this);
    }

    public TDocumentation getDocumentation()
    {
        return _documentation_;
    }

    public void setDocumentation(TDocumentation node)
    {
        if(_documentation_ != null)
        {
            _documentation_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _documentation_ = node;
    }

    public TBase getBase()
    {
        return _base_;
    }

    public void setBase(TBase node)
    {
        if(_base_ != null)
        {
            _base_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _base_ = node;
    }

    public LinkedList getNamespace()
    {
        return _namespace_;
    }

    public void setNamespace(List list)
    {
        _namespace_.clear();
        _namespace_.addAll(list);
    }

    public TInteger getId()
    {
        return _id_;
    }

    public void setId(TInteger node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public TInteger getVendorId()
    {
        return _vendorId_;
    }

    public void setVendorId(TInteger node)
    {
        if(_vendorId_ != null)
        {
            _vendorId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _vendorId_ = node;
    }

    public TStringLiteral getUrl()
    {
        return _url_;
    }

    public void setUrl(TStringLiteral node)
    {
        if(_url_ != null)
        {
            _url_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _url_ = node;
    }

    public TInteger getDictId()
    {
        return _dictId_;
    }

    public void setDictId(TInteger node)
    {
        if(_dictId_ != null)
        {
            _dictId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _dictId_ = node;
    }

    public LinkedList getDefinition()
    {
        return _definition_;
    }

    public void setDefinition(List list)
    {
        _definition_.clear();
        _definition_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_documentation_)
            + toString(_base_)
            + toString(_namespace_)
            + toString(_id_)
            + toString(_vendorId_)
            + toString(_url_)
            + toString(_dictId_)
            + toString(_definition_);
    }

    void removeChild(Node child)
    {
        if(_documentation_ == child)
        {
            _documentation_ = null;
            return;
        }

        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_namespace_.remove(child))
        {
            return;
        }

        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_vendorId_ == child)
        {
            _vendorId_ = null;
            return;
        }

        if(_url_ == child)
        {
            _url_ = null;
            return;
        }

        if(_dictId_ == child)
        {
            _dictId_ = null;
            return;
        }

        if(_definition_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_documentation_ == oldChild)
        {
            setDocumentation((TDocumentation) newChild);
            return;
        }

        if(_base_ == oldChild)
        {
            setBase((TBase) newChild);
            return;
        }

        for(ListIterator i = _namespace_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_id_ == oldChild)
        {
            setId((TInteger) newChild);
            return;
        }

        if(_vendorId_ == oldChild)
        {
            setVendorId((TInteger) newChild);
            return;
        }

        if(_url_ == oldChild)
        {
            setUrl((TStringLiteral) newChild);
            return;
        }

        if(_dictId_ == oldChild)
        {
            setDictId((TInteger) newChild);
            return;
        }

        for(ListIterator i = _definition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Namespace_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != AGrammar.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AGrammar.this))
            {
                node.parent(AGrammar.this);
            }

            return node;
        }
    }

    private class Definition_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PDefinition node = (PDefinition) o;

            if((node.parent() != null) &&
                (node.parent() != AGrammar.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AGrammar.this))
            {
                node.parent(AGrammar.this);
            }

            return node;
        }
    }
}
