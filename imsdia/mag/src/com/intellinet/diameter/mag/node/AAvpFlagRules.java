/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.node;

import java.util.*;
import com.intellinet.diameter.mag.analysis.*;

public final class AAvpFlagRules extends PAvpFlagRules
{
    private final LinkedList _must_ = new TypedLinkedList(new Must_Cast());
    private final LinkedList _may_ = new TypedLinkedList(new May_Cast());
    private final LinkedList _shouldnt_ = new TypedLinkedList(new Shouldnt_Cast());
    private final LinkedList _mustnt_ = new TypedLinkedList(new Mustnt_Cast());
    private PEncryptable _encryptable_;

    public AAvpFlagRules()
    {
    }

    public AAvpFlagRules(
        List _must_,
        List _may_,
        List _shouldnt_,
        List _mustnt_,
        PEncryptable _encryptable_)
    {
        {
            this._must_.clear();
            this._must_.addAll(_must_);
        }

        {
            this._may_.clear();
            this._may_.addAll(_may_);
        }

        {
            this._shouldnt_.clear();
            this._shouldnt_.addAll(_shouldnt_);
        }

        {
            this._mustnt_.clear();
            this._mustnt_.addAll(_mustnt_);
        }

        setEncryptable(_encryptable_);

    }
    public Object clone()
    {
        return new AAvpFlagRules(
            cloneList(_must_),
            cloneList(_may_),
            cloneList(_shouldnt_),
            cloneList(_mustnt_),
            (PEncryptable) cloneNode(_encryptable_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAvpFlagRules(this);
    }

    public LinkedList getMust()
    {
        return _must_;
    }

    public void setMust(List list)
    {
        _must_.clear();
        _must_.addAll(list);
    }

    public LinkedList getMay()
    {
        return _may_;
    }

    public void setMay(List list)
    {
        _may_.clear();
        _may_.addAll(list);
    }

    public LinkedList getShouldnt()
    {
        return _shouldnt_;
    }

    public void setShouldnt(List list)
    {
        _shouldnt_.clear();
        _shouldnt_.addAll(list);
    }

    public LinkedList getMustnt()
    {
        return _mustnt_;
    }

    public void setMustnt(List list)
    {
        _mustnt_.clear();
        _mustnt_.addAll(list);
    }

    public PEncryptable getEncryptable()
    {
        return _encryptable_;
    }

    public void setEncryptable(PEncryptable node)
    {
        if(_encryptable_ != null)
        {
            _encryptable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _encryptable_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_must_)
            + toString(_may_)
            + toString(_shouldnt_)
            + toString(_mustnt_)
            + toString(_encryptable_);
    }

    void removeChild(Node child)
    {
        if(_must_.remove(child))
        {
            return;
        }

        if(_may_.remove(child))
        {
            return;
        }

        if(_shouldnt_.remove(child))
        {
            return;
        }

        if(_mustnt_.remove(child))
        {
            return;
        }

        if(_encryptable_ == child)
        {
            _encryptable_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _must_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _may_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _shouldnt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _mustnt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_encryptable_ == oldChild)
        {
            setEncryptable((PEncryptable) newChild);
            return;
        }

    }

    private class Must_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAvpFlag node = (PAvpFlag) o;

            if((node.parent() != null) &&
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent(AAvpFlagRules.this);
            }

            return node;
        }
    }

    private class May_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAvpFlag node = (PAvpFlag) o;

            if((node.parent() != null) &&
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent(AAvpFlagRules.this);
            }

            return node;
        }
    }

    private class Shouldnt_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAvpFlag node = (PAvpFlag) o;

            if((node.parent() != null) &&
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent(AAvpFlagRules.this);
            }

            return node;
        }
    }

    private class Mustnt_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PAvpFlag node = (PAvpFlag) o;

            if((node.parent() != null) &&
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAvpFlagRules.this))
            {
                node.parent(AAvpFlagRules.this);
            }

            return node;
        }
    }
}
