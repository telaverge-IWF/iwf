/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.intellinet.diameter.mag.node;

import java.util.*;
import com.intellinet.diameter.mag.analysis.*;

public final class AQualifier extends PQualifier
{
    private TInteger _min_;
    private TInteger _max_;

    public AQualifier()
    {
    }

    public AQualifier(
        TInteger _min_,
        TInteger _max_)
    {
        setMin(_min_);

        setMax(_max_);

    }
    public Object clone()
    {
        return new AQualifier(
            (TInteger) cloneNode(_min_),
            (TInteger) cloneNode(_max_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAQualifier(this);
    }

    public TInteger getMin()
    {
        return _min_;
    }

    public void setMin(TInteger node)
    {
        if(_min_ != null)
        {
            _min_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _min_ = node;
    }

    public TInteger getMax()
    {
        return _max_;
    }

    public void setMax(TInteger node)
    {
        if(_max_ != null)
        {
            _max_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _max_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_min_)
            + toString(_max_);
    }

    void removeChild(Node child)
    {
        if(_min_ == child)
        {
            _min_ = null;
            return;
        }

        if(_max_ == child)
        {
            _max_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_min_ == oldChild)
        {
            setMin((TInteger) newChild);
            return;
        }

        if(_max_ == oldChild)
        {
            setMax((TInteger) newChild);
            return;
        }

    }
}
