#include<iostream>
#include <sys/time.h>
#include<sstream>
#include <json/json.h>
#include <string>
#include <dia_cmn.h>
#include <Sync.h>
#include <dia_msg_flow.h>
#include <PluginObj.h>
//#include <diameter/Command.h>
#include <DiameterTransformer.h>
#include <dtf.h>

using namespace diameter;
using namespace eAccelero;

/*unsigned char DiaMsg276[] = 
	{0x01, 0x00, 0x01, 0x14, 0xc0, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0xe9,
	0x00, 0x00, 0x07, 0xd1, 0x00, 0x00, 0x01, 0x07, 0x40, 0x00, 0x00, 0x32, 0x73, 0x65, 0x61, 0x67,
	0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x3b, 0x31, 0x30, 0x39, 0x36, 0x32, 0x39,
	0x38, 0x33, 0x39, 0x31, 0x3b, 0x31, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x16,
	0x73, 0x65, 0x61, 0x67, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x28, 0x40, 0x00, 0x00, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1b, 0x40, 0x00, 0x00, 0x16,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x02, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0xcd,
	0x40, 0x00, 0x00, 0x16, 0x32, 0x39, 0x32, 0x31, 0x33, 0x40, 0x33, 0x67, 0x70, 0x70, 0x2e, 0x6f,
	0x72, 0x67, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x9f, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x40, 0x00, 0x00, 0x19, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x40, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbb, 0x40, 0x00, 0x00, 0x2c,
	0x00, 0x00, 0x01, 0xc2, 0x40, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xbc,
	0x40, 0x00, 0x00, 0x17, 0x34, 0x30, 0x34, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x31, 0x00};*/
//S6a Rel-10 ULR Msg
/*unsigned char DiaMsg276[] =	{
			0x01,0x00,0x01,0x48,0xc0,0x00,0x01,0x3c,0x01,0x00,0x00,0x23,0x68,0x4a,0x01,0x48
			,0xc3,0x94,0x99,0x36,0x00,0x00,0x01,0x07,0x40,0x00,0x00,0x30,0x63,0x6c,0x69,0x65
			,0x6e,0x74,0x41,0x2e,0x69,0x6e,0x74,0x65,0x6c,0x6c,0x69,0x6e,0x65,0x74,0x2e,0x63
			,0x6f,0x6d,0x3b,0x31,0x33,0x34,0x35,0x35,0x38,0x30,0x30,0x39,0x38,0x3b,0x31,0x33
			,0x38,0x39,0x33,0x36,0x00,0x00,0x01,0x08,0x40,0x00,0x00,0x0f,0x63,0x6c,0x69,0x65
			,0x6e,0x74,0x41,0x00,0x00,0x00,0x01,0x15,0x40,0x00,0x00,0x0c,0x00,0x00,0x00,0x01
			,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x27,0x34,0x30,0x34,0x31,0x32,0x30,0x30,0x30
			,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x40,0x33,0x67,0x70,0x70,0x6e,0x74,0x65,0x77
			,0x6f,0x72,0x6b,0x2e,0x6f,0x72,0x67,0x00,0x00,0x00,0x01,0x28,0x40,0x00,0x00,0x16
			,0x69,0x6e,0x74,0x65,0x6c,0x6c,0x69,0x6e,0x65,0x74,0x2e,0x63,0x6f,0x6d,0x00,0x00
			,0x00,0x00,0x01,0x04,0x40,0x00,0x00,0x20,0x00,0x00,0x01,0x0a,0x40,0x00,0x00,0x0c
			,0x00,0x00,0x28,0xaf,0x00,0x00,0x01,0x02,0x40,0x00,0x00,0x0c,0x01,0x00,0x00,0x23
			,0x00,0x00,0x01,0x1b,0x40,0x00,0x00,0x16,0x69,0x6e,0x74,0x65,0x6c,0x6c,0x69,0x6e
			,0x65,0x74,0x2e,0x63,0x6f,0x6d,0x00,0x00,0x00,0x00,0x01,0x25,0x40,0x00,0x00,0x0f
			,0x73,0x65,0x72,0x76,0x65,0x72,0x41,0x00,0x00,0x00,0x05,0x7d,0xc0,0x00,0x00,0x10
			,0x00,0x00,0x28,0xaf,0x00,0x00,0x00,0x0a,0x00,0x00,0x05,0x7f,0xc0,0x00,0x00,0x10
			,0x00,0x00,0x28,0xaf,0x35,0x36,0x37,0x38,0x00,0x00,0x04,0x08,0xc0,0x00,0x00,0x10
			,0x00,0x00,0x28,0xaf,0x00,0x00,0x03,0xeb,0x00,0x00,0x06,0x4f,0x80,0x00,0x00,0x10
			,0x00,0x00,0x28,0xaf,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0xd5,0x80,0x00,0x00,0x10
			,0x00,0x00,0x28,0xaf,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x1a,0x40,0x00,0x00,0x0f
			,0x63,0x6c,0x69,0x65,0x6e,0x74,0x41,0x00
	};*/

//S6a Rel-8 ULR Msg
unsigned char DiaMsg276[] =	{
	0x01,0x00,0x01,0x10,0xc0,0x00,0x01,0x3c,0x01,0x00,0x00,0x23,0x77,0x3e,0x8c,0xd8
		,0x00,0x00,0x07,0xd1,0x00,0x00,0x01,0x07,0x40,0x00,0x00,0x16,0x2e,0x3b,0x31,0x30
		,0x39,0x36,0x32,0x39,0x38,0x33,0x39,0x31,0x3b,0x31,0x00,0x00,0x00,0x00,0x01,0x08
		,0x40,0x00,0x00,0x16,0x53,0x65,0x61,0x67,0x75,0x6c,0x6c,0x63,0x6c,0x69,0x65,0x6e
		,0x74,0x41,0x00,0x00,0x00,0x00,0x01,0x15,0x40,0x00,0x00,0x0c,0x00,0x00,0x00,0x01
		,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x17,0x34,0x30,0x34,0x31,0x32,0x30,0x30,0x30
		,0x30,0x30,0x30,0x30,0x30,0x31,0x39,0x00,0x00,0x00,0x01,0x28,0x40,0x00,0x00,0x16
		,0x69,0x6e,0x74,0x65,0x6c,0x6c,0x69,0x6e,0x65,0x74,0x2e,0x63,0x6f,0x6d,0x00,0x00
		,0x00,0x00,0x01,0x04,0x40,0x00,0x00,0x20,0x00,0x00,0x01,0x0a,0x40,0x00,0x00,0x0c
		,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x40,0x00,0x00,0x0c,0x01,0x00,0x00,0x23
		,0x00,0x00,0x01,0x1b,0x40,0x00,0x00,0x16,0x69,0x6e,0x74,0x65,0x6c,0x6c,0x69,0x6e
		,0x65,0x74,0x2e,0x63,0x6f,0x6d,0x00,0x00,0x00,0x00,0x01,0x25,0x40,0x00,0x00,0x16
		,0x53,0x65,0x61,0x67,0x75,0x6c,0x6c,0x73,0x65,0x72,0x76,0x65,0x72,0x41,0x00,0x00
		,0x00,0x00,0x05,0x7f,0x40,0x00,0x00,0x0d,0x34,0x30,0x34,0x33,0x31,0x00,0x00,0x00
		,0x00,0x00,0x04,0x08,0x40,0x00,0x00,0x0c,0x00,0x00,0x03,0xeb,0x00,0x00,0x05,0x7d
		,0x40,0x00,0x00,0x0c,0x00,0x00,0x00,0x0a,0x00,0x00,0x01,0x1a,0x40,0x00,0x00,0x16
		,0x53,0x65,0x61,0x67,0x75,0x6c,0x6c,0x63,0x6c,0x69,0x65,0x6e,0x74,0x41,0x00,0x00
};

int main()
{
	std::stringstream dir;
	std::stringstream out;
	std::stringstream in;

	 struct timeval starttime, endtime;
	 long startms,endms;

	Json::Value root;

	DTF dtf;
	unsigned int outDictId = 7;

	dir << getenv("IMS_ROOT") << "/api/c++/lib/";
	PluginLoader::SetPluginDir(dir.str());

	DiaMsgFlow* inMsg = new DiaMsgFlow(DiaMsg276,sizeof(DiaMsg276),6);
	diameter::base::BaseGenericCommand* bCmd = new diameter::base::BaseGenericCommand(DiaMsg276,sizeof(DiaMsg276));
	inMsg->SetBaseGenCommand(bCmd);
	DiaMsgFlow* outMsg;

	//unsigned int dictId = dictTable.loadDictionary("s6ar8_s6ar10_transformD");
	dtf.LoadTransformerObject(6,7,"s6ar8_s6ar10_transformD");
	cout <<"Transformer for dict ids 1 and 2 loaded successfully" << endl;
	gettimeofday(&starttime, NULL);
	int num_msgs = 1;
	for(int i=0;i<num_msgs;i++)
	{
		if(dtf.CheckAndInvokeTransform(*inMsg,outDictId,&outMsg)!=0)
		{
			cout << "Transform did not happen";
			exit(0);
		}
	}
	 gettimeofday(&endtime, NULL);
	 startms = ((starttime.tv_sec * 1000) + (starttime.tv_usec / 1000));
	 endms = ((endtime.tv_sec * 1000) + (endtime.tv_usec / 1000));
	cout << "Transformation success. Time taken for transformation of " << num_msgs  << " is " << (endms - startms) << " milliseconds" << endl;; 

	Command *cmd3 = outMsg->GetBaseGenCommand();

	//cmd3->formDiameterMessageForRuleEngine(out);

	//cout <<"Formatted out msg is " << out.str() << endl;

	//inMsg->GetBaseGenCommand()->formDiameterMessageForRuleEngine(in);

	//cout <<"Formatted in msg is " << in.str() << endl;


	/*DiameterDictionaryRef dictRef = dictTable.fetchDictionaryObject("gyrel10apiD");
	if(dictRef.IsNull())
	{
		cout << "Dictionary gyrel10apiD has been unloaded" << endl;
	}

	Command* cmd = dictRef->createCommandObject(DiaMsg276,sizeof(DiaMsg276));
	cmd->formDiameterMessageForRuleEngine(out);

	cout << "Formatted msg is " << out.str() << endl;

	dictTable.unloadDictionary("gyrel10apiD");
	dictRef = dictTable.fetchDictionaryObject("gyrel10apiD");
	if(dictRef.IsNull())
	{
		cout << "Dictionary gyrel10apiD has been unloaded" << endl;
	}*/

}
