/****************************************************************************
 *                                                                          *
 *                Copyright 2001 IntelliNet Technologies, Inc.              *
 *                            All Rights Reserved.                          *
 *             Manufactured in the United States of America.                *
 *       1990 W. New Haven Ste. 312, Melbourne, Florida, 32904 U.S.A.       *
 *                                                                          *
 *   This product and related documentation is protected by copyright and   *
 *   distributed under licenses restricting its use, copying, distribution  *
 *   and decompilation.  No part of this product or related documentation   *
 *   may be reproduced in any form by any means without prior written       *
 *   authorization of IntelliNet Technologies and its licensors, if any.    *
 *                                                                          *
 *   RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the      *
 *   government is subject to restrictions as set forth in subparagraph     *
 *   (c)(1)(ii) of the Rights in Technical Data and Computer Software       *
 *   clause at DFARS 252.227-7013 and FAR 52.227-19.                        *
 *                                                                          *
 ****************************************************************************
 *                                                                          *
 * CONTRACT: INTERNAL                                                       *
 *                                                                          *
 ****************************************************************************
 *
 *  ID: $Id: BSSAP++.cpp,v 9.2.122.1 2014/09/16 09:34:52 jsarvesh Exp $
 *
 * LOG: $Log: BSSAP++.cpp,v $
 * LOG: Revision 9.2.122.1  2014/09/16 09:34:52  jsarvesh
 * LOG: Changes done for removing warnings
 * LOG:
 * LOG: Revision 9.2.118.1  2014/09/15 07:20:40  jsarvesh
 * LOG: Changes done for removing Warnings
 * LOG:
 * LOG: Revision 9.2  2005/06/10 07:18:58  adutta
 * LOG: Added missing returns
 * LOG:
 * LOG: Revision 9.1  2005/03/23 12:51:06  cvsadmin
 * LOG: Begin PR6.5
 * LOG:
 * LOG: Revision 8.2  2005/03/21 13:49:12  cvsadmin
 * LOG: PR6.4.2 Source Propagated to Current
 * LOG:
 * LOG: Revision 7.2.2.4  2003/12/16 16:16:07  hcho
 * LOG: CircuitGroupUnblock has no mand CAUSE IE.
 * LOG:
 * LOG: Revision 7.2.2.3  2003/12/16 16:10:38  hcho
 * LOG: GetStatus in CircuitIdCodeList does not require length checking.
 * LOG:
 * LOG: Revision 7.2.2.2  2003/11/07 20:39:25  hcho
 * LOG: Added BSSAP unknown msg type and unknown ies return.
 * LOG:
 * LOG: Revision 7.2.2.1  2003/08/21 18:04:55  hcho
 * LOG: Fixed IEI mispositioned problems.
 * LOG:
 * LOG: Revision 7.2  2002/11/26 21:19:18  ngoel
 * LOG: build for windows
 * LOG:
 * LOG: Revision 7.1  2002/08/26 22:08:34  mmiers
 * LOG: Begin PR6.2
 * LOG:
 * LOG: Revision 6.2  2002/06/10 16:55:52  ngoel
 * LOG: DTAP merge
 * LOG:
 * LOG: Revision 1.1.2.86  2002/06/06 20:44:09  ngoel
 * LOG: after MM changes
 * LOG:
 * LOG: Revision 1.1.2.85  2002/06/04 18:14:16  ngoel
 * LOG: add ext 1 to ntfy indicator
 * LOG:
 * LOG: Revision 1.1.2.84  2002/05/31 21:15:26  ngoel
 * LOG: amerge MM messages
 * LOG:
 * LOG: Revision 1.1.2.83  2002/05/29 22:08:59  ngoel
 * LOG: add call state
 * LOG:
 * LOG: Revision 1.1.2.82  2002/05/29 20:46:32  ngoel
 * LOG: dd dtmf messages
 * LOG:
 * LOG: Revision 1.1.2.81  2002/05/29 20:10:25  ngoel
 * LOG: test start dtmf
 * LOG:
 * LOG: Revision 1.1.2.80  2002/05/29 19:08:04  ngoel
 * LOG: test notify message
 * LOG:
 * LOG: Revision 1.1.2.79  2002/05/29 18:29:44  ngoel
 * LOG: test congestion control message
 * LOG:
 * LOG: Revision 1.1.2.78  2002/05/29 17:19:15  ngoel
 * LOG: correct nmarg
 * LOG:
 * LOG: Revision 1.1.2.77  2002/05/29 16:31:18  ngoel
 * LOG: test retrieve messages
 * LOG:
 * LOG: Revision 1.1.2.76  2002/05/29 16:08:03  ngoel
 * LOG: test hold messages
 * LOG:
 * LOG: Revision 1.1.2.75  2002/05/29 15:21:14  ngoel
 * LOG: user information message
 * LOG:
 * LOG: Revision 1.1.2.74  2002/05/28 18:20:58  ngoel
 * LOG: remove tabs
 * LOG:
 * LOG: Revision 1.1.2.73  2002/05/24 20:32:26  ngoel
 * LOG: after MM fixes
 * LOG:
 * LOG: Revision 1.1.2.72  2002/05/24 20:28:37  ngoel
 * LOG: after MM fixes
 * LOG:
 * LOG: Revision 1.1.2.71  2002/05/24 15:58:27  ngoel
 * LOG: remove duplocate
 * LOG:
 * LOG: Revision 1.1.2.69  2002/05/22 17:04:09  ngoel
 * LOG: merge print functions with mm
 * LOG:
 * LOG: Revision 1.1.2.68  2002/05/22 15:45:57  ngoel
 * LOG: conform handover request to june 2000 8.08 spec
 * LOG:
 * LOG: Revision 1.1.2.67  2002/05/22 15:22:05  ngoel
 * LOG: bug fixes
 * LOG:
 * LOG: Revision 1.1.2.66  2002/05/20 13:20:17  ngoel
 * LOG: add isExt to BearerData ie
 * LOG:
 * LOG: Revision 1.1.2.65  2002/05/17 18:58:40  ngoel
 * LOG: add priority level to messages
 * LOG:
 * LOG: Revision 1.1.2.64  2002/05/17 13:35:42  ngoel
 * LOG: remove ASSERT if decode fails
 * LOG:
 * LOG: Revision 1.1.2.63  2002/05/17 13:23:12  ngoel
 * LOG: remove hard tabs
 * LOG:
 * LOG: Revision 1.1.2.62  2002/05/16 18:33:39  ngoel
 * LOG: after merge test
 * LOG:
 * LOG: Revision 1.1.2.61  2002/05/16 16:13:23  ngoel
 * LOG: after merge mm messages
 * LOG:
 * LOG: Revision 1.1.2.60  2002/05/16 15:41:13  ngoel
 * LOG: add priority level ie
 * LOG:
 * LOG: Revision 1.1.2.59  2002/05/16 14:32:30  ngoel
 * LOG: add braching for l3 header
 * LOG:
 * LOG: Revision 1.1.2.50  2002/05/10 20:30:25  ngoel
 * LOG: add code
 * LOG:
 * LOG: Revision 1.1.2.49  2002/05/10 19:38:15  ngoel
 * LOG: correction
 * LOG:
 * LOG: Revision 1.1.2.48  2002/05/10 19:14:12  ngoel
 * LOG: correction
 * LOG:
 * LOG: Revision 1.1.2.47  2002/05/10 18:37:45  ngoel
 * LOG: add code
 * LOG:
 * LOG: Revision 1.1.2.46  2002/05/10 18:29:06  ngoel
 * LOG: add code
 * LOG:
 * LOG: Revision 1.1.2.45  2002/05/10 16:13:04  ngoel
 * LOG: add LV type 4 ie support
 * LOG:
 * LOG: Revision 1.1.2.44  2002/05/09 20:56:39  ngoel
 * LOG: add keypad facility ie
 * LOG:
 * LOG: Revision 1.1.2.43  2002/05/09 20:40:37  ngoel
 * LOG: add auxillary state ie
 * LOG:
 * LOG: Revision 1.1.2.42  2002/05/09 20:11:11  ngoel
 * LOG: dd clir ies
 * LOG:
 * LOG: Revision 1.1.2.41  2002/05/09 18:30:10  ngoel
 * LOG: add dtap header for dtap messages
 * LOG:
 * LOG: Revision 1.1.2.18  2002/05/07 19:53:49  ngoel
 * LOG: add ss version ie
 * LOG:
 * LOG: Revision 1.1.2.17  2002/05/07 19:05:11  ngoel
 * LOG: add bearer data
 * LOG:
 * LOG: Revision 1.1.2.16  2002/05/07 16:03:33  ngoel
 * LOG: add redirecting party address and subaddress
 * LOG:
 * LOG: Revision 1.1.2.15  2002/05/07 15:38:24  ngoel
 * LOG: add called address ie
 * LOG:
 * LOG: Revision 1.1.2.14  2002/05/07 15:28:32  ngoel
 * LOG: dd cg addresses
 * LOG:
 * LOG: Revision 1.1.2.13  2002/05/07 15:09:14  ngoel
 * LOG: add called sub address
 * LOG:
 * LOG: Revision 1.1.2.12  2002/05/07 13:05:32  ngoel
 * LOG: add signal ie
 * LOG:
 * LOG: Revision 1.1.2.11  2002/05/07 00:28:34  ngoel
 * LOG: add low level comp info ie
 * LOG:
 * LOG: Revision 1.1.2.10  2002/05/06 21:52:41  ngoel
 * LOG: add high level compatibility
 * LOG:
 * LOG: Revision 1.1.2.9  2002/05/06 20:19:14  ngoel
 * LOG: add connected subaddress
 * LOG:
 * LOG: Revision 1.1.2.8  2002/05/06 19:01:36  ngoel
 * LOG: add connected number ie
 * LOG:
 * LOG: Revision 1.1.2.7  2002/05/06 16:18:24  ngoel
 * LOG: add cc causa iee
 * LOG:
 * LOG: Revision 1.1.2.6  2002/05/06 14:30:04  ngoel
 * LOG: code repeat indicator
 * LOG:
 * LOG: Revision 1.1.2.5  2002/05/05 21:56:50  ngoel
 * LOG: add DTAP support
 * LOG:
 * LOG: Revision 1.1.2.4  2002/05/05 19:22:41  ngoel
 * LOG: code alerting msg
 * LOG:
 * LOG: Revision 1.1.2.3  2002/05/05 17:45:31  ngoel
 * LOG: code usertouser ie
 * LOG:
 * LOG: Revision 1.1.2.2  2002/05/05 17:16:00  ngoel
 * LOG: code progress indicator ie
 * LOG:
 * LOG: Revision 1.1.2.1  2002/05/05 15:40:20  ngoel
 * LOG: start adding gsm 4.08
 * LOG:
 * LOG: Revision 6.1.4.1  2002/04/24 22:20:35  hxing
 * LOG: Back port to PR5.
 * LOG:
 * LOG: Revision 6.1  2002/02/28 16:13:18  mmiers
 * LOG: Begin PR7.
 * LOG:
 * LOG: Revision 1.5  2001/11/26 15:26:28  dzhang
 * LOG: minor midification
 * LOG:
 * LOG: Revision 1.4  2001/11/19 17:10:21  dzhang
 * LOG: Modify message Encode() to cope with Classmark 1 and 2 in HandoverReq message
 * LOG:
 * LOG: Revision 1.3  2001/11/12 14:44:54  dzhang
 * LOG: update to latest spec version8.9.0
 * LOG:
 * LOG: Revision 1.2  2001/10/05 19:47:58  dzhang
 * LOG: Mionr modification on CircuitIdCodeList IE
 * LOG:
 *
 ****************************************************************************/
#ifdef _WIN32
#pragma warning (disable : 4786)
#endif
#include <iostream>
#include <its++.h>
//#include <its_exception.h>
#include <its_license.h>
#include <its_trace.h>

#if defined (DEBUG)
#include <BSSAPPrint.h>
#endif

#if defined(WIN32)
#pragma warning(disable : 4786)
#endif

//#if defined(ANSI)
#include <sccp++.h>
#include <BSSAP++.h>
//#else
//#error BSSAP must use the ANSI protocol family.
//#endif

#if defined(ITS_STD_NAMESPACE)
using namespace std;
#endif

#if defined(ITS_NAMESPACE)
using namespace its;
#endif


ITS_BOOLEAN BSSAP_AsciiDigitsToBcd(const ITS_OCTET* in, ITS_OCTET* out, 
                                   ITS_UINT& len)
{
    while(*in != '\0')
    {
        if(*in < '0' || *in > '9')
        return ITS_FALSE;

        *out = (*in - '0');
        *out <<= 4;
        in++;

        if(*in != '\0')
        {
            if(*in < '0' || *in > '9')
            return ITS_FALSE;

            *out |= (*in - '0');
        }
        else
        {
            *out |= 0x0FU;
            len++;
            return ITS_TRUE;
        }
        len++;
        in++;
        out++;
    }
    return ITS_TRUE;
}


// creat proper BSSMAP field IEs for Old BSS to New BSS Information element, 
// compute the length for fixed and unfixed size IE(including id & len)
static void
BSMAPFIERule(ITS_OCTET id,
            BSSAP_Element*& ie,
            ITS_OCTET knownlen, //varible-size len
            int& len)
{
    switch (id)
    {
    case BSSAP_IEI_EXTRA_INFORMATION:
        len = sizeof(BSSAP_ExtraInformation) + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ExtraInfo();
        break;

    case BSSAP_IEI_CURRENT_CHANNEL_TYPE_2:
        len = sizeof(BSSAP_CurrentChannelType2) + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CrtChan2();
        break;

    case BSSAP_IEI_TARGET_CELL_RADIO_INFO:
        len = sizeof(BSSAP_TargetCellRadioInformation) + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_TargetCellRadioInfo();
        break;

    case BSSAP_IEI_GPRS_SUSPEND_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_GPRSSuspendInfo();
        break;

    case BSSAP_IEI_MULTIRATE_CONFIG_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_MultirateConfigInfo();
        break;

    case BSSAP_IEI_DUAL_TRANSFER_MODE_INFO:
        len = sizeof(BSSAP_DualTransferModeInformation) + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_DualTransferModeInfo();
        break;

    case BSSAP_IEI_UE_CAP_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_UECapInfo();
        break;

    case BSSAP_IEI_CDMA_2000_CAP_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_cdma2000CapInfo();
        break;

    case BSSAP_IEI_UTRAN_PRECONFIG_IND_SET_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_UTRANIndicationSet();
        break;

    case BSSAP_IEI_UE_SECURITY_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_UESecurityInfo();
        break;
    }
}

////////////////////////////////////////////////////////////////////
//
//    helper function to compute the length of a particular 
//    cell identification. i.e. CGI, LAC_CI, CI, LAI or LAC
//
/////////////////////////////////////////////////////////////////////
static int 
getCellIDLength(ITS_OCTET cellid_disc)
{
    int tlen;

    switch (cellid_disc)
    {
    case CI_CID_CGI:
        tlen = sizeof(BSSAP_CellGlobalId);
        break;

    case CI_CID_LAC:
        tlen = sizeof(BSSAP_Lac_Ci);
        break;

    case CI_CID_CI:
        tlen = sizeof(BSSAP_Ci);
        break;

    case CI_CID_NONE:
        tlen = 0;
        break;

    case CI_CID_PLMN_LAC_RNC:
        tlen = sizeof(BSSAP_Plmn_Lac_Rnc);
        break;

    case CI_CID_RNC:
        tlen = sizeof(BSSAP_Rnc);
        break;

    case CI_CID_LAC_RNC:
        tlen = sizeof(BSSAP_Lac_Rnc);
        break;

    case CI_CID_SAI:
        tlen = sizeof(BSSAP_Sai);
        break;

    default:
        break;
    }
    
    return tlen;
}

////////////////////////////////////////////////////////////////////
//
//    helper function to compute the length of a particular 
//    cell identification. i.e. CGI, LAC_CI, CI, LAI or LAC
//
/////////////////////////////////////////////////////////////////////
static int 
getCellIDListLen(ITS_OCTET cellidlist_disc)
{
    int tlen;

    switch (cellidlist_disc)
    {
    case CIL_CID_CGI:
        tlen = sizeof(BSSAP_CellGlobalId);
        break;

    case CIL_CID_LAC_CI:
        tlen = sizeof(BSSAP_Lac_Ci);
        break;

    case CIL_CID_CI:
        tlen = sizeof(BSSAP_Ci);
        break;

    case CIL_CID_NONE:
        tlen = 0;
        break;

    case CIL_CID_LAI:
        tlen = sizeof(BSSAP_Lai);
        break;

    case CIL_CID_LAC:
        tlen = sizeof(BSSAP_Lac);
        break;

    case CIL_CID_ALL_CELLS:
        tlen = 0;
        break;
    
    default:
        break;
    }
    
    return tlen;
}

////////////////////////////////////////////////////////////////////
//
//    helper function to compute the length of a particular 
//    network identity. i.e. CGI, LAC_CI, CI, LAI or LAC
//
/////////////////////////////////////////////////////////////////////
static int 
getIDLength(ITS_OCTET net_id_disc)
{
    int tlen;

    switch (net_id_disc)
    {
    case NEI_ID_CGI:
        tlen = sizeof(BSSAP_CellGlobalId);
        break;

    case NEI_ID_LAC_CI:
        tlen = sizeof(BSSAP_Lac_Ci);
        break;

    case NEI_ID_LAI:
        tlen = sizeof(BSSAP_LAI);
        break;

    case NEI_ID_LAC:
        tlen = sizeof(BSSAP_LAC);
        break;

    default:
        break;
    }
    
    return tlen;
}


//
// Element Abstraction
//

/* ---------- 3.2.2.2 Circuit Identity Code ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktIDCode::BSSAP_CktIDCode()
    : BSSAP_Element(BSSAP_IEI_CIRCUIT_IDENTITY_CODE)
{
    ie.param_length = sizeof(BSSAP_CircuitIdentityCode);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktIDCode::~BSSAP_CktIDCode()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCode::SetPCMID(ITS_USHORT type)
{
    CIC_SET_PCM_ID(ie.param_data.circuitIdentityCode, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_CktIDCode::GetPCMID()
{
    return CIC_GET_PCM_ID(ie.param_data.circuitIdentityCode);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCode::SetTimeslot(ITS_OCTET type)
{
    CIC_SET_TIMESLOT(ie.param_data.circuitIdentityCode, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CktIDCode::GetTimeslot()
{
    return CIC_GET_TIMESLOT(ie.param_data.circuitIdentityCode);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktIDCode::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_CircuitIdentityCode) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktIDCode::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_CircuitIdentityCode) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CktIDCode::Clone()
{
    BSSAP_CktIDCode *ret = new BSSAP_CktIDCode();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------------- 3.2.2.3 Connection Release Requested -------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConRlsReq::BSSAP_ConRlsReq()
    : BSSAP_Element(BSSAP_IEI_CONNECTION_RELEASE_REQUESTED)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConRlsReq::~BSSAP_ConRlsReq()
{
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes the ConRlsReq information element into an 
 *      octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConRlsReq::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the ConRlsReq information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConRlsReq::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ConRlsReq IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ConRlsReq::Clone()
{
    BSSAP_ConRlsReq *ret = new BSSAP_ConRlsReq();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ------------- 3.2.2.4 Resource Available -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResAvail::BSSAP_ResAvail()
    : BSSAP_Element(BSSAP_IEI_RESOURCE_AVAILABLE)
{
    ie.param_length = sizeof(BSSAP_ResourceAvailable);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResAvail::~BSSAP_ResAvail()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ResAvail::SetNumFullHalf(ITS_USHORT full, ITS_USHORT half, 
                               const int index)
{
    if ((index >= 0) && (index < 5)) 
    {
        RA_SET_FULL_HALF_RATE_CHANNELS_AVAILABLE_FOR_BAND
                   (ie.param_data.resourceAvailable, index, full, half);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_ResAvail::GetNumFull(const int index)
{
    if ((index >= 0) && (index < 5))
    {
        return RA_GET_FULL_RATE_CHANNELS_AVAILABLE_FOR_BAND
                    (ie.param_data.resourceAvailable, index);
    }
    else
    {
       return (ITS_ENOMEM);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_ResAvail::GetNumHalf(const int index)
{
    if ((index >= 0) && (index < 5)) 
    {
        return RA_GET_HALF_RATE_CHANNELS_AVAILABLE_FOR_BAND
                    (ie.param_data.resourceAvailable, index);
    }
    else
    {
       return (ITS_ENOMEM);
    }
}

// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the ResAvail information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResAvail::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ResourceAvailable) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the ResAvail information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResAvail::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ResourceAvailable) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ResAvail IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ResAvail::Clone()
{
    BSSAP_ResAvail *ret = new BSSAP_ResAvail();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ------------ 3.2.2.5 Cause -------------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Cse::BSSAP_Cse()
    : BSSAP_Element(BSSAP_IEI_CAUSE)
{
    ie.param_length = sizeof(BSSAP_Cause);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Cse::~BSSAP_Cse()
{
}

//access methods
// this method can throw exceptions
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Cse::SetCause(bool isExt, ITS_OCTET cause1, ITS_OCTET cause2)
{   //cause1 is low 7 bits of cause[0], can't be xxx 0000

    C_SET_EXTENSION(ie.param_data.cause, isExt);

    C_SET_BASIC_CAUSE(ie.param_data.cause, cause1);
    if (isExt) //two Octets
    {
        if ((cause1 & 0x0F) == 0)   //cause1 = xxx 0000
        {
            return (ITS_EINVALIDARGS);
        }
        else
        {
            C_SET_EXT_CAUSE(ie.param_data.cause, cause2);
        }
    }
    int len = (isExt ? 2 : 1);
    ie.param_length += (len - 1);

    return (ITS_SUCCESS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Cse::SetNationalCause(ITS_OCTET natClass, ITS_OCTET cause)
{
    if (!C_GET_EXTENSION(ie.param_data.cause))
    {
        exception ex;

        throw ex;
    }
    else
    {
        C_SET_EXT_CAUSE_CLASS(ie.param_data.cause, natClass);
        C_SET_EXT_CAUSE(ie.param_data.cause, cause);
    }
    ie.param_length++;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Cse::GetCause(bool& isExt, bool& isNat, ITS_OCTET& classORcause1,
                   ITS_OCTET& cause2)
{
    isExt = (C_GET_EXTENSION(ie.param_data.cause) == 1);
    isNat = ((C_GET_BASIC_CAUSE(ie.param_data.cause) & 0x8F) == 0x80);

    if(!isExt)  //one Octet
    {
        classORcause1 = C_GET_BASIC_CAUSE(ie.param_data.cause);
    }
    else  //two Octets, 1st contains the cause class, 2nd cause
    {
        if(isNat)
        {
            classORcause1 = C_GET_EXT_CAUSE_CLASS(ie.param_data.cause);
        }
        else
        {
            //Bit 7 set to 0
            classORcause1 = C_GET_BASIC_CAUSE(ie.param_data.cause) & 0x7FU;
        }
        cause2 = C_GET_EXT_CAUSE(ie.param_data.cause);
    }
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes the cause information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Cse::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cause information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Cse::Decode(ITS_OCTET* buf, int& len)
{
    if ((len < sizeof(BSSAP_Cause) + 2 * sizeof(ITS_OCTET)) ||
        (len > sizeof(BSSAP_Cause) + 2 * sizeof(ITS_OCTET) + 1))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Cause IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Cse::Clone()
{
    BSSAP_Cse *ret = new BSSAP_Cse();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* -------------- 3.2.2.6 IMSI --------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IMSI::BSSAP_IMSI()
    : BSSAP_Element(BSSAP_IEI_IMSI)
{
    ie.param_length = sizeof(BSSAP_Imsi) -1;
    havedigits = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IMSI::~BSSAP_IMSI()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: 
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_IMSI::SetDigits(char* digit, int len)
{
    bool            isEven;
    ITS_OCTET       temp;

    for (int i = 0; i < len; i++)
    {
        temp = (digit[i] - '0') & 0x0F;
           
        isEven = !(i & 1);

        if (isEven)
        {
            ie.param_data.imsi.digits[i>>1] = temp;
        }
        else
        {
            ie.param_data.imsi.digits[i>>1] |= temp << 4;
        }
    }

    if ((len & 1)) // if len is odd
    {
        // end mark coded as "1111" 
        ie.param_data.imsi.digits[len>>1] |= 0xF0; 
    }

    ie.param_length = (len + 1) / 2;
    havedigits = true;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_IMSI::ClearDigits(int len)
{
    if (!havedigits)
    {
        len = 0;

        return;
    }
    ie.param_length -= (len + 1) / 2;

    havedigits = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_IMSI::GetDigits(char* digit, int& len)
{
if (!havedigits)
    {
        len = 0;

        return;
    }

    // compute the number of bytes in the IMSI encoded string
    int tlen = ie.param_length - (sizeof(BSSAP_Imsi) - 1);
    bool isEven;

    // compute the number of ASCII characters in the decoded string
    if ((ie.param_data.imsi.digits[tlen-1] & 0xF0) == 0xF0)
    {
        len = (tlen << 1) - 1;
    }
    else
    {
        len = (tlen << 1);
    }

    // build the ASCII string
    ITS_OCTET       temp;
    int i;
    for (i = 0; i < len; i++)
    {
        isEven = !(i & 1);

        if (isEven)
        {
            temp = (ie.param_data.imsi.digits[i>>1] & 0x0F);
        }
        else
        {
            temp = ((ie.param_data.imsi.digits[i>>1] >> 4) & 0x0F);
        }

        digit[i] = temp +'0';
    }
    // (nul) terminate the ASCII string
    digit[i] = 0;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_IMSI::SetDigitsB(ITS_OCTET* digit, int len)
{    
    for (int i = 0; i < (len + 1) / 2; i++)
    {
        ie.param_data.imsi.digits[i] = digit[i];
    }

    if (!(len & 1))
    {
        ie.param_data.imsi.digits[len>>1] |= 0xF0;
    }

    ie.param_length = (len + 1) / 2;
    havedigits = true;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void  
BSSAP_IMSI::GetDigitsB(ITS_OCTET* digit, int& len)
{
    if (!havedigits)
    {
        len = 0;

        return;
    }

    // compute the number of bytes in the IMSI encoded string
    int tlen = ie.param_length - (sizeof(BSSAP_Imsi) - 1);    

    // compute the number of ASCII characters in the decoded string
    if ((ie.param_data.imsi.digits[tlen-1] & 0xF0) == 0xF0)
    {
        len = (tlen << 1) - 1;
    }
    else
    {
        len = (tlen << 1);
    }

    int i;
    for (i = 0; i < tlen; i++)
    {
        digit[i] = ie.param_data.imsi.digits[i];
    }    
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes the IMSI information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_IMSI::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the IMSI information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_IMSI::Decode(ITS_OCTET* buf, int& len)
{
     if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.imsi) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.imsi) - 1)))
    {
        havedigits = true;
    }
    else
    {
        havedigits = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a IMSI IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_IMSI::Clone()
{
    BSSAP_IMSI *ret = new BSSAP_IMSI();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* -------------- 3.2.2.7 TMSI --------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSI::BSSAP_TMSI()
    : BSSAP_Element(BSSAP_IEI_TMSI)
{
    ie.param_length = sizeof(BSSAP_Tmsi);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSI::~BSSAP_TMSI()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TMSI::SetTMSI(ITS_UINT data)
{
    TMSI_SET_TMSI(ie.param_data.tmsi, data);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_UINT
BSSAP_TMSI::GetTMSI()
{
    return TMSI_GET_TMSI(ie.param_data.tmsi);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes the TMSI information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TMSI::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_Tmsi) +
            2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the TMSI information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TMSI::Decode(ITS_OCTET* buf, int& len)
{
    if (len != (sizeof(BSSAP_Tmsi) +
                    2 * sizeof(ITS_OCTET)))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TMSI IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TMSI::Clone()
{
    BSSAP_TMSI *ret = new BSSAP_TMSI();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* -------------- 3.2.2.8 NumberOfMSs --------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NumMSs::BSSAP_NumMSs()
    : BSSAP_Element(BSSAP_IEI_NUMBER_OF_MS)
{
    ie.param_length = sizeof(BSSAP_NumberOfMSs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NumMSs::~BSSAP_NumMSs()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_NumMSs::SetNumHand(ITS_OCTET data)
{
    ie.param_data.numberOfMSs.numOfMSs = data;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_NumMSs::GetNumHand()
{
    return ie.param_data.numberOfMSs.numOfMSs;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes the NumMSs information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NumMSs::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_NumberOfMSs) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the NumMSs information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NumMSs::Decode(ITS_OCTET* buf, int& len)
{
    if (len != (sizeof(BSSAP_NumberOfMSs) + 2 * sizeof(ITS_OCTET)))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a NumMSs IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_NumMSs::Clone()
{
    BSSAP_NumMSs *ret = new BSSAP_NumMSs();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------ 3.2.2.9  Layer 3 Header Information.----------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3HeaderInfo::BSSAP_L3HeaderInfo()
    : BSSAP_Element(BSSAP_IEI_LAYER3_HEADER_INFORMATION)
{
    ie.param_length = sizeof(BSSAP_Layer3HeaderInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3HeaderInfo::~BSSAP_L3HeaderInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3HeaderInfo::SetProtDiscr(ITS_OCTET type)
{
    L3HI_SET_PROT_DISCR(ie.param_data.layer3HeaderInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_L3HeaderInfo::GetProtDiscr()
{
    return L3HI_GET_PROT_DISCR(ie.param_data.layer3HeaderInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3HeaderInfo::SetTIVal(ITS_OCTET type)
{
    L3HI_SET_TRAN_ID_VALUE(ie.param_data.layer3HeaderInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_L3HeaderInfo::GetTIVal()
{
    return L3HI_GET_TRAN_ID_VALUE(ie.param_data.layer3HeaderInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3HeaderInfo::SetTIFlag(ITS_BOOLEAN type)
{
    L3HI_SET_TRAN_ID_FLAG(ie.param_data.layer3HeaderInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_L3HeaderInfo::GetTIFlag()
{
    return L3HI_GET_TRAN_ID_FLAG(ie.param_data.layer3HeaderInfo);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3HeaderInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_Layer3HeaderInfo) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3HeaderInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_Layer3HeaderInfo) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a L3HeaderInfo IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_L3HeaderInfo::Clone()
{
    BSSAP_L3HeaderInfo *ret = new BSSAP_L3HeaderInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* -------------- 3.2.2.10 Encryption Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
 BSSAP_EncryptionInformation::BSSAP_EncryptionInformation()
    : BSSAP_Element(BSSAP_IEI_ENCRYPTION_INFORMATION)
{
    ie.param_length = sizeof(ie.param_data.encryptionInfo) - 1;
    haveKey = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_EncryptionInformation::~BSSAP_EncryptionInformation()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetNoEncryption(ITS_BOOLEAN type)
{
    EI_SET_NO_ENCRYPTION(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetNoEncryption()
{
    return EI_GET_NO_ENCRYPTION(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_1(ITS_BOOLEAN type)
{
    EI_SET_A5_1(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_1()
{
    return EI_GET_A5_1(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_2(ITS_BOOLEAN type)
{
    EI_SET_A5_2(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_2()
{
    return EI_GET_A5_2(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_3(ITS_BOOLEAN type)
{
    EI_SET_A5_3(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_3()
{
    return EI_GET_A5_3(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_4(ITS_BOOLEAN type)
{
    EI_SET_A5_4(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_4()
{
    return EI_GET_A5_4(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_5(ITS_BOOLEAN type)
{
    EI_SET_A5_5(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_5()
{
    return EI_GET_A5_5(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_6(ITS_BOOLEAN type)
{
    EI_SET_A5_6(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_6()
{
    return EI_GET_A5_6(ie.param_data.encryptionInfo);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetA5_7(ITS_BOOLEAN type)
{
    EI_SET_A5_7(ie.param_data.encryptionInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EncryptionInformation::GetA5_7()
{
    return EI_GET_A5_7(ie.param_data.encryptionInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::SetKey(ITS_OCTET* key, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.encryptionInfo.key, key, len);

    haveKey = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::ClearKey(int len)
{
    if (!haveKey)
    {
        return;
    }

    ie.param_length -= len;
    haveKey = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_EncryptionInformation::GetKey(ITS_OCTET* buf, int& len)
{
    if (!haveKey)
    {
        len = 0;

        return;
    }
    len = ie.param_length - (sizeof(ie.param_data.encryptionInfo) - 1);
    memcpy(buf, ie.param_data.encryptionInfo.key, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_EncryptionInformation::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_EncryptionInformation::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.encryptionInfo) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.encryptionInfo) - 1)))
    {
        haveKey = true;
    }
    else
    {
        haveKey = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a EncryptionInformation IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_EncryptionInformation::Clone()
{
    BSSAP_EncryptionInformation *ret = new BSSAP_EncryptionInformation();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* -------------- 3.2.2.11 Channel Type -------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChanType::BSSAP_ChanType()
    :BSSAP_Element(BSSAP_IEI_CHANNEL_TYPE)
{
    ie.param_length = sizeof(BSSAP_ChannelType);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChanType::~BSSAP_ChanType()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetSpeechDataID(ITS_OCTET id)
{
    CT_SET_SPEECH_DATA_IND(ie.param_data.chanType, id);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ChanType::GetSpeechDataID()
{
    return CT_GET_SPEECH_DATA_IND(ie.param_data.chanType);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetChanRateType(ITS_OCTET type)
{ 
    if(GetSpeechDataID() == CT_DATA)
    {
        CT_SET_CHANNEL_RATE_DATA(ie.param_data.chanType, type);
    }
    else if (GetSpeechDataID() == CT_SPEECH)
    {
        CT_SET_CHANNEL_RATE_SPCH(ie.param_data.chanType, type);  
    }
    else if (GetSpeechDataID() == CT_SIGNALING)
    {
        CT_SET_CHANNEL_RATE_SIG(ie.param_data.chanType, type);  
    }

    else
    {
        exception ex;

        throw ex;
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ChanType::GetChanRateType()
{
    if (GetSpeechDataID() == CT_DATA)
    {
        return CT_GET_CHANNEL_RATE_DATA(ie.param_data.chanType);
    }
    else if(GetSpeechDataID() == CT_SPEECH)
    {
        return CT_GET_CHANNEL_RATE_SPCH(ie.param_data.chanType);
    }
    else if(GetSpeechDataID() == CT_SIGNALING)
    {
        return CT_GET_CHANNEL_RATE_SIG(ie.param_data.chanType);
    }   
    else
    {
       return (ITS_ENOMEM);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetExtForSpeech(ITS_BOOLEAN isExt, int n)
{ 
    if (n < 0 && n > 5)
    {
        return;
    }
    else
    {
        if (n == 0)
        {
            CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, 
                                                               n, isExt);
        }
        else if (n > 0 && n < 5)
        {
            if (GetExtForSpeech(n - 1) == 1)
            {
                CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, 
                                                               n, isExt);
            }
            else
            {
                return;
            }
        }
        else if ( n == 5)
        { 
            if (GetExtForSpeech(n - 1) == 1)
            {
                isExt = 0x00;
                CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, 
                                                               n, isExt);
            }
            else
            {
                return;
            }
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ChanType::GetExtForSpeech(int n)
{ 
    if (n >= 0 && n < 6)
    {
        return CT_GET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, n);
    }
    else
    {
       return (ITS_ENOMEM);
    }
    
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetExtForData(ITS_BOOLEAN isExt, int n)
{ 
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetChanRateType() < 0x20)
        {           
            if (n == 0)
            {
                if (GetTransparent() == 1)
                {
                    isExt = 0x01;
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                    isExt);
                }
                else if (GetTransparent() == 0)
                {
                    isExt = 0x00;
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                    isExt);
                }
            }
            else if (n == 1)
            {
                if (GetExtForData(n - 1) == 1)
                {
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                    isExt);
                }
            }
            else if (n == 2)
            {
                if (GetExtForData(n - 1) == 1)
                {
                    isExt = 0x00;
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                   isExt);
                }
            }
        }
        else if ((GetChanRateType() >= 0x20) && (GetChanRateType() <= 0x37))
        {  
            if (n == 0)
            {
                if (GetTransparent() == 1)
                {
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                   isExt);
                }
            }
            else if (n == 1)
            {
                if (GetExtForData(n - 1) == 1)
                {
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                   isExt);
                }
            }
            else if (n == 2)
            {
                if (GetExtForData(n - 1) == 1)
                {
                    isExt = 0x00;
                    CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, n, 
                                                                   isExt);
                }
            }
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ChanType::GetExtForData(int n)
{ 
    if (n >= 0 && n < 3)
    {
        return CT_DRTI_GET_EXTENSION_BIT(ie.param_data.chanType, n);
    }
    else
    {
       return (ITS_ENOMEM);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      n: octet index, msut start from 0.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetPermitSpch(ITS_BOOLEAN isExt, ITS_OCTET id, int n)
{
    if(GetSpeechDataID() == CT_SPEECH)
    {
        if (n == 0)
        {
            CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, 
                                                                    isExt);
            CT_SET_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, id);

            if (isExt == 0)
            {
                ie.param_length -= 5;
            }
        }
        else if (n > 0 && n < 5)
        {
            if ( GetExtForSpeech(n - 1) == 1 )
            {
                CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, 
                                                                       isExt);
                CT_SET_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, id);
                if (isExt == 0)
                {
                    ie.param_length = ie.param_length - 5 + n;
                }
            }
        }
        else if (n == 5)
        {
            isExt = 0;
            
            if (GetExtForSpeech(n - 1) == 1 )
            {
                CT_SET_EXT_FOR_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, 
                                                                        isExt);
                CT_SET_PERMITTED_SPEECH_VER(ie.param_data.chanType, n, id);

                ie.param_length = ie.param_length - 5 + n;
            }
        }
    } 
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::GetPermitSpch(ITS_BOOLEAN& isExt, ITS_OCTET &type, int n)
{
    if (GetSpeechDataID() == CT_SPEECH) 
    {
        isExt = GetExtForSpeech(n);

        if (n == 0)
        {
            type = CT_GET_PERMITTED_SPEECH_VER(ie.param_data.chanType, n);
        }
        else if (n > 0 && n < 6)
        {  
            if(GetExtForSpeech(n - 1) == 1)
            {
                type = CT_GET_PERMITTED_SPEECH_VER(ie.param_data.chanType, n);
            }
        }
        else
        {
            return;
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetTransparent(ITS_BOOLEAN transp)
{ 
   CT_DRTI_SET_TRANSPARENT_SERVICE(ie.param_data.chanType, transp);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ChanType::GetTransparent()
{ 
    return CT_DRTI_GET_TYPE_OF_TRASNPARENCY(ie.param_data.chanType);
    
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetDataTransp(ITS_BOOLEAN isExt, ITS_OCTET rate, 
                                                 ITS_BOOLEAN transp)
{    
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetChanRateType() < 0x20)
        {           
            CT_DRTI_SET_RATE(ie.param_data.chanType, rate);
            CT_DRTI_SET_TRANSPARENT_SERVICE(ie.param_data.chanType, 
                                                               transp);

            if (GetTransparent() == 1)
            {
                isExt = 0x01;
                CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, 0, 
                                                                 isExt);
            }
            else if (GetTransparent() == 0)
            {
                isExt = 0x00;
                CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, 0, 
                                                                 isExt);
                ie.param_length -= 5;
            }
        }
        else if ((GetChanRateType() >= 0x20) && (GetChanRateType() <= 0x37))
        {           
            CT_DRTI_SET_RATE(ie.param_data.chanType, rate);
            CT_DRTI_SET_TRANSPARENT_SERVICE(ie.param_data.chanType, transp);
            CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, 0, isExt);

            if (isExt == 0)
            {
                ie.param_length -= 5;
            }
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      n: octet index, msut start from 0.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::GetDataTransp(ITS_BOOLEAN &isExt, ITS_OCTET &rate, 
                              ITS_BOOLEAN &transp)
{
    if (GetSpeechDataID() == CT_DATA) 
    {
        isExt = GetExtForData(0);
        transp = GetTransparent();
        rate = CT_DRTI_GET_RATE(ie.param_data.chanType);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetIFDateRate(ITS_BOOLEAN isExt, ITS_OCTET rate)
{    
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetExtForData(0) == 1)
        {
            CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, 1, isExt);
            CT_DRTI_SET_RIDR_ALLOWED(ie.param_data.chanType, rate);

            if (isExt == 0)
            {        
                ie.param_length -= 4;
            }
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::GetIFDateRate(ITS_BOOLEAN &isExt, ITS_OCTET &rate)
{    
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetExtForData(0) == 1)
        {
            isExt = GetExtForData(1);
            rate = CT_DRTI_GET_RIDR_ALLOWED(ie.param_data.chanType);
        }
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::SetAsymInd(ITS_BOOLEAN isExt, ITS_OCTET rate)
{    
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetExtForData(1) == 1)
        {
            CT_DRTI_SET_EXTENSION_BIT(ie.param_data.chanType, 2, isExt);
            CT_DRTI_SET_ASYMMETRY_IND(ie.param_data.chanType, rate);

            if (isExt == 0)
            {         
                ie.param_length -= 3;
            }
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanType::GetAsymInd(ITS_BOOLEAN &isExt, ITS_OCTET &rate)
{    
    if (GetSpeechDataID() == CT_DATA) 
    {
        if (GetExtForData(1) == 1)
        {
            isExt = GetExtForData(2);
            rate = CT_DRTI_GET_ASYMMETRY_IND(ie.param_data.chanType);
        }
    }
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChanType::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChanType::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ChanType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ChanType::Clone()
{
    BSSAP_ChanType *ret = new BSSAP_ChanType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------ 3.2.2.12 Periodicity ------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
 BSSAP_Period::BSSAP_Period()
    :BSSAP_Element(BSSAP_IEI_PERIODICITY)
{
    ie.param_length = sizeof(BSSAP_Periodicity);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Period::~BSSAP_Period()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Period::SetPeriod(ITS_OCTET period)
{
    P_SET_PERIODICITY(ie.param_data.periodicity, period);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Period::GetPeriod()
{
    return P_GET_PERIODICITY(ie.param_data.periodicity);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Period::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_Periodicity) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Period::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_Periodicity) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Periodicity IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Period::Clone()
{
    BSSAP_Period *ret = new BSSAP_Period();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ------------ 3.2.2.13 Extended Resource Indicator ----------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
 BSSAP_ExtResInd::BSSAP_ExtResInd()
    : BSSAP_Element(BSSAP_IEI_EXTENDED_RESOURCE_INDICATOR)
{
    ie.param_length = sizeof(BSSAP_ExtendedResourceIndicator);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ExtResInd::~BSSAP_ExtResInd()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ExtResInd::SetTARR(ITS_BOOLEAN tarr)
{
    ERI_SET_TARR(ie.param_data.extendedResInd, tarr);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ExtResInd::GetTARR()
{
    return ERI_GET_TARR(ie.param_data.extendedResInd);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ExtResInd::SetSM(ITS_BOOLEAN sm)
{
    ERI_SET_SM(ie.param_data.extendedResInd, sm);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ExtResInd::GetSM()
{
    return ERI_GET_SM(ie.param_data.extendedResInd);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ExtResInd::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ExtendedResourceIndicator) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ExtResInd::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ExtendedResourceIndicator) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ExtResInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ExtResInd::Clone()
{
    BSSAP_ExtResInd *ret = new BSSAP_ExtResInd();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.2.14 Total Resource Accessible ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
 BSSAP_TotResAcc::BSSAP_TotResAcc()
    : BSSAP_Element(BSSAP_IEI_TOTAL_RESOURCE_ACCESSIBLE)
{
    ie.param_length = sizeof(BSSAP_TotalResourceAccessible);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TotResAcc::~BSSAP_TotResAcc()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TotResAcc::SetFullRate(ITS_USHORT type)
{
    TRA_SET_FULL_RATE_CHANNELS(ie.param_data.totalResAccessible, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_TotResAcc::GetFullRate()
{ 
    return TRA_GET_FULL_RATE_CHANNELS(ie.param_data.totalResAccessible);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TotResAcc::SetHalfRate(ITS_USHORT type)
{
    TRA_SET_HALF_RATE_CHANNELS(ie.param_data.totalResAccessible, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_TotResAcc::GetHalfRate()
{ 
    return TRA_GET_HALF_RATE_CHANNELS(ie.param_data.totalResAccessible);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TotResAcc::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TotalResourceAccessible) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TotResAcc::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TotalResourceAccessible) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TotResAcc IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TotResAcc::Clone()
{
    BSSAP_TotResAcc *ret = new BSSAP_TotResAcc();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 3.2.2.15 LSA Identifier -----------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaId::BSSAP_LsaId()
    : BSSAP_Element(BSSAP_IEI_LSA_IDENTIFIER)
{
    ie.param_length = sizeof(BSSAP_LSAIdentifier);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaId::~BSSAP_LsaId()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaId::SetLSAIDBit1(ITS_BOOLEAN type)
{
    LSAID_SET_LSA_ID_BIT_1(ie.param_data.lsaId, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LsaId::GetLSAIDBit1()
{
    return LSAID_GET_LSA_ID_BIT_1(ie.param_data.lsaId);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaId::SetLSAID(ITS_UINT id)
{ 
    LSAID_SET_LSA_ID(ie.param_data.lsaId, id);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_UINT
BSSAP_LsaId::GetLSAID()
{
    return LSAID_GET_LSA_ID(ie.param_data.lsaId);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an LSA Identifier information element 
 *      into an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_LsaId::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaId::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_LSAIdentifier) +
                             2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LSA Identifier IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LsaId::Clone()
{
    BSSAP_LsaId *ret = new BSSAP_LsaId();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.16 LSA Identifier List -----------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaIdList::BSSAP_LsaIdList()
    : BSSAP_Element(BSSAP_IEI_LSA_IDENTIFIER_LIST), maxIndex(0)
{
    ie.param_length = sizeof(BSSAP_LSAIdentifierList) - 
                               sizeof(BSSAP_LSAIdentifier);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaIdList::~BSSAP_LsaIdList()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaIdList::SetEscapePLMN(ITS_BOOLEAN type)
{
    LSAIDL_SET_EP(ie.param_data.lsaIdList, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LsaIdList::GetEscapePLMN()
{
    return LSAIDL_GET_EP(ie.param_data.lsaIdList);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaIdList::SetLSAID(BSSAP_LSAIdentifier id, const int index)
{ 
    if (index < 0 || index > maxIndex)
    {
        exception ex;
        throw ex;  
    }
    else
    {
        ie.param_data.lsaIdList.lsa_id[index] = id;
 
        if (index == maxIndex)
        {
            maxIndex += 1;
            ie.param_length += sizeof(BSSAP_LSAIdentifier);
        }
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaIdList::GetLSAID(BSSAP_LSAIdentifier& id, const int index)
{
    if ( index >= 0 && index < maxIndex)
    {
        id = ie.param_data.lsaIdList.lsa_id[index];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaIdList::GetLSAIDCount()
{
    return maxIndex;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an LSA Identifier List information element 
 *      into an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_LsaIdList::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaIdList::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);
    maxIndex = (ie.param_length - 1) / sizeof(BSSAP_LSAIdentifier);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LSA Identifier List IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LsaIdList::Clone()
{
    BSSAP_LsaIdList *ret = new BSSAP_LsaIdList();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------------- 3.2.2.17 Cell Identifier -----------------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CellID::BSSAP_CellID()
    : BSSAP_Element(BSSAP_IEI_CELL_IDENTIFIER)
{
    ie.param_length = sizeof(BSSAP_CellIdentifier) -
                        sizeof(BSSAP_CellIDType);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CellID::~BSSAP_CellID()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CellID::SetCellIDDisc(ITS_OCTET type)
{
    CI_SET_CELL_ID_DISCRIMINATOR(ie.param_data.cellId, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CellID::GetCellIDDisc()
{
    return CI_GET_CELL_ID_DISCRIMINATOR(ie.param_data.cellId);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellID::SetCellID(BSSAP_CellIDType& cellID)
{
    ie.param_data.cellId.cell_id = cellID;

    int len;

    len = getCellIDLength(GetCellIDDisc());
    
    ie.param_length = sizeof(BSSAP_CellIdentifier) -
                        sizeof(BSSAP_CellIDType) + len;

    return (ITS_SUCCESS);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_CellID::GetCellID(BSSAP_CellIDType& cellID)
{
    cellID = ie.param_data.cellId.cell_id;

    return (ITS_SUCCESS);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellID::SetCellID(BSSAP_CellIdentifier& cellID)
{
    ie.param_data.cellId = cellID;

    int len;

    len = getCellIDLength(cellID.cell_id_discriminator);
    
    ie.param_length = sizeof(BSSAP_CellIdentifier) -
                        sizeof(BSSAP_CellIDType) + len;

    return (ITS_SUCCESS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellID::GetCellID(BSSAP_CellIdentifier& cellID)
{
    cellID = ie.param_data.cellId;

    return (ITS_SUCCESS);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellID::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellID::Decode(ITS_OCTET* buf, int& len)
{
    if (len <  sizeof(BSSAP_CellIdentifier) -
               sizeof(BSSAP_CellIDType) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CellID IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CellID::Clone()
{
    BSSAP_CellID *ret = new BSSAP_CellID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------------- 3.2.2.18 Priority --------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Prio::BSSAP_Prio()
    : BSSAP_Element(BSSAP_IEI_PRIORITY)
{
    ie.param_length = sizeof(BSSAP_Priority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Prio::~BSSAP_Prio()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Prio::SetPriority(ITS_OCTET type)
{
    P_SET_PRIORITY(ie.param_data.priority, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Prio::GetPriority()
{
    return P_GET_PRIORITY(ie.param_data.priority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Prio::SetQA(ITS_BOOLEAN type)
{
    P_SET_QUEUING(ie.param_data.priority, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Prio::GetQA()
{
    return P_GET_QUEUING(ie.param_data.priority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Prio::SetPVI(ITS_BOOLEAN type)
{
    P_SET_PREEMPTION_VULNERAIBILITY(ie.param_data.priority, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Prio::GetPVI()
{
    return P_GET_PREEMPTION_VULNERABILITY(ie.param_data.priority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Prio::SetPCI(ITS_BOOLEAN type)
{
    P_SET_PREEMPTION_CAPABILITY(ie.param_data.priority, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Prio::GetPCI()
{
    return P_GET_PREEMPTION_CAPABILITY(ie.param_data.priority);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Prio::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_Priority) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Prio::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_Priority) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Priority IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Prio::Clone()
{
    BSSAP_Prio *ret = new BSSAP_Prio();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.19 Classmark Information Type 2 ------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo2::BSSAP_ClassmarkInfo2()
    : BSSAP_Element(BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2)
{
    ie.param_length = sizeof(BSSAP_ClassmarkInfoType2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo2::~BSSAP_ClassmarkInfo2()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetRFPowerCap(ITS_OCTET type)
{
    CIT2_SET_RF_POWER_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo2::GetRFPowerCap()
{
    return CIT2_GET_RF_POWER_CAP(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetA51(ITS_BOOLEAN type)
{
    CIT2_SET_A5_1_IND(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetA51()
{
    return CIT2_GET_A5_1_IND(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetESIND(ITS_BOOLEAN type)
{
    CIT2_SET_ES_IND(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetESIND()
{
    return CIT2_GET_ES_IND(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetRevLevel(ITS_OCTET type)
{
    CIT2_SET_REV_LEVEL(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo2::GetRevLevel()
{
    return CIT2_GET_REV_LEVEL(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetFC(ITS_BOOLEAN type)
{
    CIT2_SET_FC(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetFC()
{
    return CIT2_GET_FC(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetVGCS(ITS_BOOLEAN type)
{
    CIT2_SET_VGCS_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetVGCS()
{
    return CIT2_GET_VGCS_CAP(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetVBS(ITS_BOOLEAN type)
{
    CIT2_SET_VBS_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetVBS()
{
    return CIT2_GET_VBS_CAP(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetSMCap(ITS_BOOLEAN type)
{
    CIT2_SET_SM_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetSMCap()
{
    return CIT2_GET_SM_CAP(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetSSSInd(ITS_OCTET type)
{
    CIT2_SET_SS_SCREEN_IND(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo2::GetSSSInd()
{
    return CIT2_GET_SS_SCREEN_IND(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetPSCap(ITS_BOOLEAN type)
{
    CIT2_SET_PS_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetPSCap()
{
    return CIT2_GET_PS_CAP(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetA52(ITS_BOOLEAN type)
{
    CIT2_SET_A5_2(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetA52()
{
    return CIT2_GET_A5_2(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetA53(ITS_BOOLEAN type)
{
    CIT2_SET_A5_3(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetA53()
{
    return CIT2_GET_A5_3(ie.param_data.classmarkInfo2);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetCMSP(ITS_BOOLEAN type)
{
    CIT2_SET_CMSP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetCMSP()
{
    return CIT2_GET_CMSP(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetSoLSA(ITS_BOOLEAN type)
{
    CIT2_SET_SOLSA(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetSoLSA()
{
    return CIT2_GET_SOLSA(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetLCSVACap(ITS_BOOLEAN type)
{
    CIT2_SET_LCS_VA_CAP(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetLCSVACap()
{
    return CIT2_GET_LCS_VA_CAP(ie.param_data.classmarkInfo2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo2::SetCM3(ITS_BOOLEAN type)
{
    CIT2_SET_CM3(ie.param_data.classmarkInfo2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo2::GetCM3()
{
    return CIT2_GET_CM3(ie.param_data.classmarkInfo2);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo2::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ClassmarkInfoType2) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo2::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ClassmarkInfoType2) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ClassmarkInfo2 IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ClassmarkInfo2::Clone()
{
    BSSAP_ClassmarkInfo2 *ret = new BSSAP_ClassmarkInfo2();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.2.20 Classmark Information Type 3 ------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo3::BSSAP_ClassmarkInfo3()
    : BSSAP_Element(BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3)
{
    ie.param_length = sizeof(BSSAP_ClassmarkInfoType3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo3::~BSSAP_ClassmarkInfo3()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        Batch set multiband supported.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMultiBand(ITS_OCTET type)
{     
    if (type == 0x03)
    {
        return;
    }
    else
    {
        CIT3_SET_MULTI_BAND_SUPPORT(ie.param_data.classmarkInfo3, type);
        if (type == 0x00)
        {
            ie.param_length -= 1;
        }
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        Batch get multiband supported.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetMultiBand()
{
   return CIT3_GET_MULTI_BAND_SUPPORT(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMultiBand1(ITS_BOOLEAN type)
{
    CIT3_SET_P_GSM_SUPPORT(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMultiBand1()
{
   return CIT3_GET_P_GSM_SUPPORT(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMultiBand2(ITS_BOOLEAN type)
{
    CIT3_SET_EorR_GSM_SUPPORT(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMultiBand2()
{
    return CIT3_GET_EorR_GSM_SUPPORT(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMultiBand3(ITS_BOOLEAN type)
{
    CIT3_SET_DCS1800_SUPPORT(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMultiBand3()
{
    return CIT3_GET_DCS1800_SUPPORT(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetA54(ITS_BOOLEAN type)
{
    CIT3_SET_ENCRIPTION_A54(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetA54()
{
    return CIT3_GET_ENCRIPTION_A54(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetA55(ITS_BOOLEAN type)
{
    CIT3_SET_ENCRIPTION_A55(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetA55()
{
    return CIT3_GET_ENCRIPTION_A55(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetA56(ITS_BOOLEAN type)
{
    CIT3_SET_ENCRIPTION_A56(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetA56()
{
    return CIT3_GET_ENCRIPTION_A56(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetA57(ITS_BOOLEAN type)
{
    CIT3_SET_ENCRIPTION_A57(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetA57()
{
   return CIT3_GET_ENCRIPTION_A57(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetRadioCap1(ITS_OCTET type)
{
    if (GetMultiBand() == 0x00)
    {
        return;
    }
    else 
    {
        CIT3_SET_ASS_RADIO_CAP1(ie.param_data.classmarkInfo3, type);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetRadioCap1()
{
    if (GetMultiBand() == 0x00)
    {
        return (ITS_ENOMEM);
    }
    else
    {
        return CIT3_GET_ASS_RADIO_CAP1(ie.param_data.classmarkInfo3);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetRadioCap2(ITS_OCTET type)
{
    if ((GetMultiBand() == 0x00) || (GetMultiBand() == 0x01) ||
        (GetMultiBand() == 0x02) || (GetMultiBand() == 0x04))
    {
        return;
    }
    else 
    {
        CIT3_SET_ASS_RADIO_CAP2(ie.param_data.classmarkInfo3, type);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetRadioCap2()
{
    if ((GetMultiBand() == 0x00) || (GetMultiBand() == 0x01) ||
        (GetMultiBand() == 0x02) || (GetMultiBand() == 0x04))
    {
       return (ITS_ENOMEM);
    }
    else
    {
        return CIT3_GET_ASS_RADIO_CAP2(ie.param_data.classmarkInfo3);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetRGSMCap(ITS_OCTET type)
{
    CIT3_SET_R_GSM_BAND_ASS_RADIO_CAP(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetRGSMCap()
{
    return CIT3_GET_R_GSM_BAND_ASS_RADIO_CAP(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMultiSlotClass(ITS_OCTET type)
{
   CIT3_SET_MULTI_SLOT_CLASS(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetMultiSlotClass()
{
   return CIT3_GET_MULTI_SLOT_CLASS(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetUCS2Treat(ITS_BOOLEAN type)
{
    CIT3_SET_UCS_2_TREATMENT(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetUCS2Treat()
{
    return CIT3_GET_UCS_2_TREATMENT(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetExtMeasCap(ITS_BOOLEAN type)
{
   CIT3_SET_EXT_MEAS_CAP(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetExtMeasCap()
{
   return CIT3_GET_EXT_MEAS_CAP(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetSMSValue(ITS_OCTET type)
{
   CIT3_SET_SMS_VALUE(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetSMSValue()
{
   return CIT3_GET_SMS_VALUE(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetSMValue(ITS_OCTET type)
{
   CIT3_SET_SM_VALUE(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo3::GetSMValue()
{
   return CIT3_GET_SM_VALUE(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMSConGPS(ITS_BOOLEAN type)
{
   CIT3_SET_CONVENTIONAL_GPS(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMSConGPS()
{
   return CIT3_GET_CONVENTIONAL_GPS(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMSBasedGPS(ITS_BOOLEAN type)
{
   CIT3_SET_MS_BASED_GPS(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMSBasedGPS()
{
   return CIT3_GET_MS_BASED_GPS(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMSAssistedGPS(ITS_BOOLEAN type)
{
   CIT3_SET_MS_ASSISTED_GPS(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMSAssistedGPS()
{
   return CIT3_GET_MS_ASSISTED_GPS(ie.param_data.classmarkInfo3);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMSBasedEOTD(ITS_BOOLEAN type)
{
   CIT3_SET_MS_BASED_E_OTD(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMSBasedEOTD()
{
   return CIT3_GET_MS_BASED_E_OTD(ie.param_data.classmarkInfo3);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo3::SetMSAssistedEOTD(ITS_BOOLEAN type)
{
    CIT3_SET_MS_ASSISTED_E_OTD(ie.param_data.classmarkInfo3, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo3::GetMSAssistedEOTD()
{
   return CIT3_GET_MS_ASSISTED_E_OTD(ie.param_data.classmarkInfo3);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo3::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo3::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
       
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ClassmarkInfo3 IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ClassmarkInfo3::Clone()
{
    BSSAP_ClassmarkInfo3 *ret = new BSSAP_ClassmarkInfo3();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.21 Interference Band To Be Usede ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
 BSSAP_InterBandToBeUsed::BSSAP_InterBandToBeUsed()
    : BSSAP_Element(BSSAP_IEI_INTERFERENCE_BAND_TO_BE_USED)
{
    ie.param_length = sizeof(BSSAP_BandToBeUsed);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_InterBandToBeUsed::~BSSAP_InterBandToBeUsed()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_InterBandToBeUsed::SetBandToBeUsed(ITS_OCTET type)
{
    P_SET_BAND_TO_BE_USED(ie.param_data.bandToBeUsed, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_InterBandToBeUsed::GetBandToBeUsed()
{
    return P_GET_BAND_TO_BE_USED(ie.param_data.bandToBeUsed);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_InterBandToBeUsed::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_BandToBeUsed) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_InterBandToBeUsed::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_BandToBeUsed) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a InterBandToBeUsed IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_InterBandToBeUsed::Clone()
{
    BSSAP_InterBandToBeUsed *ret = new BSSAP_InterBandToBeUsed();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------- 3.2.2.22 RR Cause ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RRcause::BSSAP_RRcause()
    : BSSAP_Element(BSSAP_IEI_RR_CAUSE)
{
    ie.param_length = sizeof(BSSAP_RRCause);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RRcause::~BSSAP_RRcause()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_RRcause::SetRRCause(ITS_OCTET type)
{
  //P_SET_RR_CAUSE(ie.param_data.rr_cause, type);
ie.param_data.rrCause.rr_cause = type;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_RRcause::GetRRCause()
{
    //return P_GET_RR_CAUSE(ie.param_data.rrCause);
return (ie.param_data.rrCause.rr_cause);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RRcause::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_RRCause) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RRcause::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a RRCause IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_RRcause::Clone()
{
    BSSAP_RRcause *ret = new BSSAP_RRcause();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.23 LSA Information -----------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaInfo::BSSAP_LsaInfo()
    : BSSAP_Element(BSSAP_IEI_LSA_INFORMATION), maxIndex(0)
{
    ie.param_length = sizeof(BSSAP_LSAInfo) - sizeof(BSSAP_LSA);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaInfo::~BSSAP_LsaInfo()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaInfo::SetLSAIndicator(ITS_BOOLEAN type)
{
    LSAI_SET_LSA_INDICATOR(ie.param_data.lsaInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LsaInfo::GetLSAIndicator()
{
    return LSAI_GET_LSA_INDICATOR(ie.param_data.lsaInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaInfo::SetLSAID(BSSAP_LSA lsa, const int index)
{ 
    if (index < 0 || index > maxIndex)
    {
        exception ex;
        throw ex;  
    }
    else
    {
        ie.param_data.lsaInfo.lsa_info[index] = lsa;
 
        if (index == maxIndex)
        {
            maxIndex += 1;
            ie.param_length += sizeof(BSSAP_LSA);
        }
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaInfo::GetLSAID(BSSAP_LSA& lsa, const int index)
{
    if ( index >= 0 && index < maxIndex)
    {
        lsa = ie.param_data.lsaInfo.lsa_info[index];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaInfo::GetLSAIDCount()
{
    int ret = 0;

    if (maxIndex != 0)
    {
        ret = maxIndex;
    }

    return ret;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an LSAInformation information element into 
 *      an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_LsaInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaInfo::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    maxIndex = (ie.param_length - 1) / sizeof(BSSAP_LSA);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LSA Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LsaInfo::Clone()
{
    BSSAP_LsaInfo *ret = new BSSAP_LsaInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.24 Layer 3 Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3Info::BSSAP_L3Info()
    : BSSAP_Element(BSSAP_IEI_LAYER3_INFORMATION)
{
    ie.param_length = sizeof(BSSAP_Layer3Info) - 1;
    haveL3Info = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3Info::~BSSAP_L3Info()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3Info::SetL3Info(ITS_OCTET* type, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.layer3Info.layer3_info, type, len);

    haveL3Info = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3Info::GetL3Info(ITS_OCTET* buf, int& len)
{
    if (!haveL3Info)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.layer3Info) - 1);
    memcpy(buf, ie.param_data.layer3Info.layer3_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3Info::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3Info::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.layer3Info) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.layer3Info) - 1)))
    {
        haveL3Info = true;
    }
    else
    {
        haveL3Info = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a L3Info IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_L3Info::Clone()
{
    BSSAP_L3Info *ret = new BSSAP_L3Info();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.25 DLCI ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_dlci::BSSAP_dlci()
    : BSSAP_Element(BSSAP_IEI_DLCI)
{
    ie.param_length = sizeof(BSSAP_DLCI);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_dlci::~BSSAP_dlci()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_dlci::SetCtrlChan(ITS_OCTET type)
{
    DLCI_SET_CONTROL_CHANNEL(ie.param_data.dlci, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_dlci::GetCtrlChan()
{
    return DLCI_GET_CONTROL_CHANNEL(ie.param_data.dlci);
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_dlci::SetSAPI(ITS_OCTET type)
{
    DLCI_SET_SAPI(ie.param_data.dlci, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_dlci::GetSAPI()
{
    return DLCI_GET_SAPI(ie.param_data.dlci);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_dlci::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_DLCI) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_dlci::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_DLCI) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a DLCI IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_dlci::Clone()
{
    BSSAP_dlci *ret = new BSSAP_dlci();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.26 Downlink DTX Flag ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DLDTXFlag::BSSAP_DLDTXFlag()
    : BSSAP_Element(BSSAP_IEI_DOWNLINK_DTX_FLAG)
{
    ie.param_length = sizeof(BSSAP_DownlinkDTX);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DLDTXFlag::~BSSAP_DLDTXFlag()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DLDTXFlag::SetDTXFlag(ITS_BOOLEAN type)
{
    DLDTX_SET_DOWNLINK(ie.param_data.downLinkDTX, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_DLDTXFlag::GetDTXFlag()
{
    return DLDTX_GET_DOWNLINK(ie.param_data.downLinkDTX);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DLDTXFlag::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_DownlinkDTX) +
                      2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DLDTXFlag::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_DownlinkDTX) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a DLDTXFlag IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_DLDTXFlag::Clone()
{
    BSSAP_DLDTXFlag *ret = new BSSAP_DLDTXFlag();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.27 Cell Identifier List -----------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CellIDList::BSSAP_CellIDList()
    : BSSAP_Element(BSSAP_IEI_CELL_IDENTIFIER_LIST), maxIndex(-1)
{
    ie.param_length = sizeof(ie.param_data.cellIdList) -
                                         sizeof(BSSAP_CellIDT);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CellIDList::~BSSAP_CellIDList()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CellIDList::SetCellIDListDisc(ITS_OCTET type)
{
    CIL_SET_CELL_ID_DISCRIMINATOR(ie.param_data.cellIdList, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CellIDList::GetCellIDListDisc()
{
    return CIL_GET_CELL_ID_DISCRIMINATOR(ie.param_data.cellIdList);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CellIDList::AddCellID(BSSAP_CellIDT cid)
{
    if (maxIndex == -1)
    {
        maxIndex++;
    }

    if (maxIndex * sizeof(BSSAP_CellIDT) > sizeof(ie.param_data))
    {
        exception ex;

        throw ex;
    }

    ie.param_data.cellIdList.cell_id[maxIndex] = cid;
    maxIndex++;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CellIDList::SetCellID(BSSAP_CellIDT cid, const int n)
{
    if (n < 0 || n * sizeof(BSSAP_CellIDT) > sizeof(ie.param_data)) 
    {
        exception ex;
        throw ex;        
    }

    ie.param_data.cellIdList.cell_id[n] = cid;
    
    if (n >= maxIndex)
    {
        maxIndex = n + 1;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CellIDList::GetCellID(BSSAP_CellIDT& cid, const int n)
{
    if ( n >= 0 && n < maxIndex)
    {
        cid = ie.param_data.cellIdList.cell_id[n];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellIDList::GetCellIDCount()
{
    int ret = 0;

    if (maxIndex != -1)
    {
        ret = maxIndex;
    }

    return ret;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_CellIDList::Encode(ITS_OCTET* buf, int& len)
{
    if (maxIndex < 0)
    {
        return (ITS_ENOMEM);
    }

    int tlen = getCellIDListLen
               (CIL_GET_CELL_ID_DISCRIMINATOR(ie.param_data.cellIdList));
    
    int totlen = tlen * (maxIndex);

    // set total length of the information element
    ie.param_length = 
        sizeof(CIL_GET_CELL_ID_DISCRIMINATOR(ie.param_data.cellIdList)) 
                           + totlen;

    // copy param id and length
    buf[0] = ie.param_id;
    buf[1] = ie.param_length;

    // copy in everything from the IE except for the array
    totlen = sizeof(CIL_GET_CELL_ID_DISCRIMINATOR(ie.param_data.cellIdList));
    memcpy(&buf[2 * sizeof(ITS_OCTET)], &ie.param_data, totlen);

    // copy in each member of the array
    ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET) + totlen];
    for (int i = 0; i <= maxIndex; i++)
    {
        memcpy(ptr, &ie.param_data.cellIdList.cell_id[i], tlen);
        ptr += tlen;
    }

    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CellIDList::Decode(ITS_OCTET* buf, int& len)
{
    if (len < 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    if (len == 2 * sizeof(ITS_OCTET))
    {
        ie.param_id = buf[0];
        ie.param_length = buf[1];

        return (ITS_SUCCESS);
    }

    ITS_OCTET   cidDisc = buf[2];
    int tlen = getCellIDListLen(cidDisc);

    int fixLength = sizeof(cidDisc);

    ie.param_id = buf[0];
    ie.param_length = buf[1];

    // copy in everything from the IE except for the array
    memcpy(&ie.param_data, &buf[2 * sizeof(ITS_OCTET)], fixLength);

    if (tlen > 0)
    {
        maxIndex = (ie.param_length - fixLength) / tlen;
        // copy in each member of the array
        ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET) + fixLength];
        for (int i = 0; i < maxIndex; i++)
        {
            memcpy(&ie.param_data.cellIdList.cell_id[i], ptr, tlen);
            ptr += tlen;
        }
    }

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CellIDList IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CellIDList::Clone()
{
    BSSAP_CellIDList *ret = new BSSAP_CellIDList();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* -------- 3.2.2.28 Response Request ------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RspReq::BSSAP_RspReq()
    : BSSAP_Element(BSSAP_IEI_RESPONSE_REQUEST)
{
     ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RspReq::~BSSAP_RspReq()
{
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RspReq::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RspReq::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a RspReq IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_RspReq::Clone()
{
    BSSAP_RspReq *ret = new BSSAP_RspReq();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.29 Resource Indication Method ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResIndMethod::BSSAP_ResIndMethod()
    : BSSAP_Element(BSSAP_IEI_RESOURCE_INDICATION_METHOD)
{
    ie.param_length = sizeof(ie.param_data.resourceIndMethod);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResIndMethod::~BSSAP_ResIndMethod()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ResIndMethod::SetResIndMethod(ITS_OCTET type)
{
    RIM_SET_RES_IND_METHOD(ie.param_data.resourceIndMethod, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ResIndMethod::GetResIndMethod()
{
    return RIM_GET_RES_IND_METHOD(ie.param_data.resourceIndMethod);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResIndMethod::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ResourceIndMethod) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResIndMethod::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ResourceIndMethod) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ResourceIndicationMethod IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ResIndMethod::Clone()
{
    BSSAP_ResIndMethod *ret = new BSSAP_ResIndMethod();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.30 Classmark Information Type 1 -------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo1::BSSAP_ClassmarkInfo1()
    : BSSAP_Element(BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1)
{
    ie.param_length = sizeof(BSSAP_ClassmarkInfoType1);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkInfo1::~BSSAP_ClassmarkInfo1()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo1::SetRFPowerCap(ITS_OCTET type)
{
    CIT1_SET_RF_POWER_CAP(ie.param_data.classmarkInfo1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo1::GetRFPowerCap()
{
    return CIT1_GET_RF_POWER_CAP(ie.param_data.classmarkInfo1);
}


// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo1::SetA51(ITS_BOOLEAN type)
{
    CIT1_SET_A5_1_IND(ie.param_data.classmarkInfo1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo1::GetA51()
{
    return CIT1_GET_A5_1_IND(ie.param_data.classmarkInfo1);
}


// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo1::SetESIND(ITS_BOOLEAN type)
{
    CIT1_SET_ES_IND(ie.param_data.classmarkInfo1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkInfo1::GetESIND()
{
    return CIT1_GET_ES_IND(ie.param_data.classmarkInfo1);
}


// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClassmarkInfo1::SetRevLevel(ITS_OCTET type)
{
    CIT1_SET_REV_LEVEL(ie.param_data.classmarkInfo1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClassmarkInfo1::GetRevLevel()
{
    return CIT1_GET_REV_LEVEL(ie.param_data.classmarkInfo1);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo1::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ClassmarkInfoType1);// +
                //2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClassmarkInfo1::Decode(ITS_OCTET* buf, int& len)
{
    /*if (len != sizeof(BSSAP_ClassmarkInfoType1) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }*/
    //ie.param_id = buf[0];
    //ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[0], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ClassmarkInfo1 IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ClassmarkInfo1::Clone()
{
    BSSAP_ClassmarkInfo1 *ret = new BSSAP_ClassmarkInfo1();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ------------ 3.2.2.31 Circuit Identity Code List ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktIDCodeList::BSSAP_CktIDCodeList()
    : BSSAP_Element(BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST)
{
    ie.param_length = sizeof(ie.param_data.circuitIdCodeList) - 1;
    haveRange = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktIDCodeList::~BSSAP_CktIDCodeList()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCodeList::SetRange(ITS_OCTET range)
{
    if (range < 0 || range > 255)
    {
        return;
    }
    else
    {
        CCL_SET_RANGE(ie.param_data.circuitIdCodeList, range);
        haveRange = true;
    }
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CktIDCodeList::GetRange()
{
    if (haveRange)
    {
        return CCL_GET_RANGE(ie.param_data.circuitIdCodeList);
    }
    else
    {
       return (ITS_ENOMEM);
    }
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCodeList::SetStatusBit(ITS_BOOLEAN type, int bitn)
{
    int nb, no;
    ITS_UINT mask;

    if (!haveRange)
    {
        return;
    }

    if ( bitn > CCL_GET_RANGE(ie.param_data.circuitIdCodeList) +1)
    {
        return;
    }

    nb = (bitn % 8) + 1;    
    no = (bitn / 8 );

    mask = (1 << (nb - 1));

    // put status in proper octet # and bit position
    ie.param_data.circuitIdCodeList.status[no] |= 
        ((type << (nb - 1)) & mask);

    ie.param_length = sizeof(ie.param_data.circuitIdCodeList) + no;

}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CktIDCodeList::GetStatusBit(int bitn)
{
    int nb, no;
    ITS_OCTET mask = 0x01U;

    if (bitn > CCL_GET_RANGE(ie.param_data.circuitIdCodeList) +1)
    {
        return (ITS_ENOMEM);
    }

    nb = (bitn % 8) + 1;   
    no = (bitn / 8);
    
    return ((ie.param_data.circuitIdCodeList.status[no]) >> 
                                                 (nb - 1)) & mask;

}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCodeList::SetStatus(ITS_OCTET* buf, int len)
{
    if (!haveRange)
    {
        return;
    }

    if (len > CCL_GET_RANGE(ie.param_data.circuitIdCodeList) + 1)
    {
        return;
    }

    memcpy(ie.param_data.circuitIdCodeList.status, buf, len);
    ie.param_length += len;
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktIDCodeList::GetStatus(ITS_OCTET* buf, int& len)
{
    len = ie.param_length - (sizeof(ie.param_data.circuitIdCodeList) - 1);
    memcpy(buf, ie.param_data.circuitIdCodeList.status, len);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktIDCodeList::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktIDCodeList::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.circuitIdCodeList) - 1)))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCodeList IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CktIDCodeList::Clone()
{
    BSSAP_CktIDCodeList *ret = new BSSAP_CktIDCodeList();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 3.2.2.32 Diagnostics ---------- */
 // Constructor and destructor
 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Diagn::BSSAP_Diagn()
    : BSSAP_Element(BSSAP_IEI_DIAGNOSTICS)
{
    ie.param_length = sizeof(BSSAP_Diagnostics) - 1;
    haveMsgRcvd = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Diagn::~BSSAP_Diagn()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Diagn::SetErrPtr(ITS_OCTET err)
{
    DIAG_SET_ERROR_POINTER(ie.param_data.diagnostics, err);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Diagn::GetErrPtr()
{
    return DIAG_GET_ERROR_POINTER(ie.param_data.diagnostics);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Diagn::SetBitPtr(ITS_OCTET bit)
{
    DIAG_SET_ERROR_BIT_POSITION(ie.param_data.diagnostics, bit);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Diagn::GetBitPtr()
{
    return DIAG_GET_ERROR_BIT_POSITION(ie.param_data.diagnostics);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Diagn::SetMsgRcvd(ITS_OCTET* buf, int len)
{   
    ie.param_length += len;
    memcpy(ie.param_data.diagnostics.message_received, buf, len);
    haveMsgRcvd = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Diagn::GetMsgRcvd(ITS_OCTET* buf, int &len)
{
    if (!haveMsgRcvd)
    {
        len = 0;

        return;
    }
    len = ie.param_length -
          (sizeof(ie.param_data.diagnostics) - 1);

    memcpy(buf, ie.param_data.diagnostics.message_received, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Diagn::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Diagn::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.diagnostics) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.diagnostics) - 1)))
    {
        haveMsgRcvd = true;
    }
    else
    {
        haveMsgRcvd = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Diagnostics IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Diagn::Clone()
{
    BSSAP_Diagn *ret = new BSSAP_Diagn();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 3.2.2.33 Chosen Channel ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChsChan::BSSAP_ChsChan()
    : BSSAP_Element(BSSAP_IEI_CHOSEN_CHANNEL)
{
    ie.param_length = sizeof(BSSAP_ChosenChannel);
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChsChan::~BSSAP_ChsChan()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChsChan::SetChan(ITS_USHORT type)
{
    CC_SET_CHANNEL(ie.param_data.chosenChannel, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_ChsChan::GetChan()
{
    return CC_GET_CHANNEL(ie.param_data.chosenChannel);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChsChan::SetChanMode(ITS_OCTET type)
{
    CC_SET_CHANNEL_MODE(ie.param_data.chosenChannel, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ChsChan::GetChanMode()
{
    return CC_GET_CHANNEL_MODE(ie.param_data.chosenChannel);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChsChan::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ChosenChannel) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChsChan::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ChosenChannel) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ChsChan IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ChsChan::Clone()
{
    BSSAP_ChsChan *ret = new BSSAP_ChsChan();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.34 Cipher Response Mode ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherRspMode::BSSAP_CipherRspMode()
    : BSSAP_Element(BSSAP_IEI_CIPHER_RESPONSE_MODE)
{
    ie.param_length = sizeof(BSSAP_CipherResponseMode);
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherRspMode::~BSSAP_CipherRspMode()
{
}

 // access methods
 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CipherRspMode::SetCipherRspMode(ITS_BOOLEAN type)
{
    CRM_SET_INDICATOR(ie.param_data.cipherResponseMode, type);
}

 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CipherRspMode::GetCipherRspMode()
{
    return CRM_GET_INDICATOR(ie.param_data.cipherResponseMode);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CipherRspMode::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_CipherResponseMode) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CipherRspMode::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_CipherResponseMode) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CipherRspMode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CipherRspMode::Clone()
{
    BSSAP_CipherRspMode *ret = new BSSAP_CipherRspMode();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------ 3.2.2.35 Layer 3 Messge Contents -------------- */
 // Constructor and destructor
 /*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3MsgCnt::BSSAP_L3MsgCnt()
    : BSSAP_Element(BSSAP_IEI_LAYER3_MESSAGE_CONTENT)
{
    ie.param_length = sizeof(BSSAP_L3MessageContents) - 1;
    haveMsgCnt = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_L3MsgCnt::~BSSAP_L3MsgCnt()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3MsgCnt::SetL3MsgCnt(ITS_OCTET* buf, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.l3MsgContents.l3MsgCnt, buf, len);
    haveMsgCnt = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_L3MsgCnt::GetL3MsgCnt(ITS_OCTET* buf, int& len)
{
    if (!haveMsgCnt)
    {
        len = 0;

        return;
    }

    len = ie.param_length - (sizeof(ie.param_data.l3MsgContents) - 1);
    
    memcpy(buf, ie.param_data.l3MsgContents.l3MsgCnt, len);
   
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3MsgCnt::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);

    return 0;
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_L3MsgCnt::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.l3MsgContents) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.l3MsgContents) - 1)))
    {
        haveMsgCnt = true;
    }
    else
    {
        haveMsgCnt = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a L3MsgCnt IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_L3MsgCnt::Clone()
{
    BSSAP_L3MsgCnt *ret = new BSSAP_L3MsgCnt();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------ 3.2.2.36 Channel Needed -------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChanNeeded::BSSAP_ChanNeeded()
    : BSSAP_Element(BSSAP_IEI_CHANNEL_NEEDED)
{
    ie.param_length = sizeof(BSSAP_ChannelNeeded);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChanNeeded::~BSSAP_ChanNeeded()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChanNeeded::SetChan(ITS_OCTET type)
{
    CN_CHANNEL_SET_CHANNEL_NEEDED(ie.param_data.channelNeeded, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ChanNeeded::GetChan()
{
    return CN_CHANNEL_GET_CHANNEL_NEEDED(ie.param_data.channelNeeded);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChanNeeded::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ChannelNeeded) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChanNeeded::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ChannelNeeded) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ChanNeeded IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ChanNeeded::Clone()
{
    BSSAP_ChanNeeded *ret = new BSSAP_ChanNeeded();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.37 Trace Type ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TraceTyp::BSSAP_TraceTyp()
    : BSSAP_Element(BSSAP_IEI_TRACE_TYPE)
{
    ie.param_length = sizeof(BSSAP_TraceType);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TraceTyp::~BSSAP_TraceTyp()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TraceTyp::SetInvEvnt(ITS_OCTET type)
{
    TT_SET_INVOKE_EVENTS(ie.param_data.traceType, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TraceTyp::GetInvEvnt()
{
    return TT_GET_INVOKE_EVENTS(ie.param_data.traceType);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TraceTyp::SetMSCRecType(ITS_OCTET type)
{
    TT_SET_MSC_RECORD_TYPE(ie.param_data.traceType, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TraceTyp::GetMSCRecType()
{
    return TT_GET_MSC_RECORD_TYPE(ie.param_data.traceType);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TraceTyp::SetBSSRecType(ITS_OCTET type)
{
    TT_SET_BSS_RECORD_TYPE(ie.param_data.traceType, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TraceTyp::GetBSSRecType()
{
    return TT_GET_BSS_RECORD_TYPE(ie.param_data.traceType);
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TraceTyp::SetPrioInd(ITS_BOOLEAN type)
{
    TT_SET_PRI_IND(ie.param_data.traceType, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_TraceTyp::GetPrioInd()
{
    return TT_GET_PRI_IND(ie.param_data.traceType);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TraceTyp::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TraceType) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TraceTyp::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TraceType) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TraceType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TraceTyp::Clone()
{
    BSSAP_TraceTyp *ret = new BSSAP_TraceTyp();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.38 TriggerID ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TrigID::BSSAP_TrigID()
    : BSSAP_Element(BSSAP_IEI_TRIGGER_ID)
{
    ie.param_length = sizeof(BSSAP_TriggerID) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TrigID::~BSSAP_TrigID()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TrigID::SetEntityID(ITS_OCTET* buff, int len)
{
    if (len > 0 && len < 21)
    {
        ie.param_length += len;
        memcpy(ie.param_data.triggerId.entityId, buff, len);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TrigID::GetEntityID(ITS_OCTET* buff, int& len)
{
    len = ie.param_length - (sizeof(ie.param_data.triggerId) - 1);
    if (len == 0)
        return;

    memcpy(buff, ie.param_data.triggerId.entityId, len);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TrigID::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TrigID::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.triggerId) - 1)))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TriggerID IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TrigID::Clone()
{
    BSSAP_TrigID *ret = new BSSAP_TrigID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.39 Trace Reference ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TraceRef::BSSAP_TraceRef()
    : BSSAP_Element(BSSAP_IEI_TRACE_REFERENCE)
{
    ie.param_length = sizeof(BSSAP_TraceReference);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TraceRef::~BSSAP_TraceRef()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TraceRef::SetTraceRef(ITS_USHORT type)
{
    TR_SET_TRACE_REFERENCE(ie.param_data.traceRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_TraceRef::GetTraceRef()
{
    return TR_GET_TRACE_REFERENCE(ie.param_data.traceRef);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TraceRef::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TraceReference) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TraceRef::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TraceReference) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TraceRef IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TraceRef::Clone()
{
    BSSAP_TraceRef *ret = new BSSAP_TraceRef();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.2.40 TransactionID ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TransactionID::BSSAP_TransactionID()
    : BSSAP_Element(BSSAP_IEI_TRANSACTION_ID)
{
    ie.param_length = sizeof(BSSAP_TransactionId);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TransactionID::~BSSAP_TransactionID()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TransactionID::SetTransNo(ITS_USHORT type)
{
    TI_SET_TRANSACTION_ID(ie.param_data.transactionId, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_TransactionID::GetTransNo()
{
    return TI_GET_TRANSACTION_ID(ie.param_data.transactionId);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TransactionID::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TransactionId) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TransactionID::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TransactionId) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TransactionID IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TransactionID::Clone()
{
    BSSAP_TransactionID *ret = new BSSAP_TransactionID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.41 Mobile Identity ---------- */ 

// Incomplete

// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MobileID::BSSAP_MobileID()
    : BSSAP_Element(BSSAP_IEI_MOBILE_IDENTITY)
{
    ie.param_length = sizeof(ie.param_data.mobileId) - 1;
    haveIdDgts = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MobileID::~BSSAP_MobileID()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::SetOddEvenInd(ITS_OCTET type)
{
    MI_SET_ODD_EVEN_IND(ie.param_data.mobileId, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MobileID::GetOddEvenInd()
{
    return MI_GET_ODD_EVEN_IND(ie.param_data.mobileId);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::SetTypeIdentity(ITS_OCTET type)
{
    MI_SET_TYPE_IDENTITY(ie.param_data.mobileId, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MobileID::GetTypeIdentity()
{
    return MI_GET_TYPE_IDENTITY(ie.param_data.mobileId);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void 
BSSAP_MobileID::SetIdenCDig(char* setdig, int len)
{
    if (len < 1 )
    {
        exception ex;

        throw ex;
    }

    ie.param_data.mobileId.data_3field &= 0x0F;

    SetOddEvenInd(len%2);

    ie.param_length += len / 2;

    //first digit
    ie.param_data.mobileId.data_3field |=
         (((setdig[0] - '0') & 0x0F) << 4) & 0xF0;

    bool isOdd;
    for (int i = 1; i < len; i++)
    {
        isOdd = (i & 1);
        if (isOdd)
        {
            ie.param_data.mobileId.digit[i>>1] = setdig[i] - '0';
        }
        else
        {
            ie.param_data.mobileId.digit[(i>>1) - 1] |=
                ((setdig[i] - '0') & 0x0F) << 4;
        }
    }

    if (!GetOddEvenInd()) //if even
    {
        ie.param_data.mobileId.digit[(len>>1) - 1] |= 0xF0;
    }

    haveIdDgts = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::SetIdenBDig(ITS_OCTET* setdig, int ndigits)
{
    if (ndigits < 1 )
    {
        exception ex;

        throw ex;
    }

    ie.param_data.mobileId.data_3field &= 0x0F;

    SetOddEvenInd(ndigits%2);    

    ie.param_length += ndigits / 2;

    //first digit
    ie.param_data.mobileId.data_3field |= (setdig[0] & 0x0F) << 4;
    
    for (int i = 0; i < (ndigits / 2); i++)
    {
        ITS_OCTET      temp = (setdig[i] & 0xF0) >> 4;
        temp |= (setdig[i + 1] & 0x0F) << 4;

        ie.param_data.mobileId.digit[i] = temp;
    }

    if (!GetOddEvenInd()) //if even
    {
        ie.param_data.mobileId.digit[(ndigits >> 1) - 1] |= 0xF0;
    }

    haveIdDgts = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::ClearIdenDigits(int len)
{
    if (!haveIdDgts )
    {
        exception ex;

        throw ex;
    }

    ie.param_length -= len / 2;

    haveIdDgts = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::GetIdenCDig(char* getdig, int& len)
{
    if (!haveIdDgts)
    {
        exception ex;

        throw ex;
    }

    // the number of bytes in the MID encoded string
    int tlen = ie.param_length - 
              (sizeof(BSSAP_MobileIdentity) - sizeof(ITS_OCTET));

    // the number of ASCII characters in the decoded string

    if (GetOddEvenInd()) //odd digits
    {
        len = tlen * 2  + 1;
    }
    else  //even digits
    {
        len = tlen * 2;
    }

    getdig[0] = ((ie.param_data.mobileId.data_3field >> 4) & 0x0F) + '0';
    bool isOdd;

    // build the ASCII string
    int i;
    for (i = 1; i < len; i++)
    {
        isOdd = (i & 1);

        if (isOdd)
        {
            getdig[i] = (ie.param_data.mobileId.digit[i>>1] & 0x0F) + '0';
        }
        else
        {
            getdig[i] = ((ie.param_data.mobileId.digit[(i>>1) - 1]
                        >> 4) & 0x0F) + '0';
        }
    }
    // (nul) terminate the ASCII string
    getdig[i] = 0;

    haveIdDgts = false;

}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MobileID::GetIdenBDig(ITS_OCTET* getdig, int& nDigits)
{
    if (!haveIdDgts )
    {
        exception ex;

        throw ex;
    }

    // the number of bytes in the MID encoded string
    int tlen = ie.param_length - (sizeof(BSSAP_MobileIdentity) - 1);    

    getdig[0] = (ie.param_data.mobileId.data_3field & 0xF0) >> 4;  

    int i;
    for (i = 0; i < tlen; i++)
    {
        getdig[i] |= (ie.param_data.mobileId.digit[i] & 0x0F) << 4;
        getdig[i + 1] = (ie.param_data.mobileId.digit[i] & 0xF0) >> 4;
    }

    // the number of digits in the decoded string
    if (GetOddEvenInd()) //odd digits
    {
        nDigits = tlen * 2  + 1;
        getdig[i] = (ie.param_data.mobileId.digit[i - 1] & 0xF0) >> 4;
        i++;
    }
    else  //even digits
    {
        nDigits = tlen * 2;
    }    
    
    haveIdDgts = false;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MobileID::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MobileID::Decode(ITS_OCTET* buf, int& len)
{
/*    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.mobileId) - 1)))
    {
        return (ITS_ENOMEM);
    }*/

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.mobileId) - 1)))
    {
        haveIdDgts = true;
    }
    else  //assume always > 1 digits if there are any
    {
        haveIdDgts = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a AuthConfParm IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_MobileID::Clone()
{
    BSSAP_MobileID *ret = new BSSAP_MobileID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ------------- 3.2.2.42 OMCID -------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_OMCID::BSSAP_OMCID()
    : BSSAP_Element(BSSAP_IEI_OMC_ID)
{
    ie.param_length = sizeof(BSSAP_Omcid) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_OMCID::~BSSAP_OMCID()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_OMCID::SetOMCID(ITS_OCTET* buff, int len)
{
    if (len > 0 && len < 21)
    {
        ie.param_length += len;
        memcpy(ie.param_data.omcid.omcId, buff, len);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_OMCID::GetOMCID(ITS_OCTET* buff, int& len)
{
    len = ie.param_length - (sizeof(ie.param_data.omcid) - 1);
    if (len == 0)
        return;

    memcpy(buff, ie.param_data.omcid.omcId, len);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_OMCID::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_OMCID::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.omcid) - 1)))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LocAreaID IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_OMCID::Clone()
{
    BSSAP_OMCID *ret = new BSSAP_OMCID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.43 Forward Indicator ------------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_FwdInd::BSSAP_FwdInd()
    : BSSAP_Element(BSSAP_IEI_FORWARD_INDICATOR)
{
    ie.param_length = sizeof(BSSAP_ForwardInd);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_FwdInd::~BSSAP_FwdInd()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_FwdInd::SetFwdInd(ITS_OCTET type)
{
    FI_FORWARD_SET_INDICATOR(ie.param_data.forwardInd, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_FwdInd::GetFwdInd()
{
    return FI_FORWARD_GET_INDICATOR(ie.param_data.forwardInd);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_FwdInd::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ForwardInd) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_FwdInd::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ForwardInd) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a FwdInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_FwdInd::Clone()
{
    BSSAP_FwdInd *ret = new BSSAP_FwdInd();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------- 3.2.2.44 Chosen Encryption Algorithm --------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChsEncAlg::BSSAP_ChsEncAlg()
    : BSSAP_Element(BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM)
{
    ie.param_length = sizeof(BSSAP_ChosenEncrptAlgorithm);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChsEncAlg::~BSSAP_ChsEncAlg()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ChsEncAlg::SetAlgorithmID(ITS_OCTET type)
{
    CEA_SET_ENCRYPTION_ID(ie.param_data.chosenEncryptAlgorithm, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ChsEncAlg::GetAlgorithmID()
{
    return CEA_GET_ENCRYPTION_ID(ie.param_data.chosenEncryptAlgorithm);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChsEncAlg::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_ChosenEncrptAlgorithm) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ChsEncAlg::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ChosenEncrptAlgorithm) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ChsEncAlg IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ChsEncAlg::Clone()
{
    BSSAP_ChsEncAlg *ret = new BSSAP_ChsEncAlg();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------ 3.2.2.45 Circuit Pool ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktPool::BSSAP_CktPool()
    : BSSAP_Element(BSSAP_IEI_CIRCUIT_POOL)
{
    ie.param_length = sizeof(BSSAP_CircuitPool);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktPool::~BSSAP_CktPool()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktPool::SetCircuitPoolNo(ITS_OCTET type)
{
    CP_SET_CIRCUIT_POOL_NUM(ie.param_data.circuitPool, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CktPool::GetCircuitPoolNo()
{
    return CP_GET_CIRCUIT_POOL_NUM(ie.param_data.circuitPool);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktPool::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_CircuitPool) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktPool::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_CircuitPool) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CircuitPool IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CktPool::Clone()
{
    BSSAP_CktPool *ret = new BSSAP_CktPool();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.46 Circuit Pool List ----------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktPoolList::BSSAP_CktPoolList()
    : BSSAP_Element(BSSAP_IEI_CIRCUIT_POOL_LIST), maxIndex(-1)
{
    ie.param_length = sizeof(ie.param_data.circuitPoolList) - 
                       sizeof(BSSAP_CircuitPool);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CktPoolList::~BSSAP_CktPoolList()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktPoolList::AddCircuitPoolNo(BSSAP_CircuitPool cpn)
{
    if (maxIndex == -1)
    {
        maxIndex++;
    }

    if (maxIndex * sizeof(BSSAP_CircuitPool) > sizeof(ie.param_data))
    {
        exception ex;

        throw ex;
    }

    ie.param_data.circuitPoolList.cktPlList[maxIndex] = cpn;
    maxIndex++;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktPoolList::SetCircuitPoolNo(BSSAP_CircuitPool cpn, const int n)
{
    if (n < 0 || n * sizeof(BSSAP_CircuitPool) > sizeof(ie.param_data)) 
    {
        exception ex;
        throw ex;        
    }

    ie.param_data.circuitPoolList.cktPlList[n] = cpn;
    
    if (n >= maxIndex)
    {
        maxIndex = n + 1;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CktPoolList::GetCircuitPoolNo(BSSAP_CircuitPool &cpn, const int n)
{
    if ( n >= 0 && n < maxIndex)
    {
        cpn = ie.param_data.circuitPoolList.cktPlList[n];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktPoolList::GetCktPlNoCount()
{
    int ret = 0;

    if (maxIndex != -1)
    {
        ret = maxIndex;
    }

    return ret;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktPoolList::Encode(ITS_OCTET* buf, int& len)
{
    if (maxIndex < 0)
    {
        return (ITS_ENOMEM);
    }

    int totlen = maxIndex * sizeof(BSSAP_CircuitPool);
    
    // set total length of the information element
    ie.param_length = totlen;

    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;

    // copy in everything from the IE except for the array
    ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET)];
    for (int i = 0; i <= maxIndex; i++)
    {
        memcpy(ptr, &ie.param_data.circuitPoolList.cktPlList[i], 
                                      sizeof(BSSAP_CircuitPool));
        ptr += sizeof(BSSAP_CircuitPool);
    }

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CktPoolList::Decode(ITS_OCTET* buf, int& len)
{
    if (len < 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    if (len == 2 * sizeof(ITS_OCTET))
    {
        ie.param_id = buf[0];
        ie.param_length = buf[1];

        return (ITS_SUCCESS);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];

    int fixLen = sizeof(BSSAP_CircuitPool);

    // copy in everything from the IE except for the array

    if (len > 2 * sizeof(ITS_OCTET))
    {
        maxIndex = ie.param_length;
        // copy in each member of the array
        ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET)];
        for (int i = 0; i < maxIndex; i++)
        {
            memcpy(&ie.param_data.circuitPoolList.cktPlList[i], ptr, fixLen);
            ptr += fixLen;
        }
    }

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CircuitPoolList IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CktPoolList::Clone()
{
    BSSAP_CktPoolList *ret = new BSSAP_CktPoolList();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.2.47 Time Indication ------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeInd::BSSAP_TimeInd()
    : BSSAP_Element(BSSAP_IEI_TIME_INDICATION)
{
    ie.param_length = sizeof(BSSAP_TimeIndication);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeInd::~BSSAP_TimeInd()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TimeInd::SetTime(ITS_OCTET time)
{
    TI_SET_TIME_VAL(ie.param_data.timeInd, time);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeInd::GetTime()
{
    return TI_GET_TIME_VAL(ie.param_data.timeInd);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeInd::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TimeIndication) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeInd::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TimeIndication) +
                            2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TimeInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TimeInd::Clone()
{
    BSSAP_TimeInd *ret = new BSSAP_TimeInd();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.2.48 Resource Situation ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResSituation::BSSAP_ResSituation()
    : BSSAP_Element(BSSAP_IEI_RESOURCE_SITUATION), maxIndex(-1)
{
    ie.param_length = sizeof(ie.param_data.resSituation) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResSituation::~BSSAP_ResSituation()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ResSituation::SetResSitnElmnt(BSSAP_ResSitnElmnt rse, const int n)
{
    if (n < 0 || n * sizeof(BSSAP_ResSitnElmnt) > sizeof(ie.param_data)) 
    {
        exception ex;
        throw ex;        
    }

    ie.param_data.resSituation.res_sitn[n] = rse;
    
    if (n >= maxIndex)
    {
        maxIndex = n + 1;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ResSituation::GetResSitnElmnt(BSSAP_ResSitnElmnt &rse, const int n)
{
    if ( n >= 0 && n < maxIndex)
    {
        rse = ie.param_data.resSituation.res_sitn[n];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ResSituation::AddResSitnElmnt(BSSAP_ResSitnElmnt rse)
{
    if (maxIndex == -1)
    {
        maxIndex++;
    }

    if (maxIndex * sizeof(BSSAP_ResSitnElmnt) > sizeof(ie.param_data))
    {
        exception ex;

        throw ex;
    }

    ie.param_data.resSituation.res_sitn[maxIndex] = rse;
    maxIndex++;
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResSituation::Encode(ITS_OCTET* buf, int& len)
{
    if (maxIndex < 0)
    {
        return (ITS_ENOMEM);
    }

    int tlen = sizeof(BSSAP_ResSitnElmnt);
    
    int totlen = tlen * (maxIndex);

    // set total length of the information element ?????
    ie.param_length = totlen;

    // copy param id and length
    buf[0] = ie.param_id;
    buf[1] = ie.param_length;

    // copy in everything from the IE except for the array
    memcpy(&buf[2 * sizeof(ITS_OCTET)], &ie.param_data, tlen);

    // copy in each member of the array
    ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET) + tlen];
    for (int i = 0; i <= maxIndex; i++)
    {
        memcpy(ptr, &ie.param_data.resSituation.res_sitn[i], tlen);
        ptr += tlen;
    }

    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ResSituation::Decode(ITS_OCTET* buf, int& len)
{

    if (len < 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    if (len == 2 * sizeof(ITS_OCTET))
    {
        ie.param_id = buf[0];
        ie.param_length = buf[1];

        return (ITS_SUCCESS);
    }

    int tlen = sizeof(BSSAP_ResSitnElmnt);

    ie.param_id = buf[0];
    ie.param_length = buf[1];

    // copy in everything from the IE except for the array
    if (tlen > 0)
    {
        maxIndex = ie.param_length / tlen;
        // copy in each member of the array
        ITS_OCTET* ptr = &buf[2 * sizeof(ITS_OCTET)];
        for (int i = 0; i < maxIndex; i++)
        {
            memcpy(&ie.param_data.resSituation.res_sitn[i], ptr, tlen);
            ptr += tlen;
        }
    }

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TimeInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ResSituation::Clone()
{
    BSSAP_ResSituation *ret = new BSSAP_ResSituation();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.49 Current Channel Type 1------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CrtChan::BSSAP_CrtChan()
    : BSSAP_Element(BSSAP_IEI_CURRENT_CHANNEL_TYPE_1)
{
    ie.param_length = sizeof(BSSAP_CurrentChannelType1);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CrtChan::~BSSAP_CrtChan()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CrtChan::SetChan(ITS_OCTET type)
{
    CC_CHANNEL_SET_CHANNEL(ie.param_data.crrtChanType1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CrtChan::GetChan()
{
    return CC_CHANNEL_GET_CHANNEL(ie.param_data.crrtChanType1);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CrtChan::SetChanMode(ITS_OCTET type)
{
    CC_CHANNEL_MODE_SET_CHANNEL_MODE(ie.param_data.crrtChanType1, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CrtChan::GetChanMode()
{
    return CC_CHANNEL_MODE_GET_CHANNEL_MODE(ie.param_data.crrtChanType1);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CrtChan::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_CurrentChannelType1) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CrtChan::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_CurrentChannelType1) +
                                    2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Current Channel Type 1 IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CrtChan::Clone()
{
    BSSAP_CrtChan *ret = new BSSAP_CrtChan();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.50 Queuing Indicator ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_QueuingInd::BSSAP_QueuingInd()
    : BSSAP_Element(BSSAP_IEI_QUEUING_INDICATOR)
{
    ie.param_length = sizeof(BSSAP_QueuingIndicator);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_QueuingInd::~BSSAP_QueuingInd()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_QueuingInd::SetQRI(ITS_BOOLEAN type)
{
    QI_SET_QUEUING_IND(ie.param_data.queuingInd, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_QueuingInd::GetQRI()
{
    return QI_GET_QUEUING_IND(ie.param_data.queuingInd);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_QueuingInd::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_QueuingIndicator) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_QueuingInd::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_QueuingIndicator) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a QueuingInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_QueuingInd::Clone()
{
    BSSAP_QueuingInd *ret = new BSSAP_QueuingInd();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.51 Speech Version ------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SpchVer::BSSAP_SpchVer()
    : BSSAP_Element(BSSAP_IEI_SPEECH_VERSION)
{
    ie.param_length = sizeof(BSSAP_SpeechVersion);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SpchVer::~BSSAP_SpchVer()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_SpchVer::SetSpchVerID(ITS_OCTET type)
{
    SV_SET_SPEECH_VERSION(ie.param_data.speechVer, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_SpchVer::GetSpchVerID()
{
    return SV_GET_SPEECH_VERSION(ie.param_data.speechVer);
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SpchVer::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_SpeechVersion) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SpchVer::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_SpeechVersion) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a SpchVer IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_SpchVer::Clone()
{
    BSSAP_SpchVer *ret = new BSSAP_SpchVer();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.52 Assignment Requirement --------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssReq::BSSAP_AssReq()
    : BSSAP_Element(BSSAP_IEI_ASSIGNMENT_REQUIREMENT)
{
    ie.param_length = sizeof(BSSAP_AssignmentRequirement);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssReq::~BSSAP_AssReq()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_AssReq::SetAssReq(ITS_OCTET type)
{
    AR_SET_ASSIGNMENT_REQUIREMENT
           (ie.param_data.assignmentRequirement,type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_AssReq::GetAssReq()
{
    return AR_GET_ASSIGNMENT_REQUIREMENT
         (ie.param_data.assignmentRequirement);
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_AssReq::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_AssReq::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_AssignmentRequirement) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a AssReq IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_AssReq::Clone()
{
    BSSAP_AssReq *ret = new BSSAP_AssReq();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.54 Talker Flag ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TalkerFlag::BSSAP_TalkerFlag()
    : BSSAP_Element(BSSAP_IEI_TALKER_FLAG)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TalkerFlag::~BSSAP_TalkerFlag()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TalkerFlag::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TalkerFlag::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a TalkerFlag IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TalkerFlag::Clone()
{
    BSSAP_TalkerFlag *ret = new BSSAP_TalkerFlag();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.2.55 Group Call Reference ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GrpClRef::BSSAP_GrpClRef()
    : BSSAP_Element(BSSAP_IEI_GROUP_CALL_REFERENCE)
{
    ie.param_length = sizeof(BSSAP_GroupCallReference);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GrpClRef::~BSSAP_GrpClRef()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GrpClRef::SetCallRef(ITS_UINT type)
{
    GCR_SET_CALL_REFERENCE(ie.param_data.groupCallRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_UINT
BSSAP_GrpClRef::GetCallRef()
{
    return GCR_GET_CALL_REFERENCE(ie.param_data.groupCallRef);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GrpClRef::SetClPrio(ITS_OCTET type)
{
    GCR_SET_CALL_PRIORITY(ie.param_data.groupCallRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_GrpClRef::GetClPrio()
{
    return GCR_GET_CALL_PRIORITY(ie.param_data.groupCallRef);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GrpClRef::SetAF(ITS_BOOLEAN type)
{
    GCR_SET_AF(ie.param_data.groupCallRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GrpClRef::GetAF()
{
    return GCR_GET_AF(ie.param_data.groupCallRef);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GrpClRef::SetSF(ITS_BOOLEAN type)
{
    GCR_SET_SF(ie.param_data.groupCallRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GrpClRef::GetSF()
{
    return GCR_GET_SF(ie.param_data.groupCallRef);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GrpClRef::SetCiphInfo(ITS_OCTET type)
{
    GCR_SET_CIPHERING_KEY(ie.param_data.groupCallRef, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_GrpClRef::GetCiphInfo()
{
   return GCR_GET_CIPHERING_KEY(ie.param_data.groupCallRef);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GrpClRef::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_GroupCallReference) + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GrpClRef::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_GroupCallReference) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a GrpClRef IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_GrpClRef::Clone()
{
    BSSAP_GrpClRef *ret = new BSSAP_GrpClRef();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------- 3.2.2.56 eMML Priority -------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_eMMLPrio::BSSAP_eMMLPrio()
    : BSSAP_Element(BSSAP_IEI_eMLPP_PRIORITY)
{
    ie.param_length = sizeof(BSSAP_eMLPP_Priority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_eMMLPrio::~BSSAP_eMMLPrio()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_eMMLPrio::SetClPrio(ITS_OCTET type)
{
    EP_SET_CALL_PRIORITY(ie.param_data.eMLPP_pri, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_eMMLPrio::GetClPrio()
{
    return EP_GET_CALL_PRIORITY(ie.param_data.eMLPP_pri);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_eMMLPrio::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_eMLPP_Priority) +
                2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_eMMLPrio::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_eMLPP_Priority) +
                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a eMMLPrio IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_eMMLPrio::Clone()
{
    BSSAP_eMMLPrio *ret = new BSSAP_eMMLPrio();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.57 Configuration Evolution Indication --------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConfigEvlInd::BSSAP_ConfigEvlInd()
    : BSSAP_Element(BSSAP_IEI_CONFIGURATION_EVOLUTION_IND)
{
    ie.param_length = sizeof(BSSAP_ConfigEvolutionInd);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConfigEvlInd::~BSSAP_ConfigEvlInd()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ConfigEvlInd::SetSMI(ITS_OCTET type)
{
    CE_SET_MODIFICATION_IND(ie.param_data.configEvolutionInd, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ConfigEvlInd::GetSMI()
{
    return CE_GET_MODIFICATION_IND(ie.param_data.configEvolutionInd);
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConfigEvlInd::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConfigEvlInd::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ConfigEvolutionInd) +
                                 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ConfigEvlInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ConfigEvlInd::Clone()
{
    BSSAP_ConfigEvlInd *ret = new BSSAP_ConfigEvlInd();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.58 Old BSS to New BSS Information --------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_OldBSStoNewBSSInfo::BSSAP_OldBSStoNewBSSInfo()
    : BSSAP_Element(BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO)
{
    static ITS_OCTET    IEArgs[] =
    {
        BSSAP_IEI_EXTRA_INFORMATION,
        BSSAP_IEI_CURRENT_CHANNEL_TYPE_2,
        BSSAP_IEI_TARGET_CELL_RADIO_INFO,
        BSSAP_IEI_GPRS_SUSPEND_INFO,
        BSSAP_IEI_MULTIRATE_CONFIG_INFO,
        BSSAP_IEI_DUAL_TRANSFER_MODE_INFO,
        BSSAP_IEI_UE_CAP_INFO,
        BSSAP_IEI_CDMA_2000_CAP_INFO,
        BSSAP_IEI_UTRAN_PRECONFIG_IND_SET_INFO,
        BSSAP_IEI_UE_SECURITY_INFO
    };

    ieArgs = IEArgs;
    noArgs = sizeof(IEArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_OldBSStoNewBSSInfo::~BSSAP_OldBSStoNewBSSInfo()
{
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method adds an information element to the map.
 *
 *  Input Parameters:
 *      id - the IEI of the information element.
 *      prm - the IE to add
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_OldBSStoNewBSSInfo::AddIE(ITS_OCTET ieID, BSSAP_Element* ie)
{
    std::pair<const ITS_OCTET, BSSAP_Element *> p(ieID, ie->Clone());

    map.insert(p);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method locates an information element in the map.
 *
 *  Input Parameters:
 *      id - the IEI of the information element.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the information element (if present) or NULL.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
const BSSAP_Element*
BSSAP_OldBSStoNewBSSInfo::FindIE(ITS_OCTET ieID)
{
    BSSAP_ElementMap::iterator f;

    f = map.find(ieID);
    if (f != map.end())
    {
        return (*f).second;
    }

    return NULL;
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_OldBSStoNewBSSInfo::Encode(ITS_OCTET* data, int& length)
{
    int totlen = BSSAP_MAX_IE_SIZE;
    int curpos = 0;
    int header;
    int i;  //loop counter

    header = 2;   //BSS_INFO IEI + len ind
    curpos = header;

    //copy the first part of BSS_INFO IE before field IEs
    data[0] = BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO;
    data[1] = 0; // length

    for (i = 0; i < noArgs; i++)
    {
        int len = totlen;
        ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
        const BSSAP_Element *ie;

        ie = FindIE(ieArgs[i]);

        if (ie == NULL)
        {
            continue;
        }
  
        if ((const_cast<BSSAP_Element *>(ie))->Encode(buf, len) != ITS_SUCCESS)
        {
            return (ITS_EOVERFLOW);
        }

        memcpy(&data[curpos], buf, len);
      
        curpos += len;
        totlen -= len;

        if (totlen < 0)
        {
            return (ITS_EOVERFLOW);
        }
    }

    length = curpos;

    // length - BSS_INFO IEI - lenInd
    data[1] = length - 2 * sizeof(ITS_OCTET); 
    
    return ITS_SUCCESS;

}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_OldBSStoNewBSSInfo::Decode(ITS_OCTET* data, int &length) 
{
    int totlen = length;
    int idpos = 0;    // position of BSS_INFO IEI

    totlen -= 2 * sizeof(ITS_OCTET);  //minus BSS_INFO IEI and its length

    //create proper filed IEs to BSS_INFO IE

    if (noArgs == 0)
    {
        ITS_ASSERT(totlen == 0);        

        return (ITS_SUCCESS);
    }

    int         iepos = idpos + 2;   // Field IEs' id position
    int         i;    //loop counter
    ITS_OCTET   ieID;

    // all IEs are optional
    for (i = 0; i < noArgs; i++)
    {
        ieID = data[iepos];

        if (ieArgs[i] == ieID)
        {
            int len ; //length of IE
            ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
            BSSAP_Element *ie = NULL;

            //create proper field IE to ie, compute len
            BSMAPFIERule(ieArgs[i], ie, data[iepos + 1], len);
                
            memcpy(buf, &data[iepos], len);

            int ilen = len;   // individual ie length

            if (ie->Decode(buf, len) != ITS_SUCCESS)
            {
                return (ITS_EOVERFLOW);
            }

            iepos += ilen;    // next ie's id position
            totlen -= ilen;

            if (totlen < 0)
            {
                return (ITS_EOVERFLOW);
            }

            std::pair<const ITS_OCTET, BSSAP_Element *> p(ieArgs[i],
                                                          ie);

            map.insert(p);
        }

        if (totlen == 0)
        {
            return (ITS_SUCCESS);
        }
    }    
    
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ConfigEvlInd IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_OldBSStoNewBSSInfo::Clone()
{
    BSSAP_OldBSStoNewBSSInfo *ret= new BSSAP_OldBSStoNewBSSInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.60 LCS QoS -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LcsQoS::BSSAP_LcsQoS()
    : BSSAP_Element(BSSAP_IEI_LCS_QOS)
{
    ie.param_length = sizeof(BSSAP_LCSQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LcsQoS::~BSSAP_LcsQoS()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetVERT(ITS_BOOLEAN ind)
{
    LQ_SET_VERT_COORD_IND(ie.param_data.lcsQoS, ind);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LcsQoS::GetVERT()
{
    return LQ_GET_VERT_COORD_IND(ie.param_data.lcsQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetHA(ITS_BOOLEAN ind)
{
    LQ_SET_HOR_ACC_IND(ie.param_data.lcsQoS, ind);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LcsQoS::GetHA()
{
    return LQ_GET_HOR_ACC_IND(ie.param_data.lcsQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetVA(ITS_BOOLEAN ind)
{
    LQ_SET_VA_ACC_IND(ie.param_data.lcsQoS, ind);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LcsQoS::GetVA()
{
    return LQ_GET_VA_ACC_IND(ie.param_data.lcsQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetHorizAccuracy(ITS_OCTET acc)
{
    LQ_SET_HOR_ACC(ie.param_data.lcsQoS, acc); 
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LcsQoS::GetHorizAccuracy()
{
    return LQ_GET_HOR_ACC(ie.param_data.lcsQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetVertAccuracy(ITS_OCTET acc)
{
    LQ_SET_VA_ACC(ie.param_data.lcsQoS, acc); 
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LcsQoS::GetVertAccuracy()
{
    return LQ_GET_HOR_ACC(ie.param_data.lcsQoS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LcsQoS::SetRspTime(ITS_OCTET time)
{
    LQ_SET_RT(ie.param_data.lcsQoS, time); 
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LcsQoS::GetRspTime()
{
    return LQ_GET_RT(ie.param_data.lcsQoS);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the LcsQoS information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LcsQoS::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the Location Type 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LcsQoS::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LcsQoS IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LcsQoS::Clone()
{
    BSSAP_LcsQoS *ret = new BSSAP_LcsQoS();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.61 LCS Access Control Suppression -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaAccCtrlSuppr::BSSAP_LsaAccCtrlSuppr()
    : BSSAP_Element(BSSAP_IEI_LSA_ACCESS_CTRL_SUPPR)
{
    ie.param_length = sizeof(BSSAP_LSAAccessControlSuppr);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LsaAccCtrlSuppr::~BSSAP_LsaAccCtrlSuppr()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LsaAccCtrlSuppr::SetEmergency(ITS_BOOLEAN em)
{
    LACS_SET_EMERGENCY(ie.param_data.lsaAccCtrlSuppr, em);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LsaAccCtrlSuppr::GetEmergency()
{
    return LACS_GET_EMERGENCY(ie.param_data.lsaAccCtrlSuppr);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the LsaAccCtrlSuppr information element into an 
 *      octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaAccCtrlSuppr::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the LsaAccCtrlSuppr
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LsaAccCtrlSuppr::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LsaAccCtrlSuppr IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LsaAccCtrlSuppr::Clone()
{
    BSSAP_LsaAccCtrlSuppr *ret = new BSSAP_LsaAccCtrlSuppr();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.62 LCS Priority -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LCSPrio::BSSAP_LCSPrio()
    : BSSAP_Element(BSSAP_IEI_LCS_PRIORITY)
{
    ie.param_length = sizeof(BSSAP_LCSPriority);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LCSPrio::~BSSAP_LCSPrio()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LCSPrio::SetPriority(ITS_OCTET *buf)
{
    int fixLen = 1;
    memcpy(ie.param_data.lcsPrio.priority, buf, fixLen);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LCSPrio::GetPriority(ITS_OCTET *buf)
{
    int fixLen = 1;
    memcpy(buf, ie.param_data.lcsPrio.priority, fixLen);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the LCSPrio information element into an 
 *      octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LCSPrio::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the LCSPrio
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LCSPrio::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_LCSPriority) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LCSPrio IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LCSPrio::Clone()
{
    BSSAP_LCSPrio *ret = new BSSAP_LCSPrio();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.63 Location Type -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocType::BSSAP_LocType()
    : BSSAP_Element(BSSAP_IEI_LOCATION_TYPE)
{
    ie.param_length = sizeof(BSSAP_LocationType) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocType::~BSSAP_LocType()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LocType::SetLocInfo(ITS_OCTET info)
{
    LT_SET_LOC_TYPE(ie.param_data.locType, info);

    if ((info == LT_LI_LOC_IFNO_FOR_MS) ||
        (info == LT_LI_DECIPHER_KEYS_FOR_MS))
    { 
        ie.param_length = 2;
    }
    else
    {
        ie.param_length = 1;
    }
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LocType::GetLocInfo()
{
    return LT_GET_LOC_TYPE(ie.param_data.locType);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LocType::SetPosMethod(ITS_OCTET mthd)
{
    if ((GetLocInfo() == LT_LI_LOC_IFNO_FOR_MS) ||
        (GetLocInfo() == LT_LI_DECIPHER_KEYS_FOR_MS))
    { 
        LT_SET_POS_METHOD(ie.param_data.locType, mthd);
    }   
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LocType::GetPosMethod()
{
    if ((GetLocInfo() == LT_LI_LOC_IFNO_FOR_MS) ||
        (GetLocInfo() == LT_LI_DECIPHER_KEYS_FOR_MS))
    { 
        return LT_GET_POS_METHOD(ie.param_data.locType);
    } 
    else
    {
        return -1;
    } 
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the LocType information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocType::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the Location Type
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocType::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Location Type IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LocType::Clone()
{
    BSSAP_LocType *ret = new BSSAP_LocType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.64 Location Estimate ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocEstimate::BSSAP_LocEstimate()
    : BSSAP_Element(BSSAP_IEI_LOCATION_ESTIMATE), haveLoc(false)
{
    ie.param_length = sizeof(BSSAP_LocationEstimate) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocEstimate::~BSSAP_LocEstimate()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LocEstimate::SetLocEstimate(ITS_OCTET* type, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.locEst.loc_est, type, len);

    haveLoc = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LocEstimate::GetLocEstimate(ITS_OCTET* buf, int& len)
{
    if (!haveLoc)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.locEst) - 1);

    memcpy(buf, ie.param_data.locEst.loc_est, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocEstimate::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocEstimate::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.locEst) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.locEst) - 1)))
    {
        haveLoc = true;
    }
    else
    {
        haveLoc = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Location Estimate IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LocEstimate::Clone()
{
    BSSAP_LocEstimate *ret = new BSSAP_LocEstimate();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.65 Positioning Data -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PositionData::BSSAP_PositionData()
    : BSSAP_Element(BSSAP_IEI_POSITIONING_DATA), maxIndex(0)
{
    ie.param_length = sizeof(BSSAP_PositioningData) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PositionData::~BSSAP_PositionData()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_PositionData::SetPosDataDiscr(ITS_OCTET discr)
{
    PD_SET_POS_DATA_DISCR(ie.param_data.posData, discr);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_PositionData::GetPosDataDiscr()
{
    return PD_GET_POS_DATA_DISCR(ie.param_data.posData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_PositionData::SetPosMthd_Usage(ITS_OCTET mthd, ITS_OCTET usage, 
                                           int index)
{
    if (index < 0 || index > maxIndex)
    {
        exception ex;
        throw ex;  
    }
    else
    {
        PD_SET_POS_METHOD(ie.param_data.posData, mthd, index);
        PD_SET_USAGE(ie.param_data.posData, usage, index);
 
        if (index == maxIndex)
        {
            maxIndex += 1;
            ie.param_length = maxIndex + 1;
        }
    }
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_PositionData::GetPosMthd_Usage(ITS_OCTET &mthd, ITS_OCTET &usage, 
                                           int index)
{
    if (index < 0 || index > maxIndex)
    {
        exception ex;
        throw ex;  
    }
    else
    { 
        mthd  = PD_GET_POS_METHOD(ie.param_data.posData, index);
        usage = PD_GET_USAGE(ie.param_data.posData, index);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_PositionData::GetPosMthd_UsageCount()
{
    return maxIndex;
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the Positioning Data information element into 
 *      an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_PositionData::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the Positioning Data
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_PositionData::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);

    maxIndex = ie.param_length - 1;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LocType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_PositionData::Clone()
{
    BSSAP_PositionData *ret = new BSSAP_PositionData();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.66 LCS Cause -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LCSCse::BSSAP_LCSCse()
    : BSSAP_Element(BSSAP_IEI_LCS_CAUSE)
{
    ie.param_length = sizeof(BSSAP_LCSCause) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LCSCse::~BSSAP_LCSCse()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LCSCse::SetCauseValue(ITS_OCTET val)
{
    LC_SET_CAUSE_VALUE(ie.param_data.lcsCause, val);

    if (val == LC_CV_POS_MTHD_FAILURE)
    {
        ie.param_length = 2;
    }
    else
    {
        ie.param_length = 1;
    }
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LCSCse::GetCauseValue()
{
    return LC_GET_CAUSE_VALUE(ie.param_data.lcsCause);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LCSCse::SetDiagValue(ITS_OCTET val)
{
    if (GetCauseValue() == LC_CV_POS_MTHD_FAILURE)
    {
        LC_SET_DIAGNOSTICS_VALUE(ie.param_data.lcsCause, val);
    }
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LCSCse::GetDiagValue()
{
    if (GetCauseValue() == LC_CV_POS_MTHD_FAILURE)
    {
        return LC_GET_DIAGNOSTICS_VALUE(ie.param_data.lcsCause);
    }
    else
    {
        return -1;
    }
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the LCS Cause information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LCSCse::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the LCSCse 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LCSCse::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a LCSCse IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LCSCse::Clone()
{
    BSSAP_LCSCse *ret = new BSSAP_LCSCse();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.67 LCS Client Type -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClientType::BSSAP_ClientType()
    : BSSAP_Element(BSSAP_IEI_LCS_CLIENT_TYPE)
{
    ie.param_length = sizeof(BSSAP_LCSClientType);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClientType::~BSSAP_ClientType()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClientType::SetClientSubtype(ITS_OCTET type)
{
    LCT_SET_CLIENT_SUBTYPE(ie.param_data.clientType, type);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClientType::GetClientSubtype()
{
    return LCT_GET_CLIENT_SUBTYPE(ie.param_data.clientType);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ClientType::SetClientCategory(ITS_OCTET cat)
{
    LCT_SET_CLIENT_CATEGORY(ie.param_data.clientType, cat); 
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ClientType::GetClientCategory()
{
    return LCT_GET_CLIENT_CATEGORY(ie.param_data.clientType);
}



// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the ClientType information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClientType::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the LCSClientType 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ClientType::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_LCSClientType) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ClientType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ClientType::Clone()
{
    BSSAP_ClientType *ret = new BSSAP_ClientType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.68 APDU -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Apdu::BSSAP_Apdu()
    : BSSAP_Element(BSSAP_IEI_APDU)
{
    paramLen = sizeof(BSSAP_APDU) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Apdu::~BSSAP_Apdu()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Apdu::SetProtocolID(ITS_OCTET id)
{
    APDU_SET_PROT_ID(ie.param_data.apdu, id);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Apdu::GetProtocolID()
{
    return APDU_GET_PROT_ID(ie.param_data.apdu);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Apdu::SetEmbededMsg(ITS_OCTET* buf, int len)
{
    memcpy(ie.param_data.apdu.embed_msg, buf, len);
    paramLen += len;
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Apdu::GetEmbededMsg(ITS_OCTET* buf, int &len)
{
    len = paramLen - (sizeof(ie.param_data.apdu) - 1);
    memcpy(buf, ie.param_data.apdu.embed_msg, len);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the APDU information element into an
 *      octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Apdu::Encode(ITS_OCTET* buf, int& len)
{
    len = paramLen + 3 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] &= ~0xFFU;
    buf[1] |= ((paramLen >> 8) & 0xFF);
    buf[2] &= ~0xFFU;
    buf[2] |= (paramLen & 0xFFU);

    memcpy(&buf[3], &ie.param_data, paramLen);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the APDU 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Apdu::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    paramLen = ( ((buf[1] & 0xFFU) << 8) | (buf[2] &0xFFU) ); 

    if (len != paramLen + 3 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[3], paramLen);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a APDU IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Apdu::Clone()
{
    BSSAP_Apdu *ret = new BSSAP_Apdu();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------------- 3.2.2.69 Network Element Identity -----------------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NetElementID::BSSAP_NetElementID()
    : BSSAP_Element(BSSAP_IEI_NETWORK_ELEMENT_IDENTITY)
{
    ie.param_length = sizeof(BSSAP_NetworkElementIdentity) -
                                                sizeof(BSSAP_NetID);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NetElementID::~BSSAP_NetElementID()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_NetElementID::SetIDDisc(ITS_OCTET type)
{
    NEI_SET_ID_DISCRIMINATOR(ie.param_data.netElmntID, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_NetElementID::GetIDDisc()
{
    return NEI_GET_ID_DISCRIMINATOR(ie.param_data.netElmntID);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NetElementID::SetNetElementID(BSSAP_NetID& neID)
{
    ie.param_data.netElmntID.net_elmnt_id = neID;

    int len;

    len = getIDLength(GetIDDisc());
    
    ie.param_length = sizeof(BSSAP_NetworkElementIdentity) -
                                            sizeof(BSSAP_NetID) + len;

    return (ITS_SUCCESS);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/

int
BSSAP_NetElementID::GetNetElementID(BSSAP_NetID& neID)
{
    neID = ie.param_data.netElmntID.net_elmnt_id;

    return (ITS_SUCCESS);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an Network Element Identity information element 
        into an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NetElementID::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NetElementID::Decode(ITS_OCTET* buf, int& len)
{
    /*if (len <  sizeof(BSSAP_NetworkElementIdentity) -
               sizeof(BSSAP_NetID) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }*/
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Network Element Identity IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_NetElementID::Clone()
{
    BSSAP_NetElementID *ret = new BSSAP_NetElementID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.70 GPS Assistance Data -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GPSAssistData::BSSAP_GPSAssistData()
    : BSSAP_Element(BSSAP_IEI_GPS_ASSISTANCE_DATA), maxIndex(0)
{
    ie.param_length = sizeof(BSSAP_GPSAssistanceData) - 
                                     sizeof(BSSAP_SATID_IODE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GPSAssistData::~BSSAP_GPSAssistData()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetAlmanc(ITS_BOOLEAN  data)
{
    GAD_SET_ALMANAC(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetAlmanc()
{
    return GAD_GET_ALMANAC(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetUTCModel(ITS_BOOLEAN  data)
{
    GAD_SET_UTC_MODEL(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetUTCModel()
{
    return GAD_GET_UTC_MODEL(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetIonosphericModel(ITS_BOOLEAN  data)
{
    GAD_SET_LONOSPHERIC_MODEL(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetIonosphericModel()
{
    return GAD_GET_LONOSPHERIC_MODEL(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetNavigationModel(ITS_BOOLEAN  data)
{
    GAD_SET_NAVIGATION_MODEL(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetNavigationModel()
{
    return GAD_GET_NAVIGATION_MODEL(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetDGPSCorrections(ITS_BOOLEAN  data)
{
    GAD_SET_DGPS_CORRECTIONS(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetDGPSCorrections()
{
    return GAD_GET_DGPS_CORRECTIONS(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetRefLocation(ITS_BOOLEAN  data)
{
    GAD_SET_REF_LOC(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetRefLocation()
{
    return GAD_GET_REF_LOC(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetRefTime(ITS_BOOLEAN  data)
{
    GAD_SET_REF_TIME(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetRefTime()
{
    return GAD_GET_REF_TIME(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetAcquitionAssistance(ITS_BOOLEAN  data)
{
    GAD_SET_ACQ_ASSIST(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetAcquitionAssistance()
{
    return GAD_GET_ACQ_ASSIST(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetRealTimeIntegrity(ITS_BOOLEAN  data)
{
    GAD_SET_REAL_TIME_INTG(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_GPSAssistData::GetRealTimeIntegrity()
{
    return GAD_GET_REAL_TIME_INTG(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetGPSWeek(ITS_USHORT  data)
{
    GAD_SET_GPS_WEEK(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_GPSAssistData::GetGPSWeek()
{
    return GAD_GET_GPS_WEEK(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetGPSToe(ITS_OCTET  data)
{
    GAD_SET_GPS_TOE(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_GPSAssistData::GetGPSToe()
{
    return GAD_GET_GPS_TOE(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetToeLimit(ITS_OCTET  data)
{
    GAD_SET_T_TOE_LIMIT(ie.param_data.gpsAssistData, data);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_GPSAssistData::GetToeLimit()
{
    return GAD_GET_T_TOE_LIMIT(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetNSAT(ITS_OCTET  data)
{
    GAD_SET_NSAT(ie.param_data.gpsAssistData, data);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_GPSAssistData::GetNSAT()
{
    return GAD_GET_NSAT(ie.param_data.gpsAssistData);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::SetSatid_Iode(BSSAP_SATID_IODE id, const int n)
{
    if (n < 0 || n > maxIndex) 
    {
        exception ex;
        throw ex;        
    }
    else
    {
        ie.param_data.gpsAssistData.satid_iode[n] = id;
    
        if (n == maxIndex)
        {
            maxIndex = n + 1;
            ie.param_length += sizeof(BSSAP_SATID_IODE);
        }
    }

}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPSAssistData::GetSatid_Iode(BSSAP_SATID_IODE &id, const int n)
{
    if ( n >= 0 && n < maxIndex)
    {
        id = ie.param_data.gpsAssistData.satid_iode[n];
    }
    else
    {
        exception ex;
        throw ex;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GPSAssistData::GetSatid_IodeCount()
{
    return maxIndex;
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the GPS Assistance Data information element 
 *      into an octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GPSAssistData::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;

    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the GPS Assistance Data 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GPSAssistData::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);
    maxIndex = (ie.param_length - 6) / sizeof(BSSAP_SATID_IODE);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a GPS Assistance Data Keys IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_GPSAssistData::Clone()
{
    BSSAP_GPSAssistData *ret = new BSSAP_GPSAssistData();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.71 Deciphering Keys -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DecipherKeys::BSSAP_DecipherKeys()
    : BSSAP_Element(BSSAP_IEI_DECIPHERING_KEYS)
{
    ie.param_length = sizeof(BSSAP_DecipheringKeys);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DecipherKeys::~BSSAP_DecipherKeys()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DecipherKeys::SetKeyFlag(ITS_BOOLEAN flag)
{
    DK_SET_KEY_FLAG(ie.param_data.decipherKeys, flag);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_DecipherKeys::GetKeyFlag()
{
    return DK_GET_KEY_FLAG(ie.param_data.decipherKeys);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DecipherKeys::SetCurrentValue(ITS_OCTET* buf)
{
    int fixLen = 7;
    memcpy(ie.param_data.decipherKeys.crrtKeyValue, buf, fixLen);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DecipherKeys::GetCurrentValue(ITS_OCTET* buf)
{
    int fixLen = 7;
    memcpy(buf, ie.param_data.decipherKeys.crrtKeyValue, fixLen);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DecipherKeys::SetNextValue(ITS_OCTET* buf)
{
    int fixLen = 7;
    memcpy(ie.param_data.decipherKeys.nextKeyValue, buf, fixLen);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DecipherKeys::GetNextValue(ITS_OCTET* buf)
{
    int fixLen = 7;
    memcpy(buf, ie.param_data.decipherKeys.nextKeyValue, fixLen);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the Deciphering Keys information element into an
 *      octet stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DecipherKeys::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the Deciphering Keys 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DecipherKeys::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_DecipheringKeys) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Deciphering Keys IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_DecipherKeys::Clone()
{
    BSSAP_DecipherKeys *ret = new BSSAP_DecipherKeys();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.72 Return Error Request -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReturnErrReq::BSSAP_ReturnErrReq()
    : BSSAP_Element(BSSAP_IEI_RETURN_ERROR_REQUEST)
{
    ie.param_length = sizeof(BSSAP_ReturnErrorRequest);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReturnErrReq::~BSSAP_ReturnErrReq()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ReturnErrReq::SetErrorType(ITS_OCTET val)
{
    RER_SET_ERROR_TYPE(ie.param_data.returnErrReq, val);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ReturnErrReq::GetErrorType()
{
    return RER_GET_ERROR_TYPE(ie.param_data.returnErrReq);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the ReturnErrReq information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReturnErrReq::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the ReturnErrReq 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReturnErrReq::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ReturnErrorRequest) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ReturnErrReq IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ReturnErrReq::Clone()
{
    BSSAP_ReturnErrReq *ret = new BSSAP_ReturnErrReq();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ------------- 3.2.2.73 Return Error Cause -------------*/
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReturnErrCse::BSSAP_ReturnErrCse()
    : BSSAP_Element(BSSAP_IEI_RETURN_ERROR_CAUSE)
{
    ie.param_length = sizeof(BSSAP_ReturnErrorCause);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReturnErrCse::~BSSAP_ReturnErrCse()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ReturnErrCse::SetCauseValue(ITS_OCTET val)
{
    REC_SET_CAUSE_VALUE(ie.param_data.returnErrCse, val);
}
    

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ReturnErrCse::GetCauseValue()
{
    return REC_GET_CAUSE_VALUE(ie.param_data.returnErrCse);
}


// local encode/decode methods
/*.implementation:protected
 *************************************************************************
 *  Purpose:
 *      This method encodes the ReturnErrCse information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReturnErrCse::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the ReturnErrCse 
 *      information element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReturnErrCse::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ReturnErrorCause) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ReturnErrCse IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ReturnErrCse::Clone()
{
    BSSAP_ReturnErrCse *ret = new BSSAP_ReturnErrCse();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.74 Segmentation --------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Segment::BSSAP_Segment()
    : BSSAP_Element(BSSAP_IEI_SEGMENTATION)
{
    ie.param_length = sizeof(BSSAP_Segmentation);
    option = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Segment::~BSSAP_Segment()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 1 format
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Segment::SetSegmentNum(ITS_OCTET num)
{
    SG_SET_SEGMENT_NUMBER(ie.param_data.segmentation, num);
}

 /************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 1 format
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Segment::GetSegmentNum()
{
    return SG_GET_SEGMENT_NUMBER(ie.param_data.segmentation);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 1 format
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Segment::SetSegmentBit(ITS_OCTET bit)
{
    SG_SET_SEGMENT_BIT(ie.param_data.segmentation, bit);
}

 /************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 1 format
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Segment::GetSegmentBit()
{
    return SG_GET_SEGMENT_BIT(ie.param_data.segmentation);  
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 2 format
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Segment::SetMessageID(ITS_USHORT mid)
{  
    SG_SET_MESSAGE_ID(ie.param_data.segmentation, mid);
    option = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes: This method is for option 2 format
 *
 *  See Also:
 ************************************************************************/
ITS_USHORT
BSSAP_Segment::GetMessageID()
{
    if (option)
    {
        return SG_GET_MESSAGE_ID(ie.param_data.segmentation);
    }
    else
    {
        exception ex;
        throw ex;
    }
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Segment::Encode(ITS_OCTET* buf, int& len)
{
    if (!option)
    {
        ie.param_length = 1;
    }
    else if (option)
    {
        ie.param_length = 3;
    }


    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Segment::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    if (ie.param_length == 3)
    {
        option = true;
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Segmentation IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Segment::Clone()
{
    BSSAP_Segment *ret = new BSSAP_Segment();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.2.75 Service Handover --------- */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ServHandover::BSSAP_ServHandover()
    : BSSAP_Element(BSSAP_IEI_SERVICE_HANDOVER)
{
    ie.param_length = sizeof(BSSAP_ServiceHandover);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ServHandover::~BSSAP_ServHandover()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ServHandover::SetServHandoverInfo(ITS_OCTET type)
{
    SH_SET_SERV_HANDOVER_INFO(ie.param_data.serviceHandover, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_ServHandover::GetServHandoverInfo()
{
    return SH_GET_SERV_HANDOVER_INFO(ie.param_data.serviceHandover);
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ServHandover::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ServHandover::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ServiceHandover) +
                           2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a ServHandover IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ServHandover::Clone()
{
    BSSAP_ServHandover *ret = new BSSAP_ServHandover();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/*-- 3.2.2.76 Soruce RNC to Target RNC Transparent Information (UMTS) --*/
// Constructor and destructor
/*.implementation:public
 *************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SrcRNCtoTgtRNCInfoUMTS::BSSAP_SrcRNCtoTgtRNCInfoUMTS()
    : BSSAP_Element(BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_UMTS), haveUmts(false)
{
    ie.param_length = sizeof(BSSAP_SoruceRNCtoTargetRNCInfoUMTS) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SrcRNCtoTgtRNCInfoUMTS::~BSSAP_SrcRNCtoTgtRNCInfoUMTS()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_SrcRNCtoTgtRNCInfoUMTS::SetSrcRNCtoTgtRNCInfoUMTS(ITS_OCTET* type, 
                                                               int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.srtriUmts.rnc_umts_info, type, len);

    haveUmts = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_SrcRNCtoTgtRNCInfoUMTS::GetSrcRNCtoTgtRNCInfoUMTS(ITS_OCTET* buf, 
                                                              int& len)
{
    if (!haveUmts)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.srtriUmts) - 1);

    memcpy(buf, ie.param_data.srtriUmts.rnc_umts_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SrcRNCtoTgtRNCInfoUMTS::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SrcRNCtoTgtRNCInfoUMTS::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.srtriUmts) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.srtriUmts) - 1)))
    {
        haveUmts = true;
    }
    else
    {
        haveUmts = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a SrcRNCtoTgtRNCInfo(UMTS) IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_SrcRNCtoTgtRNCInfoUMTS::Clone()
{
    BSSAP_SrcRNCtoTgtRNCInfoUMTS *ret = new BSSAP_SrcRNCtoTgtRNCInfoUMTS();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/*-- 3.2.2.76 Soruce RNC to Target RNC Transparent Information (CDMA) --*/
// Constructor and destructor
/*.implementation:public
 *************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SrcRNCtoTgtRNCInfoCDMA::BSSAP_SrcRNCtoTgtRNCInfoCDMA()
    : BSSAP_Element(BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_CDMA), haveCdma(false)
{
    ie.param_length = sizeof(BSSAP_SoruceRNCtoTargetRNCInfoCDMA) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SrcRNCtoTgtRNCInfoCDMA::~BSSAP_SrcRNCtoTgtRNCInfoCDMA()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_SrcRNCtoTgtRNCInfoCDMA::SetSrcRNCtoTgtRNCInfoCDMA(ITS_OCTET* type, 
                                                               int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.srtriCdma.rnc_cdma_info, type, len);

    haveCdma = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_SrcRNCtoTgtRNCInfoCDMA::GetSrcRNCtoTgtRNCInfoCDMA(ITS_OCTET* buf, 
                                                              int& len)
{
    if (!haveCdma)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.srtriCdma) - 1);

    memcpy(buf, ie.param_data.srtriCdma.rnc_cdma_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SrcRNCtoTgtRNCInfoCDMA::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SrcRNCtoTgtRNCInfoCDMA::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.srtriCdma) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.srtriCdma) - 1)))
    {
        haveCdma = true;
    }
    else
    {
        haveCdma = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a SrcRNCtoTgtRNCInfo(CDMA) IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_SrcRNCtoTgtRNCInfoCDMA::Clone()
{
    BSSAP_SrcRNCtoTgtRNCInfoCDMA *ret = new BSSAP_SrcRNCtoTgtRNCInfoCDMA();

    *ret = *this;

    return (BSSAP_Element*)ret;
}




/////////////////////////////////////////////////////////////////////////////
//
// Field Element -- section 3.2.3
//
/////////////////////////////////////////////////////////////////////////////

/* ----------- 3.2.3.1 Extra Information ------------ */
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ExtraInfo::BSSAP_ExtraInfo()
    : BSSAP_Element(BSSAP_IEI_EXTRA_INFORMATION)
{
    ie.param_length = sizeof(BSSAP_ExtraInformation);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ExtraInfo::~BSSAP_ExtraInfo()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ExtraInfo::SetPREC(ITS_BOOLEAN type)
{
    EI_SET_PRE_EMPTION_RECOM(ie.param_data.extraInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ExtraInfo::GetPREC()
{
    return EI_GET_PRE_EMPTION_RECOM(ie.param_data.extraInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_ExtraInfo::SetLCS(ITS_BOOLEAN type)
{
    EI_SET_LOC_SERV_INFO(ie.param_data.extraInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ExtraInfo::GetLCS()
{
    return EI_GET_LOC_SERV_INFO(ie.param_data.extraInfo);
}


//local encode/decode
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ExtraInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ExtraInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_ExtraInformation) +
                           2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Extra Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ExtraInfo::Clone()
{
    BSSAP_ExtraInfo *ret = new BSSAP_ExtraInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.3.2 Current Channel Type 2 ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CrtChan2::BSSAP_CrtChan2()
    : BSSAP_Element(BSSAP_IEI_CURRENT_CHANNEL_TYPE_2)
{
    ie.param_length = sizeof(BSSAP_CurrentChannelType2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CrtChan2::~BSSAP_CrtChan2()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CrtChan2::SetChan(ITS_OCTET type)
{
    CCT2_SET_CHAN_FIELD(ie.param_data.crrtChanType2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CrtChan2::GetChan()
{
    return CCT2_GET_CHAN_FIELD(ie.param_data.crrtChanType2);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CrtChan2::SetChanMode(ITS_OCTET type)
{
    CCT2_SET_CHAN_MODE(ie.param_data.crrtChanType2, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CrtChan2::GetChanMode()
{
    return CCT2_GET_CHAN_MODE(ie.param_data.crrtChanType2);
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CrtChan2::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_CurrentChannelType2) +
                            2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CrtChan2::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_CurrentChannelType2) +
                                    2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Current Channel Type 2 IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CrtChan2::Clone()
{
    BSSAP_CrtChan2 *ret = new BSSAP_CrtChan2();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.3.3 Target Cell Radio Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TargetCellRadioInfo::BSSAP_TargetCellRadioInfo()
    : BSSAP_Element(BSSAP_IEI_TARGET_CELL_RADIO_INFO)
{
    ie.param_length = sizeof(BSSAP_TargetCellRadioInformation);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TargetCellRadioInfo::~BSSAP_TargetCellRadioInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_TargetCellRadioInfo::SetRXLEV_NCELL(ITS_OCTET type)
{
    TCRI_SET_RXLEV_NCELL(ie.param_data.tcrInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TargetCellRadioInfo::GetRXLEV_NCELL()
{
    return TCRI_GET_RXLEV_NCELL(ie.param_data.tcrInfo);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TargetCellRadioInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_TargetCellRadioInformation) +
                                    2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TargetCellRadioInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_TargetCellRadioInformation) +
                                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Target Cell Radio Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TargetCellRadioInfo::Clone()
{
    BSSAP_TargetCellRadioInfo *ret = new BSSAP_TargetCellRadioInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ----------- 3.2.3.4 GPRS Suspend Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GPRSSuspendInfo::BSSAP_GPRSSuspendInfo()
    : BSSAP_Element(BSSAP_IEI_GPRS_SUSPEND_INFO),tlliLen(0), raiLen(0),
      srnLen(0), iePos(0), rlenPos(0), slenPos(0)
{
    ie.param_length = sizeof(BSSAP_GPRSSuspendInformation) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_GPRSSuspendInfo::~BSSAP_GPRSSuspendInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      Data includes TLLI IEI, length, and value. Len is data's length.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPRSSuspendInfo::SetTLLI(ITS_OCTET* data, int len)
{
    tlliLen = data[1];
    ie.param_length += len;

    if (len != (tlliLen + 2))
    {
        return;
    }
    
    memcpy(&ie.param_data.grpsInfo.tlli_rai_srn[0], data, len);
}


/*.implementation:public
 ***************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ***************************************************************************/
void
BSSAP_GPRSSuspendInfo::GetTLLI(ITS_OCTET* data, int& len)
{
    tlliLen = ie.param_data.grpsInfo.tlli_rai_srn[1]; // tlliPos is 1

    len = tlliLen + 2;
    
    memcpy(data, &ie.param_data.grpsInfo.tlli_rai_srn[0], len); // iePos is 0
}

/*.implementation:public
 ***************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      Data includes RAI IEI, length, and value. Len is data's length.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ***************************************************************************/
void
BSSAP_GPRSSuspendInfo::SetRAI(ITS_OCTET* data, int len)
{
    raiLen = data[1];
    if (len != (raiLen + 2))
    {
        return;
    }

    memcpy(&ie.param_data.grpsInfo.tlli_rai_srn[ie.param_length], data, len);

    ie.param_length += len;
}

/*.implementation:public
 ***************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ***************************************************************************/
void
BSSAP_GPRSSuspendInfo::GetRAI(ITS_OCTET* data, int& len)
{
    tlliLen = ie.param_data.grpsInfo.tlli_rai_srn[1];
    rlenPos = tlliLen + 3; // tlliLen + 1 (tlliId) + 1 (tlliLen) + 1 
    
    raiLen = ie.param_data.grpsInfo.tlli_rai_srn[rlenPos];

    len = raiLen + 2;
    
    iePos= rlenPos - 1;
    
    memcpy(data, &ie.param_data.grpsInfo.tlli_rai_srn[iePos], len);
}


/*.implementation:public
 ***************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      Data includes TLLI IEI, length, and value. Len is data's length.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ***************************************************************************/
void
BSSAP_GPRSSuspendInfo::SetSRN(ITS_OCTET* data, int len)
{
    srnLen = data[1];

    if (len != (srnLen + 2))
    {
        return;
    }

    memcpy(&ie.param_data.grpsInfo.tlli_rai_srn[ie.param_length], data, len);

    ie.param_length += len;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_GPRSSuspendInfo::GetSRN(ITS_OCTET* data, int& len)
{
    tlliLen = ie.param_data.grpsInfo.tlli_rai_srn[1];
    raiLen = ie.param_data.grpsInfo.tlli_rai_srn[rlenPos];

    slenPos = tlliLen + raiLen + 5; // tlliLen + 1 (tlliId) + 1 (tlliLen) +
                                    // raiLen + 1 (raiId) + 1 (raiLen) + 1
    
    srnLen = ie.param_data.grpsInfo.tlli_rai_srn[slenPos];

    len = srnLen + 2;
    
    iePos= slenPos - 1;
    
    memcpy(data, &ie.param_data.grpsInfo.tlli_rai_srn[iePos], len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GPRSSuspendInfo::Encode(ITS_OCTET* buf, int& len)
{
    if ( (tlliLen == 0) || (raiLen == 0) || (srnLen == 0))
    {
        return (ITS_ENOMEM);
    }

    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;

    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_GPRSSuspendInfo::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a GPRS Suspend Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_GPRSSuspendInfo::Clone()
{
    BSSAP_GPRSSuspendInfo *ret = new BSSAP_GPRSSuspendInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.3.5 Multirate Configuration Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MultirateConfigInfo::BSSAP_MultirateConfigInfo()
    : BSSAP_Element(BSSAP_IEI_MULTIRATE_CONFIG_INFO)
{
    ie.param_length = sizeof(BSSAP_MultirateConfigInformation);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MultirateConfigInfo::~BSSAP_MultirateConfigInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetStartMode(ITS_OCTET type)
{
    MCI_SET_START_MODE(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetStartMode()
{
    return MCI_GET_START_MODE(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetICMI(ITS_BOOLEAN type)
{
    MCI_SET_ICMI(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetICMI()
{
    return MCI_GET_ICMI(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetMRVersion(ITS_OCTET type)
{
    MCI_SET_MR_VERSION(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetMRVersion()
{
    return MCI_GET_MR_VERSION(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode1(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_1(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode1()
{
    return MCI_GET_ARM_CODEC_MODE_1(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode2(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_2(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode2()
{
    return MCI_GET_ARM_CODEC_MODE_2(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode3(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_3(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode3()
{
    return MCI_GET_ARM_CODEC_MODE_3(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode4(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_4(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode4()
{
    return MCI_GET_ARM_CODEC_MODE_4(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode5(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_5(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode5()
{
    return MCI_GET_ARM_CODEC_MODE_5(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode6(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_6(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode6()
{
    return MCI_GET_ARM_CODEC_MODE_6(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode7(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_7(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode7()
{
    return MCI_GET_ARM_CODEC_MODE_7(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetARMCodecMode8(ITS_BOOLEAN type)
{
    MCI_SET_ARM_CODEC_MODE_8(ie.param_data.mcInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MultirateConfigInfo::GetARMCodecMode8()
{
    return MCI_GET_ARM_CODEC_MODE_8(ie.param_data.mcInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetThreshold1(ITS_OCTET type)
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_2) ||
          (GetStartMode() == MCI_CODEC_MODE_3) ||
          (GetStartMode() == MCI_CODEC_MODE_4)) &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[0] &= ~0x3FU;
        ie.param_data.mcInfo.multi_speech[0] |= (type & 0x3FU);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetThreshold1()
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_2)  ||
          (GetStartMode() == MCI_CODEC_MODE_3)  ||
          (GetStartMode() == MCI_CODEC_MODE_4)) &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return (ie.param_data.mcInfo.multi_speech[0] & 0x3FU);
    }
    else
    {
        return (ITS_ENOMEM);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetThreshold2(ITS_OCTET type)
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_3)    ||
          (GetStartMode() == MCI_CODEC_MODE_4))   &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[1] &= ~0x0FU;
        ie.param_data.mcInfo.multi_speech[1] |= ((type >> 2) & 0x0FU);
        ie.param_data.mcInfo.multi_speech[2] &= ~0xC0U;
        ie.param_data.mcInfo.multi_speech[2] |= ((type << 6) & 0xC0U);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetThreshold2()
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_3)    ||
          (GetStartMode() == MCI_CODEC_MODE_4))   &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return (((ie.param_data.mcInfo.multi_speech[1] & 0x0FU) << 2) |
                ((ie.param_data.mcInfo.multi_speech[2] & 0xC0U) >> 6));
    }
    else
    {
        return (ITS_ENOMEM);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetThreshold3(ITS_OCTET type)
{
    if ( (GetStartMode() == MCI_CODEC_MODE_4) &&
         (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[2] &= ~0x03U;
        ie.param_data.mcInfo.multi_speech[2] |= ((type >> 4) & 0x03U);
        ie.param_data.mcInfo.multi_speech[3] &= ~0xF0U;
        ie.param_data.mcInfo.multi_speech[3] |= ((type << 4) & 0xF0U);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetThreshold3()
{
    if ( (GetStartMode() == MCI_CODEC_MODE_4) &&
         (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return (((ie.param_data.mcInfo.multi_speech[2] & 0x03U) << 4) |
                ((ie.param_data.mcInfo.multi_speech[3] & 0xF0U) >> 4));
    }
    else
    {
        return (ITS_ENOMEM);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetHysteresis1(ITS_OCTET type)
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_2)  ||
          (GetStartMode() == MCI_CODEC_MODE_3)  ||
          (GetStartMode() == MCI_CODEC_MODE_4)) &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[1] &= ~0xF0U;
        ie.param_data.mcInfo.multi_speech[1] |= ((type << 4) & 0xF0U);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetHysteresis1()
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_2)  ||
          (GetStartMode() == MCI_CODEC_MODE_3)  ||
          (GetStartMode() == MCI_CODEC_MODE_4)) &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return ((ie.param_data.mcInfo.multi_speech[1] & 0xF0U) >> 4);
    }
    else
    {
        return (ITS_ENOMEM);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetHysteresis2(ITS_OCTET type)
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_3)    ||
          (GetStartMode() == MCI_CODEC_MODE_4))   &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[2] &= ~0x3CU;
        ie.param_data.mcInfo.multi_speech[2] |= ((type << 2) & 0x3CU);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetHysteresis2()
{
    if ( ((GetStartMode() == MCI_CODEC_MODE_3)    ||
          (GetStartMode() == MCI_CODEC_MODE_4))   &&
          (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return ((ie.param_data.mcInfo.multi_speech[2] & 0x3CU) >> 2);
    }
    else
    {
        return (ITS_ENOMEM);
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_MultirateConfigInfo::SetHysteresis3(ITS_OCTET type)
{
     if ( (GetStartMode() == MCI_CODEC_MODE_4) &&
         (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        ie.param_data.mcInfo.multi_speech[3] &= ~0x0FU;
        ie.param_data.mcInfo.multi_speech[3] |= (type & 0x0FU);
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_MultirateConfigInfo::GetHysteresis3()
{
     if ( (GetStartMode() == MCI_CODEC_MODE_4) &&
         (GetMRVersion() == MCI_ADAPTIVE_MR_SPCH_VER_1) )
    {
        return (ie.param_data.mcInfo.multi_speech[3] & 0x0FU);
    }
    else
    {
        return (ITS_ENOMEM);
    }
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MultirateConfigInfo::Encode(ITS_OCTET* buf, int& len)
{
    if (GetStartMode() == MCI_CODEC_MODE_1)
    {
        ie.param_length -= 4;
    }
    else if (GetStartMode() == MCI_CODEC_MODE_2)
    {
        ie.param_length -= 2;
    }
    else if (GetStartMode() == MCI_CODEC_MODE_3)
    {
        ie.param_length -= 1;
    }

    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MultirateConfigInfo::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Multirate Configration Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_MultirateConfigInfo::Clone()
{
    BSSAP_MultirateConfigInfo *ret = new BSSAP_MultirateConfigInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 3.2.3.6 Dual Transfer Mode Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DualTransferModeInfo::BSSAP_DualTransferModeInfo()
    : BSSAP_Element(BSSAP_IEI_DUAL_TRANSFER_MODE_INFO)
{
    ie.param_length = sizeof(BSSAP_DualTransferModeInformation);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_DualTransferModeInfo::~BSSAP_DualTransferModeInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DualTransferModeInfo::SetDTMInd(ITS_BOOLEAN type)
{
    DTMI_SET_DTM_IND(ie.param_data.dtmInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_DualTransferModeInfo::GetDTMInd()
{
    return DTMI_GET_DTM_IND(ie.param_data.dtmInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DualTransferModeInfo::SetSTOInd(ITS_BOOLEAN type)
{
    DTMI_SET_STO_IND(ie.param_data.dtmInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_DualTransferModeInfo::GetSTOInd()
{
    return DTMI_GET_STO_IND(ie.param_data.dtmInfo);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_DualTransferModeInfo::SetEGPRSInd(ITS_BOOLEAN type)
{
    DTMI_SET_EGPRS_IND(ie.param_data.dtmInfo, type);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_DualTransferModeInfo::GetEGPRSInd()
{
    return DTMI_GET_EGPRS_IND(ie.param_data.dtmInfo);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DualTransferModeInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(BSSAP_DualTransferModeInformation) +
                                    2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_DualTransferModeInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(BSSAP_DualTransferModeInformation) +
                                        2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a Dual Transfer Mode Information IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_DualTransferModeInfo::Clone()
{
    BSSAP_DualTransferModeInfo *ret = new BSSAP_DualTransferModeInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.3.7 UE Capability Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UECapInfo::BSSAP_UECapInfo()
    : BSSAP_Element(BSSAP_IEI_UE_CAP_INFO), haveUeInfo(false)
{
    ie.param_length = sizeof(BSSAP_UECapInformation) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UECapInfo::~BSSAP_UECapInfo()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UECapInfo::SetUECapInfo(ITS_OCTET* type, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.ueCapInfo.ue_info, type, len);

    haveUeInfo = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UECapInfo::GetUECapInfo(ITS_OCTET* buf, int& len)
{
    if (!haveUeInfo)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.ueCapInfo) - 1);

    memcpy(buf, ie.param_data.ueCapInfo.ue_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UECapInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UECapInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.ueCapInfo) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.ueCapInfo) - 1)))
    {
        haveUeInfo = true;
    }
    else
    {
        haveUeInfo = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a UECapInfo IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_UECapInfo::Clone()
{
    BSSAP_UECapInfo *ret = new BSSAP_UECapInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 3.2.3.8 cdma2000 Capability Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_cdma2000CapInfo::BSSAP_cdma2000CapInfo()
    : BSSAP_Element(BSSAP_IEI_CDMA_2000_CAP_INFO)
{
    ie.param_length = sizeof(BSSAP_cdma2000CapInformation) - 1;
    haveInfo = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_cdma2000CapInfo::~BSSAP_cdma2000CapInfo()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_cdma2000CapInfo::SetcdmaCapInfo(ITS_OCTET* type, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.cdmaCapInfo.cdma_info, type, len);

    haveInfo = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_cdma2000CapInfo::GetcdmaCapInfo(ITS_OCTET* buf, int& len)
{
    if (!haveInfo)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.cdmaCapInfo) - 1);

    memcpy(buf, ie.param_data.cdmaCapInfo.cdma_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_cdma2000CapInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_cdma2000CapInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.cdmaCapInfo) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.cdmaCapInfo) - 1)))
    {
        haveInfo = true;
    }
    else
    {
        haveInfo = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a cdma2000CapInfo IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_cdma2000CapInfo::Clone()
{
    BSSAP_cdma2000CapInfo *ret = new BSSAP_cdma2000CapInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------- 3.2.3.9 UTRAN Pre-configuration Indication Set --------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UTRANIndicationSet::BSSAP_UTRANIndicationSet()
    : BSSAP_Element(BSSAP_IEI_UTRAN_PRECONFIG_IND_SET_INFO), maxIndex(0)
{
    ie.param_length = sizeof(BSSAP_UTRANPreconfigIndSet) - 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UTRANIndicationSet::~BSSAP_UTRANIndicationSet()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UTRANIndicationSet::SetPre_Config_Id_Tag(ITS_OCTET id, ITS_OCTET tag, 
                                                     int index)
{
    if (index < 0 || index > maxIndex)
    {
        exception ex;
        throw ex;  
    }
    else
    {
        ie.param_data.utranSet.utran_set[index] &= ~0x0FU;
        ie.param_data.utranSet.utran_set[index] |= (id & 0x0FU);

        ie.param_data.utranSet.utran_set[index] &= ~0xF0U;
        ie.param_data.utranSet.utran_set[index] |= ((tag << 4) & 0xF0U);

        if (index == maxIndex)
        {
            maxIndex += 1;
            ie.param_length = maxIndex;
        }
    } 
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UTRANIndicationSet::GetPre_Config_Id_Tag(ITS_OCTET &id, ITS_OCTET &tag, 
                                                     int index)
{
    if ( index >= 0 && index < maxIndex)
    {
        id = (ie.param_data.utranSet.utran_set[index] & 0x0FU);
        tag = ((ie.param_data.utranSet.utran_set[index] & 0xF0U) >> 4);
    }
    else
    {
        exception ex;
        throw ex;
    }
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UTRANIndicationSet::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UTRANIndicationSet::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    if (len != ie.param_length + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }

    memcpy(&ie.param_data, &buf[2], ie.param_length);
    maxIndex = ie.param_length;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a UTRANIndicationSet IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_UTRANIndicationSet::Clone()
{
    BSSAP_UTRANIndicationSet *ret = new BSSAP_UTRANIndicationSet();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 3.2.3.10 UE Security Information ------------ */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UESecurityInfo::BSSAP_UESecurityInfo()
    : BSSAP_Element(BSSAP_IEI_UE_SECURITY_INFO)
{
    ie.param_length = sizeof(BSSAP_UESecurityInformation) - 1;
    haveSecInfo = false;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UESecurityInfo::~BSSAP_UESecurityInfo()
{
}

// access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UESecurityInfo::SetUESecurityInfo(ITS_OCTET* type, int len)
{
    ie.param_length += len;
    memcpy(ie.param_data.ueSecurityInfo.sec_info, type, len);

    haveSecInfo = true;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_UESecurityInfo::GetUESecurityInfo(ITS_OCTET* buf, int& len)
{
    if (!haveSecInfo)
    {
        len = 0;

        return;
    }

    len = ie.param_length -
          (sizeof(ie.param_data.ueSecurityInfo) - 1);

    memcpy(buf, ie.param_data.ueSecurityInfo.sec_info, len);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UESecurityInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UESecurityInfo::Decode(ITS_OCTET* buf, int& len)
{
    if (!(len >= 2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.ueSecurityInfo) - 1)))
    {
        return (ITS_ENOMEM);
    }

    if (len > (2 * sizeof(ITS_OCTET) +
                  (sizeof(ie.param_data.ueSecurityInfo) - 1)))
    {
        haveSecInfo = true;
    }
    else
    {
        haveSecInfo = false;
    }

    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a UESecurityInfo IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_UESecurityInfo::Clone()
{
    BSSAP_UESecurityInfo *ret = new BSSAP_UESecurityInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.15 Facility ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Facility::BSSAP_Facility()
    : BSSAP_Element(BSSAP_IEI_CC_FACILITY)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Facility::~BSSAP_Facility()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_Facility::SetFacilityData(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.facility.data, data, len);
    ie.param_length = len;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_Facility::GetFacilityData(ITS_OCTET *data, ITS_OCTET &len)
{
    len = ie.param_length; 
    memcpy((void *)data, (void *)(ie.param_data.facility.data), len);
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Facility::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Facility::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Facility::Clone()
{
    BSSAP_Facility *ret = new BSSAP_Facility();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.4.5.21 Progress Indicator ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ProgressIndicator::BSSAP_ProgressIndicator()
    : BSSAP_Element(BSSAP_IEI_CC_PROGRESS_INDICATOR)
{
    ie.param_length = sizeof(BSSAP_ProgressIndicator_IE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ProgressIndicator::~BSSAP_ProgressIndicator()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ProgressIndicator::SetCodingLocationDesc(ITS_OCTET coding, 
                                              ITS_OCTET location, ITS_OCTET desc)
{
    ie.param_data.progressIndicator.codingAndLocation = location & LOCATION_MASK;
    ie.param_data.progressIndicator.codingAndLocation |= (coding << 5) & CODING_STANDARD_MASK;
    ie.param_data.progressIndicator.codingAndLocation |= BSSAP_IEI_EXT_MASK;
    ie.param_data.progressIndicator.description = desc;
    ie.param_data.progressIndicator.description |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ProgressIndicator::GetCodingLocationDesc(ITS_OCTET &coding, ITS_OCTET &location, 
                                               ITS_OCTET &desc)
{
    location = ie.param_data.progressIndicator.codingAndLocation & LOCATION_MASK;
    coding = (ie.param_data.progressIndicator.codingAndLocation & CODING_STANDARD_MASK) >> 5;
    coding &= (~BSSAP_IEI_EXT_MASK);
    desc = ie.param_data.progressIndicator.description & (~BSSAP_IEI_EXT_MASK);
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ProgressIndicator::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ProgressIndicator::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ProgressIndicator::Clone()
{
    BSSAP_ProgressIndicator *ret = new BSSAP_ProgressIndicator();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.25 UserToUser ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UserToUser::BSSAP_UserToUser()
    : BSSAP_Element(BSSAP_IEI_CC_USER_USER)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UserToUser::~BSSAP_UserToUser()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_UserToUser::SetUserInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.userToUserInfo.info, data, len);
    ie.param_length = len + 1;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_UserToUser::GetUserInfo(ITS_OCTET *data, ITS_OCTET &len)
{
    len = ie.param_length - 1; 
    memcpy((void *)data, (void *)(ie.param_data.userToUserInfo.info), len);
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_UserToUser::SetProtocolDiscriminator(ITS_OCTET disc)
{
    ie.param_data.userToUserInfo.disc = disc;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_UserToUser::GetProtocolDiscriminator(ITS_OCTET &disc)
{
    disc = ie.param_data.userToUserInfo.disc;
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UserToUser::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_UserToUser::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[2], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_UserToUser::Clone()
{
    BSSAP_UserToUser *ret = new BSSAP_UserToUser();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.1.11 Priority Level ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PriorityLevel::BSSAP_PriorityLevel()
    : BSSAP_Element(BSSAP_IEI_PRIORITY_LEVEL)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PriorityLevel::~BSSAP_PriorityLevel()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_PriorityLevel::SetPriority(ITS_OCTET prior)
{
    ie.param_data.priorityLevel.prior = prior;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_PriorityLevel::GetPriority(ITS_OCTET &prior)
{
   prior = ie.param_data.priorityLevel.prior;
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_PriorityLevel::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = (ie.param_data.priorityLevel.prior) & PRIORITY_LEVEL_MASK;
    buf[0] |= ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_PriorityLevel::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0] & 0xf0;
    ie.param_length = 1;
    ie.param_data.priorityLevel.prior = buf[0] & PRIORITY_LEVEL_MASK;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_PriorityLevel::Clone()
{
    BSSAP_PriorityLevel *ret = new BSSAP_PriorityLevel();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.22 Repeat Indicator ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RepeatIndicator::BSSAP_RepeatIndicator()
    : BSSAP_Element(BSSAP_IEI_CC_REPEAT_INDICATOR)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RepeatIndicator::~BSSAP_RepeatIndicator()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RepeatIndicator::SetRepeatType(ITS_OCTET type)
{
    ie.param_data.repeatIndicator.value = type;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RepeatIndicator::GetRepeatType(ITS_OCTET &type)
{
   type = ie.param_data.repeatIndicator.value;
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RepeatIndicator::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = (ie.param_data.repeatIndicator.value) & REPEAT_INDICATOR_MASK;
    buf[0] |= ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RepeatIndicator::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0] & 0xf0;
    ie.param_length = 1;
    ie.param_data.repeatIndicator.value = buf[0] & REPEAT_INDICATOR_MASK;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_RepeatIndicator::Clone()
{
    BSSAP_RepeatIndicator *ret = new BSSAP_RepeatIndicator();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.19 More Data ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MoreData::BSSAP_MoreData()
    : BSSAP_Element(BSSAP_IEI_CC_MORE_DATA)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MoreData::~BSSAP_MoreData()
{
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MoreData::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_MoreData::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = 0;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_MoreData::Clone()
{
    BSSAP_MoreData *ret = new BSSAP_MoreData();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.22a Reverse Call Setup Direction ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReverseCallSetupDirection::BSSAP_ReverseCallSetupDirection()
    : BSSAP_Element(BSSAP_IEI_CC_REVERSE_CALL_SETUP_DIRECTION)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReverseCallSetupDirection::~BSSAP_ReverseCallSetupDirection()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReverseCallSetupDirection::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ReverseCallSetupDirection::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = 0;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ReverseCallSetupDirection::Clone()
{
    BSSAP_ReverseCallSetupDirection *ret = new BSSAP_ReverseCallSetupDirection();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.11a CLIR Invocation  ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CLIRSuppression::BSSAP_CLIRSuppression()
    : BSSAP_Element(BSSAP_IEI_CC_CLIR_SUPPRESSION)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CLIRSuppression::~BSSAP_CLIRSuppression()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CLIRSuppression::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CLIRSuppression::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = 0;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CLIRSuppression::Clone()
{
    BSSAP_CLIRSuppression *ret = new BSSAP_CLIRSuppression();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.11b CLIR Invocation  ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CLIRInvocation::BSSAP_CLIRInvocation()
    : BSSAP_Element(BSSAP_IEI_CC_CLIR_INVOCATION)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CLIRInvocation::~BSSAP_CLIRInvocation()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CLIRInvocation::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CLIRInvocation::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = 0;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CLIRInvocation::Clone()
{
    BSSAP_CLIRInvocation *ret = new BSSAP_CLIRInvocation();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.11 CC Cause ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCCause::BSSAP_CCCause()
    : BSSAP_Element(BSSAP_IEI_CC_CAUSE)
{
    ie.param_length = 2;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCCause::~BSSAP_CCCause()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::SetCodingLocationCause(ITS_OCTET coding, ITS_OCTET location, 
                               ITS_OCTET cause)
{
    ie.param_data.ccCause.codingAndLocation = location & LOCATION_MASK;
    ie.param_data.ccCause.codingAndLocation |= (coding << 5) & CODING_STANDARD_MASK;
    ie.param_data.ccCause.codingAndLocation |= BSSAP_IEI_EXT_MASK;
    ie.param_data.ccCause.cause = cause;
    ie.param_data.ccCause.cause |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::GetCodingLocationCause(ITS_OCTET &coding, ITS_OCTET &location,
                               ITS_OCTET &cause)

{
    location = ie.param_data.ccCause.codingAndLocation & LOCATION_MASK;
    coding = (ie.param_data.ccCause.codingAndLocation & CODING_STANDARD_MASK) >> 5;
    cause = ie.param_data.ccCause.cause & ~BSSAP_IEI_EXT_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::SetRecommendation(ITS_OCTET rec)
{
    ie.param_data.ccCause.recommendation = rec;
    ie.param_data.ccCause.recommendation |= BSSAP_IEI_EXT_MASK;
    ie.param_data.ccCause.codingAndLocation &= ~BSSAP_IEI_EXT_MASK;
    ie.param_length++;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::GetRecommendation(ITS_OCTET &rec)
{
    rec = ie.param_data.ccCause.recommendation & ~BSSAP_IEI_EXT_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::IsRecommendationPresent()
{
    if (ie.param_data.ccCause.codingAndLocation & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::SetDiagnostics(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.ccCause.diagInfo, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCause::GetDiagnostics(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsRecommendationPresent())
    {
        len = ie.param_length - 3;
    }
    else
    {
        len = ie.param_length - 2;
    }

    memcpy(data, ie.param_data.ccCause.diagInfo, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CCCause::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    buf[2] = ie.param_data.ccCause.codingAndLocation;
    if ( IsRecommendationPresent())
    {
        buf[3] = ie.param_data.ccCause.recommendation;
        buf[4] = ie.param_data.ccCause.cause;
        memcpy(&buf[5], ie.param_data.ccCause.diagInfo, ie.param_length - 3);
    }
    else
    {
        buf[3] = ie.param_data.ccCause.cause;
        memcpy(&buf[4], ie.param_data.ccCause.diagInfo, ie.param_length - 2);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CCCause::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.ccCause.codingAndLocation = buf[2];
    
    if ( IsRecommendationPresent())
    {
        ie.param_data.ccCause.recommendation = buf[3];
        ie.param_data.ccCause.cause = buf[4];
        memcpy(ie.param_data.ccCause.diagInfo, &buf[5], ie.param_length - 3);
    }
    else
    {
        ie.param_data.ccCause.cause = buf[3];
        memcpy(ie.param_data.ccCause.diagInfo, &buf[4], ie.param_length - 2);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CCCause::Clone()
{
    BSSAP_CCCause *ret = new BSSAP_CCCause();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.12 Congestion Levelr ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CongestionLevel::BSSAP_CongestionLevel()
    : BSSAP_Element(BSSAP_IEI_CC_CONGESTION_LEVEL_INTERNAL)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CongestionLevel::~BSSAP_CongestionLevel()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CongestionLevel::SetCongestionLevel(ITS_OCTET level)
{
    ie.param_data.congestionLevel.value = level;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CongestionLevel::GetCongestionLevel(ITS_OCTET &level)
{
    level = ie.param_data.congestionLevel.value;
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CongestionLevel::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = (ie.param_data.congestionLevel.value) & CONG_LEVEL_MASK ;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CongestionLevel::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = BSSAP_IEI_CC_CONGESTION_LEVEL_INTERNAL;
    ie.param_length = 1;
    ie.param_data.congestionLevel.value = buf[0] & CONG_LEVEL_MASK ;

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CongestionLevel::Clone()
{
    BSSAP_CongestionLevel *ret = new BSSAP_CongestionLevel();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.20 Notification Indicator ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NotificationIndicator::BSSAP_NotificationIndicator()
    : BSSAP_Element(BSSAP_IEI_CC_NOTIFICATION_INDICATOR_INTERNAL)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_NotificationIndicator::~BSSAP_NotificationIndicator()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_NotificationIndicator::SetNotifyIndicator(ITS_OCTET value)
{
    ie.param_data.notificationIndicator.value = value | BSSAP_IEI_EXT_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_NotificationIndicator::GetNotifyIndicator(ITS_OCTET &value)
{
    value = ie.param_data.notificationIndicator.value & ~BSSAP_IEI_EXT_MASK;
    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NotificationIndicator::Encode(ITS_OCTET* buf, int& len)
{
    len = 1;

    buf[0] = (ie.param_data.notificationIndicator.value);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_NotificationIndicator::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = BSSAP_IEI_CC_NOTIFICATION_INDICATOR_INTERNAL;
    ie.param_length = 1;
    ie.param_data.notificationIndicator.value = buf[0];

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_NotificationIndicator::Clone()
{
    BSSAP_NotificationIndicator *ret = new BSSAP_NotificationIndicator();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.13 Connected Number ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectedNumber::BSSAP_ConnectedNumber()
    : BSSAP_Element(BSSAP_IEI_CC_CONNECTED_NUMBER)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectedNumber::~BSSAP_ConnectedNumber()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::SetTypeAndNumPlan(ITS_OCTET type, ITS_OCTET numPlan)
{
    ie.param_data.connectedNumber.typeAndNumPlan = numPlan & NUM_PLAN_MASK;
    ie.param_data.connectedNumber.typeAndNumPlan |= (type << 4) & TYPE_OF_NUMBER_MASK;
    ie.param_data.connectedNumber.typeAndNumPlan |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::GetTypeAndNumPlan(ITS_OCTET &type, ITS_OCTET &numPlan)

{
    numPlan = ie.param_data.connectedNumber.typeAndNumPlan & NUM_PLAN_MASK;
    type = (ie.param_data.connectedNumber.typeAndNumPlan & TYPE_OF_NUMBER_MASK) >> 4;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::SetPresentationAndScreening(ITS_OCTET pres, ITS_OCTET screening)
{
    ie.param_data.connectedNumber.presentationScreening = screening & USER_SCREENING_MASK;
    ie.param_data.connectedNumber.presentationScreening |= (pres << 5) & USER_SCREENING_MASK;
    ie.param_data.connectedNumber.presentationScreening |= BSSAP_IEI_EXT_MASK;
    ie.param_data.connectedNumber.typeAndNumPlan &= ~BSSAP_IEI_EXT_MASK;
    ie.param_length++;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::GetPresentationAndScreening(ITS_OCTET &pres, ITS_OCTET &screening)
{
    screening = ie.param_data.connectedNumber.presentationScreening & USER_SCREENING_MASK;
    pres = (ie.param_data.connectedNumber.presentationScreening  & PRESENTATION_MASK) >> 5;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::IsPresntationScreeningPresent()
{
    if (ie.param_data.connectedNumber.typeAndNumPlan & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::SetDigits(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.connectedNumber.digits, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedNumber::GetDigits(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsPresntationScreeningPresent())
    {
        len = ie.param_length - 2;
    }
    else
    {
        len = ie.param_length - 1;
    }

    memcpy(data, ie.param_data.connectedNumber.digits, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConnectedNumber::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    buf[2] = ie.param_data.connectedNumber.typeAndNumPlan;
    if ( IsPresntationScreeningPresent())
    {
        buf[3] = ie.param_data.connectedNumber.presentationScreening;
        memcpy(&buf[4], ie.param_data.connectedNumber.digits, ie.param_length - 2);
    }
    else
    {
        memcpy(&buf[3], ie.param_data.connectedNumber.digits, ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConnectedNumber::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.connectedNumber.typeAndNumPlan = buf[2];
    
    if (  IsPresntationScreeningPresent())
    {
        ie.param_data.connectedNumber.presentationScreening = buf[3];
        memcpy(ie.param_data.connectedNumber.digits, &buf[4], ie.param_length - 2);
    }
    else
    {
        memcpy(ie.param_data.connectedNumber.digits, &buf[3], ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ConnectedNumber::Clone()
{
    BSSAP_ConnectedNumber *ret = new BSSAP_ConnectedNumber();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.14 Connected SubAddress ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectedSubAddress::BSSAP_ConnectedSubAddress()
    : BSSAP_Element(BSSAP_IEI_CC_CONNECTED_SUB_ADDRESS)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectedSubAddress::~BSSAP_ConnectedSubAddress()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedSubAddress::SetSubAddressType(ITS_OCTET type, ITS_BOOLEAN isOdd)
{
    ie.param_data.connectedSubAddress.typeInfo = (type << 4) & SUB_ADDRESS_TYPE_MASK;

    if (isOdd)
    {
        ie.param_data.connectedSubAddress.typeInfo |= SUB_ADDRESS_ODDEVEN_MASK;
    }

    ie.param_data.connectedSubAddress.typeInfo |= BSSAP_IEI_EXT_MASK;
    ie.param_length += 1;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedSubAddress::GetSubAddressType(ITS_OCTET &type, ITS_BOOLEAN &isOdd)

{
    type = (ie.param_data.connectedSubAddress.typeInfo & SUB_ADDRESS_TYPE_MASK) >> 4;

    if (ie.param_data.connectedSubAddress.typeInfo & SUB_ADDRESS_ODDEVEN_MASK)
    {
        isOdd = ITS_TRUE;
    }

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedSubAddress::IsSubAddressTypePresent()
{
    if (ie.param_data.connectedSubAddress.typeInfo & BSSAP_IEI_EXT_MASK)
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedSubAddress::SetSubAddressInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.connectedSubAddress.info, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_ConnectedSubAddress::GetSubAddressInfo(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsSubAddressTypePresent())
    {
        len = ie.param_length - 1;
    }
    else
    {
        len = ie.param_length;
    }

    memcpy(data, ie.param_data.connectedSubAddress.info, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConnectedSubAddress::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    if ( IsSubAddressTypePresent())
    {
        buf[2] = ie.param_data.connectedSubAddress.typeInfo;
        memcpy(&buf[3], ie.param_data.connectedSubAddress.info, ie.param_length - 1);
    }
    else
    {
        memcpy(&buf[2], ie.param_data.connectedSubAddress.info, ie.param_length);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ConnectedSubAddress::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.connectedSubAddress.typeInfo = buf[2];
    
    if (IsSubAddressTypePresent())
    {
        memcpy(ie.param_data.connectedSubAddress.info, &buf[3], ie.param_length - 1);
    }
    else
    {
        memcpy(ie.param_data.connectedSubAddress.info, &buf[2], ie.param_length);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ConnectedSubAddress::Clone()
{
    BSSAP_ConnectedSubAddress *ret = new BSSAP_ConnectedSubAddress();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.16 High Level Compatibility ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HighLevelCompInfo::BSSAP_HighLevelCompInfo()
    : BSSAP_Element(BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HighLevelCompInfo::~BSSAP_HighLevelCompInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::SetCodingPrsInterpretAndCharacterstics(ITS_OCTET cpi, ITS_OCTET chrs)
{
    ie.param_data.highLevelCompInfo.codingPrsInterpret = cpi;
    ie.param_data.highLevelCompInfo.codingPrsInterpret |= BSSAP_IEI_EXT_MASK;
    ie.param_data.highLevelCompInfo.characterstics = chrs;
    ie.param_data.highLevelCompInfo.characterstics |= BSSAP_IEI_EXT_MASK;

    ie.param_length += 2;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::GetCodingPrsInterpretAndCharacterstics(ITS_OCTET &cpi,
                                               ITS_OCTET &chrs)
{
    cpi = ie.param_data.highLevelCompInfo.codingPrsInterpret;
    cpi &= ~BSSAP_IEI_EXT_MASK;
    chrs = ie.param_data.highLevelCompInfo.characterstics;
    chrs &= ~BSSAP_IEI_EXT_MASK;


    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::IsExtendedCharactersticsPresent()
{
    if (ie.param_data.highLevelCompInfo.characterstics & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::IsCodingPrsInterpretAndCharactersticsPresent()
{
    if (ie.param_length > 0)
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::SetExtendedCharacterstics(ITS_OCTET xchrs)
{

    ie.param_data.highLevelCompInfo.extendedCharacterstics = xchrs;
    ie.param_data.highLevelCompInfo.extendedCharacterstics |= BSSAP_IEI_EXT_MASK;
    ie.param_data.highLevelCompInfo.characterstics &= ~BSSAP_IEI_EXT_MASK;
    ie.param_length += 1;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_HighLevelCompInfo::GetExtendedCharacterstics(ITS_OCTET &xchrs)
{
    xchrs = ie.param_data.highLevelCompInfo.extendedCharacterstics;
    xchrs &= ~BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_HighLevelCompInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_HighLevelCompInfo::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    memcpy(&(ie.param_data), &buf[2], ie.param_length);


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_HighLevelCompInfo::Clone()
{
    BSSAP_HighLevelCompInfo *ret = new BSSAP_HighLevelCompInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 10.5.4.17 Low Level Compatibility ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LowLevelCompInfo::BSSAP_LowLevelCompInfo()
    : BSSAP_Element(BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LowLevelCompInfo::~BSSAP_LowLevelCompInfo()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_LowLevelCompInfo::SetLowLevelCompInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.lowLevelCompInfo.data, data, len);

    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_LowLevelCompInfo::GetLowLevelCompInfo(ITS_OCTET *data, ITS_OCTET &len)
{

    len = ie.param_length;

    memcpy(data, ie.param_data.lowLevelCompInfo.data, len);



    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LowLevelCompInfo::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LowLevelCompInfo::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    memcpy(&(ie.param_data), &buf[2], ie.param_length);


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LowLevelCompInfo::Clone()
{
    BSSAP_LowLevelCompInfo *ret = new BSSAP_LowLevelCompInfo();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.17 Setup Container ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SetupContainer::BSSAP_SetupContainer()
    : BSSAP_Element(BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SetupContainer::~BSSAP_SetupContainer()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_SetupContainer::SetSetupData(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.setupContainer.data, data, len);

    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_SetupContainer::GetSetupData(ITS_OCTET *data, ITS_OCTET &len)
{

    len = ie.param_length;

    memcpy(data, ie.param_data.setupContainer.data, len);



    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SetupContainer::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 1;

    buf[0] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SetupContainer::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL;
    ie.param_length = buf[1];

    memcpy(&(ie.param_data), &buf[2], ie.param_length);


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_SetupContainer::Clone()
{
    BSSAP_SetupContainer *ret = new BSSAP_SetupContainer();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.24 SS Version ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SSVersion::BSSAP_SSVersion()
    : BSSAP_Element(BSSAP_IEI_CC_SS_VERSION_IND)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SSVersion::~BSSAP_SSVersion()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_SSVersion::SetSSVersion(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.ssVersion.data, data, len);

    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_SSVersion::GetSSVersion(ITS_OCTET *data, ITS_OCTET &len)
{

    len = ie.param_length;

    memcpy(data, ie.param_data.ssVersion.data, len);



    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SSVersion::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_SSVersion::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    memcpy(&(ie.param_data), &buf[2], ie.param_length);


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_SSVersion::Clone()
{
    BSSAP_SSVersion *ret = new BSSAP_SSVersion();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.17 Key pad facility ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_KeyPadFacility::BSSAP_KeyPadFacility()
    : BSSAP_Element(BSSAP_IEI_CC_KEYPAD_FACILITY)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_KeyPadFacility::~BSSAP_KeyPadFacility()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_KeyPadFacility::SetKeyValue(ITS_OCTET value)
{
    ie.param_data.keyPadFacility.value = value;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_KeyPadFacility::GetKeyValue(ITS_OCTET &value)
{

    value = ie.param_data.keyPadFacility.value; 


    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_KeyPadFacility::Encode(ITS_OCTET* buf, int& len)
{
    len = 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_data.keyPadFacility.value;


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_KeyPadFacility::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_data.keyPadFacility.value = buf[1];

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_KeyPadFacility::Clone()
{
    BSSAP_KeyPadFacility *ret = new BSSAP_KeyPadFacility();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 10.5.4.23 Signal ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Signal::BSSAP_Signal()
    : BSSAP_Element(BSSAP_IEI_CC_SIGNAL)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Signal::~BSSAP_Signal()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_Signal::SetSignal(ITS_OCTET signal)
{
    ie.param_data.signal.value = signal;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_Signal::GetSignal(ITS_OCTET &signal)
{

    signal = ie.param_data.signal.value; 


    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Signal::Encode(ITS_OCTET* buf, int& len)
{
    len = 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_data.signal.value;


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Signal::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_data.signal.value = buf[1];

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_Signal::Clone()
{
    BSSAP_Signal *ret = new BSSAP_Signal();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.6 Call State ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallState::BSSAP_CallState()
    : BSSAP_Element(BSSAP_IEI_CC_CALL_STATE_INTERNAL)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallState::~BSSAP_CallState()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallState::SetCodingAndState(ITS_OCTET coding, ITS_OCTET state)
{
    ie.param_data.callState.value = state & CALL_STATE_MASK;
    ie.param_data.callState.value |= (coding & CALL_STATE_CODING_MASK) << 6;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallState::GetCodingAndState(ITS_OCTET &coding, ITS_OCTET &state)
{

    state = ie.param_data.callState.value & CALL_STATE_MASK; 
    coding = (ie.param_data.callState.value & CALL_STATE_CODING_MASK) >> 6; 


    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
*
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallState::Encode(ITS_OCTET* buf, int& len)
{
    len = 2;

    buf[0] = ie.param_data.callState.value;


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallState::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_data.signal.value = buf[0];

    return (ITS_SUCCESS);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CallState::Clone()
{
    BSSAP_CallState *ret = new BSSAP_CallState();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.4 AuxState ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuxState::BSSAP_AuxState()
    : BSSAP_Element(BSSAP_IEI_CC_AUXILLARY_STATES)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuxState::~BSSAP_AuxState()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_AuxState::SetAuxState(ITS_OCTET state)
{
    ie.param_data.auxState.value = state;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_AuxState::GetAuxState(ITS_OCTET &state)
{

    state = ie.param_data.auxState.value; 


    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_AuxState::Encode(ITS_OCTET* buf, int& len)
{
    len = 3;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    buf[2] = ie.param_data.auxState.value;


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_AuxState::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    ie.param_data.auxState.value = buf[2];

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_AuxState::Clone()
{
    BSSAP_AuxState *ret = new BSSAP_AuxState();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.5a CC Capabilities ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCCapabilities::BSSAP_CCCapabilities()
    : BSSAP_Element(BSSAP_IEI_CC_CAPABILITIES)
{
    ie.param_length = 1;
    ie.param_data.ccCapabilities.value = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCCapabilities::~BSSAP_CCCapabilities()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCapabilities::SetDTMF()
{
    ie.param_data.ccCapabilities.value |= CC_CAPAB_DTMF_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCapabilities::SetPCP()
{
    ie.param_data.ccCapabilities.value |= CC_CAPAB_PCP_MASK;

    return ITS_SUCCESS;

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCapabilities::IsDTMFSet()
{
    if (ie.param_data.ccCapabilities.value &  CC_CAPAB_DTMF_MASK)
    {
         return ITS_TRUE;
    }
    else
    {
         return ITS_FALSE;
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CCCapabilities::IsPCPSet()
{
    if (ie.param_data.ccCapabilities.value &  CC_CAPAB_PCP_MASK)
    {
         return ITS_TRUE;
    }
    else
    {
         return ITS_FALSE;
    }

    return ITS_SUCCESS;

}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CCCapabilities::Encode(ITS_OCTET* buf, int& len)
{
    len = 3;

    buf[0] = ie.param_id;
    buf[1] = 1;
    buf[2] = ie.param_data.ccCapabilities.value;


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CCCapabilities::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];
    ie.param_data.ccCapabilities.value = buf[2];

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CCCapabilities::Clone()
{
    BSSAP_CCCapabilities *ret = new BSSAP_CCCapabilities();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.7 Called Number ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CalledPartyBCDNumber::BSSAP_CalledPartyBCDNumber()
    : BSSAP_Element(BSSAP_IEI_CC_CALLED_PARTY_BCD_NUMBER)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CalledPartyBCDNumber::~BSSAP_CalledPartyBCDNumber()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartyBCDNumber::SetTypeAndNumPlan(ITS_OCTET type, ITS_OCTET numPlan)
{
    ie.param_data.calledPartyBCDNumber.typeAndNumPlan = numPlan & NUM_PLAN_MASK;
    ie.param_data.calledPartyBCDNumber.typeAndNumPlan |= (type << 4) & TYPE_OF_NUMBER_MASK;
    ie.param_data.calledPartyBCDNumber.typeAndNumPlan |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartyBCDNumber::GetTypeAndNumPlan(ITS_OCTET &type, ITS_OCTET &numPlan)

{
    numPlan = ie.param_data.calledPartyBCDNumber.typeAndNumPlan & NUM_PLAN_MASK;
    type = (ie.param_data.calledPartyBCDNumber.typeAndNumPlan & TYPE_OF_NUMBER_MASK) >> 4;
    return ITS_SUCCESS;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartyBCDNumber::SetDigits(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.calledPartyBCDNumber.digits, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartyBCDNumber::GetDigits(ITS_OCTET *data, ITS_OCTET &len)
{
    len = ie.param_length - 1;

    memcpy(data, ie.param_data.calledPartyBCDNumber.digits, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CalledPartyBCDNumber::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, ie.param_length);


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CalledPartyBCDNumber::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    
     memcpy(&ie.param_data, &buf[2], ie.param_length);


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CalledPartyBCDNumber::Clone()
{
    BSSAP_CalledPartyBCDNumber *ret = new BSSAP_CalledPartyBCDNumber();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 10.5.4.8 Called SubAddress ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CalledPartySubAddress::BSSAP_CalledPartySubAddress()
    : BSSAP_Element(BSSAP_IEI_CC_CALLED_PARTY_SUB_ADDRESS)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CalledPartySubAddress::~BSSAP_CalledPartySubAddress()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartySubAddress::SetSubAddressType(ITS_OCTET type, ITS_BOOLEAN isOdd)
{
    ie.param_data.calledPartySubAddress.typeInfo = (type << 4) & SUB_ADDRESS_TYPE_MASK;

    if (isOdd)
    {
        ie.param_data.calledPartySubAddress.typeInfo |= SUB_ADDRESS_ODDEVEN_MASK;
    }

    ie.param_data.calledPartySubAddress.typeInfo |= BSSAP_IEI_EXT_MASK;
    ie.param_length += 1;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartySubAddress::GetSubAddressType(ITS_OCTET &type, ITS_BOOLEAN &isOdd)

{
    type = (ie.param_data.calledPartySubAddress.typeInfo & SUB_ADDRESS_TYPE_MASK) >> 4;

    if (ie.param_data.calledPartySubAddress.typeInfo & SUB_ADDRESS_ODDEVEN_MASK)
    {
        isOdd = ITS_TRUE;
    }

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartySubAddress::IsSubAddressTypePresent()
{
    if (ie.param_data.calledPartySubAddress.typeInfo & BSSAP_IEI_EXT_MASK)
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartySubAddress::SetSubAddressInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.calledPartySubAddress.info, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CalledPartySubAddress::GetSubAddressInfo(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsSubAddressTypePresent())
    {
        len = ie.param_length - 1;
    }
    else
    {
        len = ie.param_length;
    }

    memcpy(data, ie.param_data.calledPartySubAddress.info, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CalledPartySubAddress::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    if ( IsSubAddressTypePresent())
    {
        buf[2] = ie.param_data.calledPartySubAddress.typeInfo;
        memcpy(&buf[3], ie.param_data.calledPartySubAddress.info, ie.param_length - 1);
    }
    else
    {
        memcpy(&buf[2], ie.param_data.calledPartySubAddress.info, ie.param_length);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CalledPartySubAddress::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.calledPartySubAddress.typeInfo = buf[2];
    
    if (IsSubAddressTypePresent())
    {
        memcpy(ie.param_data.calledPartySubAddress.info, &buf[3], ie.param_length - 1);
    }
    else
    {
        memcpy(ie.param_data.calledPartySubAddress.info, &buf[2], ie.param_length);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CalledPartySubAddress::Clone()
{
    BSSAP_CalledPartySubAddress *ret = new BSSAP_CalledPartySubAddress();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.9 Calling Number ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallingPartyBCDNumber::BSSAP_CallingPartyBCDNumber()
    : BSSAP_Element(BSSAP_IEI_CC_CALLING_PARTY_BCD_NUMBER)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallingPartyBCDNumber::~BSSAP_CallingPartyBCDNumber()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::SetTypeAndNumPlan(ITS_OCTET type, ITS_OCTET numPlan)
{
    ie.param_data.callingPartyBCDNumber.typeAndNumPlan = numPlan & NUM_PLAN_MASK;
    ie.param_data.callingPartyBCDNumber.typeAndNumPlan |= (type << 4) & TYPE_OF_NUMBER_MASK;
    ie.param_data.callingPartyBCDNumber.typeAndNumPlan |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::GetTypeAndNumPlan(ITS_OCTET &type, ITS_OCTET &numPlan)

{
    numPlan = ie.param_data.callingPartyBCDNumber.typeAndNumPlan & NUM_PLAN_MASK;
    type = (ie.param_data.callingPartyBCDNumber.typeAndNumPlan & TYPE_OF_NUMBER_MASK) >> 4;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::SetPresentationAndScreening(ITS_OCTET pres, ITS_OCTET screening)
{
    ie.param_data.callingPartyBCDNumber.presentationScreening = screening & USER_SCREENING_MASK;
    ie.param_data.callingPartyBCDNumber.presentationScreening |= (pres << 5) & USER_SCREENING_MASK;
    ie.param_data.callingPartyBCDNumber.presentationScreening |= BSSAP_IEI_EXT_MASK;
    ie.param_data.callingPartyBCDNumber.typeAndNumPlan &= ~BSSAP_IEI_EXT_MASK;
    ie.param_length++;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::GetPresentationAndScreening(ITS_OCTET &pres, ITS_OCTET &screening)
{
    screening = ie.param_data.callingPartyBCDNumber.presentationScreening & USER_SCREENING_MASK;
    pres = (ie.param_data.callingPartyBCDNumber.presentationScreening  & PRESENTATION_MASK) >> 5;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::IsPresntationScreeningPresent()
{
    if (ie.param_data.callingPartyBCDNumber.typeAndNumPlan & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::SetDigits(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.callingPartyBCDNumber.digits, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartyBCDNumber::GetDigits(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsPresntationScreeningPresent())
    {
        len = ie.param_length - 2;
    }
    else
    {
        len = ie.param_length - 1;
    }

    memcpy(data, ie.param_data.callingPartyBCDNumber.digits, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallingPartyBCDNumber::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    buf[2] = ie.param_data.callingPartyBCDNumber.typeAndNumPlan;
    if ( IsPresntationScreeningPresent())
    {
        buf[3] = ie.param_data.callingPartyBCDNumber.presentationScreening;
        memcpy(&buf[4], ie.param_data.callingPartyBCDNumber.digits, ie.param_length - 2);
    }
    else
    {
        memcpy(&buf[3], ie.param_data.callingPartyBCDNumber.digits, ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallingPartyBCDNumber::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.callingPartyBCDNumber.typeAndNumPlan = buf[2];
    
    if (  IsPresntationScreeningPresent())
    {
        ie.param_data.callingPartyBCDNumber.presentationScreening = buf[3];
        memcpy(ie.param_data.callingPartyBCDNumber.digits, &buf[4], ie.param_length - 2);
    }
    else
    {
        memcpy(ie.param_data.callingPartyBCDNumber.digits, &buf[3], ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CallingPartyBCDNumber::Clone()
{
    BSSAP_CallingPartyBCDNumber *ret = new BSSAP_CallingPartyBCDNumber();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.10 Calling SubAddress ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallingPartySubAddress::BSSAP_CallingPartySubAddress()
    : BSSAP_Element(BSSAP_IEI_CC_CALLING_PARTY_SUB_ADDRESS)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallingPartySubAddress::~BSSAP_CallingPartySubAddress()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartySubAddress::SetSubAddressType(ITS_OCTET type, ITS_BOOLEAN isOdd)
{
    ie.param_data.callingPartySubAddress.typeInfo = (type << 4) & SUB_ADDRESS_TYPE_MASK;

    if (isOdd)
    {
        ie.param_data.callingPartySubAddress.typeInfo |= SUB_ADDRESS_ODDEVEN_MASK;
    }

    ie.param_data.callingPartySubAddress.typeInfo |= BSSAP_IEI_EXT_MASK;
    ie.param_length += 1;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartySubAddress::GetSubAddressType(ITS_OCTET &type, ITS_BOOLEAN &isOdd)

{
    type = (ie.param_data.callingPartySubAddress.typeInfo & SUB_ADDRESS_TYPE_MASK) >> 4;

    if (ie.param_data.callingPartySubAddress.typeInfo & SUB_ADDRESS_ODDEVEN_MASK)
    {
        isOdd = ITS_TRUE;
    }

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartySubAddress::IsSubAddressTypePresent()
{
    if (ie.param_data.callingPartySubAddress.typeInfo & BSSAP_IEI_EXT_MASK)
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartySubAddress::SetSubAddressInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.callingPartySubAddress.info, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_CallingPartySubAddress::GetSubAddressInfo(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsSubAddressTypePresent())
    {
        len = ie.param_length - 1;
    }
    else
    {
        len = ie.param_length;
    }

    memcpy(data, ie.param_data.callingPartySubAddress.info, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallingPartySubAddress::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    if ( IsSubAddressTypePresent())
    {
        buf[2] = ie.param_data.callingPartySubAddress.typeInfo;
        memcpy(&buf[3], ie.param_data.callingPartySubAddress.info, ie.param_length - 1);
    }
    else
    {
        memcpy(&buf[2], ie.param_data.callingPartySubAddress.info, ie.param_length);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CallingPartySubAddress::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.callingPartySubAddress.typeInfo = buf[2];
    
    if (IsSubAddressTypePresent())
    {
        memcpy(ie.param_data.callingPartySubAddress.info, &buf[3], ie.param_length - 1);
    }
    else
    {
        memcpy(ie.param_data.callingPartySubAddress.info, &buf[2], ie.param_length);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CallingPartySubAddress::Clone()
{
    BSSAP_CallingPartySubAddress *ret = new BSSAP_CallingPartySubAddress();

    *ret = *this;

    return (BSSAP_Element*)ret;
}



/* ---------- 10.5.4.21b Redirecting Number ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RedirectingPartyBCDNumber::BSSAP_RedirectingPartyBCDNumber()
    : BSSAP_Element(BSSAP_IEI_CC_REDIRECTING_PARTY_BCD_NUMBER)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RedirectingPartyBCDNumber::~BSSAP_RedirectingPartyBCDNumber()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::SetTypeAndNumPlan(ITS_OCTET type, ITS_OCTET numPlan)
{
    ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan = numPlan & NUM_PLAN_MASK;
    ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan |= (type << 4) & TYPE_OF_NUMBER_MASK;
    ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::GetTypeAndNumPlan(ITS_OCTET &type, ITS_OCTET &numPlan)

{
    numPlan = ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan & NUM_PLAN_MASK;
    type = (ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan & TYPE_OF_NUMBER_MASK) >> 4;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::SetPresentationAndScreening(ITS_OCTET pres, ITS_OCTET screening)
{
    ie.param_data.redirectingPartyBCDNumber.presentationScreening = screening & USER_SCREENING_MASK;
    ie.param_data.redirectingPartyBCDNumber.presentationScreening |= (pres << 5) & USER_SCREENING_MASK;
    ie.param_data.redirectingPartyBCDNumber.presentationScreening |= BSSAP_IEI_EXT_MASK;
    ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan &= ~BSSAP_IEI_EXT_MASK;
    ie.param_length++;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::GetPresentationAndScreening(ITS_OCTET &pres, ITS_OCTET &screening)
{
    screening = ie.param_data.redirectingPartyBCDNumber.presentationScreening & USER_SCREENING_MASK;
    pres = (ie.param_data.redirectingPartyBCDNumber.presentationScreening  & PRESENTATION_MASK) >> 5;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::IsPresntationScreeningPresent()
{
    if (ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::SetDigits(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.redirectingPartyBCDNumber.digits, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartyBCDNumber::GetDigits(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsPresntationScreeningPresent())
    {
        len = ie.param_length - 2;
    }
    else
    {
        len = ie.param_length - 1;
    }

    memcpy(data, ie.param_data.redirectingPartyBCDNumber.digits, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RedirectingPartyBCDNumber::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    buf[2] = ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan;
    if ( IsPresntationScreeningPresent())
    {
        buf[3] = ie.param_data.redirectingPartyBCDNumber.presentationScreening;
        memcpy(&buf[4], ie.param_data.redirectingPartyBCDNumber.digits, ie.param_length - 2);
    }
    else
    {
        memcpy(&buf[3], ie.param_data.redirectingPartyBCDNumber.digits, ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RedirectingPartyBCDNumber::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.redirectingPartyBCDNumber.typeAndNumPlan = buf[2];
    
    if (  IsPresntationScreeningPresent())
    {
        ie.param_data.redirectingPartyBCDNumber.presentationScreening = buf[3];
        memcpy(ie.param_data.redirectingPartyBCDNumber.digits, &buf[4], ie.param_length - 2);
    }
    else
    {
        memcpy(ie.param_data.redirectingPartyBCDNumber.digits, &buf[3], ie.param_length - 1);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_RedirectingPartyBCDNumber::Clone()
{
    BSSAP_RedirectingPartyBCDNumber *ret = new BSSAP_RedirectingPartyBCDNumber();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ---------- 10.5.4.21c Redirecting SubAddress ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RedirectingPartySubAddress::BSSAP_RedirectingPartySubAddress()
    : BSSAP_Element(BSSAP_IEI_CC_REDIRECTING_PARTY_SUB_ADDRESS)
{
    ie.param_length = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RedirectingPartySubAddress::~BSSAP_RedirectingPartySubAddress()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartySubAddress::SetSubAddressType(ITS_OCTET type, ITS_BOOLEAN isOdd)
{
    ie.param_data.redirectingPartySubAddress.typeInfo = (type << 4) & SUB_ADDRESS_TYPE_MASK;

    if (isOdd)
    {
        ie.param_data.redirectingPartySubAddress.typeInfo |= SUB_ADDRESS_ODDEVEN_MASK;
    }

    ie.param_data.redirectingPartySubAddress.typeInfo |= BSSAP_IEI_EXT_MASK;
    ie.param_length += 1;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartySubAddress::GetSubAddressType(ITS_OCTET &type, ITS_BOOLEAN &isOdd)
{
    type = (ie.param_data.redirectingPartySubAddress.typeInfo & SUB_ADDRESS_TYPE_MASK) >> 4;

    if (ie.param_data.redirectingPartySubAddress.typeInfo & SUB_ADDRESS_ODDEVEN_MASK)
    {
        isOdd = ITS_TRUE;
    }

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartySubAddress::IsSubAddressTypePresent()
{
    if (ie.param_data.redirectingPartySubAddress.typeInfo & BSSAP_IEI_EXT_MASK)
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartySubAddress::SetSubAddressInfo(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.redirectingPartySubAddress.info, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_RedirectingPartySubAddress::GetSubAddressInfo(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsSubAddressTypePresent())
    {
        len = ie.param_length - 1;
    }
    else
    {
        len = ie.param_length;
    }

    memcpy(data, ie.param_data.redirectingPartySubAddress.info, len);

    return ITS_SUCCESS;
}

// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RedirectingPartySubAddress::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    if ( IsSubAddressTypePresent())
    {
        buf[2] = ie.param_data.redirectingPartySubAddress.typeInfo;
        memcpy(&buf[3], ie.param_data.redirectingPartySubAddress.info, ie.param_length - 1);
    }
    else
    {
        memcpy(&buf[2], ie.param_data.redirectingPartySubAddress.info, ie.param_length);
    }


    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_RedirectingPartySubAddress::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.redirectingPartySubAddress.typeInfo = buf[2];
    
    if (IsSubAddressTypePresent())
    {
        memcpy(ie.param_data.redirectingPartySubAddress.info, &buf[3], ie.param_length - 1);
    }
    else
    {
        memcpy(ie.param_data.redirectingPartySubAddress.info, &buf[2], ie.param_length);
    }


    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_RedirectingPartySubAddress::Clone()
{
    BSSAP_RedirectingPartySubAddress *ret = new BSSAP_RedirectingPartySubAddress();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ---------- 10.5.4.5 Bearer Data ---------- */

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BearerData::BSSAP_BearerData()
    : BSSAP_Element(BSSAP_IEI_CC_BEARER_CAPABILITY)
{
    ie.param_length = 1;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BearerData::~BSSAP_BearerData()
{
}

 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetInfoTransferCapabAndRadioChannelType(ITS_OCTET capab,
                                                          ITS_OCTET rc)
{
    ie.param_data.bearerData.octet3 = (capab & BEARER_DATA_INFO_TRANSFER_CAPAB_MASK);
    ie.param_data.bearerData.octet3 |= (rc << 5) & BEARER_DATA_RADIO_CHANNEL_MASK;
    ie.param_data.bearerData.octet3 |= BSSAP_IEI_EXT_MASK;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::GetInfoTransferCapabAndRadioChannelType(ITS_OCTET &capab,
                                                 ITS_OCTET &rc)
{
    capab = (ie.param_data.bearerData.octet3 & BEARER_DATA_INFO_TRANSFER_CAPAB_MASK);
    rc = (ie.param_data.bearerData.octet3 & BEARER_DATA_RADIO_CHANNEL_MASK) >> 5;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetCodingGsm()
{
    ie.param_data.bearerData.octet3 &= ~BEARER_DATA_CODING_MASK;
    return ITS_SUCCESS;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetCodingReserved()
{
    ie.param_data.bearerData.octet3 |= BEARER_DATA_CODING_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetTransferModeCkt()
{
    ie.param_data.bearerData.octet3 &= ~BEARER_DATA_TRANSFER_MODE_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetTransferModePacket()
{
    ie.param_data.bearerData.octet3 |= BEARER_DATA_TRANSFER_MODE_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::GetCoding(ITS_OCTET &coding)
{
    coding = ie.param_data.bearerData.octet3 & BEARER_DATA_CODING_MASK;
    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::GetTransferMode(ITS_OCTET &mode)
{
    mode = ie.param_data.bearerData.octet3 & BEARER_DATA_TRANSFER_MODE_MASK;

    return ITS_SUCCESS;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetSpeechVersion(bool isExt, ITS_OCTET ver)
{
    ie.param_data.bearerData.octet3a = ver &SPEECH_VERSION_MASK;
    ie.param_data.bearerData.octet3a |= BSSAP_IEI_EXT_MASK;
    ie.param_data.bearerData.octet3 &= ~BSSAP_IEI_EXT_MASK;
    if (!isExt)
    {
        ie.param_data.bearerData.octet3a &= ~BSSAP_IEI_EXT_MASK;
    }

    ie.param_length++;

    return ITS_SUCCESS;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::GetSpeechVersion(bool &isExt, ITS_OCTET &ver)
{
    ver = ie.param_data.bearerData.octet3a & SPEECH_VERSION_MASK;

    if (ie.param_data.bearerData.octet3a & BSSAP_IEI_EXT_MASK)
    {
        isExt = false;
    }
    else
    {
        isExt = true;
    }

    return ITS_SUCCESS;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::IsSpeechVersionPresent()
{
    if( ie.param_data.bearerData.octet3 & BSSAP_IEI_EXT_MASK)
    {
        return ITS_FALSE;
    }
    else
    {
        return ITS_TRUE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::SetOptional(ITS_OCTET *data, ITS_OCTET len)
{
    memcpy(ie.param_data.bearerData.data, data, len);
    ie.param_length += len;

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int 
BSSAP_BearerData::GetOptional(ITS_OCTET *data, ITS_OCTET &len)
{
    if ( IsSpeechVersionPresent())
    {
        len = ie.param_length - 2;
    }
    else
    {
        len = ie.param_length - 1;
    }

    memcpy(data, ie.param_data.bearerData.data, len);

    return ITS_SUCCESS;
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes cic information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_BearerData::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2;

    buf[0] = ie.param_id;

    buf[1] = ie.param_length;

    buf[2] = ie.param_data.bearerData.octet3;
    buf[3] = ie.param_data.bearerData.octet3a;

    if ( IsSpeechVersionPresent())
    {
        memcpy(&buf[4], ie.param_data.bearerData.data, ie.param_length - 2);
    }
    else
    {
        memcpy(&buf[4], ie.param_data.bearerData.data, ie.param_length - 1);
    }

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into the cic information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_BearerData::Decode(ITS_OCTET* buf, int& len)
{
    ie.param_id = buf[0];
    ie.param_length = buf[1];

    ie.param_data.bearerData.octet3 = buf[2];

    if (IsSpeechVersionPresent())
    {
        ie.param_data.bearerData.octet3a = buf[3];
        memcpy(ie.param_data.bearerData.data, &buf[4],  ie.param_length - 2);
    }
    else
    {
        memcpy(ie.param_data.bearerData.data, &buf[3],  ie.param_length - 1);
    }
    

    return (ITS_SUCCESS);
}



/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CktIDCode IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_BearerData::Clone()
{
    BSSAP_BearerData *ret = new BSSAP_BearerData();

    *ret = *this;

    return (BSSAP_Element*)ret;
}





/************************************************************************
**
** START OF DTAP IEI
*************************************************************************/

/* ----------- 10.5.3.7 Follow on Proceed ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_FollowOnProceed::BSSAP_FollowOnProceed()
    : BSSAP_Element(BSSAP_IEI_FOLLOW_ON_PROCEED)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_FollowOnProceed::~BSSAP_FollowOnProceed()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_FollowOnProceed::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_FollowOnProceed::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
//memcpy(&ie.param_data, &buf[0],  len);    

    ie.param_id = buf[0];

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the Follow On Proceed IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_FollowOnProceed::Clone()
{
    BSSAP_FollowOnProceed *ret = new BSSAP_FollowOnProceed();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ----------- 10.5.3.10 CTS Permission ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CTSPermission::BSSAP_CTSPermission()
    : BSSAP_Element(BSSAP_IEI_CTS_PERMISSION)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CTSPermission::~BSSAP_CTSPermission()
{
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CTSPermission::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CTSPermission::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
    ie.param_id = buf[0];

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the CTSPermission IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CTSPermission::Clone()
{
    BSSAP_CTSPermission *ret = new BSSAP_CTSPermission();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ----------- 10.5.3.5 Location Updating Type ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingType::BSSAP_LocationUpdatingType()
    : BSSAP_Element(BSSAP_IEI_LOCATION_UPDATING_TYPE)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingType::~BSSAP_LocationUpdatingType()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_LocationUpdatingType::SetLocationUpdatingType(ITS_OCTET type)
{
    //BSSAP_SET_LOCATION_UPDATING_TYPE(ie.param_data.locationUpdatingType, type);
ie.param_data.locationUpdatingType.lut= type;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_LocationUpdatingType::GetLocationUpdatingType()
{
    return BSSAP_GET_LOCATION_UPDATING_TYPE(ie.param_data.locationUpdatingType);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_LocationUpdatingType::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    //buf[0] = ie.param_id;
    //buf[1] = ie.param_length;
    memcpy(&buf[0], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationUpdatingType::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the Follow On Proceed IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LocationUpdatingType::Clone()
{
    BSSAP_LocationUpdatingType *ret = new BSSAP_LocationUpdatingType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}






/* ----------- 10.5.1.2 Cyphering Key Sequence ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CypheringKeySequence::BSSAP_CypheringKeySequence()
    : BSSAP_Element(BSSAP_IEI_CYPHERING_KEY_SEQUENCE)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CypheringKeySequence::~BSSAP_CypheringKeySequence()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_CypheringKeySequence::SetCypheringKeySequence(ITS_OCTET type)
{
    //BSSAP_SET_CYPHERING_KEY_SEQUENCE(ie.param_data.CypheringKeySequence, type);
ie.param_data.CypheringKeySequence.cks=type;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CypheringKeySequence::GetCypheringKeySequence()
{
    return BSSAP_GET_CYPHERING_KEY_SEQUENCE(ie.param_data.CypheringKeySequence);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_CypheringKeySequence::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CypheringKeySequence::Decode(ITS_OCTET* buf, int& len)
{
 /*   if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }*/
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the Follow On Proceed IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CypheringKeySequence::Clone()
{
    BSSAP_CypheringKeySequence *ret = new BSSAP_CypheringKeySequence();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* --------------- 3.2.2.17 Location Area ID -----------------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationAreaID::BSSAP_LocationAreaID()
    : BSSAP_Element(BSSAP_IEI_LOCATION_AREA_IDENTIFIER)
{
    ie.param_length = sizeof(BSSAP_LocationAreaId);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationAreaID::~BSSAP_LocationAreaID()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::SetLocationAreaID(ITS_OCTET* lai)
{
    ie.param_data.LocationAreaIdentifier.MCC[0]=lai[0];
    ie.param_data.LocationAreaIdentifier.MCC[1]=lai[1];
    ie.param_data.LocationAreaIdentifier.MNC=lai[2];
    ie.param_data.LocationAreaIdentifier.LAC[0]=lai[3];
    ie.param_data.LocationAreaIdentifier.LAC[1]=lai[4];


    //LAI_SET_MCC(ie.param_data.LocationAreaIdentifier,  MCC);

    return (ITS_SUCCESS);

}



//access methods
/*.implementation:public
 ***********************************************************************
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::GetLocationAreaID(ITS_OCTET* lai)
{
    lai[0]=ie.param_data.LocationAreaIdentifier.MCC[0];
    lai[1]=(ie.param_data.LocationAreaIdentifier.MCC[1] & 0x0FU);
    lai[2]=ie.param_data.LocationAreaIdentifier.MNC;
    lai[3]=ie.param_data.LocationAreaIdentifier.LAC[0] ;
    lai[4]=ie.param_data.LocationAreaIdentifier.LAC[1] ;
    //LAI_GET_MCC(MCC);

    return (ITS_SUCCESS);
}
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.

 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::SetLocationAreaIDMCC(ITS_OCTET* MCC)
{
    ie.param_data.LocationAreaIdentifier.MCC[0]=MCC[0];
    ie.param_data.LocationAreaIdentifier.MCC[1]=(MCC[1] & 0x0FU);

    //LAI_SET_MCC(ie.param_data.LocationAreaIdentifier,  MCC);
    
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::GetLocationAreaIDMCC(ITS_OCTET* MCC)
{
    MCC[0]=ie.param_data.LocationAreaIdentifier.MCC[0];
    MCC[1]=(ie.param_data.LocationAreaIdentifier.MCC[1] & 0x0FU);

    //LAI_GET_MCC(MCC);

    return (ITS_SUCCESS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::SetLocationAreaIDMNC(ITS_OCTET* MNC)
{
    ie.param_data.LocationAreaIdentifier.MNC=(*MNC&0xF0U) | \
        ie.param_data.LocationAreaIdentifier.MCC[1] & 0x0FU;

    ie.param_data.LocationAreaIdentifier.MNC=ie.param_data.LocationAreaIdentifier.MCC[1];
    
    //LAI_SET_MNC(ie.param_data.LocationAreaIdentifier, MNC);
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::GetLocationAreaIDMNC(ITS_OCTET* MNC)
{
    *MNC=ie.param_data.LocationAreaIdentifier.MCC[1]&0x0FU;
    
    //LAI_GET_MNC(MNC);
    return (ITS_SUCCESS);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::SetLocationAreaIDLAC(ITS_OCTET* LAC)
{
    ie.param_data.LocationAreaIdentifier.LAC[0]=LAC[0];
    ie.param_data.LocationAreaIdentifier.LAC[1]=LAC[1];
    
    //LAI_SET_LAC(ie.param_data.LocationAreaIdentifier, LAC);
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::GetLocationAreaIDLAC(ITS_OCTET* LAC)
{
    ie.param_data.LocationAreaIdentifier.LAC[0]=LAC[0];
    ie.param_data.LocationAreaIdentifier.LAC[1]=LAC[1];
    //LAI_GET_LAC(LAC);
    return (ITS_SUCCESS);
}


// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::Encode(ITS_OCTET* buf, int& len)
{
    len = 7 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_LocationAreaID::Decode(ITS_OCTET* buf, int& len)
{
len = 5*sizeof(ITS_OCTET);
    //ie.param_id = buf[0];
    //ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[0], len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a CellID IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_LocationAreaID::Clone()
{
    BSSAP_LocationAreaID *ret = new BSSAP_LocationAreaID();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* --------------- 3.2.2.17 ParameterRand -----------------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ParameterRand::BSSAP_ParameterRand()
    : BSSAP_Element(BSSAP_IEI_PARAMETER_RAND)
{
    ie.param_length = 18 * sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ParameterRand::~BSSAP_ParameterRand()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterRand::SetParameterRand(ITS_OCTET* pararand)
{
     memcpy(&ie.param_data.ParameterRand.data, pararand, 16);

    
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterRand::GetParameterRand(ITS_OCTET* pararand)
{
    memcpy(pararand,&ie.param_data.ParameterRand, ie.param_length);


    return (ITS_SUCCESS);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterRand::Encode(ITS_OCTET* buf, int& len)
{
    len = 18 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterRand::Decode(ITS_OCTET* buf, int& len)
{
 /*   if (len <  sizeof(BSSAP_CellIdentifier) -
               sizeof(BSSAP_CellIDType) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }*/
   // ie.param_id = buf[0];
   // ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[0], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a BSSAP_ParameterRand IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ParameterRand::Clone()
{
    BSSAP_ParameterRand *ret = new BSSAP_ParameterRand();

    *ret = *this;

    return (BSSAP_Element*)ret;
}




/* --------------- 3.2.2.17 ParameterSres -----------------*/
//constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ParameterSres::BSSAP_ParameterSres()
    : BSSAP_Element(BSSAP_IEI_PARAMETER_SRES)
{
    ie.param_length = 6 * sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ParameterSres::~BSSAP_ParameterSres()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterSres::SetParameterSres(ITS_OCTET* parasres)
{
     memcpy(&ie.param_data.ParameterSres, parasres, 4);
    //ie.param_data.LocationAreaIdentifier.MCC[1]=(MCC[1] & 0x0FU);

    //LAI_SET_MCC(ie.param_data.LocationAreaIdentifier,  MCC);
    
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterSres::GetParameterSres(ITS_OCTET* parasres)
{
    memcpy(parasres,&ie.param_data.ParameterSres, ie.param_length);

    //LAI_GET_MCC(MCC);

    return (ITS_SUCCESS);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterSres::Encode(ITS_OCTET* buf, int& len)
{
    len = 6 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_ParameterSres::Decode(ITS_OCTET* buf, int& len)
{
 /*   if (len <  sizeof(BSSAP_CellIdentifier) -
               sizeof(BSSAP_CellIDType) + 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }*/
//    ie.param_id = buf[0];
//    ie.param_length = buf[1];
    memcpy(&ie.param_data, &buf[0], ie.param_length);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the a BSSAP_ParameterSres IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_ParameterSres::Clone()
{
    BSSAP_ParameterSres *ret = new BSSAP_ParameterSres();

    *ret = *this;

    return (BSSAP_Element*)ret;
}

/* ----------- 10.5.3.1 IdentityType ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityType::BSSAP_IdentityType()
    : BSSAP_Element(BSSAP_IEI_IDENTITY_TYPE)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityType::~BSSAP_IdentityType()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_IdentityType::SetIdentityType(ITS_OCTET IDType)
{
   ie.param_data.IdentityType.idt= ((IDType | 0xF0U) & 0xF7U); /* mask with 0xF0
                                                         to include the IEI
                                                         mask 0xF7 to add the
                                                         spare bit 4.*/
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_IdentityType::GetIdentityType()
{
    return (ie.param_data.IdentityType.idt & 0x07U);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_IdentityType::Encode(ITS_OCTET* buf, int& len)
{
    len = sizeof(ITS_OCTET);

   // buf[0] = ie.param_data;
  //  buf[1] = ie.param_length;
    memcpy(&buf[0], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_IdentityType::Decode(ITS_OCTET* buf, int& len)
{
    if (len != sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the IdentityType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_IdentityType::Clone()
{
    BSSAP_IdentityType *ret = new BSSAP_IdentityType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 10.5.3.3 CMServiceType ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceType::BSSAP_CMServiceType()
    : BSSAP_Element(BSSAP_IEI_CM_SERVICE_TYPE)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceType::~BSSAP_CMServiceType()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CMServiceType::SetCMServiceType(ITS_OCTET CMServType)
{
   ie.param_data.CMServiceType.cst= ((CMServType | 0xE0U)); /* mask with 0xE0
                                                         to include the IEI.*/
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_CMServiceType::GetCMServiceType()
{
    return (ie.param_data.CMServiceType.cst & 0x0FU);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_CMServiceType::Encode(ITS_OCTET* buf, int& len)
{
    len =  sizeof(ITS_OCTET);

   // buf[0] = ie.param_data;
  //  buf[1] = ie.param_length;
    memcpy(&buf[0], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_CMServiceType::Decode(ITS_OCTET* buf, int& len)
{
    if (len !=  sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the IdentityType IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_CMServiceType::Clone()
{
    BSSAP_CMServiceType *ret = new BSSAP_CMServiceType();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 10.5.3.8 TimeZone ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeZone::BSSAP_TimeZone()
    : BSSAP_Element(BSSAP_IEI_TIME_ZONE)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeZone::~BSSAP_TimeZone()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZone::SetTimeZone(ITS_OCTET TZone)
{
   ie.param_data.TimeZone.tz = TZone;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZone::GetTimeZone()
{
    return (ie.param_data.TimeZone.tz);
}



// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_TimeZone::Encode(ITS_OCTET* buf, int& len)
{
    len = ie.param_length + 2 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
    buf[1] = ie.param_length;
    memcpy(&buf[2], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZone::Decode(ITS_OCTET* buf, int& len)
{
    if (len != 2 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the TimeZone IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TimeZone::Clone()
{
    BSSAP_TimeZone *ret = new BSSAP_TimeZone();

    *ret = *this;

    return (BSSAP_Element*)ret;
}


/* ----------- 10.5.3.9 TimeZoneTime ---------- */
// Constructor and destructor
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeZoneTime::BSSAP_TimeZoneTime()
    : BSSAP_Element(BSSAP_IEI_TIME_ZONE_TIME)
{
    ie.param_length = sizeof(ITS_OCTET);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TimeZoneTime::~BSSAP_TimeZoneTime()
{
}

//access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneYear(ITS_OCTET tzyear)
{
   ie.param_data.TimeZoneTime.year = tzyear;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneYear()
{
    return (ie.param_data.TimeZoneTime.year);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneMonth(ITS_OCTET tzmonth)
{
   ie.param_data.TimeZoneTime.month = tzmonth;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneMonth()
{
    return (ie.param_data.TimeZoneTime.month);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneDay(ITS_OCTET tzday)
{
   ie.param_data.TimeZoneTime.day = tzday;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneDay()
{
    return (ie.param_data.TimeZoneTime.day);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneHour(ITS_OCTET tzhour)
{
   ie.param_data.TimeZoneTime.hour = tzhour;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneHour()
{
    return (ie.param_data.TimeZoneTime.hour);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneMinute(ITS_OCTET tzminute)
{
   ie.param_data.TimeZoneTime.minute = tzminute;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneMinute()
{
    return (ie.param_data.TimeZoneTime.minute);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneSecond(ITS_OCTET tzsecond)
{
   ie.param_data.TimeZoneTime.second = tzsecond;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneSecond()
{
    return (ie.param_data.TimeZoneTime.second);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::SetTimeZoneZone(ITS_OCTET tzzone)
{
   ie.param_data.TimeZoneTime.zone = tzzone;
    return (ITS_SUCCESS);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_TimeZoneTime::GetTimeZoneZone()
{
    return (ie.param_data.TimeZoneTime.zone);
}
// local encode/decode methods
/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method encodes an information element into an octet
 *      stream.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      buf - the buffer to encode into
 *      len - the length of the encoded octet
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      The len parameter should be an in/out parameter (and eventually
 *      will be).  The caller should set the length to the maximum
 *      size of the buffer *now* to avoid problems in the future.
 *
 *  See Also:
 ************************************************************************/


int
BSSAP_TimeZoneTime::Encode(ITS_OCTET* buf, int& len)
{
    len = 7 * sizeof(ITS_OCTET);

    buf[0] = ie.param_id;
   // buf[0] = ie.param_data;
  //  buf[1] = ie.param_length;
    memcpy(&buf[1], &ie.param_data, len);


     
    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method decodes an octet buffer into this information
 *      element.
 *
 *  Input Parameters:
 *      buf - the buffer to decode
 *      len - the length of the buffer
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If the buffer is successfully decoded, ITS_SUCCESS is returned.
 *      Any other return value indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_TimeZoneTime::Decode(ITS_OCTET* buf, int& len)
{
    if (len != 7 * sizeof(ITS_OCTET))
    {
        return (ITS_ENOMEM);
    }
        memcpy(&ie.param_data, &buf[0],  len);

    return (ITS_SUCCESS);
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method clones the TimeZone IE.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the cloned IE.
 *
 *  Notes:
 *      This method can throw exceptions in low memory conditions.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Element*
BSSAP_TimeZoneTime::Clone()
{
    BSSAP_TimeZoneTime *ret = new BSSAP_TimeZoneTime();

    *ret = *this;

    return (BSSAP_Element*)ret;
}
/////////////////////////////////////////////////////////////////////////
//
// Messages
//
/////////////////////////////////////////////////////////////////////////

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method constructs the BSSAP_Message base class.  The
 *      message type must be given by derived classes.
 *
 *  Input Parameters:
 *      _msgType - the type of the derived class.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Message::BSSAP_Message(ITS_OCTET _msgType)
    : msgType(_msgType), mArgs(NULL), nmArgs(0), oArgs(NULL), noArgs(0),
      mDisc(BSSAP_MD_BSSMAP), dlci(0), l3h(0)
{
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an BSSAP_Message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *      The map of information elements in this message is also
 *      destroyed by this method.
 *
 *  See Also:
 ************************************************************************/
BSSAP_Message::~BSSAP_Message()
{
    BSSAP_ElementMap::iterator i;

    for (i = ies.begin(); i != ies.end(); ++i)
    {
        delete (*i).second;
    }
}


 // access methods
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Message::SetProtDiscr(ITS_OCTET type)
{
    l3h |= type & 0x0f;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Message::GetProtDiscr()
{
    return (l3h & 0x0f);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Message::SetTIVal(ITS_OCTET type)
{
    l3h |= (type & 0x0f) << 4;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_OCTET
BSSAP_Message::GetTIVal()
{
    return ((l3h & 0xf0) >> 4);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Message::SetTIFlag(ITS_BOOLEAN type)
{
    if (type)
    {
        l3h &= ~TI_FLAG_BITS;
        l3h |= TI_FLAG_BITS;
    }
    else
    {
        l3h &= ~TI_FLAG_BITS;
    }
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *        None.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *        None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Message::GetTIFlag()
{
    if (l3h & TI_FLAG_BITS )
    {
        return ITS_TRUE;
    }
    else
    {
        return ITS_FALSE;
    }
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method adds an information element to the map.
 *
 *  Input Parameters:
 *      id - the IEI of the information element.
 *      prm - the IE to add
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
void
BSSAP_Message::AddIE(ITS_OCTET ieID, BSSAP_Element* ie)
{
    std::pair<const ITS_OCTET, BSSAP_Element *> p(ieID, ie->Clone());

    ies.insert(p);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method locates an information element in the map.
 *
 *  Input Parameters:
 *      id - the IEI of the information element.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the information element (if present) or NULL.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
const BSSAP_Element*
BSSAP_Message::FindIE(ITS_OCTET ieID)
{
    BSSAP_ElementMap::iterator f;

    f = ies.find(ieID);
    if (f != ies.end())
    {
        return (*f).second;
    }

    return NULL;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method locates an information element in the map.
 *
 *  Input Parameters:
 *      id - the IEI of the information element.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      A pointer to the information element (if present) or NULL.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
const BSSAP_Element*
BSSAP_Message::FindNextIE(ITS_OCTET ieID, const BSSAP_Element *ie)
{
    BSSAP_ElementMap::iterator f;

    f = ies.find(ieID);

    /* If the IEI is in the map */
    if (f != ies.end())
    {
        /* walk through the sequence of entries that have the same key */
        while (f != ies.end() && (*f).first == ieID)
        {
            if ((*f).second == ie)
            {
                f++;
                break;
            }
            f++;
        }

        if (f != ies.end() && (*f).first == ieID && (*f).second != ie)
        {
            return (*f).second;
        }
    }

    return (NULL);
}


////////////////////////////////////////////////////////////
//          helper function                               //
////////////////////////////////////////////////////////////

static void
EnDecodeRule(ITS_OCTET id, bool isMandatory, bool& needLen)
{
    switch (id)
    {
    case BSSAP_IEI_ASSIGNMENT_REQUIREMENT:
    case BSSAP_IEI_CHANNEL_NEEDED:
    case BSSAP_IEI_CHOSEN_CHANNEL:
    case BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM:
    case BSSAP_IEI_CIPHER_RESPONSE_MODE:
    case BSSAP_IEI_CIRCUIT_IDENTITY_CODE:
    case BSSAP_IEI_CIRCUIT_POOL:  
    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1:
    case BSSAP_IEI_CONFIGURATION_EVOLUTION_IND:
    case BSSAP_IEI_CONNECTION_RELEASE_REQUESTED:
    case BSSAP_IEI_CURRENT_CHANNEL_TYPE_1:
    case BSSAP_IEI_DLCI:
    case BSSAP_IEI_DOWNLINK_DTX_FLAG:
    case BSSAP_IEI_eMLPP_PRIORITY:
    case BSSAP_IEI_EXTENDED_RESOURCE_INDICATOR:
    case BSSAP_IEI_FORWARD_INDICATOR:
    case BSSAP_IEI_INTERFERENCE_BAND_TO_BE_USED:
    case BSSAP_IEI_LSA_ACCESS_CTRL_SUPPR:
    case BSSAP_IEI_NUMBER_OF_MS:
    case BSSAP_IEI_PERIODICITY:
    case BSSAP_IEI_QUEUING_INDICATOR:
    case BSSAP_IEI_RESOURCE_AVAILABLE:
    case BSSAP_IEI_RESOURCE_INDICATION_METHOD:
    case BSSAP_IEI_RESPONSE_REQUEST:
    case BSSAP_IEI_RR_CAUSE:
    case BSSAP_IEI_SPEECH_VERSION:
    case BSSAP_IEI_TALKER_FLAG:
    case BSSAP_IEI_TIME_INDICATION:
    case BSSAP_IEI_TOTAL_RESOURCE_ACCESSIBLE:
    case BSSAP_IEI_TRACE_REFERENCE:
    case BSSAP_IEI_TRACE_TYPE:
    
        needLen = false;
        break;

    case BSSAP_IEI_APDU:
    case BSSAP_IEI_CAUSE:    
    case BSSAP_IEI_CELL_IDENTIFIER:
    case BSSAP_IEI_CELL_IDENTIFIER_LIST:
    case BSSAP_IEI_CHANNEL_TYPE:
    case BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST:
    case BSSAP_IEI_CIRCUIT_POOL_LIST:
    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2:
    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3:
    case BSSAP_IEI_DECIPHERING_KEYS:
    case BSSAP_IEI_DIAGNOSTICS:
    case BSSAP_IEI_ENCRYPTION_INFORMATION:
    case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
    case BSSAP_IEI_GPS_ASSISTANCE_DATA:
    case BSSAP_IEI_GROUP_CALL_REFERENCE:
    case BSSAP_IEI_IMSI:
    case BSSAP_IEI_LAYER3_HEADER_INFORMATION:
    case BSSAP_IEI_LSA_IDENTIFIER:
    case BSSAP_IEI_LSA_IDENTIFIER_LIST:
    case BSSAP_IEI_LSA_INFORMATION:
    case BSSAP_IEI_LAYER3_INFORMATION:
    case BSSAP_IEI_LAYER3_MESSAGE_CONTENT:
    case BSSAP_IEI_LCS_PRIORITY:
    case BSSAP_IEI_LOCATION_TYPE:
    case BSSAP_IEI_LOCATION_ESTIMATE:
    case BSSAP_IEI_POSITIONING_DATA:
    case BSSAP_IEI_LCS_CAUSE:
    case BSSAP_IEI_LCS_CLIENT_TYPE:
    case BSSAP_IEI_LCS_QOS:
    //case BSSAP_IEI_MOBILE_IDENTITY:    
    case BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO:
    case BSSAP_IEI_OMC_ID:
    case BSSAP_IEI_PRIORITY:
    case BSSAP_IEI_RESOURCE_SITUATION:
    case BSSAP_IEI_RETURN_ERROR_REQUEST:
    case BSSAP_IEI_RETURN_ERROR_CAUSE:
    case BSSAP_IEI_SEGMENTATION:
    case BSSAP_IEI_SERVICE_HANDOVER:
    case BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_UMTS:
    case BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_CDMA:
    case BSSAP_IEI_TMSI:
    case BSSAP_IEI_TRANSACTION_ID:
    case BSSAP_IEI_TRIGGER_ID:

        needLen = true;
        break;
    }
}

static void
EnDecodeRuleDTAPCC(ITS_OCTET id, bool isMandatory, bool& needLen, bool &needTag)
{
    needTag = true;
    if ( isMandatory)
    {
        switch (id)
        {
        case BSSAP_IEI_CC_PROGRESS_INDICATOR :
        case BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL :
        case BSSAP_IEI_CC_BEARER_CAPABILITY :
        case BSSAP_IEI_CC_CAUSE :
        case BSSAP_IEI_CC_USER_USER :
        case BSSAP_IEI_CC_CONGESTION_LEVEL_INTERNAL :
        case BSSAP_IEI_CC_NOTIFICATION_INDICATOR_INTERNAL :
        case BSSAP_IEI_CC_CALL_STATE_INTERNAL :
             needTag = false;
        break;
        }
    }

    switch (id)
    {
    case BSSAP_IEI_CC_FACILITY :
    case BSSAP_IEI_CC_PROGRESS_INDICATOR :
    case BSSAP_IEI_CC_USER_USER : 
    case BSSAP_IEI_CC_BEARER_CAPABILITY :
    case BSSAP_IEI_CC_CAUSE :
    case BSSAP_IEI_CC_CAPABILITIES :
    case BSSAP_IEI_CC_CONNECTED_NUMBER :
    case BSSAP_IEI_CC_CONNECTED_SUB_ADDRESS :
    case BSSAP_IEI_CC_CALLING_PARTY_BCD_NUMBER :
    case BSSAP_IEI_CC_CALLING_PARTY_SUB_ADDRESS :
    case BSSAP_IEI_CC_CALLED_PARTY_BCD_NUMBER :
    case BSSAP_IEI_CC_CALLED_PARTY_SUB_ADDRESS :
    case BSSAP_IEI_CC_REDIRECTING_PARTY_BCD_NUMBER :
    case BSSAP_IEI_CC_REDIRECTING_PARTY_SUB_ADDRESS :
    case BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY :
    case BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY :
    case BSSAP_IEI_CC_SS_VERSION_IND :
    case BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL :
    case BSSAP_IEI_CC_SIGNAL :
    case BSSAP_IEI_CC_KEYPAD_FACILITY  :
    case BSSAP_IEI_CC_AUXILLARY_STATES :
    

        needLen = true;
        break;
    default :
        needLen = false;
    break;

    }
}


static void
EnDecodeRuleDTAPMM(ITS_OCTET id, bool isMandatory, bool& needLen,bool &needTag)
{

//needTag = true;
 /* if (! isMandatory)
    {
     switch (id)
    {
    case BSSAP_IEI_MOBILE_IDENTITY :   
   needTag = true;
   }

    }*/             

   if ( isMandatory)
    {   
    switch (id)
    {
    case BSSAP_IEI_LOCATION_AREA_IDENTIFIER : 
    case BSSAP_IEI_IDENTITY_TYPE :
    case BSSAP_IEI_CM_SERVICE_TYPE :
    case BSSAP_IEI_RR_CAUSE :
    case BSSAP_IEI_PARAMETER_RAND :
    case BSSAP_IEI_PARAMETER_SRES :
    case BSSAP_IEI_CYPHERING_KEY_SEQUENCE :
    case BSSAP_IEI_LOCATION_UPDATING_TYPE :
    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2:
    needTag =false;
    break;
    }
    switch (id)
    {
    case BSSAP_IEI_FOLLOW_ON_PROCEED:
    case BSSAP_IEI_CTS_PERMISSION:
    case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
    case BSSAP_IEI_LSA_IDENTIFIER:
    needTag = true;
    break;
    }
}
switch (id)
    {
    case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
    case BSSAP_IEI_LSA_IDENTIFIER:
    case BSSAP_IEI_TIME_ZONE:
    case BSSAP_IEI_TIME_ZONE_TIME:
    needTag = true;
    break;
    }          
switch (id)
    {

    case BSSAP_IEI_MOBILE_IDENTITY :
    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2: 
    case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
    case BSSAP_IEI_LSA_IDENTIFIER:
        needLen = true;
        break;
    default :
        needLen = false;
    break;

    }
}                


//helper: creat proper BSMAP messages
static int
BSMAPMsgRule(ITS_OCTET id, BSSAP_Message*& rmsg)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {
    case BSSAP_MSG_ASSIGN_REQUEST:
        rmsg = new BSSAP_AssignmentRequest();
        break;

    case BSSAP_MSG_ASSIGN_COMPLETE:
        rmsg = new BSSAP_AssignmentComplete();
        break;

    case BSSAP_MSG_ASSIGN_FAILURE:
        rmsg = new BSSAP_AssignmentFailure();
        break;

    case BSSAP_MSG_HANDOVER_REQUEST:
        rmsg = new BSSAP_HandoverRequest();
        break;

    case BSSAP_MSG_HANDOVER_DETECT :
        rmsg = new BSSAP_HandoverDetect();
        break;

    case BSSAP_MSG_HANDOVER_REQUIRED:
        rmsg = new BSSAP_HandoverRequired();
        break;

    case BSSAP_MSG_HANDOVER_REQUEST_ACK:
        rmsg = new BSSAP_HandoverRequestAcknowledge();
        break;

    case BSSAP_MSG_HANDOVER_COMMAND:
        rmsg = new BSSAP_HandoverCommand();
        break;

    case BSSAP_MSG_HANDOVER_COMPLETE:
        rmsg = new BSSAP_HandoverComplete();
        break;

    case BSSAP_MSG_HANDOVER_SUCCEEDED:
        rmsg = new BSSAP_HandoverSucceeded();
        break;

    case BSSAP_MSG_HANDOVER_FAILURE:
        rmsg = new BSSAP_HandoverFailure();
        break;

    case BSSAP_MSG_HANDOVER_PERFORMED:
        rmsg = new BSSAP_HandoverPerformed();
        break;

    case BSSAP_MSG_HANDOVER_CANDIDATE_ENQUIRE:
        rmsg = new BSSAP_HandoverCandidateEnquire();
        break;

    case BSSAP_MSG_HANDOVER_CANDIDATE_RESPONSE:
        rmsg = new BSSAP_HandoverCandidateResponse();
        break;

    case BSSAP_MSG_HANDOVER_REQUIRED_REJECT:
        rmsg = new BSSAP_HandoverRequiredReject();
        break;

    case BSSAP_MSG_CLEAR_COMMAND:
        rmsg = new BSSAP_ClearCommand();
        break;

    case BSSAP_MSG_CLEAR_COMPLETE:
        rmsg = new BSSAP_ClearComplete();
        break;

    case BSSAP_MSG_CLEAR_REQUEST:
        rmsg = new BSSAP_ClearRequest();
        break;

    case BSSAP_MSG_SAPI_N_REJECT:
        rmsg = new BSSAP_SAPInReject();
        break;

    case BSSAP_MSG_CONFUSION:
        rmsg = new BSSAP_Confusion();
        break;

    case BSSAP_MSG_SUSPEND:
        rmsg = new BSSAP_Suspend();
        break;

    case BSSAP_MSG_RESUME:
        rmsg = new BSSAP_Resume();
        break;

    case BSSAP_MSG_CONNECTION_ORIENTED_INFO:
        rmsg = new BSSAP_ConnectionOrientedInformation();
        break;

    case BSSAP_MSG_PERFORM_LOCACTION_REQUEST:
        rmsg = new BSSAP_PerformLocationRequest();
        break;

    case BSSAP_MSG_PERFORM_LOCACTION_RESPONSE:
        rmsg = new BSSAP_PerformLocationResponse();
        break;

    case BSSAP_MSG_LSA_INFORMATION:
        rmsg = new BSSAP_LSAInformation();
        break;

    case BSSAP_MSG_PERFORM_LOCACTION_ABORT:
        rmsg = new BSSAP_PerformLocationAbort();
        break;

    case BSSAP_MSG_COMMON_ID:
        rmsg = new BSSAP_CommonID();
        break;

    case BSSAP_MSG_CONNECTIONLESS_INFORMATION:
        rmsg = new BSSAP_ConnectionlessInformation();
        break;

    case BSSAP_MSG_RESET:
        rmsg = new BSSAP_Reset();
        break;

    case BSSAP_MSG_RESET_ACK:
        rmsg = new BSSAP_ResetAcknowledge();
        break;

    case BSSAP_MSG_OVERLOAD:
        rmsg = new BSSAP_Overload();
        break;

    case BSSAP_MSG_RESET_CIRCUIT:
        rmsg = new BSSAP_ResetCircuit();
        break;

    case BSSAP_MSG_RESET_CIRCUIT_ACK:
        rmsg = new BSSAP_ResetCircuitAcknowledge();
        break;

    case BSSAP_MSG_MSC_INVOKE_TRACE:
        rmsg = new BSSAP_MSCInvokeTrace();
        break;

    case BSSAP_MSG_BSS_INVOKE_TRACE:
        rmsg = new BSSAP_BSSInvokeTrace();
        break;

    case BSSAP_MSG_BLOCK:
        rmsg = new BSSAP_Block();
        break;

    case BSSAP_MSG_BLOCK_ACK:
        rmsg = new BSSAP_BlockAcknowledge();
        break;

    case BSSAP_MSG_UNBLOCK:
        rmsg = new BSSAP_Unblock();
        break;

    case BSSAP_MSG_UNBLOCK_ACK:
        rmsg = new BSSAP_UnblockAcknowledge();
        break;

    case BSSAP_MSG_CKT_GROUP_BLOCK:
        rmsg = new BSSAP_CircuitGroupBlock();
        break;

    case BSSAP_MSG_CKT_GRP_BLK_ACK:
        rmsg = new BSSAP_CircuitGroupBlockAcknowledge();
        break;

    case BSSAP_MSG_CKT_GRP_UNBLOCK:
        rmsg = new BSSAP_CircuitGroupUnblock();
        break;

    case BSSAP_MSG_CKT_GRP_UNBLKING_ACK:
        rmsg = new BSSAP_CircuitGroupUnblockAck();
        break;

    case BSSAP_MSG_UNEQUIPPED_CKT:
        rmsg = new BSSAP_UnequippedCircuit();
        break;

    case BSSAP_MSG_CHANGE_CKT:
        rmsg = new BSSAP_ChangeCircuit();
        break;

    case BSSAP_MSG_CHANGE_CKT_ACK:
        rmsg = new BSSAP_ChangeCircuitAcknowledge();
        break;

    case BSSAP_MSG_RESOURCE_REQUEST:
        rmsg = new BSSAP_ResourceRequest();
        break;

    case BSSAP_MSG_RESOURCE_INDICATION:
        rmsg = new BSSAP_ResourceIndication();
        break;

    case BSSAP_MSG_PAGING:
        rmsg = new BSSAP_Paging();
        break;

    case BSSAP_MSG_CIPHER_MODE_CMD:
        rmsg = new BSSAP_CipherModeCommand();
        break;

    case BSSAP_MSG_CLASSMARK_UPDATE:
        rmsg = new BSSAP_ClassmarkUpdate();
        break;

    case BSSAP_MSG_CIPHER_MODE_COMPLETE:
        rmsg = new BSSAP_CipherModeComplete();
        break;

    case BSSAP_MSG_QUEUING_INDICATION:
        rmsg = new BSSAP_QueueingIndication();
        break;

    case BSSAP_MSG_COMPLETE_LAYER3_INFO:
        rmsg = new BSSAP_CompleteLayer3Information();
        break;

    case BSSAP_MSG_CLASSMARK_REQUEST:
        rmsg = new BSSAP_ClassmarkRequest();
        break;

    case BSSAP_MSG_CIPHER_MODE_REJECT:
        rmsg = new BSSAP_CipherModeReject();
        break;

    case BSSAP_MSG_LOAD_INDICATION:
        rmsg = new BSSAP_LoadIndication();
        break;

    case BSSAP_MSG_VGCS_VBS_SETUP:
        rmsg = new BSSAP_VGCSVBSSetup();
        break;

    case BSSAP_MSG_VGCS_VBS_SETUP_ACK:
        rmsg = new BSSAP_VGCSVBSSetupAck();
        break;

    case BSSAP_MSG_VGCS_VBS_SETUP_REFUSE:
        rmsg = new BSSAP_VGCSVBSSetupRefuse();
        break;

    case BSSAP_MSG_VGCS_VBS_ASSIGNMENT_REQUEST:
        rmsg = new BSSAP_VGCSVBSAssignmentRequest();
        break;

    case BSSAP_MSG_VGCS_VBS_ASSIGNMENT_RESULT:
        rmsg = new BSSAP_VGCSVBSAssignmentResult();
        break;

    case BSSAP_MSG_VGCS_VBS_ASSIGNMENT_FAILURE:
        rmsg = new BSSAP_VGCSVBSAssignmentFailure();
        break;

    case BSSAP_MSG_VGCS_VBS_QUEUING_INDICATION:
        rmsg = new BSSAP_QueueingIndication();
        break;

    case BSSAP_MSG_UPLINK_REQUEST:
        rmsg = new BSSAP_UplinkRequest();
        break;

    case BSSAP_MSG_UPLINK_REQUEST_ACK:
        rmsg = new BSSAP_UplinkRequestAcknowledge();
        break;

    case BSSAP_MSG_UPLINK_REQUEST_CONFIRMATION:
        rmsg = new BSSAP_UplinkRequestConfirmation();
        break;

    case BSSAP_MSG_UPLINK_RELEASE_INDICATION:
        rmsg = new BSSAP_UplinkReleaseIndication();
        break;

    case BSSAP_MSG_UPLINK_REJECT_COMMAND:
        rmsg = new BSSAP_UplinkRejectCommand();
        break;

    case BSSAP_MSG_UPLINK_RELEASE_COMMAND:
        rmsg = new BSSAP_UplinkReleaseCommand();
        break;

    case BSSAP_MSG_UPLINK_SEIZED_COMMAND:
        rmsg = new BSSAP_UplinkSeizedCommand();
        break;

    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}


static int
BSMAPMsgRuleDTAPCC(ITS_OCTET id, BSSAP_Message*& rmsg)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {

    case BSSAP_CC_MSG_ALERTING :
        rmsg = new BSSAP_Alerting();
        break; 

    case BSSAP_CC_MSG_CALL_CONFIRMED :
        rmsg = new BSSAP_CallConfirmed();
        break; 


    case BSSAP_CC_MSG_CALL_PROCEEDING :
        rmsg = new BSSAP_CallProceeding();
        break; 

    case BSSAP_CC_MSG_CONNECT :
        rmsg = new BSSAP_Connect ();
        break; 

    case BSSAP_CC_MSG_CONNECT_ACKNOWLEDGE :
        rmsg = new BSSAP_ConnectAck();
        break; 

    case BSSAP_CC_MSG_EMERGENCY_SETUP :
        rmsg = new BSSAP_EmergencySetup();
        break; 

    case BSSAP_CC_MSG_PROGRESS :
        rmsg = new BSSAP_Progress();
        break; 

    case BSSAP_CC_ESTABLISHMENT :
        rmsg = new BSSAP_CCEstablishment();
        break; 

    case BSSAP_CC_MSG_ESTABLISHMENT_CONFIRMED :
        rmsg = new BSSAP_CCEstablishmentConfirm();
        break; 

    case BSSAP_CC_MSG_SETUP :
        rmsg = new BSSAP_Setup();
        break; 

    case BSSAP_CC_MSG_MODIFY :
        rmsg = new BSSAP_Modify();
        break; 

    case BSSAP_CC_MSG_MODIFY_COMPLETE :
        rmsg = new BSSAP_ModifyComplete();
        break; 

    case BSSAP_CC_MSG_MODIFY_REJECT :
        rmsg = new BSSAP_ModifyReject();
        break; 

    case BSSAP_CC_MSG_USER_INFORMATION :
        rmsg = new BSSAP_UserInformation();
        break; 

    case BSSAP_CC_MSG_HOLD :
        rmsg = new BSSAP_Hold();
        break; 

    case BSSAP_CC_MSG_HOLD_ACKNOWLEDGE :
        rmsg = new BSSAP_HoldAck();
        break; 

    case BSSAP_CC_MSG_HOLD_REJECT :
        rmsg = new BSSAP_HoldReject();
        break; 

    case BSSAP_CC_MSG_RETRIEVE :
        rmsg = new BSSAP_Retrieve();
        break; 

    case BSSAP_CC_MSG_RETRIEVE_ACKNOWLEDGE :
        rmsg = new BSSAP_RetrieveAck();
        break; 

    case BSSAP_CC_MSG_RETRIEVE_REJECT :
        rmsg = new BSSAP_RetrieveReject();
        break; 

    case BSSAP_CC_MSG_DISCONNECT :
        rmsg = new BSSAP_Disconnect();
        break; 

    case BSSAP_CC_MSG_RELEASE :
        rmsg = new BSSAP_Release();
        break; 

    case BSSAP_CC_MSG_RELEASE_COMPLETE :
        rmsg = new BSSAP_ReleaseComplete();
        break; 

    case BSSAP_CC_MSG_CONGESTION_CONTROL :
        rmsg = new BSSAP_CongestionControl();
        break; 

    case BSSAP_CC_MSG_NOTIFY :
        rmsg = new BSSAP_Notify();
        break; 

    case BSSAP_CC_MSG_START_DTMF :
        rmsg = new BSSAP_StartDTMF();
        break; 

    case BSSAP_CC_MSG_START_DTMF_ACK :
        rmsg = new BSSAP_StartDTMFAck();
        break; 

    case BSSAP_CC_MSG_START_DTMF_REJECT :
        rmsg = new BSSAP_StartDTMFReject();
        break; 

    case BSSAP_CC_MSG_STOP_DTMF :
        rmsg = new BSSAP_StopDTMF();
        break; 

    case BSSAP_CC_MSG_STOP_DTMF_ACK :
        rmsg = new BSSAP_StopDTMFAck();
        break; 

    case BSSAP_CC_MSG_STATUS :
        rmsg = new BSSAP_Status();
        break;

    case BSSAP_CC_MSG_STATUS_ENQUIRY :
        rmsg = new BSSAP_StatusEnquiry();
        break; 

    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}


static int
BSMAPMsgRuleDTAPMM(ITS_OCTET id, BSSAP_Message*& rmsg)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {
/***************************************************************** 
**    START OF DTAP SECTION
******************************************************************/

case BSSAP_MSG_IMSI_DETACH_INDICATION:
        rmsg = new BSSAP_IMSIDetachIndication();
        break;
        
case BSSAP_MSG_LOCATION_UPDATING_ACCEPT:
        rmsg = new BSSAP_LocationUpdatingAccept();
        break;

case BSSAP_MSG_LOCATION_UPDATING_REJECT:
        rmsg = new BSSAP_LocationUpdatingReject();
        break;

case BSSAP_MSG_LOCATION_UPDATING_REQUEST:
        rmsg = new BSSAP_LocationUpdatingRequest();
        break;


// Security Messages
case BSSAP_MSG_AUTHENTICATION_REJECT:
        rmsg = new BSSAP_AuthenticationReject();
        break;

case BSSAP_MSG_AUTHENTICATION_REQUEST:
        rmsg = new BSSAP_AuthenticationRequest();
        break;

case BSSAP_MSG_AUTHENTICATION_RESPONSE:
        rmsg = new BSSAP_AuthenticationResponse();
        break;

case BSSAP_MSG_IDENTITY_REQUEST:
        rmsg = new BSSAP_IdentityRequest();
        break;

case BSSAP_MSG_IDENTITY_RESPONSE:
        rmsg = new BSSAP_IdentityResponse();
        break;

case BSSAP_MSG_TMSI_REALLOC_COMMAND:
        rmsg = new BSSAP_TMSIReallocCommand();
        break;

case BSSAP_MSG_TMSI_REALLOC_COMPLETE:
        rmsg = new BSSAP_TMSIReallocComplete();
        break;


// Connection Management Messages
case BSSAP_MSG_CM_SERVICE_ACCEPT:
        rmsg = new BSSAP_CMServiceAccept();
        break;

case BSSAP_MSG_CM_SERVICE_REJECT:
        rmsg = new BSSAP_CMServiceReject();
        break;

case BSSAP_MSG_CM_SERVICE_ABORT:
        rmsg = new BSSAP_CMServiceAbort();
        break;

case BSSAP_MSG_CM_SERVICE_REQUEST:
        rmsg = new BSSAP_CMServiceRequest();
        break;

case BSSAP_MSG_CM_REESTABLISHMENT_REQ:
        rmsg = new BSSAP_CMReestablishmentReq();
        break;

case BSSAP_MSG_ABORT:
        rmsg = new BSSAP_Abort();
        break;


// Miscellaneous Messages
case BSSAP_MSG_MM_INFORMATION:
        rmsg = new BSSAP_MMInformation();
        break;

case BSSAP_MSG_MM_STATUS:
        rmsg = new BSSAP_MMStatus();
        break;

case BSSAP_MSG_MM_NULL:
        rmsg = new BSSAP_MMNull();
        break;
   
    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}


//creat proper BSMAP IEs, compute the length for fixed and unfixed
//size IE(including id & len)
static int
BSMAPIERule(ITS_OCTET id,
            BSSAP_Element*& ie,
            ITS_OCTET knownlen, //varible-size len
            int& len)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {
    case BSSAP_IEI_APDU:
        len = knownlen + 3 * sizeof(ITS_OCTET);
        ie = new BSSAP_Apdu();
        break;

    case BSSAP_IEI_ASSIGNMENT_REQUIREMENT:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_AssignmentRequirement);
        ie = new BSSAP_AssReq();
        break;

    case BSSAP_IEI_CAUSE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Cse();
        break;

    case BSSAP_IEI_CELL_IDENTIFIER:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CellID();
        break;

    case BSSAP_IEI_CELL_IDENTIFIER_LIST:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CellIDList();
        break;

    case BSSAP_IEI_CHANNEL_NEEDED:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ChannelNeeded);
        ie = new BSSAP_ChanNeeded();
        break;

    case BSSAP_IEI_CHANNEL_TYPE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ChanType();
        break;

    case BSSAP_IEI_CHOSEN_CHANNEL:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ChosenChannel);
        ie = new BSSAP_ChsChan();
        break;

    case BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ChosenEncrptAlgorithm);
        ie = new BSSAP_ChsEncAlg();
        break;

    case BSSAP_IEI_CIPHER_RESPONSE_MODE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_CipherResponseMode);
        ie = new BSSAP_CipherRspMode();
        break;

    case BSSAP_IEI_CIRCUIT_IDENTITY_CODE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_CircuitIdentityCode);
        ie = new BSSAP_CktIDCode();
        break;

    case BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CktIDCodeList();
        break;

    case BSSAP_IEI_CIRCUIT_POOL:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_CircuitPool);
        ie = new BSSAP_CktPool();
        break;

    case BSSAP_IEI_CIRCUIT_POOL_LIST:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CktPoolList();
        break;

    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ClassmarkInfoType1);
        ie = new BSSAP_ClassmarkInfo1();
        break;

    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ClassmarkInfo2();
        break;

    case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ClassmarkInfo3();
        break;

    case BSSAP_IEI_CONNECTION_RELEASE_REQUESTED:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_ConRlsReq();
        break;

    case BSSAP_IEI_CONFIGURATION_EVOLUTION_IND:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ConfigEvolutionInd);
        ie = new BSSAP_ConfigEvlInd();
        break;

    case BSSAP_IEI_CURRENT_CHANNEL_TYPE_1:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_CurrentChannelType1);
        ie = new BSSAP_CrtChan();
        break;

    case BSSAP_IEI_DECIPHERING_KEYS:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_DecipherKeys();
        break;

    case BSSAP_IEI_DIAGNOSTICS:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Diagn();
        break;

    case BSSAP_IEI_DLCI:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_DLCI);
        ie = new BSSAP_dlci();
        break;

    case BSSAP_IEI_DOWNLINK_DTX_FLAG:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_DownlinkDTX);
        ie = new BSSAP_DLDTXFlag();
        break;

    case BSSAP_IEI_eMLPP_PRIORITY:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_eMLPP_Priority);
        ie = new BSSAP_eMMLPrio();
        break;

    case BSSAP_IEI_ENCRYPTION_INFORMATION:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_EncryptionInformation();
        break;

    case BSSAP_IEI_EXTENDED_RESOURCE_INDICATOR:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ExtendedResourceIndicator);
        ie = new BSSAP_ExtResInd();
        break;

    case BSSAP_IEI_FORWARD_INDICATOR:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ForwardInd);
        ie = new BSSAP_FwdInd();
        break;

    case BSSAP_IEI_GPS_ASSISTANCE_DATA:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_GPSAssistData();
        break;

    case BSSAP_IEI_GROUP_CALL_REFERENCE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_GrpClRef();
        break;

    case BSSAP_IEI_IMSI:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_IMSI();
        break;

    case BSSAP_IEI_INTERFERENCE_BAND_TO_BE_USED:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_BandToBeUsed);
        ie = new BSSAP_InterBandToBeUsed();
        break;

    case BSSAP_IEI_LAYER3_INFORMATION:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_L3Info();
        break;

    case BSSAP_IEI_LAYER3_HEADER_INFORMATION:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_L3HeaderInfo();
        break;

    case BSSAP_IEI_LAYER3_MESSAGE_CONTENT:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_L3MsgCnt();
        break;   
        
    case BSSAP_IEI_LCS_CAUSE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LCSCse();
        break;

    case BSSAP_IEI_LCS_CLIENT_TYPE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ClientType();
        break;

    case BSSAP_IEI_LCS_PRIORITY:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LCSPrio();
        break;

    case BSSAP_IEI_LCS_QOS:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LcsQoS();
        break;

    case BSSAP_IEI_LOCATION_TYPE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LocType();
        break;

    case BSSAP_IEI_LOCATION_ESTIMATE :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LocEstimate(); 
        break;

    case BSSAP_IEI_LSA_ACCESS_CTRL_SUPPR:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_LSAAccessControlSuppr);
        ie = new BSSAP_LsaAccCtrlSuppr();
        break;

    case BSSAP_IEI_LSA_IDENTIFIER:
         len = knownlen + 2 * sizeof(ITS_OCTET);
         ie = new BSSAP_LsaId();
         break;

    case BSSAP_IEI_LSA_IDENTIFIER_LIST:
         len = knownlen + 2 * sizeof(ITS_OCTET);
         ie = new BSSAP_LsaIdList();
         break;

    case BSSAP_IEI_LSA_INFORMATION:
         len = knownlen + 2 * sizeof(ITS_OCTET);
         ie = new BSSAP_LsaInfo();
         break;

    /*case BSSAP_IEI_MOBILE_IDENTITY:
         len = knownlen + 2 * sizeof(ITS_OCTET);
         ie = new BSSAP_MobileID();
         break;*/

    case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
         len = knownlen + 2 * sizeof(ITS_OCTET);
         ie = new BSSAP_NetElementID();
         break;

    case BSSAP_IEI_NUMBER_OF_MS:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_NumberOfMSs);
         ie = new BSSAP_NumMSs();
         break;

    case BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_OldBSStoNewBSSInfo();
        break;

    case BSSAP_IEI_OMC_ID:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_OMCID();
        break;

    case BSSAP_IEI_PERIODICITY:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_Periodicity);
        ie = new BSSAP_Period();
        break;

    case BSSAP_IEI_POSITIONING_DATA:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_PositionData();
        break;

    case BSSAP_IEI_PRIORITY:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Prio();
        break;

    case BSSAP_IEI_QUEUING_INDICATOR:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_QueuingIndicator);
        ie = new BSSAP_QueuingInd();
        break;

    case BSSAP_IEI_RESOURCE_AVAILABLE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ResourceAvailable);
        ie = new BSSAP_ResAvail();
        break;

    case BSSAP_IEI_RESOURCE_INDICATION_METHOD:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_ResourceIndMethod);;
        ie = new BSSAP_ResIndMethod();
        break;

    case BSSAP_IEI_RESOURCE_SITUATION:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ResSituation();
        break;

    case BSSAP_IEI_RESPONSE_REQUEST:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_RspReq();
        break;

    case BSSAP_IEI_RETURN_ERROR_REQUEST:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ReturnErrReq();
        break;

    case BSSAP_IEI_RETURN_ERROR_CAUSE:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ReturnErrCse();
        break;

    case BSSAP_IEI_RR_CAUSE:
        len = 1*sizeof(ITS_OCTET) + sizeof(BSSAP_RRCause);
        ie = new BSSAP_RRcause();
        break;

    case BSSAP_IEI_SEGMENTATION:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Segment();
        break;

    case BSSAP_IEI_SERVICE_HANDOVER:
        len = 2 * sizeof(ITS_OCTET) + sizeof(BSSAP_ServiceHandover);
        ie = new BSSAP_ServHandover();
        break;

    case BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_UMTS:
        len = 2 * sizeof(ITS_OCTET) + knownlen;
        ie = new BSSAP_SrcRNCtoTgtRNCInfoUMTS();
        break;

    case BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_CDMA:
        len = 2 * sizeof(ITS_OCTET) + knownlen;
        ie = new BSSAP_SrcRNCtoTgtRNCInfoCDMA();
        break;

    case BSSAP_IEI_SPEECH_VERSION:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_SpeechVersion);
        ie = new BSSAP_SpchVer();
        break;

    case BSSAP_IEI_TALKER_FLAG:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_TalkerFlag();
        break;

    case BSSAP_IEI_TIME_INDICATION:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_TimeIndication);
        ie = new BSSAP_TimeInd();
        break;

    case BSSAP_IEI_TMSI:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_TMSI();
        break;

    case BSSAP_IEI_TOTAL_RESOURCE_ACCESSIBLE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_TotalResourceAccessible);
        ie = new BSSAP_TotResAcc();
        break;

    case BSSAP_IEI_TRACE_REFERENCE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_TraceReference);
        ie = new BSSAP_TraceRef();
        break;

    case BSSAP_IEI_TRACE_TYPE:
        len = sizeof(ITS_OCTET) + sizeof(BSSAP_TraceType);
        ie = new BSSAP_TraceTyp();
        break;

    case BSSAP_IEI_TRANSACTION_ID:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_TransactionID();
        break;

    case BSSAP_IEI_TRIGGER_ID:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_TrigID();
        break;

    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}

static int
BSMAPIERuleDTAPCC(ITS_OCTET id,
            BSSAP_Element*& ie,
            ITS_OCTET knownlen, //varible-size len
            int& len)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {

     case BSSAP_IEI_CC_REPEAT_INDICATOR :
        len =  1;
        ie = new BSSAP_RepeatIndicator();
        break;

     case BSSAP_IEI_CC_MORE_DATA :
        len =  1;
        ie = new BSSAP_MoreData();
        break;

     case BSSAP_IEI_PRIORITY_LEVEL :
        len =  1;
        ie = new BSSAP_PriorityLevel();
        break;

     case BSSAP_IEI_CC_CONGESTION_LEVEL_INTERNAL :
        len =  1;
        ie = new BSSAP_CongestionLevel();
        break;

     case BSSAP_IEI_CC_NOTIFICATION_INDICATOR_INTERNAL :
        len =  1;
        ie = new BSSAP_NotificationIndicator();
        break;

     case BSSAP_IEI_CC_FACILITY:
        len =  knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Facility();
        break;

    case BSSAP_IEI_CC_PROGRESS_INDICATOR:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ProgressIndicator();
        break;

    case BSSAP_IEI_CC_USER_USER:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_UserToUser();
        break; 

    case BSSAP_IEI_CC_BEARER_CAPABILITY :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_BearerData();
        break; 

    case BSSAP_IEI_CC_CAUSE :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CCCause();
        break; 

    /*case BSSAP_IEI_CC_CAPABILITIES :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CCCapabilities();
        break; */

    case BSSAP_IEI_CC_SIGNAL :
        len = /*knownlen +*/ 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Signal();
        break; 

    case BSSAP_IEI_CC_CONNECTED_NUMBER :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ConnectedNumber();
        break; 

    case BSSAP_IEI_CC_CONNECTED_SUB_ADDRESS :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ConnectedSubAddress();
        break; 

    case BSSAP_IEI_CC_CALLING_PARTY_BCD_NUMBER :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CallingPartyBCDNumber();
        break; 

    case BSSAP_IEI_CC_CALLING_PARTY_SUB_ADDRESS :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CallingPartySubAddress();
        break; 

    case BSSAP_IEI_CC_CALLED_PARTY_BCD_NUMBER :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CalledPartyBCDNumber();
        break; 

    case BSSAP_IEI_CC_CALLED_PARTY_SUB_ADDRESS :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CalledPartySubAddress();
        break; 

    case BSSAP_IEI_CC_REDIRECTING_PARTY_BCD_NUMBER :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_RedirectingPartyBCDNumber();
        break; 

    case BSSAP_IEI_CC_REDIRECTING_PARTY_SUB_ADDRESS :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_RedirectingPartySubAddress();
        break; 

    case BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_LowLevelCompInfo();
        break; 

    case BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_HighLevelCompInfo();
        break; 

    case BSSAP_IEI_CC_SS_VERSION_IND :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_SSVersion();
        break; 
    case BSSAP_IEI_CC_CAPABILITIES :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_CCCapabilities();
        break;

    case BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_SetupContainer();
        break;

    case BSSAP_IEI_CC_KEYPAD_FACILITY :
        len =  2 * sizeof(ITS_OCTET);
        ie = new BSSAP_KeyPadFacility();
        break;

    case BSSAP_IEI_CC_CALL_STATE_INTERNAL :
        len =  1 * sizeof(ITS_OCTET);
        ie = new BSSAP_CallState();
        break;

    case BSSAP_IEI_CC_AUXILLARY_STATES :
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_AuxState();
        break;

    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}


static int
BSMAPIERuleDTAPMM(ITS_OCTET id,
            BSSAP_Element*& ie,
            ITS_OCTET knownlen, //varible-size len
            int& len)
{
    int ret = ITS_SUCCESS;

    switch (id)
    {


        case BSSAP_IEI_RR_CAUSE:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_RRcause();
        break;   

        case BSSAP_IEI_FOLLOW_ON_PROCEED:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_FollowOnProceed();
        break;

        case BSSAP_IEI_CTS_PERMISSION:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_CTSPermission();
        break;

        case BSSAP_IEI_LOCATION_UPDATING_TYPE:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_LocationUpdatingType();
        break;

        case BSSAP_IEI_CYPHERING_KEY_SEQUENCE:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_CypheringKeySequence();
        break;

        case BSSAP_IEI_LOCATION_AREA_IDENTIFIER:
        len = 5 * sizeof(ITS_OCTET);
        ie = new BSSAP_LocationAreaID();
        break;

        case BSSAP_IEI_PARAMETER_RAND:
        len = 16 * sizeof(ITS_OCTET);
        ie = new BSSAP_ParameterRand();
        break;

        case BSSAP_IEI_PARAMETER_SRES:
        len = 4 * sizeof(ITS_OCTET);
        ie = new BSSAP_ParameterSres();
        break;

        case BSSAP_IEI_IDENTITY_TYPE:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_IdentityType();
        break;
        
        case BSSAP_IEI_CM_SERVICE_TYPE:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_CMServiceType();
        break;
        
        case BSSAP_IEI_TIME_ZONE:
        len = 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_TimeZone();
        break;                        
        

        case BSSAP_IEI_TIME_ZONE_TIME:
        len = 7 * sizeof(ITS_OCTET);
        ie = new BSSAP_TimeZoneTime();
        break;    

        case BSSAP_IEI_MOBILE_IDENTITY:
        len =  knownlen + 2*sizeof(ITS_OCTET);
        ie = new BSSAP_MobileID();
        break;                             
       
        case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1:
        len = sizeof(ITS_OCTET);
        ie = new BSSAP_ClassmarkInfo1();
        break;   

        case BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2:
        len = knownlen +  2*sizeof(ITS_OCTET);
        ie = new BSSAP_ClassmarkInfo2();
        break;

        case BSSAP_IEI_NETWORK_ELEMENT_IDENTITY:
        len = knownlen + 2* sizeof(ITS_OCTET);
        ie = new BSSAP_NetElementID();
        break;        
      
        case BSSAP_IEI_LSA_IDENTIFIER:
        len = knownlen + 2* sizeof(ITS_OCTET);
        ie = new BSSAP_LsaId();
        break;



    /* case BSSAP_IEI_CC_FACILITY:
        len =  knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_Facility();
        break;

    case BSSAP_IEI_CC_PROGRESS_INDICATOR:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_ProgressIndicator();
        break;

    case BSSAP_IEI_CC_USER_USER:
        len = knownlen + 2 * sizeof(ITS_OCTET);
        ie = new BSSAP_UserToUser();
        break;*/ 

    default:
        ret = ITS_EINVALIDARGS;
        break;
    }

    return ret;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method encodes an BSSAP_Message into an SCCP_DATA
 *      structure.
 *
 *  Input Parameters:
 *      msg - a pointer to the message to encode
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      data - a pointer to data to populate with data
 *
 *  Return Value:
 *      If the message is succesfully populated, ITS_SUCCESS is
 *          returned.
 *      Any other return code indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      This method is static.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Message::Encode(ITS_OCTET* data, int& length, BSSAP_Message* msg)
{
    int totlen = BSSAP_MAX_IE_SIZE;
    int curpos = 0;
    int header;
    int i;  //loop counter

    ITS_OCTET cm_id1 = 0x00; // for holding Classmark Infomation Type 1 ID
    ITS_OCTET cm_id2 = 0x00; // for holding Classmark Infomation Type 2 ID

#ifdef ITS_LIC_CAP_BSSAP
    if (!LICENSE_VerifyCapability(ITS_LIC_CAP_BSSAP))
    {
        return (ITS_ENOLICENSE);
    }
#endif

    if (!msg->CheckForMandatoryParams())
    {
        return (ITS_EMISSMAND);
    }

    if ( msg->mDisc == BSSAP_MD_BSSMAP)
    {
        header = 2;   //msg disc + len
        curpos = header + 1;    // + msg type

    //copy the first part of msg before IEs
        data[0] = msg->mDisc;
        data[1] = 0; // length
        data[2] = msg->msgType;
    }
    else
    {
        header = 4;   //msg disc + dlci + len + l3 header ind
        curpos = header + 1;    // + msg type

    //copy the first part of msg before IEs
        data[0] = msg->mDisc;
        data[1] = msg->dlci;
        data[2] = 0; // length
        data[3] = msg->l3h;
        data[4] = msg->msgType;
    }
   

    for (i = 0; i < msg->nmArgs; i++)
    {
        int len = totlen;
        ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
        const BSSAP_Element *ie;
        int dup = 0;

        for (int q = 0; q < i; q++)
        {
            if (msg->mArgs[q] == msg->mArgs[i])
            {
                dup++;
            }
        }

        ie = msg->FindIE(msg->mArgs[i]);
        while (dup-- && ie)
        {
            ie = msg->FindNextIE(msg->mArgs[i], ie);
        }

        if (ie == NULL) // Ensure mandatory IE is set up
        {
            printf(" Encode Failed : Missing mandatory ie %d \n", msg->mArgs[i]);
            return (ITS_EMISSMAND); 
        }

        if ((const_cast<BSSAP_Element *>(ie))->Encode(buf, len) != ITS_SUCCESS)
        {
            return (ITS_EOVERFLOW);
        }

        /* cppcheck fix */
        bool needLen = true, needTag = true;

        if (msg->mDisc == BSSAP_MD_BSSMAP)
        {
            EnDecodeRule(buf[0], true, needLen);

                if (!needTag && (len >= 1))
                {
                    memmove(&buf[0], &buf[1], len -  sizeof(ITS_OCTET));
                    len--;
                }

        }
        else if (msg->mDisc == BSSAP_MD_DTAP)
        {
            if ((msg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
            {
                EnDecodeRuleDTAPCC(buf[0], true, needLen, needTag);

                if (!needTag && (len >= 2))
                {
                    memmove(&buf[0], &buf[1], len - sizeof(ITS_OCTET));
                    len--;
                }

            }
            else if ((msg->l3h & PD_PROT_DISCR_BIT) == 
                                       PD_MOBILITY_MGMT_MSGS_NON_GPRS)
            {
                if ((msg->msgType==BSSAP_MSG_LOCATION_UPDATING_REQUEST) || \
                (msg->msgType==BSSAP_MSG_TMSI_REALLOC_COMMAND) || \
                 (msg->msgType==BSSAP_MSG_IMSI_DETACH_INDICATION) || \
                (msg->msgType==BSSAP_MSG_CM_SERVICE_REQUEST) || \
                  (msg->msgType==BSSAP_MSG_CM_REESTABLISHMENT_REQ) || \
                 (msg->msgType==BSSAP_MSG_IDENTITY_RESPONSE))  
                 {
                      needTag=false;
                  }

                  EnDecodeRuleDTAPMM(buf[0], true, needLen, needTag);
                 
                  if ((msg->msgType==BSSAP_MSG_CM_REESTABLISHMENT_REQ)&& \
                    (buf[0]==BSSAP_IEI_LOCATION_AREA_IDENTIFIER))
                      {
                      needTag=true; 
                      //len++;
                      }   

                 if (!needLen && (len >= 2))
                 {
                     memmove(&buf[1], &buf[2], len - 1 * sizeof(ITS_OCTET));
                     len--;
                     needLen=true;
                 }

                if (!needTag && (len >= 2))
                {
                    memmove(&buf[0], &buf[1], len - sizeof(ITS_OCTET));
                    len--;
                }

            }
        }

        if (!needLen && (len >= 2))
        {
            memmove(&buf[1], &buf[2], len - 2 * sizeof(ITS_OCTET));
            len--;
        }
    

        memcpy(&data[curpos], buf, len);

        curpos += len;
        totlen -= len;
         if (((msg->msgType==BSSAP_MSG_CM_SERVICE_REQUEST)&& \
            (i==1))|| ((msg->msgType==BSSAP_MSG_LOCATION_UPDATING_REQUEST)&& \
            (i==1)))
        {
         curpos-= len;
         totlen += len;
        }
        if (totlen < 0)
        {
            return (ITS_EOVERFLOW);
        }
    }

    for (i = 0; i < msg->noArgs; i++)
    {
        int len = totlen;
        ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
        const BSSAP_Element *ie;
        int dup = 0, q;

        for (q = 0; q < msg->nmArgs; q++)
        {
            if (msg->mArgs[q] == msg->oArgs[i])
            {
                dup++;
            }
        }
        for (q = 0; q < i; q++)
        {
            if (msg->oArgs[q] == msg->oArgs[i])
            {
                dup++;
            }
        }

        ie = msg->FindIE(msg->oArgs[i]);
        while (dup-- && ie)
        {
            ie = msg->FindNextIE(msg->oArgs[i], ie);
        }
    
        
       
        // Classmark Information Type 1 and Classmark Information Type 2 are
        // Mandatory in Handover Request message, but either one is set up,
        // so specially treat them as Optional IEs, but make sure one of them,
        // and only one must be set up
        if (data[2] == BSSAP_MSG_HANDOVER_REQUEST)
        {
            
            ITS_OCTET id;

            if (ie == NULL)
            {
                continue;
            }

            if (ie != NULL)
            {
                id = ie->GetID();
            }

            if (id == BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1)
            {
                cm_id1 = id;
            }
            else if (id == BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2)
            {
                cm_id2 = id;
            }
            // Ensure either one, not both is set up
            if ((cm_id1 > 0) && (cm_id2 > 0))
            {
                return (ITS_EOVERFLOW);
            }
            else if ((cm_id1 <= 0) && (cm_id2 <= 0))
            {
                return (ITS_EOVERFLOW);
            }            
        }
        else
        {
            if (ie == NULL)
            {
                continue;
            }
        }


        if ((const_cast<BSSAP_Element *>(ie))->Encode(buf, len) != ITS_SUCCESS)
        {
            return (ITS_EOVERFLOW);
        }
 

        /* cppcheck fix */
        bool needLen = true, needTag=true;

        if (msg->mDisc == BSSAP_MD_BSSMAP)
        {
            EnDecodeRule(buf[0], false, needLen);
        }
        else if (msg->mDisc == BSSAP_MD_DTAP)
        {
            if ((msg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
            {
                EnDecodeRuleDTAPCC(buf[0], false, needLen, needTag);
            }
            else if ((msg->l3h & PD_PROT_DISCR_BIT) == 
                                           PD_MOBILITY_MGMT_MSGS_NON_GPRS)
            {
                if ((msg->msgType==BSSAP_MSG_LOCATION_UPDATING_REQUEST) || \
                (msg->msgType==BSSAP_MSG_TMSI_REALLOC_COMMAND) || \
                 (msg->msgType==BSSAP_MSG_IMSI_DETACH_INDICATION))
                 {
                      needTag=false;
                  }
                  EnDecodeRuleDTAPMM(buf[0], true, needLen, needTag);


            }
        }

        if (!needLen && (len >= 2))
        {
            memmove(&buf[1], &buf[2], len - 2 * sizeof(ITS_OCTET));
            len--;
        }
        if (msg->msgType==BSSAP_MSG_MM_INFORMATION)
        {
        ITS_OCTET id;
         id = ie->GetID();
        if ((id == BSSAP_IEI_NETWORK_ELEMENT_IDENTITY)&&(i==0))
        buf[0]=0x43;
        if ((id == BSSAP_IEI_NETWORK_ELEMENT_IDENTITY)&&(i==1))
        buf[0]=0x45;
        if (id == BSSAP_IEI_LSA_IDENTIFIER)
        buf[0]=0x48;
        }       
        memcpy(&data[curpos], buf, len);
        
        curpos += len;
        totlen -= len;
        

        if (totlen < 0)
        {
            return (ITS_EOVERFLOW);
        }
    }

    length = curpos;

    // length - msgDisc - lenInd
    if ( msg->mDisc == BSSAP_MD_BSSMAP)
    {
        data[1] = length - 2 * sizeof(ITS_OCTET); 
    }
    else
    {
        data[2] = length - 3 * sizeof(ITS_OCTET); 
    }
    

    return ITS_SUCCESS;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method decodes an SCCP_DATA into an BSSAP_Message
 *      object.
 *
 *  Input Parameters:
 *      data - a pointer to encoded data to decode
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      msg - the address of a pointer to return the created object in
 *
 *  Return Value:
 *      If the message is succesfully populated, ITS_SUCCESS is
 *          returned.
 *      Any other return code indicates an IntelliSS7 processing error.
 *
 *  Notes:
 *      This method functions as a constructor for decoded BSSAP messages.
 *      This method is static.
 *
 *  See Also:
 ************************************************************************/
int
BSSAP_Message::Decode(ITS_OCTET* data, int length, BSSAP_Message **msg)
{

    bool needTag2 = false;
    int totlen = length;
    /* cppcheck fix */
    BSSAP_Message *rmsg = NULL;
    BSSAP_Element *cellID = NULL;
    int typepos;    /* position of msgType in data */
    int msgDiscPos = 0;  /* position of msgDisc in data */

#ifdef ITS_LIC_CAP_BSSAP
    if (!LICENSE_VerifyCapability(ITS_LIC_CAP_BSSAP))
    {
        return (ITS_ENOLICENSE);
    }
#endif


    //create proper BSMAP messages to rmsg
    if (data[0] == BSSAP_MD_BSSMAP)
    {

        typepos = 2 + msgDiscPos;        

        totlen -= 3 * sizeof(ITS_OCTET); //minus header part

        if (BSMAPMsgRule(data[typepos], rmsg) != ITS_SUCCESS)
        {
            return ITS_EBSSAP_UNKNOWN_MSG_TYPE;
        }
    }
    else if (data[0] == BSSAP_MD_DTAP)
    {
        typepos = 4 + msgDiscPos;        

        totlen -= 5 * sizeof(ITS_OCTET); //minus header part
   
        if ((data[3] & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
        {
            if (BSMAPMsgRuleDTAPCC(data[typepos], rmsg) != ITS_SUCCESS)
            {
                return ITS_EBSSAP_UNKNOWN_MSG_TYPE;
            }
        }
        else if ((data[3] & PD_PROT_DISCR_BIT) == 
                                    PD_MOBILITY_MGMT_MSGS_NON_GPRS)
        {
            if (BSMAPMsgRuleDTAPMM(data[typepos], rmsg) != ITS_SUCCESS)
            {
                return ITS_EBSSAP_UNKNOWN_MSG_TYPE;
            }
        }

        rmsg->dlci = data[1];
        rmsg->l3h = data[3];
    }

    if (rmsg == NULL)
    {
        return (ITS_EINVALIDARGS);
    }

    if (rmsg->nmArgs == 0 && rmsg->noArgs == 0)
    {
        ITS_ASSERT(totlen == 0);        

        *msg = rmsg;

        return (ITS_SUCCESS);
    }

    int         iepos = typepos + 1;
    int         i;  //loop counter
    ITS_OCTET   ieID;

    /** The following fixes will change the data passed in.
     *  If the user needs to use the data after decode, he
     *  shall make a copy before passing it in.
     */

    // Clear Command Fix
    if (data[0] == BSSAP_MD_BSSMAP &&
        data[typepos] == BSSAP_MSG_CLEAR_COMMAND &&
        data[iepos] == BSSAP_IEI_LAYER3_HEADER_INFORMATION)
    {
        ITS_OCTET l3buf[BSSAP_MAX_IE_SIZE];
        int l3TagPos = iepos;
        int l3Len = data[iepos + 1] + 2;

        memcpy(l3buf, &data[l3TagPos], l3Len); 
        int csTagPos = l3TagPos + l3Len;
        int csLen = data[csTagPos + 1] + 2; 

        memcpy(&data[l3TagPos], &data[csTagPos], csLen); 
        memcpy(&data[l3TagPos + csLen], l3buf, l3Len);
    }

    // Paging Fix
    if (data[0] == BSSAP_MD_BSSMAP &&
        data[typepos] == BSSAP_MSG_PAGING &&
        data[iepos] == BSSAP_IEI_IMSI &&
        data[iepos + 2 + data[iepos + 1]] == BSSAP_IEI_TMSI)
    {
	int tmsiTagPos = iepos + 2 + data[iepos + 1];
	int tmsiLen = data[tmsiTagPos + 1] + 2;
        
        if (data[tmsiTagPos + tmsiLen]
                            == BSSAP_IEI_CELL_IDENTIFIER_LIST)
        {
            ITS_OCTET tmsibuf[BSSAP_MAX_IE_SIZE];
    
            memcpy(tmsibuf, &data[tmsiTagPos], tmsiLen); 
    
            ITS_OCTET cilbuf[BSSAP_MAX_IE_SIZE];
	    int cilTagPos = tmsiTagPos + tmsiLen;
            int cilLen = data[cilTagPos + 1] + 2;
    
            memcpy(cilbuf, &data[cilTagPos], cilLen); 
    
            memcpy(&data[tmsiTagPos], cilbuf, cilLen); 
            memcpy(&data[tmsiTagPos + cilLen], tmsibuf, tmsiLen);
        }
    }

    // HandoverRequest Fix: Not done.
    if (data[0] == BSSAP_MD_BSSMAP &&
        data[typepos] == BSSAP_MSG_HANDOVER_REQUEST)
    {
	if (data[iepos] == BSSAP_IEI_CHANNEL_TYPE &&
            data[iepos + 2 + data[iepos + 1]]
	        == BSSAP_IEI_ENCRYPTION_INFORMATION)
	{
	    int encIfTagPos = iepos + 2 + data[iepos + 1];
	    int encIfLen = data[encIfTagPos + 1] + 2;
	    if (data[encIfTagPos + encIfLen]
                        == BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1 ||
	        data[encIfTagPos + encIfLen]
		        == BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2)
	    {
		int clmIfTagPos = encIfTagPos + encIfLen ;
		int clmIfLen = data[clmIfTagPos + 1] + 2;
		ITS_OCTET clmIfBuf[BSSAP_MAX_IE_SIZE];
		memcpy(clmIfBuf, &data[clmIfTagPos], clmIfLen);

	        bool exchangeClm_CellId = false;
		int totalCellId_len = 0;
                if (data[clmIfTagPos + clmIfLen]
				== BSSAP_IEI_CELL_IDENTIFIER)
		{
	            exchangeClm_CellId = true;
		    int cellIdTagPos = clmIfTagPos + clmIfLen;
                    totalCellId_len += data[cellIdTagPos + 1] + 2; 

		    int optTagPos = cellIdTagPos + totalCellId_len;
                    ITS_OCTET optBuf[BSSAP_MAX_IE_SIZE];
                    int opt_len = 0;

 		    if (data[optTagPos] == BSSAP_IEI_PRIORITY)
		    {
			opt_len = 3;

			if (data[optTagPos + 3] == BSSAP_IEI_CIRCUIT_IDENTITY_CODE)
                        {// priority + cic
			    opt_len = 6;

			    if (data[optTagPos + 6] == BSSAP_IEI_DOWNLINK_DTX_FLAG)
			    { // priority + cic + downTx
			        opt_len = 8;
			    }
                        }
		        else
			if (data[optTagPos + 3] == BSSAP_IEI_DOWNLINK_DTX_FLAG)
			{ // priority + downTx
			    opt_len = 5;
			}	
	            }  
		    else
		    if (data[optTagPos] == BSSAP_IEI_CIRCUIT_IDENTITY_CODE)
		    {
			opt_len = 3;

			if (data[optTagPos + 3] == BSSAP_IEI_DOWNLINK_DTX_FLAG)
			{ // cic + downTx
			    opt_len = 5;
			}
	            }  
		    else
		    if (data[optTagPos] == BSSAP_IEI_DOWNLINK_DTX_FLAG)
		    {
			opt_len = 2;
	            }  

                    memcpy(optBuf, &data[optTagPos], opt_len); 
                    if (data[optTagPos + opt_len] == BSSAP_IEI_CELL_IDENTIFIER)
		    {
			int trgCellIdTagPos = optTagPos + opt_len;
                        totalCellId_len += data[trgCellIdTagPos + 1] + 2; 

			ITS_OCTET trgCellIdBuf[BSSAP_MAX_IE_SIZE];
			int trgCellId_len = data[trgCellIdTagPos + 1];
			int trgCellIdLen = trgCellId_len + 2;

			memcpy(trgCellIdBuf, &data[trgCellIdTagPos],
					trgCellIdLen);
			if (opt_len > 0)
			{
			    memcpy(&data[optTagPos], trgCellIdBuf,
					    trgCellIdLen);
			    memcpy(&data[optTagPos + trgCellIdLen], optBuf, opt_len);
			}
			// Excahnge cellIds with classmarkType
		        if (exchangeClm_CellId)
			{
			    memcpy(&data[clmIfTagPos],
					&data[cellIdTagPos], totalCellId_len); 
			    memcpy(&data[clmIfTagPos + totalCellId_len],
					clmIfBuf, clmIfLen);
			}
		    }
		}
            }
	}
    }

    // Handover Required Fix
    if (data[0] == BSSAP_MD_BSSMAP &&
        data[typepos] == BSSAP_MSG_HANDOVER_REQUIRED &&
        data[iepos] == BSSAP_IEI_CAUSE &&
        data[iepos + 2 + data[iepos + 1]] == BSSAP_IEI_RESPONSE_REQUEST)
    {
	int rspreqTagPos = iepos + 2 + data[iepos + 1];

        if (data[rspreqTagPos + 1] == BSSAP_IEI_CELL_IDENTIFIER_LIST)
        {
            ITS_OCTET rspreqbuf = BSSAP_IEI_RESPONSE_REQUEST;
    
            ITS_OCTET cilbuf[BSSAP_MAX_IE_SIZE];
    	    int cilTagPos = rspreqTagPos + 1;  
            int cilLen = data[cilTagPos + 1] + 2;
    
            memcpy(cilbuf, &data[cilTagPos], cilLen); 
    
            memcpy(&data[rspreqTagPos], cilbuf, cilLen); 
            data[rspreqTagPos + cilLen] = rspreqbuf;
        }
    }

    // Cipher Mode Command Fix
    if (data[0] == BSSAP_MD_BSSMAP &&
        data[typepos] == BSSAP_MSG_CIPHER_MODE_CMD &&
        data[iepos] == BSSAP_IEI_LAYER3_HEADER_INFORMATION)
    {
        int l3TagPos = iepos;
	int l3Len = data[l3TagPos + 1] + 2;

	if (data[l3TagPos + l3Len] == BSSAP_IEI_ENCRYPTION_INFORMATION)
        {
            ITS_OCTET l3buf[BSSAP_MAX_IE_SIZE];
            memcpy(l3buf, &data[l3TagPos], l3Len); 
    
            ITS_OCTET encbuf[BSSAP_MAX_IE_SIZE];
	    int encTagPos = l3TagPos + l3Len;
            int encLen = data[encTagPos + 1] + 2; 
            memcpy(encbuf, &data[encTagPos], encLen); 
    
            memcpy(&data[l3TagPos], encbuf, encLen);
            memcpy(&data[l3TagPos + encLen], l3buf, l3Len);
        }
    }

    //mandatory IEs
    for (i = 0; i < rmsg->nmArgs; i++)
    {
        /* cppcheck fix */
        int len = 0;
        ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
        BSSAP_Element *ie = NULL;

        ieID = data[iepos];

        if ( rmsg->mDisc == BSSAP_MD_DTAP)
        {
            bool haveLen = true, haveTag = true;
            int paramLen;

            if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
            {
                EnDecodeRuleDTAPCC(rmsg->mArgs[i], true, haveLen, haveTag);
            }
            else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                           PD_MOBILITY_MGMT_MSGS_NON_GPRS)
            {
                  EnDecodeRuleDTAPMM(rmsg->mArgs[i], true, haveLen, haveTag);
                  if ((rmsg->msgType==BSSAP_MSG_CM_REESTABLISHMENT_REQ)&& \
                    (rmsg->mArgs[i]==BSSAP_IEI_LOCATION_AREA_IDENTIFIER))
                      {
                      haveTag=true;
                      }   
                  if ((rmsg->msgType==BSSAP_MSG_IDENTITY_RESPONSE) || \
                      (rmsg->msgType==BSSAP_MSG_CM_SERVICE_REQUEST) || \
                      (rmsg->msgType==BSSAP_MSG_IMSI_DETACH_INDICATION))
                      haveTag=false; 
            }

            if( !haveTag && haveLen)
            {
                ieID = rmsg->mArgs[i];
                paramLen = data[iepos];
                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                    if (BSMAPIERuleDTAPCC(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                              PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    if (BSMAPIERuleDTAPMM(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }

                    if (data[typepos]==BSSAP_MSG_LOCATION_UPDATING_REQUEST) 
                    {
                        len--; 
                    }
                    if (data[typepos]==BSSAP_MSG_TMSI_REALLOC_COMMAND)
                   {
                       len--;
                    }
       
                }

                buf[0] = rmsg->mArgs[i];
                memcpy(&buf[1], &data[iepos], len - 1);

                if (ie->Decode(buf, len) != ITS_SUCCESS)
                {
                   return (ITS_EOVERFLOW);
                }

                int rlen = len - 1;
                iepos += rlen;
                totlen -= rlen;
                 cout <<" \n rlen:"<<rlen<<"\n totlen: "<<totlen<<"\nlen"
                            <<len; 
                if (totlen < 0)
                {   cout <<" \n rlen:"<<rlen<<"\n totlen: "<<totlen<<"\nlen"
                            <<len;
                    return (ITS_EOVERFLOW);
                }

                std::pair<const ITS_OCTET, BSSAP_Element *> p(rmsg->mArgs[i], ie);

                rmsg->ies.insert(p);
                continue;
                
            }
            
            if( haveTag && !haveLen)
            {
                ieID = rmsg->mArgs[i];
                paramLen = data[iepos];

                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                    if (BSMAPIERuleDTAPCC(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                              PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    if (BSMAPIERuleDTAPMM(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }

                buf[0] = rmsg->mArgs[i];
                memcpy(&buf[0], &data[iepos+1], len );

                if (ie->Decode(buf, len) != ITS_SUCCESS)
                {
                   return (ITS_EOVERFLOW);
                }

                int rlen = len+1;
                iepos += rlen;
                totlen -= rlen;

                if (totlen < 0)
                {   cout <<" \n rlen:"<<rlen<<"\n totlen: "<<totlen<<"\nlen"
                            <<len;
                    return (ITS_EOVERFLOW);
                }

                std::pair<const ITS_OCTET, BSSAP_Element *> p(rmsg->mArgs[i], ie);

                rmsg->ies.insert(p);
                continue;
                
            }
            

            
            if( !haveTag && !haveLen)
            {
                ieID = rmsg->mArgs[i];
                paramLen = sizeof(ITS_OCTET);

                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                    if (BSMAPIERuleDTAPCC(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == \
                        PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    if (BSMAPIERuleDTAPMM(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }

                //buf[0] = rmsg->mArgs[i];
                memcpy(&buf[0], &data[iepos], len );
                 if (ieID==BSSAP_IEI_RR_CAUSE) 
                memcpy(&buf[2], &data[iepos], len );

                if (ie->Decode(buf, len) != ITS_SUCCESS)
                {
                    cout <<" \n len: "<<len<<"\n iepos:"<<iepos; 
                   return (ITS_EOVERFLOW);
                }           
                int rlen=0;
                rlen = len ;
               // take care of half octet length IEIs

               if ((ieID!=BSSAP_IEI_LOCATION_UPDATING_TYPE)&& \
                  (ieID!=BSSAP_IEI_CM_SERVICE_TYPE))
                { 
                iepos += rlen;}
                if (ieID!=BSSAP_IEI_CM_SERVICE_TYPE)
                totlen -= rlen;
                
                if (totlen < 0)
                {
                    cout <<" \n rlen:"<<rlen<<"\n totlen: "<<totlen<<"\nlen"<<len<<endl;
                    return (ITS_EOVERFLOW);
                }

                std::pair<const ITS_OCTET, BSSAP_Element *> p(rmsg->mArgs[i], ie
);

                rmsg->ies.insert(p);
                continue;

            }              
        }

        if ( ieID != rmsg->mArgs[i])
        {
            printf("Decode Failure: Missing mandatory ie %d \n",
                   rmsg->mArgs[i]);

            return (ITS_EMISSMAND); 
        }

        // ITS_ASSERT(ieID == rmsg->mArgs[i]);

        if (ieID == BSSAP_IEI_APDU)
        {
            int paramLen;
            paramLen = (((data[iepos+1] & 0xFFU)<<8) | (data[iepos+2] & 0xFFU));

            if (rmsg->mDisc == BSSAP_MD_BSSMAP)
            {
                if (BSMAPIERule(ieID, ie, paramLen, len) != ITS_SUCCESS)
                {
                    return ITS_EBSSAP_UNKNOWN_IE;
                }
            }
            else if (rmsg->mDisc == BSSAP_MD_DTAP)
            {
                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                    if (BSMAPIERuleDTAPCC(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                               PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    if (BSMAPIERuleDTAPMM(ieID, ie, paramLen, len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
            }
        }
        else
        {
            if (rmsg->mDisc == BSSAP_MD_BSSMAP)
            {
                if (BSMAPIERule(ieID, ie, data[iepos + 1], len) != ITS_SUCCESS)
                {
                    return ITS_EBSSAP_UNKNOWN_IE;
                }
            }
            else if (rmsg->mDisc == BSSAP_MD_DTAP)
            {
                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                    if (BSMAPIERuleDTAPCC(ieID, ie, data[iepos + 1], len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                           PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    if (BSMAPIERuleDTAPMM(ieID, ie, data[iepos + 1], len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
            }
        }

        memcpy(buf, &data[iepos], len);

        int rlen = len;

        /* cppcheck fix */
        bool haveLen = true, haveTag = true;

        if (rmsg->mDisc == BSSAP_MD_BSSMAP)
        {
            EnDecodeRule(rmsg->mArgs[i], true, haveLen);
        }
        else if (rmsg->mDisc == BSSAP_MD_DTAP)
        {
            if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
            {
                EnDecodeRuleDTAPCC(rmsg->mArgs[i], true, haveLen, haveTag);
            }
                /*else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                             PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                    BSMAPIERuleDTAPMM(ieID, ie, data[iepos + 1], len);
                }*/
            if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
            {
                EnDecodeRuleDTAPCC(rmsg->mArgs[i], true, haveLen, haveTag);
            }
            else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                             PD_MOBILITY_MGMT_MSGS_NON_GPRS)
            {
                EnDecodeRuleDTAPMM(rmsg->mArgs[i], true, haveLen, haveTag);
            }
        }


        if (!haveLen && (len >= 1))
        {
            memmove(&buf[2], &buf[1], len - 1 * sizeof(ITS_OCTET));
            buf[1] = len - 1 * sizeof(ITS_OCTET);
            len++;
        }

        if (ie->Decode(buf, len) != ITS_SUCCESS)
        {
           return (ITS_EOVERFLOW);
        }

        iepos += rlen;
        totlen -= rlen;

        if (totlen < 0)
        {
            return (ITS_EOVERFLOW);
        }

        std::pair<const ITS_OCTET, BSSAP_Element *> p(rmsg->mArgs[i], ie);

        rmsg->ies.insert(p);
    }

    if (totlen == 0)
    {
        *msg = rmsg;

        return (ITS_SUCCESS);
    }

    //optional IEs (always includes id)
    for (i = 0; i < rmsg->noArgs; i++)
    {  

        if (rmsg->msgType==BSSAP_MSG_MM_INFORMATION)
        {
        if (data[iepos]== 0x43)
        data[iepos]=BSSAP_IEI_NETWORK_ELEMENT_IDENTITY;
        if (data[iepos] ==0x45)
        data[iepos]=BSSAP_IEI_NETWORK_ELEMENT_IDENTITY;
        if (data[iepos] ==0x48)
        data[iepos]=BSSAP_IEI_LSA_IDENTIFIER;
        }     
 
        ieID = data[iepos];
         
        if (rmsg->mDisc == BSSAP_MD_DTAP)
        {
            if ( ieID & BSSAP_IEI_EXT_MASK)
            {
                 ieID = ieID & 0xf0;  /* type 1 IE */
            }
        }

        if (rmsg->oArgs[i] == ieID)
        {
            int len ; //length of IE
            ITS_OCTET buf[BSSAP_MAX_IE_SIZE];
            BSSAP_Element *ie = NULL;

            //create proper IE to ie, compute len

            if (ieID == BSSAP_IEI_APDU)
            {
                int paramLen;
                paramLen = (((data[iepos+1] & 0xFFU)<<8) | (data[iepos+2] & 0xFFU));

               if (rmsg->mDisc == BSSAP_MD_BSSMAP)
               {
                    if (BSMAPIERule(ieID, ie, paramLen, len) != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if (rmsg->mDisc == BSSAP_MD_DTAP)
                {
                    if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                    {
                        if (BSMAPIERuleDTAPCC(ieID, ie, paramLen, len)
                            != ITS_SUCCESS)
                        {
                            return ITS_EBSSAP_UNKNOWN_IE;
                        }
                    }
                    else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                          PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                    {
                        if (BSMAPIERuleDTAPMM(ieID, ie, paramLen, len)
                            != ITS_SUCCESS)
                        {
                            return ITS_EBSSAP_UNKNOWN_IE;
                        }
                    }
                }
            }
            else
            {
               if (rmsg->mDisc == BSSAP_MD_BSSMAP)
               {
                    if (BSMAPIERule(ieID, ie, data[iepos + 1], len)
                        != ITS_SUCCESS)
                    {
                        return ITS_EBSSAP_UNKNOWN_IE;
                    }
                }
                else if (rmsg->mDisc == BSSAP_MD_DTAP)
                {
                    if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                    {
                        if (BSMAPIERuleDTAPCC(ieID, ie, data[iepos + 1], len)
                            != ITS_SUCCESS)
                        {
                            return ITS_EBSSAP_UNKNOWN_IE;
                        }
                    }
                    else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                             PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                    {
                        if (BSMAPIERuleDTAPMM(ieID, ie, data[iepos + 1], len)
                            != ITS_SUCCESS)
                        {
                            return ITS_EBSSAP_UNKNOWN_IE;
                        }
                    }
                }
            }
            memcpy(buf, &data[iepos], len);
            /* cppcheck fix */
            bool haveLen = true, haveTag = true;
            if (rmsg->mDisc == BSSAP_MD_BSSMAP)
            {
                 EnDecodeRule(rmsg->oArgs[i], false, haveLen);
            }
            else if (rmsg->mDisc == BSSAP_MD_DTAP)
            {
                if ((rmsg->l3h & PD_PROT_DISCR_BIT) == PD_CALL_CONTROL_MSGS)
                {
                     EnDecodeRuleDTAPCC(rmsg->oArgs[i], false, haveLen, haveTag);
                }
                else if ((rmsg->l3h & PD_PROT_DISCR_BIT) == 
                                           PD_MOBILITY_MGMT_MSGS_NON_GPRS)
                {
                     EnDecodeRuleDTAPMM(rmsg->oArgs[i], false, haveLen, haveTag);
                if ((ieID != BSSAP_IEI_NETWORK_ELEMENT_IDENTITY)&& \
                    (ieID != BSSAP_IEI_LSA_IDENTIFIER)&& \
                    (ieID != BSSAP_IEI_TIME_ZONE)&& \
                    (ieID != BSSAP_IEI_TIME_ZONE_TIME))    
                len=len+2;
                }
            }

            int rlen = len;

            if (!haveLen & (len >= 2))
            {
                memmove(&buf[2], &buf[1], len - 1 * sizeof(ITS_OCTET));
                buf[1] = len - 1;
                len++;
            }

            if (ie->Decode(buf, len) != ITS_SUCCESS)
            {
                 cout << " IE decode failed \n" << endl;
                 return (ITS_EOVERFLOW);
            }

            iepos += rlen;
            totlen -= rlen;

            if (totlen < 0)
            {
                return (ITS_EOVERFLOW);
            }

            std::pair<const ITS_OCTET, BSSAP_Element *> p(rmsg->oArgs[i],
                                                          ie);

            rmsg->ies.insert(p);
        }

        if (totlen == 0)
        {
            *msg = rmsg;

            return (ITS_SUCCESS);
        }
    }    
    
    return (ITS_SUCCESS);
}


//
// Msg Abstraction
//

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentRequest::BSSAP_AssignmentRequest()
    : BSSAP_Message(BSSAP_MSG_ASSIGN_REQUEST)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CHANNEL_TYPE,
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_LAYER3_HEADER_INFORMATION,
        BSSAP_IEI_PRIORITY,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_DOWNLINK_DTX_FLAG,
        BSSAP_IEI_INTERFERENCE_BAND_TO_BE_USED, // hcho: Added
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2,
        BSSAP_IEI_GROUP_CALL_REFERENCE,
        BSSAP_IEI_TALKER_FLAG,
        BSSAP_IEI_CONFIGURATION_EVOLUTION_IND,
    };

        //BSSAP_IEI_LSA_ACCESS_CTRL_SUPPR, // hcho: removed
        //BSSAP_IEI_SERVICE_HANDOVER // hcho: removed
    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentRequest::~BSSAP_AssignmentRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AssignmentRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentComplete message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentComplete::BSSAP_AssignmentComplete()
    : BSSAP_Message(BSSAP_MSG_ASSIGN_COMPLETE)
{
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_RR_CAUSE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM,
        BSSAP_IEI_CIRCUIT_POOL,
        BSSAP_IEI_SPEECH_VERSION,
        BSSAP_IEI_LSA_IDENTIFIER
    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentComplete message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentComplete::~BSSAP_AssignmentComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AssignmentComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentFailure message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentFailure::BSSAP_AssignmentFailure()
    : BSSAP_Message(BSSAP_MSG_ASSIGN_FAILURE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_RR_CAUSE,
        BSSAP_IEI_CIRCUIT_POOL,
        BSSAP_IEI_CIRCUIT_POOL_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentFailure message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AssignmentFailure::~BSSAP_AssignmentFailure()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AssignmentFailure::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Block message object. The message 
 *      type of the BSSAP_Message base object is set accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Block::BSSAP_Block()
    : BSSAP_Message(BSSAP_MSG_BLOCK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET OArgs[] =
    {
        BSSAP_IEI_CONNECTION_RELEASE_REQUESTED
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Block message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Block::~BSSAP_Block()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Block::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a BlockingAcknowledge message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BlockAcknowledge::BSSAP_BlockAcknowledge()
    : BSSAP_Message(BSSAP_MSG_BLOCK_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a BlockAcknowledge message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BlockAcknowledge::~BSSAP_BlockAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_BlockAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Unblock message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Unblock::BSSAP_Unblock()
    : BSSAP_Message(BSSAP_MSG_UNBLOCK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Unblock message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Unblock::~BSSAP_Unblock()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Unblock::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UnblockAcknowledge message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UnblockAcknowledge::BSSAP_UnblockAcknowledge()
    : BSSAP_Message(BSSAP_MSG_UNBLOCK_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UnblockAcknowledge message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UnblockAcknowledge::~BSSAP_UnblockAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UnblockAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequest::BSSAP_HandoverRequest()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CHANNEL_TYPE,
        BSSAP_IEI_ENCRYPTION_INFORMATION,
        BSSAP_IEI_CELL_IDENTIFIER, // Serving
        BSSAP_IEI_CELL_IDENTIFIER // Target
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1, //Mandatory IEs, but only one of 
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2, //them can be set up, so put here
        BSSAP_IEI_PRIORITY,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_DOWNLINK_DTX_FLAG,
        BSSAP_IEI_INTERFERENCE_BAND_TO_BE_USED,
        BSSAP_IEI_CAUSE,
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3,
        BSSAP_IEI_CURRENT_CHANNEL_TYPE_1,
        BSSAP_IEI_SPEECH_VERSION,
        BSSAP_IEI_GROUP_CALL_REFERENCE,
        BSSAP_IEI_TALKER_FLAG,
        BSSAP_IEI_CONFIGURATION_EVOLUTION_IND,
        BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM,
        BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO,
        BSSAP_IEI_LSA_INFORMATION,
        BSSAP_IEI_LSA_ACCESS_CTRL_SUPPR,
        BSSAP_IEI_SERVICE_HANDOVER,
        BSSAP_IEI_IMSI,
        BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_UMTS,
        BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_CDMA
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequest::~BSSAP_HandoverRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverRequired message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequired::BSSAP_HandoverRequired()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_REQUIRED)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CAUSE,
        BSSAP_IEI_CELL_IDENTIFIER_LIST
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_RESPONSE_REQUEST,
        BSSAP_IEI_CIRCUIT_POOL_LIST,
        BSSAP_IEI_CURRENT_CHANNEL_TYPE_1,
        BSSAP_IEI_SPEECH_VERSION,
        BSSAP_IEI_QUEUING_INDICATOR,
        BSSAP_IEI_OLD_BSS_TO_NEW_BSS_INFO,
        BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_UMTS,
        BSSAP_IEI_SRC_RNC_TO_TGT_RNC_INFO_CDMA
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverRequired message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequired::~BSSAP_HandoverRequired()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverRequired::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverRequestAcknowledge message object.  
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequestAcknowledge::BSSAP_HandoverRequestAcknowledge()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_REQUEST_ACK)
{
    static ITS_OCTET MArgs[] =
    {
        BSSAP_IEI_LAYER3_INFORMATION
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM,
        BSSAP_IEI_CIRCUIT_POOL,
        BSSAP_IEI_SPEECH_VERSION,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_LSA_IDENTIFIER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverRequestAcknowledge message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequestAcknowledge::~BSSAP_HandoverRequestAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverRequestAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCommand::BSSAP_HandoverCommand()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_COMMAND)
{
    static ITS_OCTET MArgs[] =
    {
        BSSAP_IEI_LAYER3_INFORMATION
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CELL_IDENTIFIER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCommand::~BSSAP_HandoverCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverComplete message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverComplete::BSSAP_HandoverComplete()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_COMPLETE)
{
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_RR_CAUSE
    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverComplete message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverComplete::~BSSAP_HandoverComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverSucceeded message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverSucceeded::BSSAP_HandoverSucceeded()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_SUCCEEDED)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverSucceeded message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverSucceeded::~BSSAP_HandoverSucceeded()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverSucceeded::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverCandidateEnquire message object.  
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCandidateEnquire::BSSAP_HandoverCandidateEnquire()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_CANDIDATE_ENQUIRE)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_NUMBER_OF_MS,
        BSSAP_IEI_CELL_IDENTIFIER_LIST,
        BSSAP_IEI_CELL_IDENTIFIER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverCandidateEnquire message object.  
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCandidateEnquire::~BSSAP_HandoverCandidateEnquire()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverCandidateEnquire::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverCandidateResponse message object. 
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCandidateResponse::BSSAP_HandoverCandidateResponse()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_CANDIDATE_RESPONSE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_NUMBER_OF_MS,
        BSSAP_IEI_CELL_IDENTIFIER
    };
    
    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverCandidateResponse message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverCandidateResponse::~BSSAP_HandoverCandidateResponse()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverCandidateResponse::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverFailure message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverFailure::BSSAP_HandoverFailure()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_FAILURE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_RR_CAUSE,
        BSSAP_IEI_CIRCUIT_POOL,
        BSSAP_IEI_CIRCUIT_POOL_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);

}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverFailure message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverFailure::~BSSAP_HandoverFailure()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverFailure::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ResourceRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResourceRequest::BSSAP_ResourceRequest()
    : BSSAP_Message(BSSAP_MSG_RESOURCE_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_PERIODICITY,
        BSSAP_IEI_RESOURCE_INDICATION_METHOD,
        BSSAP_IEI_CELL_IDENTIFIER,
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_EXTENDED_RESOURCE_INDICATOR
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ResourceRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResourceRequest::~BSSAP_ResourceRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ResourceRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ResourceIndication message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResourceIndication::BSSAP_ResourceIndication()
    : BSSAP_Message(BSSAP_MSG_RESOURCE_INDICATION)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_RESOURCE_INDICATION_METHOD,
        BSSAP_IEI_CELL_IDENTIFIER,
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_RESOURCE_AVAILABLE,
        BSSAP_IEI_TOTAL_RESOURCE_ACCESSIBLE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ResourceIndication message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResourceIndication::~BSSAP_ResourceIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ResourceIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Paging message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Paging::BSSAP_Paging()
    : BSSAP_Message(BSSAP_MSG_PAGING)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_IMSI,
        BSSAP_IEI_CELL_IDENTIFIER_LIST
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_TMSI,       
        BSSAP_IEI_CHANNEL_NEEDED,
        BSSAP_IEI_eMLPP_PRIORITY
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Paging message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Paging::~BSSAP_Paging()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Paging::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ClearRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearRequest::BSSAP_ClearRequest()
    : BSSAP_Message(BSSAP_MSG_CLEAR_REQUEST)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
   
    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ClearRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearRequest::~BSSAP_ClearRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClearRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ClearCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearCommand::BSSAP_ClearCommand()
    : BSSAP_Message(BSSAP_MSG_CLEAR_COMMAND)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_LAYER3_HEADER_INFORMATION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ClearCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearCommand::~BSSAP_ClearCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClearCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ClearComplete message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearComplete::BSSAP_ClearComplete()
    : BSSAP_Message(BSSAP_MSG_CLEAR_COMPLETE)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ClearComplete message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClearComplete::~BSSAP_ClearComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClearComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Reset message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Reset::BSSAP_Reset()
    : BSSAP_Message(BSSAP_MSG_RESET)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    
    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Reset message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Reset::~BSSAP_Reset()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Reset::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ResetAcknowledge message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetAcknowledge::BSSAP_ResetAcknowledge()
    : BSSAP_Message(BSSAP_MSG_RESET_ACK)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ResetAcknowledge message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetAcknowledge::~BSSAP_ResetAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ResetAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverPerformed message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverPerformed::BSSAP_HandoverPerformed()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_PERFORMED)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE,
        BSSAP_IEI_CELL_IDENTIFIER
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM,
        BSSAP_IEI_SPEECH_VERSION,
        BSSAP_IEI_LSA_IDENTIFIER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverPerformed message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverPerformed::~BSSAP_HandoverPerformed()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverPerformed::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Overload message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Overload::BSSAP_Overload()
    : BSSAP_Message(BSSAP_MSG_OVERLOAD)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CELL_IDENTIFIER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Overload message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Overload::~BSSAP_Overload()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Overload::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a MSCInvokeTrace message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MSCInvokeTrace::BSSAP_MSCInvokeTrace()
    : BSSAP_Message(BSSAP_MSG_MSC_INVOKE_TRACE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_TRACE_TYPE,
        BSSAP_IEI_TRACE_REFERENCE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_TRIGGER_ID,
        BSSAP_IEI_TRANSACTION_ID,
        BSSAP_IEI_MOBILE_IDENTITY,
        BSSAP_IEI_OMC_ID,
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a MSCInvokeTrace message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MSCInvokeTrace::~BSSAP_MSCInvokeTrace()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MSCInvokeTrace ::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a BSSInvokeTrace message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BSSInvokeTrace::BSSAP_BSSInvokeTrace()
    : BSSAP_Message(BSSAP_MSG_BSS_INVOKE_TRACE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_TRACE_TYPE,
        BSSAP_IEI_TRACE_REFERENCE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_FORWARD_INDICATOR,
        BSSAP_IEI_TRIGGER_ID,
        BSSAP_IEI_TRANSACTION_ID,
        BSSAP_IEI_MOBILE_IDENTITY,
        BSSAP_IEI_OMC_ID
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a BSSInvokeTrace message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_BSSInvokeTrace::~BSSAP_BSSInvokeTrace()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_BSSInvokeTrace::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ClassmarkUpdate message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkUpdate::BSSAP_ClassmarkUpdate()
    : BSSAP_Message(BSSAP_MSG_CLASSMARK_UPDATE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ClassmarkUpdate message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkUpdate::~BSSAP_ClassmarkUpdate()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkUpdate::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CipherModeCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeCommand::BSSAP_CipherModeCommand()
    : BSSAP_Message(BSSAP_MSG_CIPHER_MODE_CMD)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_ENCRYPTION_INFORMATION
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_LAYER3_HEADER_INFORMATION,
        BSSAP_IEI_CIPHER_RESPONSE_MODE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CipherModeCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeCommand::~BSSAP_CipherModeCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CipherModeCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CipherModeComplete message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeComplete::BSSAP_CipherModeComplete()
    : BSSAP_Message(BSSAP_MSG_CIPHER_MODE_COMPLETE)
{
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_LAYER3_MESSAGE_CONTENT,
        BSSAP_IEI_CHOSEN_ENCRYPTION_ALGORITHM
    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CipherModeComplete message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeComplete::~BSSAP_CipherModeComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CipherModeComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CompleteLayer3Information message object.  
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CompleteLayer3Information::BSSAP_CompleteLayer3Information()
    : BSSAP_Message(BSSAP_MSG_COMPLETE_LAYER3_INFO)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_LAYER3_INFORMATION

    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_LSA_IDENTIFIER_LIST,
        BSSAP_IEI_APDU
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CompleteLayer3Information message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CompleteLayer3Information::~BSSAP_CompleteLayer3Information()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CompleteLayer3Information::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a QueueingIndication message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_QueueingIndication::BSSAP_QueueingIndication()
    : BSSAP_Message(BSSAP_MSG_QUEUING_INDICATION)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a QueueingIndication message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_QueueingIndication::~BSSAP_QueueingIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_QueueingIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a SAPInREJECT message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SAPInReject::BSSAP_SAPInReject()
    : BSSAP_Message(BSSAP_MSG_SAPI_N_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_DLCI,
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a SAPInREJECT message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_SAPInReject::~BSSAP_SAPInReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_SAPInReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverRequiredReject message object. The
 *      message type of the BSSAP_Message base object is set accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequiredReject::BSSAP_HandoverRequiredReject()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_REQUIRED_REJECT)
{
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverRequiredReject message object. All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverRequiredReject::~BSSAP_HandoverRequiredReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverRequiredReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ResetCircuit message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetCircuit::BSSAP_ResetCircuit()
    : BSSAP_Message(BSSAP_MSG_RESET_CIRCUIT)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ResetCircuit message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetCircuit::~BSSAP_ResetCircuit()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ResetCircuit::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ResetCircuitAcknowledge message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetCircuitAcknowledge::BSSAP_ResetCircuitAcknowledge()
    : BSSAP_Message(BSSAP_MSG_RESET_CIRCUIT_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ResetCircuitAcknowledge message object. All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ResetCircuitAcknowledge::~BSSAP_ResetCircuitAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ResetCircuitAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a HandoverDetect message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverDetect::BSSAP_HandoverDetect()
    : BSSAP_Message(BSSAP_MSG_HANDOVER_DETECT)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a HandoverDetect message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HandoverDetect::~BSSAP_HandoverDetect()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HandoverDetect::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CircuitGroupBlock message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupBlock::BSSAP_CircuitGroupBlock()
    : BSSAP_Message(BSSAP_MSG_CKT_GROUP_BLOCK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CircuitGroupBlock message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupBlock::~BSSAP_CircuitGroupBlock()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CircuitGroupBlock::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CircuitGroupBlockingAcknowledge message 
 *      object.  The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupBlockAcknowledge::BSSAP_CircuitGroupBlockAcknowledge()
    : BSSAP_Message(BSSAP_MSG_CKT_GRP_BLK_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CircuitGroupBlockingAcknowledge message 
 *      object.  All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupBlockAcknowledge::~BSSAP_CircuitGroupBlockAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CircuitGroupBlockAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CircuitGroupBlock message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupUnblock::BSSAP_CircuitGroupUnblock()
    : BSSAP_Message(BSSAP_MSG_CKT_GRP_UNBLOCK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CircuitGroupUnblock message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupUnblock::~BSSAP_CircuitGroupUnblock()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CircuitGroupUnblock::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CircuitGroupUnblockingAcknowledge message 
 *      object.  The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupUnblockAck::BSSAP_CircuitGroupUnblockAck()
    : BSSAP_Message(BSSAP_MSG_CKT_GRP_UNBLKING_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CircuitGroupUnblockingAcknowledge message 
 *      object.  All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CircuitGroupUnblockAck::~BSSAP_CircuitGroupUnblockAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CircuitGroupUnblockAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Confusion message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Confusion::BSSAP_Confusion()
    : BSSAP_Message(BSSAP_MSG_CONFUSION)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE,
        BSSAP_IEI_DIAGNOSTICS
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Confusion message object. All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Confusion::~BSSAP_Confusion()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Confusion::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ClassmarkRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkRequest::BSSAP_ClassmarkRequest()
    : BSSAP_Message(BSSAP_MSG_CLASSMARK_REQUEST)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ClassmarkRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ClassmarkRequest::~BSSAP_ClassmarkRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ClassmarkRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UnequippedCircuit message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UnequippedCircuit::BSSAP_UnequippedCircuit()
    : BSSAP_Message(BSSAP_MSG_UNEQUIPPED_CKT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UnequippedCircuit message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UnequippedCircuit::~BSSAP_UnequippedCircuit()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UnequippedCircuit::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CipherModeReject message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeReject::BSSAP_CipherModeReject()
    : BSSAP_Message(BSSAP_MSG_CIPHER_MODE_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CipherModeReject message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CipherModeReject::~BSSAP_CipherModeReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CipherModeReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a LoadIndication message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LoadIndication::BSSAP_LoadIndication()
    : BSSAP_Message(BSSAP_MSG_LOAD_INDICATION)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_TIME_INDICATION,
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_CELL_IDENTIFIER_LIST
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_RESOURCE_SITUATION,
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a LoadIndication message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LoadIndication::~BSSAP_LoadIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LoadIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSSetup message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetup::BSSAP_VGCSVBSSetup()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_SETUP)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_GROUP_CALL_REFERENCE
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_PRIORITY
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSSetup message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetup::~BSSAP_VGCSVBSSetup()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSSetup::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSSetupAck message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetupAck::BSSAP_VGCSVBSSetupAck()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_SETUP_ACK)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSSetupAck message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetupAck::~BSSAP_VGCSVBSSetupAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSSetupAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSSetupRefuse message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetupRefuse::BSSAP_VGCSVBSSetupRefuse()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_SETUP_REFUSE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSSetupRefuse message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSSetupRefuse::~BSSAP_VGCSVBSSetupRefuse()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSSetupRefuse::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSAssignmentRequest message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentRequest::BSSAP_VGCSVBSAssignmentRequest()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_ASSIGNMENT_REQUEST)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CHANNEL_TYPE,
        BSSAP_IEI_ASSIGNMENT_REQUIREMENT,
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_GROUP_CALL_REFERENCE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_PRIORITY,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_DOWNLINK_DTX_FLAG,
        BSSAP_IEI_ENCRYPTION_INFORMATION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSAssignmentRequest message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentRequest::~BSSAP_VGCSVBSAssignmentRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSAssignmentRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSAssignmentResult message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentResult::BSSAP_VGCSVBSAssignmentResult()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_ASSIGNMENT_RESULT)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CHANNEL_TYPE,
        BSSAP_IEI_CELL_IDENTIFIER
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
        BSSAP_IEI_CIRCUIT_POOL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSAssignmentResult message object.
 (      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentResult::~BSSAP_VGCSVBSAssignmentResult()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSAssignmentResult::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 *************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSAssignmentFailure message object. 
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentFailure::BSSAP_VGCSVBSAssignmentFailure()
    : BSSAP_Message(BSSAP_MSG_VGCS_VBS_ASSIGNMENT_FAILURE)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CIRCUIT_POOL,
        BSSAP_IEI_CIRCUIT_POOL_LIST
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSAssignmentFailure message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSAssignmentFailure::~BSSAP_VGCSVBSAssignmentFailure()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSAssignmentFailure::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a VGCS/VBSQueuingIndication message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSQueuingIndication::BSSAP_VGCSVBSQueuingIndication()
    : BSSAP_Message(BSSAP_MSG_QUEUING_INDICATION)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a VGCS/VBSQueuingIndication message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_VGCSVBSQueuingIndication::~BSSAP_VGCSVBSQueuingIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_VGCSVBSQueuingIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkRequest message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequest::BSSAP_UplinkRequest()
    : BSSAP_Message(BSSAP_MSG_UPLINK_REQUEST)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkRequest message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequest::~BSSAP_UplinkRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkRequestAcknowledge message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequestAcknowledge::BSSAP_UplinkRequestAcknowledge()
    : BSSAP_Message(BSSAP_MSG_UPLINK_REQUEST_ACK)
{
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkRequestAcknowledge message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequestAcknowledge::~BSSAP_UplinkRequestAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkRequestAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkRequestConfirmation message object.
 *      The message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequestConfirmation::BSSAP_UplinkRequestConfirmation()
    : BSSAP_Message(BSSAP_MSG_UPLINK_REQUEST_CONFIRMATION)
{
    static ITS_OCTET MArgs[] =
    {
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_LAYER3_INFORMATION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkRequestConfirmation message object.
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRequestConfirmation::~BSSAP_UplinkRequestConfirmation()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkRequestConfirmation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkReleaseIndication message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkReleaseIndication::BSSAP_UplinkReleaseIndication()
    : BSSAP_Message(BSSAP_MSG_UPLINK_RELEASE_INDICATION)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 *************************************************************************
 *  Purpose:
 *      This method destroys a UplinkReleaseIndication message object. All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkReleaseIndication::~BSSAP_UplinkReleaseIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkReleaseIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkRejectCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRejectCommand::BSSAP_UplinkRejectCommand()
    : BSSAP_Message(BSSAP_MSG_UPLINK_REJECT_COMMAND)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkRejectCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkRejectCommand::~BSSAP_UplinkRejectCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkRejectCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkReleaseCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkReleaseCommand::BSSAP_UplinkReleaseCommand()
    : BSSAP_Message(BSSAP_MSG_UPLINK_RELEASE_COMMAND)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkReleaseCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkReleaseCommand::~BSSAP_UplinkReleaseCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkReleaseCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a UplinkSeizedCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkSeizedCommand::BSSAP_UplinkSeizedCommand()
    : BSSAP_Message(BSSAP_MSG_UPLINK_SEIZED_COMMAND)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a UplinkSeizedCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UplinkSeizedCommand::~BSSAP_UplinkSeizedCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UplinkSeizedCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Suspend message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Suspend::BSSAP_Suspend()
    : BSSAP_Message(BSSAP_MSG_SUSPEND)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_DLCI
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Suspend message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Suspend::~BSSAP_Suspend()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Suspend::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Resume message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Resume::BSSAP_Resume()
    : BSSAP_Message(BSSAP_MSG_RESUME)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_DLCI
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Resume message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Resume::~BSSAP_Resume()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Resume::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ChangeCircuit message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChangeCircuit::BSSAP_ChangeCircuit()
    : BSSAP_Message(BSSAP_MSG_CHANGE_CKT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CAUSE,
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ChangeCircuit message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChangeCircuit::~BSSAP_ChangeCircuit()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ChangeCircuit::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ChangeCircuitAcknowledge message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChangeCircuitAcknowledge::BSSAP_ChangeCircuitAcknowledge()
    : BSSAP_Message(BSSAP_MSG_CHANGE_CKT_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CIRCUIT_IDENTITY_CODE,
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ChangeCircuitAcknowledge message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ChangeCircuitAcknowledge::~BSSAP_ChangeCircuitAcknowledge()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ChangeCircuitAcknowledge::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}



/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CommonID message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CommonID::BSSAP_CommonID()
    : BSSAP_Message(BSSAP_MSG_COMMON_ID)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_IMSI
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CommonID message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CommonID::~BSSAP_CommonID()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CommonID::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a LSA Information message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LSAInformation::BSSAP_LSAInformation()
    : BSSAP_Message(BSSAP_MSG_LSA_INFORMATION)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_LSA_INFORMATION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a LSAInformation message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LSAInformation::~BSSAP_LSAInformation()
{
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ConnectionOrientedInformation message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectionOrientedInformation::BSSAP_ConnectionOrientedInformation()
    : BSSAP_Message(BSSAP_MSG_CONNECTION_ORIENTED_INFO)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_APDU
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_SEGMENTATION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ConnectionOrientedInformation message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectionOrientedInformation::~BSSAP_ConnectionOrientedInformation()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ConnectionOrientedInformation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LSAInformation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a PerformLocationRequest message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationRequest::BSSAP_PerformLocationRequest()
    : BSSAP_Message(BSSAP_MSG_PERFORM_LOCACTION_REQUEST)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_LOCATION_TYPE
    };
    static ITS_OCTET  OArgs[] =
    {
        //the first seven are temp put here, they are conditional IEs
        BSSAP_IEI_CELL_IDENTIFIER,
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE3,
        BSSAP_IEI_LCS_CLIENT_TYPE,
        BSSAP_IEI_CHOSEN_CHANNEL,
        BSSAP_IEI_LCS_QOS,
        BSSAP_IEI_GPS_ASSISTANCE_DATA,
        BSSAP_IEI_APDU,
        BSSAP_IEI_LCS_PRIORITY

    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a PerformLocationRequest message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationRequest::~BSSAP_PerformLocationRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_PerformLocationRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a PerformLocationResponse message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationResponse::BSSAP_PerformLocationResponse()
    : BSSAP_Message(BSSAP_MSG_PERFORM_LOCACTION_RESPONSE)
{
    static ITS_OCTET  OArgs[] =
    {
        // the first three are conditional IEs, temp put here
        BSSAP_IEI_LOCATION_ESTIMATE,
        BSSAP_IEI_DECIPHERING_KEYS,
        BSSAP_IEI_LCS_CAUSE,
        BSSAP_IEI_POSITIONING_DATA
    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a PerformLocationResponse message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationResponse::~BSSAP_PerformLocationResponse()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_PerformLocationResponse::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Perform Location Abort message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationAbort::BSSAP_PerformLocationAbort()
    : BSSAP_Message(BSSAP_MSG_PERFORM_LOCACTION_ABORT)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_LCS_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a PerformLocationAbort message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_PerformLocationAbort::~BSSAP_PerformLocationAbort()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_PerformLocationAbort::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a ConnectionOrientedInformation message object. The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectionlessInformation::BSSAP_ConnectionlessInformation()
    : BSSAP_Message(BSSAP_MSG_CONNECTIONLESS_INFORMATION)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_NETWORK_ELEMENT_IDENTITY,
        BSSAP_IEI_NETWORK_ELEMENT_IDENTITY,
        BSSAP_IEI_APDU
    };
    static ITS_OCTET  OArgs[] =
    {
        BSSAP_IEI_SEGMENTATION,
        BSSAP_IEI_RETURN_ERROR_REQUEST,
        BSSAP_IEI_RETURN_ERROR_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a ConnectionlessInformation message object. 
 *      All information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectionlessInformation::~BSSAP_ConnectionlessInformation()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ConnectionlessInformation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Alerting::BSSAP_Alerting()
    : BSSAP_Message(BSSAP_CC_MSG_ALERTING)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_FACILITY,
        BSSAP_IEI_CC_PROGRESS_INDICATOR,
        BSSAP_IEI_CC_USER_USER,
        BSSAP_IEI_CC_SS_VERSION_IND
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Alerting::~BSSAP_Alerting()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Alerting::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallConfirmed::BSSAP_CallConfirmed()
    : BSSAP_Message(BSSAP_CC_MSG_CALL_CONFIRMED)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_REPEAT_INDICATOR,
        BSSAP_IEI_CC_BEARER_CAPABILITY,
        BSSAP_IEI_CC_CAUSE,
        BSSAP_IEI_CC_CAPABILITIES
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallConfirmed::~BSSAP_CallConfirmed()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CallConfirmed::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallProceeding::BSSAP_CallProceeding()
    : BSSAP_Message(BSSAP_CC_MSG_CALL_PROCEEDING)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_REPEAT_INDICATOR,
        BSSAP_IEI_CC_BEARER_CAPABILITY,
        BSSAP_IEI_CC_FACILITY,
        BSSAP_IEI_CC_PROGRESS_INDICATOR,
        BSSAP_IEI_PRIORITY_LEVEL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CallProceeding::~BSSAP_CallProceeding()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CallProceeding::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Connect::BSSAP_Connect()
    : BSSAP_Message(BSSAP_CC_MSG_CONNECT)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_FACILITY,
        BSSAP_IEI_CC_PROGRESS_INDICATOR,
        BSSAP_IEI_CC_CONNECTED_NUMBER,
        BSSAP_IEI_CC_CONNECTED_SUB_ADDRESS,
        BSSAP_IEI_CC_USER_USER,
        BSSAP_IEI_CC_SS_VERSION_IND
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Connect::~BSSAP_Connect()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Connect::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectAck::BSSAP_ConnectAck()
    : BSSAP_Message(BSSAP_CC_MSG_CONNECT_ACKNOWLEDGE)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ConnectAck::~BSSAP_ConnectAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ConnectAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_EmergencySetup::BSSAP_EmergencySetup()
    : BSSAP_Message(BSSAP_CC_MSG_EMERGENCY_SETUP)
{
    static ITS_OCTET  MArgs[] =
    {
        NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_BEARER_CAPABILITY
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_EmergencySetup::~BSSAP_EmergencySetup()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_EmergencySetup::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Progress::BSSAP_Progress()
    : BSSAP_Message(BSSAP_CC_MSG_PROGRESS)
{
    static ITS_OCTET  MArgs[] =
    {
        BSSAP_IEI_CC_PROGRESS_INDICATOR
    };

    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_CC_USER_USER
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Progress::~BSSAP_Progress()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Progress::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCEstablishment::BSSAP_CCEstablishment()
    : BSSAP_Message(BSSAP_CC_ESTABLISHMENT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_SETUP_CONTAINER_INTERNAL
    };

    static ITS_OCTET    OArgs[] =
    {
        NULL
    };

    mArgs = MArgs;
    nmArgs = 1;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCEstablishment::~BSSAP_CCEstablishment()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CCEstablishment::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCEstablishmentConfirm::BSSAP_CCEstablishmentConfirm()
    : BSSAP_Message(BSSAP_CC_MSG_ESTABLISHMENT_CONFIRMED)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_BEARER_CAPABILITY
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_REPEAT_INDICATOR,
      BSSAP_IEI_CC_BEARER_CAPABILITY,
      BSSAP_IEI_CC_CAUSE 
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CCEstablishmentConfirm::~BSSAP_CCEstablishmentConfirm()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CCEstablishmentConfirm::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Setup::BSSAP_Setup()
    : BSSAP_Message(BSSAP_CC_MSG_SETUP)
{
    static ITS_OCTET  MArgs[] =
    {
		NULL
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_REPEAT_INDICATOR,
      BSSAP_IEI_CC_BEARER_CAPABILITY,
      BSSAP_IEI_CC_BEARER_CAPABILITY,
      BSSAP_IEI_CC_FACILITY,
      BSSAP_IEI_CC_PROGRESS_INDICATOR,
      BSSAP_IEI_CC_SIGNAL,
      BSSAP_IEI_CC_CALLING_PARTY_BCD_NUMBER,
      BSSAP_IEI_CC_CALLING_PARTY_SUB_ADDRESS,
      BSSAP_IEI_CC_CALLED_PARTY_BCD_NUMBER,
      BSSAP_IEI_CC_CALLED_PARTY_SUB_ADDRESS,
      BSSAP_IEI_CC_REDIRECTING_PARTY_SUB_ADDRESS,
      BSSAP_IEI_CC_REDIRECTING_PARTY_BCD_NUMBER,
      BSSAP_IEI_CC_REDIRECTING_PARTY_SUB_ADDRESS,
      BSSAP_IEI_CC_REPEAT_INDICATOR,
      BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_REPEAT_INDICATOR,
      BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_USER_USER,
      BSSAP_IEI_PRIORITY_LEVEL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Setup::~BSSAP_Setup()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Setup::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Modify::BSSAP_Modify()
    : BSSAP_Message(BSSAP_CC_MSG_MODIFY)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_BEARER_CAPABILITY
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_REVERSE_CALL_SETUP_DIRECTION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Modify::~BSSAP_Modify()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Modify::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ModifyComplete::BSSAP_ModifyComplete()
    : BSSAP_Message(BSSAP_CC_MSG_MODIFY_COMPLETE)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_BEARER_CAPABILITY
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_REVERSE_CALL_SETUP_DIRECTION
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ModifyComplete::~BSSAP_ModifyComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ModifyComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ModifyReject::BSSAP_ModifyReject()
    : BSSAP_Message(BSSAP_CC_MSG_MODIFY_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_BEARER_CAPABILITY,
      BSSAP_IEI_CC_CAUSE
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_LOW_LAYER_COMPATIBILITY,
      BSSAP_IEI_CC_HIGH_LAYER_COMPATIBILITY
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ModifyReject::~BSSAP_ModifyReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ModifyReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UserInformation::BSSAP_UserInformation()
    : BSSAP_Message(BSSAP_CC_MSG_USER_INFORMATION)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_USER_USER
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_MORE_DATA
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_UserInformation::~BSSAP_UserInformation()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_UserInformation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Hold::BSSAP_Hold()
    : BSSAP_Message(BSSAP_CC_MSG_HOLD)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Hold::~BSSAP_Hold()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Hold::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HoldAck::BSSAP_HoldAck()
    : BSSAP_Message(BSSAP_CC_MSG_HOLD_ACKNOWLEDGE)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
        NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HoldAck::~BSSAP_HoldAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HoldAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HoldReject::BSSAP_HoldReject()
    : BSSAP_Message(BSSAP_CC_MSG_HOLD_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CAUSE
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_HoldReject::~BSSAP_HoldReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_HoldReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Retrieve::BSSAP_Retrieve()
    : BSSAP_Message(BSSAP_CC_MSG_RETRIEVE)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Retrieve::~BSSAP_Retrieve()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Retrieve::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RetrieveAck::BSSAP_RetrieveAck()
    : BSSAP_Message(BSSAP_CC_MSG_RETRIEVE_ACKNOWLEDGE)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RetrieveAck::~BSSAP_RetrieveAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_RetrieveAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RetrieveReject::BSSAP_RetrieveReject()
    : BSSAP_Message(BSSAP_CC_MSG_RETRIEVE_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CAUSE
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_RetrieveReject::~BSSAP_RetrieveReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_RetrieveReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Disconnect::BSSAP_Disconnect()
    : BSSAP_Message(BSSAP_CC_MSG_DISCONNECT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CAUSE
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_FACILITY,
      BSSAP_IEI_CC_PROGRESS_INDICATOR,
      BSSAP_IEI_CC_USER_USER,
      BSSAP_IEI_CC_SS_VERSION_IND
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Disconnect::~BSSAP_Disconnect()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Disconnect::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Release::BSSAP_Release()
    : BSSAP_Message(BSSAP_CC_MSG_RELEASE)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_CAUSE,
      BSSAP_IEI_CC_FACILITY,
      BSSAP_IEI_CC_USER_USER,
      BSSAP_IEI_CC_SS_VERSION_IND
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Release::~BSSAP_Release()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Release::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReleaseComplete::BSSAP_ReleaseComplete()
    : BSSAP_Message(BSSAP_CC_MSG_RELEASE_COMPLETE)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_CAUSE,
      BSSAP_IEI_CC_FACILITY,
      BSSAP_IEI_CC_USER_USER,
      BSSAP_IEI_CC_SS_VERSION_IND
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_ReleaseComplete::~BSSAP_ReleaseComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_ReleaseComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CongestionControl::BSSAP_CongestionControl()
    : BSSAP_Message(BSSAP_CC_MSG_CONGESTION_CONTROL)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CONGESTION_LEVEL_INTERNAL
    };

    static ITS_OCTET    OArgs[] =
    {
      BSSAP_IEI_CC_CAUSE
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CongestionControl::~BSSAP_CongestionControl()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CongestionControl::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Notify::BSSAP_Notify()
    : BSSAP_Message(BSSAP_CC_MSG_NOTIFY)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_NOTIFICATION_INDICATOR_INTERNAL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Notify::~BSSAP_Notify()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Notify::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMF::BSSAP_StartDTMF()
    : BSSAP_Message(BSSAP_CC_MSG_START_DTMF)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_KEYPAD_FACILITY
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMF::~BSSAP_StartDTMF()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StartDTMF::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMFAck::BSSAP_StartDTMFAck()
    : BSSAP_Message(BSSAP_CC_MSG_START_DTMF_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_KEYPAD_FACILITY
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMFAck::~BSSAP_StartDTMFAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StartDTMFAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMFReject::BSSAP_StartDTMFReject()
    : BSSAP_Message(BSSAP_CC_MSG_START_DTMF_REJECT)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CAUSE
    };

    static ITS_OCTET    OArgs[] =
    {
      NULL
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StartDTMFReject::~BSSAP_StartDTMFReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StartDTMFReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StopDTMF::BSSAP_StopDTMF()
    : BSSAP_Message(BSSAP_CC_MSG_STOP_DTMF)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StopDTMF::~BSSAP_StopDTMF()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StopDTMF::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StopDTMFAck::BSSAP_StopDTMFAck()
    : BSSAP_Message(BSSAP_CC_MSG_STOP_DTMF_ACK)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StopDTMFAck::~BSSAP_StopDTMFAck()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StopDTMFAck::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Status::BSSAP_Status()
    : BSSAP_Message(BSSAP_CC_MSG_STATUS)
{
    static ITS_OCTET  MArgs[] =
    {
      BSSAP_IEI_CC_CAUSE,
      BSSAP_IEI_CC_CALL_STATE_INTERNAL
    };

    static ITS_OCTET    OArgs[] =
    {
       BSSAP_IEI_CC_AUXILLARY_STATES
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Status::~BSSAP_Status()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Status::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates an AssignmentRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StatusEnquiry::BSSAP_StatusEnquiry()
    : BSSAP_Message(BSSAP_CC_MSG_STATUS_ENQUIRY)
{
    static ITS_OCTET  MArgs[] =
    {
       NULL
    };

    static ITS_OCTET    OArgs[] =
    {
       NULL
    };

    mArgs = MArgs;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = 0;
    mDisc =  BSSAP_MD_DTAP;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys an AssignmentRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_StatusEnquiry::~BSSAP_StatusEnquiry()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_StatusEnquiry::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a IMSIDetachIndication message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IMSIDetachIndication::BSSAP_IMSIDetachIndication()
    : BSSAP_Message(BSSAP_MSG_IMSI_DETACH_INDICATION)
{
    
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1,
        BSSAP_IEI_MOBILE_IDENTITY
       
    };
    


    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;

/*  dlci = BSSAP_DLCI_DEFAULT;
    
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}
/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a IMSIDetachIndication message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IMSIDetachIndication::~BSSAP_IMSIDetachIndication()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_IMSIDetachIndication::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a LocationUpdatingAccepet message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingAccept::BSSAP_LocationUpdatingAccept()
    : BSSAP_Message(BSSAP_MSG_LOCATION_UPDATING_ACCEPT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_LOCATION_AREA_IDENTIFIER
       // BSSAP_EIEI_
    };

     static ITS_OCTET    OArgs[] =
    {
       
        BSSAP_IEI_MOBILE_IDENTITY,
        BSSAP_IEI_FOLLOW_ON_PROCEED
       
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc = BSSAP_MD_DTAP;


 /* dlci = BSSAP_DLCI_DEFAULT;
    
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a LocationUpdatingAccepet message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingAccept::~BSSAP_LocationUpdatingAccept()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LocationUpdatingAccept::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a LocationUpdatingReject message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingReject::BSSAP_LocationUpdatingReject()
    : BSSAP_Message(BSSAP_MSG_LOCATION_UPDATING_REJECT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_RR_CAUSE
  //      BSSAP_EIEI_
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;

    /* dlci = BSSAP_DLCI_DEFAULT;
    
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/


}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a LocationUpdatingReject message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingReject::~BSSAP_LocationUpdatingReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LocationUpdatingReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a LocationUpdatingRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingRequest::BSSAP_LocationUpdatingRequest()
    : BSSAP_Message(BSSAP_MSG_LOCATION_UPDATING_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
         BSSAP_IEI_LOCATION_UPDATING_TYPE,
         BSSAP_IEI_CYPHERING_KEY_SEQUENCE,
         BSSAP_IEI_LOCATION_AREA_IDENTIFIER,
         BSSAP_IEI_CLASSMARK_INFORMATION_TYPE1,
         BSSAP_IEI_MOBILE_IDENTITY
//        BSSAP_EIEI_
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


/* dlci = BSSAP_DLCI_DEFAULT;
    
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a LocationUpdatingRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_LocationUpdatingRequest::~BSSAP_LocationUpdatingRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_LocationUpdatingRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


////////////////////////////////////////////////////////////////////////
//
// Security Messages
//
////////////////////////////////////////////////////////////////////////*/

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a AuthenticationReject  message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationReject::BSSAP_AuthenticationReject()
    : BSSAP_Message(BSSAP_MSG_AUTHENTICATION_REJECT)
{
   
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


/* dlci = BSSAP_DLCI_DEFAULT;
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a AuthenticationReject  message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationReject::~BSSAP_AuthenticationReject ()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AuthenticationReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a AuthenticationRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationRequest::BSSAP_AuthenticationRequest()
    : BSSAP_Message(BSSAP_MSG_AUTHENTICATION_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
             BSSAP_IEI_CYPHERING_KEY_SEQUENCE,
    //         BSSAP_IEI_SPARE_HALF_OCTET,    // FILLED WITH A MASK 10.5.1.8
             BSSAP_IEI_PARAMETER_RAND

        
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;

  mDisc = BSSAP_MD_DTAP;

/* dlci = BSSAP_DLCI_DEFAULT;
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;
    
    */
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a AuthenticationRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationRequest::~BSSAP_AuthenticationRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AuthenticationRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a AuthenticationResponse message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationResponse::BSSAP_AuthenticationResponse()
    : BSSAP_Message(BSSAP_MSG_AUTHENTICATION_RESPONSE)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_PARAMETER_SRES
     
    };

    oArgs = NULL;
    noArgs = 0;
    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;


    /*dlci = BSSAP_DLCI_DEFAULT;
  
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a AuthenticationResponse message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_AuthenticationResponse::~BSSAP_AuthenticationResponse()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_AuthenticationResponse::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a IdentityRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityRequest::BSSAP_IdentityRequest()
    : BSSAP_Message(BSSAP_MSG_IDENTITY_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_IDENTITY_TYPE
        
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;

/*
    dlci = BSSAP_DLCI_DEFAULT;

    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a IdentityRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityRequest::~BSSAP_IdentityRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_IdentityRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a IdentityResponse message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityResponse::BSSAP_IdentityResponse()
    : BSSAP_Message(BSSAP_MSG_IDENTITY_RESPONSE)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_MOBILE_IDENTITY
        //BSSAP_EIEI_
    };

     mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;
   


 //   dlci = BSSAP_DLCI_DEFAULT;
 //   pDisc = PD_CALL_CONTROL_MSGS;
 //  tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a IdentityResponse message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_IdentityResponse::~BSSAP_IdentityResponse()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_IdentityResponse::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a TMSIReallocCommand message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSIReallocCommand::BSSAP_TMSIReallocCommand()
    : BSSAP_Message(BSSAP_MSG_TMSI_REALLOC_COMMAND)
{
    static ITS_OCTET    MArgs[] =
    {
           BSSAP_IEI_LOCATION_AREA_IDENTIFIER,
        BSSAP_IEI_MOBILE_IDENTITY
    };

     mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;
   
   


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a TMSIReallocCommand message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSIReallocCommand::~BSSAP_TMSIReallocCommand()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_TMSIReallocCommand::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a TMSIReallocComplete message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSIReallocComplete::BSSAP_TMSIReallocComplete()
    : BSSAP_Message(BSSAP_MSG_TMSI_REALLOC_COMPLETE)
{
    

    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;

/*
    dlci = BSSAP_DLCI_DEFAULT;
    
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a TMSIReallocComplete message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_TMSIReallocComplete::~BSSAP_TMSIReallocComplete()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_TMSIReallocComplete::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

//////////////////////////////////////////////////////////////////////////
//
// Connection Management Messages
//
//////////////////////////////////////////////////////////////////////////

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CMReestablishmentReq message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMReestablishmentReq::BSSAP_CMReestablishmentReq()
    : BSSAP_Message(BSSAP_MSG_CM_REESTABLISHMENT_REQ)
{
    static ITS_OCTET    MArgs[] =
    {
         BSSAP_IEI_CYPHERING_KEY_SEQUENCE,
        //BSSAP_IEI_SPARE_HALF_OCTET, // FILLED WITH A MASK 10.5.1.8
         BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2,
         BSSAP_IEI_MOBILE_IDENTITY,
         BSSAP_IEI_LOCATION_AREA_IDENTIFIER
    };



       mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CMReestablishmentReq message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMReestablishmentReq::~BSSAP_CMReestablishmentReq()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CMReestablishmentReq::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CMServiceAbort message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceAbort::BSSAP_CMServiceAbort()
    : BSSAP_Message(BSSAP_MSG_CM_SERVICE_ABORT)
{
   

    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


  /*  dlci = BSSAP_DLCI_DEFAULT;
  
    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CMServiceAbort message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceAbort::~BSSAP_CMServiceAbort()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CMServiceAbort::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CMServiceAccept message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceAccept::BSSAP_CMServiceAccept()
    : BSSAP_Message(BSSAP_MSG_CM_SERVICE_ACCEPT)
{
  
    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;

/*
    dlci = BSSAP_DLCI_DEFAULT;

    pDisc = PD_CALL_CONTROL_MSGS;
    tId = 0x01U;*/
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CMServiceAccept message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceAccept::~BSSAP_CMServiceAccept()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CMServiceAccept::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CMServiceReject message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceReject::BSSAP_CMServiceReject()
    : BSSAP_Message(BSSAP_MSG_CM_SERVICE_REJECT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_RR_CAUSE
     
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;
    


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CMServiceReject message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceReject::~BSSAP_CMServiceReject()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CMServiceReject::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a CMServiceRequest message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceRequest::BSSAP_CMServiceRequest()
    : BSSAP_Message(BSSAP_MSG_CM_SERVICE_REQUEST)
{
    static ITS_OCTET    MArgs[] =
    {
        // BSSAP_IEI_CM_SERVICE_TYPE,
         BSSAP_IEI_CYPHERING_KEY_SEQUENCE,
         BSSAP_IEI_CM_SERVICE_TYPE,
         BSSAP_IEI_CLASSMARK_INFORMATION_TYPE2,
         BSSAP_IEI_MOBILE_IDENTITY
         
    };

    static ITS_OCTET    OArgs[] =
    {
        
         BSSAP_IEI_PRIORITY //TO CHECKKKKKKKKKKKKKK
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc = BSSAP_MD_DTAP;


//   dlci = BSSAP_DLCI_DEFAULT;
//   mDisc = BSSAP_MD_DTAP;
//  pDisc = PD_CALL_CONTROL_MSGS;
//  tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a CMServiceRequest message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_CMServiceRequest::~BSSAP_CMServiceRequest()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_CMServiceRequest::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a Abort message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Abort::BSSAP_Abort()
    : BSSAP_Message(BSSAP_MSG_ABORT)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_CAUSE
        
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    mDisc = BSSAP_MD_DTAP;
    
    oArgs = NULL;
    noArgs = 0;


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a Abort message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_Abort::~BSSAP_Abort()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_Abort::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*************************************************************************
**
** Misc Messages
**
**************************************************************************/


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a MMInformation message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMInformation::BSSAP_MMInformation()
    : BSSAP_Message(BSSAP_MSG_MM_INFORMATION)
{
    static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_NETWORK_ELEMENT_IDENTITY,
        BSSAP_IEI_NETWORK_ELEMENT_IDENTITY,
        BSSAP_IEI_TIME_ZONE,
        BSSAP_IEI_TIME_ZONE_TIME,
        BSSAP_IEI_LSA_IDENTIFIER

    };

    mArgs = NULL;
    nmArgs = 0;
    oArgs = OArgs;
    noArgs = sizeof(OArgs);
    mDisc = BSSAP_MD_DTAP;


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//   tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a MMInformation message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMInformation::~BSSAP_MMInformation()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MMInformation::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a MMNull message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMNull::BSSAP_MMNull()
    : BSSAP_Message(BSSAP_MSG_MM_NULL)
{
   /* static ITS_OCTET    OArgs[] =
    {
        BSSAP_IEI_
        BSSAP_EIEI_
    };*/

    mArgs = NULL;
    nmArgs = 0;
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a MMNull message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMNull::~BSSAP_MMNull()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MMNull::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}


/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method creates a MMStatus message object.  The
 *      message type of the BSSAP_Message base object is set
 *      accordingly.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMStatus::BSSAP_MMStatus()
    : BSSAP_Message(BSSAP_MSG_MM_STATUS)
{
    static ITS_OCTET    MArgs[] =
    {
        BSSAP_IEI_RR_CAUSE
        
    };

    mArgs = MArgs;
    nmArgs = sizeof(MArgs);
    oArgs = NULL;
    noArgs = 0;
    mDisc = BSSAP_MD_DTAP;


//    dlci = BSSAP_DLCI_DEFAULT;
//    mDisc = BSSAP_MD_DTAP;
//    pDisc = PD_CALL_CONTROL_MSGS;
//    tId = 0x01U;
}

/*.implementation:public
 ************************************************************************
 *  Purpose:
 *      This method destroys a MMStatus message object.  All
 *      information elements in the map are also destroyed.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      None.
 *
 *  Notes:
 *
 *  See Also:
 ************************************************************************/
BSSAP_MMStatus::~BSSAP_MMStatus()
{
}

/*.implementation:protected
 ************************************************************************
 *  Purpose:
 *      This method checks to ensure that all mandatory parameters
 *      for this message are included when encoding this message.
 *
 *  Input Parameters:
 *      None.
 *
 *  Input/Output Parameters:
 *      None.
 *
 *  Output Parameters:
 *      None.
 *
 *  Return Value:
 *      If all mandatory information elements are included, ITS_TRUE
 *      is returned.  Otherwise, ITS_FALSE is returned.
 *
 *  Notes:
 *      This method is used only by the message encode algorithm.
 *
 *  See Also:
 ************************************************************************/
ITS_BOOLEAN
BSSAP_MMStatus::CheckForMandatoryParams()
{
    return (ITS_TRUE);
}
