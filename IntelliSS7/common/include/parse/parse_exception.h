////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//      Copyright 2000 IntelliNet Technologies, Inc. All Rights Reserved.     //
//              Manufactured in the United States of America.                 //
//        1990 W. New Haven Ste. 312, Melbourne, Florida, 32904 U.S.A.        //
//                                                                            //
//    This product and related documentation is protected by copyright and    //
//    distributed under licenses restricting its use, copying, distribution   //
//    and decompilation.  No part of this product or related documentation    //
//    may be reproduced in any form by any means without prior written        //
//    authorization of IntelliNet Technologies and its licensors, if any.     //
//                                                                            //
//    RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the       //
//    government is subject to restrictions as set forth in subparagraph      //
//    (c)(1)(ii) of the Rights in Technical Data and Computer Software        //
//    clause at DFARS 252.227-7013 and FAR 52.227-19.                         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// CONTRACT: INTERNAL                                                         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
//
//  ID: $Id: parse_exception.h,v 9.1 2005/03/23 12:52:57 cvsadmin Exp $
//
////////////////////////////////////////////////////////////////////////////////

//
//
// TODO: to be generated by exception compiler (the whole .h and .cpp files).
//
//


#if !defined(_PARSE_EXCEPTION_H_)
#define _PARSE_EXCEPTION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <parse.h>


#if defined(ITS_NAMESPACE)
namespace its
{
#endif // defined(ITS_NAMESPACE)




class ParseSyntaxError : public ITS_GenericException 
{
public:

    ParseSyntaxError(const std::string& informationParam, unsigned long lineNumberParam, unsigned long columnNumberParam) : ITS_GenericException("Parse syntax error")
    { Initialize(informationParam, lineNumberParam, columnNumberParam); }

    ParseSyntaxError(const std::string& informationParam, unsigned long lineNumberParam, unsigned long columnNumberParam, const std::string& fileParam, unsigned long lineParam) : ITS_GenericException("Parse syntax error", fileParam, lineParam)
    { Initialize(informationParam, lineNumberParam, columnNumberParam); }

    virtual ~ParseSyntaxError() ITS_THROW_SPEC_NULL
    {};

    const std::string& 
    GetInformation() const 
    { return information; }

    unsigned long 
    GetLineNumber()
    { return lineNumber; }

    unsigned long 
    GetColumnNumber()
    { return columnNumber; }



protected:

    void Initialize(const std::string& informationParam, unsigned long lineNumberParam, unsigned long columnNumberParam)
    {
        SetSubsystemNumber(3);
        SetNumber(1);
        information = informationParam;
        lineNumber = lineNumberParam;
        columnNumber = columnNumberParam;

        InsertField("Information <%s>", information.c_str());

        InsertField("Line Number <%lu>", lineNumber);

        InsertField("Column Number <%lu>", columnNumber);
    }

    std::string information;

    unsigned long lineNumber;

    unsigned long columnNumber;

};


//
//  Helper macro to throw syntax error.
//

#define PARSE_THROW_SYNTAX_ERROR(information, lineNumber, columnNumber) \
    throw its::ParseSyntaxError((information), (lineNumber), (columnNumber), __FILE__, __LINE__);







#if defined(ITS_NAMESPACE)
}
#endif // defined(ITS_NAMESPACE)

#endif // !defined(_PARSE_EXCEPTION_H_)
