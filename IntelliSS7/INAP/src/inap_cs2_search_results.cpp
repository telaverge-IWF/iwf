//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_search_results.h>

#include <AsnDescSetOf.h>
#include <AsnDescSet.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class //////////


// Type SearchInfo is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* SearchResults::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new SearchResults(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 17));
        staticDesc._element = GetSearchInfoStaticDescription();
        staticDesc.SetTypeName("SearchResults");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SearchResults::GetSearchInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSet staticDesc(6);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SearchInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 17));
        staticDesc._elementVect[0] = SearchInfo::GetDistinguishedNameStaticDescription();
        staticDesc._elementVect[1] = SearchInfo::GetEntriesStaticDescription();
        staticDesc._elementVect[2] = SearchInfo::GetPartialOutcomeQualifierStaticDescription();
        staticDesc._elementVect[3] = SearchInfo::GetSecurityParametersStaticDescription();
        staticDesc._elementVect[4] = SearchInfo::GetPerformerStaticDescription();
        staticDesc._elementVect[5] = SearchInfo::GetAliasDereferencedStaticDescription();
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





