//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_certificate_pair.h>

#include <AsnDescSequence.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class(es) //////////


// Type Certificate is a reference => no code generated.

// Type Certificate is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* CertificatePair::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new CertificatePair(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetForwardStaticDescription();
        staticDesc._elementVect[1] = GetReverseStaticDescription();
        staticDesc.SetTypeName("CertificatePair");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CertificatePair::GetForwardStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Certificate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = Certificate::GetVersionStaticDescription();
        staticDesc._elementVect[1] = Certificate::GetSerialNumberStaticDescription();
        staticDesc._elementVect[2] = Certificate::GetSignatureStaticDescription();
        staticDesc._elementVect[3] = Certificate::GetIssuerStaticDescription();
        staticDesc._elementVect[4] = Certificate::GetValidityStaticDescription();
        staticDesc._elementVect[5] = Certificate::GetSubjectStaticDescription();
        staticDesc._elementVect[6] = Certificate::GetSubjectPublicKeyInfoStaticDescription();
        staticDesc.SetNamedTypeName("forward");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CertificatePair::GetReverseStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Certificate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = Certificate::GetVersionStaticDescription();
        staticDesc._elementVect[1] = Certificate::GetSerialNumberStaticDescription();
        staticDesc._elementVect[2] = Certificate::GetSignatureStaticDescription();
        staticDesc._elementVect[3] = Certificate::GetIssuerStaticDescription();
        staticDesc._elementVect[4] = Certificate::GetValidityStaticDescription();
        staticDesc._elementVect[5] = Certificate::GetSubjectStaticDescription();
        staticDesc._elementVect[6] = Certificate::GetSubjectPublicKeyInfoStaticDescription();
        staticDesc.SetNamedTypeName("reverse");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





