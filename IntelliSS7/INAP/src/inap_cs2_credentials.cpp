//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_credentials.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>
#include <AsnDescSet.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class(es) //////////


// Type SimpleCredentials is a reference => no code generated.

// Type StrongCredentials is a reference => no code generated.

// Type EXTERNAL is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* Credentials::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Credentials(&staticDesc));
        staticDesc._choiceList.push_back(GetSimpleStaticDescription());
        staticDesc._choiceList.push_back(GetStrongStaticDescription());
        staticDesc._choiceList.push_back(GetExternalProcedureStaticDescription());
        staticDesc.SetTypeName("Credentials");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Credentials::GetSimpleStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SimpleCredentials(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = SimpleCredentials::GetDistinguishedNameStaticDescription();
        staticDesc._elementVect[1] = SimpleCredentials::GetValidityStaticDescription();
        staticDesc._elementVect[2] = SimpleCredentials::GetPasswordStaticDescription();
        staticDesc.SetNamedTypeName("simple");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Credentials::GetStrongStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSet staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new StrongCredentials(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._elementVect[0] = StrongCredentials::GetCertification_pathStaticDescription();
        staticDesc._elementVect[1] = StrongCredentials::GetBind_tokenStaticDescription();
        staticDesc.SetNamedTypeName("strong");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Credentials::GetExternalProcedureStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(4);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EXTERNAL(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._elementVect[0] = EXTERNAL::GetDirect_referenceStaticDescription();
        staticDesc._elementVect[1] = EXTERNAL::GetIndirect_referenceStaticDescription();
        staticDesc._elementVect[2] = EXTERNAL::GetData_value_descriptorStaticDescription();
        staticDesc._elementVect[3] = EXTERNAL::GetEncodingStaticDescription();
        staticDesc.SetNamedTypeName("externalProcedure");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





