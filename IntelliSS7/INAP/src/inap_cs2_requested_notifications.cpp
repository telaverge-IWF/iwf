//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_requested_notifications.h>

#include <AsnDescSetOf.h>
#include <AsnDescChoice.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class //////////


// Type CallConditions is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* RequestedNotifications::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new RequestedNotifications(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 17));
        staticDesc._element = GetCallConditionsStaticDescription();
        staticDesc.SetTypeName("RequestedNotifications");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* RequestedNotifications::GetCallConditionsStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CallConditions(&staticDesc));
        staticDesc._choiceList.push_back(CallConditions::GetUserAbandonStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetCallFailureStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetNoReplyStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetCallReleaseStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetSs_invocationStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetCreditLimitReachedStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetCallDurationStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetCalledNumberStaticDescription());
        staticDesc._choiceList.push_back(CallConditions::GetAnsweredCallStaticDescription());
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





