//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_filter.h>

#include <AsnDescChoice.h>
#include <AsnDescSetOf.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class(es) //////////


// Type FilterItem is a reference => no code generated.



////////// Begin Nested Class //////////


// Type FilterItem is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* Filter::And::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new And(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._element = GetFilterItemStaticDescription();
        staticDesc.SetNamedTypeName("and");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::And::GetFilterItemStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FilterItem(&staticDesc));
        staticDesc._choiceList.push_back(FilterItem::GetEqualityStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetSubstringsStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetGreaterOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetLessOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetPresentStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetApproximateMatchStaticDescription());
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class //////////


// Type FilterItem is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* Filter::Or::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Or(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._element = GetFilterItemStaticDescription();
        staticDesc.SetNamedTypeName("or");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::Or::GetFilterItemStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FilterItem(&staticDesc));
        staticDesc._choiceList.push_back(FilterItem::GetEqualityStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetSubstringsStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetGreaterOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetLessOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetPresentStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetApproximateMatchStaticDescription());
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


// Type FilterItem is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* Filter::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Filter(&staticDesc));
        staticDesc._choiceList.push_back(GetItemStaticDescription());
        staticDesc._choiceList.push_back(GetAndStaticDescription());
        staticDesc._choiceList.push_back(GetOrStaticDescription());
        staticDesc._choiceList.push_back(GetNotStaticDescription());
        staticDesc.SetTypeName("Filter");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::GetItemStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FilterItem(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._choiceList.push_back(FilterItem::GetEqualityStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetSubstringsStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetGreaterOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetLessOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetPresentStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetApproximateMatchStaticDescription());
        staticDesc.SetNamedTypeName("item");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::GetAndStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new And(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._element = And::GetFilterItemStaticDescription();
        staticDesc.SetNamedTypeName("and");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::GetOrStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSetOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Or(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._element = Or::GetFilterItemStaticDescription();
        staticDesc.SetNamedTypeName("or");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Filter::GetNotStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FilterItem(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._choiceList.push_back(FilterItem::GetEqualityStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetSubstringsStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetGreaterOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetLessOrEqualStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetPresentStaticDescription());
        staticDesc._choiceList.push_back(FilterItem::GetApproximateMatchStaticDescription());
        staticDesc.SetNamedTypeName("not");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





