<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>SearchArgument</className>
<asnTypeName>SearchArgument</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetBaseObject</name>
<signature>void SetBaseObject(Name* element)</signature>
<elmentName>BaseObject</elmentName>
<asnElementName>baseObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBaseObject</name>
<signature>void SetBaseObject(const Name&amp; element)</signature>
<elementName>BaseObject</elementName>
<asnElementName>baseObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBaseObject</name>
<signature>const Name&amp; GetBaseObject() const</signature>
<elementName>BaseObject</elementName>
<asnElementName>baseObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetSubset</name>
<signature>void SetSubset(Subset* element)</signature>
<elmentName>Subset</elmentName>
<asnElementName>subset</asnElementName>
<elementTypeName>Subset</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSubset</name>
<signature>void SetSubset(const Subset&amp; element)</signature>
<elementName>Subset</elementName>
<asnElementName>subset</asnElementName>
<elementTypeName>Subset</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSubset</name>
<signature>const Subset&amp; GetSubset() const</signature>
<elementName>Subset</elementName>
<asnElementName>subset</asnElementName>
<elementTypeName>Subset</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSubset</name>
<signature>bool OptionSubset() const</signature>
<elementName>Subset</elementName>
<asnElementName>subset</asnElementName>
<elementTypeName>Subset</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetFilter</name>
<signature>void SetFilter(Filter* element)</signature>
<elmentName>Filter</elmentName>
<asnElementName>filter</asnElementName>
<elementTypeName>Filter</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilter</name>
<signature>void SetFilter(const Filter&amp; element)</signature>
<elementName>Filter</elementName>
<asnElementName>filter</asnElementName>
<elementTypeName>Filter</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilter</name>
<signature>const Filter&amp; GetFilter() const</signature>
<elementName>Filter</elementName>
<asnElementName>filter</asnElementName>
<elementTypeName>Filter</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionFilter</name>
<signature>bool OptionFilter() const</signature>
<elementName>Filter</elementName>
<asnElementName>filter</asnElementName>
<elementTypeName>Filter</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSearchAliases</name>
<signature>void SetSearchAliases(SearchAliases* element)</signature>
<elmentName>SearchAliases</elmentName>
<asnElementName>searchAliases</asnElementName>
<elementTypeName>SearchAliases</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSearchAliases</name>
<signature>void SetSearchAliases(const SearchAliases&amp; element)</signature>
<elementName>SearchAliases</elementName>
<asnElementName>searchAliases</asnElementName>
<elementTypeName>SearchAliases</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSearchAliases</name>
<signature>const SearchAliases&amp; GetSearchAliases() const</signature>
<elementName>SearchAliases</elementName>
<asnElementName>searchAliases</asnElementName>
<elementTypeName>SearchAliases</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSearchAliases</name>
<signature>bool OptionSearchAliases() const</signature>
<elementName>SearchAliases</elementName>
<asnElementName>searchAliases</asnElementName>
<elementTypeName>SearchAliases</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSelection</name>
<signature>void SetSelection(InEntryInformationSelection* element)</signature>
<elmentName>Selection</elmentName>
<asnElementName>selection</asnElementName>
<elementTypeName>InEntryInformationSelection</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSelection</name>
<signature>void SetSelection(const InEntryInformationSelection&amp; element)</signature>
<elementName>Selection</elementName>
<asnElementName>selection</asnElementName>
<elementTypeName>InEntryInformationSelection</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSelection</name>
<signature>const InEntryInformationSelection&amp; GetSelection() const</signature>
<elementName>Selection</elementName>
<asnElementName>selection</asnElementName>
<elementTypeName>InEntryInformationSelection</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSelection</name>
<signature>bool OptionSelection() const</signature>
<elementName>Selection</elementName>
<asnElementName>selection</asnElementName>
<elementTypeName>InEntryInformationSelection</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SearchArgument information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SearchArgument ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    baseObject [0] IMPLICIT Name -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    subset [1] IMPLICIT Subset -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    filter [2] IMPLICIT Filter -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    searchAliases [3] IMPLICIT BOOLEAN OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    selection [4] IMPLICIT InEntryInformationSelection -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

