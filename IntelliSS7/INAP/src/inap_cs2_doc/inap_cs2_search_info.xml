<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>SearchInfo</className>
<asnTypeName>SearchInfo</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDistinguishedName</name>
<signature>void SetDistinguishedName(DistinguishedName* element)</signature>
<elmentName>DistinguishedName</elmentName>
<asnElementName>distinguishedName</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDistinguishedName</name>
<signature>void SetDistinguishedName(const DistinguishedName&amp; element)</signature>
<elementName>DistinguishedName</elementName>
<asnElementName>distinguishedName</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDistinguishedName</name>
<signature>const DistinguishedName&amp; GetDistinguishedName() const</signature>
<elementName>DistinguishedName</elementName>
<asnElementName>distinguishedName</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDistinguishedName</name>
<signature>bool OptionDistinguishedName() const</signature>
<elementName>DistinguishedName</elementName>
<asnElementName>distinguishedName</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEntries</name>
<signature>void SetEntries(Entries* element)</signature>
<elmentName>Entries</elmentName>
<asnElementName>entries</asnElementName>
<elementTypeName>Entries</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEntries</name>
<signature>void SetEntries(const Entries&amp; element)</signature>
<elementName>Entries</elementName>
<asnElementName>entries</asnElementName>
<elementTypeName>Entries</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEntries</name>
<signature>const Entries&amp; GetEntries() const</signature>
<elementName>Entries</elementName>
<asnElementName>entries</asnElementName>
<elementTypeName>Entries</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetPartialOutcomeQualifier</name>
<signature>void SetPartialOutcomeQualifier(PartialOutcomeQualifier* element)</signature>
<elmentName>PartialOutcomeQualifier</elmentName>
<asnElementName>partialOutcomeQualifier</asnElementName>
<elementTypeName>PartialOutcomeQualifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPartialOutcomeQualifier</name>
<signature>void SetPartialOutcomeQualifier(const PartialOutcomeQualifier&amp; element)</signature>
<elementName>PartialOutcomeQualifier</elementName>
<asnElementName>partialOutcomeQualifier</asnElementName>
<elementTypeName>PartialOutcomeQualifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPartialOutcomeQualifier</name>
<signature>const PartialOutcomeQualifier&amp; GetPartialOutcomeQualifier() const</signature>
<elementName>PartialOutcomeQualifier</elementName>
<asnElementName>partialOutcomeQualifier</asnElementName>
<elementTypeName>PartialOutcomeQualifier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPartialOutcomeQualifier</name>
<signature>bool OptionPartialOutcomeQualifier() const</signature>
<elementName>PartialOutcomeQualifier</elementName>
<asnElementName>partialOutcomeQualifier</asnElementName>
<elementTypeName>PartialOutcomeQualifier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSecurityParameters</name>
<signature>void SetSecurityParameters(SecurityParameters* element)</signature>
<elmentName>SecurityParameters</elmentName>
<asnElementName>securityParameters</asnElementName>
<elementTypeName>SecurityParameters</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSecurityParameters</name>
<signature>void SetSecurityParameters(const SecurityParameters&amp; element)</signature>
<elementName>SecurityParameters</elementName>
<asnElementName>securityParameters</asnElementName>
<elementTypeName>SecurityParameters</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSecurityParameters</name>
<signature>const SecurityParameters&amp; GetSecurityParameters() const</signature>
<elementName>SecurityParameters</elementName>
<asnElementName>securityParameters</asnElementName>
<elementTypeName>SecurityParameters</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSecurityParameters</name>
<signature>bool OptionSecurityParameters() const</signature>
<elementName>SecurityParameters</elementName>
<asnElementName>securityParameters</asnElementName>
<elementTypeName>SecurityParameters</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPerformer</name>
<signature>void SetPerformer(DistinguishedName* element)</signature>
<elmentName>Performer</elmentName>
<asnElementName>performer</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPerformer</name>
<signature>void SetPerformer(const DistinguishedName&amp; element)</signature>
<elementName>Performer</elementName>
<asnElementName>performer</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPerformer</name>
<signature>const DistinguishedName&amp; GetPerformer() const</signature>
<elementName>Performer</elementName>
<asnElementName>performer</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPerformer</name>
<signature>bool OptionPerformer() const</signature>
<elementName>Performer</elementName>
<asnElementName>performer</asnElementName>
<elementTypeName>DistinguishedName</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAliasDereferenced</name>
<signature>void SetAliasDereferenced(AliasDereferenced* element)</signature>
<elmentName>AliasDereferenced</elmentName>
<asnElementName>aliasDereferenced</asnElementName>
<elementTypeName>AliasDereferenced</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAliasDereferenced</name>
<signature>void SetAliasDereferenced(const AliasDereferenced&amp; element)</signature>
<elementName>AliasDereferenced</elementName>
<asnElementName>aliasDereferenced</asnElementName>
<elementTypeName>AliasDereferenced</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAliasDereferenced</name>
<signature>const AliasDereferenced&amp; GetAliasDereferenced() const</signature>
<elementName>AliasDereferenced</elementName>
<asnElementName>aliasDereferenced</asnElementName>
<elementTypeName>AliasDereferenced</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAliasDereferenced</name>
<signature>bool OptionAliasDereferenced() const</signature>
<elementName>AliasDereferenced</elementName>
<asnElementName>aliasDereferenced</asnElementName>
<elementTypeName>AliasDereferenced</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SearchInfo information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 2]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SearchInfo ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    distinguishedName DistinguishedName -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    entries [0] IMPLICIT SET OF InEntryInformation -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    partialOutcomeQualifier [2] IMPLICIT PartialOutcomeQualifier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    securityParameters [30] IMPLICIT SecurityParameters -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    performer [29] IMPLICIT DistinguishedName -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    aliasDereferenced [28] IMPLICIT BOOLEAN OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

