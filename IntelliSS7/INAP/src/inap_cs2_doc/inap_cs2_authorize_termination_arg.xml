<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>AuthorizeTerminationArg</className>
<asnTypeName>AuthorizeTerminationArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetDestinationNumberRoutingAddress</name>
<signature>void SetDestinationNumberRoutingAddress(CalledPartyNumber* element)</signature>
<elmentName>DestinationNumberRoutingAddress</elmentName>
<asnElementName>destinationNumberRoutingAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDestinationNumberRoutingAddress</name>
<signature>void SetDestinationNumberRoutingAddress(const CalledPartyNumber&amp; element)</signature>
<elementName>DestinationNumberRoutingAddress</elementName>
<asnElementName>destinationNumberRoutingAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDestinationNumberRoutingAddress</name>
<signature>const CalledPartyNumber&amp; GetDestinationNumberRoutingAddress() const</signature>
<elementName>DestinationNumberRoutingAddress</elementName>
<asnElementName>destinationNumberRoutingAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDestinationNumberRoutingAddress</name>
<signature>bool OptionDestinationNumberRoutingAddress() const</signature>
<elementName>DestinationNumberRoutingAddress</elementName>
<asnElementName>destinationNumberRoutingAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(DisplayInformation* element)</signature>
<elmentName>DisplayInformation</elmentName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(const DisplayInformation&amp; element)</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDisplayInformation</name>
<signature>const DisplayInformation&amp; GetDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDisplayInformation</name>
<signature>bool OptionDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)</signature>
<elmentName>ISDNAccessRelatedInformation</elmentName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation&amp; element)</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetISDNAccessRelatedInformation</name>
<signature>const ISDNAccessRelatedInformation&amp; GetISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionISDNAccessRelatedInformation</name>
<signature>bool OptionISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(TravellingClassMark* element)</signature>
<elmentName>TravellingClassMark</elmentName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(const TravellingClassMark&amp; element)</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTravellingClassMark</name>
<signature>const TravellingClassMark&amp; GetTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTravellingClassMark</name>
<signature>bool OptionTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(INServiceCompatibilityResponse* element)</signature>
<elmentName>INServiceCompatibilityResponse</elmentName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(const INServiceCompatibilityResponse&amp; element)</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityResponse</name>
<signature>const INServiceCompatibilityResponse&amp; GetINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityResponse</name>
<signature>bool OptionINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(ForwardGVNS* element)</signature>
<elmentName>ForwardGVNS</elmentName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(const ForwardGVNS&amp; element)</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardGVNS</name>
<signature>const ForwardGVNS&amp; GetForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardGVNS</name>
<signature>bool OptionForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(BackwardGVNS* element)</signature>
<elmentName>BackwardGVNS</elmentName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(const BackwardGVNS&amp; element)</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBackwardGVNS</name>
<signature>const BackwardGVNS&amp; GetBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBackwardGVNS</name>
<signature>bool OptionBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLegID</name>
<signature>void SetLegID(LegID* element)</signature>
<elmentName>LegID</elmentName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLegID</name>
<signature>void SetLegID(const LegID&amp; element)</signature>
<elementName>LegID</elementName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLegID</name>
<signature>const LegID&amp; GetLegID() const</signature>
<elementName>LegID</elementName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLegID</name>
<signature>bool OptionLegID() const</signature>
<elementName>LegID</elementName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- AuthorizeTerminationArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>AuthorizeTerminationArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    alertingPattern [0] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [1] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    destinationNumberRoutingAddress [2] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    displayInformation [3] IMPLICIT DisplayInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iSDNAccessRelatedInformation [4] IMPLICIT ISDNAccessRelatedInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [5] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    travellingClassMark [6] IMPLICIT TravellingClassMark -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [7] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityResponse [8] IMPLICIT INServiceCompatibilityResponse -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardGVNS [9] IMPLICIT ForwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    backwardGVNS [10] IMPLICIT BackwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    legID [11] IMPLICIT LegID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

