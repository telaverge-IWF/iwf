<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ContinueWithArgumentArg</className>
<asnTypeName>ContinueWithArgumentArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetLegID</name>
<signature>void SetLegID(LegID* element)</signature>
<elmentName>LegID</elmentName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLegID</name>
<signature>void SetLegID(const LegID&amp; element)</signature>
<elementName>LegID</elementName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLegID</name>
<signature>const LegID&amp; GetLegID() const</signature>
<elementName>LegID</elementName>
<asnElementName>legID</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGenericName</name>
<signature>void SetGenericName(GenericName* element)</signature>
<elmentName>GenericName</elmentName>
<asnElementName>genericName</asnElementName>
<elementTypeName>GenericName</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGenericName</name>
<signature>void SetGenericName(const GenericName&amp; element)</signature>
<elementName>GenericName</elementName>
<asnElementName>genericName</asnElementName>
<elementTypeName>GenericName</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGenericName</name>
<signature>const GenericName&amp; GetGenericName() const</signature>
<elementName>GenericName</elementName>
<asnElementName>genericName</asnElementName>
<elementTypeName>GenericName</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGenericName</name>
<signature>bool OptionGenericName() const</signature>
<elementName>GenericName</elementName>
<asnElementName>genericName</asnElementName>
<elementTypeName>GenericName</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(INServiceCompatibilityResponse* element)</signature>
<elmentName>INServiceCompatibilityResponse</elmentName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(const INServiceCompatibilityResponse&amp; element)</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityResponse</name>
<signature>const INServiceCompatibilityResponse&amp; GetINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityResponse</name>
<signature>bool OptionINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(ForwardGVNS* element)</signature>
<elmentName>ForwardGVNS</elmentName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(const ForwardGVNS&amp; element)</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardGVNS</name>
<signature>const ForwardGVNS&amp; GetForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardGVNS</name>
<signature>bool OptionForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(BackwardGVNS* element)</signature>
<elmentName>BackwardGVNS</elmentName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(const BackwardGVNS&amp; element)</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBackwardGVNS</name>
<signature>const BackwardGVNS&amp; GetBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBackwardGVNS</name>
<signature>bool OptionBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ContinueWithArgumentArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ContinueWithArgumentArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    legID [0] IMPLICIT LegID -- [linked] -- DEFAULT ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alertingPattern [1] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    genericName [2] IMPLICIT GenericName -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityResponse [3] IMPLICIT INServiceCompatibilityResponse -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardGVNS [4] IMPLICIT ForwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    backwardGVNS [5] IMPLICIT BackwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [6] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [7] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

