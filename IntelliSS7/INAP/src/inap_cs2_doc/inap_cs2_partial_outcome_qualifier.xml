<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>PartialOutcomeQualifier</className>
<asnTypeName>PartialOutcomeQualifier</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetLimitProblem</name>
<signature>void SetLimitProblem(LimitProblem* element)</signature>
<elmentName>LimitProblem</elmentName>
<asnElementName>limitProblem</asnElementName>
<elementTypeName>LimitProblem</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLimitProblem</name>
<signature>void SetLimitProblem(const LimitProblem&amp; element)</signature>
<elementName>LimitProblem</elementName>
<asnElementName>limitProblem</asnElementName>
<elementTypeName>LimitProblem</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLimitProblem</name>
<signature>const LimitProblem&amp; GetLimitProblem() const</signature>
<elementName>LimitProblem</elementName>
<asnElementName>limitProblem</asnElementName>
<elementTypeName>LimitProblem</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLimitProblem</name>
<signature>bool OptionLimitProblem() const</signature>
<elementName>LimitProblem</elementName>
<asnElementName>limitProblem</asnElementName>
<elementTypeName>LimitProblem</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUnexplored</name>
<signature>void SetUnexplored(Unexplored* element)</signature>
<elmentName>Unexplored</elmentName>
<asnElementName>unexplored</asnElementName>
<elementTypeName>Unexplored</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUnexplored</name>
<signature>void SetUnexplored(const Unexplored&amp; element)</signature>
<elementName>Unexplored</elementName>
<asnElementName>unexplored</asnElementName>
<elementTypeName>Unexplored</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUnexplored</name>
<signature>const Unexplored&amp; GetUnexplored() const</signature>
<elementName>Unexplored</elementName>
<asnElementName>unexplored</asnElementName>
<elementTypeName>Unexplored</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUnexplored</name>
<signature>bool OptionUnexplored() const</signature>
<elementName>Unexplored</elementName>
<asnElementName>unexplored</asnElementName>
<elementTypeName>Unexplored</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUnavailableCriticalExtensions</name>
<signature>void SetUnavailableCriticalExtensions(UnavailableCriticalExtensions* element)</signature>
<elmentName>UnavailableCriticalExtensions</elmentName>
<asnElementName>unavailableCriticalExtensions</asnElementName>
<elementTypeName>UnavailableCriticalExtensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUnavailableCriticalExtensions</name>
<signature>void SetUnavailableCriticalExtensions(const UnavailableCriticalExtensions&amp; element)</signature>
<elementName>UnavailableCriticalExtensions</elementName>
<asnElementName>unavailableCriticalExtensions</asnElementName>
<elementTypeName>UnavailableCriticalExtensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUnavailableCriticalExtensions</name>
<signature>const UnavailableCriticalExtensions&amp; GetUnavailableCriticalExtensions() const</signature>
<elementName>UnavailableCriticalExtensions</elementName>
<asnElementName>unavailableCriticalExtensions</asnElementName>
<elementTypeName>UnavailableCriticalExtensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUnavailableCriticalExtensions</name>
<signature>bool OptionUnavailableCriticalExtensions() const</signature>
<elementName>UnavailableCriticalExtensions</elementName>
<asnElementName>unavailableCriticalExtensions</asnElementName>
<elementTypeName>UnavailableCriticalExtensions</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PartialOutcomeQualifier information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PartialOutcomeQualifier ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    limitProblem [0] IMPLICIT LimitProblem -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    unexplored [1] IMPLICIT SET OF ContinuationReference -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    unavailableCriticalExtensions [2] IMPLICIT BOOLEAN OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

