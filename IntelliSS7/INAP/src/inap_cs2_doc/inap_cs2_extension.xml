<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>Extension</className>
<asnTypeName>Extension</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetIdentifier</name>
<signature>void SetIdentifier(Identifier* element)</signature>
<elmentName>Identifier</elmentName>
<asnElementName>identifier</asnElementName>
<elementTypeName>Identifier</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIdentifier</name>
<signature>void SetIdentifier(const Identifier&amp; element)</signature>
<elementName>Identifier</elementName>
<asnElementName>identifier</asnElementName>
<elementTypeName>Identifier</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIdentifier</name>
<signature>const Identifier&amp; GetIdentifier() const</signature>
<elementName>Identifier</elementName>
<asnElementName>identifier</asnElementName>
<elementTypeName>Identifier</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCritical</name>
<signature>void SetCritical(Critical* element)</signature>
<elmentName>Critical</elmentName>
<asnElementName>critical</asnElementName>
<elementTypeName>Critical</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCritical</name>
<signature>void SetCritical(const Critical&amp; element)</signature>
<elementName>Critical</elementName>
<asnElementName>critical</asnElementName>
<elementTypeName>Critical</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCritical</name>
<signature>const Critical&amp; GetCritical() const</signature>
<elementName>Critical</elementName>
<asnElementName>critical</asnElementName>
<elementTypeName>Critical</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCritical</name>
<signature>bool OptionCritical() const</signature>
<elementName>Critical</elementName>
<asnElementName>critical</asnElementName>
<elementTypeName>Critical</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetItem</name>
<signature>void SetItem(Item* element)</signature>
<elmentName>Item</elmentName>
<asnElementName>item</asnElementName>
<elementTypeName>Item</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetItem</name>
<signature>void SetItem(const Item&amp; element)</signature>
<elementName>Item</elementName>
<asnElementName>item</asnElementName>
<elementTypeName>Item</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetItem</name>
<signature>const Item&amp; GetItem() const</signature>
<elementName>Item</elementName>
<asnElementName>item</asnElementName>
<elementTypeName>Item</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- Extension information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 4]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>Extension ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    identifier [0] IMPLICIT INTEGER,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    critical [1] IMPLICIT BOOLEAN OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    item [2] IMPLICIT ANY DEFINED BY identifier</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

