<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>MoveCallSegmentsArg</className>
<asnTypeName>MoveCallSegmentsArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetTargetCallSegmentAssociation</name>
<signature>void SetTargetCallSegmentAssociation(CSAID* element)</signature>
<elmentName>TargetCallSegmentAssociation</elmentName>
<asnElementName>targetCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTargetCallSegmentAssociation</name>
<signature>void SetTargetCallSegmentAssociation(const CSAID&amp; element)</signature>
<elementName>TargetCallSegmentAssociation</elementName>
<asnElementName>targetCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTargetCallSegmentAssociation</name>
<signature>const CSAID&amp; GetTargetCallSegmentAssociation() const</signature>
<elementName>TargetCallSegmentAssociation</elementName>
<asnElementName>targetCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCallSegments</name>
<signature>void SetCallSegments(CallSegments* element)</signature>
<elmentName>CallSegments</elmentName>
<asnElementName>callSegments</asnElementName>
<elementTypeName>CallSegments</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallSegments</name>
<signature>void SetCallSegments(const CallSegments&amp; element)</signature>
<elementName>CallSegments</elementName>
<asnElementName>callSegments</asnElementName>
<elementTypeName>CallSegments</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallSegments</name>
<signature>const CallSegments&amp; GetCallSegments() const</signature>
<elementName>CallSegments</elementName>
<asnElementName>callSegments</asnElementName>
<elementTypeName>CallSegments</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetLegs</name>
<signature>void SetLegs(Legs* element)</signature>
<elmentName>Legs</elmentName>
<asnElementName>legs</asnElementName>
<elementTypeName>Legs</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLegs</name>
<signature>void SetLegs(const Legs&amp; element)</signature>
<elementName>Legs</elementName>
<asnElementName>legs</asnElementName>
<elementTypeName>Legs</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLegs</name>
<signature>const Legs&amp; GetLegs() const</signature>
<elementName>Legs</elementName>
<asnElementName>legs</asnElementName>
<elementTypeName>Legs</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- MoveCallSegmentsArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>MoveCallSegmentsArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    targetCallSegmentAssociation [0] IMPLICIT CSAID -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callSegments [1] IMPLICIT SEQUENCE (SIZE(1..numOfCSs -- [linked] --)) OF SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        sourceCallSegment [0] IMPLICIT CallSegmentID -- [linked] -- DEFAULT initialCallSegment -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        newCallSegment [1] IMPLICIT CallSegmentID -- [linked] --</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    legs [2] IMPLICIT SEQUENCE (SIZE(1..numOfLegs -- [linked] --)) OF SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        sourceLeg [0] IMPLICIT LegID -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        newLeg [1] IMPLICIT LegID -- [linked] --</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [2] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

