<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>InitiateCallAttemptArg</className>
<asnTypeName>InitiateCallAttemptArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(DestinationRoutingAddress* element)</signature>
<elmentName>DestinationRoutingAddress</elmentName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(const DestinationRoutingAddress&amp; element)</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDestinationRoutingAddress</name>
<signature>const DestinationRoutingAddress&amp; GetDestinationRoutingAddress() const</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)</signature>
<elmentName>ISDNAccessRelatedInformation</elmentName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation&amp; element)</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetISDNAccessRelatedInformation</name>
<signature>const ISDNAccessRelatedInformation&amp; GetISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionISDNAccessRelatedInformation</name>
<signature>bool OptionISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(TravellingClassMark* element)</signature>
<elmentName>TravellingClassMark</elmentName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(const TravellingClassMark&amp; element)</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTravellingClassMark</name>
<signature>const TravellingClassMark&amp; GetTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTravellingClassMark</name>
<signature>bool OptionTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)</signature>
<elmentName>ServiceInteractionIndicators</elmentName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(const ServiceInteractionIndicators&amp; element)</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicators</name>
<signature>const ServiceInteractionIndicators&amp; GetServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicators</name>
<signature>bool OptionServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLegToBeCreated</name>
<signature>void SetLegToBeCreated(LegID* element)</signature>
<elmentName>LegToBeCreated</elmentName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLegToBeCreated</name>
<signature>void SetLegToBeCreated(const LegID&amp; element)</signature>
<elementName>LegToBeCreated</elementName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLegToBeCreated</name>
<signature>const LegID&amp; GetLegToBeCreated() const</signature>
<elementName>LegToBeCreated</elementName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetNewCallSegment</name>
<signature>void SetNewCallSegment(CallSegmentID* element)</signature>
<elmentName>NewCallSegment</elmentName>
<asnElementName>newCallSegment</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNewCallSegment</name>
<signature>void SetNewCallSegment(const CallSegmentID&amp; element)</signature>
<elementName>NewCallSegment</elementName>
<asnElementName>newCallSegment</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNewCallSegment</name>
<signature>const CallSegmentID&amp; GetNewCallSegment() const</signature>
<elementName>NewCallSegment</elementName>
<asnElementName>newCallSegment</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(INServiceCompatibilityResponse* element)</signature>
<elmentName>INServiceCompatibilityResponse</elmentName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(const INServiceCompatibilityResponse&amp; element)</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityResponse</name>
<signature>const INServiceCompatibilityResponse&amp; GetINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityResponse</name>
<signature>bool OptionINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- InitiateCallAttemptArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>InitiateCallAttemptArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    destinationRoutingAddress [0] IMPLICIT DestinationRoutingAddress -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alertingPattern [1] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iSDNAccessRelatedInformation [2] IMPLICIT ISDNAccessRelatedInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    travellingClassMark [3] IMPLICIT TravellingClassMark -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [4] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicators [29] IMPLICIT ServiceInteractionIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [30] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    legToBeCreated [5] IMPLICIT LegID -- [linked] -- DEFAULT ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    newCallSegment [6] IMPLICIT CallSegmentID -- [linked] -- DEFAULT initialCallSegment -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityResponse [7] IMPLICIT INServiceCompatibilityResponse -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [8] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

