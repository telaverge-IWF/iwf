<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ReconnectArg</className>
<asnTypeName>ReconnectArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetNotificationDuration</name>
<signature>void SetNotificationDuration(ApplicationTimer* element)</signature>
<elmentName>NotificationDuration</elmentName>
<asnElementName>notificationDuration</asnElementName>
<elementTypeName>ApplicationTimer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNotificationDuration</name>
<signature>void SetNotificationDuration(const ApplicationTimer&amp; element)</signature>
<elementName>NotificationDuration</elementName>
<asnElementName>notificationDuration</asnElementName>
<elementTypeName>ApplicationTimer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNotificationDuration</name>
<signature>const ApplicationTimer&amp; GetNotificationDuration() const</signature>
<elementName>NotificationDuration</elementName>
<asnElementName>notificationDuration</asnElementName>
<elementTypeName>ApplicationTimer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNotificationDuration</name>
<signature>bool OptionNotificationDuration() const</signature>
<elementName>NotificationDuration</elementName>
<asnElementName>notificationDuration</asnElementName>
<elementTypeName>ApplicationTimer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(DisplayInformation* element)</signature>
<elmentName>DisplayInformation</elmentName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(const DisplayInformation&amp; element)</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDisplayInformation</name>
<signature>const DisplayInformation&amp; GetDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDisplayInformation</name>
<signature>bool OptionDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(CallSegmentID* element)</signature>
<elmentName>CallSegmentID</elmentName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(const CallSegmentID&amp; element)</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallSegmentID</name>
<signature>const CallSegmentID&amp; GetCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallSegmentID</name>
<signature>bool OptionCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ReconnectArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ReconnectArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    notificationDuration [0] IMPLICIT ApplicationTimer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alertingPattern [1] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    displayInformation [2] IMPLICIT DisplayInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [3] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callSegmentID [4] IMPLICIT CallSegmentID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

