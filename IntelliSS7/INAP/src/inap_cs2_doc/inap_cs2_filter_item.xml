<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnChoice>

<className>FilterItem</className>
<asnTypeName>FilterItem</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSetChoice>
<name>SetChoiceEquality</name>
<signature>void SetChoiceEquality(AttributeValueAssertion* choice)</signature>
<choiceName>Equality</choiceName>
<asnChoiceName>equality</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceEquality</name>
<signature>void SetChoiceEquality(const AttributeValueAssertion&amp; choice)</signature>
<choiceName>Equality</choiceName>
<asnChoiceName>equality</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceEquality</name>
<signature>const AttributeValueAssertion&amp; GetChoiceEquality() const</signature>
<choiceName>Equality</choiceName>
<asnChoiceName>equality</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceEquality</name>
<signature>bool ChoiceEquality() const</signature>
<choiceName>Equality</choiceName>
<asnChoiceName>equality</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceSubstrings</name>
<signature>void SetChoiceSubstrings(Substrings* choice)</signature>
<choiceName>Substrings</choiceName>
<asnChoiceName>substrings</asnChoiceName>
<choiceTypeName>Substrings</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceSubstrings</name>
<signature>void SetChoiceSubstrings(const Substrings&amp; choice)</signature>
<choiceName>Substrings</choiceName>
<asnChoiceName>substrings</asnChoiceName>
<choiceTypeName>Substrings</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceSubstrings</name>
<signature>const Substrings&amp; GetChoiceSubstrings() const</signature>
<choiceName>Substrings</choiceName>
<asnChoiceName>substrings</asnChoiceName>
<choiceTypeName>Substrings</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceSubstrings</name>
<signature>bool ChoiceSubstrings() const</signature>
<choiceName>Substrings</choiceName>
<asnChoiceName>substrings</asnChoiceName>
<choiceTypeName>Substrings</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceGreaterOrEqual</name>
<signature>void SetChoiceGreaterOrEqual(AttributeValueAssertion* choice)</signature>
<choiceName>GreaterOrEqual</choiceName>
<asnChoiceName>greaterOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceGreaterOrEqual</name>
<signature>void SetChoiceGreaterOrEqual(const AttributeValueAssertion&amp; choice)</signature>
<choiceName>GreaterOrEqual</choiceName>
<asnChoiceName>greaterOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceGreaterOrEqual</name>
<signature>const AttributeValueAssertion&amp; GetChoiceGreaterOrEqual() const</signature>
<choiceName>GreaterOrEqual</choiceName>
<asnChoiceName>greaterOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceGreaterOrEqual</name>
<signature>bool ChoiceGreaterOrEqual() const</signature>
<choiceName>GreaterOrEqual</choiceName>
<asnChoiceName>greaterOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceLessOrEqual</name>
<signature>void SetChoiceLessOrEqual(AttributeValueAssertion* choice)</signature>
<choiceName>LessOrEqual</choiceName>
<asnChoiceName>lessOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceLessOrEqual</name>
<signature>void SetChoiceLessOrEqual(const AttributeValueAssertion&amp; choice)</signature>
<choiceName>LessOrEqual</choiceName>
<asnChoiceName>lessOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceLessOrEqual</name>
<signature>const AttributeValueAssertion&amp; GetChoiceLessOrEqual() const</signature>
<choiceName>LessOrEqual</choiceName>
<asnChoiceName>lessOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceLessOrEqual</name>
<signature>bool ChoiceLessOrEqual() const</signature>
<choiceName>LessOrEqual</choiceName>
<asnChoiceName>lessOrEqual</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoicePresent</name>
<signature>void SetChoicePresent(AttributeType* choice)</signature>
<choiceName>Present</choiceName>
<asnChoiceName>present</asnChoiceName>
<choiceTypeName>AttributeType</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoicePresent</name>
<signature>void SetChoicePresent(const AttributeType&amp; choice)</signature>
<choiceName>Present</choiceName>
<asnChoiceName>present</asnChoiceName>
<choiceTypeName>AttributeType</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoicePresent</name>
<signature>const AttributeType&amp; GetChoicePresent() const</signature>
<choiceName>Present</choiceName>
<asnChoiceName>present</asnChoiceName>
<choiceTypeName>AttributeType</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoicePresent</name>
<signature>bool ChoicePresent() const</signature>
<choiceName>Present</choiceName>
<asnChoiceName>present</asnChoiceName>
<choiceTypeName>AttributeType</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceApproximateMatch</name>
<signature>void SetChoiceApproximateMatch(AttributeValueAssertion* choice)</signature>
<choiceName>ApproximateMatch</choiceName>
<asnChoiceName>approximateMatch</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceApproximateMatch</name>
<signature>void SetChoiceApproximateMatch(const AttributeValueAssertion&amp; choice)</signature>
<choiceName>ApproximateMatch</choiceName>
<asnChoiceName>approximateMatch</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceApproximateMatch</name>
<signature>const AttributeValueAssertion&amp; GetChoiceApproximateMatch() const</signature>
<choiceName>ApproximateMatch</choiceName>
<asnChoiceName>approximateMatch</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceApproximateMatch</name>
<signature>bool ChoiceApproximateMatch() const</signature>
<choiceName>ApproximateMatch</choiceName>
<asnChoiceName>approximateMatch</asnChoiceName>
<choiceTypeName>AttributeValueAssertion</choiceTypeName>
</memberFunctionChoice>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- FilterItem information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 4]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>FilterItem ::= CHOICE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    equality [0] IMPLICIT AttributeValueAssertion -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    substrings [1] IMPLICIT Substrings -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    greaterOrEqual [2] IMPLICIT AttributeValueAssertion -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lessOrEqual [3] IMPLICIT AttributeValueAssertion -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    present [4] IMPLICIT AttributeType -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    approximateMatch [5] IMPLICIT AttributeValueAssertion -- [linked] --</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnChoice>

</asnType>

