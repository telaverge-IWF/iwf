<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>InitialDPArg</className>
<asnTypeName>InitialDPArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetServiceKey</name>
<signature>void SetServiceKey(ServiceKey* element)</signature>
<elmentName>ServiceKey</elmentName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceKey</name>
<signature>void SetServiceKey(const ServiceKey&amp; element)</signature>
<elementName>ServiceKey</elementName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceKey</name>
<signature>const ServiceKey&amp; GetServiceKey() const</signature>
<elementName>ServiceKey</elementName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceKey</name>
<signature>bool OptionServiceKey() const</signature>
<elementName>ServiceKey</elementName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetDialledDigits</name>
<signature>void SetDialledDigits(CalledPartyNumber* element)</signature>
<elmentName>DialledDigits</elmentName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDialledDigits</name>
<signature>void SetDialledDigits(const CalledPartyNumber&amp; element)</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDialledDigits</name>
<signature>const CalledPartyNumber&amp; GetDialledDigits() const</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDialledDigits</name>
<signature>bool OptionDialledDigits() const</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(CalledPartyNumber* element)</signature>
<elmentName>CalledPartyNumber</elmentName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(const CalledPartyNumber&amp; element)</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartyNumber</name>
<signature>const CalledPartyNumber&amp; GetCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartyNumber</name>
<signature>bool OptionCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(CallingPartyBusinessGroupID* element)</signature>
<elmentName>CallingPartyBusinessGroupID</elmentName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(const CallingPartyBusinessGroupID&amp; element)</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyBusinessGroupID</name>
<signature>const CallingPartyBusinessGroupID&amp; GetCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyBusinessGroupID</name>
<signature>bool OptionCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(CallingPartySubaddress* element)</signature>
<elmentName>CallingPartySubaddress</elmentName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(const CallingPartySubaddress&amp; element)</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartySubaddress</name>
<signature>const CallingPartySubaddress&amp; GetCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartySubaddress</name>
<signature>bool OptionCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCGEncountered</name>
<signature>void SetCGEncountered(CGEncountered* element)</signature>
<elmentName>CGEncountered</elmentName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCGEncountered</name>
<signature>void SetCGEncountered(const CGEncountered&amp; element)</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCGEncountered</name>
<signature>const CGEncountered&amp; GetCGEncountered() const</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCGEncountered</name>
<signature>bool OptionCGEncountered() const</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(IPSSPCapabilities* element)</signature>
<elmentName>IPSSPCapabilities</elmentName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(const IPSSPCapabilities&amp; element)</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIPSSPCapabilities</name>
<signature>const IPSSPCapabilities&amp; GetIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIPSSPCapabilities</name>
<signature>bool OptionIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIPAvailable</name>
<signature>void SetIPAvailable(IPAvailable* element)</signature>
<elmentName>IPAvailable</elmentName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIPAvailable</name>
<signature>void SetIPAvailable(const IPAvailable&amp; element)</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIPAvailable</name>
<signature>const IPAvailable&amp; GetIPAvailable() const</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIPAvailable</name>
<signature>bool OptionIPAvailable() const</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(LocationNumber* element)</signature>
<elmentName>LocationNumber</elmentName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(const LocationNumber&amp; element)</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationNumber</name>
<signature>const LocationNumber&amp; GetLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationNumber</name>
<signature>bool OptionLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMiscCallInfo</name>
<signature>void SetMiscCallInfo(MiscCallInfo* element)</signature>
<elmentName>MiscCallInfo</elmentName>
<asnElementName>miscCallInfo</asnElementName>
<elementTypeName>MiscCallInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMiscCallInfo</name>
<signature>void SetMiscCallInfo(const MiscCallInfo&amp; element)</signature>
<elementName>MiscCallInfo</elementName>
<asnElementName>miscCallInfo</asnElementName>
<elementTypeName>MiscCallInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMiscCallInfo</name>
<signature>const MiscCallInfo&amp; GetMiscCallInfo() const</signature>
<elementName>MiscCallInfo</elementName>
<asnElementName>miscCallInfo</asnElementName>
<elementTypeName>MiscCallInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMiscCallInfo</name>
<signature>bool OptionMiscCallInfo() const</signature>
<elementName>MiscCallInfo</elementName>
<asnElementName>miscCallInfo</asnElementName>
<elementTypeName>MiscCallInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceProfileIdentifier</name>
<signature>void SetServiceProfileIdentifier(ServiceProfileIdentifier* element)</signature>
<elmentName>ServiceProfileIdentifier</elmentName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceProfileIdentifier</name>
<signature>void SetServiceProfileIdentifier(const ServiceProfileIdentifier&amp; element)</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceProfileIdentifier</name>
<signature>const ServiceProfileIdentifier&amp; GetServiceProfileIdentifier() const</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceProfileIdentifier</name>
<signature>bool OptionServiceProfileIdentifier() const</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTerminalType</name>
<signature>void SetTerminalType(TerminalType* element)</signature>
<elmentName>TerminalType</elmentName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTerminalType</name>
<signature>void SetTerminalType(const TerminalType&amp; element)</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTerminalType</name>
<signature>const TerminalType&amp; GetTerminalType() const</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTerminalType</name>
<signature>bool OptionTerminalType() const</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTriggerType</name>
<signature>void SetTriggerType(TriggerType* element)</signature>
<elmentName>TriggerType</elmentName>
<asnElementName>triggerType</asnElementName>
<elementTypeName>TriggerType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTriggerType</name>
<signature>void SetTriggerType(const TriggerType&amp; element)</signature>
<elementName>TriggerType</elementName>
<asnElementName>triggerType</asnElementName>
<elementTypeName>TriggerType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTriggerType</name>
<signature>const TriggerType&amp; GetTriggerType() const</signature>
<elementName>TriggerType</elementName>
<asnElementName>triggerType</asnElementName>
<elementTypeName>TriggerType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTriggerType</name>
<signature>bool OptionTriggerType() const</signature>
<elementName>TriggerType</elementName>
<asnElementName>triggerType</asnElementName>
<elementTypeName>TriggerType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetHighLayerCompatibility</name>
<signature>void SetHighLayerCompatibility(HighLayerCompatibility* element)</signature>
<elmentName>HighLayerCompatibility</elmentName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetHighLayerCompatibility</name>
<signature>void SetHighLayerCompatibility(const HighLayerCompatibility&amp; element)</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetHighLayerCompatibility</name>
<signature>const HighLayerCompatibility&amp; GetHighLayerCompatibility() const</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionHighLayerCompatibility</name>
<signature>bool OptionHighLayerCompatibility() const</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)</signature>
<elmentName>ServiceInteractionIndicators</elmentName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(const ServiceInteractionIndicators&amp; element)</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicators</name>
<signature>const ServiceInteractionIndicators&amp; GetServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicators</name>
<signature>bool OptionServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalCallingPartyNumber</name>
<signature>void SetAdditionalCallingPartyNumber(AdditionalCallingPartyNumber* element)</signature>
<elmentName>AdditionalCallingPartyNumber</elmentName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalCallingPartyNumber</name>
<signature>void SetAdditionalCallingPartyNumber(const AdditionalCallingPartyNumber&amp; element)</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalCallingPartyNumber</name>
<signature>const AdditionalCallingPartyNumber&amp; GetAdditionalCallingPartyNumber() const</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalCallingPartyNumber</name>
<signature>bool OptionAdditionalCallingPartyNumber() const</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardCallIndicators</name>
<signature>void SetForwardCallIndicators(ForwardCallIndicators* element)</signature>
<elmentName>ForwardCallIndicators</elmentName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardCallIndicators</name>
<signature>void SetForwardCallIndicators(const ForwardCallIndicators&amp; element)</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardCallIndicators</name>
<signature>const ForwardCallIndicators&amp; GetForwardCallIndicators() const</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardCallIndicators</name>
<signature>bool OptionForwardCallIndicators() const</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(BearerCapability* element)</signature>
<elmentName>BearerCapability</elmentName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(const BearerCapability&amp; element)</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBearerCapability</name>
<signature>const BearerCapability&amp; GetBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBearerCapability</name>
<signature>bool OptionBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEventTypeBCSM</name>
<signature>void SetEventTypeBCSM(EventTypeBCSM* element)</signature>
<elmentName>EventTypeBCSM</elmentName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEventTypeBCSM</name>
<signature>void SetEventTypeBCSM(const EventTypeBCSM&amp; element)</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEventTypeBCSM</name>
<signature>const EventTypeBCSM&amp; GetEventTypeBCSM() const</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEventTypeBCSM</name>
<signature>bool OptionEventTypeBCSM() const</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(RedirectingPartyID* element)</signature>
<elmentName>RedirectingPartyID</elmentName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(const RedirectingPartyID&amp; element)</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectingPartyID</name>
<signature>const RedirectingPartyID&amp; GetRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectingPartyID</name>
<signature>bool OptionRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(RedirectionInformation* element)</signature>
<elmentName>RedirectionInformation</elmentName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(const RedirectionInformation&amp; element)</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectionInformation</name>
<signature>const RedirectionInformation&amp; GetRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectionInformation</name>
<signature>bool OptionRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCause</name>
<signature>void SetCause(Cause* element)</signature>
<elmentName>Cause</elmentName>
<asnElementName>cause</asnElementName>
<elementTypeName>Cause</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCause</name>
<signature>void SetCause(const Cause&amp; element)</signature>
<elementName>Cause</elementName>
<asnElementName>cause</asnElementName>
<elementTypeName>Cause</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCause</name>
<signature>const Cause&amp; GetCause() const</signature>
<elementName>Cause</elementName>
<asnElementName>cause</asnElementName>
<elementTypeName>Cause</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCause</name>
<signature>bool OptionCause() const</signature>
<elementName>Cause</elementName>
<asnElementName>cause</asnElementName>
<elementTypeName>Cause</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentType</name>
<signature>void SetComponentType(ComponentType* element)</signature>
<elmentName>ComponentType</elmentName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentType</name>
<signature>void SetComponentType(const ComponentType&amp; element)</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentType</name>
<signature>const ComponentType&amp; GetComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentType</name>
<signature>bool OptionComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(ComponentCorrelationID* element)</signature>
<elmentName>ComponentCorrelationID</elmentName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(const ComponentCorrelationID&amp; element)</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentCorrelationID</name>
<signature>const ComponentCorrelationID&amp; GetComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentCorrelationID</name>
<signature>bool OptionComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)</signature>
<elmentName>ISDNAccessRelatedInformation</elmentName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation&amp; element)</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetISDNAccessRelatedInformation</name>
<signature>const ISDNAccessRelatedInformation&amp; GetISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionISDNAccessRelatedInformation</name>
<signature>bool OptionISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetINServiceCompatibilityIndication</name>
<signature>void SetINServiceCompatibilityIndication(INServiceCompatibilityIndication* element)</signature>
<elmentName>INServiceCompatibilityIndication</elmentName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityIndication</name>
<signature>void SetINServiceCompatibilityIndication(const INServiceCompatibilityIndication&amp; element)</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityIndication</name>
<signature>const INServiceCompatibilityIndication&amp; GetINServiceCompatibilityIndication() const</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityIndication</name>
<signature>bool OptionINServiceCompatibilityIndication() const</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(GenericNumbers* element)</signature>
<elmentName>GenericNumbers</elmentName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(const GenericNumbers&amp; element)</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGenericNumbers</name>
<signature>const GenericNumbers&amp; GetGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGenericNumbers</name>
<signature>bool OptionGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(ForwardGVNS* element)</signature>
<elmentName>ForwardGVNS</elmentName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(const ForwardGVNS&amp; element)</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardGVNS</name>
<signature>const ForwardGVNS&amp; GetForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardGVNS</name>
<signature>bool OptionForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCreatedCallSegmentAssociation</name>
<signature>void SetCreatedCallSegmentAssociation(CSAID* element)</signature>
<elmentName>CreatedCallSegmentAssociation</elmentName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCreatedCallSegmentAssociation</name>
<signature>void SetCreatedCallSegmentAssociation(const CSAID&amp; element)</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCreatedCallSegmentAssociation</name>
<signature>const CSAID&amp; GetCreatedCallSegmentAssociation() const</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCreatedCallSegmentAssociation</name>
<signature>bool OptionCreatedCallSegmentAssociation() const</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUSIServiceIndicator</name>
<signature>void SetUSIServiceIndicator(USIServiceIndicator* element)</signature>
<elmentName>USIServiceIndicator</elmentName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUSIServiceIndicator</name>
<signature>void SetUSIServiceIndicator(const USIServiceIndicator&amp; element)</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUSIServiceIndicator</name>
<signature>const USIServiceIndicator&amp; GetUSIServiceIndicator() const</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUSIServiceIndicator</name>
<signature>bool OptionUSIServiceIndicator() const</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUSIInformation</name>
<signature>void SetUSIInformation(USIInformation* element)</signature>
<elmentName>USIInformation</elmentName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUSIInformation</name>
<signature>void SetUSIInformation(const USIInformation&amp; element)</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUSIInformation</name>
<signature>const USIInformation&amp; GetUSIInformation() const</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUSIInformation</name>
<signature>bool OptionUSIInformation() const</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- InitialDPArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>InitialDPArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    serviceKey [0] IMPLICIT ServiceKey -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    dialledDigits [1] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartyNumber [2] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [3] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyBusinessGroupID [4] IMPLICIT CallingPartyBusinessGroupID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [5] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartySubaddress [6] IMPLICIT CallingPartySubaddress -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cGEncountered [7] IMPLICIT CGEncountered -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iPSSPCapabilities [8] IMPLICIT IPSSPCapabilities -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iPAvailable [9] IMPLICIT IPAvailable -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationNumber [10] IMPLICIT LocationNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    miscCallInfo [11] IMPLICIT MiscCallInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [12] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceProfileIdentifier [13] IMPLICIT ServiceProfileIdentifier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    terminalType [14] IMPLICIT TerminalType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [15] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    triggerType [16] IMPLICIT TriggerType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    highLayerCompatibility [23] IMPLICIT HighLayerCompatibility -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicators [24] IMPLICIT ServiceInteractionIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalCallingPartyNumber [25] IMPLICIT AdditionalCallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardCallIndicators [26] IMPLICIT ForwardCallIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    bearerCapability [27] IMPLICIT BearerCapability -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    eventTypeBCSM [28] IMPLICIT EventTypeBCSM -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectingPartyID [29] IMPLICIT RedirectingPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectionInformation [30] IMPLICIT RedirectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cause [17] IMPLICIT Cause -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentType [18] IMPLICIT ComponentType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentCorrelationID [20] IMPLICIT ComponentCorrelationID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iSDNAccessRelatedInformation [21] IMPLICIT ISDNAccessRelatedInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityIndication [22] IMPLICIT INServiceCompatibilityIndication -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    genericNumbers [31] IMPLICIT GenericNumbers -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [32] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardGVNS [33] IMPLICIT ForwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    createdCallSegmentAssociation [34] IMPLICIT CSAID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uSIServiceIndicator [35] IMPLICIT USIServiceIndicator -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uSIInformation [36] IMPLICIT USIInformation -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

