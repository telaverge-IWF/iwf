<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>DpSpecificCommonParameters</className>
<asnTypeName>DpSpecificCommonParameters</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetServiceAddressInformation</name>
<signature>void SetServiceAddressInformation(ServiceAddressInformation* element)</signature>
<elmentName>ServiceAddressInformation</elmentName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceAddressInformation</name>
<signature>void SetServiceAddressInformation(const ServiceAddressInformation&amp; element)</signature>
<elementName>ServiceAddressInformation</elementName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceAddressInformation</name>
<signature>const ServiceAddressInformation&amp; GetServiceAddressInformation() const</signature>
<elementName>ServiceAddressInformation</elementName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(BearerCapability* element)</signature>
<elmentName>BearerCapability</elmentName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(const BearerCapability&amp; element)</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBearerCapability</name>
<signature>const BearerCapability&amp; GetBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBearerCapability</name>
<signature>bool OptionBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(CalledPartyNumber* element)</signature>
<elmentName>CalledPartyNumber</elmentName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(const CalledPartyNumber&amp; element)</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartyNumber</name>
<signature>const CalledPartyNumber&amp; GetCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartyNumber</name>
<signature>bool OptionCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(IPSSPCapabilities* element)</signature>
<elmentName>IPSSPCapabilities</elmentName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(const IPSSPCapabilities&amp; element)</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIPSSPCapabilities</name>
<signature>const IPSSPCapabilities&amp; GetIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIPSSPCapabilities</name>
<signature>bool OptionIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIPAvailable</name>
<signature>void SetIPAvailable(IPAvailable* element)</signature>
<elmentName>IPAvailable</elmentName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIPAvailable</name>
<signature>void SetIPAvailable(const IPAvailable&amp; element)</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIPAvailable</name>
<signature>const IPAvailable&amp; GetIPAvailable() const</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIPAvailable</name>
<signature>bool OptionIPAvailable() const</signature>
<elementName>IPAvailable</elementName>
<asnElementName>iPAvailable</asnElementName>
<elementTypeName>IPAvailable</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)</signature>
<elmentName>ISDNAccessRelatedInformation</elmentName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation&amp; element)</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetISDNAccessRelatedInformation</name>
<signature>const ISDNAccessRelatedInformation&amp; GetISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionISDNAccessRelatedInformation</name>
<signature>bool OptionISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCGEncountered</name>
<signature>void SetCGEncountered(CGEncountered* element)</signature>
<elmentName>CGEncountered</elmentName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCGEncountered</name>
<signature>void SetCGEncountered(const CGEncountered&amp; element)</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCGEncountered</name>
<signature>const CGEncountered&amp; GetCGEncountered() const</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCGEncountered</name>
<signature>bool OptionCGEncountered() const</signature>
<elementName>CGEncountered</elementName>
<asnElementName>cGEncountered</asnElementName>
<elementTypeName>CGEncountered</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(LocationNumber* element)</signature>
<elmentName>LocationNumber</elmentName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(const LocationNumber&amp; element)</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationNumber</name>
<signature>const LocationNumber&amp; GetLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationNumber</name>
<signature>bool OptionLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceProfileIdentifier</name>
<signature>void SetServiceProfileIdentifier(ServiceProfileIdentifier* element)</signature>
<elmentName>ServiceProfileIdentifier</elmentName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceProfileIdentifier</name>
<signature>void SetServiceProfileIdentifier(const ServiceProfileIdentifier&amp; element)</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceProfileIdentifier</name>
<signature>const ServiceProfileIdentifier&amp; GetServiceProfileIdentifier() const</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceProfileIdentifier</name>
<signature>bool OptionServiceProfileIdentifier() const</signature>
<elementName>ServiceProfileIdentifier</elementName>
<asnElementName>serviceProfileIdentifier</asnElementName>
<elementTypeName>ServiceProfileIdentifier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTerminalType</name>
<signature>void SetTerminalType(TerminalType* element)</signature>
<elmentName>TerminalType</elmentName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTerminalType</name>
<signature>void SetTerminalType(const TerminalType&amp; element)</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTerminalType</name>
<signature>const TerminalType&amp; GetTerminalType() const</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTerminalType</name>
<signature>bool OptionTerminalType() const</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(ChargeNumber* element)</signature>
<elmentName>ChargeNumber</elmentName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(const ChargeNumber&amp; element)</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargeNumber</name>
<signature>const ChargeNumber&amp; GetChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargeNumber</name>
<signature>bool OptionChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServingAreaID</name>
<signature>void SetServingAreaID(ServingAreaID* element)</signature>
<elmentName>ServingAreaID</elmentName>
<asnElementName>servingAreaID</asnElementName>
<elementTypeName>ServingAreaID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServingAreaID</name>
<signature>void SetServingAreaID(const ServingAreaID&amp; element)</signature>
<elementName>ServingAreaID</elementName>
<asnElementName>servingAreaID</asnElementName>
<elementTypeName>ServingAreaID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServingAreaID</name>
<signature>const ServingAreaID&amp; GetServingAreaID() const</signature>
<elementName>ServingAreaID</elementName>
<asnElementName>servingAreaID</asnElementName>
<elementTypeName>ServingAreaID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServingAreaID</name>
<signature>bool OptionServingAreaID() const</signature>
<elementName>ServingAreaID</elementName>
<asnElementName>servingAreaID</asnElementName>
<elementTypeName>ServingAreaID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)</signature>
<elmentName>ServiceInteractionIndicators</elmentName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(const ServiceInteractionIndicators&amp; element)</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicators</name>
<signature>const ServiceInteractionIndicators&amp; GetServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicators</name>
<signature>bool OptionServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetINServiceCompatibilityIndication</name>
<signature>void SetINServiceCompatibilityIndication(INServiceCompatibilityIndication* element)</signature>
<elmentName>INServiceCompatibilityIndication</elmentName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityIndication</name>
<signature>void SetINServiceCompatibilityIndication(const INServiceCompatibilityIndication&amp; element)</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityIndication</name>
<signature>const INServiceCompatibilityIndication&amp; GetINServiceCompatibilityIndication() const</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityIndication</name>
<signature>bool OptionINServiceCompatibilityIndication() const</signature>
<elementName>INServiceCompatibilityIndication</elementName>
<asnElementName>iNServiceCompatibilityIndication</asnElementName>
<elementTypeName>INServiceCompatibilityIndication</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUSIServiceIndicator</name>
<signature>void SetUSIServiceIndicator(USIServiceIndicator* element)</signature>
<elmentName>USIServiceIndicator</elmentName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUSIServiceIndicator</name>
<signature>void SetUSIServiceIndicator(const USIServiceIndicator&amp; element)</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUSIServiceIndicator</name>
<signature>const USIServiceIndicator&amp; GetUSIServiceIndicator() const</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUSIServiceIndicator</name>
<signature>bool OptionUSIServiceIndicator() const</signature>
<elementName>USIServiceIndicator</elementName>
<asnElementName>uSIServiceIndicator</asnElementName>
<elementTypeName>USIServiceIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUSIInformation</name>
<signature>void SetUSIInformation(USIInformation* element)</signature>
<elmentName>USIInformation</elmentName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUSIInformation</name>
<signature>void SetUSIInformation(const USIInformation&amp; element)</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUSIInformation</name>
<signature>const USIInformation&amp; GetUSIInformation() const</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUSIInformation</name>
<signature>bool OptionUSIInformation() const</signature>
<elementName>USIInformation</elementName>
<asnElementName>uSIInformation</asnElementName>
<elementTypeName>USIInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(ForwardGVNS* element)</signature>
<elmentName>ForwardGVNS</elmentName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(const ForwardGVNS&amp; element)</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardGVNS</name>
<signature>const ForwardGVNS&amp; GetForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardGVNS</name>
<signature>bool OptionForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCreatedCallSegmentAssociation</name>
<signature>void SetCreatedCallSegmentAssociation(CSAID* element)</signature>
<elmentName>CreatedCallSegmentAssociation</elmentName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCreatedCallSegmentAssociation</name>
<signature>void SetCreatedCallSegmentAssociation(const CSAID&amp; element)</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCreatedCallSegmentAssociation</name>
<signature>const CSAID&amp; GetCreatedCallSegmentAssociation() const</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCreatedCallSegmentAssociation</name>
<signature>bool OptionCreatedCallSegmentAssociation() const</signature>
<elementName>CreatedCallSegmentAssociation</elementName>
<asnElementName>createdCallSegmentAssociation</asnElementName>
<elementTypeName>CSAID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- DpSpecificCommonParameters information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 20]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>DpSpecificCommonParameters ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    serviceAddressInformation [0] IMPLICIT ServiceAddressInformation -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    bearerCapability [1] IMPLICIT BearerCapability -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartyNumber [2] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [3] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [4] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iPSSPCapabilities [5] IMPLICIT IPSSPCapabilities -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iPAvailable [6] IMPLICIT IPAvailable -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iSDNAccessRelatedInformation [7] IMPLICIT ISDNAccessRelatedInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cGEncountered [8] IMPLICIT CGEncountered -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationNumber [9] IMPLICIT LocationNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceProfileIdentifier [10] IMPLICIT ServiceProfileIdentifier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    terminalType [11] IMPLICIT TerminalType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [12] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargeNumber [13] IMPLICIT ChargeNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    servingAreaID [14] IMPLICIT ServingAreaID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicators [15] IMPLICIT ServiceInteractionIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityIndication [16] IMPLICIT INServiceCompatibilityIndication -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [17] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uSIServiceIndicator [18] IMPLICIT USIServiceIndicator -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uSIInformation [19] IMPLICIT USIInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardGVNS [20] IMPLICIT ForwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    createdCallSegmentAssociation [21] IMPLICIT CSAID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

