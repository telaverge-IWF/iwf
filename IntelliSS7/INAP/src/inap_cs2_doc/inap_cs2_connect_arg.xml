<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ConnectArg</className>
<asnTypeName>ConnectArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(DestinationRoutingAddress* element)</signature>
<elmentName>DestinationRoutingAddress</elmentName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(const DestinationRoutingAddress&amp; element)</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDestinationRoutingAddress</name>
<signature>const DestinationRoutingAddress&amp; GetDestinationRoutingAddress() const</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCorrelationID</name>
<signature>void SetCorrelationID(CorrelationID* element)</signature>
<elmentName>CorrelationID</elmentName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCorrelationID</name>
<signature>void SetCorrelationID(const CorrelationID&amp; element)</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCorrelationID</name>
<signature>const CorrelationID&amp; GetCorrelationID() const</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCorrelationID</name>
<signature>bool OptionCorrelationID() const</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCutAndPaste</name>
<signature>void SetCutAndPaste(CutAndPaste* element)</signature>
<elmentName>CutAndPaste</elmentName>
<asnElementName>cutAndPaste</asnElementName>
<elementTypeName>CutAndPaste</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCutAndPaste</name>
<signature>void SetCutAndPaste(const CutAndPaste&amp; element)</signature>
<elementName>CutAndPaste</elementName>
<asnElementName>cutAndPaste</asnElementName>
<elementTypeName>CutAndPaste</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCutAndPaste</name>
<signature>const CutAndPaste&amp; GetCutAndPaste() const</signature>
<elementName>CutAndPaste</elementName>
<asnElementName>cutAndPaste</asnElementName>
<elementTypeName>CutAndPaste</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCutAndPaste</name>
<signature>bool OptionCutAndPaste() const</signature>
<elementName>CutAndPaste</elementName>
<asnElementName>cutAndPaste</asnElementName>
<elementTypeName>CutAndPaste</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardingCondition</name>
<signature>void SetForwardingCondition(ForwardingCondition* element)</signature>
<elmentName>ForwardingCondition</elmentName>
<asnElementName>forwardingCondition</asnElementName>
<elementTypeName>ForwardingCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardingCondition</name>
<signature>void SetForwardingCondition(const ForwardingCondition&amp; element)</signature>
<elementName>ForwardingCondition</elementName>
<asnElementName>forwardingCondition</asnElementName>
<elementTypeName>ForwardingCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardingCondition</name>
<signature>const ForwardingCondition&amp; GetForwardingCondition() const</signature>
<elementName>ForwardingCondition</elementName>
<asnElementName>forwardingCondition</asnElementName>
<elementTypeName>ForwardingCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardingCondition</name>
<signature>bool OptionForwardingCondition() const</signature>
<elementName>ForwardingCondition</elementName>
<asnElementName>forwardingCondition</asnElementName>
<elementTypeName>ForwardingCondition</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)</signature>
<elmentName>ISDNAccessRelatedInformation</elmentName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetISDNAccessRelatedInformation</name>
<signature>void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation&amp; element)</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetISDNAccessRelatedInformation</name>
<signature>const ISDNAccessRelatedInformation&amp; GetISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionISDNAccessRelatedInformation</name>
<signature>bool OptionISDNAccessRelatedInformation() const</signature>
<elementName>ISDNAccessRelatedInformation</elementName>
<asnElementName>iSDNAccessRelatedInformation</asnElementName>
<elementTypeName>ISDNAccessRelatedInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRouteList</name>
<signature>void SetRouteList(RouteList* element)</signature>
<elmentName>RouteList</elmentName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRouteList</name>
<signature>void SetRouteList(const RouteList&amp; element)</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRouteList</name>
<signature>const RouteList&amp; GetRouteList() const</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRouteList</name>
<signature>bool OptionRouteList() const</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetScfID</name>
<signature>void SetScfID(ScfID* element)</signature>
<elmentName>ScfID</elmentName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetScfID</name>
<signature>void SetScfID(const ScfID&amp; element)</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetScfID</name>
<signature>const ScfID&amp; GetScfID() const</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionScfID</name>
<signature>bool OptionScfID() const</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(TravellingClassMark* element)</signature>
<elmentName>TravellingClassMark</elmentName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(const TravellingClassMark&amp; element)</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTravellingClassMark</name>
<signature>const TravellingClassMark&amp; GetTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTravellingClassMark</name>
<signature>bool OptionTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCarrier</name>
<signature>void SetCarrier(Carrier* element)</signature>
<elmentName>Carrier</elmentName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCarrier</name>
<signature>void SetCarrier(const Carrier&amp; element)</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCarrier</name>
<signature>const Carrier&amp; GetCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCarrier</name>
<signature>bool OptionCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)</signature>
<elmentName>ServiceInteractionIndicators</elmentName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicators</name>
<signature>void SetServiceInteractionIndicators(const ServiceInteractionIndicators&amp; element)</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicators</name>
<signature>const ServiceInteractionIndicators&amp; GetServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicators</name>
<signature>bool OptionServiceInteractionIndicators() const</signature>
<elementName>ServiceInteractionIndicators</elementName>
<asnElementName>serviceInteractionIndicators</asnElementName>
<elementTypeName>ServiceInteractionIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(RedirectingPartyID* element)</signature>
<elmentName>RedirectingPartyID</elmentName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(const RedirectingPartyID&amp; element)</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectingPartyID</name>
<signature>const RedirectingPartyID&amp; GetRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectingPartyID</name>
<signature>bool OptionRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(RedirectionInformation* element)</signature>
<elmentName>RedirectionInformation</elmentName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(const RedirectionInformation&amp; element)</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectionInformation</name>
<signature>const RedirectionInformation&amp; GetRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectionInformation</name>
<signature>bool OptionRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(DisplayInformation* element)</signature>
<elmentName>DisplayInformation</elmentName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDisplayInformation</name>
<signature>void SetDisplayInformation(const DisplayInformation&amp; element)</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDisplayInformation</name>
<signature>const DisplayInformation&amp; GetDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDisplayInformation</name>
<signature>bool OptionDisplayInformation() const</signature>
<elementName>DisplayInformation</elementName>
<asnElementName>displayInformation</asnElementName>
<elementTypeName>DisplayInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardCallIndicators</name>
<signature>void SetForwardCallIndicators(ForwardCallIndicators* element)</signature>
<elmentName>ForwardCallIndicators</elmentName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardCallIndicators</name>
<signature>void SetForwardCallIndicators(const ForwardCallIndicators&amp; element)</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardCallIndicators</name>
<signature>const ForwardCallIndicators&amp; GetForwardCallIndicators() const</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardCallIndicators</name>
<signature>bool OptionForwardCallIndicators() const</signature>
<elementName>ForwardCallIndicators</elementName>
<asnElementName>forwardCallIndicators</asnElementName>
<elementTypeName>ForwardCallIndicators</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(GenericNumbers* element)</signature>
<elmentName>GenericNumbers</elmentName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(const GenericNumbers&amp; element)</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGenericNumbers</name>
<signature>const GenericNumbers&amp; GetGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGenericNumbers</name>
<signature>bool OptionGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(INServiceCompatibilityResponse* element)</signature>
<elmentName>INServiceCompatibilityResponse</elmentName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetINServiceCompatibilityResponse</name>
<signature>void SetINServiceCompatibilityResponse(const INServiceCompatibilityResponse&amp; element)</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetINServiceCompatibilityResponse</name>
<signature>const INServiceCompatibilityResponse&amp; GetINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionINServiceCompatibilityResponse</name>
<signature>bool OptionINServiceCompatibilityResponse() const</signature>
<elementName>INServiceCompatibilityResponse</elementName>
<asnElementName>iNServiceCompatibilityResponse</asnElementName>
<elementTypeName>INServiceCompatibilityResponse</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(ForwardGVNS* element)</signature>
<elmentName>ForwardGVNS</elmentName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardGVNS</name>
<signature>void SetForwardGVNS(const ForwardGVNS&amp; element)</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardGVNS</name>
<signature>const ForwardGVNS&amp; GetForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardGVNS</name>
<signature>bool OptionForwardGVNS() const</signature>
<elementName>ForwardGVNS</elementName>
<asnElementName>forwardGVNS</asnElementName>
<elementTypeName>ForwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(BackwardGVNS* element)</signature>
<elmentName>BackwardGVNS</elmentName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBackwardGVNS</name>
<signature>void SetBackwardGVNS(const BackwardGVNS&amp; element)</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBackwardGVNS</name>
<signature>const BackwardGVNS&amp; GetBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBackwardGVNS</name>
<signature>bool OptionBackwardGVNS() const</signature>
<elementName>BackwardGVNS</elementName>
<asnElementName>backwardGVNS</asnElementName>
<elementTypeName>BackwardGVNS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(ChargeNumber* element)</signature>
<elmentName>ChargeNumber</elmentName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(const ChargeNumber&amp; element)</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargeNumber</name>
<signature>const ChargeNumber&amp; GetChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargeNumber</name>
<signature>bool OptionChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(CallSegmentID* element)</signature>
<elmentName>CallSegmentID</elmentName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(const CallSegmentID&amp; element)</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallSegmentID</name>
<signature>const CallSegmentID&amp; GetCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallSegmentID</name>
<signature>bool OptionCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLegToBeCreated</name>
<signature>void SetLegToBeCreated(LegID* element)</signature>
<elmentName>LegToBeCreated</elmentName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLegToBeCreated</name>
<signature>void SetLegToBeCreated(const LegID&amp; element)</signature>
<elementName>LegToBeCreated</elementName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLegToBeCreated</name>
<signature>const LegID&amp; GetLegToBeCreated() const</signature>
<elementName>LegToBeCreated</elementName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLegToBeCreated</name>
<signature>bool OptionLegToBeCreated() const</signature>
<elementName>LegToBeCreated</elementName>
<asnElementName>legToBeCreated</asnElementName>
<elementTypeName>LegID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ConnectArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ConnectArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    destinationRoutingAddress [0] IMPLICIT DestinationRoutingAddress -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alertingPattern [1] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    correlationID [2] IMPLICIT CorrelationID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cutAndPaste [3] IMPLICIT CutAndPaste -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardingCondition [4] IMPLICIT ForwardingCondition -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iSDNAccessRelatedInformation [5] IMPLICIT ISDNAccessRelatedInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [6] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    routeList [7] IMPLICIT RouteList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    scfID [8] IMPLICIT ScfID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    travellingClassMark [9] IMPLICIT TravellingClassMark -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [10] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    carrier [11] IMPLICIT Carrier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicators [26] IMPLICIT ServiceInteractionIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [27] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [28] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectingPartyID [29] IMPLICIT RedirectingPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectionInformation [30] IMPLICIT RedirectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    displayInformation [12] IMPLICIT DisplayInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardCallIndicators [13] IMPLICIT ForwardCallIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    genericNumbers [14] IMPLICIT GenericNumbers -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [15] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iNServiceCompatibilityResponse [16] IMPLICIT INServiceCompatibilityResponse -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    forwardGVNS [17] IMPLICIT ForwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    backwardGVNS [18] IMPLICIT BackwardGVNS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargeNumber [19] IMPLICIT ChargeNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callSegmentID [20] IMPLICIT CallSegmentID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    legToBeCreated [21] IMPLICIT LegID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

