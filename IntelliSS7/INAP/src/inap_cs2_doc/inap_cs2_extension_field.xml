<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ExtensionField</className>
<asnTypeName>ExtensionField</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetType</name>
<signature>void SetType(Type* element)</signature>
<elmentName>Type</elmentName>
<asnElementName>type</asnElementName>
<elementTypeName>Type</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetType</name>
<signature>void SetType(const Type&amp; element)</signature>
<elementName>Type</elementName>
<asnElementName>type</asnElementName>
<elementTypeName>Type</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetType</name>
<signature>const Type&amp; GetType() const</signature>
<elementName>Type</elementName>
<asnElementName>type</asnElementName>
<elementTypeName>Type</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCriticality</name>
<signature>void SetCriticality(Criticality* element)</signature>
<elmentName>Criticality</elmentName>
<asnElementName>criticality</asnElementName>
<elementTypeName>Criticality</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCriticality</name>
<signature>void SetCriticality(const Criticality&amp; element)</signature>
<elementName>Criticality</elementName>
<asnElementName>criticality</asnElementName>
<elementTypeName>Criticality</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCriticality</name>
<signature>const Criticality&amp; GetCriticality() const</signature>
<elementName>Criticality</elementName>
<asnElementName>criticality</asnElementName>
<elementTypeName>Criticality</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetValue</name>
<signature>void SetValue(Value* element)</signature>
<elmentName>Value</elmentName>
<asnElementName>value</asnElementName>
<elementTypeName>Value</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetValue</name>
<signature>void SetValue(const Value&amp; element)</signature>
<elementName>Value</elementName>
<asnElementName>value</asnElementName>
<elementTypeName>Value</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetValue</name>
<signature>const Value&amp; GetValue() const</signature>
<elementName>Value</elementName>
<asnElementName>value</asnElementName>
<elementTypeName>Value</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ExtensionField information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 70]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ExtensionField ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    type INTEGER,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    criticality ENUMERATED</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        ignore(0),</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>        abort(1)</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    } DEFAULT ignore -- [enum value] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    value [1] IMPLICIT ANY DEFINED BY type</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

