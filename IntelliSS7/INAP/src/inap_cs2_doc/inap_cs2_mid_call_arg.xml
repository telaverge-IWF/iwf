<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>MidCallArg</className>
<asnTypeName>MidCallArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDpSpecificCommonParameters</name>
<signature>void SetDpSpecificCommonParameters(DpSpecificCommonParameters* element)</signature>
<elmentName>DpSpecificCommonParameters</elmentName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDpSpecificCommonParameters</name>
<signature>void SetDpSpecificCommonParameters(const DpSpecificCommonParameters&amp; element)</signature>
<elementName>DpSpecificCommonParameters</elementName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDpSpecificCommonParameters</name>
<signature>const DpSpecificCommonParameters&amp; GetDpSpecificCommonParameters() const</signature>
<elementName>DpSpecificCommonParameters</elementName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCalledPartyBusinessGroupID</name>
<signature>void SetCalledPartyBusinessGroupID(CalledPartyBusinessGroupID* element)</signature>
<elmentName>CalledPartyBusinessGroupID</elmentName>
<asnElementName>calledPartyBusinessGroupID</asnElementName>
<elementTypeName>CalledPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartyBusinessGroupID</name>
<signature>void SetCalledPartyBusinessGroupID(const CalledPartyBusinessGroupID&amp; element)</signature>
<elementName>CalledPartyBusinessGroupID</elementName>
<asnElementName>calledPartyBusinessGroupID</asnElementName>
<elementTypeName>CalledPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartyBusinessGroupID</name>
<signature>const CalledPartyBusinessGroupID&amp; GetCalledPartyBusinessGroupID() const</signature>
<elementName>CalledPartyBusinessGroupID</elementName>
<asnElementName>calledPartyBusinessGroupID</asnElementName>
<elementTypeName>CalledPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartyBusinessGroupID</name>
<signature>bool OptionCalledPartyBusinessGroupID() const</signature>
<elementName>CalledPartyBusinessGroupID</elementName>
<asnElementName>calledPartyBusinessGroupID</asnElementName>
<elementTypeName>CalledPartyBusinessGroupID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCalledPartySubaddress</name>
<signature>void SetCalledPartySubaddress(CalledPartySubaddress* element)</signature>
<elmentName>CalledPartySubaddress</elmentName>
<asnElementName>calledPartySubaddress</asnElementName>
<elementTypeName>CalledPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartySubaddress</name>
<signature>void SetCalledPartySubaddress(const CalledPartySubaddress&amp; element)</signature>
<elementName>CalledPartySubaddress</elementName>
<asnElementName>calledPartySubaddress</asnElementName>
<elementTypeName>CalledPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartySubaddress</name>
<signature>const CalledPartySubaddress&amp; GetCalledPartySubaddress() const</signature>
<elementName>CalledPartySubaddress</elementName>
<asnElementName>calledPartySubaddress</asnElementName>
<elementTypeName>CalledPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartySubaddress</name>
<signature>bool OptionCalledPartySubaddress() const</signature>
<elementName>CalledPartySubaddress</elementName>
<asnElementName>calledPartySubaddress</asnElementName>
<elementTypeName>CalledPartySubaddress</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(CallingPartyBusinessGroupID* element)</signature>
<elmentName>CallingPartyBusinessGroupID</elmentName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(const CallingPartyBusinessGroupID&amp; element)</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyBusinessGroupID</name>
<signature>const CallingPartyBusinessGroupID&amp; GetCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyBusinessGroupID</name>
<signature>bool OptionCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(CallingPartySubaddress* element)</signature>
<elmentName>CallingPartySubaddress</elmentName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(const CallingPartySubaddress&amp; element)</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartySubaddress</name>
<signature>const CallingPartySubaddress&amp; GetCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartySubaddress</name>
<signature>bool OptionCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetFeatureRequestIndicator</name>
<signature>void SetFeatureRequestIndicator(FeatureRequestIndicator* element)</signature>
<elmentName>FeatureRequestIndicator</elmentName>
<asnElementName>featureRequestIndicator</asnElementName>
<elementTypeName>FeatureRequestIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFeatureRequestIndicator</name>
<signature>void SetFeatureRequestIndicator(const FeatureRequestIndicator&amp; element)</signature>
<elementName>FeatureRequestIndicator</elementName>
<asnElementName>featureRequestIndicator</asnElementName>
<elementTypeName>FeatureRequestIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFeatureRequestIndicator</name>
<signature>const FeatureRequestIndicator&amp; GetFeatureRequestIndicator() const</signature>
<elementName>FeatureRequestIndicator</elementName>
<asnElementName>featureRequestIndicator</asnElementName>
<elementTypeName>FeatureRequestIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionFeatureRequestIndicator</name>
<signature>bool OptionFeatureRequestIndicator() const</signature>
<elementName>FeatureRequestIndicator</elementName>
<asnElementName>featureRequestIndicator</asnElementName>
<elementTypeName>FeatureRequestIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCarrier</name>
<signature>void SetCarrier(Carrier* element)</signature>
<elmentName>Carrier</elmentName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCarrier</name>
<signature>void SetCarrier(const Carrier&amp; element)</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCarrier</name>
<signature>const Carrier&amp; GetCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCarrier</name>
<signature>bool OptionCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentType</name>
<signature>void SetComponentType(ComponentType* element)</signature>
<elmentName>ComponentType</elmentName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentType</name>
<signature>void SetComponentType(const ComponentType&amp; element)</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentType</name>
<signature>const ComponentType&amp; GetComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentType</name>
<signature>bool OptionComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(ComponentCorrelationID* element)</signature>
<elmentName>ComponentCorrelationID</elmentName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(const ComponentCorrelationID&amp; element)</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentCorrelationID</name>
<signature>const ComponentCorrelationID&amp; GetComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentCorrelationID</name>
<signature>bool OptionComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- MidCallArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>MidCallArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    dpSpecificCommonParameters [0] IMPLICIT DpSpecificCommonParameters -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartyBusinessGroupID [1] IMPLICIT CalledPartyBusinessGroupID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartySubaddress [2] IMPLICIT CalledPartySubaddress -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyBusinessGroupID [3] IMPLICIT CallingPartyBusinessGroupID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartySubaddress [4] IMPLICIT CallingPartySubaddress -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    featureRequestIndicator [5] IMPLICIT FeatureRequestIndicator -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [6] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    carrier [7] IMPLICIT Carrier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentType [8] IMPLICIT ComponentType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentCorrelationID [10] IMPLICIT ComponentCorrelationID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

