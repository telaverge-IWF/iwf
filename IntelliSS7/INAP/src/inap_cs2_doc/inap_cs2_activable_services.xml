<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnBitString>

<className>ActivableServices</className>
<asnTypeName>ActivableServices</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetIncomingCallBarring</name>
<signature>void SetIncomingCallBarring()</signature>
<bitName>IncomingCallBarring</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetIncomingCallBarring</name>
<signature>void ResetIncomingCallBarring()</signature>
<bitName>IncomingCallBarring</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsIncomingCallBarringSet</name>
<signature>bool IsIncomingCallBarringSet() const</signature>
<bitName>IncomingCallBarring</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsIncomingCallBarringDefined</name>
<signature>bool IsIncomingCallBarringDefined() const</signature>
<bitName>IncomingCallBarring</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetOutgoingCallBarring</name>
<signature>void SetOutgoingCallBarring()</signature>
<bitName>OutgoingCallBarring</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetOutgoingCallBarring</name>
<signature>void ResetOutgoingCallBarring()</signature>
<bitName>OutgoingCallBarring</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsOutgoingCallBarringSet</name>
<signature>bool IsOutgoingCallBarringSet() const</signature>
<bitName>OutgoingCallBarring</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsOutgoingCallBarringDefined</name>
<signature>bool IsOutgoingCallBarringDefined() const</signature>
<bitName>OutgoingCallBarring</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallingPartingDependentRouting</name>
<signature>void SetCallingPartingDependentRouting()</signature>
<bitName>CallingPartingDependentRouting</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallingPartingDependentRouting</name>
<signature>void ResetCallingPartingDependentRouting()</signature>
<bitName>CallingPartingDependentRouting</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallingPartingDependentRoutingSet</name>
<signature>bool IsCallingPartingDependentRoutingSet() const</signature>
<bitName>CallingPartingDependentRouting</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallingPartingDependentRoutingDefined</name>
<signature>bool IsCallingPartingDependentRoutingDefined() const</signature>
<bitName>CallingPartingDependentRouting</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetTimeDependentRouting</name>
<signature>void SetTimeDependentRouting()</signature>
<bitName>TimeDependentRouting</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetTimeDependentRouting</name>
<signature>void ResetTimeDependentRouting()</signature>
<bitName>TimeDependentRouting</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsTimeDependentRoutingSet</name>
<signature>bool IsTimeDependentRoutingSet() const</signature>
<bitName>TimeDependentRouting</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsTimeDependentRoutingDefined</name>
<signature>bool IsTimeDependentRoutingDefined() const</signature>
<bitName>TimeDependentRouting</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetAdviceOfChargeDuringCall</name>
<signature>void SetAdviceOfChargeDuringCall()</signature>
<bitName>AdviceOfChargeDuringCall</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetAdviceOfChargeDuringCall</name>
<signature>void ResetAdviceOfChargeDuringCall()</signature>
<bitName>AdviceOfChargeDuringCall</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsAdviceOfChargeDuringCallSet</name>
<signature>bool IsAdviceOfChargeDuringCallSet() const</signature>
<bitName>AdviceOfChargeDuringCall</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsAdviceOfChargeDuringCallDefined</name>
<signature>bool IsAdviceOfChargeDuringCallDefined() const</signature>
<bitName>AdviceOfChargeDuringCall</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetAdviceOfChargeAtEnd</name>
<signature>void SetAdviceOfChargeAtEnd()</signature>
<bitName>AdviceOfChargeAtEnd</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetAdviceOfChargeAtEnd</name>
<signature>void ResetAdviceOfChargeAtEnd()</signature>
<bitName>AdviceOfChargeAtEnd</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsAdviceOfChargeAtEndSet</name>
<signature>bool IsAdviceOfChargeAtEndSet() const</signature>
<bitName>AdviceOfChargeAtEnd</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsAdviceOfChargeAtEndDefined</name>
<signature>bool IsAdviceOfChargeAtEndDefined() const</signature>
<bitName>AdviceOfChargeAtEnd</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetAdviceOfChargeOnStart</name>
<signature>void SetAdviceOfChargeOnStart()</signature>
<bitName>AdviceOfChargeOnStart</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetAdviceOfChargeOnStart</name>
<signature>void ResetAdviceOfChargeOnStart()</signature>
<bitName>AdviceOfChargeOnStart</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsAdviceOfChargeOnStartSet</name>
<signature>bool IsAdviceOfChargeOnStartSet() const</signature>
<bitName>AdviceOfChargeOnStart</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsAdviceOfChargeOnStartDefined</name>
<signature>bool IsAdviceOfChargeOnStartDefined() const</signature>
<bitName>AdviceOfChargeOnStart</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetReverseCharging</name>
<signature>void SetReverseCharging()</signature>
<bitName>ReverseCharging</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetReverseCharging</name>
<signature>void ResetReverseCharging()</signature>
<bitName>ReverseCharging</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsReverseChargingSet</name>
<signature>bool IsReverseChargingSet() const</signature>
<bitName>ReverseCharging</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsReverseChargingDefined</name>
<signature>bool IsReverseChargingDefined() const</signature>
<bitName>ReverseCharging</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallForwardingOnNotReachable</name>
<signature>void SetCallForwardingOnNotReachable()</signature>
<bitName>CallForwardingOnNotReachable</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallForwardingOnNotReachable</name>
<signature>void ResetCallForwardingOnNotReachable()</signature>
<bitName>CallForwardingOnNotReachable</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallForwardingOnNotReachableSet</name>
<signature>bool IsCallForwardingOnNotReachableSet() const</signature>
<bitName>CallForwardingOnNotReachable</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallForwardingOnNotReachableDefined</name>
<signature>bool IsCallForwardingOnNotReachableDefined() const</signature>
<bitName>CallForwardingOnNotReachable</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallForwardingOnBusy</name>
<signature>void SetCallForwardingOnBusy()</signature>
<bitName>CallForwardingOnBusy</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallForwardingOnBusy</name>
<signature>void ResetCallForwardingOnBusy()</signature>
<bitName>CallForwardingOnBusy</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallForwardingOnBusySet</name>
<signature>bool IsCallForwardingOnBusySet() const</signature>
<bitName>CallForwardingOnBusy</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallForwardingOnBusyDefined</name>
<signature>bool IsCallForwardingOnBusyDefined() const</signature>
<bitName>CallForwardingOnBusy</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallForwardingUnconditional</name>
<signature>void SetCallForwardingUnconditional()</signature>
<bitName>CallForwardingUnconditional</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallForwardingUnconditional</name>
<signature>void ResetCallForwardingUnconditional()</signature>
<bitName>CallForwardingUnconditional</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallForwardingUnconditionalSet</name>
<signature>bool IsCallForwardingUnconditionalSet() const</signature>
<bitName>CallForwardingUnconditional</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallForwardingUnconditionalDefined</name>
<signature>bool IsCallForwardingUnconditionalDefined() const</signature>
<bitName>CallForwardingUnconditional</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallForwardingOnNoReply</name>
<signature>void SetCallForwardingOnNoReply()</signature>
<bitName>CallForwardingOnNoReply</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallForwardingOnNoReply</name>
<signature>void ResetCallForwardingOnNoReply()</signature>
<bitName>CallForwardingOnNoReply</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallForwardingOnNoReplySet</name>
<signature>bool IsCallForwardingOnNoReplySet() const</signature>
<bitName>CallForwardingOnNoReply</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallForwardingOnNoReplyDefined</name>
<signature>bool IsCallForwardingOnNoReplyDefined() const</signature>
<bitName>CallForwardingOnNoReply</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetConnectedLineIdentificationRestriction</name>
<signature>void SetConnectedLineIdentificationRestriction()</signature>
<bitName>ConnectedLineIdentificationRestriction</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetConnectedLineIdentificationRestriction</name>
<signature>void ResetConnectedLineIdentificationRestriction()</signature>
<bitName>ConnectedLineIdentificationRestriction</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsConnectedLineIdentificationRestrictionSet</name>
<signature>bool IsConnectedLineIdentificationRestrictionSet() const</signature>
<bitName>ConnectedLineIdentificationRestriction</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsConnectedLineIdentificationRestrictionDefined</name>
<signature>bool IsConnectedLineIdentificationRestrictionDefined() const</signature>
<bitName>ConnectedLineIdentificationRestriction</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetConnectedLineIdentificationPresentation</name>
<signature>void SetConnectedLineIdentificationPresentation()</signature>
<bitName>ConnectedLineIdentificationPresentation</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetConnectedLineIdentificationPresentation</name>
<signature>void ResetConnectedLineIdentificationPresentation()</signature>
<bitName>ConnectedLineIdentificationPresentation</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsConnectedLineIdentificationPresentationSet</name>
<signature>bool IsConnectedLineIdentificationPresentationSet() const</signature>
<bitName>ConnectedLineIdentificationPresentation</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsConnectedLineIdentificationPresentationDefined</name>
<signature>bool IsConnectedLineIdentificationPresentationDefined() const</signature>
<bitName>ConnectedLineIdentificationPresentation</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallingLineIdentificationRestriction</name>
<signature>void SetCallingLineIdentificationRestriction()</signature>
<bitName>CallingLineIdentificationRestriction</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallingLineIdentificationRestriction</name>
<signature>void ResetCallingLineIdentificationRestriction()</signature>
<bitName>CallingLineIdentificationRestriction</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallingLineIdentificationRestrictionSet</name>
<signature>bool IsCallingLineIdentificationRestrictionSet() const</signature>
<bitName>CallingLineIdentificationRestriction</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallingLineIdentificationRestrictionDefined</name>
<signature>bool IsCallingLineIdentificationRestrictionDefined() const</signature>
<bitName>CallingLineIdentificationRestriction</bitName>
</memberFunctionIsDefined>

<memberFunctionSet>
<name>SetCallingLineIdentificationPresentation</name>
<signature>void SetCallingLineIdentificationPresentation()</signature>
<bitName>CallingLineIdentificationPresentation</bitName>
</memberFunctionSet>

<memberFunctionReset>
<name>ResetCallingLineIdentificationPresentation</name>
<signature>void ResetCallingLineIdentificationPresentation()</signature>
<bitName>CallingLineIdentificationPresentation</bitName>
</memberFunctionReset>

<memberFunctionIsSet>
<name>IsCallingLineIdentificationPresentationSet</name>
<signature>bool IsCallingLineIdentificationPresentationSet() const</signature>
<bitName>CallingLineIdentificationPresentation</bitName>
</memberFunctionIsSet>

<memberFunctionIsDefined>
<name>IsCallingLineIdentificationPresentationDefined</name>
<signature>bool IsCallingLineIdentificationPresentationDefined() const</signature>
<bitName>CallingLineIdentificationPresentation</bitName>
</memberFunctionIsDefined>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ActivableServices information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ActivableServices ::= BIT STRING</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    incomingCallBarring(16),</text>
<shift></shift>
</line>
<line>
<text>    outgoingCallBarring(15),</text>
<shift></shift>
</line>
<line>
<text>    callingPartingDependentRouting(14),</text>
<shift></shift>
</line>
<line>
<text>    timeDependentRouting(13),</text>
<shift></shift>
</line>
<line>
<text>    adviceOfChargeDuringCall(12),</text>
<shift></shift>
</line>
<line>
<text>    adviceOfChargeAtEnd(11),</text>
<shift></shift>
</line>
<line>
<text>    adviceOfChargeOnStart(10),</text>
<shift></shift>
</line>
<line>
<text>    reverseCharging(9),</text>
<shift></shift>
</line>
<line>
<text>    callForwardingOnNotReachable(8),</text>
<shift></shift>
</line>
<line>
<text>    callForwardingOnBusy(7),</text>
<shift></shift>
</line>
<line>
<text>    callForwardingUnconditional(6),</text>
<shift></shift>
</line>
<line>
<text>    callForwardingOnNoReply(5),</text>
<shift></shift>
</line>
<line>
<text>    connectedLineIdentificationRestriction(4),</text>
<shift></shift>
</line>
<line>
<text>    connectedLineIdentificationPresentation(3),</text>
<shift></shift>
</line>
<line>
<text>    callingLineIdentificationRestriction(2),</text>
<shift></shift>
</line>
<line>
<text>    callingLineIdentificationPresentation(1)</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnBitString>

</asnType>

