<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>AnalysedInformationArg</className>
<asnTypeName>AnalysedInformationArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDpSpecificCommonParameters</name>
<signature>void SetDpSpecificCommonParameters(DpSpecificCommonParameters* element)</signature>
<elmentName>DpSpecificCommonParameters</elmentName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDpSpecificCommonParameters</name>
<signature>void SetDpSpecificCommonParameters(const DpSpecificCommonParameters&amp; element)</signature>
<elementName>DpSpecificCommonParameters</elementName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDpSpecificCommonParameters</name>
<signature>const DpSpecificCommonParameters&amp; GetDpSpecificCommonParameters() const</signature>
<elementName>DpSpecificCommonParameters</elementName>
<asnElementName>dpSpecificCommonParameters</asnElementName>
<elementTypeName>DpSpecificCommonParameters</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetDialledDigits</name>
<signature>void SetDialledDigits(CalledPartyNumber* element)</signature>
<elmentName>DialledDigits</elmentName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDialledDigits</name>
<signature>void SetDialledDigits(const CalledPartyNumber&amp; element)</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDialledDigits</name>
<signature>const CalledPartyNumber&amp; GetDialledDigits() const</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDialledDigits</name>
<signature>bool OptionDialledDigits() const</signature>
<elementName>DialledDigits</elementName>
<asnElementName>dialledDigits</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(CallingPartyBusinessGroupID* element)</signature>
<elmentName>CallingPartyBusinessGroupID</elmentName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyBusinessGroupID</name>
<signature>void SetCallingPartyBusinessGroupID(const CallingPartyBusinessGroupID&amp; element)</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyBusinessGroupID</name>
<signature>const CallingPartyBusinessGroupID&amp; GetCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyBusinessGroupID</name>
<signature>bool OptionCallingPartyBusinessGroupID() const</signature>
<elementName>CallingPartyBusinessGroupID</elementName>
<asnElementName>callingPartyBusinessGroupID</asnElementName>
<elementTypeName>CallingPartyBusinessGroupID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(CallingPartySubaddress* element)</signature>
<elmentName>CallingPartySubaddress</elmentName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartySubaddress</name>
<signature>void SetCallingPartySubaddress(const CallingPartySubaddress&amp; element)</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartySubaddress</name>
<signature>const CallingPartySubaddress&amp; GetCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartySubaddress</name>
<signature>bool OptionCallingPartySubaddress() const</signature>
<elementName>CallingPartySubaddress</elementName>
<asnElementName>callingPartySubaddress</asnElementName>
<elementTypeName>CallingPartySubaddress</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingFacilityGroup</name>
<signature>void SetCallingFacilityGroup(FacilityGroup* element)</signature>
<elmentName>CallingFacilityGroup</elmentName>
<asnElementName>callingFacilityGroup</asnElementName>
<elementTypeName>FacilityGroup</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingFacilityGroup</name>
<signature>void SetCallingFacilityGroup(const FacilityGroup&amp; element)</signature>
<elementName>CallingFacilityGroup</elementName>
<asnElementName>callingFacilityGroup</asnElementName>
<elementTypeName>FacilityGroup</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingFacilityGroup</name>
<signature>const FacilityGroup&amp; GetCallingFacilityGroup() const</signature>
<elementName>CallingFacilityGroup</elementName>
<asnElementName>callingFacilityGroup</asnElementName>
<elementTypeName>FacilityGroup</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingFacilityGroup</name>
<signature>bool OptionCallingFacilityGroup() const</signature>
<elementName>CallingFacilityGroup</elementName>
<asnElementName>callingFacilityGroup</asnElementName>
<elementTypeName>FacilityGroup</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingFacilityGroupMember</name>
<signature>void SetCallingFacilityGroupMember(FacilityGroupMember* element)</signature>
<elmentName>CallingFacilityGroupMember</elmentName>
<asnElementName>callingFacilityGroupMember</asnElementName>
<elementTypeName>FacilityGroupMember</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingFacilityGroupMember</name>
<signature>void SetCallingFacilityGroupMember(const FacilityGroupMember&amp; element)</signature>
<elementName>CallingFacilityGroupMember</elementName>
<asnElementName>callingFacilityGroupMember</asnElementName>
<elementTypeName>FacilityGroupMember</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingFacilityGroupMember</name>
<signature>const FacilityGroupMember&amp; GetCallingFacilityGroupMember() const</signature>
<elementName>CallingFacilityGroupMember</elementName>
<asnElementName>callingFacilityGroupMember</asnElementName>
<elementTypeName>FacilityGroupMember</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingFacilityGroupMember</name>
<signature>bool OptionCallingFacilityGroupMember() const</signature>
<elementName>CallingFacilityGroupMember</elementName>
<asnElementName>callingFacilityGroupMember</asnElementName>
<elementTypeName>FacilityGroupMember</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPrefix</name>
<signature>void SetPrefix(Digits* element)</signature>
<elmentName>Prefix</elmentName>
<asnElementName>prefix</asnElementName>
<elementTypeName>Digits</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPrefix</name>
<signature>void SetPrefix(const Digits&amp; element)</signature>
<elementName>Prefix</elementName>
<asnElementName>prefix</asnElementName>
<elementTypeName>Digits</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPrefix</name>
<signature>const Digits&amp; GetPrefix() const</signature>
<elementName>Prefix</elementName>
<asnElementName>prefix</asnElementName>
<elementTypeName>Digits</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPrefix</name>
<signature>bool OptionPrefix() const</signature>
<elementName>Prefix</elementName>
<asnElementName>prefix</asnElementName>
<elementTypeName>Digits</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(RedirectingPartyID* element)</signature>
<elmentName>RedirectingPartyID</elmentName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(const RedirectingPartyID&amp; element)</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectingPartyID</name>
<signature>const RedirectingPartyID&amp; GetRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectingPartyID</name>
<signature>bool OptionRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(RedirectionInformation* element)</signature>
<elmentName>RedirectionInformation</elmentName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(const RedirectionInformation&amp; element)</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectionInformation</name>
<signature>const RedirectionInformation&amp; GetRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectionInformation</name>
<signature>bool OptionRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRouteList</name>
<signature>void SetRouteList(RouteList* element)</signature>
<elmentName>RouteList</elmentName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRouteList</name>
<signature>void SetRouteList(const RouteList&amp; element)</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRouteList</name>
<signature>const RouteList&amp; GetRouteList() const</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRouteList</name>
<signature>bool OptionRouteList() const</signature>
<elementName>RouteList</elementName>
<asnElementName>routeList</asnElementName>
<elementTypeName>RouteList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(TravellingClassMark* element)</signature>
<elmentName>TravellingClassMark</elmentName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTravellingClassMark</name>
<signature>void SetTravellingClassMark(const TravellingClassMark&amp; element)</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTravellingClassMark</name>
<signature>const TravellingClassMark&amp; GetTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTravellingClassMark</name>
<signature>bool OptionTravellingClassMark() const</signature>
<elementName>TravellingClassMark</elementName>
<asnElementName>travellingClassMark</asnElementName>
<elementTypeName>TravellingClassMark</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetFeatureCode</name>
<signature>void SetFeatureCode(FeatureCode* element)</signature>
<elmentName>FeatureCode</elmentName>
<asnElementName>featureCode</asnElementName>
<elementTypeName>FeatureCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFeatureCode</name>
<signature>void SetFeatureCode(const FeatureCode&amp; element)</signature>
<elementName>FeatureCode</elementName>
<asnElementName>featureCode</asnElementName>
<elementTypeName>FeatureCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFeatureCode</name>
<signature>const FeatureCode&amp; GetFeatureCode() const</signature>
<elementName>FeatureCode</elementName>
<asnElementName>featureCode</asnElementName>
<elementTypeName>FeatureCode</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionFeatureCode</name>
<signature>bool OptionFeatureCode() const</signature>
<elementName>FeatureCode</elementName>
<asnElementName>featureCode</asnElementName>
<elementTypeName>FeatureCode</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAccessCode</name>
<signature>void SetAccessCode(AccessCode* element)</signature>
<elmentName>AccessCode</elmentName>
<asnElementName>accessCode</asnElementName>
<elementTypeName>AccessCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAccessCode</name>
<signature>void SetAccessCode(const AccessCode&amp; element)</signature>
<elementName>AccessCode</elementName>
<asnElementName>accessCode</asnElementName>
<elementTypeName>AccessCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAccessCode</name>
<signature>const AccessCode&amp; GetAccessCode() const</signature>
<elementName>AccessCode</elementName>
<asnElementName>accessCode</asnElementName>
<elementTypeName>AccessCode</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAccessCode</name>
<signature>bool OptionAccessCode() const</signature>
<elementName>AccessCode</elementName>
<asnElementName>accessCode</asnElementName>
<elementTypeName>AccessCode</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCarrier</name>
<signature>void SetCarrier(Carrier* element)</signature>
<elmentName>Carrier</elmentName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCarrier</name>
<signature>void SetCarrier(const Carrier&amp; element)</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCarrier</name>
<signature>const Carrier&amp; GetCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCarrier</name>
<signature>bool OptionCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentType</name>
<signature>void SetComponentType(ComponentType* element)</signature>
<elmentName>ComponentType</elmentName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentType</name>
<signature>void SetComponentType(const ComponentType&amp; element)</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentType</name>
<signature>const ComponentType&amp; GetComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentType</name>
<signature>bool OptionComponentType() const</signature>
<elementName>ComponentType</elementName>
<asnElementName>componentType</asnElementName>
<elementTypeName>ComponentType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(ComponentCorrelationID* element)</signature>
<elmentName>ComponentCorrelationID</elmentName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetComponentCorrelationID</name>
<signature>void SetComponentCorrelationID(const ComponentCorrelationID&amp; element)</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetComponentCorrelationID</name>
<signature>const ComponentCorrelationID&amp; GetComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionComponentCorrelationID</name>
<signature>bool OptionComponentCorrelationID() const</signature>
<elementName>ComponentCorrelationID</elementName>
<asnElementName>componentCorrelationID</asnElementName>
<elementTypeName>ComponentCorrelationID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- AnalysedInformationArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>AnalysedInformationArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    dpSpecificCommonParameters [0] IMPLICIT DpSpecificCommonParameters -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    dialledDigits [1] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyBusinessGroupID [2] IMPLICIT CallingPartyBusinessGroupID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartySubaddress [3] IMPLICIT CallingPartySubaddress -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingFacilityGroup [4] IMPLICIT FacilityGroup -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingFacilityGroupMember [5] IMPLICIT FacilityGroupMember -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [6] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    prefix [7] IMPLICIT Digits -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectingPartyID [8] IMPLICIT RedirectingPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectionInformation [9] IMPLICIT RedirectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    routeList [10] IMPLICIT RouteList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    travellingClassMark [11] IMPLICIT TravellingClassMark -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [12] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    featureCode [13] IMPLICIT FeatureCode -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    accessCode [14] IMPLICIT AccessCode -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    carrier [15] IMPLICIT Carrier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentType [16] IMPLICIT ComponentType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    componentCorrelationID [18] IMPLICIT ComponentCorrelationID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

