<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnChoice>

<className>Filter</className>
<asnTypeName>Filter</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSetChoice>
<name>SetChoiceItem</name>
<signature>void SetChoiceItem(FilterItem* choice)</signature>
<choiceName>Item</choiceName>
<asnChoiceName>item</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceItem</name>
<signature>void SetChoiceItem(const FilterItem&amp; choice)</signature>
<choiceName>Item</choiceName>
<asnChoiceName>item</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceItem</name>
<signature>const FilterItem&amp; GetChoiceItem() const</signature>
<choiceName>Item</choiceName>
<asnChoiceName>item</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceItem</name>
<signature>bool ChoiceItem() const</signature>
<choiceName>Item</choiceName>
<asnChoiceName>item</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceAnd</name>
<signature>void SetChoiceAnd(And* choice)</signature>
<choiceName>And</choiceName>
<asnChoiceName>and</asnChoiceName>
<choiceTypeName>And</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceAnd</name>
<signature>void SetChoiceAnd(const And&amp; choice)</signature>
<choiceName>And</choiceName>
<asnChoiceName>and</asnChoiceName>
<choiceTypeName>And</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceAnd</name>
<signature>const And&amp; GetChoiceAnd() const</signature>
<choiceName>And</choiceName>
<asnChoiceName>and</asnChoiceName>
<choiceTypeName>And</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceAnd</name>
<signature>bool ChoiceAnd() const</signature>
<choiceName>And</choiceName>
<asnChoiceName>and</asnChoiceName>
<choiceTypeName>And</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceOr</name>
<signature>void SetChoiceOr(Or* choice)</signature>
<choiceName>Or</choiceName>
<asnChoiceName>or</asnChoiceName>
<choiceTypeName>Or</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceOr</name>
<signature>void SetChoiceOr(const Or&amp; choice)</signature>
<choiceName>Or</choiceName>
<asnChoiceName>or</asnChoiceName>
<choiceTypeName>Or</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceOr</name>
<signature>const Or&amp; GetChoiceOr() const</signature>
<choiceName>Or</choiceName>
<asnChoiceName>or</asnChoiceName>
<choiceTypeName>Or</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceOr</name>
<signature>bool ChoiceOr() const</signature>
<choiceName>Or</choiceName>
<asnChoiceName>or</asnChoiceName>
<choiceTypeName>Or</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceNot</name>
<signature>void SetChoiceNot(FilterItem* choice)</signature>
<choiceName>Not</choiceName>
<asnChoiceName>not</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceNot</name>
<signature>void SetChoiceNot(const FilterItem&amp; choice)</signature>
<choiceName>Not</choiceName>
<asnChoiceName>not</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceNot</name>
<signature>const FilterItem&amp; GetChoiceNot() const</signature>
<choiceName>Not</choiceName>
<asnChoiceName>not</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceNot</name>
<signature>bool ChoiceNot() const</signature>
<choiceName>Not</choiceName>
<asnChoiceName>not</asnChoiceName>
<choiceTypeName>FilterItem</choiceTypeName>
</memberFunctionChoice>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- Filter information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>Filter ::= CHOICE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    item [0] IMPLICIT FilterItem -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    and [1] IMPLICIT SET OF FilterItem -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    or [2] IMPLICIT SET OF FilterItem -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    not [3] IMPLICIT FilterItem -- [linked] --</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnChoice>

</asnType>

