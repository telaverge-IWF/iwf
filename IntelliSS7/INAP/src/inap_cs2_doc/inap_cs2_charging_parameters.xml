<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ChargingParameters</className>
<asnTypeName>ChargingParameters</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetUnitsPerInterval</name>
<signature>void SetUnitsPerInterval(UnitsPerInterval* element)</signature>
<elmentName>UnitsPerInterval</elmentName>
<asnElementName>unitsPerInterval</asnElementName>
<elementTypeName>UnitsPerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUnitsPerInterval</name>
<signature>void SetUnitsPerInterval(const UnitsPerInterval&amp; element)</signature>
<elementName>UnitsPerInterval</elementName>
<asnElementName>unitsPerInterval</asnElementName>
<elementTypeName>UnitsPerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUnitsPerInterval</name>
<signature>const UnitsPerInterval&amp; GetUnitsPerInterval() const</signature>
<elementName>UnitsPerInterval</elementName>
<asnElementName>unitsPerInterval</asnElementName>
<elementTypeName>UnitsPerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetTimePerInterval</name>
<signature>void SetTimePerInterval(TimePerInterval* element)</signature>
<elmentName>TimePerInterval</elmentName>
<asnElementName>timePerInterval</asnElementName>
<elementTypeName>TimePerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTimePerInterval</name>
<signature>void SetTimePerInterval(const TimePerInterval&amp; element)</signature>
<elementName>TimePerInterval</elementName>
<asnElementName>timePerInterval</asnElementName>
<elementTypeName>TimePerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTimePerInterval</name>
<signature>const TimePerInterval&amp; GetTimePerInterval() const</signature>
<elementName>TimePerInterval</elementName>
<asnElementName>timePerInterval</asnElementName>
<elementTypeName>TimePerInterval</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetScalingFactor</name>
<signature>void SetScalingFactor(ScalingFactor* element)</signature>
<elmentName>ScalingFactor</elmentName>
<asnElementName>scalingFactor</asnElementName>
<elementTypeName>ScalingFactor</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetScalingFactor</name>
<signature>void SetScalingFactor(const ScalingFactor&amp; element)</signature>
<elementName>ScalingFactor</elementName>
<asnElementName>scalingFactor</asnElementName>
<elementTypeName>ScalingFactor</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetScalingFactor</name>
<signature>const ScalingFactor&amp; GetScalingFactor() const</signature>
<elementName>ScalingFactor</elementName>
<asnElementName>scalingFactor</asnElementName>
<elementTypeName>ScalingFactor</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetInitialUnitIncrement</name>
<signature>void SetInitialUnitIncrement(InitialUnitIncrement* element)</signature>
<elmentName>InitialUnitIncrement</elmentName>
<asnElementName>initialUnitIncrement</asnElementName>
<elementTypeName>InitialUnitIncrement</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInitialUnitIncrement</name>
<signature>void SetInitialUnitIncrement(const InitialUnitIncrement&amp; element)</signature>
<elementName>InitialUnitIncrement</elementName>
<asnElementName>initialUnitIncrement</asnElementName>
<elementTypeName>InitialUnitIncrement</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInitialUnitIncrement</name>
<signature>const InitialUnitIncrement&amp; GetInitialUnitIncrement() const</signature>
<elementName>InitialUnitIncrement</elementName>
<asnElementName>initialUnitIncrement</asnElementName>
<elementTypeName>InitialUnitIncrement</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInitialUnitIncrement</name>
<signature>bool OptionInitialUnitIncrement() const</signature>
<elementName>InitialUnitIncrement</elementName>
<asnElementName>initialUnitIncrement</asnElementName>
<elementTypeName>InitialUnitIncrement</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUnitsPerDataInterval</name>
<signature>void SetUnitsPerDataInterval(UnitsPerDataInterval* element)</signature>
<elmentName>UnitsPerDataInterval</elmentName>
<asnElementName>unitsPerDataInterval</asnElementName>
<elementTypeName>UnitsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUnitsPerDataInterval</name>
<signature>void SetUnitsPerDataInterval(const UnitsPerDataInterval&amp; element)</signature>
<elementName>UnitsPerDataInterval</elementName>
<asnElementName>unitsPerDataInterval</asnElementName>
<elementTypeName>UnitsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUnitsPerDataInterval</name>
<signature>const UnitsPerDataInterval&amp; GetUnitsPerDataInterval() const</signature>
<elementName>UnitsPerDataInterval</elementName>
<asnElementName>unitsPerDataInterval</asnElementName>
<elementTypeName>UnitsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUnitsPerDataInterval</name>
<signature>bool OptionUnitsPerDataInterval() const</signature>
<elementName>UnitsPerDataInterval</elementName>
<asnElementName>unitsPerDataInterval</asnElementName>
<elementTypeName>UnitsPerDataInterval</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSegmentsPerDataInterval</name>
<signature>void SetSegmentsPerDataInterval(SegmentsPerDataInterval* element)</signature>
<elmentName>SegmentsPerDataInterval</elmentName>
<asnElementName>segmentsPerDataInterval</asnElementName>
<elementTypeName>SegmentsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSegmentsPerDataInterval</name>
<signature>void SetSegmentsPerDataInterval(const SegmentsPerDataInterval&amp; element)</signature>
<elementName>SegmentsPerDataInterval</elementName>
<asnElementName>segmentsPerDataInterval</asnElementName>
<elementTypeName>SegmentsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSegmentsPerDataInterval</name>
<signature>const SegmentsPerDataInterval&amp; GetSegmentsPerDataInterval() const</signature>
<elementName>SegmentsPerDataInterval</elementName>
<asnElementName>segmentsPerDataInterval</asnElementName>
<elementTypeName>SegmentsPerDataInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSegmentsPerDataInterval</name>
<signature>bool OptionSegmentsPerDataInterval() const</signature>
<elementName>SegmentsPerDataInterval</elementName>
<asnElementName>segmentsPerDataInterval</asnElementName>
<elementTypeName>SegmentsPerDataInterval</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetInitialTimeInterval</name>
<signature>void SetInitialTimeInterval(InitialTimeInterval* element)</signature>
<elmentName>InitialTimeInterval</elmentName>
<asnElementName>initialTimeInterval</asnElementName>
<elementTypeName>InitialTimeInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInitialTimeInterval</name>
<signature>void SetInitialTimeInterval(const InitialTimeInterval&amp; element)</signature>
<elementName>InitialTimeInterval</elementName>
<asnElementName>initialTimeInterval</asnElementName>
<elementTypeName>InitialTimeInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInitialTimeInterval</name>
<signature>const InitialTimeInterval&amp; GetInitialTimeInterval() const</signature>
<elementName>InitialTimeInterval</elementName>
<asnElementName>initialTimeInterval</asnElementName>
<elementTypeName>InitialTimeInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInitialTimeInterval</name>
<signature>bool OptionInitialTimeInterval() const</signature>
<elementName>InitialTimeInterval</elementName>
<asnElementName>initialTimeInterval</asnElementName>
<elementTypeName>InitialTimeInterval</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ChargingParameters information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ChargingParameters ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    unitsPerInterval [0] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    timePerInterval [1] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    scalingFactor [2] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    initialUnitIncrement [3] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    unitsPerDataInterval [4] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    segmentsPerDataInterval [5] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    initialTimeInterval [6] IMPLICIT INTEGER   OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

