<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CertificatePair</className>
<asnTypeName>CertificatePair</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetForward</name>
<signature>void SetForward(Certificate* element)</signature>
<elmentName>Forward</elmentName>
<asnElementName>forward</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForward</name>
<signature>void SetForward(const Certificate&amp; element)</signature>
<elementName>Forward</elementName>
<asnElementName>forward</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForward</name>
<signature>const Certificate&amp; GetForward() const</signature>
<elementName>Forward</elementName>
<asnElementName>forward</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForward</name>
<signature>bool OptionForward() const</signature>
<elementName>Forward</elementName>
<asnElementName>forward</asnElementName>
<elementTypeName>Certificate</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReverse</name>
<signature>void SetReverse(Certificate* element)</signature>
<elmentName>Reverse</elmentName>
<asnElementName>reverse</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReverse</name>
<signature>void SetReverse(const Certificate&amp; element)</signature>
<elementName>Reverse</elementName>
<asnElementName>reverse</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReverse</name>
<signature>const Certificate&amp; GetReverse() const</signature>
<elementName>Reverse</elementName>
<asnElementName>reverse</asnElementName>
<elementTypeName>Certificate</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReverse</name>
<signature>bool OptionReverse() const</signature>
<elementName>Reverse</elementName>
<asnElementName>reverse</asnElementName>
<elementTypeName>Certificate</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CertificatePair information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CertificatePair ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    forward [0] IMPLICIT Certificate -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    reverse [1] IMPLICIT Certificate -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

