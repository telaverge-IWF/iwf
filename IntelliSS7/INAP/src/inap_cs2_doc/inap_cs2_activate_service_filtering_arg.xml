<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ActivateServiceFilteringArg</className>
<asnTypeName>ActivateServiceFilteringArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetFilteredCallTreatment</name>
<signature>void SetFilteredCallTreatment(FilteredCallTreatment* element)</signature>
<elmentName>FilteredCallTreatment</elmentName>
<asnElementName>filteredCallTreatment</asnElementName>
<elementTypeName>FilteredCallTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilteredCallTreatment</name>
<signature>void SetFilteredCallTreatment(const FilteredCallTreatment&amp; element)</signature>
<elementName>FilteredCallTreatment</elementName>
<asnElementName>filteredCallTreatment</asnElementName>
<elementTypeName>FilteredCallTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilteredCallTreatment</name>
<signature>const FilteredCallTreatment&amp; GetFilteredCallTreatment() const</signature>
<elementName>FilteredCallTreatment</elementName>
<asnElementName>filteredCallTreatment</asnElementName>
<elementTypeName>FilteredCallTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetFilteringCharacteristics</name>
<signature>void SetFilteringCharacteristics(FilteringCharacteristics* element)</signature>
<elmentName>FilteringCharacteristics</elmentName>
<asnElementName>filteringCharacteristics</asnElementName>
<elementTypeName>FilteringCharacteristics</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilteringCharacteristics</name>
<signature>void SetFilteringCharacteristics(const FilteringCharacteristics&amp; element)</signature>
<elementName>FilteringCharacteristics</elementName>
<asnElementName>filteringCharacteristics</asnElementName>
<elementTypeName>FilteringCharacteristics</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilteringCharacteristics</name>
<signature>const FilteringCharacteristics&amp; GetFilteringCharacteristics() const</signature>
<elementName>FilteringCharacteristics</elementName>
<asnElementName>filteringCharacteristics</asnElementName>
<elementTypeName>FilteringCharacteristics</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetFilteringTimeOut</name>
<signature>void SetFilteringTimeOut(FilteringTimeOut* element)</signature>
<elmentName>FilteringTimeOut</elmentName>
<asnElementName>filteringTimeOut</asnElementName>
<elementTypeName>FilteringTimeOut</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilteringTimeOut</name>
<signature>void SetFilteringTimeOut(const FilteringTimeOut&amp; element)</signature>
<elementName>FilteringTimeOut</elementName>
<asnElementName>filteringTimeOut</asnElementName>
<elementTypeName>FilteringTimeOut</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilteringTimeOut</name>
<signature>const FilteringTimeOut&amp; GetFilteringTimeOut() const</signature>
<elementName>FilteringTimeOut</elementName>
<asnElementName>filteringTimeOut</asnElementName>
<elementTypeName>FilteringTimeOut</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetFilteringCriteria</name>
<signature>void SetFilteringCriteria(FilteringCriteria* element)</signature>
<elmentName>FilteringCriteria</elmentName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilteringCriteria</name>
<signature>void SetFilteringCriteria(const FilteringCriteria&amp; element)</signature>
<elementName>FilteringCriteria</elementName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilteringCriteria</name>
<signature>const FilteringCriteria&amp; GetFilteringCriteria() const</signature>
<elementName>FilteringCriteria</elementName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetStartTime</name>
<signature>void SetStartTime(DateAndTime* element)</signature>
<elmentName>StartTime</elmentName>
<asnElementName>startTime</asnElementName>
<elementTypeName>DateAndTime</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetStartTime</name>
<signature>void SetStartTime(const DateAndTime&amp; element)</signature>
<elementName>StartTime</elementName>
<asnElementName>startTime</asnElementName>
<elementTypeName>DateAndTime</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetStartTime</name>
<signature>const DateAndTime&amp; GetStartTime() const</signature>
<elementName>StartTime</elementName>
<asnElementName>startTime</asnElementName>
<elementTypeName>DateAndTime</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionStartTime</name>
<signature>bool OptionStartTime() const</signature>
<elementName>StartTime</elementName>
<asnElementName>startTime</asnElementName>
<elementTypeName>DateAndTime</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ActivateServiceFilteringArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ActivateServiceFilteringArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    filteredCallTreatment [0] IMPLICIT FilteredCallTreatment -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    filteringCharacteristics [1] IMPLICIT FilteringCharacteristics -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    filteringTimeOut [2] IMPLICIT FilteringTimeOut -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    filteringCriteria [3] IMPLICIT FilteringCriteria -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    startTime [4] IMPLICIT DateAndTime -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [5] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

