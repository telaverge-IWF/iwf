<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnChoice>

<className>ConnectToResourceArg::ResourceAddress</className>
<asnTypeName>ConnectToResourceArg::resourceAddress</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSetChoice>
<name>SetChoiceIpRoutingAddress</name>
<signature>void SetChoiceIpRoutingAddress(IPRoutingAddress* choice)</signature>
<choiceName>IpRoutingAddress</choiceName>
<asnChoiceName>ipRoutingAddress</asnChoiceName>
<choiceTypeName>IPRoutingAddress</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceIpRoutingAddress</name>
<signature>void SetChoiceIpRoutingAddress(const IPRoutingAddress&amp; choice)</signature>
<choiceName>IpRoutingAddress</choiceName>
<asnChoiceName>ipRoutingAddress</asnChoiceName>
<choiceTypeName>IPRoutingAddress</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceIpRoutingAddress</name>
<signature>const IPRoutingAddress&amp; GetChoiceIpRoutingAddress() const</signature>
<choiceName>IpRoutingAddress</choiceName>
<asnChoiceName>ipRoutingAddress</asnChoiceName>
<choiceTypeName>IPRoutingAddress</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceIpRoutingAddress</name>
<signature>bool ChoiceIpRoutingAddress() const</signature>
<choiceName>IpRoutingAddress</choiceName>
<asnChoiceName>ipRoutingAddress</asnChoiceName>
<choiceTypeName>IPRoutingAddress</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceLegID</name>
<signature>void SetChoiceLegID(LegID* choice)</signature>
<choiceName>LegID</choiceName>
<asnChoiceName>legID</asnChoiceName>
<choiceTypeName>LegID</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceLegID</name>
<signature>void SetChoiceLegID(const LegID&amp; choice)</signature>
<choiceName>LegID</choiceName>
<asnChoiceName>legID</asnChoiceName>
<choiceTypeName>LegID</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceLegID</name>
<signature>const LegID&amp; GetChoiceLegID() const</signature>
<choiceName>LegID</choiceName>
<asnChoiceName>legID</asnChoiceName>
<choiceTypeName>LegID</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceLegID</name>
<signature>bool ChoiceLegID() const</signature>
<choiceName>LegID</choiceName>
<asnChoiceName>legID</asnChoiceName>
<choiceTypeName>LegID</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceIpAddressAndLegID</name>
<signature>void SetChoiceIpAddressAndLegID(IpAddressAndLegID* choice)</signature>
<choiceName>IpAddressAndLegID</choiceName>
<asnChoiceName>ipAddressAndLegID</asnChoiceName>
<choiceTypeName>IpAddressAndLegID</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceIpAddressAndLegID</name>
<signature>void SetChoiceIpAddressAndLegID(const IpAddressAndLegID&amp; choice)</signature>
<choiceName>IpAddressAndLegID</choiceName>
<asnChoiceName>ipAddressAndLegID</asnChoiceName>
<choiceTypeName>IpAddressAndLegID</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceIpAddressAndLegID</name>
<signature>const IpAddressAndLegID&amp; GetChoiceIpAddressAndLegID() const</signature>
<choiceName>IpAddressAndLegID</choiceName>
<asnChoiceName>ipAddressAndLegID</asnChoiceName>
<choiceTypeName>IpAddressAndLegID</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceIpAddressAndLegID</name>
<signature>bool ChoiceIpAddressAndLegID() const</signature>
<choiceName>IpAddressAndLegID</choiceName>
<asnChoiceName>ipAddressAndLegID</asnChoiceName>
<choiceTypeName>IpAddressAndLegID</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceNone</name>
<signature>void SetChoiceNone(None* choice)</signature>
<choiceName>None</choiceName>
<asnChoiceName>none</asnChoiceName>
<choiceTypeName>None</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceNone</name>
<signature>void SetChoiceNone(const None&amp; choice)</signature>
<choiceName>None</choiceName>
<asnChoiceName>none</asnChoiceName>
<choiceTypeName>None</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceNone</name>
<signature>const None&amp; GetChoiceNone() const</signature>
<choiceName>None</choiceName>
<asnChoiceName>none</asnChoiceName>
<choiceTypeName>None</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceNone</name>
<signature>bool ChoiceNone() const</signature>
<choiceName>None</choiceName>
<asnChoiceName>none</asnChoiceName>
<choiceTypeName>None</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceCallSegmentID</name>
<signature>void SetChoiceCallSegmentID(CallSegmentID* choice)</signature>
<choiceName>CallSegmentID</choiceName>
<asnChoiceName>callSegmentID</asnChoiceName>
<choiceTypeName>CallSegmentID</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceCallSegmentID</name>
<signature>void SetChoiceCallSegmentID(const CallSegmentID&amp; choice)</signature>
<choiceName>CallSegmentID</choiceName>
<asnChoiceName>callSegmentID</asnChoiceName>
<choiceTypeName>CallSegmentID</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceCallSegmentID</name>
<signature>const CallSegmentID&amp; GetChoiceCallSegmentID() const</signature>
<choiceName>CallSegmentID</choiceName>
<asnChoiceName>callSegmentID</asnChoiceName>
<choiceTypeName>CallSegmentID</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceCallSegmentID</name>
<signature>bool ChoiceCallSegmentID() const</signature>
<choiceName>CallSegmentID</choiceName>
<asnChoiceName>callSegmentID</asnChoiceName>
<choiceTypeName>CallSegmentID</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceIpAddressAndCallSegment</name>
<signature>void SetChoiceIpAddressAndCallSegment(IpAddressAndCallSegment* choice)</signature>
<choiceName>IpAddressAndCallSegment</choiceName>
<asnChoiceName>ipAddressAndCallSegment</asnChoiceName>
<choiceTypeName>IpAddressAndCallSegment</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceIpAddressAndCallSegment</name>
<signature>void SetChoiceIpAddressAndCallSegment(const IpAddressAndCallSegment&amp; choice)</signature>
<choiceName>IpAddressAndCallSegment</choiceName>
<asnChoiceName>ipAddressAndCallSegment</asnChoiceName>
<choiceTypeName>IpAddressAndCallSegment</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceIpAddressAndCallSegment</name>
<signature>const IpAddressAndCallSegment&amp; GetChoiceIpAddressAndCallSegment() const</signature>
<choiceName>IpAddressAndCallSegment</choiceName>
<asnChoiceName>ipAddressAndCallSegment</asnChoiceName>
<choiceTypeName>IpAddressAndCallSegment</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceIpAddressAndCallSegment</name>
<signature>bool ChoiceIpAddressAndCallSegment() const</signature>
<choiceName>IpAddressAndCallSegment</choiceName>
<asnChoiceName>ipAddressAndCallSegment</asnChoiceName>
<choiceTypeName>IpAddressAndCallSegment</choiceTypeName>
</memberFunctionChoice>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ConnectToResourceArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ConnectToResourceArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    resourceAddress CHOICE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        ipRoutingAddress [0] IMPLICIT IPRoutingAddress -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        legID [1] IMPLICIT LegID -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        ipAddressAndLegID [2] IMPLICIT SEQUENCE</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>        {</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>            ipRoutingAddress [0] IMPLICIT IPRoutingAddress -- [linked] --,</text>
<shift></shift>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>            legID [1] IMPLICIT LegID -- [linked] --</text>
<shift></shift>
<shift></shift>
<shift></shift>
</line>
<line>
<text>        },</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        none [3] IMPLICIT NULL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        callSegmentID [5] IMPLICIT CallSegmentID -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        ipAddressAndCallSegment [6] IMPLICIT SEQUENCE</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>        {</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>            ipRoutingAddress [0] IMPLICIT IPRoutingAddress -- [linked] --,</text>
<shift></shift>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>            callSegmentID [1] IMPLICIT CallSegmentID -- [linked] --</text>
<shift></shift>
<shift></shift>
<shift></shift>
</line>
<line>
<text>        }</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [4] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicators [30] IMPLICIT ServiceInteractionIndicators -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [7] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnChoice>

</asnType>

