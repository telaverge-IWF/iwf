<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PromptAndCollectUserInformationArg</className>
<asnTypeName>PromptAndCollectUserInformationArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetCollectedInfo</name>
<signature>void SetCollectedInfo(CollectedInfo* element)</signature>
<elmentName>CollectedInfo</elmentName>
<asnElementName>collectedInfo</asnElementName>
<elementTypeName>CollectedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCollectedInfo</name>
<signature>void SetCollectedInfo(const CollectedInfo&amp; element)</signature>
<elementName>CollectedInfo</elementName>
<asnElementName>collectedInfo</asnElementName>
<elementTypeName>CollectedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCollectedInfo</name>
<signature>const CollectedInfo&amp; GetCollectedInfo() const</signature>
<elementName>CollectedInfo</elementName>
<asnElementName>collectedInfo</asnElementName>
<elementTypeName>CollectedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetDisconnectFromIPForbidden</name>
<signature>void SetDisconnectFromIPForbidden(DisconnectFromIPForbidden* element)</signature>
<elmentName>DisconnectFromIPForbidden</elmentName>
<asnElementName>disconnectFromIPForbidden</asnElementName>
<elementTypeName>DisconnectFromIPForbidden</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDisconnectFromIPForbidden</name>
<signature>void SetDisconnectFromIPForbidden(const DisconnectFromIPForbidden&amp; element)</signature>
<elementName>DisconnectFromIPForbidden</elementName>
<asnElementName>disconnectFromIPForbidden</asnElementName>
<elementTypeName>DisconnectFromIPForbidden</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDisconnectFromIPForbidden</name>
<signature>const DisconnectFromIPForbidden&amp; GetDisconnectFromIPForbidden() const</signature>
<elementName>DisconnectFromIPForbidden</elementName>
<asnElementName>disconnectFromIPForbidden</asnElementName>
<elementTypeName>DisconnectFromIPForbidden</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetInformationToSend</name>
<signature>void SetInformationToSend(InformationToSend* element)</signature>
<elmentName>InformationToSend</elmentName>
<asnElementName>informationToSend</asnElementName>
<elementTypeName>InformationToSend</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInformationToSend</name>
<signature>void SetInformationToSend(const InformationToSend&amp; element)</signature>
<elementName>InformationToSend</elementName>
<asnElementName>informationToSend</asnElementName>
<elementTypeName>InformationToSend</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInformationToSend</name>
<signature>const InformationToSend&amp; GetInformationToSend() const</signature>
<elementName>InformationToSend</elementName>
<asnElementName>informationToSend</asnElementName>
<elementTypeName>InformationToSend</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInformationToSend</name>
<signature>bool OptionInformationToSend() const</signature>
<elementName>InformationToSend</elementName>
<asnElementName>informationToSend</asnElementName>
<elementTypeName>InformationToSend</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(CallSegmentID* element)</signature>
<elmentName>CallSegmentID</elmentName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallSegmentID</name>
<signature>void SetCallSegmentID(const CallSegmentID&amp; element)</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallSegmentID</name>
<signature>const CallSegmentID&amp; GetCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallSegmentID</name>
<signature>bool OptionCallSegmentID() const</signature>
<elementName>CallSegmentID</elementName>
<asnElementName>callSegmentID</asnElementName>
<elementTypeName>CallSegmentID</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PromptAndCollectUserInformationArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PromptAndCollectUserInformationArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    collectedInfo [0] IMPLICIT CollectedInfo -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    disconnectFromIPForbidden [1] IMPLICIT BOOLEAN DEFAULT TRUE,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    informationToSend [2] IMPLICIT InformationToSend -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [3] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callSegmentID [4] IMPLICIT CallSegmentID -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

