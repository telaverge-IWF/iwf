<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>InformationToRecord</className>
<asnTypeName>InformationToRecord</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetMessageID</name>
<signature>void SetMessageID(ElementaryMessageID* element)</signature>
<elmentName>MessageID</elmentName>
<asnElementName>messageID</asnElementName>
<elementTypeName>ElementaryMessageID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMessageID</name>
<signature>void SetMessageID(const ElementaryMessageID&amp; element)</signature>
<elementName>MessageID</elementName>
<asnElementName>messageID</asnElementName>
<elementTypeName>ElementaryMessageID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMessageID</name>
<signature>const ElementaryMessageID&amp; GetMessageID() const</signature>
<elementName>MessageID</elementName>
<asnElementName>messageID</asnElementName>
<elementTypeName>ElementaryMessageID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMessageID</name>
<signature>bool OptionMessageID() const</signature>
<elementName>MessageID</elementName>
<asnElementName>messageID</asnElementName>
<elementTypeName>ElementaryMessageID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMessageDeletionTimeOut</name>
<signature>void SetMessageDeletionTimeOut(MessageDeletionTimeOut* element)</signature>
<elmentName>MessageDeletionTimeOut</elmentName>
<asnElementName>messageDeletionTimeOut</asnElementName>
<elementTypeName>MessageDeletionTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMessageDeletionTimeOut</name>
<signature>void SetMessageDeletionTimeOut(const MessageDeletionTimeOut&amp; element)</signature>
<elementName>MessageDeletionTimeOut</elementName>
<asnElementName>messageDeletionTimeOut</asnElementName>
<elementTypeName>MessageDeletionTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMessageDeletionTimeOut</name>
<signature>const MessageDeletionTimeOut&amp; GetMessageDeletionTimeOut() const</signature>
<elementName>MessageDeletionTimeOut</elementName>
<asnElementName>messageDeletionTimeOut</asnElementName>
<elementTypeName>MessageDeletionTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMessageDeletionTimeOut</name>
<signature>bool OptionMessageDeletionTimeOut() const</signature>
<elementName>MessageDeletionTimeOut</elementName>
<asnElementName>messageDeletionTimeOut</asnElementName>
<elementTypeName>MessageDeletionTimeOut</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTimeToRecord</name>
<signature>void SetTimeToRecord(TimeToRecord* element)</signature>
<elmentName>TimeToRecord</elmentName>
<asnElementName>timeToRecord</asnElementName>
<elementTypeName>TimeToRecord</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTimeToRecord</name>
<signature>void SetTimeToRecord(const TimeToRecord&amp; element)</signature>
<elementName>TimeToRecord</elementName>
<asnElementName>timeToRecord</asnElementName>
<elementTypeName>TimeToRecord</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTimeToRecord</name>
<signature>const TimeToRecord&amp; GetTimeToRecord() const</signature>
<elementName>TimeToRecord</elementName>
<asnElementName>timeToRecord</asnElementName>
<elementTypeName>TimeToRecord</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTimeToRecord</name>
<signature>bool OptionTimeToRecord() const</signature>
<elementName>TimeToRecord</elementName>
<asnElementName>timeToRecord</asnElementName>
<elementTypeName>TimeToRecord</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetControlDigits</name>
<signature>void SetControlDigits(ControlDigits* element)</signature>
<elmentName>ControlDigits</elmentName>
<asnElementName>controlDigits</asnElementName>
<elementTypeName>ControlDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetControlDigits</name>
<signature>void SetControlDigits(const ControlDigits&amp; element)</signature>
<elementName>ControlDigits</elementName>
<asnElementName>controlDigits</asnElementName>
<elementTypeName>ControlDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetControlDigits</name>
<signature>const ControlDigits&amp; GetControlDigits() const</signature>
<elementName>ControlDigits</elementName>
<asnElementName>controlDigits</asnElementName>
<elementTypeName>ControlDigits</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- InformationToRecord information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>InformationToRecord ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    messageID [0] IMPLICIT ElementaryMessageID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    messageDeletionTimeOut [1] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    timeToRecord [3] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    controlDigits [4] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        endOfRecordingDigit [0] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        cancelDigit [1] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        replayDigit [2] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        restartRecordingDigit [3] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        restartAllowed [4] IMPLICIT BOOLEAN DEFAULT FALSE,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        replayAllowed [5] IMPLICIT BOOLEAN DEFAULT FALSE</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    }</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

