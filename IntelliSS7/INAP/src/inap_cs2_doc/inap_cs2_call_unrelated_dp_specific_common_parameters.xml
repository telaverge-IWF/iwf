<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CallUnrelatedDpSpecificCommonParameters</className>
<asnTypeName>CallUnrelatedDpSpecificCommonParameters</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetServiceAddressInformation</name>
<signature>void SetServiceAddressInformation(ServiceAddressInformation* element)</signature>
<elmentName>ServiceAddressInformation</elmentName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceAddressInformation</name>
<signature>void SetServiceAddressInformation(const ServiceAddressInformation&amp; element)</signature>
<elementName>ServiceAddressInformation</elementName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceAddressInformation</name>
<signature>const ServiceAddressInformation&amp; GetServiceAddressInformation() const</signature>
<elementName>ServiceAddressInformation</elementName>
<asnElementName>serviceAddressInformation</asnElementName>
<elementTypeName>ServiceAddressInformation</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(LocationNumber* element)</signature>
<elmentName>LocationNumber</elmentName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(const LocationNumber&amp; element)</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationNumber</name>
<signature>const LocationNumber&amp; GetLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationNumber</name>
<signature>bool OptionLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTerminalType</name>
<signature>void SetTerminalType(TerminalType* element)</signature>
<elmentName>TerminalType</elmentName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTerminalType</name>
<signature>void SetTerminalType(const TerminalType&amp; element)</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTerminalType</name>
<signature>const TerminalType&amp; GetTerminalType() const</signature>
<elementName>TerminalType</elementName>
<asnElementName>terminalType</asnElementName>
<elementTypeName>TerminalType</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CallUnrelatedDpSpecificCommonParameters information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CallUnrelatedDpSpecificCommonParameters ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    serviceAddressInformation [0] IMPLICIT ServiceAddressInformation -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [1] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationNumber [2] IMPLICIT LocationNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    terminalType [3] IMPLICIT TerminalType -- [linked] -- DEFAULT isdn -- [enum value] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [4] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

