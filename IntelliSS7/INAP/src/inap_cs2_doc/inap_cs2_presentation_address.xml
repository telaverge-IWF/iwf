<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PresentationAddress</className>
<asnTypeName>PresentationAddress</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetPSelector</name>
<signature>void SetPSelector(PSelector* element)</signature>
<elmentName>PSelector</elmentName>
<asnElementName>pSelector</asnElementName>
<elementTypeName>PSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPSelector</name>
<signature>void SetPSelector(const PSelector&amp; element)</signature>
<elementName>PSelector</elementName>
<asnElementName>pSelector</asnElementName>
<elementTypeName>PSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPSelector</name>
<signature>const PSelector&amp; GetPSelector() const</signature>
<elementName>PSelector</elementName>
<asnElementName>pSelector</asnElementName>
<elementTypeName>PSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPSelector</name>
<signature>bool OptionPSelector() const</signature>
<elementName>PSelector</elementName>
<asnElementName>pSelector</asnElementName>
<elementTypeName>PSelector</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSSelector</name>
<signature>void SetSSelector(SSelector* element)</signature>
<elmentName>SSelector</elmentName>
<asnElementName>sSelector</asnElementName>
<elementTypeName>SSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSSelector</name>
<signature>void SetSSelector(const SSelector&amp; element)</signature>
<elementName>SSelector</elementName>
<asnElementName>sSelector</asnElementName>
<elementTypeName>SSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSSelector</name>
<signature>const SSelector&amp; GetSSelector() const</signature>
<elementName>SSelector</elementName>
<asnElementName>sSelector</asnElementName>
<elementTypeName>SSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSSelector</name>
<signature>bool OptionSSelector() const</signature>
<elementName>SSelector</elementName>
<asnElementName>sSelector</asnElementName>
<elementTypeName>SSelector</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTSelector</name>
<signature>void SetTSelector(TSelector* element)</signature>
<elmentName>TSelector</elmentName>
<asnElementName>tSelector</asnElementName>
<elementTypeName>TSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTSelector</name>
<signature>void SetTSelector(const TSelector&amp; element)</signature>
<elementName>TSelector</elementName>
<asnElementName>tSelector</asnElementName>
<elementTypeName>TSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTSelector</name>
<signature>const TSelector&amp; GetTSelector() const</signature>
<elementName>TSelector</elementName>
<asnElementName>tSelector</asnElementName>
<elementTypeName>TSelector</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTSelector</name>
<signature>bool OptionTSelector() const</signature>
<elementName>TSelector</elementName>
<asnElementName>tSelector</asnElementName>
<elementTypeName>TSelector</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNAddresses</name>
<signature>void SetNAddresses(NAddresses* element)</signature>
<elmentName>NAddresses</elmentName>
<asnElementName>nAddresses</asnElementName>
<elementTypeName>NAddresses</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNAddresses</name>
<signature>void SetNAddresses(const NAddresses&amp; element)</signature>
<elementName>NAddresses</elementName>
<asnElementName>nAddresses</asnElementName>
<elementTypeName>NAddresses</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNAddresses</name>
<signature>const NAddresses&amp; GetNAddresses() const</signature>
<elementName>NAddresses</elementName>
<asnElementName>nAddresses</asnElementName>
<elementTypeName>NAddresses</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PresentationAddress information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PresentationAddress ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    pSelector [0] IMPLICIT OCTET STRING OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    sSelector [1] IMPLICIT OCTET STRING OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tSelector [2] IMPLICIT OCTET STRING OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    nAddresses [3] IMPLICIT SET (SIZE(1..10)) OF OCTET STRING</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

