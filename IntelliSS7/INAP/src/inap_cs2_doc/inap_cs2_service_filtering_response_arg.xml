<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ServiceFilteringResponseArg</className>
<asnTypeName>ServiceFilteringResponseArg</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetCountersValue</name>
<signature>void SetCountersValue(CountersValue* element)</signature>
<elmentName>CountersValue</elmentName>
<asnElementName>countersValue</asnElementName>
<elementTypeName>CountersValue</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCountersValue</name>
<signature>void SetCountersValue(const CountersValue&amp; element)</signature>
<elementName>CountersValue</elementName>
<asnElementName>countersValue</asnElementName>
<elementTypeName>CountersValue</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCountersValue</name>
<signature>const CountersValue&amp; GetCountersValue() const</signature>
<elementName>CountersValue</elementName>
<asnElementName>countersValue</asnElementName>
<elementTypeName>CountersValue</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetFilteringCriteria</name>
<signature>void SetFilteringCriteria(FilteringCriteria* element)</signature>
<elmentName>FilteringCriteria</elmentName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFilteringCriteria</name>
<signature>void SetFilteringCriteria(const FilteringCriteria&amp; element)</signature>
<elementName>FilteringCriteria</elementName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFilteringCriteria</name>
<signature>const FilteringCriteria&amp; GetFilteringCriteria() const</signature>
<elementName>FilteringCriteria</elementName>
<asnElementName>filteringCriteria</asnElementName>
<elementTypeName>FilteringCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetResponseCondition</name>
<signature>void SetResponseCondition(ResponseCondition* element)</signature>
<elmentName>ResponseCondition</elmentName>
<asnElementName>responseCondition</asnElementName>
<elementTypeName>ResponseCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetResponseCondition</name>
<signature>void SetResponseCondition(const ResponseCondition&amp; element)</signature>
<elementName>ResponseCondition</elementName>
<asnElementName>responseCondition</asnElementName>
<elementTypeName>ResponseCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetResponseCondition</name>
<signature>const ResponseCondition&amp; GetResponseCondition() const</signature>
<elementName>ResponseCondition</elementName>
<asnElementName>responseCondition</asnElementName>
<elementTypeName>ResponseCondition</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionResponseCondition</name>
<signature>bool OptionResponseCondition() const</signature>
<elementName>ResponseCondition</elementName>
<asnElementName>responseCondition</asnElementName>
<elementTypeName>ResponseCondition</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ServiceFilteringResponseArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ServiceFilteringResponseArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    countersValue [0] IMPLICIT CountersValue -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    filteringCriteria [1] IMPLICIT FilteringCriteria -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [2] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    responseCondition [3] IMPLICIT ResponseCondition -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

