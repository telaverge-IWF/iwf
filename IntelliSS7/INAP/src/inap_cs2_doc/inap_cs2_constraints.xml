<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>Constraints</className>
<asnTypeName>Constraints</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetMaximumNumberOfDigits</name>
<signature>void SetMaximumNumberOfDigits(MaximumNumberOfDigits* element)</signature>
<elmentName>MaximumNumberOfDigits</elmentName>
<asnElementName>maximumNumberOfDigits</asnElementName>
<elementTypeName>MaximumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMaximumNumberOfDigits</name>
<signature>void SetMaximumNumberOfDigits(const MaximumNumberOfDigits&amp; element)</signature>
<elementName>MaximumNumberOfDigits</elementName>
<asnElementName>maximumNumberOfDigits</asnElementName>
<elementTypeName>MaximumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMaximumNumberOfDigits</name>
<signature>const MaximumNumberOfDigits&amp; GetMaximumNumberOfDigits() const</signature>
<elementName>MaximumNumberOfDigits</elementName>
<asnElementName>maximumNumberOfDigits</asnElementName>
<elementTypeName>MaximumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetMinimumNumberOfDigits</name>
<signature>void SetMinimumNumberOfDigits(MinimumNumberOfDigits* element)</signature>
<elmentName>MinimumNumberOfDigits</elmentName>
<asnElementName>minimumNumberOfDigits</asnElementName>
<elementTypeName>MinimumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMinimumNumberOfDigits</name>
<signature>void SetMinimumNumberOfDigits(const MinimumNumberOfDigits&amp; element)</signature>
<elementName>MinimumNumberOfDigits</elementName>
<asnElementName>minimumNumberOfDigits</asnElementName>
<elementTypeName>MinimumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMinimumNumberOfDigits</name>
<signature>const MinimumNumberOfDigits&amp; GetMinimumNumberOfDigits() const</signature>
<elementName>MinimumNumberOfDigits</elementName>
<asnElementName>minimumNumberOfDigits</asnElementName>
<elementTypeName>MinimumNumberOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetTypeOfRequestedInfo</name>
<signature>void SetTypeOfRequestedInfo(InfoType* element)</signature>
<elmentName>TypeOfRequestedInfo</elmentName>
<asnElementName>typeOfRequestedInfo</asnElementName>
<elementTypeName>InfoType</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTypeOfRequestedInfo</name>
<signature>void SetTypeOfRequestedInfo(const InfoType&amp; element)</signature>
<elementName>TypeOfRequestedInfo</elementName>
<asnElementName>typeOfRequestedInfo</asnElementName>
<elementTypeName>InfoType</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTypeOfRequestedInfo</name>
<signature>const InfoType&amp; GetTypeOfRequestedInfo() const</signature>
<elementName>TypeOfRequestedInfo</elementName>
<asnElementName>typeOfRequestedInfo</asnElementName>
<elementTypeName>InfoType</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetNumberOfAllowedRetries</name>
<signature>void SetNumberOfAllowedRetries(NumberOfAllowedRetries* element)</signature>
<elmentName>NumberOfAllowedRetries</elmentName>
<asnElementName>numberOfAllowedRetries</asnElementName>
<elementTypeName>NumberOfAllowedRetries</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNumberOfAllowedRetries</name>
<signature>void SetNumberOfAllowedRetries(const NumberOfAllowedRetries&amp; element)</signature>
<elementName>NumberOfAllowedRetries</elementName>
<asnElementName>numberOfAllowedRetries</asnElementName>
<elementTypeName>NumberOfAllowedRetries</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNumberOfAllowedRetries</name>
<signature>const NumberOfAllowedRetries&amp; GetNumberOfAllowedRetries() const</signature>
<elementName>NumberOfAllowedRetries</elementName>
<asnElementName>numberOfAllowedRetries</asnElementName>
<elementTypeName>NumberOfAllowedRetries</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- Constraints information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>Constraints ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    maximumNumberOfDigits [1] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    minimumNumberOfDigits [2] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    typeOfRequestedInfo [3] IMPLICIT InfoType -- [linked] -- DEFAULT numericString -- [enum value] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    numberOfAllowedRetries [4] IMPLICIT INTEGER   DEFAULT numericString -- [enum value] --</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

