<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>ContinuationReference</className>
<asnTypeName>ContinuationReference</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetTargetObject</name>
<signature>void SetTargetObject(Name* element)</signature>
<elmentName>TargetObject</elmentName>
<asnElementName>targetObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTargetObject</name>
<signature>void SetTargetObject(const Name&amp; element)</signature>
<elementName>TargetObject</elementName>
<asnElementName>targetObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTargetObject</name>
<signature>const Name&amp; GetTargetObject() const</signature>
<elementName>TargetObject</elementName>
<asnElementName>targetObject</asnElementName>
<elementTypeName>Name</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAliasedRDNs</name>
<signature>void SetAliasedRDNs(AliasedRDNs* element)</signature>
<elmentName>AliasedRDNs</elmentName>
<asnElementName>aliasedRDNs</asnElementName>
<elementTypeName>AliasedRDNs</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAliasedRDNs</name>
<signature>void SetAliasedRDNs(const AliasedRDNs&amp; element)</signature>
<elementName>AliasedRDNs</elementName>
<asnElementName>aliasedRDNs</asnElementName>
<elementTypeName>AliasedRDNs</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAliasedRDNs</name>
<signature>const AliasedRDNs&amp; GetAliasedRDNs() const</signature>
<elementName>AliasedRDNs</elementName>
<asnElementName>aliasedRDNs</asnElementName>
<elementTypeName>AliasedRDNs</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAliasedRDNs</name>
<signature>bool OptionAliasedRDNs() const</signature>
<elementName>AliasedRDNs</elementName>
<asnElementName>aliasedRDNs</asnElementName>
<elementTypeName>AliasedRDNs</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOperationProgress</name>
<signature>void SetOperationProgress(OperationProgress* element)</signature>
<elmentName>OperationProgress</elmentName>
<asnElementName>operationProgress</asnElementName>
<elementTypeName>OperationProgress</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOperationProgress</name>
<signature>void SetOperationProgress(const OperationProgress&amp; element)</signature>
<elementName>OperationProgress</elementName>
<asnElementName>operationProgress</asnElementName>
<elementTypeName>OperationProgress</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOperationProgress</name>
<signature>const OperationProgress&amp; GetOperationProgress() const</signature>
<elementName>OperationProgress</elementName>
<asnElementName>operationProgress</asnElementName>
<elementTypeName>OperationProgress</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetRdnsResolved</name>
<signature>void SetRdnsResolved(RdnsResolved* element)</signature>
<elmentName>RdnsResolved</elmentName>
<asnElementName>rdnsResolved</asnElementName>
<elementTypeName>RdnsResolved</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRdnsResolved</name>
<signature>void SetRdnsResolved(const RdnsResolved&amp; element)</signature>
<elementName>RdnsResolved</elementName>
<asnElementName>rdnsResolved</asnElementName>
<elementTypeName>RdnsResolved</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRdnsResolved</name>
<signature>const RdnsResolved&amp; GetRdnsResolved() const</signature>
<elementName>RdnsResolved</elementName>
<asnElementName>rdnsResolved</asnElementName>
<elementTypeName>RdnsResolved</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRdnsResolved</name>
<signature>bool OptionRdnsResolved() const</signature>
<elementName>RdnsResolved</elementName>
<asnElementName>rdnsResolved</asnElementName>
<elementTypeName>RdnsResolved</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReferenceType</name>
<signature>void SetReferenceType(ReferenceType* element)</signature>
<elmentName>ReferenceType</elmentName>
<asnElementName>referenceType</asnElementName>
<elementTypeName>ReferenceType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReferenceType</name>
<signature>void SetReferenceType(const ReferenceType&amp; element)</signature>
<elementName>ReferenceType</elementName>
<asnElementName>referenceType</asnElementName>
<elementTypeName>ReferenceType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReferenceType</name>
<signature>const ReferenceType&amp; GetReferenceType() const</signature>
<elementName>ReferenceType</elementName>
<asnElementName>referenceType</asnElementName>
<elementTypeName>ReferenceType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReferenceType</name>
<signature>bool OptionReferenceType() const</signature>
<elementName>ReferenceType</elementName>
<asnElementName>referenceType</asnElementName>
<elementTypeName>ReferenceType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAccessPoints</name>
<signature>void SetAccessPoints(AccessPoints* element)</signature>
<elmentName>AccessPoints</elmentName>
<asnElementName>accessPoints</asnElementName>
<elementTypeName>AccessPoints</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAccessPoints</name>
<signature>void SetAccessPoints(const AccessPoints&amp; element)</signature>
<elementName>AccessPoints</elementName>
<asnElementName>accessPoints</asnElementName>
<elementTypeName>AccessPoints</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAccessPoints</name>
<signature>const AccessPoints&amp; GetAccessPoints() const</signature>
<elementName>AccessPoints</elementName>
<asnElementName>accessPoints</asnElementName>
<elementTypeName>AccessPoints</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ContinuationReference information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ContinuationReference ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    targetObject [0] IMPLICIT Name -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    aliasedRDNs [1] IMPLICIT INTEGER OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    operationProgress [2] IMPLICIT OperationProgress -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    rdnsResolved [3] IMPLICIT INTEGER OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    referenceType [4] IMPLICIT ReferenceType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    accessPoints [5] IMPLICIT SET OF AccessPoint -- [linked] --</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

