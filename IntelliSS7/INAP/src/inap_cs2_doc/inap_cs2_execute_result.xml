<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSet>

<className>ExecuteResult</className>
<asnTypeName>ExecuteResult</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetMethod_id</name>
<signature>void SetMethod_id(Method_id* element)</signature>
<elmentName>Method_id</elmentName>
<asnElementName>method-id</asnElementName>
<elementTypeName>Method_id</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMethod_id</name>
<signature>void SetMethod_id(const Method_id&amp; element)</signature>
<elementName>Method_id</elementName>
<asnElementName>method-id</asnElementName>
<elementTypeName>Method_id</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMethod_id</name>
<signature>const Method_id&amp; GetMethod_id() const</signature>
<elementName>Method_id</elementName>
<asnElementName>method-id</asnElementName>
<elementTypeName>Method_id</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetOutput_assertions</name>
<signature>void SetOutput_assertions(Output_assertions* element)</signature>
<elmentName>Output_assertions</elmentName>
<asnElementName>output-assertions</asnElementName>
<elementTypeName>Output_assertions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOutput_assertions</name>
<signature>void SetOutput_assertions(const Output_assertions&amp; element)</signature>
<elementName>Output_assertions</elementName>
<asnElementName>output-assertions</asnElementName>
<elementTypeName>Output_assertions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOutput_assertions</name>
<signature>const Output_assertions&amp; GetOutput_assertions() const</signature>
<elementName>Output_assertions</elementName>
<asnElementName>output-assertions</asnElementName>
<elementTypeName>Output_assertions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOutput_assertions</name>
<signature>bool OptionOutput_assertions() const</signature>
<elementName>Output_assertions</elementName>
<asnElementName>output-assertions</asnElementName>
<elementTypeName>Output_assertions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSpecific_output</name>
<signature>void SetSpecific_output(SpecificOutput* element)</signature>
<elmentName>Specific_output</elmentName>
<asnElementName>specific-output</asnElementName>
<elementTypeName>SpecificOutput</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSpecific_output</name>
<signature>void SetSpecific_output(const SpecificOutput&amp; element)</signature>
<elementName>Specific_output</elementName>
<asnElementName>specific-output</asnElementName>
<elementTypeName>SpecificOutput</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSpecific_output</name>
<signature>const SpecificOutput&amp; GetSpecific_output() const</signature>
<elementName>Specific_output</elementName>
<asnElementName>specific-output</asnElementName>
<elementTypeName>SpecificOutput</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSpecific_output</name>
<signature>bool OptionSpecific_output() const</signature>
<elementName>Specific_output</elementName>
<asnElementName>specific-output</asnElementName>
<elementTypeName>SpecificOutput</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ExecuteResult information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ExecuteResult ::= SET</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    method-id [1] IMPLICIT OBJECT IDENTIFIER,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    output-assertions [2] IMPLICIT SEQUENCE OF AttributeTypeAndValue -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    specific-output [3] IMPLICIT SpecificOutput -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSet>

</asnType>

