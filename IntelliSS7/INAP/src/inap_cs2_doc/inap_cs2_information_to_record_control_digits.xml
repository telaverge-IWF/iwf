<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>InformationToRecord::ControlDigits</className>
<asnTypeName>InformationToRecord::controlDigits</asnTypeName>
<moduleName>INAP_CS2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetEndOfRecordingDigit</name>
<signature>void SetEndOfRecordingDigit(EndOfRecordingDigit* element)</signature>
<elmentName>EndOfRecordingDigit</elmentName>
<asnElementName>endOfRecordingDigit</asnElementName>
<elementTypeName>EndOfRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEndOfRecordingDigit</name>
<signature>void SetEndOfRecordingDigit(const EndOfRecordingDigit&amp; element)</signature>
<elementName>EndOfRecordingDigit</elementName>
<asnElementName>endOfRecordingDigit</asnElementName>
<elementTypeName>EndOfRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEndOfRecordingDigit</name>
<signature>const EndOfRecordingDigit&amp; GetEndOfRecordingDigit() const</signature>
<elementName>EndOfRecordingDigit</elementName>
<asnElementName>endOfRecordingDigit</asnElementName>
<elementTypeName>EndOfRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEndOfRecordingDigit</name>
<signature>bool OptionEndOfRecordingDigit() const</signature>
<elementName>EndOfRecordingDigit</elementName>
<asnElementName>endOfRecordingDigit</asnElementName>
<elementTypeName>EndOfRecordingDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCancelDigit</name>
<signature>void SetCancelDigit(CancelDigit* element)</signature>
<elmentName>CancelDigit</elmentName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCancelDigit</name>
<signature>void SetCancelDigit(const CancelDigit&amp; element)</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCancelDigit</name>
<signature>const CancelDigit&amp; GetCancelDigit() const</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCancelDigit</name>
<signature>bool OptionCancelDigit() const</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReplayDigit</name>
<signature>void SetReplayDigit(ReplayDigit* element)</signature>
<elmentName>ReplayDigit</elmentName>
<asnElementName>replayDigit</asnElementName>
<elementTypeName>ReplayDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReplayDigit</name>
<signature>void SetReplayDigit(const ReplayDigit&amp; element)</signature>
<elementName>ReplayDigit</elementName>
<asnElementName>replayDigit</asnElementName>
<elementTypeName>ReplayDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReplayDigit</name>
<signature>const ReplayDigit&amp; GetReplayDigit() const</signature>
<elementName>ReplayDigit</elementName>
<asnElementName>replayDigit</asnElementName>
<elementTypeName>ReplayDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReplayDigit</name>
<signature>bool OptionReplayDigit() const</signature>
<elementName>ReplayDigit</elementName>
<asnElementName>replayDigit</asnElementName>
<elementTypeName>ReplayDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRestartRecordingDigit</name>
<signature>void SetRestartRecordingDigit(RestartRecordingDigit* element)</signature>
<elmentName>RestartRecordingDigit</elmentName>
<asnElementName>restartRecordingDigit</asnElementName>
<elementTypeName>RestartRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRestartRecordingDigit</name>
<signature>void SetRestartRecordingDigit(const RestartRecordingDigit&amp; element)</signature>
<elementName>RestartRecordingDigit</elementName>
<asnElementName>restartRecordingDigit</asnElementName>
<elementTypeName>RestartRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRestartRecordingDigit</name>
<signature>const RestartRecordingDigit&amp; GetRestartRecordingDigit() const</signature>
<elementName>RestartRecordingDigit</elementName>
<asnElementName>restartRecordingDigit</asnElementName>
<elementTypeName>RestartRecordingDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRestartRecordingDigit</name>
<signature>bool OptionRestartRecordingDigit() const</signature>
<elementName>RestartRecordingDigit</elementName>
<asnElementName>restartRecordingDigit</asnElementName>
<elementTypeName>RestartRecordingDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRestartAllowed</name>
<signature>void SetRestartAllowed(RestartAllowed* element)</signature>
<elmentName>RestartAllowed</elmentName>
<asnElementName>restartAllowed</asnElementName>
<elementTypeName>RestartAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRestartAllowed</name>
<signature>void SetRestartAllowed(const RestartAllowed&amp; element)</signature>
<elementName>RestartAllowed</elementName>
<asnElementName>restartAllowed</asnElementName>
<elementTypeName>RestartAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRestartAllowed</name>
<signature>const RestartAllowed&amp; GetRestartAllowed() const</signature>
<elementName>RestartAllowed</elementName>
<asnElementName>restartAllowed</asnElementName>
<elementTypeName>RestartAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetReplayAllowed</name>
<signature>void SetReplayAllowed(ReplayAllowed* element)</signature>
<elmentName>ReplayAllowed</elmentName>
<asnElementName>replayAllowed</asnElementName>
<elementTypeName>ReplayAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReplayAllowed</name>
<signature>void SetReplayAllowed(const ReplayAllowed&amp; element)</signature>
<elementName>ReplayAllowed</elementName>
<asnElementName>replayAllowed</asnElementName>
<elementTypeName>ReplayAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReplayAllowed</name>
<signature>const ReplayAllowed&amp; GetReplayAllowed() const</signature>
<elementName>ReplayAllowed</elementName>
<asnElementName>replayAllowed</asnElementName>
<elementTypeName>ReplayAllowed</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- InformationToRecord information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>InformationToRecord ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    messageID [0] IMPLICIT ElementaryMessageID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    messageDeletionTimeOut [1] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    timeToRecord [3] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    controlDigits [4] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        endOfRecordingDigit [0] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        cancelDigit [1] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        replayDigit [2] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        restartRecordingDigit [3] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        restartAllowed [4] IMPLICIT BOOLEAN DEFAULT FALSE,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        replayAllowed [5] IMPLICIT BOOLEAN DEFAULT FALSE</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    }</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

