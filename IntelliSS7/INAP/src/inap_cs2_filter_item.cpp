//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <inap_cs2_filter_item.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>
#include <AsnDescObjectIdentifier.h>


using namespace its;
using namespace inap_cs2;




////////// Begin Nested Class(es) //////////


// Type AttributeValueAssertion is a reference => no code generated.

// Type Substrings is a reference => no code generated.

// Type AttributeValueAssertion is a reference => no code generated.

// Type AttributeValueAssertion is a reference => no code generated.

// Type AttributeType is a reference => no code generated.

// Type AttributeValueAssertion is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* FilterItem::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_INAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new FilterItem(&staticDesc));
        staticDesc._choiceList.push_back(GetEqualityStaticDescription());
        staticDesc._choiceList.push_back(GetSubstringsStaticDescription());
        staticDesc._choiceList.push_back(GetGreaterOrEqualStaticDescription());
        staticDesc._choiceList.push_back(GetLessOrEqualStaticDescription());
        staticDesc._choiceList.push_back(GetPresentStaticDescription());
        staticDesc._choiceList.push_back(GetApproximateMatchStaticDescription());
        staticDesc.SetTypeName("FilterItem");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetEqualityStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttributeValueAssertion(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = AttributeValueAssertion::GetTypeStaticDescription();
        staticDesc._elementVect[1] = AttributeValueAssertion::GetValueStaticDescription();
        staticDesc.SetNamedTypeName("equality");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetSubstringsStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Substrings(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._elementVect[0] = Substrings::GetTypeStaticDescription();
        staticDesc._elementVect[1] = Substrings::GetStringsStaticDescription();
        staticDesc.SetNamedTypeName("substrings");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetGreaterOrEqualStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttributeValueAssertion(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._elementVect[0] = AttributeValueAssertion::GetTypeStaticDescription();
        staticDesc._elementVect[1] = AttributeValueAssertion::GetValueStaticDescription();
        staticDesc.SetNamedTypeName("greaterOrEqual");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetLessOrEqualStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttributeValueAssertion(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._elementVect[0] = AttributeValueAssertion::GetTypeStaticDescription();
        staticDesc._elementVect[1] = AttributeValueAssertion::GetValueStaticDescription();
        staticDesc.SetNamedTypeName("lessOrEqual");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetPresentStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescObjectIdentifier staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttributeType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 4));
        staticDesc.SetNamedTypeName("present");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* FilterItem::GetApproximateMatchStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttributeValueAssertion(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._elementVect[0] = AttributeValueAssertion::GetTypeStaticDescription();
        staticDesc._elementVect[1] = AttributeValueAssertion::GetValueStaticDescription();
        staticDesc.SetNamedTypeName("approximateMatch");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





