//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FILTER_ITEM_H_)
#define _INAP_CS2_FILTER_ITEM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>

#include <inap_cs2_attribute_value_assertion.h>
#include <inap_cs2_substrings.h>
#include <inap_cs2_attribute_type.h>



namespace inap_cs2 {



class FilterItem : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::AttributeValueAssertion AttributeValueAssertion;


        typedef inap_cs2::Substrings Substrings;


        typedef inap_cs2::AttributeType AttributeType;


////////// End Nested Class(es) //////////

    FilterItem() : its::AsnChoice(false)
    {
        Initialize();
    }

    FilterItem(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    FilterItem(const FilterItem& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    FilterItem(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    FilterItem(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetEqualityStaticDescription();
    static its::AsnDescObject* GetSubstringsStaticDescription();
    static its::AsnDescObject* GetGreaterOrEqualStaticDescription();
    static its::AsnDescObject* GetLessOrEqualStaticDescription();
    static its::AsnDescObject* GetPresentStaticDescription();
    static its::AsnDescObject* GetApproximateMatchStaticDescription();

public:

    virtual ~FilterItem()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FilterItem(*this);
    }

    virtual std::string GetName() const
    { return "FilterItem"; }

    void SetChoiceEquality(AttributeValueAssertion* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetEqualityStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceEquality(const AttributeValueAssertion& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValueAssertion&>(choice);
        asnObject.SetDescription(GetEqualityStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceEquality() const
    {
        return Contains(GetEqualityStaticDescription()->TagIdentity());
    }

    const AttributeValueAssertion& GetChoiceEquality() const
    {
        ITS_REQUIRE(ChoiceEquality());
        return static_cast<const AttributeValueAssertion&> (GetChoice());
    }

    void SetChoiceSubstrings(Substrings* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSubstringsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSubstrings(const Substrings& choice)
    {
        its::AsnObject& asnObject = const_cast<Substrings&>(choice);
        asnObject.SetDescription(GetSubstringsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSubstrings() const
    {
        return Contains(GetSubstringsStaticDescription()->TagIdentity());
    }

    const Substrings& GetChoiceSubstrings() const
    {
        ITS_REQUIRE(ChoiceSubstrings());
        return static_cast<const Substrings&> (GetChoice());
    }

    void SetChoiceGreaterOrEqual(AttributeValueAssertion* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGreaterOrEqualStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGreaterOrEqual(const AttributeValueAssertion& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValueAssertion&>(choice);
        asnObject.SetDescription(GetGreaterOrEqualStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGreaterOrEqual() const
    {
        return Contains(GetGreaterOrEqualStaticDescription()->TagIdentity());
    }

    const AttributeValueAssertion& GetChoiceGreaterOrEqual() const
    {
        ITS_REQUIRE(ChoiceGreaterOrEqual());
        return static_cast<const AttributeValueAssertion&> (GetChoice());
    }

    void SetChoiceLessOrEqual(AttributeValueAssertion* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLessOrEqualStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLessOrEqual(const AttributeValueAssertion& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValueAssertion&>(choice);
        asnObject.SetDescription(GetLessOrEqualStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLessOrEqual() const
    {
        return Contains(GetLessOrEqualStaticDescription()->TagIdentity());
    }

    const AttributeValueAssertion& GetChoiceLessOrEqual() const
    {
        ITS_REQUIRE(ChoiceLessOrEqual());
        return static_cast<const AttributeValueAssertion&> (GetChoice());
    }

    void SetChoicePresent(AttributeType* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetPresentStaticDescription());
        SetChoice(choice);
    }

    void SetChoicePresent(const AttributeType& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeType&>(choice);
        asnObject.SetDescription(GetPresentStaticDescription());
        SetChoice(choice);
    }

    bool ChoicePresent() const
    {
        return Contains(GetPresentStaticDescription()->TagIdentity());
    }

    const AttributeType& GetChoicePresent() const
    {
        ITS_REQUIRE(ChoicePresent());
        return static_cast<const AttributeType&> (GetChoice());
    }

    void SetChoiceApproximateMatch(AttributeValueAssertion* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetApproximateMatchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceApproximateMatch(const AttributeValueAssertion& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValueAssertion&>(choice);
        asnObject.SetDescription(GetApproximateMatchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceApproximateMatch() const
    {
        return Contains(GetApproximateMatchStaticDescription()->TagIdentity());
    }

    const AttributeValueAssertion& GetChoiceApproximateMatch() const
    {
        ITS_REQUIRE(ChoiceApproximateMatch());
        return static_cast<const AttributeValueAssertion&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FILTER_ITEM_H_)

