//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_STRING_H_)
#define _INAP_CS2_STRING_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>

#include <inap_cs2_attribute_value.h>



namespace inap_cs2 {



class String : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::AttributeValue AttributeValue;


////////// End Nested Class(es) //////////

    String() : its::AsnChoice(false)
    {
        Initialize();
    }

    String(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    String(const String& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    String(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    String(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetInitialStaticDescription();
    static its::AsnDescObject* GetAnyStaticDescription();
    static its::AsnDescObject* GetFinalStaticDescription();

public:

    virtual ~String()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new String(*this);
    }

    virtual std::string GetName() const
    { return "String"; }

    void SetChoiceInitial(AttributeValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetInitialStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceInitial(const AttributeValue& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValue&>(choice);
        asnObject.SetDescription(GetInitialStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceInitial() const
    {
        return Contains(GetInitialStaticDescription()->TagIdentity());
    }

    const AttributeValue& GetChoiceInitial() const
    {
        ITS_REQUIRE(ChoiceInitial());
        return static_cast<const AttributeValue&> (GetChoice());
    }

    void SetChoiceAny(AttributeValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAnyStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAny(const AttributeValue& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValue&>(choice);
        asnObject.SetDescription(GetAnyStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAny() const
    {
        return Contains(GetAnyStaticDescription()->TagIdentity());
    }

    const AttributeValue& GetChoiceAny() const
    {
        ITS_REQUIRE(ChoiceAny());
        return static_cast<const AttributeValue&> (GetChoice());
    }

    void SetChoiceFinal(AttributeValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetFinalStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceFinal(const AttributeValue& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeValue&>(choice);
        asnObject.SetDescription(GetFinalStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceFinal() const
    {
        return Contains(GetFinalStaticDescription()->TagIdentity());
    }

    const AttributeValue& GetChoiceFinal() const
    {
        ITS_REQUIRE(ChoiceFinal());
        return static_cast<const AttributeValue&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_STRING_H_)

