//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CERTIFICATION_PATH_H_)
#define _INAP_CS2_CERTIFICATION_PATH_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_certificate.h>
#include <inap_cs2_certificate_pair.h>



namespace inap_cs2 {



class CertificationPath : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class TheCACertificates : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::CertificatePair CertificatePair;


    ////////// End Nested Class //////////

        TheCACertificates() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        TheCACertificates(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        TheCACertificates(const TheCACertificates& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        TheCACertificates(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCertificatePairStaticDescription();

    public:

        virtual ~TheCACertificates()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TheCACertificates(*this);
        }

        virtual std::string GetName() const
        { return "TheCACertificates"; }

        void AddElement(CertificatePair* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCertificatePairStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const CertificatePair& element)
        {
            its::AsnObject& asnObject = const_cast<CertificatePair&>(element);
            asnObject.SetDescription(GetCertificatePairStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const CertificatePair& ElementAt(int index) const
        {
            return static_cast<const CertificatePair&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::Certificate Certificate;


////////// End Nested Class(es) //////////

    CertificationPath() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CertificationPath(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CertificationPath(const CertificationPath& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CertificationPath(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUserCertificateStaticDescription();
    static its::AsnDescObject* GetTheCACertificatesStaticDescription();

public:

    virtual ~CertificationPath()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CertificationPath(*this);
    }

    virtual std::string GetName() const
    { return "CertificationPath"; }

    void SetUserCertificate(Certificate* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUserCertificateStaticDescription());
        AddElement(0, element);
    }

    void SetUserCertificate(const Certificate& element)
    {
        its::AsnObject& asnObject = const_cast<Certificate&>(element);
        asnObject.SetDescription(GetUserCertificateStaticDescription());
        AddElement(0, element);
    }

    const Certificate& GetUserCertificate() const
    {
        return static_cast<const Certificate&> (ElementAt(0));
    }

    void SetTheCACertificates(TheCACertificates* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTheCACertificatesStaticDescription());
        AddElement(1, element);
    }

    void SetTheCACertificates(const TheCACertificates& element)
    {
        its::AsnObject& asnObject = const_cast<TheCACertificates&>(element);
        asnObject.SetDescription(GetTheCACertificatesStaticDescription());
        AddElement(1, element);
    }

    bool OptionTheCACertificates() const
    {
        return Contains(1);
    }

    const TheCACertificates& GetTheCACertificates() const
    {
        ITS_REQUIRE(OptionTheCACertificates());
        return static_cast<const TheCACertificates&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CERTIFICATION_PATH_H_)

