//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_TERMINAL_TYPE_H_)
#define _INAP_CS2_TERMINAL_TYPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace inap_cs2 {



class TerminalType : public its::AsnEnumerated
{
public:

    TerminalType() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    TerminalType(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    TerminalType(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    TerminalType(const TerminalType& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    TerminalType(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    TerminalType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~TerminalType()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TerminalType(*this);
    }

    virtual std::string GetName() const
    { return "TerminalType"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        TERMINAL_TYPE_UNKNOWN = 0,
        TERMINAL_TYPE_DIAL_PULSE = 1,
        TERMINAL_TYPE_DTMF = 2,
        TERMINAL_TYPE_ISDN = 3,
        TERMINAL_TYPE_ISDN_NO_DTMF = 4,
        TERMINAL_TYPE_SPARE = 16

    };

    void SetUnknown()
    { _value = 0; }

    bool IsUnknown() const
    { return _value == 0; }

    void SetDialPulse()
    { _value = 1; }

    bool IsDialPulse() const
    { return _value == 1; }

    void SetDtmf()
    { _value = 2; }

    bool IsDtmf() const
    { return _value == 2; }

    void SetIsdn()
    { _value = 3; }

    bool IsIsdn() const
    { return _value == 3; }

    void SetIsdnNoDtmf()
    { _value = 4; }

    bool IsIsdnNoDtmf() const
    { return _value == 4; }

    void SetSpare()
    { _value = 16; }

    bool IsSpare() const
    { return _value == 16; }

};



} // namespace.

#endif    // !defined(_INAP_CS2_TERMINAL_TYPE_H_)

