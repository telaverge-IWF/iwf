//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_COUNTER_AND_VALUE_H_)
#define _INAP_CS2_COUNTER_AND_VALUE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>

#include <inap_cs2_counter_id.h>
#include <inap_cs2_integer4.h>



namespace inap_cs2 {



class CounterAndValue : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::CounterID CounterID;


        typedef inap_cs2::Integer4 Integer4;


////////// End Nested Class(es) //////////

    CounterAndValue() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CounterAndValue(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CounterAndValue(const CounterAndValue& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CounterAndValue(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCounterIDStaticDescription();
    static its::AsnDescObject* GetCounterValueStaticDescription();

public:

    virtual ~CounterAndValue()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CounterAndValue(*this);
    }

    virtual std::string GetName() const
    { return "CounterAndValue"; }

    void SetCounterID(CounterID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCounterIDStaticDescription());
        AddElement(0, element);
    }

    void SetCounterID(const CounterID& element)
    {
        its::AsnObject& asnObject = const_cast<CounterID&>(element);
        asnObject.SetDescription(GetCounterIDStaticDescription());
        AddElement(0, element);
    }

    const CounterID& GetCounterID() const
    {
        return static_cast<const CounterID&> (ElementAt(0));
    }

    void SetCounterValue(Integer4* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCounterValueStaticDescription());
        AddElement(1, element);
    }

    void SetCounterValue(const Integer4& element)
    {
        its::AsnObject& asnObject = const_cast<Integer4&>(element);
        asnObject.SetDescription(GetCounterValueStaticDescription());
        AddElement(1, element);
    }

    const Integer4& GetCounterValue() const
    {
        return static_cast<const Integer4&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_COUNTER_AND_VALUE_H_)

