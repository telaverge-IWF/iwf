//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_VALIDITY_H_)
#define _INAP_CS2_VALIDITY_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBaseString.h>

#include <UTCTime.h>



namespace inap_cs2 {



class Validity : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


    typedef its::UTCTime UTCTime;


////////// End Nested Class(es) //////////

    Validity() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    Validity(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    Validity(const Validity& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Validity(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNotBeforeStaticDescription();
    static its::AsnDescObject* GetNotAfterStaticDescription();

public:

    virtual ~Validity()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Validity(*this);
    }

    virtual std::string GetName() const
    { return "Validity"; }

    void SetNotBefore(UTCTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNotBeforeStaticDescription());
        AddElement(0, element);
    }

    void SetNotBefore(const UTCTime& element)
    {
        its::AsnObject& asnObject = const_cast<UTCTime&>(element);
        asnObject.SetDescription(GetNotBeforeStaticDescription());
        AddElement(0, element);
    }

    const UTCTime& GetNotBefore() const
    {
        return static_cast<const UTCTime&> (ElementAt(0));
    }

    void SetNotAfter(UTCTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNotAfterStaticDescription());
        AddElement(1, element);
    }

    void SetNotAfter(const UTCTime& element)
    {
        its::AsnObject& asnObject = const_cast<UTCTime&>(element);
        asnObject.SetDescription(GetNotAfterStaticDescription());
        AddElement(1, element);
    }

    const UTCTime& GetNotAfter() const
    {
        return static_cast<const UTCTime&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_VALIDITY_H_)

