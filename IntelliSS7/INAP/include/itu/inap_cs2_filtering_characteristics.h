//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FILTERING_CHARACTERISTICS_H_)
#define _INAP_CS2_FILTERING_CHARACTERISTICS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>

#include <inap_cs2_integer4.h>



namespace inap_cs2 {



class FilteringCharacteristics : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class Interval : public its::AsnInteger
    {
    public:

        Interval() : its::AsnInteger(false)
        {
            Initialize();
        }

        Interval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        Interval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        Interval(const Interval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        Interval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        Interval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Interval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Interval(*this);
        }

        virtual std::string GetName() const
        { return "Interval"; }

    };


        typedef inap_cs2::Integer4 Integer4;


////////// End Nested Class(es) //////////

    FilteringCharacteristics() : its::AsnChoice(false)
    {
        Initialize();
    }

    FilteringCharacteristics(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    FilteringCharacteristics(const FilteringCharacteristics& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    FilteringCharacteristics(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    FilteringCharacteristics(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetIntervalStaticDescription();
    static its::AsnDescObject* GetNumberOfCallsStaticDescription();

public:

    virtual ~FilteringCharacteristics()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FilteringCharacteristics(*this);
    }

    virtual std::string GetName() const
    { return "FilteringCharacteristics"; }

    void SetChoiceInterval(Interval* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetIntervalStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceInterval(const Interval& choice)
    {
        its::AsnObject& asnObject = const_cast<Interval&>(choice);
        asnObject.SetDescription(GetIntervalStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceInterval() const
    {
        return Contains(GetIntervalStaticDescription()->TagIdentity());
    }

    const Interval& GetChoiceInterval() const
    {
        ITS_REQUIRE(ChoiceInterval());
        return static_cast<const Interval&> (GetChoice());
    }

    void SetChoiceNumberOfCalls(Integer4* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNumberOfCallsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNumberOfCalls(const Integer4& choice)
    {
        its::AsnObject& asnObject = const_cast<Integer4&>(choice);
        asnObject.SetDescription(GetNumberOfCallsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNumberOfCalls() const
    {
        return Contains(GetNumberOfCallsStaticDescription()->TagIdentity());
    }

    const Integer4& GetChoiceNumberOfCalls() const
    {
        ITS_REQUIRE(ChoiceNumberOfCalls());
        return static_cast<const Integer4&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FILTERING_CHARACTERISTICS_H_)

