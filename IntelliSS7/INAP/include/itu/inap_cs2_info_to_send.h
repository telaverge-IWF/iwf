//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_INFO_TO_SEND_H_)
#define _INAP_CS2_INFO_TO_SEND_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnBaseString.h>

#include <inap_cs2_message_id.h>
#include <inap_cs2_tone_id.h>
#include <inap_cs2_display_information.h>



namespace inap_cs2 {



class InfoToSend : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::MessageID MessageID;


        typedef inap_cs2::ToneId ToneId;


        typedef inap_cs2::DisplayInformation DisplayInformation;


////////// End Nested Class(es) //////////

    InfoToSend() : its::AsnChoice(false)
    {
        Initialize();
    }

    InfoToSend(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    InfoToSend(const InfoToSend& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    InfoToSend(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    InfoToSend(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMessageIDStaticDescription();
    static its::AsnDescObject* GetToneIdStaticDescription();
    static its::AsnDescObject* GetDisplayInformationStaticDescription();

public:

    virtual ~InfoToSend()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InfoToSend(*this);
    }

    virtual std::string GetName() const
    { return "InfoToSend"; }

    void SetChoiceMessageID(MessageID* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMessageIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMessageID(const MessageID& choice)
    {
        its::AsnObject& asnObject = const_cast<MessageID&>(choice);
        asnObject.SetDescription(GetMessageIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMessageID() const
    {
        return Contains(GetMessageIDStaticDescription()->TagIdentity());
    }

    const MessageID& GetChoiceMessageID() const
    {
        ITS_REQUIRE(ChoiceMessageID());
        return static_cast<const MessageID&> (GetChoice());
    }

    void SetChoiceToneId(ToneId* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetToneIdStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceToneId(const ToneId& choice)
    {
        its::AsnObject& asnObject = const_cast<ToneId&>(choice);
        asnObject.SetDescription(GetToneIdStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceToneId() const
    {
        return Contains(GetToneIdStaticDescription()->TagIdentity());
    }

    const ToneId& GetChoiceToneId() const
    {
        ITS_REQUIRE(ChoiceToneId());
        return static_cast<const ToneId&> (GetChoice());
    }

    void SetChoiceDisplayInformation(DisplayInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDisplayInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDisplayInformation(const DisplayInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<DisplayInformation&>(choice);
        asnObject.SetDescription(GetDisplayInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDisplayInformation() const
    {
        return Contains(GetDisplayInformationStaticDescription()->TagIdentity());
    }

    const DisplayInformation& GetChoiceDisplayInformation() const
    {
        ITS_REQUIRE(ChoiceDisplayInformation());
        return static_cast<const DisplayInformation&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_INFO_TO_SEND_H_)

