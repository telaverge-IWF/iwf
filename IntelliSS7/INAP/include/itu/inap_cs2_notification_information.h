//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_NOTIFICATION_INFORMATION_H_)
#define _INAP_CS2_NOTIFICATION_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <inap_cs2_cause.h>
#include <inap_cs2_date_and_time.h>
#include <inap_cs2_invokable_service.h>
#include <inap_cs2_called_party_number.h>



namespace inap_cs2 {



class NotificationInformation : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class UserAbandonSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        UserAbandonSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        UserAbandonSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        UserAbandonSpecificInfo(const UserAbandonSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        UserAbandonSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UserAbandonSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UserAbandonSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "UserAbandonSpecificInfo"; }

    };



    class CallFailureSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        CallFailureSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        CallFailureSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        CallFailureSpecificInfo(const CallFailureSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CallFailureSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetFailureCauseStaticDescription();

    public:

        virtual ~CallFailureSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallFailureSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CallFailureSpecificInfo"; }

        void SetFailureCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        void SetFailureCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionFailureCause() const
        {
            return Contains(0);
        }

        const Cause& GetFailureCause() const
        {
            ITS_REQUIRE(OptionFailureCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class NoReplySpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        NoReplySpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        NoReplySpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        NoReplySpecificInfo(const NoReplySpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        NoReplySpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NoReplySpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NoReplySpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "NoReplySpecificInfo"; }

    };



    class CallReleaseSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


            typedef inap_cs2::DateAndTime DateAndTime;


    ////////// End Nested Class(es) //////////

        CallReleaseSpecificInfo() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        CallReleaseSpecificInfo(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        CallReleaseSpecificInfo(const CallReleaseSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CallReleaseSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();
        static its::AsnDescObject* GetTimeStampStaticDescription();

    public:

        virtual ~CallReleaseSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallReleaseSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CallReleaseSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

        void SetTimeStamp(DateAndTime* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeStampStaticDescription());
            AddElement(1, element);
        }

        void SetTimeStamp(const DateAndTime& element)
        {
            its::AsnObject& asnObject = const_cast<DateAndTime&>(element);
            asnObject.SetDescription(GetTimeStampStaticDescription());
            AddElement(1, element);
        }

        bool OptionTimeStamp() const
        {
            return Contains(1);
        }

        const DateAndTime& GetTimeStamp() const
        {
            ITS_REQUIRE(OptionTimeStamp());
            return static_cast<const DateAndTime&> (ElementAt(1));
        }

    };



    class SsInvocationSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::InvokableService InvokableService;


    ////////// End Nested Class(es) //////////

        SsInvocationSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        SsInvocationSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        SsInvocationSpecificInfo(const SsInvocationSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        SsInvocationSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetInvokedServiceStaticDescription();

    public:

        virtual ~SsInvocationSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SsInvocationSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "SsInvocationSpecificInfo"; }

        void SetInvokedService(InvokableService* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetInvokedServiceStaticDescription());
            AddElement(0, element);
        }

        void SetInvokedService(const InvokableService& element)
        {
            its::AsnObject& asnObject = const_cast<InvokableService&>(element);
            asnObject.SetDescription(GetInvokedServiceStaticDescription());
            AddElement(0, element);
        }

        const InvokableService& GetInvokedService() const
        {
            return static_cast<const InvokableService&> (ElementAt(0));
        }

    };



    class CreditLimitReachedSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::DateAndTime DateAndTime;


    ////////// End Nested Class(es) //////////

        CreditLimitReachedSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        CreditLimitReachedSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        CreditLimitReachedSpecificInfo(const CreditLimitReachedSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CreditLimitReachedSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetTimeStampStaticDescription();

    public:

        virtual ~CreditLimitReachedSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CreditLimitReachedSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CreditLimitReachedSpecificInfo"; }

        void SetTimeStamp(DateAndTime* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        void SetTimeStamp(const DateAndTime& element)
        {
            its::AsnObject& asnObject = const_cast<DateAndTime&>(element);
            asnObject.SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        bool OptionTimeStamp() const
        {
            return Contains(0);
        }

        const DateAndTime& GetTimeStamp() const
        {
            ITS_REQUIRE(OptionTimeStamp());
            return static_cast<const DateAndTime&> (ElementAt(0));
        }

    };



    class CallDurationSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::DateAndTime DateAndTime;


    ////////// End Nested Class(es) //////////

        CallDurationSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        CallDurationSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        CallDurationSpecificInfo(const CallDurationSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CallDurationSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetTimeStampStaticDescription();

    public:

        virtual ~CallDurationSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallDurationSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CallDurationSpecificInfo"; }

        void SetTimeStamp(DateAndTime* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        void SetTimeStamp(const DateAndTime& element)
        {
            its::AsnObject& asnObject = const_cast<DateAndTime&>(element);
            asnObject.SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        bool OptionTimeStamp() const
        {
            return Contains(0);
        }

        const DateAndTime& GetTimeStamp() const
        {
            ITS_REQUIRE(OptionTimeStamp());
            return static_cast<const DateAndTime&> (ElementAt(0));
        }

    };



    class CalledNumberSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::CalledPartyNumber CalledPartyNumber;


    ////////// End Nested Class(es) //////////

        CalledNumberSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        CalledNumberSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        CalledNumberSpecificInfo(const CalledNumberSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CalledNumberSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCalledNumberStaticDescription();

    public:

        virtual ~CalledNumberSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CalledNumberSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CalledNumberSpecificInfo"; }

        void SetCalledNumber(CalledPartyNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCalledNumberStaticDescription());
            AddElement(0, element);
        }

        void SetCalledNumber(const CalledPartyNumber& element)
        {
            its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
            asnObject.SetDescription(GetCalledNumberStaticDescription());
            AddElement(0, element);
        }

        bool OptionCalledNumber() const
        {
            return Contains(0);
        }

        const CalledPartyNumber& GetCalledNumber() const
        {
            ITS_REQUIRE(OptionCalledNumber());
            return static_cast<const CalledPartyNumber&> (ElementAt(0));
        }

    };



    class AnsweredCallSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::DateAndTime DateAndTime;


    ////////// End Nested Class(es) //////////

        AnsweredCallSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        AnsweredCallSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        AnsweredCallSpecificInfo(const AnsweredCallSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AnsweredCallSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetTimeStampStaticDescription();

    public:

        virtual ~AnsweredCallSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AnsweredCallSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "AnsweredCallSpecificInfo"; }

        void SetTimeStamp(DateAndTime* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        void SetTimeStamp(const DateAndTime& element)
        {
            its::AsnObject& asnObject = const_cast<DateAndTime&>(element);
            asnObject.SetDescription(GetTimeStampStaticDescription());
            AddElement(0, element);
        }

        bool OptionTimeStamp() const
        {
            return Contains(0);
        }

        const DateAndTime& GetTimeStamp() const
        {
            ITS_REQUIRE(OptionTimeStamp());
            return static_cast<const DateAndTime&> (ElementAt(0));
        }

    };


////////// End Nested Class(es) //////////

    NotificationInformation() : its::AsnChoice(false)
    {
        Initialize();
    }

    NotificationInformation(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    NotificationInformation(const NotificationInformation& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    NotificationInformation(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    NotificationInformation(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUserAbandonSpecificInfoStaticDescription();
    static its::AsnDescObject* GetCallFailureSpecificInfoStaticDescription();
    static its::AsnDescObject* GetNoReplySpecificInfoStaticDescription();
    static its::AsnDescObject* GetCallReleaseSpecificInfoStaticDescription();
    static its::AsnDescObject* GetSsInvocationSpecificInfoStaticDescription();
    static its::AsnDescObject* GetCreditLimitReachedSpecificInfoStaticDescription();
    static its::AsnDescObject* GetCallDurationSpecificInfoStaticDescription();
    static its::AsnDescObject* GetCalledNumberSpecificInfoStaticDescription();
    static its::AsnDescObject* GetAnsweredCallSpecificInfoStaticDescription();

public:

    virtual ~NotificationInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new NotificationInformation(*this);
    }

    virtual std::string GetName() const
    { return "NotificationInformation"; }

    void SetChoiceUserAbandonSpecificInfo(UserAbandonSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetUserAbandonSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceUserAbandonSpecificInfo(const UserAbandonSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<UserAbandonSpecificInfo&>(choice);
        asnObject.SetDescription(GetUserAbandonSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceUserAbandonSpecificInfo() const
    {
        return Contains(GetUserAbandonSpecificInfoStaticDescription()->TagIdentity());
    }

    const UserAbandonSpecificInfo& GetChoiceUserAbandonSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceUserAbandonSpecificInfo());
        return static_cast<const UserAbandonSpecificInfo&> (GetChoice());
    }

    void SetChoiceCallFailureSpecificInfo(CallFailureSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallFailureSpecificInfo(const CallFailureSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CallFailureSpecificInfo&>(choice);
        asnObject.SetDescription(GetCallFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallFailureSpecificInfo() const
    {
        return Contains(GetCallFailureSpecificInfoStaticDescription()->TagIdentity());
    }

    const CallFailureSpecificInfo& GetChoiceCallFailureSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCallFailureSpecificInfo());
        return static_cast<const CallFailureSpecificInfo&> (GetChoice());
    }

    void SetChoiceNoReplySpecificInfo(NoReplySpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNoReplySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNoReplySpecificInfo(const NoReplySpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<NoReplySpecificInfo&>(choice);
        asnObject.SetDescription(GetNoReplySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNoReplySpecificInfo() const
    {
        return Contains(GetNoReplySpecificInfoStaticDescription()->TagIdentity());
    }

    const NoReplySpecificInfo& GetChoiceNoReplySpecificInfo() const
    {
        ITS_REQUIRE(ChoiceNoReplySpecificInfo());
        return static_cast<const NoReplySpecificInfo&> (GetChoice());
    }

    void SetChoiceCallReleaseSpecificInfo(CallReleaseSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallReleaseSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallReleaseSpecificInfo(const CallReleaseSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CallReleaseSpecificInfo&>(choice);
        asnObject.SetDescription(GetCallReleaseSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallReleaseSpecificInfo() const
    {
        return Contains(GetCallReleaseSpecificInfoStaticDescription()->TagIdentity());
    }

    const CallReleaseSpecificInfo& GetChoiceCallReleaseSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCallReleaseSpecificInfo());
        return static_cast<const CallReleaseSpecificInfo&> (GetChoice());
    }

    void SetChoiceSsInvocationSpecificInfo(SsInvocationSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSsInvocationSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSsInvocationSpecificInfo(const SsInvocationSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<SsInvocationSpecificInfo&>(choice);
        asnObject.SetDescription(GetSsInvocationSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSsInvocationSpecificInfo() const
    {
        return Contains(GetSsInvocationSpecificInfoStaticDescription()->TagIdentity());
    }

    const SsInvocationSpecificInfo& GetChoiceSsInvocationSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceSsInvocationSpecificInfo());
        return static_cast<const SsInvocationSpecificInfo&> (GetChoice());
    }

    void SetChoiceCreditLimitReachedSpecificInfo(CreditLimitReachedSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCreditLimitReachedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCreditLimitReachedSpecificInfo(const CreditLimitReachedSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CreditLimitReachedSpecificInfo&>(choice);
        asnObject.SetDescription(GetCreditLimitReachedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCreditLimitReachedSpecificInfo() const
    {
        return Contains(GetCreditLimitReachedSpecificInfoStaticDescription()->TagIdentity());
    }

    const CreditLimitReachedSpecificInfo& GetChoiceCreditLimitReachedSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCreditLimitReachedSpecificInfo());
        return static_cast<const CreditLimitReachedSpecificInfo&> (GetChoice());
    }

    void SetChoiceCallDurationSpecificInfo(CallDurationSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallDurationSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallDurationSpecificInfo(const CallDurationSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CallDurationSpecificInfo&>(choice);
        asnObject.SetDescription(GetCallDurationSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallDurationSpecificInfo() const
    {
        return Contains(GetCallDurationSpecificInfoStaticDescription()->TagIdentity());
    }

    const CallDurationSpecificInfo& GetChoiceCallDurationSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCallDurationSpecificInfo());
        return static_cast<const CallDurationSpecificInfo&> (GetChoice());
    }

    void SetChoiceCalledNumberSpecificInfo(CalledNumberSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCalledNumberSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCalledNumberSpecificInfo(const CalledNumberSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CalledNumberSpecificInfo&>(choice);
        asnObject.SetDescription(GetCalledNumberSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCalledNumberSpecificInfo() const
    {
        return Contains(GetCalledNumberSpecificInfoStaticDescription()->TagIdentity());
    }

    const CalledNumberSpecificInfo& GetChoiceCalledNumberSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCalledNumberSpecificInfo());
        return static_cast<const CalledNumberSpecificInfo&> (GetChoice());
    }

    void SetChoiceAnsweredCallSpecificInfo(AnsweredCallSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAnsweredCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAnsweredCallSpecificInfo(const AnsweredCallSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<AnsweredCallSpecificInfo&>(choice);
        asnObject.SetDescription(GetAnsweredCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAnsweredCallSpecificInfo() const
    {
        return Contains(GetAnsweredCallSpecificInfoStaticDescription()->TagIdentity());
    }

    const AnsweredCallSpecificInfo& GetChoiceAnsweredCallSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceAnsweredCallSpecificInfo());
        return static_cast<const AnsweredCallSpecificInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_NOTIFICATION_INFORMATION_H_)

