//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_EVENT_SPECIFIC_INFORMATION_BCSM_H_)
#define _INAP_CS2_EVENT_SPECIFIC_INFORMATION_BCSM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <inap_cs2_called_party_number.h>
#include <inap_cs2_cause.h>
#include <inap_cs2_backward_gvns.h>
#include <inap_cs2_integer4.h>
#include <inap_cs2_mid_call_info.h>



namespace inap_cs2 {



class EventSpecificInformationBCSM : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class CollectedInfoSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::CalledPartyNumber CalledPartyNumber;


    ////////// End Nested Class(es) //////////

        CollectedInfoSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        CollectedInfoSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        CollectedInfoSpecificInfo(const CollectedInfoSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CollectedInfoSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCalledPartynumberStaticDescription();

    public:

        virtual ~CollectedInfoSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CollectedInfoSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "CollectedInfoSpecificInfo"; }

        void SetCalledPartynumber(CalledPartyNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCalledPartynumberStaticDescription());
            AddElement(0, element);
        }

        void SetCalledPartynumber(const CalledPartyNumber& element)
        {
            its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
            asnObject.SetDescription(GetCalledPartynumberStaticDescription());
            AddElement(0, element);
        }

        const CalledPartyNumber& GetCalledPartynumber() const
        {
            return static_cast<const CalledPartyNumber&> (ElementAt(0));
        }

    };



    class AnalysedInfoSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::CalledPartyNumber CalledPartyNumber;


    ////////// End Nested Class(es) //////////

        AnalysedInfoSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        AnalysedInfoSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        AnalysedInfoSpecificInfo(const AnalysedInfoSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AnalysedInfoSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCalledPartynumberStaticDescription();

    public:

        virtual ~AnalysedInfoSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AnalysedInfoSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "AnalysedInfoSpecificInfo"; }

        void SetCalledPartynumber(CalledPartyNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCalledPartynumberStaticDescription());
            AddElement(0, element);
        }

        void SetCalledPartynumber(const CalledPartyNumber& element)
        {
            its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
            asnObject.SetDescription(GetCalledPartynumberStaticDescription());
            AddElement(0, element);
        }

        const CalledPartyNumber& GetCalledPartynumber() const
        {
            return static_cast<const CalledPartyNumber&> (ElementAt(0));
        }

    };



    class RouteSelectFailureSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        RouteSelectFailureSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        RouteSelectFailureSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        RouteSelectFailureSpecificInfo(const RouteSelectFailureSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        RouteSelectFailureSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetFailureCauseStaticDescription();

    public:

        virtual ~RouteSelectFailureSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RouteSelectFailureSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "RouteSelectFailureSpecificInfo"; }

        void SetFailureCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        void SetFailureCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionFailureCause() const
        {
            return Contains(0);
        }

        const Cause& GetFailureCause() const
        {
            ITS_REQUIRE(OptionFailureCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class OCalledPartyBusySpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        OCalledPartyBusySpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        OCalledPartyBusySpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        OCalledPartyBusySpecificInfo(const OCalledPartyBusySpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OCalledPartyBusySpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetBusyCauseStaticDescription();

    public:

        virtual ~OCalledPartyBusySpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OCalledPartyBusySpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OCalledPartyBusySpecificInfo"; }

        void SetBusyCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        void SetBusyCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionBusyCause() const
        {
            return Contains(0);
        }

        const Cause& GetBusyCause() const
        {
            ITS_REQUIRE(OptionBusyCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class ONoAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        ONoAnswerSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        ONoAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        ONoAnswerSpecificInfo(const ONoAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ONoAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ONoAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ONoAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "ONoAnswerSpecificInfo"; }

    };



    class OAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::BackwardGVNS BackwardGVNS;


    ////////// End Nested Class(es) //////////

        OAnswerSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        OAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        OAnswerSpecificInfo(const OAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetBackwardGVNSStaticDescription();

    public:

        virtual ~OAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OAnswerSpecificInfo"; }

        void SetBackwardGVNS(BackwardGVNS* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetBackwardGVNSStaticDescription());
            AddElement(0, element);
        }

        void SetBackwardGVNS(const BackwardGVNS& element)
        {
            its::AsnObject& asnObject = const_cast<BackwardGVNS&>(element);
            asnObject.SetDescription(GetBackwardGVNSStaticDescription());
            AddElement(0, element);
        }

        bool OptionBackwardGVNS() const
        {
            return Contains(0);
        }

        const BackwardGVNS& GetBackwardGVNS() const
        {
            ITS_REQUIRE(OptionBackwardGVNS());
            return static_cast<const BackwardGVNS&> (ElementAt(0));
        }

    };



    class OMidCallSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Integer4 Integer4;


            typedef inap_cs2::MidCallInfo MidCallInfo;


    ////////// End Nested Class(es) //////////

        OMidCallSpecificInfo() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        OMidCallSpecificInfo(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        OMidCallSpecificInfo(const OMidCallSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OMidCallSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetConnectTimeStaticDescription();
        static its::AsnDescObject* GetOMidCallInfoStaticDescription();

    public:

        virtual ~OMidCallSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OMidCallSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OMidCallSpecificInfo"; }

        void SetConnectTime(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetConnectTimeStaticDescription());
            AddElement(0, element);
        }

        void SetConnectTime(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetConnectTimeStaticDescription());
            AddElement(0, element);
        }

        bool OptionConnectTime() const
        {
            return Contains(0);
        }

        const Integer4& GetConnectTime() const
        {
            ITS_REQUIRE(OptionConnectTime());
            return static_cast<const Integer4&> (ElementAt(0));
        }

        void SetOMidCallInfo(MidCallInfo* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetOMidCallInfoStaticDescription());
            AddElement(1, element);
        }

        void SetOMidCallInfo(const MidCallInfo& element)
        {
            its::AsnObject& asnObject = const_cast<MidCallInfo&>(element);
            asnObject.SetDescription(GetOMidCallInfoStaticDescription());
            AddElement(1, element);
        }

        bool OptionOMidCallInfo() const
        {
            return Contains(1);
        }

        const MidCallInfo& GetOMidCallInfo() const
        {
            ITS_REQUIRE(OptionOMidCallInfo());
            return static_cast<const MidCallInfo&> (ElementAt(1));
        }

    };



    class ODisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


            typedef inap_cs2::Integer4 Integer4;


    ////////// End Nested Class(es) //////////

        ODisconnectSpecificInfo() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        ODisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        ODisconnectSpecificInfo(const ODisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ODisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();
        static its::AsnDescObject* GetConnectTimeStaticDescription();

    public:

        virtual ~ODisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ODisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "ODisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

        void SetConnectTime(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetConnectTimeStaticDescription());
            AddElement(1, element);
        }

        void SetConnectTime(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetConnectTimeStaticDescription());
            AddElement(1, element);
        }

        bool OptionConnectTime() const
        {
            return Contains(1);
        }

        const Integer4& GetConnectTime() const
        {
            ITS_REQUIRE(OptionConnectTime());
            return static_cast<const Integer4&> (ElementAt(1));
        }

    };



    class TBusySpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        TBusySpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        TBusySpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        TBusySpecificInfo(const TBusySpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TBusySpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetBusyCauseStaticDescription();

    public:

        virtual ~TBusySpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TBusySpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TBusySpecificInfo"; }

        void SetBusyCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        void SetBusyCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionBusyCause() const
        {
            return Contains(0);
        }

        const Cause& GetBusyCause() const
        {
            ITS_REQUIRE(OptionBusyCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class TNoAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        TNoAnswerSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        TNoAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        TNoAnswerSpecificInfo(const TNoAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TNoAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TNoAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TNoAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TNoAnswerSpecificInfo"; }

    };



    class TAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        TAnswerSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        TAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        TAnswerSpecificInfo(const TAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TAnswerSpecificInfo"; }

    };



    class TMidCallSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Integer4 Integer4;


            typedef inap_cs2::MidCallInfo MidCallInfo;


    ////////// End Nested Class(es) //////////

        TMidCallSpecificInfo() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        TMidCallSpecificInfo(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        TMidCallSpecificInfo(const TMidCallSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TMidCallSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetConnectTimeStaticDescription();
        static its::AsnDescObject* GetTMidCallInfoStaticDescription();

    public:

        virtual ~TMidCallSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TMidCallSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TMidCallSpecificInfo"; }

        void SetConnectTime(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetConnectTimeStaticDescription());
            AddElement(0, element);
        }

        void SetConnectTime(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetConnectTimeStaticDescription());
            AddElement(0, element);
        }

        bool OptionConnectTime() const
        {
            return Contains(0);
        }

        const Integer4& GetConnectTime() const
        {
            ITS_REQUIRE(OptionConnectTime());
            return static_cast<const Integer4&> (ElementAt(0));
        }

        void SetTMidCallInfo(MidCallInfo* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTMidCallInfoStaticDescription());
            AddElement(1, element);
        }

        void SetTMidCallInfo(const MidCallInfo& element)
        {
            its::AsnObject& asnObject = const_cast<MidCallInfo&>(element);
            asnObject.SetDescription(GetTMidCallInfoStaticDescription());
            AddElement(1, element);
        }

        bool OptionTMidCallInfo() const
        {
            return Contains(1);
        }

        const MidCallInfo& GetTMidCallInfo() const
        {
            ITS_REQUIRE(OptionTMidCallInfo());
            return static_cast<const MidCallInfo&> (ElementAt(1));
        }

    };



    class TDisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


            typedef inap_cs2::Integer4 Integer4;


    ////////// End Nested Class(es) //////////

        TDisconnectSpecificInfo() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        TDisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        TDisconnectSpecificInfo(const TDisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TDisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();
        static its::AsnDescObject* GetConnectTimeStaticDescription();

    public:

        virtual ~TDisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TDisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TDisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

        void SetConnectTime(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetConnectTimeStaticDescription());
            AddElement(1, element);
        }

        void SetConnectTime(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetConnectTimeStaticDescription());
            AddElement(1, element);
        }

        bool OptionConnectTime() const
        {
            return Contains(1);
        }

        const Integer4& GetConnectTime() const
        {
            ITS_REQUIRE(OptionConnectTime());
            return static_cast<const Integer4&> (ElementAt(1));
        }

    };



    class OTermSeizedSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        OTermSeizedSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        OTermSeizedSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        OTermSeizedSpecificInfo(const OTermSeizedSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OTermSeizedSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~OTermSeizedSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OTermSeizedSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OTermSeizedSpecificInfo"; }

    };



    class OSuspended : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        OSuspended() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        OSuspended(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        OSuspended(const OSuspended& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OSuspended(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~OSuspended()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OSuspended(*this);
        }

        virtual std::string GetName() const
        { return "OSuspended"; }

    };



    class TSuspended : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        TSuspended() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        TSuspended(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        TSuspended(const TSuspended& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TSuspended(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TSuspended()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TSuspended(*this);
        }

        virtual std::string GetName() const
        { return "TSuspended"; }

    };



    class OrigAttemptAuthorized : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        OrigAttemptAuthorized() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        OrigAttemptAuthorized(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        OrigAttemptAuthorized(const OrigAttemptAuthorized& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OrigAttemptAuthorized(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~OrigAttemptAuthorized()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OrigAttemptAuthorized(*this);
        }

        virtual std::string GetName() const
        { return "OrigAttemptAuthorized"; }

    };



    class OReAnswer : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        OReAnswer() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        OReAnswer(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        OReAnswer(const OReAnswer& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OReAnswer(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~OReAnswer()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OReAnswer(*this);
        }

        virtual std::string GetName() const
        { return "OReAnswer"; }

    };



    class TReAnswer : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        TReAnswer() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        TReAnswer(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        TReAnswer(const TReAnswer& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TReAnswer(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TReAnswer()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TReAnswer(*this);
        }

        virtual std::string GetName() const
        { return "TReAnswer"; }

    };



    class FacilitySelectedAndAvailable : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        FacilitySelectedAndAvailable() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        FacilitySelectedAndAvailable(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        FacilitySelectedAndAvailable(const FacilitySelectedAndAvailable& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        FacilitySelectedAndAvailable(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~FacilitySelectedAndAvailable()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new FacilitySelectedAndAvailable(*this);
        }

        virtual std::string GetName() const
        { return "FacilitySelectedAndAvailable"; }

    };



    class CallAccepted : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        CallAccepted() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        CallAccepted(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        CallAccepted(const CallAccepted& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CallAccepted(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallAccepted()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallAccepted(*this);
        }

        virtual std::string GetName() const
        { return "CallAccepted"; }

    };



    class OAbandon : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        OAbandon() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        OAbandon(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        OAbandon(const OAbandon& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OAbandon(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAbandonCauseStaticDescription();

    public:

        virtual ~OAbandon()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OAbandon(*this);
        }

        virtual std::string GetName() const
        { return "OAbandon"; }

        void SetAbandonCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAbandonCauseStaticDescription());
            AddElement(0, element);
        }

        void SetAbandonCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetAbandonCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionAbandonCause() const
        {
            return Contains(0);
        }

        const Cause& GetAbandonCause() const
        {
            ITS_REQUIRE(OptionAbandonCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class TAbandon : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        TAbandon() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        TAbandon(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        TAbandon(const TAbandon& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TAbandon(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAbandonCauseStaticDescription();

    public:

        virtual ~TAbandon()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TAbandon(*this);
        }

        virtual std::string GetName() const
        { return "TAbandon"; }

        void SetAbandonCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAbandonCauseStaticDescription());
            AddElement(0, element);
        }

        void SetAbandonCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetAbandonCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionAbandonCause() const
        {
            return Contains(0);
        }

        const Cause& GetAbandonCause() const
        {
            ITS_REQUIRE(OptionAbandonCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };


////////// End Nested Class(es) //////////

    EventSpecificInformationBCSM() : its::AsnChoice(false)
    {
        Initialize();
    }

    EventSpecificInformationBCSM(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EventSpecificInformationBCSM(const EventSpecificInformationBCSM& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCollectedInfoSpecificInfoStaticDescription();
    static its::AsnDescObject* GetAnalysedInfoSpecificInfoStaticDescription();
    static its::AsnDescObject* GetRouteSelectFailureSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOCalledPartyBusySpecificInfoStaticDescription();
    static its::AsnDescObject* GetONoAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOMidCallSpecificInfoStaticDescription();
    static its::AsnDescObject* GetODisconnectSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTBusySpecificInfoStaticDescription();
    static its::AsnDescObject* GetTNoAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTMidCallSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTDisconnectSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOTermSeizedSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOSuspendedStaticDescription();
    static its::AsnDescObject* GetTSuspendedStaticDescription();
    static its::AsnDescObject* GetOrigAttemptAuthorizedStaticDescription();
    static its::AsnDescObject* GetOReAnswerStaticDescription();
    static its::AsnDescObject* GetTReAnswerStaticDescription();
    static its::AsnDescObject* GetFacilitySelectedAndAvailableStaticDescription();
    static its::AsnDescObject* GetCallAcceptedStaticDescription();
    static its::AsnDescObject* GetOAbandonStaticDescription();
    static its::AsnDescObject* GetTAbandonStaticDescription();

public:

    virtual ~EventSpecificInformationBCSM()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventSpecificInformationBCSM(*this);
    }

    virtual std::string GetName() const
    { return "EventSpecificInformationBCSM"; }

    void SetChoiceCollectedInfoSpecificInfo(CollectedInfoSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCollectedInfoSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCollectedInfoSpecificInfo(const CollectedInfoSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<CollectedInfoSpecificInfo&>(choice);
        asnObject.SetDescription(GetCollectedInfoSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCollectedInfoSpecificInfo() const
    {
        return Contains(GetCollectedInfoSpecificInfoStaticDescription()->TagIdentity());
    }

    const CollectedInfoSpecificInfo& GetChoiceCollectedInfoSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceCollectedInfoSpecificInfo());
        return static_cast<const CollectedInfoSpecificInfo&> (GetChoice());
    }

    void SetChoiceAnalysedInfoSpecificInfo(AnalysedInfoSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAnalysedInfoSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAnalysedInfoSpecificInfo(const AnalysedInfoSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<AnalysedInfoSpecificInfo&>(choice);
        asnObject.SetDescription(GetAnalysedInfoSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAnalysedInfoSpecificInfo() const
    {
        return Contains(GetAnalysedInfoSpecificInfoStaticDescription()->TagIdentity());
    }

    const AnalysedInfoSpecificInfo& GetChoiceAnalysedInfoSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceAnalysedInfoSpecificInfo());
        return static_cast<const AnalysedInfoSpecificInfo&> (GetChoice());
    }

    void SetChoiceRouteSelectFailureSpecificInfo(RouteSelectFailureSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRouteSelectFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRouteSelectFailureSpecificInfo(const RouteSelectFailureSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<RouteSelectFailureSpecificInfo&>(choice);
        asnObject.SetDescription(GetRouteSelectFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRouteSelectFailureSpecificInfo() const
    {
        return Contains(GetRouteSelectFailureSpecificInfoStaticDescription()->TagIdentity());
    }

    const RouteSelectFailureSpecificInfo& GetChoiceRouteSelectFailureSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceRouteSelectFailureSpecificInfo());
        return static_cast<const RouteSelectFailureSpecificInfo&> (GetChoice());
    }

    void SetChoiceOCalledPartyBusySpecificInfo(OCalledPartyBusySpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOCalledPartyBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOCalledPartyBusySpecificInfo(const OCalledPartyBusySpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OCalledPartyBusySpecificInfo&>(choice);
        asnObject.SetDescription(GetOCalledPartyBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOCalledPartyBusySpecificInfo() const
    {
        return Contains(GetOCalledPartyBusySpecificInfoStaticDescription()->TagIdentity());
    }

    const OCalledPartyBusySpecificInfo& GetChoiceOCalledPartyBusySpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOCalledPartyBusySpecificInfo());
        return static_cast<const OCalledPartyBusySpecificInfo&> (GetChoice());
    }

    void SetChoiceONoAnswerSpecificInfo(ONoAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetONoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceONoAnswerSpecificInfo(const ONoAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<ONoAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetONoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceONoAnswerSpecificInfo() const
    {
        return Contains(GetONoAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const ONoAnswerSpecificInfo& GetChoiceONoAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceONoAnswerSpecificInfo());
        return static_cast<const ONoAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceOAnswerSpecificInfo(OAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOAnswerSpecificInfo(const OAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetOAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOAnswerSpecificInfo() const
    {
        return Contains(GetOAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const OAnswerSpecificInfo& GetChoiceOAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOAnswerSpecificInfo());
        return static_cast<const OAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceOMidCallSpecificInfo(OMidCallSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOMidCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOMidCallSpecificInfo(const OMidCallSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OMidCallSpecificInfo&>(choice);
        asnObject.SetDescription(GetOMidCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOMidCallSpecificInfo() const
    {
        return Contains(GetOMidCallSpecificInfoStaticDescription()->TagIdentity());
    }

    const OMidCallSpecificInfo& GetChoiceOMidCallSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOMidCallSpecificInfo());
        return static_cast<const OMidCallSpecificInfo&> (GetChoice());
    }

    void SetChoiceODisconnectSpecificInfo(ODisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceODisconnectSpecificInfo(const ODisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<ODisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceODisconnectSpecificInfo() const
    {
        return Contains(GetODisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const ODisconnectSpecificInfo& GetChoiceODisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceODisconnectSpecificInfo());
        return static_cast<const ODisconnectSpecificInfo&> (GetChoice());
    }

    void SetChoiceTBusySpecificInfo(TBusySpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTBusySpecificInfo(const TBusySpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TBusySpecificInfo&>(choice);
        asnObject.SetDescription(GetTBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTBusySpecificInfo() const
    {
        return Contains(GetTBusySpecificInfoStaticDescription()->TagIdentity());
    }

    const TBusySpecificInfo& GetChoiceTBusySpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTBusySpecificInfo());
        return static_cast<const TBusySpecificInfo&> (GetChoice());
    }

    void SetChoiceTNoAnswerSpecificInfo(TNoAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTNoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTNoAnswerSpecificInfo(const TNoAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TNoAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetTNoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTNoAnswerSpecificInfo() const
    {
        return Contains(GetTNoAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const TNoAnswerSpecificInfo& GetChoiceTNoAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTNoAnswerSpecificInfo());
        return static_cast<const TNoAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceTAnswerSpecificInfo(TAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTAnswerSpecificInfo(const TAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetTAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTAnswerSpecificInfo() const
    {
        return Contains(GetTAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const TAnswerSpecificInfo& GetChoiceTAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTAnswerSpecificInfo());
        return static_cast<const TAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceTMidCallSpecificInfo(TMidCallSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTMidCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTMidCallSpecificInfo(const TMidCallSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TMidCallSpecificInfo&>(choice);
        asnObject.SetDescription(GetTMidCallSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTMidCallSpecificInfo() const
    {
        return Contains(GetTMidCallSpecificInfoStaticDescription()->TagIdentity());
    }

    const TMidCallSpecificInfo& GetChoiceTMidCallSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTMidCallSpecificInfo());
        return static_cast<const TMidCallSpecificInfo&> (GetChoice());
    }

    void SetChoiceTDisconnectSpecificInfo(TDisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTDisconnectSpecificInfo(const TDisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TDisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTDisconnectSpecificInfo() const
    {
        return Contains(GetTDisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const TDisconnectSpecificInfo& GetChoiceTDisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTDisconnectSpecificInfo());
        return static_cast<const TDisconnectSpecificInfo&> (GetChoice());
    }

    void SetChoiceOTermSeizedSpecificInfo(OTermSeizedSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOTermSeizedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOTermSeizedSpecificInfo(const OTermSeizedSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OTermSeizedSpecificInfo&>(choice);
        asnObject.SetDescription(GetOTermSeizedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOTermSeizedSpecificInfo() const
    {
        return Contains(GetOTermSeizedSpecificInfoStaticDescription()->TagIdentity());
    }

    const OTermSeizedSpecificInfo& GetChoiceOTermSeizedSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOTermSeizedSpecificInfo());
        return static_cast<const OTermSeizedSpecificInfo&> (GetChoice());
    }

    void SetChoiceOSuspended(OSuspended* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOSuspendedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOSuspended(const OSuspended& choice)
    {
        its::AsnObject& asnObject = const_cast<OSuspended&>(choice);
        asnObject.SetDescription(GetOSuspendedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOSuspended() const
    {
        return Contains(GetOSuspendedStaticDescription()->TagIdentity());
    }

    const OSuspended& GetChoiceOSuspended() const
    {
        ITS_REQUIRE(ChoiceOSuspended());
        return static_cast<const OSuspended&> (GetChoice());
    }

    void SetChoiceTSuspended(TSuspended* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTSuspendedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTSuspended(const TSuspended& choice)
    {
        its::AsnObject& asnObject = const_cast<TSuspended&>(choice);
        asnObject.SetDescription(GetTSuspendedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTSuspended() const
    {
        return Contains(GetTSuspendedStaticDescription()->TagIdentity());
    }

    const TSuspended& GetChoiceTSuspended() const
    {
        ITS_REQUIRE(ChoiceTSuspended());
        return static_cast<const TSuspended&> (GetChoice());
    }

    void SetChoiceOrigAttemptAuthorized(OrigAttemptAuthorized* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOrigAttemptAuthorizedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOrigAttemptAuthorized(const OrigAttemptAuthorized& choice)
    {
        its::AsnObject& asnObject = const_cast<OrigAttemptAuthorized&>(choice);
        asnObject.SetDescription(GetOrigAttemptAuthorizedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOrigAttemptAuthorized() const
    {
        return Contains(GetOrigAttemptAuthorizedStaticDescription()->TagIdentity());
    }

    const OrigAttemptAuthorized& GetChoiceOrigAttemptAuthorized() const
    {
        ITS_REQUIRE(ChoiceOrigAttemptAuthorized());
        return static_cast<const OrigAttemptAuthorized&> (GetChoice());
    }

    void SetChoiceOReAnswer(OReAnswer* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOReAnswerStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOReAnswer(const OReAnswer& choice)
    {
        its::AsnObject& asnObject = const_cast<OReAnswer&>(choice);
        asnObject.SetDescription(GetOReAnswerStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOReAnswer() const
    {
        return Contains(GetOReAnswerStaticDescription()->TagIdentity());
    }

    const OReAnswer& GetChoiceOReAnswer() const
    {
        ITS_REQUIRE(ChoiceOReAnswer());
        return static_cast<const OReAnswer&> (GetChoice());
    }

    void SetChoiceTReAnswer(TReAnswer* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTReAnswerStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTReAnswer(const TReAnswer& choice)
    {
        its::AsnObject& asnObject = const_cast<TReAnswer&>(choice);
        asnObject.SetDescription(GetTReAnswerStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTReAnswer() const
    {
        return Contains(GetTReAnswerStaticDescription()->TagIdentity());
    }

    const TReAnswer& GetChoiceTReAnswer() const
    {
        ITS_REQUIRE(ChoiceTReAnswer());
        return static_cast<const TReAnswer&> (GetChoice());
    }

    void SetChoiceFacilitySelectedAndAvailable(FacilitySelectedAndAvailable* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetFacilitySelectedAndAvailableStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceFacilitySelectedAndAvailable(const FacilitySelectedAndAvailable& choice)
    {
        its::AsnObject& asnObject = const_cast<FacilitySelectedAndAvailable&>(choice);
        asnObject.SetDescription(GetFacilitySelectedAndAvailableStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceFacilitySelectedAndAvailable() const
    {
        return Contains(GetFacilitySelectedAndAvailableStaticDescription()->TagIdentity());
    }

    const FacilitySelectedAndAvailable& GetChoiceFacilitySelectedAndAvailable() const
    {
        ITS_REQUIRE(ChoiceFacilitySelectedAndAvailable());
        return static_cast<const FacilitySelectedAndAvailable&> (GetChoice());
    }

    void SetChoiceCallAccepted(CallAccepted* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallAcceptedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallAccepted(const CallAccepted& choice)
    {
        its::AsnObject& asnObject = const_cast<CallAccepted&>(choice);
        asnObject.SetDescription(GetCallAcceptedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallAccepted() const
    {
        return Contains(GetCallAcceptedStaticDescription()->TagIdentity());
    }

    const CallAccepted& GetChoiceCallAccepted() const
    {
        ITS_REQUIRE(ChoiceCallAccepted());
        return static_cast<const CallAccepted&> (GetChoice());
    }

    void SetChoiceOAbandon(OAbandon* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOAbandonStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOAbandon(const OAbandon& choice)
    {
        its::AsnObject& asnObject = const_cast<OAbandon&>(choice);
        asnObject.SetDescription(GetOAbandonStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOAbandon() const
    {
        return Contains(GetOAbandonStaticDescription()->TagIdentity());
    }

    const OAbandon& GetChoiceOAbandon() const
    {
        ITS_REQUIRE(ChoiceOAbandon());
        return static_cast<const OAbandon&> (GetChoice());
    }

    void SetChoiceTAbandon(TAbandon* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTAbandonStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTAbandon(const TAbandon& choice)
    {
        its::AsnObject& asnObject = const_cast<TAbandon&>(choice);
        asnObject.SetDescription(GetTAbandonStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTAbandon() const
    {
        return Contains(GetTAbandonStaticDescription()->TagIdentity());
    }

    const TAbandon& GetChoiceTAbandon() const
    {
        ITS_REQUIRE(ChoiceTAbandon());
        return static_cast<const TAbandon&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_EVENT_SPECIFIC_INFORMATION_BCSM_H_)

