//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CALL_CONDITIONS_H_)
#define _INAP_CS2_CALL_CONDITIONS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <inap_cs2_cause_value.h>
#include <inap_cs2_invokable_service.h>
#include <inap_cs2_number_match.h>



namespace inap_cs2 {



class CallConditions : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class UserAbandon : public its::AsnNull
    {
    public:

        UserAbandon() : its::AsnNull(false)
        {
            Initialize();
        }

        UserAbandon(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        UserAbandon(const UserAbandon& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        UserAbandon(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UserAbandon()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UserAbandon(*this);
        }

        virtual std::string GetName() const
        { return "UserAbandon"; }

    };



    class NoReply : public its::AsnInteger
    {
    public:

        NoReply() : its::AsnInteger(false)
        {
            Initialize();
        }

        NoReply(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        NoReply(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        NoReply(const NoReply& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        NoReply(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        NoReply(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NoReply()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NoReply(*this);
        }

        virtual std::string GetName() const
        { return "NoReply"; }

    };



    class CallRelease : public its::AsnNull
    {
    public:

        CallRelease() : its::AsnNull(false)
        {
            Initialize();
        }

        CallRelease(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CallRelease(const CallRelease& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CallRelease(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallRelease()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallRelease(*this);
        }

        virtual std::string GetName() const
        { return "CallRelease"; }

    };



    class CreditLimitReached : public its::AsnInteger
    {
    public:

        CreditLimitReached() : its::AsnInteger(false)
        {
            Initialize();
        }

        CreditLimitReached(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        CreditLimitReached(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        CreditLimitReached(const CreditLimitReached& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        CreditLimitReached(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        CreditLimitReached(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CreditLimitReached()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CreditLimitReached(*this);
        }

        virtual std::string GetName() const
        { return "CreditLimitReached"; }

    };



    class CallDuration : public its::AsnInteger
    {
    public:

        CallDuration() : its::AsnInteger(false)
        {
            Initialize();
        }

        CallDuration(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        CallDuration(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        CallDuration(const CallDuration& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        CallDuration(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        CallDuration(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallDuration()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallDuration(*this);
        }

        virtual std::string GetName() const
        { return "CallDuration"; }

    };



    class AnsweredCall : public its::AsnNull
    {
    public:

        AnsweredCall() : its::AsnNull(false)
        {
            Initialize();
        }

        AnsweredCall(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AnsweredCall(const AnsweredCall& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AnsweredCall(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AnsweredCall()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AnsweredCall(*this);
        }

        virtual std::string GetName() const
        { return "AnsweredCall"; }

    };


        typedef inap_cs2::CauseValue CauseValue;


        typedef inap_cs2::InvokableService InvokableService;


        typedef inap_cs2::NumberMatch NumberMatch;


////////// End Nested Class(es) //////////

    CallConditions() : its::AsnChoice(false)
    {
        Initialize();
    }

    CallConditions(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CallConditions(const CallConditions& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CallConditions(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CallConditions(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUserAbandonStaticDescription();
    static its::AsnDescObject* GetCallFailureStaticDescription();
    static its::AsnDescObject* GetNoReplyStaticDescription();
    static its::AsnDescObject* GetCallReleaseStaticDescription();
    static its::AsnDescObject* GetSs_invocationStaticDescription();
    static its::AsnDescObject* GetCreditLimitReachedStaticDescription();
    static its::AsnDescObject* GetCallDurationStaticDescription();
    static its::AsnDescObject* GetCalledNumberStaticDescription();
    static its::AsnDescObject* GetAnsweredCallStaticDescription();

public:

    virtual ~CallConditions()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallConditions(*this);
    }

    virtual std::string GetName() const
    { return "CallConditions"; }

    void SetChoiceUserAbandon(UserAbandon* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetUserAbandonStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceUserAbandon(const UserAbandon& choice)
    {
        its::AsnObject& asnObject = const_cast<UserAbandon&>(choice);
        asnObject.SetDescription(GetUserAbandonStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceUserAbandon() const
    {
        return Contains(GetUserAbandonStaticDescription()->TagIdentity());
    }

    const UserAbandon& GetChoiceUserAbandon() const
    {
        ITS_REQUIRE(ChoiceUserAbandon());
        return static_cast<const UserAbandon&> (GetChoice());
    }

    void SetChoiceCallFailure(CauseValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallFailureStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallFailure(const CauseValue& choice)
    {
        its::AsnObject& asnObject = const_cast<CauseValue&>(choice);
        asnObject.SetDescription(GetCallFailureStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallFailure() const
    {
        return Contains(GetCallFailureStaticDescription()->TagIdentity());
    }

    const CauseValue& GetChoiceCallFailure() const
    {
        ITS_REQUIRE(ChoiceCallFailure());
        return static_cast<const CauseValue&> (GetChoice());
    }

    void SetChoiceNoReply(NoReply* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNoReplyStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNoReply(const NoReply& choice)
    {
        its::AsnObject& asnObject = const_cast<NoReply&>(choice);
        asnObject.SetDescription(GetNoReplyStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNoReply() const
    {
        return Contains(GetNoReplyStaticDescription()->TagIdentity());
    }

    const NoReply& GetChoiceNoReply() const
    {
        ITS_REQUIRE(ChoiceNoReply());
        return static_cast<const NoReply&> (GetChoice());
    }

    void SetChoiceCallRelease(CallRelease* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallReleaseStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallRelease(const CallRelease& choice)
    {
        its::AsnObject& asnObject = const_cast<CallRelease&>(choice);
        asnObject.SetDescription(GetCallReleaseStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallRelease() const
    {
        return Contains(GetCallReleaseStaticDescription()->TagIdentity());
    }

    const CallRelease& GetChoiceCallRelease() const
    {
        ITS_REQUIRE(ChoiceCallRelease());
        return static_cast<const CallRelease&> (GetChoice());
    }

    void SetChoiceSs_invocation(InvokableService* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSs_invocationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSs_invocation(const InvokableService& choice)
    {
        its::AsnObject& asnObject = const_cast<InvokableService&>(choice);
        asnObject.SetDescription(GetSs_invocationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSs_invocation() const
    {
        return Contains(GetSs_invocationStaticDescription()->TagIdentity());
    }

    const InvokableService& GetChoiceSs_invocation() const
    {
        ITS_REQUIRE(ChoiceSs_invocation());
        return static_cast<const InvokableService&> (GetChoice());
    }

    void SetChoiceCreditLimitReached(CreditLimitReached* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCreditLimitReachedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCreditLimitReached(const CreditLimitReached& choice)
    {
        its::AsnObject& asnObject = const_cast<CreditLimitReached&>(choice);
        asnObject.SetDescription(GetCreditLimitReachedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCreditLimitReached() const
    {
        return Contains(GetCreditLimitReachedStaticDescription()->TagIdentity());
    }

    const CreditLimitReached& GetChoiceCreditLimitReached() const
    {
        ITS_REQUIRE(ChoiceCreditLimitReached());
        return static_cast<const CreditLimitReached&> (GetChoice());
    }

    void SetChoiceCallDuration(CallDuration* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallDurationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallDuration(const CallDuration& choice)
    {
        its::AsnObject& asnObject = const_cast<CallDuration&>(choice);
        asnObject.SetDescription(GetCallDurationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallDuration() const
    {
        return Contains(GetCallDurationStaticDescription()->TagIdentity());
    }

    const CallDuration& GetChoiceCallDuration() const
    {
        ITS_REQUIRE(ChoiceCallDuration());
        return static_cast<const CallDuration&> (GetChoice());
    }

    void SetChoiceCalledNumber(NumberMatch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCalledNumberStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCalledNumber(const NumberMatch& choice)
    {
        its::AsnObject& asnObject = const_cast<NumberMatch&>(choice);
        asnObject.SetDescription(GetCalledNumberStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCalledNumber() const
    {
        return Contains(GetCalledNumberStaticDescription()->TagIdentity());
    }

    const NumberMatch& GetChoiceCalledNumber() const
    {
        ITS_REQUIRE(ChoiceCalledNumber());
        return static_cast<const NumberMatch&> (GetChoice());
    }

    void SetChoiceAnsweredCall(AnsweredCall* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAnsweredCallStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAnsweredCall(const AnsweredCall& choice)
    {
        its::AsnObject& asnObject = const_cast<AnsweredCall&>(choice);
        asnObject.SetDescription(GetAnsweredCallStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAnsweredCall() const
    {
        return Contains(GetAnsweredCallStaticDescription()->TagIdentity());
    }

    const AnsweredCall& GetChoiceAnsweredCall() const
    {
        ITS_REQUIRE(ChoiceAnsweredCall());
        return static_cast<const AnsweredCall&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CALL_CONDITIONS_H_)

