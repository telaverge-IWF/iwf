//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_MID_CALL_CONTROL_INFO_H_)
#define _INAP_CS2_MID_CALL_CONTROL_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequenceOf.h>
#include <AsnSequence.h>
#include <AsnEnumerated.h>

#include <inap_cs2_mid_call_info_type.h>



namespace inap_cs2 {



class MidCallControlInfo : public its::AsnSequenceOf
{
public:


////////// Begin Nested Class //////////



    class SEQUENCE : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class MidCallReportType : public its::AsnEnumerated
        {
        public:

            MidCallReportType() : its::AsnEnumerated(false)
            {
                Initialize();
            }

            MidCallReportType(long value) : its::AsnEnumerated(value, false)
            {
                Initialize();
            }

            MidCallReportType(its::Octets& octets) : its::AsnEnumerated(false)
            {
                Initialize();
                Decode(octets);
            }

            MidCallReportType(const MidCallReportType& rhs) : its::AsnEnumerated(rhs)
            {
                // Nothing to do.
            }

            MidCallReportType(its::AsnDescObject* description) : its::AsnEnumerated(description)
            {
                // Nothing to do.
            }

            MidCallReportType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~MidCallReportType()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new MidCallReportType(*this);
            }

            virtual std::string GetName() const
            { return "MidCallReportType"; }

            virtual long Get(const std::string& valueName) const;

            virtual std::string Get(long value) const;

            virtual std::string GetExt(long value) const;

            enum {
                MID_CALL_REPORT_TYPE_IN_MONITORING_STATE = 0,
                MID_CALL_REPORT_TYPE_IN_ANY_STATE = 1

            };

            void SetInMonitoringState()
            { _value = 0; }

            bool IsInMonitoringState() const
            { return _value == 0; }

            void SetInAnyState()
            { _value = 1; }

            bool IsInAnyState() const
            { return _value == 1; }

        };


            typedef inap_cs2::MidCallInfoType MidCallInfoType;


    ////////// End Nested Class(es) //////////

        SEQUENCE() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        SEQUENCE(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        SEQUENCE(const SEQUENCE& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        SEQUENCE(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetMidCallInfoTypeStaticDescription();
        static its::AsnDescObject* GetMidCallReportTypeStaticDescription();

    public:

        virtual ~SEQUENCE()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SEQUENCE(*this);
        }

        virtual std::string GetName() const
        { return "SEQUENCE"; }

        void SetMidCallInfoType(MidCallInfoType* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetMidCallInfoTypeStaticDescription());
            AddElement(0, element);
        }

        void SetMidCallInfoType(const MidCallInfoType& element)
        {
            its::AsnObject& asnObject = const_cast<MidCallInfoType&>(element);
            asnObject.SetDescription(GetMidCallInfoTypeStaticDescription());
            AddElement(0, element);
        }

        const MidCallInfoType& GetMidCallInfoType() const
        {
            return static_cast<const MidCallInfoType&> (ElementAt(0));
        }

        void SetMidCallReportType(MidCallReportType* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetMidCallReportTypeStaticDescription());
            AddElement(1, element);
        }

        void SetMidCallReportType(const MidCallReportType& element)
        {
            its::AsnObject& asnObject = const_cast<MidCallReportType&>(element);
            asnObject.SetDescription(GetMidCallReportTypeStaticDescription());
            AddElement(1, element);
        }

        const MidCallReportType& GetMidCallReportType() const
        {
            return static_cast<const MidCallReportType&> (ElementAt(1));
        }

    };


////////// End Nested Class //////////

    MidCallControlInfo() : its::AsnSequenceOf(false)
    {
        Initialize();
    }

    MidCallControlInfo(its::Octets& octets) : its::AsnSequenceOf(false)
    {
        Initialize();
        Decode(octets);
    }

    MidCallControlInfo(const MidCallControlInfo& rhs) : its::AsnSequenceOf(rhs)
    {
        // Nothing to do.
    }

    MidCallControlInfo(its::AsnDescObject* description) : its::AsnSequenceOf(description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSEQUENCEStaticDescription();

public:

    virtual ~MidCallControlInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MidCallControlInfo(*this);
    }

    virtual std::string GetName() const
    { return "MidCallControlInfo"; }

    void AddElement(SEQUENCE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSEQUENCEStaticDescription());
        AsnSequenceOf::AddElement(element);
    }

    void AddElement(const SEQUENCE& element)
    {
        its::AsnObject& asnObject = const_cast<SEQUENCE&>(element);
        asnObject.SetDescription(GetSEQUENCEStaticDescription());
        AsnSequenceOf::AddElement(element);
    }

    const SEQUENCE& ElementAt(int index) const
    {
        return static_cast<const SEQUENCE&> (AsnSequenceOf::ElementAt(index));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_MID_CALL_CONTROL_INFO_H_)

