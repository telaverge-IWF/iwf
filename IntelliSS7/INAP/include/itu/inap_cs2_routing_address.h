//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ROUTING_ADDRESS_H_)
#define _INAP_CS2_ROUTING_ADDRESS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_destination_routing_address.h>



namespace inap_cs2 {



class RoutingAddress : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class RoutingProhibited : public its::AsnNull
    {
    public:

        RoutingProhibited() : its::AsnNull(false)
        {
            Initialize();
        }

        RoutingProhibited(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        RoutingProhibited(const RoutingProhibited& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        RoutingProhibited(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~RoutingProhibited()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RoutingProhibited(*this);
        }

        virtual std::string GetName() const
        { return "RoutingProhibited"; }

    };


        typedef inap_cs2::DestinationRoutingAddress DestinationRoutingAddress;


////////// End Nested Class(es) //////////

    RoutingAddress() : its::AsnChoice(false)
    {
        Initialize();
    }

    RoutingAddress(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    RoutingAddress(const RoutingAddress& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    RoutingAddress(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    RoutingAddress(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRoutingProhibitedStaticDescription();
    static its::AsnDescObject* GetDestinationRoutingAddressStaticDescription();

public:

    virtual ~RoutingAddress()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RoutingAddress(*this);
    }

    virtual std::string GetName() const
    { return "RoutingAddress"; }

    void SetChoiceRoutingProhibited(RoutingProhibited* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRoutingProhibitedStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRoutingProhibited(const RoutingProhibited& choice)
    {
        its::AsnObject& asnObject = const_cast<RoutingProhibited&>(choice);
        asnObject.SetDescription(GetRoutingProhibitedStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRoutingProhibited() const
    {
        return Contains(GetRoutingProhibitedStaticDescription()->TagIdentity());
    }

    const RoutingProhibited& GetChoiceRoutingProhibited() const
    {
        ITS_REQUIRE(ChoiceRoutingProhibited());
        return static_cast<const RoutingProhibited&> (GetChoice());
    }

    void SetChoiceDestinationRoutingAddress(DestinationRoutingAddress* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDestinationRoutingAddressStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDestinationRoutingAddress(const DestinationRoutingAddress& choice)
    {
        its::AsnObject& asnObject = const_cast<DestinationRoutingAddress&>(choice);
        asnObject.SetDescription(GetDestinationRoutingAddressStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDestinationRoutingAddress() const
    {
        return Contains(GetDestinationRoutingAddressStaticDescription()->TagIdentity());
    }

    const DestinationRoutingAddress& GetChoiceDestinationRoutingAddress() const
    {
        ITS_REQUIRE(ChoiceDestinationRoutingAddress());
        return static_cast<const DestinationRoutingAddress&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ROUTING_ADDRESS_H_)

