//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SIMPLE_CREDENTIALS_H_)
#define _INAP_CS2_SIMPLE_CREDENTIALS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_distinguished_name.h>
#include <inap_cs2_validity.h>



namespace inap_cs2 {



class SimpleCredentials : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Password : public its::AsnOctetString
    {
    public:

        Password() : its::AsnOctetString(false)
        {
            Initialize();
        }

        Password(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        Password(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        Password(const Password& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        Password(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        Password(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Password()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Password(*this);
        }

        virtual std::string GetName() const
        { return "Password"; }

    };


        typedef inap_cs2::DistinguishedName DistinguishedName;


        typedef inap_cs2::Validity Validity;


////////// End Nested Class(es) //////////

    SimpleCredentials() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    SimpleCredentials(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    SimpleCredentials(const SimpleCredentials& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SimpleCredentials(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDistinguishedNameStaticDescription();
    static its::AsnDescObject* GetValidityStaticDescription();
    static its::AsnDescObject* GetPasswordStaticDescription();

public:

    virtual ~SimpleCredentials()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SimpleCredentials(*this);
    }

    virtual std::string GetName() const
    { return "SimpleCredentials"; }

    void SetDistinguishedName(DistinguishedName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDistinguishedNameStaticDescription());
        AddElement(0, element);
    }

    void SetDistinguishedName(const DistinguishedName& element)
    {
        its::AsnObject& asnObject = const_cast<DistinguishedName&>(element);
        asnObject.SetDescription(GetDistinguishedNameStaticDescription());
        AddElement(0, element);
    }

    const DistinguishedName& GetDistinguishedName() const
    {
        return static_cast<const DistinguishedName&> (ElementAt(0));
    }

    void SetValidity(Validity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetValidityStaticDescription());
        AddElement(1, element);
    }

    void SetValidity(const Validity& element)
    {
        its::AsnObject& asnObject = const_cast<Validity&>(element);
        asnObject.SetDescription(GetValidityStaticDescription());
        AddElement(1, element);
    }

    bool OptionValidity() const
    {
        return Contains(1);
    }

    const Validity& GetValidity() const
    {
        ITS_REQUIRE(OptionValidity());
        return static_cast<const Validity&> (ElementAt(1));
    }

    void SetPassword(Password* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPasswordStaticDescription());
        AddElement(2, element);
    }

    void SetPassword(const Password& element)
    {
        its::AsnObject& asnObject = const_cast<Password&>(element);
        asnObject.SetDescription(GetPasswordStaticDescription());
        AddElement(2, element);
    }

    bool OptionPassword() const
    {
        return Contains(2);
    }

    const Password& GetPassword() const
    {
        ITS_REQUIRE(OptionPassword());
        return static_cast<const Password&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SIMPLE_CREDENTIALS_H_)

