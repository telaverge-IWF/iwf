//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CERTIFICATE_PAIR_H_)
#define _INAP_CS2_CERTIFICATE_PAIR_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>

#include <inap_cs2_certificate.h>



namespace inap_cs2 {



class CertificatePair : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Certificate Certificate;


////////// End Nested Class(es) //////////

    CertificatePair() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CertificatePair(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CertificatePair(const CertificatePair& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CertificatePair(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetForwardStaticDescription();
    static its::AsnDescObject* GetReverseStaticDescription();

public:

    virtual ~CertificatePair()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CertificatePair(*this);
    }

    virtual std::string GetName() const
    { return "CertificatePair"; }

    void SetForward(Certificate* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardStaticDescription());
        AddElement(0, element);
    }

    void SetForward(const Certificate& element)
    {
        its::AsnObject& asnObject = const_cast<Certificate&>(element);
        asnObject.SetDescription(GetForwardStaticDescription());
        AddElement(0, element);
    }

    bool OptionForward() const
    {
        return Contains(0);
    }

    const Certificate& GetForward() const
    {
        ITS_REQUIRE(OptionForward());
        return static_cast<const Certificate&> (ElementAt(0));
    }

    void SetReverse(Certificate* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReverseStaticDescription());
        AddElement(1, element);
    }

    void SetReverse(const Certificate& element)
    {
        its::AsnObject& asnObject = const_cast<Certificate&>(element);
        asnObject.SetDescription(GetReverseStaticDescription());
        AddElement(1, element);
    }

    bool OptionReverse() const
    {
        return Contains(1);
    }

    const Certificate& GetReverse() const
    {
        ITS_REQUIRE(OptionReverse());
        return static_cast<const Certificate&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CERTIFICATE_PAIR_H_)

