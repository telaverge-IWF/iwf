//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CONSTRAINTS_H_)
#define _INAP_CS2_CONSTRAINTS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>

#include <inap_cs2_info_type.h>



namespace inap_cs2 {



class Constraints : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class MaximumNumberOfDigits : public its::AsnInteger
    {
    public:

        MaximumNumberOfDigits() : its::AsnInteger(false)
        {
            Initialize();
        }

        MaximumNumberOfDigits(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MaximumNumberOfDigits(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MaximumNumberOfDigits(const MaximumNumberOfDigits& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MaximumNumberOfDigits(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MaximumNumberOfDigits(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MaximumNumberOfDigits()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MaximumNumberOfDigits(*this);
        }

        virtual std::string GetName() const
        { return "MaximumNumberOfDigits"; }

    };



    class MinimumNumberOfDigits : public its::AsnInteger
    {
    public:

        MinimumNumberOfDigits() : its::AsnInteger(false)
        {
            Initialize();
        }

        MinimumNumberOfDigits(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MinimumNumberOfDigits(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MinimumNumberOfDigits(const MinimumNumberOfDigits& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MinimumNumberOfDigits(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MinimumNumberOfDigits(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MinimumNumberOfDigits()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MinimumNumberOfDigits(*this);
        }

        virtual std::string GetName() const
        { return "MinimumNumberOfDigits"; }

    };



    class NumberOfAllowedRetries : public its::AsnInteger
    {
    public:

        NumberOfAllowedRetries() : its::AsnInteger(false)
        {
            Initialize();
        }

        NumberOfAllowedRetries(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        NumberOfAllowedRetries(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        NumberOfAllowedRetries(const NumberOfAllowedRetries& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        NumberOfAllowedRetries(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        NumberOfAllowedRetries(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NumberOfAllowedRetries()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NumberOfAllowedRetries(*this);
        }

        virtual std::string GetName() const
        { return "NumberOfAllowedRetries"; }

    };


        typedef inap_cs2::InfoType InfoType;


////////// End Nested Class(es) //////////

    Constraints() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    Constraints(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    Constraints(const Constraints& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Constraints(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMaximumNumberOfDigitsStaticDescription();
    static its::AsnDescObject* GetMinimumNumberOfDigitsStaticDescription();
    static its::AsnDescObject* GetTypeOfRequestedInfoStaticDescription();
    static its::AsnDescObject* GetNumberOfAllowedRetriesStaticDescription();

public:

    virtual ~Constraints()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Constraints(*this);
    }

    virtual std::string GetName() const
    { return "Constraints"; }

    void SetMaximumNumberOfDigits(MaximumNumberOfDigits* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMaximumNumberOfDigitsStaticDescription());
        AddElement(0, element);
    }

    void SetMaximumNumberOfDigits(const MaximumNumberOfDigits& element)
    {
        its::AsnObject& asnObject = const_cast<MaximumNumberOfDigits&>(element);
        asnObject.SetDescription(GetMaximumNumberOfDigitsStaticDescription());
        AddElement(0, element);
    }

    const MaximumNumberOfDigits& GetMaximumNumberOfDigits() const
    {
        return static_cast<const MaximumNumberOfDigits&> (ElementAt(0));
    }

    void SetMinimumNumberOfDigits(MinimumNumberOfDigits* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMinimumNumberOfDigitsStaticDescription());
        AddElement(1, element);
    }

    void SetMinimumNumberOfDigits(const MinimumNumberOfDigits& element)
    {
        its::AsnObject& asnObject = const_cast<MinimumNumberOfDigits&>(element);
        asnObject.SetDescription(GetMinimumNumberOfDigitsStaticDescription());
        AddElement(1, element);
    }

    const MinimumNumberOfDigits& GetMinimumNumberOfDigits() const
    {
        return static_cast<const MinimumNumberOfDigits&> (ElementAt(1));
    }

    void SetTypeOfRequestedInfo(InfoType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTypeOfRequestedInfoStaticDescription());
        AddElement(2, element);
    }

    void SetTypeOfRequestedInfo(const InfoType& element)
    {
        its::AsnObject& asnObject = const_cast<InfoType&>(element);
        asnObject.SetDescription(GetTypeOfRequestedInfoStaticDescription());
        AddElement(2, element);
    }

    const InfoType& GetTypeOfRequestedInfo() const
    {
        return static_cast<const InfoType&> (ElementAt(2));
    }

    void SetNumberOfAllowedRetries(NumberOfAllowedRetries* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfAllowedRetriesStaticDescription());
        AddElement(3, element);
    }

    void SetNumberOfAllowedRetries(const NumberOfAllowedRetries& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfAllowedRetries&>(element);
        asnObject.SetDescription(GetNumberOfAllowedRetriesStaticDescription());
        AddElement(3, element);
    }

    const NumberOfAllowedRetries& GetNumberOfAllowedRetries() const
    {
        return static_cast<const NumberOfAllowedRetries&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CONSTRAINTS_H_)

