//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ALGORITHM_IDENTIFIER_H_)
#define _INAP_CS2_ALGORITHM_IDENTIFIER_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>
#include <AsnAny.h>



namespace inap_cs2 {



class AlgorithmIdentifier : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Algorithm : public its::AsnObjectIdentifier
    {
    public:

        Algorithm() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        Algorithm(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        Algorithm(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        Algorithm(const Algorithm& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        Algorithm(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        Algorithm(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Algorithm()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Algorithm(*this);
        }

        virtual std::string GetName() const
        { return "Algorithm"; }

    };



    class Parameters : public its::AsnAny
    {
    public:

        Parameters() : its::AsnAny(false)
        {
            Initialize();
        }

        Parameters(its::AsnObject* any) : its::AsnAny(any, false)
        {
            Initialize();
        }

        Parameters(its::Octets& octets) : its::AsnAny(false)
        {
            Initialize();
            Decode(octets);
        }

        Parameters(const Parameters& rhs) : its::AsnAny(rhs)
        {
            // Nothing to do.
        }

        Parameters(its::AsnDescObject* description) : its::AsnAny(description)
        {
            // Nothing to do.
        }

    Parameters(its::AsnDescObject* description, its::AsnObject* any) : its::AsnAny(description, any)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Parameters()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Parameters(*this);
        }

        virtual std::string GetName() const
        { return "Parameters"; }

    };


////////// End Nested Class(es) //////////

    AlgorithmIdentifier() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    AlgorithmIdentifier(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    AlgorithmIdentifier(const AlgorithmIdentifier& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AlgorithmIdentifier(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAlgorithmStaticDescription();
    static its::AsnDescObject* GetParametersStaticDescription();

public:

    virtual ~AlgorithmIdentifier()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AlgorithmIdentifier(*this);
    }

    virtual std::string GetName() const
    { return "AlgorithmIdentifier"; }

    void SetAlgorithm(Algorithm* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlgorithmStaticDescription());
        AddElement(0, element);
    }

    void SetAlgorithm(const Algorithm& element)
    {
        its::AsnObject& asnObject = const_cast<Algorithm&>(element);
        asnObject.SetDescription(GetAlgorithmStaticDescription());
        AddElement(0, element);
    }

    const Algorithm& GetAlgorithm() const
    {
        return static_cast<const Algorithm&> (ElementAt(0));
    }

    void SetParameters(Parameters* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetParametersStaticDescription());
        AddElement(1, element);
    }

    void SetParameters(const Parameters& element)
    {
        its::AsnObject& asnObject = const_cast<Parameters&>(element);
        asnObject.SetDescription(GetParametersStaticDescription());
        AddElement(1, element);
    }

    bool OptionParameters() const
    {
        return Contains(1);
    }

    const Parameters& GetParameters() const
    {
        ITS_REQUIRE(OptionParameters());
        return static_cast<const Parameters&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ALGORITHM_IDENTIFIER_H_)

