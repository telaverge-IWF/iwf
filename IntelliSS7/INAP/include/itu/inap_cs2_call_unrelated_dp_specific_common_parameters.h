//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CALL_UNRELATED_DP_SPECIFIC_COMMON_PARAMETERS_H_)
#define _INAP_CS2_CALL_UNRELATED_DP_SPECIFIC_COMMON_PARAMETERS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <inap_cs2_service_address_information.h>
#include <inap_cs2_calling_party_number.h>
#include <inap_cs2_location_number.h>
#include <inap_cs2_terminal_type.h>
#include <inap_cs2_extension_field.h>



namespace inap_cs2 {



class CallUnrelatedDpSpecificCommonParameters : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::ServiceAddressInformation ServiceAddressInformation;


        typedef inap_cs2::CallingPartyNumber CallingPartyNumber;


        typedef inap_cs2::LocationNumber LocationNumber;


        typedef inap_cs2::TerminalType TerminalType;


////////// End Nested Class(es) //////////

    CallUnrelatedDpSpecificCommonParameters() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    CallUnrelatedDpSpecificCommonParameters(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    CallUnrelatedDpSpecificCommonParameters(const CallUnrelatedDpSpecificCommonParameters& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CallUnrelatedDpSpecificCommonParameters(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceAddressInformationStaticDescription();
    static its::AsnDescObject* GetCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetLocationNumberStaticDescription();
    static its::AsnDescObject* GetTerminalTypeStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();

public:

    virtual ~CallUnrelatedDpSpecificCommonParameters()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallUnrelatedDpSpecificCommonParameters(*this);
    }

    virtual std::string GetName() const
    { return "CallUnrelatedDpSpecificCommonParameters"; }

    void SetServiceAddressInformation(ServiceAddressInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceAddressInformationStaticDescription());
        AddElement(0, element);
    }

    void SetServiceAddressInformation(const ServiceAddressInformation& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceAddressInformation&>(element);
        asnObject.SetDescription(GetServiceAddressInformationStaticDescription());
        AddElement(0, element);
    }

    const ServiceAddressInformation& GetServiceAddressInformation() const
    {
        return static_cast<const ServiceAddressInformation&> (ElementAt(0));
    }

    void SetCallingPartyNumber(CallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(1, element);
    }

    void SetCallingPartyNumber(const CallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyNumber&>(element);
        asnObject.SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(1, element);
    }

    bool OptionCallingPartyNumber() const
    {
        return Contains(1);
    }

    const CallingPartyNumber& GetCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionCallingPartyNumber());
        return static_cast<const CallingPartyNumber&> (ElementAt(1));
    }

    void SetLocationNumber(LocationNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
        AddElement(2, element);
    }

    void SetLocationNumber(const LocationNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
        asnObject.SetDescription(GetLocationNumberStaticDescription());
        AddElement(2, element);
    }

    bool OptionLocationNumber() const
    {
        return Contains(2);
    }

    const LocationNumber& GetLocationNumber() const
    {
        ITS_REQUIRE(OptionLocationNumber());
        return static_cast<const LocationNumber&> (ElementAt(2));
    }

    void SetTerminalType(TerminalType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTerminalTypeStaticDescription());
        AddElement(3, element);
    }

    void SetTerminalType(const TerminalType& element)
    {
        its::AsnObject& asnObject = const_cast<TerminalType&>(element);
        asnObject.SetDescription(GetTerminalTypeStaticDescription());
        AddElement(3, element);
    }

    const TerminalType& GetTerminalType() const
    {
        return static_cast<const TerminalType&> (ElementAt(3));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(4, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(4, element);
    }

    bool OptionExtensions() const
    {
        return Contains(4);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CALL_UNRELATED_DP_SPECIFIC_COMMON_PARAMETERS_H_)

