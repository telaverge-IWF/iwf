//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CONTINUATION_REFERENCE_H_)
#define _INAP_CS2_CONTINUATION_REFERENCE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnInteger.h>
#include <AsnSetOf.h>
#include <AsnChoice.h>
#include <AsnEnumerated.h>

#include <inap_cs2_name.h>
#include <inap_cs2_operation_progress.h>
#include <inap_cs2_reference_type.h>
#include <inap_cs2_access_point.h>



namespace inap_cs2 {



class ContinuationReference : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////



    class AliasedRDNs : public its::AsnInteger
    {
    public:

        AliasedRDNs() : its::AsnInteger(false)
        {
            Initialize();
        }

        AliasedRDNs(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        AliasedRDNs(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        AliasedRDNs(const AliasedRDNs& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        AliasedRDNs(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        AliasedRDNs(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AliasedRDNs()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AliasedRDNs(*this);
        }

        virtual std::string GetName() const
        { return "AliasedRDNs"; }

    };



    class RdnsResolved : public its::AsnInteger
    {
    public:

        RdnsResolved() : its::AsnInteger(false)
        {
            Initialize();
        }

        RdnsResolved(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        RdnsResolved(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        RdnsResolved(const RdnsResolved& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        RdnsResolved(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        RdnsResolved(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~RdnsResolved()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RdnsResolved(*this);
        }

        virtual std::string GetName() const
        { return "RdnsResolved"; }

    };



    class AccessPoints : public its::AsnSetOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::AccessPoint AccessPoint;


    ////////// End Nested Class //////////

        AccessPoints() : its::AsnSetOf(false)
        {
            Initialize();
        }

        AccessPoints(its::Octets& octets) : its::AsnSetOf(false)
        {
            Initialize();
            Decode(octets);
        }

        AccessPoints(const AccessPoints& rhs) : its::AsnSetOf(rhs)
        {
            // Nothing to do.
        }

        AccessPoints(its::AsnDescObject* description) : its::AsnSetOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAccessPointStaticDescription();

    public:

        virtual ~AccessPoints()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AccessPoints(*this);
        }

        virtual std::string GetName() const
        { return "AccessPoints"; }

        void AddElement(AccessPoint* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAccessPointStaticDescription());
            AsnSetOf::AddElement(element);
        }

        void AddElement(const AccessPoint& element)
        {
            its::AsnObject& asnObject = const_cast<AccessPoint&>(element);
            asnObject.SetDescription(GetAccessPointStaticDescription());
            AsnSetOf::AddElement(element);
        }

        const AccessPoint& ElementAt(int index) const
        {
            return static_cast<const AccessPoint&> (AsnSetOf::ElementAt(index));
        }

    };


        typedef inap_cs2::Name Name;


        typedef inap_cs2::OperationProgress OperationProgress;


        typedef inap_cs2::ReferenceType ReferenceType;


////////// End Nested Class(es) //////////

    ContinuationReference() : its::AsnSet(6, false)
    {
        Initialize();
    }

    ContinuationReference(its::Octets& octets) : its::AsnSet(6, false)
    {
        Initialize();
        Decode(octets);
    }

    ContinuationReference(const ContinuationReference& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    ContinuationReference(its::AsnDescObject* description) : its::AsnSet(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTargetObjectStaticDescription();
    static its::AsnDescObject* GetAliasedRDNsStaticDescription();
    static its::AsnDescObject* GetOperationProgressStaticDescription();
    static its::AsnDescObject* GetRdnsResolvedStaticDescription();
    static its::AsnDescObject* GetReferenceTypeStaticDescription();
    static its::AsnDescObject* GetAccessPointsStaticDescription();

public:

    virtual ~ContinuationReference()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ContinuationReference(*this);
    }

    virtual std::string GetName() const
    { return "ContinuationReference"; }

    void SetTargetObject(Name* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetObjectStaticDescription());
        AddElement(0, element);
    }

    void SetTargetObject(const Name& element)
    {
        its::AsnObject& asnObject = const_cast<Name&>(element);
        asnObject.SetDescription(GetTargetObjectStaticDescription());
        AddElement(0, element);
}

    const Name& GetTargetObject() const
    {
        return static_cast<const Name&> (ElementAt(0));
    }

    void SetAliasedRDNs(AliasedRDNs* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAliasedRDNsStaticDescription());
        AddElement(1, element);
    }

    void SetAliasedRDNs(const AliasedRDNs& element)
    {
        its::AsnObject& asnObject = const_cast<AliasedRDNs&>(element);
        asnObject.SetDescription(GetAliasedRDNsStaticDescription());
        AddElement(1, element);
}

    bool OptionAliasedRDNs() const
    {
        return Contains(1);
    }

    const AliasedRDNs& GetAliasedRDNs() const
    {
        ITS_REQUIRE(OptionAliasedRDNs());
        return static_cast<const AliasedRDNs&> (ElementAt(1));
    }

    void SetOperationProgress(OperationProgress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOperationProgressStaticDescription());
        AddElement(2, element);
    }

    void SetOperationProgress(const OperationProgress& element)
    {
        its::AsnObject& asnObject = const_cast<OperationProgress&>(element);
        asnObject.SetDescription(GetOperationProgressStaticDescription());
        AddElement(2, element);
}

    const OperationProgress& GetOperationProgress() const
    {
        return static_cast<const OperationProgress&> (ElementAt(2));
    }

    void SetRdnsResolved(RdnsResolved* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRdnsResolvedStaticDescription());
        AddElement(3, element);
    }

    void SetRdnsResolved(const RdnsResolved& element)
    {
        its::AsnObject& asnObject = const_cast<RdnsResolved&>(element);
        asnObject.SetDescription(GetRdnsResolvedStaticDescription());
        AddElement(3, element);
}

    bool OptionRdnsResolved() const
    {
        return Contains(3);
    }

    const RdnsResolved& GetRdnsResolved() const
    {
        ITS_REQUIRE(OptionRdnsResolved());
        return static_cast<const RdnsResolved&> (ElementAt(3));
    }

    void SetReferenceType(ReferenceType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReferenceTypeStaticDescription());
        AddElement(4, element);
    }

    void SetReferenceType(const ReferenceType& element)
    {
        its::AsnObject& asnObject = const_cast<ReferenceType&>(element);
        asnObject.SetDescription(GetReferenceTypeStaticDescription());
        AddElement(4, element);
}

    bool OptionReferenceType() const
    {
        return Contains(4);
    }

    const ReferenceType& GetReferenceType() const
    {
        ITS_REQUIRE(OptionReferenceType());
        return static_cast<const ReferenceType&> (ElementAt(4));
    }

    void SetAccessPoints(AccessPoints* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAccessPointsStaticDescription());
        AddElement(5, element);
    }

    void SetAccessPoints(const AccessPoints& element)
    {
        its::AsnObject& asnObject = const_cast<AccessPoints&>(element);
        asnObject.SetDescription(GetAccessPointsStaticDescription());
        AddElement(5, element);
}

    const AccessPoints& GetAccessPoints() const
    {
        return static_cast<const AccessPoints&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CONTINUATION_REFERENCE_H_)

