//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_NAME_H_)
#define _INAP_CS2_NAME_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_rdn_sequence.h>



namespace inap_cs2 {



class Name : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::RDNSequence RDNSequence;


////////// End Nested Class(es) //////////

    Name() : its::AsnChoice(false)
    {
        Initialize();
    }

    Name(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Name(const Name& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Name(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Name(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRdnSequenceStaticDescription();

public:

    virtual ~Name()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Name(*this);
    }

    virtual std::string GetName() const
    { return "Name"; }

    void SetChoiceRdnSequence(RDNSequence* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRdnSequenceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRdnSequence(const RDNSequence& choice)
    {
        its::AsnObject& asnObject = const_cast<RDNSequence&>(choice);
        asnObject.SetDescription(GetRdnSequenceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRdnSequence() const
    {
        return Contains(GetRdnSequenceStaticDescription()->TagIdentity());
    }

    const RDNSequence& GetChoiceRdnSequence() const
    {
        ITS_REQUIRE(ChoiceRdnSequence());
        return static_cast<const RDNSequence&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_NAME_H_)

