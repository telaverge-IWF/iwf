//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_BCSM_EVENT_H_)
#define _INAP_CS2_BCSM_EVENT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>

#include <inap_cs2_event_type_bcsm.h>
#include <inap_cs2_monitor_mode.h>
#include <inap_cs2_leg_id.h>
#include <inap_cs2_dp_specific_criteria.h>



namespace inap_cs2 {



class BCSMEvent : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::EventTypeBCSM EventTypeBCSM;


        typedef inap_cs2::MonitorMode MonitorMode;


        typedef inap_cs2::LegID LegID;


        typedef inap_cs2::DpSpecificCriteria DpSpecificCriteria;


////////// End Nested Class(es) //////////

    BCSMEvent() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    BCSMEvent(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    BCSMEvent(const BCSMEvent& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    BCSMEvent(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetEventTypeBCSMStaticDescription();
    static its::AsnDescObject* GetMonitorModeStaticDescription();
    static its::AsnDescObject* GetLegIDStaticDescription();
    static its::AsnDescObject* GetDpSpecificCriteriaStaticDescription();

public:

    virtual ~BCSMEvent()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new BCSMEvent(*this);
    }

    virtual std::string GetName() const
    { return "BCSMEvent"; }

    void SetEventTypeBCSM(EventTypeBCSM* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(0, element);
    }

    void SetEventTypeBCSM(const EventTypeBCSM& element)
    {
        its::AsnObject& asnObject = const_cast<EventTypeBCSM&>(element);
        asnObject.SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(0, element);
    }

    const EventTypeBCSM& GetEventTypeBCSM() const
    {
        return static_cast<const EventTypeBCSM&> (ElementAt(0));
    }

    void SetMonitorMode(MonitorMode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMonitorModeStaticDescription());
        AddElement(1, element);
    }

    void SetMonitorMode(const MonitorMode& element)
    {
        its::AsnObject& asnObject = const_cast<MonitorMode&>(element);
        asnObject.SetDescription(GetMonitorModeStaticDescription());
        AddElement(1, element);
    }

    const MonitorMode& GetMonitorMode() const
    {
        return static_cast<const MonitorMode&> (ElementAt(1));
    }

    void SetLegID(LegID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLegIDStaticDescription());
        AddElement(2, element);
    }

    void SetLegID(const LegID& element)
    {
        its::AsnObject& asnObject = const_cast<LegID&>(element);
        asnObject.SetDescription(GetLegIDStaticDescription());
        AddElement(2, element);
    }

    bool OptionLegID() const
    {
        return Contains(2);
    }

    const LegID& GetLegID() const
    {
        ITS_REQUIRE(OptionLegID());
        return static_cast<const LegID&> (ElementAt(2));
    }

    void SetDpSpecificCriteria(DpSpecificCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDpSpecificCriteriaStaticDescription());
        AddElement(3, element);
    }

    void SetDpSpecificCriteria(const DpSpecificCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<DpSpecificCriteria&>(element);
        asnObject.SetDescription(GetDpSpecificCriteriaStaticDescription());
        AddElement(3, element);
    }

    bool OptionDpSpecificCriteria() const
    {
        return Contains(3);
    }

    const DpSpecificCriteria& GetDpSpecificCriteria() const
    {
        ITS_REQUIRE(OptionDpSpecificCriteria());
        return static_cast<const DpSpecificCriteria&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_BCSM_EVENT_H_)

