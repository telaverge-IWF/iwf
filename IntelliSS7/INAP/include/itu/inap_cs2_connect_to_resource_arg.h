//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CONNECT_TO_RESOURCE_ARG_H_)
#define _INAP_CS2_CONNECT_TO_RESOURCE_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_ip_routing_address.h>
#include <inap_cs2_leg_id.h>
#include <inap_cs2_call_segment_id.h>
#include <inap_cs2_extension_field.h>
#include <inap_cs2_service_interaction_indicators.h>
#include <inap_cs2_service_interaction_indicators_two.h>



namespace inap_cs2 {



class ConnectToResourceArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class ResourceAddress : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class IpAddressAndLegID : public its::AsnSequence
        {
        public:


        ////////// Begin Nested Class(es) //////////


                typedef inap_cs2::IPRoutingAddress IPRoutingAddress;


                typedef inap_cs2::LegID LegID;


        ////////// End Nested Class(es) //////////

            IpAddressAndLegID() : its::AsnSequence(2, false)
            {
                Initialize();
            }

            IpAddressAndLegID(its::Octets& octets) : its::AsnSequence(2, false)
            {
                Initialize();
                Decode(octets);
            }

            IpAddressAndLegID(const IpAddressAndLegID& rhs) : its::AsnSequence(rhs)
            {
                // Nothing to do.
            }

            IpAddressAndLegID(its::AsnDescObject* description) : its::AsnSequence(2, description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetIpRoutingAddressStaticDescription();
            static its::AsnDescObject* GetLegIDStaticDescription();

        public:

            virtual ~IpAddressAndLegID()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new IpAddressAndLegID(*this);
            }

            virtual std::string GetName() const
            { return "IpAddressAndLegID"; }

            void SetIpRoutingAddress(IPRoutingAddress* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetIpRoutingAddressStaticDescription());
                AddElement(0, element);
            }

            void SetIpRoutingAddress(const IPRoutingAddress& element)
            {
                its::AsnObject& asnObject = const_cast<IPRoutingAddress&>(element);
                asnObject.SetDescription(GetIpRoutingAddressStaticDescription());
                AddElement(0, element);
            }

            const IPRoutingAddress& GetIpRoutingAddress() const
            {
                return static_cast<const IPRoutingAddress&> (ElementAt(0));
            }

            void SetLegID(LegID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetLegIDStaticDescription());
                AddElement(1, element);
            }

            void SetLegID(const LegID& element)
            {
                its::AsnObject& asnObject = const_cast<LegID&>(element);
                asnObject.SetDescription(GetLegIDStaticDescription());
                AddElement(1, element);
            }

            const LegID& GetLegID() const
            {
                return static_cast<const LegID&> (ElementAt(1));
            }

        };



        class None : public its::AsnNull
        {
        public:

            None() : its::AsnNull(false)
            {
                Initialize();
            }

            None(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            None(const None& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            None(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~None()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new None(*this);
            }

            virtual std::string GetName() const
            { return "None"; }

        };



        class IpAddressAndCallSegment : public its::AsnSequence
        {
        public:


        ////////// Begin Nested Class(es) //////////


                typedef inap_cs2::IPRoutingAddress IPRoutingAddress;


                typedef inap_cs2::CallSegmentID CallSegmentID;


        ////////// End Nested Class(es) //////////

            IpAddressAndCallSegment() : its::AsnSequence(2, false)
            {
                Initialize();
            }

            IpAddressAndCallSegment(its::Octets& octets) : its::AsnSequence(2, false)
            {
                Initialize();
                Decode(octets);
            }

            IpAddressAndCallSegment(const IpAddressAndCallSegment& rhs) : its::AsnSequence(rhs)
            {
                // Nothing to do.
            }

            IpAddressAndCallSegment(its::AsnDescObject* description) : its::AsnSequence(2, description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetIpRoutingAddressStaticDescription();
            static its::AsnDescObject* GetCallSegmentIDStaticDescription();

        public:

            virtual ~IpAddressAndCallSegment()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new IpAddressAndCallSegment(*this);
            }

            virtual std::string GetName() const
            { return "IpAddressAndCallSegment"; }

            void SetIpRoutingAddress(IPRoutingAddress* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetIpRoutingAddressStaticDescription());
                AddElement(0, element);
            }

            void SetIpRoutingAddress(const IPRoutingAddress& element)
            {
                its::AsnObject& asnObject = const_cast<IPRoutingAddress&>(element);
                asnObject.SetDescription(GetIpRoutingAddressStaticDescription());
                AddElement(0, element);
            }

            const IPRoutingAddress& GetIpRoutingAddress() const
            {
                return static_cast<const IPRoutingAddress&> (ElementAt(0));
            }

            void SetCallSegmentID(CallSegmentID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetCallSegmentIDStaticDescription());
                AddElement(1, element);
            }

            void SetCallSegmentID(const CallSegmentID& element)
            {
                its::AsnObject& asnObject = const_cast<CallSegmentID&>(element);
                asnObject.SetDescription(GetCallSegmentIDStaticDescription());
                AddElement(1, element);
            }

            const CallSegmentID& GetCallSegmentID() const
            {
                return static_cast<const CallSegmentID&> (ElementAt(1));
            }

        };


            typedef inap_cs2::IPRoutingAddress IPRoutingAddress;


            typedef inap_cs2::LegID LegID;


            typedef inap_cs2::CallSegmentID CallSegmentID;


    ////////// End Nested Class(es) //////////

        ResourceAddress() : its::AsnChoice(false)
        {
            Initialize();
        }

        ResourceAddress(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        ResourceAddress(const ResourceAddress& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        ResourceAddress(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        ResourceAddress(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetIpRoutingAddressStaticDescription();
        static its::AsnDescObject* GetLegIDStaticDescription();
        static its::AsnDescObject* GetIpAddressAndLegIDStaticDescription();
        static its::AsnDescObject* GetNoneStaticDescription();
        static its::AsnDescObject* GetCallSegmentIDStaticDescription();
        static its::AsnDescObject* GetIpAddressAndCallSegmentStaticDescription();

    public:

        virtual ~ResourceAddress()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ResourceAddress(*this);
        }

        virtual std::string GetName() const
        { return "ResourceAddress"; }

        void SetChoiceIpRoutingAddress(IPRoutingAddress* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetIpRoutingAddressStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceIpRoutingAddress(const IPRoutingAddress& choice)
        {
            its::AsnObject& asnObject = const_cast<IPRoutingAddress&>(choice);
            asnObject.SetDescription(GetIpRoutingAddressStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceIpRoutingAddress() const
        {
            return Contains(GetIpRoutingAddressStaticDescription()->TagIdentity());
        }

        const IPRoutingAddress& GetChoiceIpRoutingAddress() const
        {
            ITS_REQUIRE(ChoiceIpRoutingAddress());
            return static_cast<const IPRoutingAddress&> (GetChoice());
        }

        void SetChoiceLegID(LegID* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetLegIDStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceLegID(const LegID& choice)
        {
            its::AsnObject& asnObject = const_cast<LegID&>(choice);
            asnObject.SetDescription(GetLegIDStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceLegID() const
        {
            return Contains(GetLegIDStaticDescription()->TagIdentity());
        }

        const LegID& GetChoiceLegID() const
        {
            ITS_REQUIRE(ChoiceLegID());
            return static_cast<const LegID&> (GetChoice());
        }

        void SetChoiceIpAddressAndLegID(IpAddressAndLegID* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetIpAddressAndLegIDStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceIpAddressAndLegID(const IpAddressAndLegID& choice)
        {
            its::AsnObject& asnObject = const_cast<IpAddressAndLegID&>(choice);
            asnObject.SetDescription(GetIpAddressAndLegIDStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceIpAddressAndLegID() const
        {
            return Contains(GetIpAddressAndLegIDStaticDescription()->TagIdentity());
        }

        const IpAddressAndLegID& GetChoiceIpAddressAndLegID() const
        {
            ITS_REQUIRE(ChoiceIpAddressAndLegID());
            return static_cast<const IpAddressAndLegID&> (GetChoice());
        }

        void SetChoiceNone(None* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetNoneStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceNone(const None& choice)
        {
            its::AsnObject& asnObject = const_cast<None&>(choice);
            asnObject.SetDescription(GetNoneStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceNone() const
        {
            return Contains(GetNoneStaticDescription()->TagIdentity());
        }

        const None& GetChoiceNone() const
        {
            ITS_REQUIRE(ChoiceNone());
            return static_cast<const None&> (GetChoice());
        }

        void SetChoiceCallSegmentID(CallSegmentID* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetCallSegmentIDStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceCallSegmentID(const CallSegmentID& choice)
        {
            its::AsnObject& asnObject = const_cast<CallSegmentID&>(choice);
            asnObject.SetDescription(GetCallSegmentIDStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceCallSegmentID() const
        {
            return Contains(GetCallSegmentIDStaticDescription()->TagIdentity());
        }

        const CallSegmentID& GetChoiceCallSegmentID() const
        {
            ITS_REQUIRE(ChoiceCallSegmentID());
            return static_cast<const CallSegmentID&> (GetChoice());
        }

        void SetChoiceIpAddressAndCallSegment(IpAddressAndCallSegment* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetIpAddressAndCallSegmentStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceIpAddressAndCallSegment(const IpAddressAndCallSegment& choice)
        {
            its::AsnObject& asnObject = const_cast<IpAddressAndCallSegment&>(choice);
            asnObject.SetDescription(GetIpAddressAndCallSegmentStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceIpAddressAndCallSegment() const
        {
            return Contains(GetIpAddressAndCallSegmentStaticDescription()->TagIdentity());
        }

        const IpAddressAndCallSegment& GetChoiceIpAddressAndCallSegment() const
        {
            ITS_REQUIRE(ChoiceIpAddressAndCallSegment());
            return static_cast<const IpAddressAndCallSegment&> (GetChoice());
        }

    };



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::ServiceInteractionIndicators ServiceInteractionIndicators;


        typedef inap_cs2::ServiceInteractionIndicatorsTwo ServiceInteractionIndicatorsTwo;


////////// End Nested Class(es) //////////

    ConnectToResourceArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    ConnectToResourceArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    ConnectToResourceArg(const ConnectToResourceArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ConnectToResourceArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetResourceAddressStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetServiceInteractionIndicatorsStaticDescription();
    static its::AsnDescObject* GetServiceInteractionIndicatorsTwoStaticDescription();

public:

    virtual ~ConnectToResourceArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ConnectToResourceArg(*this);
    }

    virtual std::string GetName() const
    { return "ConnectToResourceArg"; }

    void SetResourceAddress(ResourceAddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetResourceAddressStaticDescription());
        AddElement(0, element);
    }

    void SetResourceAddress(const ResourceAddress& element)
    {
        its::AsnObject& asnObject = const_cast<ResourceAddress&>(element);
        asnObject.SetDescription(GetResourceAddressStaticDescription());
        AddElement(0, element);
    }

    const ResourceAddress& GetResourceAddress() const
    {
        return static_cast<const ResourceAddress&> (ElementAt(0));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(1, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtensions() const
    {
        return Contains(1);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(1));
    }

    void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceInteractionIndicatorsStaticDescription());
        AddElement(2, element);
    }

    void SetServiceInteractionIndicators(const ServiceInteractionIndicators& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceInteractionIndicators&>(element);
        asnObject.SetDescription(GetServiceInteractionIndicatorsStaticDescription());
        AddElement(2, element);
    }

    bool OptionServiceInteractionIndicators() const
    {
        return Contains(2);
    }

    const ServiceInteractionIndicators& GetServiceInteractionIndicators() const
    {
        ITS_REQUIRE(OptionServiceInteractionIndicators());
        return static_cast<const ServiceInteractionIndicators&> (ElementAt(2));
    }

    void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(3, element);
    }

    void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceInteractionIndicatorsTwo&>(element);
        asnObject.SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(3, element);
    }

    bool OptionServiceInteractionIndicatorsTwo() const
    {
        return Contains(3);
    }

    const ServiceInteractionIndicatorsTwo& GetServiceInteractionIndicatorsTwo() const
    {
        ITS_REQUIRE(OptionServiceInteractionIndicatorsTwo());
        return static_cast<const ServiceInteractionIndicatorsTwo&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CONNECT_TO_RESOURCE_ARG_H_)

