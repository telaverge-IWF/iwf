//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FILTERING_TIME_OUT_H_)
#define _INAP_CS2_FILTERING_TIME_OUT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <inap_cs2_duration.h>
#include <inap_cs2_date_and_time.h>



namespace inap_cs2 {



class FilteringTimeOut : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Duration Duration;


        typedef inap_cs2::DateAndTime DateAndTime;


////////// End Nested Class(es) //////////

    FilteringTimeOut() : its::AsnChoice(false)
    {
        Initialize();
    }

    FilteringTimeOut(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    FilteringTimeOut(const FilteringTimeOut& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    FilteringTimeOut(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    FilteringTimeOut(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDurationStaticDescription();
    static its::AsnDescObject* GetStopTimeStaticDescription();

public:

    virtual ~FilteringTimeOut()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FilteringTimeOut(*this);
    }

    virtual std::string GetName() const
    { return "FilteringTimeOut"; }

    void SetChoiceDuration(Duration* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDurationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDuration(const Duration& choice)
    {
        its::AsnObject& asnObject = const_cast<Duration&>(choice);
        asnObject.SetDescription(GetDurationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDuration() const
    {
        return Contains(GetDurationStaticDescription()->TagIdentity());
    }

    const Duration& GetChoiceDuration() const
    {
        ITS_REQUIRE(ChoiceDuration());
        return static_cast<const Duration&> (GetChoice());
    }

    void SetChoiceStopTime(DateAndTime* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetStopTimeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceStopTime(const DateAndTime& choice)
    {
        its::AsnObject& asnObject = const_cast<DateAndTime&>(choice);
        asnObject.SetDescription(GetStopTimeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceStopTime() const
    {
        return Contains(GetStopTimeStaticDescription()->TagIdentity());
    }

    const DateAndTime& GetChoiceStopTime() const
    {
        ITS_REQUIRE(ChoiceStopTime());
        return static_cast<const DateAndTime&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FILTERING_TIME_OUT_H_)

