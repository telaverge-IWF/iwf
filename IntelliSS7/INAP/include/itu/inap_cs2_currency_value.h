//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CURRENCY_VALUE_H_)
#define _INAP_CS2_CURRENCY_VALUE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnBaseString.h>

#include <inap_cs2_currency_id.h>



namespace inap_cs2 {



class CurrencyValue : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Amount : public its::AsnInteger
    {
    public:

        Amount() : its::AsnInteger(false)
        {
            Initialize();
        }

        Amount(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        Amount(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        Amount(const Amount& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        Amount(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        Amount(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Amount()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Amount(*this);
        }

        virtual std::string GetName() const
        { return "Amount"; }

    };


        typedef inap_cs2::CurrencyID CurrencyID;


////////// End Nested Class(es) //////////

    CurrencyValue() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CurrencyValue(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CurrencyValue(const CurrencyValue& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CurrencyValue(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCurrencyStaticDescription();
    static its::AsnDescObject* GetAmountStaticDescription();

public:

    virtual ~CurrencyValue()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CurrencyValue(*this);
    }

    virtual std::string GetName() const
    { return "CurrencyValue"; }

    void SetCurrency(CurrencyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCurrencyStaticDescription());
        AddElement(0, element);
    }

    void SetCurrency(const CurrencyID& element)
    {
        its::AsnObject& asnObject = const_cast<CurrencyID&>(element);
        asnObject.SetDescription(GetCurrencyStaticDescription());
        AddElement(0, element);
    }

    const CurrencyID& GetCurrency() const
    {
        return static_cast<const CurrencyID&> (ElementAt(0));
    }

    void SetAmount(Amount* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAmountStaticDescription());
        AddElement(1, element);
    }

    void SetAmount(const Amount& element)
    {
        its::AsnObject& asnObject = const_cast<Amount&>(element);
        asnObject.SetDescription(GetAmountStaticDescription());
        AddElement(1, element);
    }

    const Amount& GetAmount() const
    {
        return static_cast<const Amount&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CURRENCY_VALUE_H_)

