//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CREDENTIALS_H_)
#define _INAP_CS2_CREDENTIALS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnSet.h>

#include <inap_cs2_simple_credentials.h>
#include <inap_cs2_strong_credentials.h>
#include <EXTERNAL.h>



namespace inap_cs2 {



class Credentials : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::SimpleCredentials SimpleCredentials;


        typedef inap_cs2::StrongCredentials StrongCredentials;


    typedef its::EXTERNAL EXTERNAL;


////////// End Nested Class(es) //////////

    Credentials() : its::AsnChoice(false)
    {
        Initialize();
    }

    Credentials(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Credentials(const Credentials& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Credentials(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Credentials(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSimpleStaticDescription();
    static its::AsnDescObject* GetStrongStaticDescription();
    static its::AsnDescObject* GetExternalProcedureStaticDescription();

public:

    virtual ~Credentials()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Credentials(*this);
    }

    virtual std::string GetName() const
    { return "Credentials"; }

    void SetChoiceSimple(SimpleCredentials* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSimpleStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSimple(const SimpleCredentials& choice)
    {
        its::AsnObject& asnObject = const_cast<SimpleCredentials&>(choice);
        asnObject.SetDescription(GetSimpleStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSimple() const
    {
        return Contains(GetSimpleStaticDescription()->TagIdentity());
    }

    const SimpleCredentials& GetChoiceSimple() const
    {
        ITS_REQUIRE(ChoiceSimple());
        return static_cast<const SimpleCredentials&> (GetChoice());
    }

    void SetChoiceStrong(StrongCredentials* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetStrongStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceStrong(const StrongCredentials& choice)
    {
        its::AsnObject& asnObject = const_cast<StrongCredentials&>(choice);
        asnObject.SetDescription(GetStrongStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceStrong() const
    {
        return Contains(GetStrongStaticDescription()->TagIdentity());
    }

    const StrongCredentials& GetChoiceStrong() const
    {
        ITS_REQUIRE(ChoiceStrong());
        return static_cast<const StrongCredentials&> (GetChoice());
    }

    void SetChoiceExternalProcedure(EXTERNAL* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetExternalProcedureStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceExternalProcedure(const EXTERNAL& choice)
    {
        its::AsnObject& asnObject = const_cast<EXTERNAL&>(choice);
        asnObject.SetDescription(GetExternalProcedureStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceExternalProcedure() const
    {
        return Contains(GetExternalProcedureStaticDescription()->TagIdentity());
    }

    const EXTERNAL& GetChoiceExternalProcedure() const
    {
        ITS_REQUIRE(ChoiceExternalProcedure());
        return static_cast<const EXTERNAL&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CREDENTIALS_H_)

