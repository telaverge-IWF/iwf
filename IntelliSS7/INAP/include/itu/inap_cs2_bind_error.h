//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_BIND_ERROR_H_)
#define _INAP_CS2_BIND_ERROR_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>

#include <inap_cs2_service_problem.h>
#include <inap_cs2_security_problem.h>



namespace inap_cs2 {



class BindError : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::ServiceProblem ServiceProblem;


        typedef inap_cs2::SecurityProblem SecurityProblem;


////////// End Nested Class(es) //////////

    BindError() : its::AsnChoice(false)
    {
        Initialize();
    }

    BindError(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    BindError(const BindError& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    BindError(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    BindError(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceErrorStaticDescription();
    static its::AsnDescObject* GetSecurityErrorStaticDescription();

public:

    virtual ~BindError()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new BindError(*this);
    }

    virtual std::string GetName() const
    { return "BindError"; }

    void SetChoiceServiceError(ServiceProblem* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetServiceErrorStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceServiceError(const ServiceProblem& choice)
    {
        its::AsnObject& asnObject = const_cast<ServiceProblem&>(choice);
        asnObject.SetDescription(GetServiceErrorStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceServiceError() const
    {
        return Contains(GetServiceErrorStaticDescription()->TagIdentity());
    }

    const ServiceProblem& GetChoiceServiceError() const
    {
        ITS_REQUIRE(ChoiceServiceError());
        return static_cast<const ServiceProblem&> (GetChoice());
    }

    void SetChoiceSecurityError(SecurityProblem* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSecurityErrorStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSecurityError(const SecurityProblem& choice)
    {
        its::AsnObject& asnObject = const_cast<SecurityProblem&>(choice);
        asnObject.SetDescription(GetSecurityErrorStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSecurityError() const
    {
        return Contains(GetSecurityErrorStaticDescription()->TagIdentity());
    }

    const SecurityProblem& GetChoiceSecurityError() const
    {
        ITS_REQUIRE(ChoiceSecurityError());
        return static_cast<const SecurityProblem&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_BIND_ERROR_H_)

