//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_REQUESTED_INFORMATION_TYPE_H_)
#define _INAP_CS2_REQUESTED_INFORMATION_TYPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace inap_cs2 {



class RequestedInformationType : public its::AsnEnumerated
{
public:

    RequestedInformationType() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    RequestedInformationType(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    RequestedInformationType(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedInformationType(const RequestedInformationType& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    RequestedInformationType(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    RequestedInformationType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~RequestedInformationType()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedInformationType(*this);
    }

    virtual std::string GetName() const
    { return "RequestedInformationType"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        REQUESTED_INFORMATION_TYPE_CALL_ATTEMPT_ELAPSED_TIME = 0,
        REQUESTED_INFORMATION_TYPE_CALL_STOP_TIME = 1,
        REQUESTED_INFORMATION_TYPE_CALL_CONNECTED_ELAPSED_TIME = 2,
        REQUESTED_INFORMATION_TYPE_CALLED_ADDRESS = 3,
        REQUESTED_INFORMATION_TYPE_RELEASE_CAUSE = 30

    };

    void SetCallAttemptElapsedTime()
    { _value = 0; }

    bool IsCallAttemptElapsedTime() const
    { return _value == 0; }

    void SetCallStopTime()
    { _value = 1; }

    bool IsCallStopTime() const
    { return _value == 1; }

    void SetCallConnectedElapsedTime()
    { _value = 2; }

    bool IsCallConnectedElapsedTime() const
    { return _value == 2; }

    void SetCalledAddress()
    { _value = 3; }

    bool IsCalledAddress() const
    { return _value == 3; }

    void SetReleaseCause()
    { _value = 30; }

    bool IsReleaseCause() const
    { return _value == 30; }

};



} // namespace.

#endif    // !defined(_INAP_CS2_REQUESTED_INFORMATION_TYPE_H_)

