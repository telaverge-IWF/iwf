//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_INITIAL_DP_ARG_H_)
#define _INAP_CS2_INITIAL_DP_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>
#include <AsnSetOf.h>

#include <inap_cs2_service_key.h>
#include <inap_cs2_called_party_number.h>
#include <inap_cs2_calling_party_number.h>
#include <inap_cs2_calling_party_business_group_id.h>
#include <inap_cs2_calling_partys_category.h>
#include <inap_cs2_calling_party_subaddress.h>
#include <inap_cs2_cg_encountered.h>
#include <inap_cs2_ipssp_capabilities.h>
#include <inap_cs2_ip_available.h>
#include <inap_cs2_location_number.h>
#include <inap_cs2_misc_call_info.h>
#include <inap_cs2_original_called_party_id.h>
#include <inap_cs2_service_profile_identifier.h>
#include <inap_cs2_terminal_type.h>
#include <inap_cs2_extension_field.h>
#include <inap_cs2_trigger_type.h>
#include <inap_cs2_high_layer_compatibility.h>
#include <inap_cs2_service_interaction_indicators.h>
#include <inap_cs2_additional_calling_party_number.h>
#include <inap_cs2_forward_call_indicators.h>
#include <inap_cs2_bearer_capability.h>
#include <inap_cs2_event_type_bcsm.h>
#include <inap_cs2_redirecting_party_id.h>
#include <inap_cs2_redirection_information.h>
#include <inap_cs2_cause.h>
#include <inap_cs2_component_type.h>
#include <inap_cs2_component_correlation_id.h>
#include <inap_cs2_isdn_access_related_information.h>
#include <inap_cs2_in_service_compatibility_indication.h>
#include <inap_cs2_generic_numbers.h>
#include <inap_cs2_service_interaction_indicators_two.h>
#include <inap_cs2_forward_gvns.h>
#include <inap_cs2_csaid.h>
#include <inap_cs2_usi_service_indicator.h>
#include <inap_cs2_usi_information.h>



namespace inap_cs2 {



class InitialDPArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::ServiceKey ServiceKey;


        typedef inap_cs2::CalledPartyNumber CalledPartyNumber;


        typedef inap_cs2::CallingPartyNumber CallingPartyNumber;


        typedef inap_cs2::CallingPartyBusinessGroupID CallingPartyBusinessGroupID;


        typedef inap_cs2::CallingPartysCategory CallingPartysCategory;


        typedef inap_cs2::CallingPartySubaddress CallingPartySubaddress;


        typedef inap_cs2::CGEncountered CGEncountered;


        typedef inap_cs2::IPSSPCapabilities IPSSPCapabilities;


        typedef inap_cs2::IPAvailable IPAvailable;


        typedef inap_cs2::LocationNumber LocationNumber;


        typedef inap_cs2::MiscCallInfo MiscCallInfo;


        typedef inap_cs2::OriginalCalledPartyID OriginalCalledPartyID;


        typedef inap_cs2::ServiceProfileIdentifier ServiceProfileIdentifier;


        typedef inap_cs2::TerminalType TerminalType;


        typedef inap_cs2::TriggerType TriggerType;


        typedef inap_cs2::HighLayerCompatibility HighLayerCompatibility;


        typedef inap_cs2::ServiceInteractionIndicators ServiceInteractionIndicators;


        typedef inap_cs2::AdditionalCallingPartyNumber AdditionalCallingPartyNumber;


        typedef inap_cs2::ForwardCallIndicators ForwardCallIndicators;


        typedef inap_cs2::BearerCapability BearerCapability;


        typedef inap_cs2::EventTypeBCSM EventTypeBCSM;


        typedef inap_cs2::RedirectingPartyID RedirectingPartyID;


        typedef inap_cs2::RedirectionInformation RedirectionInformation;


        typedef inap_cs2::Cause Cause;


        typedef inap_cs2::ComponentType ComponentType;


        typedef inap_cs2::ComponentCorrelationID ComponentCorrelationID;


        typedef inap_cs2::ISDNAccessRelatedInformation ISDNAccessRelatedInformation;


        typedef inap_cs2::INServiceCompatibilityIndication INServiceCompatibilityIndication;


        typedef inap_cs2::GenericNumbers GenericNumbers;


        typedef inap_cs2::ServiceInteractionIndicatorsTwo ServiceInteractionIndicatorsTwo;


        typedef inap_cs2::ForwardGVNS ForwardGVNS;


        typedef inap_cs2::CSAID CSAID;


        typedef inap_cs2::USIServiceIndicator USIServiceIndicator;


        typedef inap_cs2::USIInformation USIInformation;


////////// End Nested Class(es) //////////

    InitialDPArg() : its::AsnSequence(36, false)
    {
        Initialize();
    }

    InitialDPArg(its::Octets& octets) : its::AsnSequence(36, false)
    {
        Initialize();
        Decode(octets);
    }

    InitialDPArg(const InitialDPArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InitialDPArg(its::AsnDescObject* description) : its::AsnSequence(36, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetDialledDigitsStaticDescription();
    static its::AsnDescObject* GetCalledPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartyBusinessGroupIDStaticDescription();
    static its::AsnDescObject* GetCallingPartysCategoryStaticDescription();
    static its::AsnDescObject* GetCallingPartySubaddressStaticDescription();
    static its::AsnDescObject* GetCGEncounteredStaticDescription();
    static its::AsnDescObject* GetIPSSPCapabilitiesStaticDescription();
    static its::AsnDescObject* GetIPAvailableStaticDescription();
    static its::AsnDescObject* GetLocationNumberStaticDescription();
    static its::AsnDescObject* GetMiscCallInfoStaticDescription();
    static its::AsnDescObject* GetOriginalCalledPartyIDStaticDescription();
    static its::AsnDescObject* GetServiceProfileIdentifierStaticDescription();
    static its::AsnDescObject* GetTerminalTypeStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetTriggerTypeStaticDescription();
    static its::AsnDescObject* GetHighLayerCompatibilityStaticDescription();
    static its::AsnDescObject* GetServiceInteractionIndicatorsStaticDescription();
    static its::AsnDescObject* GetAdditionalCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetForwardCallIndicatorsStaticDescription();
    static its::AsnDescObject* GetBearerCapabilityStaticDescription();
    static its::AsnDescObject* GetEventTypeBCSMStaticDescription();
    static its::AsnDescObject* GetRedirectingPartyIDStaticDescription();
    static its::AsnDescObject* GetRedirectionInformationStaticDescription();
    static its::AsnDescObject* GetCauseStaticDescription();
    static its::AsnDescObject* GetComponentTypeStaticDescription();
    static its::AsnDescObject* GetComponentCorrelationIDStaticDescription();
    static its::AsnDescObject* GetISDNAccessRelatedInformationStaticDescription();
    static its::AsnDescObject* GetINServiceCompatibilityIndicationStaticDescription();
    static its::AsnDescObject* GetGenericNumbersStaticDescription();
    static its::AsnDescObject* GetServiceInteractionIndicatorsTwoStaticDescription();
    static its::AsnDescObject* GetForwardGVNSStaticDescription();
    static its::AsnDescObject* GetCreatedCallSegmentAssociationStaticDescription();
    static its::AsnDescObject* GetUSIServiceIndicatorStaticDescription();
    static its::AsnDescObject* GetUSIInformationStaticDescription();

public:

    virtual ~InitialDPArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InitialDPArg(*this);
    }

    virtual std::string GetName() const
    { return "InitialDPArg"; }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    bool OptionServiceKey() const
    {
        return Contains(0);
    }

    const ServiceKey& GetServiceKey() const
    {
        ITS_REQUIRE(OptionServiceKey());
        return static_cast<const ServiceKey&> (ElementAt(0));
    }

    void SetDialledDigits(CalledPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDialledDigitsStaticDescription());
        AddElement(1, element);
    }

    void SetDialledDigits(const CalledPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
        asnObject.SetDescription(GetDialledDigitsStaticDescription());
        AddElement(1, element);
    }

    bool OptionDialledDigits() const
    {
        return Contains(1);
    }

    const CalledPartyNumber& GetDialledDigits() const
    {
        ITS_REQUIRE(OptionDialledDigits());
        return static_cast<const CalledPartyNumber&> (ElementAt(1));
    }

    void SetCalledPartyNumber(CalledPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(2, element);
    }

    void SetCalledPartyNumber(const CalledPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
        asnObject.SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(2, element);
    }

    bool OptionCalledPartyNumber() const
    {
        return Contains(2);
    }

    const CalledPartyNumber& GetCalledPartyNumber() const
    {
        ITS_REQUIRE(OptionCalledPartyNumber());
        return static_cast<const CalledPartyNumber&> (ElementAt(2));
    }

    void SetCallingPartyNumber(CallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(3, element);
    }

    void SetCallingPartyNumber(const CallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyNumber&>(element);
        asnObject.SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallingPartyNumber() const
    {
        return Contains(3);
    }

    const CallingPartyNumber& GetCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionCallingPartyNumber());
        return static_cast<const CallingPartyNumber&> (ElementAt(3));
    }

    void SetCallingPartyBusinessGroupID(CallingPartyBusinessGroupID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyBusinessGroupIDStaticDescription());
        AddElement(4, element);
    }

    void SetCallingPartyBusinessGroupID(const CallingPartyBusinessGroupID& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyBusinessGroupID&>(element);
        asnObject.SetDescription(GetCallingPartyBusinessGroupIDStaticDescription());
        AddElement(4, element);
    }

    bool OptionCallingPartyBusinessGroupID() const
    {
        return Contains(4);
    }

    const CallingPartyBusinessGroupID& GetCallingPartyBusinessGroupID() const
    {
        ITS_REQUIRE(OptionCallingPartyBusinessGroupID());
        return static_cast<const CallingPartyBusinessGroupID&> (ElementAt(4));
    }

    void SetCallingPartysCategory(CallingPartysCategory* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(5, element);
    }

    void SetCallingPartysCategory(const CallingPartysCategory& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartysCategory&>(element);
        asnObject.SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(5, element);
    }

    bool OptionCallingPartysCategory() const
    {
        return Contains(5);
    }

    const CallingPartysCategory& GetCallingPartysCategory() const
    {
        ITS_REQUIRE(OptionCallingPartysCategory());
        return static_cast<const CallingPartysCategory&> (ElementAt(5));
    }

    void SetCallingPartySubaddress(CallingPartySubaddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartySubaddressStaticDescription());
        AddElement(6, element);
    }

    void SetCallingPartySubaddress(const CallingPartySubaddress& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartySubaddress&>(element);
        asnObject.SetDescription(GetCallingPartySubaddressStaticDescription());
        AddElement(6, element);
    }

    bool OptionCallingPartySubaddress() const
    {
        return Contains(6);
    }

    const CallingPartySubaddress& GetCallingPartySubaddress() const
    {
        ITS_REQUIRE(OptionCallingPartySubaddress());
        return static_cast<const CallingPartySubaddress&> (ElementAt(6));
    }

    void SetCGEncountered(CGEncountered* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCGEncounteredStaticDescription());
        AddElement(7, element);
    }

    void SetCGEncountered(const CGEncountered& element)
    {
        its::AsnObject& asnObject = const_cast<CGEncountered&>(element);
        asnObject.SetDescription(GetCGEncounteredStaticDescription());
        AddElement(7, element);
    }

    bool OptionCGEncountered() const
    {
        return Contains(7);
    }

    const CGEncountered& GetCGEncountered() const
    {
        ITS_REQUIRE(OptionCGEncountered());
        return static_cast<const CGEncountered&> (ElementAt(7));
    }

    void SetIPSSPCapabilities(IPSSPCapabilities* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIPSSPCapabilitiesStaticDescription());
        AddElement(8, element);
    }

    void SetIPSSPCapabilities(const IPSSPCapabilities& element)
    {
        its::AsnObject& asnObject = const_cast<IPSSPCapabilities&>(element);
        asnObject.SetDescription(GetIPSSPCapabilitiesStaticDescription());
        AddElement(8, element);
    }

    bool OptionIPSSPCapabilities() const
    {
        return Contains(8);
    }

    const IPSSPCapabilities& GetIPSSPCapabilities() const
    {
        ITS_REQUIRE(OptionIPSSPCapabilities());
        return static_cast<const IPSSPCapabilities&> (ElementAt(8));
    }

    void SetIPAvailable(IPAvailable* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIPAvailableStaticDescription());
        AddElement(9, element);
    }

    void SetIPAvailable(const IPAvailable& element)
    {
        its::AsnObject& asnObject = const_cast<IPAvailable&>(element);
        asnObject.SetDescription(GetIPAvailableStaticDescription());
        AddElement(9, element);
    }

    bool OptionIPAvailable() const
    {
        return Contains(9);
    }

    const IPAvailable& GetIPAvailable() const
    {
        ITS_REQUIRE(OptionIPAvailable());
        return static_cast<const IPAvailable&> (ElementAt(9));
    }

    void SetLocationNumber(LocationNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
        AddElement(10, element);
    }

    void SetLocationNumber(const LocationNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
        asnObject.SetDescription(GetLocationNumberStaticDescription());
        AddElement(10, element);
    }

    bool OptionLocationNumber() const
    {
        return Contains(10);
    }

    const LocationNumber& GetLocationNumber() const
    {
        ITS_REQUIRE(OptionLocationNumber());
        return static_cast<const LocationNumber&> (ElementAt(10));
    }

    void SetMiscCallInfo(MiscCallInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMiscCallInfoStaticDescription());
        AddElement(11, element);
    }

    void SetMiscCallInfo(const MiscCallInfo& element)
    {
        its::AsnObject& asnObject = const_cast<MiscCallInfo&>(element);
        asnObject.SetDescription(GetMiscCallInfoStaticDescription());
        AddElement(11, element);
    }

    bool OptionMiscCallInfo() const
    {
        return Contains(11);
    }

    const MiscCallInfo& GetMiscCallInfo() const
    {
        ITS_REQUIRE(OptionMiscCallInfo());
        return static_cast<const MiscCallInfo&> (ElementAt(11));
    }

    void SetOriginalCalledPartyID(OriginalCalledPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(12, element);
    }

    void SetOriginalCalledPartyID(const OriginalCalledPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<OriginalCalledPartyID&>(element);
        asnObject.SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(12, element);
    }

    bool OptionOriginalCalledPartyID() const
    {
        return Contains(12);
    }

    const OriginalCalledPartyID& GetOriginalCalledPartyID() const
    {
        ITS_REQUIRE(OptionOriginalCalledPartyID());
        return static_cast<const OriginalCalledPartyID&> (ElementAt(12));
    }

    void SetServiceProfileIdentifier(ServiceProfileIdentifier* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceProfileIdentifierStaticDescription());
        AddElement(13, element);
    }

    void SetServiceProfileIdentifier(const ServiceProfileIdentifier& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceProfileIdentifier&>(element);
        asnObject.SetDescription(GetServiceProfileIdentifierStaticDescription());
        AddElement(13, element);
    }

    bool OptionServiceProfileIdentifier() const
    {
        return Contains(13);
    }

    const ServiceProfileIdentifier& GetServiceProfileIdentifier() const
    {
        ITS_REQUIRE(OptionServiceProfileIdentifier());
        return static_cast<const ServiceProfileIdentifier&> (ElementAt(13));
    }

    void SetTerminalType(TerminalType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTerminalTypeStaticDescription());
        AddElement(14, element);
    }

    void SetTerminalType(const TerminalType& element)
    {
        its::AsnObject& asnObject = const_cast<TerminalType&>(element);
        asnObject.SetDescription(GetTerminalTypeStaticDescription());
        AddElement(14, element);
    }

    bool OptionTerminalType() const
    {
        return Contains(14);
    }

    const TerminalType& GetTerminalType() const
    {
        ITS_REQUIRE(OptionTerminalType());
        return static_cast<const TerminalType&> (ElementAt(14));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(15, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(15, element);
    }

    bool OptionExtensions() const
    {
        return Contains(15);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(15));
    }

    void SetTriggerType(TriggerType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTriggerTypeStaticDescription());
        AddElement(16, element);
    }

    void SetTriggerType(const TriggerType& element)
    {
        its::AsnObject& asnObject = const_cast<TriggerType&>(element);
        asnObject.SetDescription(GetTriggerTypeStaticDescription());
        AddElement(16, element);
    }

    bool OptionTriggerType() const
    {
        return Contains(16);
    }

    const TriggerType& GetTriggerType() const
    {
        ITS_REQUIRE(OptionTriggerType());
        return static_cast<const TriggerType&> (ElementAt(16));
    }

    void SetHighLayerCompatibility(HighLayerCompatibility* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(17, element);
    }

    void SetHighLayerCompatibility(const HighLayerCompatibility& element)
    {
        its::AsnObject& asnObject = const_cast<HighLayerCompatibility&>(element);
        asnObject.SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(17, element);
    }

    bool OptionHighLayerCompatibility() const
    {
        return Contains(17);
    }

    const HighLayerCompatibility& GetHighLayerCompatibility() const
    {
        ITS_REQUIRE(OptionHighLayerCompatibility());
        return static_cast<const HighLayerCompatibility&> (ElementAt(17));
    }

    void SetServiceInteractionIndicators(ServiceInteractionIndicators* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceInteractionIndicatorsStaticDescription());
        AddElement(18, element);
    }

    void SetServiceInteractionIndicators(const ServiceInteractionIndicators& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceInteractionIndicators&>(element);
        asnObject.SetDescription(GetServiceInteractionIndicatorsStaticDescription());
        AddElement(18, element);
    }

    bool OptionServiceInteractionIndicators() const
    {
        return Contains(18);
    }

    const ServiceInteractionIndicators& GetServiceInteractionIndicators() const
    {
        ITS_REQUIRE(OptionServiceInteractionIndicators());
        return static_cast<const ServiceInteractionIndicators&> (ElementAt(18));
    }

    void SetAdditionalCallingPartyNumber(AdditionalCallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(19, element);
    }

    void SetAdditionalCallingPartyNumber(const AdditionalCallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalCallingPartyNumber&>(element);
        asnObject.SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(19, element);
    }

    bool OptionAdditionalCallingPartyNumber() const
    {
        return Contains(19);
    }

    const AdditionalCallingPartyNumber& GetAdditionalCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionAdditionalCallingPartyNumber());
        return static_cast<const AdditionalCallingPartyNumber&> (ElementAt(19));
    }

    void SetForwardCallIndicators(ForwardCallIndicators* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardCallIndicatorsStaticDescription());
        AddElement(20, element);
    }

    void SetForwardCallIndicators(const ForwardCallIndicators& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardCallIndicators&>(element);
        asnObject.SetDescription(GetForwardCallIndicatorsStaticDescription());
        AddElement(20, element);
    }

    bool OptionForwardCallIndicators() const
    {
        return Contains(20);
    }

    const ForwardCallIndicators& GetForwardCallIndicators() const
    {
        ITS_REQUIRE(OptionForwardCallIndicators());
        return static_cast<const ForwardCallIndicators&> (ElementAt(20));
    }

    void SetBearerCapability(BearerCapability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(21, element);
    }

    void SetBearerCapability(const BearerCapability& element)
    {
        its::AsnObject& asnObject = const_cast<BearerCapability&>(element);
        asnObject.SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(21, element);
    }

    bool OptionBearerCapability() const
    {
        return Contains(21);
    }

    const BearerCapability& GetBearerCapability() const
    {
        ITS_REQUIRE(OptionBearerCapability());
        return static_cast<const BearerCapability&> (ElementAt(21));
    }

    void SetEventTypeBCSM(EventTypeBCSM* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(22, element);
    }

    void SetEventTypeBCSM(const EventTypeBCSM& element)
    {
        its::AsnObject& asnObject = const_cast<EventTypeBCSM&>(element);
        asnObject.SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(22, element);
    }

    bool OptionEventTypeBCSM() const
    {
        return Contains(22);
    }

    const EventTypeBCSM& GetEventTypeBCSM() const
    {
        ITS_REQUIRE(OptionEventTypeBCSM());
        return static_cast<const EventTypeBCSM&> (ElementAt(22));
    }

    void SetRedirectingPartyID(RedirectingPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(23, element);
    }

    void SetRedirectingPartyID(const RedirectingPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectingPartyID&>(element);
        asnObject.SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(23, element);
    }

    bool OptionRedirectingPartyID() const
    {
        return Contains(23);
    }

    const RedirectingPartyID& GetRedirectingPartyID() const
    {
        ITS_REQUIRE(OptionRedirectingPartyID());
        return static_cast<const RedirectingPartyID&> (ElementAt(23));
    }

    void SetRedirectionInformation(RedirectionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(24, element);
    }

    void SetRedirectionInformation(const RedirectionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectionInformation&>(element);
        asnObject.SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(24, element);
    }

    bool OptionRedirectionInformation() const
    {
        return Contains(24);
    }

    const RedirectionInformation& GetRedirectionInformation() const
    {
        ITS_REQUIRE(OptionRedirectionInformation());
        return static_cast<const RedirectionInformation&> (ElementAt(24));
    }

    void SetCause(Cause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCauseStaticDescription());
        AddElement(25, element);
    }

    void SetCause(const Cause& element)
    {
        its::AsnObject& asnObject = const_cast<Cause&>(element);
        asnObject.SetDescription(GetCauseStaticDescription());
        AddElement(25, element);
    }

    bool OptionCause() const
    {
        return Contains(25);
    }

    const Cause& GetCause() const
    {
        ITS_REQUIRE(OptionCause());
        return static_cast<const Cause&> (ElementAt(25));
    }

    void SetComponentType(ComponentType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetComponentTypeStaticDescription());
        AddElement(26, element);
    }

    void SetComponentType(const ComponentType& element)
    {
        its::AsnObject& asnObject = const_cast<ComponentType&>(element);
        asnObject.SetDescription(GetComponentTypeStaticDescription());
        AddElement(26, element);
    }

    bool OptionComponentType() const
    {
        return Contains(26);
    }

    const ComponentType& GetComponentType() const
    {
        ITS_REQUIRE(OptionComponentType());
        return static_cast<const ComponentType&> (ElementAt(26));
    }

    void SetComponentCorrelationID(ComponentCorrelationID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetComponentCorrelationIDStaticDescription());
        AddElement(27, element);
    }

    void SetComponentCorrelationID(const ComponentCorrelationID& element)
    {
        its::AsnObject& asnObject = const_cast<ComponentCorrelationID&>(element);
        asnObject.SetDescription(GetComponentCorrelationIDStaticDescription());
        AddElement(27, element);
    }

    bool OptionComponentCorrelationID() const
    {
        return Contains(27);
    }

    const ComponentCorrelationID& GetComponentCorrelationID() const
    {
        ITS_REQUIRE(OptionComponentCorrelationID());
        return static_cast<const ComponentCorrelationID&> (ElementAt(27));
    }

    void SetISDNAccessRelatedInformation(ISDNAccessRelatedInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetISDNAccessRelatedInformationStaticDescription());
        AddElement(28, element);
    }

    void SetISDNAccessRelatedInformation(const ISDNAccessRelatedInformation& element)
    {
        its::AsnObject& asnObject = const_cast<ISDNAccessRelatedInformation&>(element);
        asnObject.SetDescription(GetISDNAccessRelatedInformationStaticDescription());
        AddElement(28, element);
    }

    bool OptionISDNAccessRelatedInformation() const
    {
        return Contains(28);
    }

    const ISDNAccessRelatedInformation& GetISDNAccessRelatedInformation() const
    {
        ITS_REQUIRE(OptionISDNAccessRelatedInformation());
        return static_cast<const ISDNAccessRelatedInformation&> (ElementAt(28));
    }

    void SetINServiceCompatibilityIndication(INServiceCompatibilityIndication* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetINServiceCompatibilityIndicationStaticDescription());
        AddElement(29, element);
    }

    void SetINServiceCompatibilityIndication(const INServiceCompatibilityIndication& element)
    {
        its::AsnObject& asnObject = const_cast<INServiceCompatibilityIndication&>(element);
        asnObject.SetDescription(GetINServiceCompatibilityIndicationStaticDescription());
        AddElement(29, element);
    }

    bool OptionINServiceCompatibilityIndication() const
    {
        return Contains(29);
    }

    const INServiceCompatibilityIndication& GetINServiceCompatibilityIndication() const
    {
        ITS_REQUIRE(OptionINServiceCompatibilityIndication());
        return static_cast<const INServiceCompatibilityIndication&> (ElementAt(29));
    }

    void SetGenericNumbers(GenericNumbers* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGenericNumbersStaticDescription());
        AddElement(30, element);
    }

    void SetGenericNumbers(const GenericNumbers& element)
    {
        its::AsnObject& asnObject = const_cast<GenericNumbers&>(element);
        asnObject.SetDescription(GetGenericNumbersStaticDescription());
        AddElement(30, element);
    }

    bool OptionGenericNumbers() const
    {
        return Contains(30);
    }

    const GenericNumbers& GetGenericNumbers() const
    {
        ITS_REQUIRE(OptionGenericNumbers());
        return static_cast<const GenericNumbers&> (ElementAt(30));
    }

    void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(31, element);
    }

    void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceInteractionIndicatorsTwo&>(element);
        asnObject.SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(31, element);
    }

    bool OptionServiceInteractionIndicatorsTwo() const
    {
        return Contains(31);
    }

    const ServiceInteractionIndicatorsTwo& GetServiceInteractionIndicatorsTwo() const
    {
        ITS_REQUIRE(OptionServiceInteractionIndicatorsTwo());
        return static_cast<const ServiceInteractionIndicatorsTwo&> (ElementAt(31));
    }

    void SetForwardGVNS(ForwardGVNS* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardGVNSStaticDescription());
        AddElement(32, element);
    }

    void SetForwardGVNS(const ForwardGVNS& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardGVNS&>(element);
        asnObject.SetDescription(GetForwardGVNSStaticDescription());
        AddElement(32, element);
    }

    bool OptionForwardGVNS() const
    {
        return Contains(32);
    }

    const ForwardGVNS& GetForwardGVNS() const
    {
        ITS_REQUIRE(OptionForwardGVNS());
        return static_cast<const ForwardGVNS&> (ElementAt(32));
    }

    void SetCreatedCallSegmentAssociation(CSAID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCreatedCallSegmentAssociationStaticDescription());
        AddElement(33, element);
    }

    void SetCreatedCallSegmentAssociation(const CSAID& element)
    {
        its::AsnObject& asnObject = const_cast<CSAID&>(element);
        asnObject.SetDescription(GetCreatedCallSegmentAssociationStaticDescription());
        AddElement(33, element);
    }

    bool OptionCreatedCallSegmentAssociation() const
    {
        return Contains(33);
    }

    const CSAID& GetCreatedCallSegmentAssociation() const
    {
        ITS_REQUIRE(OptionCreatedCallSegmentAssociation());
        return static_cast<const CSAID&> (ElementAt(33));
    }

    void SetUSIServiceIndicator(USIServiceIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUSIServiceIndicatorStaticDescription());
        AddElement(34, element);
    }

    void SetUSIServiceIndicator(const USIServiceIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<USIServiceIndicator&>(element);
        asnObject.SetDescription(GetUSIServiceIndicatorStaticDescription());
        AddElement(34, element);
    }

    bool OptionUSIServiceIndicator() const
    {
        return Contains(34);
    }

    const USIServiceIndicator& GetUSIServiceIndicator() const
    {
        ITS_REQUIRE(OptionUSIServiceIndicator());
        return static_cast<const USIServiceIndicator&> (ElementAt(34));
    }

    void SetUSIInformation(USIInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUSIInformationStaticDescription());
        AddElement(35, element);
    }

    void SetUSIInformation(const USIInformation& element)
    {
        its::AsnObject& asnObject = const_cast<USIInformation&>(element);
        asnObject.SetDescription(GetUSIInformationStaticDescription());
        AddElement(35, element);
    }

    bool OptionUSIInformation() const
    {
        return Contains(35);
    }

    const USIInformation& GetUSIInformation() const
    {
        ITS_REQUIRE(OptionUSIInformation());
        return static_cast<const USIInformation&> (ElementAt(35));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_INITIAL_DP_ARG_H_)

