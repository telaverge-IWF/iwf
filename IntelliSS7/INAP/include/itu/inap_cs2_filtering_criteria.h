//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FILTERING_CRITERIA_H_)
#define _INAP_CS2_FILTERING_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <inap_cs2_digits.h>
#include <inap_cs2_service_key.h>
#include <inap_cs2_location_number.h>



namespace inap_cs2 {



class FilteringCriteria : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AddressAndService : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Digits Digits;


            typedef inap_cs2::ServiceKey ServiceKey;


            typedef inap_cs2::LocationNumber LocationNumber;


    ////////// End Nested Class(es) //////////

        AddressAndService() : its::AsnSequence(4, false)
        {
            Initialize();
        }

        AddressAndService(its::Octets& octets) : its::AsnSequence(4, false)
        {
            Initialize();
            Decode(octets);
        }

        AddressAndService(const AddressAndService& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AddressAndService(its::AsnDescObject* description) : its::AsnSequence(4, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCalledAddressValueStaticDescription();
        static its::AsnDescObject* GetServiceKeyStaticDescription();
        static its::AsnDescObject* GetCallingAddressValueStaticDescription();
        static its::AsnDescObject* GetLocationNumberStaticDescription();

    public:

        virtual ~AddressAndService()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AddressAndService(*this);
        }

        virtual std::string GetName() const
        { return "AddressAndService"; }

        void SetCalledAddressValue(Digits* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCalledAddressValueStaticDescription());
            AddElement(0, element);
        }

        void SetCalledAddressValue(const Digits& element)
        {
            its::AsnObject& asnObject = const_cast<Digits&>(element);
            asnObject.SetDescription(GetCalledAddressValueStaticDescription());
            AddElement(0, element);
        }

        const Digits& GetCalledAddressValue() const
        {
            return static_cast<const Digits&> (ElementAt(0));
        }

        void SetServiceKey(ServiceKey* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        void SetServiceKey(const ServiceKey& element)
        {
            its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
            asnObject.SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        const ServiceKey& GetServiceKey() const
        {
            return static_cast<const ServiceKey&> (ElementAt(1));
        }

        void SetCallingAddressValue(Digits* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallingAddressValueStaticDescription());
            AddElement(2, element);
        }

        void SetCallingAddressValue(const Digits& element)
        {
            its::AsnObject& asnObject = const_cast<Digits&>(element);
            asnObject.SetDescription(GetCallingAddressValueStaticDescription());
            AddElement(2, element);
        }

        bool OptionCallingAddressValue() const
        {
            return Contains(2);
        }

        const Digits& GetCallingAddressValue() const
        {
            ITS_REQUIRE(OptionCallingAddressValue());
            return static_cast<const Digits&> (ElementAt(2));
        }

        void SetLocationNumber(LocationNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
            AddElement(3, element);
        }

        void SetLocationNumber(const LocationNumber& element)
        {
            its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
            asnObject.SetDescription(GetLocationNumberStaticDescription());
            AddElement(3, element);
        }

        bool OptionLocationNumber() const
        {
            return Contains(3);
        }

        const LocationNumber& GetLocationNumber() const
        {
            ITS_REQUIRE(OptionLocationNumber());
            return static_cast<const LocationNumber&> (ElementAt(3));
        }

    };


        typedef inap_cs2::Digits Digits;


        typedef inap_cs2::ServiceKey ServiceKey;


////////// End Nested Class(es) //////////

    FilteringCriteria() : its::AsnChoice(false)
    {
        Initialize();
    }

    FilteringCriteria(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    FilteringCriteria(const FilteringCriteria& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    FilteringCriteria(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    FilteringCriteria(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDialledNumberStaticDescription();
    static its::AsnDescObject* GetCallingLineIDStaticDescription();
    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetAddressAndServiceStaticDescription();

public:

    virtual ~FilteringCriteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FilteringCriteria(*this);
    }

    virtual std::string GetName() const
    { return "FilteringCriteria"; }

    void SetChoiceDialledNumber(Digits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDialledNumberStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDialledNumber(const Digits& choice)
    {
        its::AsnObject& asnObject = const_cast<Digits&>(choice);
        asnObject.SetDescription(GetDialledNumberStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDialledNumber() const
    {
        return Contains(GetDialledNumberStaticDescription()->TagIdentity());
    }

    const Digits& GetChoiceDialledNumber() const
    {
        ITS_REQUIRE(ChoiceDialledNumber());
        return static_cast<const Digits&> (GetChoice());
    }

    void SetChoiceCallingLineID(Digits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallingLineIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallingLineID(const Digits& choice)
    {
        its::AsnObject& asnObject = const_cast<Digits&>(choice);
        asnObject.SetDescription(GetCallingLineIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallingLineID() const
    {
        return Contains(GetCallingLineIDStaticDescription()->TagIdentity());
    }

    const Digits& GetChoiceCallingLineID() const
    {
        ITS_REQUIRE(ChoiceCallingLineID());
        return static_cast<const Digits&> (GetChoice());
    }

    void SetChoiceServiceKey(ServiceKey* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceServiceKey(const ServiceKey& choice)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(choice);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceServiceKey() const
    {
        return Contains(GetServiceKeyStaticDescription()->TagIdentity());
    }

    const ServiceKey& GetChoiceServiceKey() const
    {
        ITS_REQUIRE(ChoiceServiceKey());
        return static_cast<const ServiceKey&> (GetChoice());
    }

    void SetChoiceAddressAndService(AddressAndService* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAddressAndService(const AddressAndService& choice)
    {
        its::AsnObject& asnObject = const_cast<AddressAndService&>(choice);
        asnObject.SetDescription(GetAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAddressAndService() const
    {
        return Contains(GetAddressAndServiceStaticDescription()->TagIdentity());
    }

    const AddressAndService& GetChoiceAddressAndService() const
    {
        ITS_REQUIRE(ChoiceAddressAndService());
        return static_cast<const AddressAndService&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FILTERING_CRITERIA_H_)

