//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_TIME_H_)
#define _INAP_CS2_TIME_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnBaseString.h>

#include <UTCTime.h>
#include <GeneralizedTime.h>



namespace inap_cs2 {



class Time : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


    typedef its::UTCTime UTCTime;


    typedef its::GeneralizedTime GeneralizedTime;


////////// End Nested Class(es) //////////

    Time() : its::AsnChoice(false)
    {
        Initialize();
    }

    Time(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Time(const Time& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Time(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Time(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUtcTimeStaticDescription();
    static its::AsnDescObject* GetGeneralizedTimeStaticDescription();

public:

    virtual ~Time()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Time(*this);
    }

    virtual std::string GetName() const
    { return "Time"; }

    void SetChoiceUtcTime(UTCTime* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetUtcTimeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceUtcTime(const UTCTime& choice)
    {
        its::AsnObject& asnObject = const_cast<UTCTime&>(choice);
        asnObject.SetDescription(GetUtcTimeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceUtcTime() const
    {
        return Contains(GetUtcTimeStaticDescription()->TagIdentity());
    }

    const UTCTime& GetChoiceUtcTime() const
    {
        ITS_REQUIRE(ChoiceUtcTime());
        return static_cast<const UTCTime&> (GetChoice());
    }

    void SetChoiceGeneralizedTime(GeneralizedTime* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGeneralizedTimeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGeneralizedTime(const GeneralizedTime& choice)
    {
        its::AsnObject& asnObject = const_cast<GeneralizedTime&>(choice);
        asnObject.SetDescription(GetGeneralizedTimeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGeneralizedTime() const
    {
        return Contains(GetGeneralizedTimeStaticDescription()->TagIdentity());
    }

    const GeneralizedTime& GetChoiceGeneralizedTime() const
    {
        ITS_REQUIRE(ChoiceGeneralizedTime());
        return static_cast<const GeneralizedTime&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_TIME_H_)

