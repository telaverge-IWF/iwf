//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ENTRY_MODIFICATION_H_)
#define _INAP_CS2_ENTRY_MODIFICATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>

#include <inap_cs2_attribute.h>
#include <inap_cs2_attribute_type.h>



namespace inap_cs2 {



class EntryModification : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Attribute Attribute;


        typedef inap_cs2::AttributeType AttributeType;


////////// End Nested Class(es) //////////

    EntryModification() : its::AsnChoice(false)
    {
        Initialize();
    }

    EntryModification(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EntryModification(const EntryModification& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EntryModification(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EntryModification(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAddAttributeStaticDescription();
    static its::AsnDescObject* GetRemoveAttributeStaticDescription();
    static its::AsnDescObject* GetAddValuesStaticDescription();
    static its::AsnDescObject* GetRemoveValuesStaticDescription();

public:

    virtual ~EntryModification()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EntryModification(*this);
    }

    virtual std::string GetName() const
    { return "EntryModification"; }

    void SetChoiceAddAttribute(Attribute* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAddAttributeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAddAttribute(const Attribute& choice)
    {
        its::AsnObject& asnObject = const_cast<Attribute&>(choice);
        asnObject.SetDescription(GetAddAttributeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAddAttribute() const
    {
        return Contains(GetAddAttributeStaticDescription()->TagIdentity());
    }

    const Attribute& GetChoiceAddAttribute() const
    {
        ITS_REQUIRE(ChoiceAddAttribute());
        return static_cast<const Attribute&> (GetChoice());
    }

    void SetChoiceRemoveAttribute(AttributeType* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRemoveAttributeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRemoveAttribute(const AttributeType& choice)
    {
        its::AsnObject& asnObject = const_cast<AttributeType&>(choice);
        asnObject.SetDescription(GetRemoveAttributeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRemoveAttribute() const
    {
        return Contains(GetRemoveAttributeStaticDescription()->TagIdentity());
    }

    const AttributeType& GetChoiceRemoveAttribute() const
    {
        ITS_REQUIRE(ChoiceRemoveAttribute());
        return static_cast<const AttributeType&> (GetChoice());
    }

    void SetChoiceAddValues(Attribute* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAddValuesStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAddValues(const Attribute& choice)
    {
        its::AsnObject& asnObject = const_cast<Attribute&>(choice);
        asnObject.SetDescription(GetAddValuesStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAddValues() const
    {
        return Contains(GetAddValuesStaticDescription()->TagIdentity());
    }

    const Attribute& GetChoiceAddValues() const
    {
        ITS_REQUIRE(ChoiceAddValues());
        return static_cast<const Attribute&> (GetChoice());
    }

    void SetChoiceRemoveValues(Attribute* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRemoveValuesStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRemoveValues(const Attribute& choice)
    {
        its::AsnObject& asnObject = const_cast<Attribute&>(choice);
        asnObject.SetDescription(GetRemoveValuesStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRemoveValues() const
    {
        return Contains(GetRemoveValuesStaticDescription()->TagIdentity());
    }

    const Attribute& GetChoiceRemoveValues() const
    {
        ITS_REQUIRE(ChoiceRemoveValues());
        return static_cast<const Attribute&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ENTRY_MODIFICATION_H_)

