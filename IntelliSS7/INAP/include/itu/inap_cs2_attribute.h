//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ATTRIBUTE_H_)
#define _INAP_CS2_ATTRIBUTE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSetOf.h>
#include <AsnChoice.h>
#include <AsnObjectIdentifier.h>

#include <inap_cs2_attribute_type.h>
#include <inap_cs2_attribute_value.h>



namespace inap_cs2 {



class Attribute : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Values : public its::AsnSetOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::AttributeValue AttributeValue;


    ////////// End Nested Class //////////

        Values() : its::AsnSetOf(false)
        {
            Initialize();
        }

        Values(its::Octets& octets) : its::AsnSetOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Values(const Values& rhs) : its::AsnSetOf(rhs)
        {
            // Nothing to do.
        }

        Values(its::AsnDescObject* description) : its::AsnSetOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAttributeValueStaticDescription();

    public:

        virtual ~Values()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Values(*this);
        }

        virtual std::string GetName() const
        { return "Values"; }

        void AddElement(AttributeValue* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAttributeValueStaticDescription());
            AsnSetOf::AddElement(element);
        }

        void AddElement(const AttributeValue& element)
        {
            its::AsnObject& asnObject = const_cast<AttributeValue&>(element);
            asnObject.SetDescription(GetAttributeValueStaticDescription());
            AsnSetOf::AddElement(element);
        }

        const AttributeValue& ElementAt(int index) const
        {
            return static_cast<const AttributeValue&> (AsnSetOf::ElementAt(index));
        }

    };


        typedef inap_cs2::AttributeType AttributeType;


////////// End Nested Class(es) //////////

    Attribute() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    Attribute(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    Attribute(const Attribute& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Attribute(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTypeStaticDescription();
    static its::AsnDescObject* GetValuesStaticDescription();

public:

    virtual ~Attribute()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Attribute(*this);
    }

    virtual std::string GetName() const
    { return "Attribute"; }

    void SetType(AttributeType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    void SetType(const AttributeType& element)
    {
        its::AsnObject& asnObject = const_cast<AttributeType&>(element);
        asnObject.SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    const AttributeType& GetType() const
    {
        return static_cast<const AttributeType&> (ElementAt(0));
    }

    void SetValues(Values* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetValuesStaticDescription());
        AddElement(1, element);
    }

    void SetValues(const Values& element)
    {
        its::AsnObject& asnObject = const_cast<Values&>(element);
        asnObject.SetDescription(GetValuesStaticDescription());
        AddElement(1, element);
    }

    const Values& GetValues() const
    {
        return static_cast<const Values&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ATTRIBUTE_H_)

