//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SEARCH_ARGUMENT_H_)
#define _INAP_CS2_SEARCH_ARGUMENT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnBoolean.h>
#include <AsnChoice.h>
#include <AsnInteger.h>

#include <inap_cs2_name.h>
#include <inap_cs2_subset.h>
#include <inap_cs2_filter.h>
#include <inap_cs2_in_entry_information_selection.h>



namespace inap_cs2 {



class SearchArgument : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////



    class SearchAliases : public its::AsnBoolean
    {
    public:

        SearchAliases(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        SearchAliases(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        SearchAliases(const SearchAliases& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        SearchAliases(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        SearchAliases(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SearchAliases()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SearchAliases(*this);
        }

        virtual std::string GetName() const
        { return "SearchAliases"; }

    };


        typedef inap_cs2::Name Name;


        typedef inap_cs2::Subset Subset;


        typedef inap_cs2::Filter Filter;


        typedef inap_cs2::InEntryInformationSelection InEntryInformationSelection;


////////// End Nested Class(es) //////////

    SearchArgument() : its::AsnSet(5, false)
    {
        Initialize();
    }

    SearchArgument(its::Octets& octets) : its::AsnSet(5, false)
    {
        Initialize();
        Decode(octets);
    }

    SearchArgument(const SearchArgument& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    SearchArgument(its::AsnDescObject* description) : its::AsnSet(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetBaseObjectStaticDescription();
    static its::AsnDescObject* GetSubsetStaticDescription();
    static its::AsnDescObject* GetFilterStaticDescription();
    static its::AsnDescObject* GetSearchAliasesStaticDescription();
    static its::AsnDescObject* GetSelectionStaticDescription();

public:

    virtual ~SearchArgument()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SearchArgument(*this);
    }

    virtual std::string GetName() const
    { return "SearchArgument"; }

    void SetBaseObject(Name* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBaseObjectStaticDescription());
        AddElement(0, element);
    }

    void SetBaseObject(const Name& element)
    {
        its::AsnObject& asnObject = const_cast<Name&>(element);
        asnObject.SetDescription(GetBaseObjectStaticDescription());
        AddElement(0, element);
}

    const Name& GetBaseObject() const
    {
        return static_cast<const Name&> (ElementAt(0));
    }

    void SetSubset(Subset* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubsetStaticDescription());
        AddElement(1, element);
    }

    void SetSubset(const Subset& element)
    {
        its::AsnObject& asnObject = const_cast<Subset&>(element);
        asnObject.SetDescription(GetSubsetStaticDescription());
        AddElement(1, element);
}

    bool OptionSubset() const
    {
        return Contains(1);
    }

    const Subset& GetSubset() const
    {
        ITS_REQUIRE(OptionSubset());
        return static_cast<const Subset&> (ElementAt(1));
    }

    void SetFilter(Filter* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFilterStaticDescription());
        AddElement(2, element);
    }

    void SetFilter(const Filter& element)
    {
        its::AsnObject& asnObject = const_cast<Filter&>(element);
        asnObject.SetDescription(GetFilterStaticDescription());
        AddElement(2, element);
}

    bool OptionFilter() const
    {
        return Contains(2);
    }

    const Filter& GetFilter() const
    {
        ITS_REQUIRE(OptionFilter());
        return static_cast<const Filter&> (ElementAt(2));
    }

    void SetSearchAliases(SearchAliases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSearchAliasesStaticDescription());
        AddElement(3, element);
    }

    void SetSearchAliases(const SearchAliases& element)
    {
        its::AsnObject& asnObject = const_cast<SearchAliases&>(element);
        asnObject.SetDescription(GetSearchAliasesStaticDescription());
        AddElement(3, element);
}

    bool OptionSearchAliases() const
    {
        return Contains(3);
    }

    const SearchAliases& GetSearchAliases() const
    {
        ITS_REQUIRE(OptionSearchAliases());
        return static_cast<const SearchAliases&> (ElementAt(3));
    }

    void SetSelection(InEntryInformationSelection* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSelectionStaticDescription());
        AddElement(4, element);
    }

    void SetSelection(const InEntryInformationSelection& element)
    {
        its::AsnObject& asnObject = const_cast<InEntryInformationSelection&>(element);
        asnObject.SetDescription(GetSelectionStaticDescription());
        AddElement(4, element);
}

    bool OptionSelection() const
    {
        return Contains(4);
    }

    const InEntryInformationSelection& GetSelection() const
    {
        ITS_REQUIRE(OptionSelection());
        return static_cast<const InEntryInformationSelection&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SEARCH_ARGUMENT_H_)

