//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SUPPLEMENTARY_SERVICES_H_)
#define _INAP_CS2_SUPPLEMENTARY_SERVICES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace inap_cs2 {



class SupplementaryServices : public its::AsnBitString
{
public:

    SupplementaryServices() : its::AsnBitString(false)
    {
        Initialize();
    }

    SupplementaryServices(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    SupplementaryServices(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    SupplementaryServices(const SupplementaryServices& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    SupplementaryServices(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    SupplementaryServices(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SupplementaryServices()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SupplementaryServices(*this);
    }

    virtual std::string GetName() const
    { return "SupplementaryServices"; }

    void SetIncomingCallBarring()
    { Set(20); }

    void ResetIncomingCallBarring()
    { Reset(20); }

    bool IsIncomingCallBarringSet() const
    { return IsSet(20); }

    bool IsIncomingCallBarringDefined() const
    { return 20 < GetSize(); }

    void SetOutgoingCallBarring()
    { Set(19); }

    void ResetOutgoingCallBarring()
    { Reset(19); }

    bool IsOutgoingCallBarringSet() const
    { return IsSet(19); }

    bool IsOutgoingCallBarringDefined() const
    { return 19 < GetSize(); }

    void SetCallingPartingDependentRouting()
    { Set(18); }

    void ResetCallingPartingDependentRouting()
    { Reset(18); }

    bool IsCallingPartingDependentRoutingSet() const
    { return IsSet(18); }

    bool IsCallingPartingDependentRoutingDefined() const
    { return 18 < GetSize(); }

    void SetTimeDependentRouting()
    { Set(17); }

    void ResetTimeDependentRouting()
    { Reset(17); }

    bool IsTimeDependentRoutingSet() const
    { return IsSet(17); }

    bool IsTimeDependentRoutingDefined() const
    { return 17 < GetSize(); }

    void SetAdviceOfChargeDuringCall()
    { Set(16); }

    void ResetAdviceOfChargeDuringCall()
    { Reset(16); }

    bool IsAdviceOfChargeDuringCallSet() const
    { return IsSet(16); }

    bool IsAdviceOfChargeDuringCallDefined() const
    { return 16 < GetSize(); }

    void SetAdviceOfChargeAtEnd()
    { Set(15); }

    void ResetAdviceOfChargeAtEnd()
    { Reset(15); }

    bool IsAdviceOfChargeAtEndSet() const
    { return IsSet(15); }

    bool IsAdviceOfChargeAtEndDefined() const
    { return 15 < GetSize(); }

    void SetAdviceOfChargeOnStart()
    { Set(14); }

    void ResetAdviceOfChargeOnStart()
    { Reset(14); }

    bool IsAdviceOfChargeOnStartSet() const
    { return IsSet(14); }

    bool IsAdviceOfChargeOnStartDefined() const
    { return 14 < GetSize(); }

    void SetCallCompletionOnBusySubscriber()
    { Set(13); }

    void ResetCallCompletionOnBusySubscriber()
    { Reset(13); }

    bool IsCallCompletionOnBusySubscriberSet() const
    { return IsSet(13); }

    bool IsCallCompletionOnBusySubscriberDefined() const
    { return 13 < GetSize(); }

    void SetExplicitCallTransfer()
    { Set(12); }

    void ResetExplicitCallTransfer()
    { Reset(12); }

    bool IsExplicitCallTransferSet() const
    { return IsSet(12); }

    bool IsExplicitCallTransferDefined() const
    { return 12 < GetSize(); }

    void SetReverseCharging()
    { Set(11); }

    void ResetReverseCharging()
    { Reset(11); }

    bool IsReverseChargingSet() const
    { return IsSet(11); }

    bool IsReverseChargingDefined() const
    { return 11 < GetSize(); }

    void SetCallHold()
    { Set(10); }

    void ResetCallHold()
    { Reset(10); }

    bool IsCallHoldSet() const
    { return IsSet(10); }

    bool IsCallHoldDefined() const
    { return 10 < GetSize(); }

    void SetCallWaiting()
    { Set(9); }

    void ResetCallWaiting()
    { Reset(9); }

    bool IsCallWaitingSet() const
    { return IsSet(9); }

    bool IsCallWaitingDefined() const
    { return 9 < GetSize(); }

    void SetCallForwardingOnNotReachable()
    { Set(8); }

    void ResetCallForwardingOnNotReachable()
    { Reset(8); }

    bool IsCallForwardingOnNotReachableSet() const
    { return IsSet(8); }

    bool IsCallForwardingOnNotReachableDefined() const
    { return 8 < GetSize(); }

    void SetCallForwardingOnBusy()
    { Set(7); }

    void ResetCallForwardingOnBusy()
    { Reset(7); }

    bool IsCallForwardingOnBusySet() const
    { return IsSet(7); }

    bool IsCallForwardingOnBusyDefined() const
    { return 7 < GetSize(); }

    void SetCallForwardingUnconditional()
    { Set(6); }

    void ResetCallForwardingUnconditional()
    { Reset(6); }

    bool IsCallForwardingUnconditionalSet() const
    { return IsSet(6); }

    bool IsCallForwardingUnconditionalDefined() const
    { return 6 < GetSize(); }

    void SetCallForwardingOnNoReply()
    { Set(5); }

    void ResetCallForwardingOnNoReply()
    { Reset(5); }

    bool IsCallForwardingOnNoReplySet() const
    { return IsSet(5); }

    bool IsCallForwardingOnNoReplyDefined() const
    { return 5 < GetSize(); }

    void SetConnectedLineIdentificationRestriction()
    { Set(4); }

    void ResetConnectedLineIdentificationRestriction()
    { Reset(4); }

    bool IsConnectedLineIdentificationRestrictionSet() const
    { return IsSet(4); }

    bool IsConnectedLineIdentificationRestrictionDefined() const
    { return 4 < GetSize(); }

    void SetConnectedLineIdentificationPresentation()
    { Set(3); }

    void ResetConnectedLineIdentificationPresentation()
    { Reset(3); }

    bool IsConnectedLineIdentificationPresentationSet() const
    { return IsSet(3); }

    bool IsConnectedLineIdentificationPresentationDefined() const
    { return 3 < GetSize(); }

    void SetCallingLineIdentificationRestriction()
    { Set(2); }

    void ResetCallingLineIdentificationRestriction()
    { Reset(2); }

    bool IsCallingLineIdentificationRestrictionSet() const
    { return IsSet(2); }

    bool IsCallingLineIdentificationRestrictionDefined() const
    { return 2 < GetSize(); }

    void SetCallingLineIdentificationPresentation()
    { Set(1); }

    void ResetCallingLineIdentificationPresentation()
    { Reset(1); }

    bool IsCallingLineIdentificationPresentationSet() const
    { return IsSet(1); }

    bool IsCallingLineIdentificationPresentationDefined() const
    { return 1 < GetSize(); }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SUPPLEMENTARY_SERVICES_H_)

