//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_IN_DIRECTORY_BIND_ERROR_H_)
#define _INAP_CS2_IN_DIRECTORY_BIND_ERROR_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnBitString.h>
#include <AsnChoice.h>

#include <inap_cs2_versions.h>
#include <inap_cs2_bind_error.h>



namespace inap_cs2 {



class InDirectoryBindError : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Versions Versions;


        typedef inap_cs2::BindError BindError;


////////// End Nested Class(es) //////////

    InDirectoryBindError() : its::AsnSet(2, false)
    {
        Initialize();
    }

    InDirectoryBindError(its::Octets& octets) : its::AsnSet(2, false)
    {
        Initialize();
        Decode(octets);
    }

    InDirectoryBindError(const InDirectoryBindError& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    InDirectoryBindError(its::AsnDescObject* description) : its::AsnSet(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetVersionsStaticDescription();
    static its::AsnDescObject* GetErrorStaticDescription();

public:

    virtual ~InDirectoryBindError()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InDirectoryBindError(*this);
    }

    virtual std::string GetName() const
    { return "InDirectoryBindError"; }

    void SetVersions(Versions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVersionsStaticDescription());
        AddElement(0, element);
    }

    void SetVersions(const Versions& element)
    {
        its::AsnObject& asnObject = const_cast<Versions&>(element);
        asnObject.SetDescription(GetVersionsStaticDescription());
        AddElement(0, element);
}

    bool OptionVersions() const
    {
        return Contains(0);
    }

    const Versions& GetVersions() const
    {
        ITS_REQUIRE(OptionVersions());
        return static_cast<const Versions&> (ElementAt(0));
    }

    void SetError(BindError* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetErrorStaticDescription());
        AddElement(1, element);
    }

    void SetError(const BindError& element)
    {
        its::AsnObject& asnObject = const_cast<BindError&>(element);
        asnObject.SetDescription(GetErrorStaticDescription());
        AddElement(1, element);
}

    const BindError& GetError() const
    {
        return static_cast<const BindError&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_IN_DIRECTORY_BIND_ERROR_H_)

