//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CALL_INFORMATION_REPORT_ARG_H_)
#define _INAP_CS2_CALL_INFORMATION_REPORT_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnBoolean.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>

#include <inap_cs2_requested_information_list.h>
#include <inap_cs2_correlation_id.h>
#include <inap_cs2_extension_field.h>
#include <inap_cs2_leg_id.h>



namespace inap_cs2 {



class CallInformationReportArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };



    class LastEventIndicator : public its::AsnBoolean
    {
    public:

        LastEventIndicator(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        LastEventIndicator(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        LastEventIndicator(const LastEventIndicator& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        LastEventIndicator(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        LastEventIndicator(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LastEventIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LastEventIndicator(*this);
        }

        virtual std::string GetName() const
        { return "LastEventIndicator"; }

    };


        typedef inap_cs2::RequestedInformationList RequestedInformationList;


        typedef inap_cs2::CorrelationID CorrelationID;


        typedef inap_cs2::LegID LegID;


////////// End Nested Class(es) //////////

    CallInformationReportArg() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    CallInformationReportArg(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    CallInformationReportArg(const CallInformationReportArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CallInformationReportArg(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRequestedInformationListStaticDescription();
    static its::AsnDescObject* GetCorrelationIDStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetLegIDStaticDescription();
    static its::AsnDescObject* GetLastEventIndicatorStaticDescription();

public:

    virtual ~CallInformationReportArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallInformationReportArg(*this);
    }

    virtual std::string GetName() const
    { return "CallInformationReportArg"; }

    void SetRequestedInformationList(RequestedInformationList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedInformationListStaticDescription());
        AddElement(0, element);
    }

    void SetRequestedInformationList(const RequestedInformationList& element)
    {
        its::AsnObject& asnObject = const_cast<RequestedInformationList&>(element);
        asnObject.SetDescription(GetRequestedInformationListStaticDescription());
        AddElement(0, element);
    }

    const RequestedInformationList& GetRequestedInformationList() const
    {
        return static_cast<const RequestedInformationList&> (ElementAt(0));
    }

    void SetCorrelationID(CorrelationID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCorrelationIDStaticDescription());
        AddElement(1, element);
    }

    void SetCorrelationID(const CorrelationID& element)
    {
        its::AsnObject& asnObject = const_cast<CorrelationID&>(element);
        asnObject.SetDescription(GetCorrelationIDStaticDescription());
        AddElement(1, element);
    }

    bool OptionCorrelationID() const
    {
        return Contains(1);
    }

    const CorrelationID& GetCorrelationID() const
    {
        ITS_REQUIRE(OptionCorrelationID());
        return static_cast<const CorrelationID&> (ElementAt(1));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(2, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensions() const
    {
        return Contains(2);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(2));
    }

    void SetLegID(LegID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLegIDStaticDescription());
        AddElement(3, element);
    }

    void SetLegID(const LegID& element)
    {
        its::AsnObject& asnObject = const_cast<LegID&>(element);
        asnObject.SetDescription(GetLegIDStaticDescription());
        AddElement(3, element);
    }

    bool OptionLegID() const
    {
        return Contains(3);
    }

    const LegID& GetLegID() const
    {
        ITS_REQUIRE(OptionLegID());
        return static_cast<const LegID&> (ElementAt(3));
    }

    void SetLastEventIndicator(LastEventIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLastEventIndicatorStaticDescription());
        AddElement(4, element);
    }

    void SetLastEventIndicator(const LastEventIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<LastEventIndicator&>(element);
        asnObject.SetDescription(GetLastEventIndicatorStaticDescription());
        AddElement(4, element);
    }

    const LastEventIndicator& GetLastEventIndicator() const
    {
        return static_cast<const LastEventIndicator&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CALL_INFORMATION_REPORT_ARG_H_)

