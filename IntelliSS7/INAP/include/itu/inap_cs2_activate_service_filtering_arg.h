//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ACTIVATE_SERVICE_FILTERING_ARG_H_)
#define _INAP_CS2_ACTIVATE_SERVICE_FILTERING_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <inap_cs2_filtered_call_treatment.h>
#include <inap_cs2_filtering_characteristics.h>
#include <inap_cs2_filtering_time_out.h>
#include <inap_cs2_filtering_criteria.h>
#include <inap_cs2_date_and_time.h>
#include <inap_cs2_extension_field.h>



namespace inap_cs2 {



class ActivateServiceFilteringArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::FilteredCallTreatment FilteredCallTreatment;


        typedef inap_cs2::FilteringCharacteristics FilteringCharacteristics;


        typedef inap_cs2::FilteringTimeOut FilteringTimeOut;


        typedef inap_cs2::FilteringCriteria FilteringCriteria;


        typedef inap_cs2::DateAndTime DateAndTime;


////////// End Nested Class(es) //////////

    ActivateServiceFilteringArg() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    ActivateServiceFilteringArg(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    ActivateServiceFilteringArg(const ActivateServiceFilteringArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ActivateServiceFilteringArg(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetFilteredCallTreatmentStaticDescription();
    static its::AsnDescObject* GetFilteringCharacteristicsStaticDescription();
    static its::AsnDescObject* GetFilteringTimeOutStaticDescription();
    static its::AsnDescObject* GetFilteringCriteriaStaticDescription();
    static its::AsnDescObject* GetStartTimeStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();

public:

    virtual ~ActivateServiceFilteringArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ActivateServiceFilteringArg(*this);
    }

    virtual std::string GetName() const
    { return "ActivateServiceFilteringArg"; }

    void SetFilteredCallTreatment(FilteredCallTreatment* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFilteredCallTreatmentStaticDescription());
        AddElement(0, element);
    }

    void SetFilteredCallTreatment(const FilteredCallTreatment& element)
    {
        its::AsnObject& asnObject = const_cast<FilteredCallTreatment&>(element);
        asnObject.SetDescription(GetFilteredCallTreatmentStaticDescription());
        AddElement(0, element);
    }

    const FilteredCallTreatment& GetFilteredCallTreatment() const
    {
        return static_cast<const FilteredCallTreatment&> (ElementAt(0));
    }

    void SetFilteringCharacteristics(FilteringCharacteristics* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFilteringCharacteristicsStaticDescription());
        AddElement(1, element);
    }

    void SetFilteringCharacteristics(const FilteringCharacteristics& element)
    {
        its::AsnObject& asnObject = const_cast<FilteringCharacteristics&>(element);
        asnObject.SetDescription(GetFilteringCharacteristicsStaticDescription());
        AddElement(1, element);
    }

    const FilteringCharacteristics& GetFilteringCharacteristics() const
    {
        return static_cast<const FilteringCharacteristics&> (ElementAt(1));
    }

    void SetFilteringTimeOut(FilteringTimeOut* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFilteringTimeOutStaticDescription());
        AddElement(2, element);
    }

    void SetFilteringTimeOut(const FilteringTimeOut& element)
    {
        its::AsnObject& asnObject = const_cast<FilteringTimeOut&>(element);
        asnObject.SetDescription(GetFilteringTimeOutStaticDescription());
        AddElement(2, element);
    }

    const FilteringTimeOut& GetFilteringTimeOut() const
    {
        return static_cast<const FilteringTimeOut&> (ElementAt(2));
    }

    void SetFilteringCriteria(FilteringCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFilteringCriteriaStaticDescription());
        AddElement(3, element);
    }

    void SetFilteringCriteria(const FilteringCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<FilteringCriteria&>(element);
        asnObject.SetDescription(GetFilteringCriteriaStaticDescription());
        AddElement(3, element);
    }

    const FilteringCriteria& GetFilteringCriteria() const
    {
        return static_cast<const FilteringCriteria&> (ElementAt(3));
    }

    void SetStartTime(DateAndTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetStartTimeStaticDescription());
        AddElement(4, element);
    }

    void SetStartTime(const DateAndTime& element)
    {
        its::AsnObject& asnObject = const_cast<DateAndTime&>(element);
        asnObject.SetDescription(GetStartTimeStaticDescription());
        AddElement(4, element);
    }

    bool OptionStartTime() const
    {
        return Contains(4);
    }

    const DateAndTime& GetStartTime() const
    {
        ITS_REQUIRE(OptionStartTime());
        return static_cast<const DateAndTime&> (ElementAt(4));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(5, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensions() const
    {
        return Contains(5);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ACTIVATE_SERVICE_FILTERING_ARG_H_)

