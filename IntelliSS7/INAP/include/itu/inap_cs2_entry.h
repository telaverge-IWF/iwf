//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ENTRY_H_)
#define _INAP_CS2_ENTRY_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnObjectIdentifier.h>
#include <AsnInteger.h>

#include <inap_cs2_integer4.h>



namespace inap_cs2 {



class Entry : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class Agreements : public its::AsnObjectIdentifier
    {
    public:

        Agreements() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        Agreements(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        Agreements(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        Agreements(const Agreements& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        Agreements(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        Agreements(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Agreements()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Agreements(*this);
        }

        virtual std::string GetName() const
        { return "Agreements"; }

    };


        typedef inap_cs2::Integer4 Integer4;


////////// End Nested Class(es) //////////

    Entry() : its::AsnChoice(false)
    {
        Initialize();
    }

    Entry(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Entry(const Entry& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Entry(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Entry(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAgreementsStaticDescription();
    static its::AsnDescObject* GetNetworkSpecificStaticDescription();

public:

    virtual ~Entry()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Entry(*this);
    }

    virtual std::string GetName() const
    { return "Entry"; }

    void SetChoiceAgreements(Agreements* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAgreementsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAgreements(const Agreements& choice)
    {
        its::AsnObject& asnObject = const_cast<Agreements&>(choice);
        asnObject.SetDescription(GetAgreementsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAgreements() const
    {
        return Contains(GetAgreementsStaticDescription()->TagIdentity());
    }

    const Agreements& GetChoiceAgreements() const
    {
        ITS_REQUIRE(ChoiceAgreements());
        return static_cast<const Agreements&> (GetChoice());
    }

    void SetChoiceNetworkSpecific(Integer4* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNetworkSpecificStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNetworkSpecific(const Integer4& choice)
    {
        its::AsnObject& asnObject = const_cast<Integer4&>(choice);
        asnObject.SetDescription(GetNetworkSpecificStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNetworkSpecific() const
    {
        return Contains(GetNetworkSpecificStaticDescription()->TagIdentity());
    }

    const Integer4& GetChoiceNetworkSpecific() const
    {
        ITS_REQUIRE(ChoiceNetworkSpecific());
        return static_cast<const Integer4&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ENTRY_H_)

