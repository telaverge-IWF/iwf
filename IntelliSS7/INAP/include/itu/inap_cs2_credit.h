//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CREDIT_H_)
#define _INAP_CS2_CREDIT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnInteger.h>

#include <inap_cs2_currency_value.h>
#include <inap_cs2_credit_unit.h>



namespace inap_cs2 {



class Credit : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::CurrencyValue CurrencyValue;


        typedef inap_cs2::CreditUnit CreditUnit;


////////// End Nested Class(es) //////////

    Credit() : its::AsnChoice(false)
    {
        Initialize();
    }

    Credit(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Credit(const Credit& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Credit(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Credit(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCurrencyStaticDescription();
    static its::AsnDescObject* GetUnitsStaticDescription();

public:

    virtual ~Credit()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Credit(*this);
    }

    virtual std::string GetName() const
    { return "Credit"; }

    void SetChoiceCurrency(CurrencyValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCurrencyStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCurrency(const CurrencyValue& choice)
    {
        its::AsnObject& asnObject = const_cast<CurrencyValue&>(choice);
        asnObject.SetDescription(GetCurrencyStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCurrency() const
    {
        return Contains(GetCurrencyStaticDescription()->TagIdentity());
    }

    const CurrencyValue& GetChoiceCurrency() const
    {
        ITS_REQUIRE(ChoiceCurrency());
        return static_cast<const CurrencyValue&> (GetChoice());
    }

    void SetChoiceUnits(CreditUnit* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetUnitsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceUnits(const CreditUnit& choice)
    {
        its::AsnObject& asnObject = const_cast<CreditUnit&>(choice);
        asnObject.SetDescription(GetUnitsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceUnits() const
    {
        return Contains(GetUnitsStaticDescription()->TagIdentity());
    }

    const CreditUnit& GetChoiceUnits() const
    {
        ITS_REQUIRE(ChoiceUnits());
        return static_cast<const CreditUnit&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CREDIT_H_)

