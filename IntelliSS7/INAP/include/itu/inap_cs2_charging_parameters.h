//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CHARGING_PARAMETERS_H_)
#define _INAP_CS2_CHARGING_PARAMETERS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>



namespace inap_cs2 {



class ChargingParameters : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class UnitsPerInterval : public its::AsnInteger
    {
    public:

        UnitsPerInterval() : its::AsnInteger(false)
        {
            Initialize();
        }

        UnitsPerInterval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        UnitsPerInterval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        UnitsPerInterval(const UnitsPerInterval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        UnitsPerInterval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        UnitsPerInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UnitsPerInterval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UnitsPerInterval(*this);
        }

        virtual std::string GetName() const
        { return "UnitsPerInterval"; }

    };



    class TimePerInterval : public its::AsnInteger
    {
    public:

        TimePerInterval() : its::AsnInteger(false)
        {
            Initialize();
        }

        TimePerInterval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        TimePerInterval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        TimePerInterval(const TimePerInterval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        TimePerInterval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        TimePerInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TimePerInterval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TimePerInterval(*this);
        }

        virtual std::string GetName() const
        { return "TimePerInterval"; }

    };



    class ScalingFactor : public its::AsnInteger
    {
    public:

        ScalingFactor() : its::AsnInteger(false)
        {
            Initialize();
        }

        ScalingFactor(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        ScalingFactor(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        ScalingFactor(const ScalingFactor& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        ScalingFactor(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        ScalingFactor(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ScalingFactor()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ScalingFactor(*this);
        }

        virtual std::string GetName() const
        { return "ScalingFactor"; }

    };



    class InitialUnitIncrement : public its::AsnInteger
    {
    public:

        InitialUnitIncrement() : its::AsnInteger(false)
        {
            Initialize();
        }

        InitialUnitIncrement(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        InitialUnitIncrement(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        InitialUnitIncrement(const InitialUnitIncrement& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        InitialUnitIncrement(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        InitialUnitIncrement(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InitialUnitIncrement()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InitialUnitIncrement(*this);
        }

        virtual std::string GetName() const
        { return "InitialUnitIncrement"; }

    };



    class UnitsPerDataInterval : public its::AsnInteger
    {
    public:

        UnitsPerDataInterval() : its::AsnInteger(false)
        {
            Initialize();
        }

        UnitsPerDataInterval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        UnitsPerDataInterval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        UnitsPerDataInterval(const UnitsPerDataInterval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        UnitsPerDataInterval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        UnitsPerDataInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UnitsPerDataInterval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UnitsPerDataInterval(*this);
        }

        virtual std::string GetName() const
        { return "UnitsPerDataInterval"; }

    };



    class SegmentsPerDataInterval : public its::AsnInteger
    {
    public:

        SegmentsPerDataInterval() : its::AsnInteger(false)
        {
            Initialize();
        }

        SegmentsPerDataInterval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        SegmentsPerDataInterval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        SegmentsPerDataInterval(const SegmentsPerDataInterval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        SegmentsPerDataInterval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        SegmentsPerDataInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SegmentsPerDataInterval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SegmentsPerDataInterval(*this);
        }

        virtual std::string GetName() const
        { return "SegmentsPerDataInterval"; }

    };



    class InitialTimeInterval : public its::AsnInteger
    {
    public:

        InitialTimeInterval() : its::AsnInteger(false)
        {
            Initialize();
        }

        InitialTimeInterval(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        InitialTimeInterval(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        InitialTimeInterval(const InitialTimeInterval& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        InitialTimeInterval(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        InitialTimeInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InitialTimeInterval()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InitialTimeInterval(*this);
        }

        virtual std::string GetName() const
        { return "InitialTimeInterval"; }

    };


////////// End Nested Class(es) //////////

    ChargingParameters() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    ChargingParameters(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    ChargingParameters(const ChargingParameters& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ChargingParameters(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUnitsPerIntervalStaticDescription();
    static its::AsnDescObject* GetTimePerIntervalStaticDescription();
    static its::AsnDescObject* GetScalingFactorStaticDescription();
    static its::AsnDescObject* GetInitialUnitIncrementStaticDescription();
    static its::AsnDescObject* GetUnitsPerDataIntervalStaticDescription();
    static its::AsnDescObject* GetSegmentsPerDataIntervalStaticDescription();
    static its::AsnDescObject* GetInitialTimeIntervalStaticDescription();

public:

    virtual ~ChargingParameters()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ChargingParameters(*this);
    }

    virtual std::string GetName() const
    { return "ChargingParameters"; }

    void SetUnitsPerInterval(UnitsPerInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUnitsPerIntervalStaticDescription());
        AddElement(0, element);
    }

    void SetUnitsPerInterval(const UnitsPerInterval& element)
    {
        its::AsnObject& asnObject = const_cast<UnitsPerInterval&>(element);
        asnObject.SetDescription(GetUnitsPerIntervalStaticDescription());
        AddElement(0, element);
    }

    const UnitsPerInterval& GetUnitsPerInterval() const
    {
        return static_cast<const UnitsPerInterval&> (ElementAt(0));
    }

    void SetTimePerInterval(TimePerInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTimePerIntervalStaticDescription());
        AddElement(1, element);
    }

    void SetTimePerInterval(const TimePerInterval& element)
    {
        its::AsnObject& asnObject = const_cast<TimePerInterval&>(element);
        asnObject.SetDescription(GetTimePerIntervalStaticDescription());
        AddElement(1, element);
    }

    const TimePerInterval& GetTimePerInterval() const
    {
        return static_cast<const TimePerInterval&> (ElementAt(1));
    }

    void SetScalingFactor(ScalingFactor* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetScalingFactorStaticDescription());
        AddElement(2, element);
    }

    void SetScalingFactor(const ScalingFactor& element)
    {
        its::AsnObject& asnObject = const_cast<ScalingFactor&>(element);
        asnObject.SetDescription(GetScalingFactorStaticDescription());
        AddElement(2, element);
    }

    const ScalingFactor& GetScalingFactor() const
    {
        return static_cast<const ScalingFactor&> (ElementAt(2));
    }

    void SetInitialUnitIncrement(InitialUnitIncrement* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInitialUnitIncrementStaticDescription());
        AddElement(3, element);
    }

    void SetInitialUnitIncrement(const InitialUnitIncrement& element)
    {
        its::AsnObject& asnObject = const_cast<InitialUnitIncrement&>(element);
        asnObject.SetDescription(GetInitialUnitIncrementStaticDescription());
        AddElement(3, element);
    }

    bool OptionInitialUnitIncrement() const
    {
        return Contains(3);
    }

    const InitialUnitIncrement& GetInitialUnitIncrement() const
    {
        ITS_REQUIRE(OptionInitialUnitIncrement());
        return static_cast<const InitialUnitIncrement&> (ElementAt(3));
    }

    void SetUnitsPerDataInterval(UnitsPerDataInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUnitsPerDataIntervalStaticDescription());
        AddElement(4, element);
    }

    void SetUnitsPerDataInterval(const UnitsPerDataInterval& element)
    {
        its::AsnObject& asnObject = const_cast<UnitsPerDataInterval&>(element);
        asnObject.SetDescription(GetUnitsPerDataIntervalStaticDescription());
        AddElement(4, element);
    }

    bool OptionUnitsPerDataInterval() const
    {
        return Contains(4);
    }

    const UnitsPerDataInterval& GetUnitsPerDataInterval() const
    {
        ITS_REQUIRE(OptionUnitsPerDataInterval());
        return static_cast<const UnitsPerDataInterval&> (ElementAt(4));
    }

    void SetSegmentsPerDataInterval(SegmentsPerDataInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSegmentsPerDataIntervalStaticDescription());
        AddElement(5, element);
    }

    void SetSegmentsPerDataInterval(const SegmentsPerDataInterval& element)
    {
        its::AsnObject& asnObject = const_cast<SegmentsPerDataInterval&>(element);
        asnObject.SetDescription(GetSegmentsPerDataIntervalStaticDescription());
        AddElement(5, element);
    }

    bool OptionSegmentsPerDataInterval() const
    {
        return Contains(5);
    }

    const SegmentsPerDataInterval& GetSegmentsPerDataInterval() const
    {
        ITS_REQUIRE(OptionSegmentsPerDataInterval());
        return static_cast<const SegmentsPerDataInterval&> (ElementAt(5));
    }

    void SetInitialTimeInterval(InitialTimeInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInitialTimeIntervalStaticDescription());
        AddElement(6, element);
    }

    void SetInitialTimeInterval(const InitialTimeInterval& element)
    {
        its::AsnObject& asnObject = const_cast<InitialTimeInterval&>(element);
        asnObject.SetDescription(GetInitialTimeIntervalStaticDescription());
        AddElement(6, element);
    }

    bool OptionInitialTimeInterval() const
    {
        return Contains(6);
    }

    const InitialTimeInterval& GetInitialTimeInterval() const
    {
        ITS_REQUIRE(OptionInitialTimeInterval());
        return static_cast<const InitialTimeInterval&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CHARGING_PARAMETERS_H_)

