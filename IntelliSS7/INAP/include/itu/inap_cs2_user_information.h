//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_USER_INFORMATION_H_)
#define _INAP_CS2_USER_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>

#include <inap_cs2_info_to_send.h>
#include <inap_cs2_constraints.h>



namespace inap_cs2 {



class UserInformation : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::InfoToSend InfoToSend;


        typedef inap_cs2::Constraints Constraints;


////////// End Nested Class(es) //////////

    UserInformation() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    UserInformation(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    UserInformation(const UserInformation& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UserInformation(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetInfoToSendStaticDescription();
    static its::AsnDescObject* GetConstraintsStaticDescription();
    static its::AsnDescObject* GetErrorInfoStaticDescription();

public:

    virtual ~UserInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UserInformation(*this);
    }

    virtual std::string GetName() const
    { return "UserInformation"; }

    void SetInfoToSend(InfoToSend* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInfoToSendStaticDescription());
        AddElement(0, element);
    }

    void SetInfoToSend(const InfoToSend& element)
    {
        its::AsnObject& asnObject = const_cast<InfoToSend&>(element);
        asnObject.SetDescription(GetInfoToSendStaticDescription());
        AddElement(0, element);
    }

    const InfoToSend& GetInfoToSend() const
    {
        return static_cast<const InfoToSend&> (ElementAt(0));
    }

    void SetConstraints(Constraints* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetConstraintsStaticDescription());
        AddElement(1, element);
    }

    void SetConstraints(const Constraints& element)
    {
        its::AsnObject& asnObject = const_cast<Constraints&>(element);
        asnObject.SetDescription(GetConstraintsStaticDescription());
        AddElement(1, element);
    }

    const Constraints& GetConstraints() const
    {
        return static_cast<const Constraints&> (ElementAt(1));
    }

    void SetErrorInfo(InfoToSend* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetErrorInfoStaticDescription());
        AddElement(2, element);
    }

    void SetErrorInfo(const InfoToSend& element)
    {
        its::AsnObject& asnObject = const_cast<InfoToSend&>(element);
        asnObject.SetDescription(GetErrorInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionErrorInfo() const
    {
        return Contains(2);
    }

    const InfoToSend& GetErrorInfo() const
    {
        ITS_REQUIRE(OptionErrorInfo());
        return static_cast<const InfoToSend&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_USER_INFORMATION_H_)

