//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FILTERED_CALL_TREATMENT_H_)
#define _INAP_CS2_FILTERED_CALL_TREATMENT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnInteger.h>

#include <inap_cs2_sf_billing_charging_characteristics.h>
#include <inap_cs2_information_to_send.h>
#include <inap_cs2_maximum_number_of_counters.h>
#include <inap_cs2_cause.h>



namespace inap_cs2 {



class FilteredCallTreatment : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::SFBillingChargingCharacteristics SFBillingChargingCharacteristics;


        typedef inap_cs2::InformationToSend InformationToSend;


        typedef inap_cs2::MaximumNumberOfCounters MaximumNumberOfCounters;


        typedef inap_cs2::Cause Cause;


////////// End Nested Class(es) //////////

    FilteredCallTreatment() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    FilteredCallTreatment(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    FilteredCallTreatment(const FilteredCallTreatment& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    FilteredCallTreatment(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSFBillingChargingCharacteristicsStaticDescription();
    static its::AsnDescObject* GetInformationToSendStaticDescription();
    static its::AsnDescObject* GetMaximumNumberOfCountersStaticDescription();
    static its::AsnDescObject* GetReleaseCauseStaticDescription();

public:

    virtual ~FilteredCallTreatment()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FilteredCallTreatment(*this);
    }

    virtual std::string GetName() const
    { return "FilteredCallTreatment"; }

    void SetSFBillingChargingCharacteristics(SFBillingChargingCharacteristics* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSFBillingChargingCharacteristicsStaticDescription());
        AddElement(0, element);
    }

    void SetSFBillingChargingCharacteristics(const SFBillingChargingCharacteristics& element)
    {
        its::AsnObject& asnObject = const_cast<SFBillingChargingCharacteristics&>(element);
        asnObject.SetDescription(GetSFBillingChargingCharacteristicsStaticDescription());
        AddElement(0, element);
    }

    const SFBillingChargingCharacteristics& GetSFBillingChargingCharacteristics() const
    {
        return static_cast<const SFBillingChargingCharacteristics&> (ElementAt(0));
    }

    void SetInformationToSend(InformationToSend* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInformationToSendStaticDescription());
        AddElement(1, element);
    }

    void SetInformationToSend(const InformationToSend& element)
    {
        its::AsnObject& asnObject = const_cast<InformationToSend&>(element);
        asnObject.SetDescription(GetInformationToSendStaticDescription());
        AddElement(1, element);
    }

    bool OptionInformationToSend() const
    {
        return Contains(1);
    }

    const InformationToSend& GetInformationToSend() const
    {
        ITS_REQUIRE(OptionInformationToSend());
        return static_cast<const InformationToSend&> (ElementAt(1));
    }

    void SetMaximumNumberOfCounters(MaximumNumberOfCounters* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMaximumNumberOfCountersStaticDescription());
        AddElement(2, element);
    }

    void SetMaximumNumberOfCounters(const MaximumNumberOfCounters& element)
    {
        its::AsnObject& asnObject = const_cast<MaximumNumberOfCounters&>(element);
        asnObject.SetDescription(GetMaximumNumberOfCountersStaticDescription());
        AddElement(2, element);
    }

    bool OptionMaximumNumberOfCounters() const
    {
        return Contains(2);
    }

    const MaximumNumberOfCounters& GetMaximumNumberOfCounters() const
    {
        ITS_REQUIRE(OptionMaximumNumberOfCounters());
        return static_cast<const MaximumNumberOfCounters&> (ElementAt(2));
    }

    void SetReleaseCause(Cause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
        AddElement(3, element);
    }

    void SetReleaseCause(const Cause& element)
    {
        its::AsnObject& asnObject = const_cast<Cause&>(element);
        asnObject.SetDescription(GetReleaseCauseStaticDescription());
        AddElement(3, element);
    }

    bool OptionReleaseCause() const
    {
        return Contains(3);
    }

    const Cause& GetReleaseCause() const
    {
        ITS_REQUIRE(OptionReleaseCause());
        return static_cast<const Cause&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FILTERED_CALL_TREATMENT_H_)

