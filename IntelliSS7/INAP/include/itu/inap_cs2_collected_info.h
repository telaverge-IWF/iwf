//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_COLLECTED_INFO_H_)
#define _INAP_CS2_COLLECTED_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnBoolean.h>
#include <AsnSequence.h>

#include <inap_cs2_collected_digits.h>



namespace inap_cs2 {



class CollectedInfo : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class IA5Information : public its::AsnBoolean
    {
    public:

        IA5Information(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        IA5Information(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        IA5Information(const IA5Information& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        IA5Information(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        IA5Information(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~IA5Information()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new IA5Information(*this);
        }

        virtual std::string GetName() const
        { return "IA5Information"; }

    };


        typedef inap_cs2::CollectedDigits CollectedDigits;


////////// End Nested Class(es) //////////

    CollectedInfo() : its::AsnChoice(false)
    {
        Initialize();
    }

    CollectedInfo(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CollectedInfo(const CollectedInfo& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CollectedInfo(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CollectedInfo(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCollectedDigitsStaticDescription();
    static its::AsnDescObject* GetIA5InformationStaticDescription();

public:

    virtual ~CollectedInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CollectedInfo(*this);
    }

    virtual std::string GetName() const
    { return "CollectedInfo"; }

    void SetChoiceCollectedDigits(CollectedDigits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCollectedDigitsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCollectedDigits(const CollectedDigits& choice)
    {
        its::AsnObject& asnObject = const_cast<CollectedDigits&>(choice);
        asnObject.SetDescription(GetCollectedDigitsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCollectedDigits() const
    {
        return Contains(GetCollectedDigitsStaticDescription()->TagIdentity());
    }

    const CollectedDigits& GetChoiceCollectedDigits() const
    {
        ITS_REQUIRE(ChoiceCollectedDigits());
        return static_cast<const CollectedDigits&> (GetChoice());
    }

    void SetChoiceIA5Information(IA5Information* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetIA5InformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceIA5Information(const IA5Information& choice)
    {
        its::AsnObject& asnObject = const_cast<IA5Information&>(choice);
        asnObject.SetDescription(GetIA5InformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceIA5Information() const
    {
        return Contains(GetIA5InformationStaticDescription()->TagIdentity());
    }

    const IA5Information& GetChoiceIA5Information() const
    {
        ITS_REQUIRE(ChoiceIA5Information());
        return static_cast<const IA5Information&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_COLLECTED_INFO_H_)

