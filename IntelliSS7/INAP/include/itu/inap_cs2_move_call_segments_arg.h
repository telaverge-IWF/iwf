//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_MOVE_CALL_SEGMENTS_ARG_H_)
#define _INAP_CS2_MOVE_CALL_SEGMENTS_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnChoice.h>

#include <inap_cs2_csaid.h>
#include <inap_cs2_call_segment_id.h>
#include <inap_cs2_leg_id.h>
#include <inap_cs2_extension_field.h>



namespace inap_cs2 {



class MoveCallSegmentsArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class CallSegments : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////



        class SEQUENCE : public its::AsnSequence
        {
        public:


        ////////// Begin Nested Class(es) //////////


                typedef inap_cs2::CallSegmentID CallSegmentID;


        ////////// End Nested Class(es) //////////

            SEQUENCE() : its::AsnSequence(2, false)
            {
                Initialize();
            }

            SEQUENCE(its::Octets& octets) : its::AsnSequence(2, false)
            {
                Initialize();
                Decode(octets);
            }

            SEQUENCE(const SEQUENCE& rhs) : its::AsnSequence(rhs)
            {
                // Nothing to do.
            }

            SEQUENCE(its::AsnDescObject* description) : its::AsnSequence(2, description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetSourceCallSegmentStaticDescription();
            static its::AsnDescObject* GetNewCallSegmentStaticDescription();

        public:

            virtual ~SEQUENCE()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new SEQUENCE(*this);
            }

            virtual std::string GetName() const
            { return "SEQUENCE"; }

            void SetSourceCallSegment(CallSegmentID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetSourceCallSegmentStaticDescription());
                AddElement(0, element);
            }

            void SetSourceCallSegment(const CallSegmentID& element)
            {
                its::AsnObject& asnObject = const_cast<CallSegmentID&>(element);
                asnObject.SetDescription(GetSourceCallSegmentStaticDescription());
                AddElement(0, element);
            }

            const CallSegmentID& GetSourceCallSegment() const
            {
                return static_cast<const CallSegmentID&> (ElementAt(0));
            }

            void SetNewCallSegment(CallSegmentID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetNewCallSegmentStaticDescription());
                AddElement(1, element);
            }

            void SetNewCallSegment(const CallSegmentID& element)
            {
                its::AsnObject& asnObject = const_cast<CallSegmentID&>(element);
                asnObject.SetDescription(GetNewCallSegmentStaticDescription());
                AddElement(1, element);
            }

            const CallSegmentID& GetNewCallSegment() const
            {
                return static_cast<const CallSegmentID&> (ElementAt(1));
            }

        };


    ////////// End Nested Class //////////

        CallSegments() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        CallSegments(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        CallSegments(const CallSegments& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        CallSegments(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetSEQUENCEStaticDescription();

    public:

        virtual ~CallSegments()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallSegments(*this);
        }

        virtual std::string GetName() const
        { return "CallSegments"; }

        void AddElement(SEQUENCE* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetSEQUENCEStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const SEQUENCE& element)
        {
            its::AsnObject& asnObject = const_cast<SEQUENCE&>(element);
            asnObject.SetDescription(GetSEQUENCEStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const SEQUENCE& ElementAt(int index) const
        {
            return static_cast<const SEQUENCE&> (AsnSequenceOf::ElementAt(index));
        }

    };



    class Legs : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////



        class SEQUENCE : public its::AsnSequence
        {
        public:


        ////////// Begin Nested Class(es) //////////


                typedef inap_cs2::LegID LegID;


        ////////// End Nested Class(es) //////////

            SEQUENCE() : its::AsnSequence(2, false)
            {
                Initialize();
            }

            SEQUENCE(its::Octets& octets) : its::AsnSequence(2, false)
            {
                Initialize();
                Decode(octets);
            }

            SEQUENCE(const SEQUENCE& rhs) : its::AsnSequence(rhs)
            {
                // Nothing to do.
            }

            SEQUENCE(its::AsnDescObject* description) : its::AsnSequence(2, description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetSourceLegStaticDescription();
            static its::AsnDescObject* GetNewLegStaticDescription();

        public:

            virtual ~SEQUENCE()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new SEQUENCE(*this);
            }

            virtual std::string GetName() const
            { return "SEQUENCE"; }

            void SetSourceLeg(LegID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetSourceLegStaticDescription());
                AddElement(0, element);
            }

            void SetSourceLeg(const LegID& element)
            {
                its::AsnObject& asnObject = const_cast<LegID&>(element);
                asnObject.SetDescription(GetSourceLegStaticDescription());
                AddElement(0, element);
            }

            const LegID& GetSourceLeg() const
            {
                return static_cast<const LegID&> (ElementAt(0));
            }

            void SetNewLeg(LegID* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetNewLegStaticDescription());
                AddElement(1, element);
            }

            void SetNewLeg(const LegID& element)
            {
                its::AsnObject& asnObject = const_cast<LegID&>(element);
                asnObject.SetDescription(GetNewLegStaticDescription());
                AddElement(1, element);
            }

            const LegID& GetNewLeg() const
            {
                return static_cast<const LegID&> (ElementAt(1));
            }

        };


    ////////// End Nested Class //////////

        Legs() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Legs(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Legs(const Legs& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Legs(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetSEQUENCEStaticDescription();

    public:

        virtual ~Legs()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Legs(*this);
        }

        virtual std::string GetName() const
        { return "Legs"; }

        void AddElement(SEQUENCE* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetSEQUENCEStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const SEQUENCE& element)
        {
            its::AsnObject& asnObject = const_cast<SEQUENCE&>(element);
            asnObject.SetDescription(GetSEQUENCEStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const SEQUENCE& ElementAt(int index) const
        {
            return static_cast<const SEQUENCE&> (AsnSequenceOf::ElementAt(index));
        }

    };



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::CSAID CSAID;


////////// End Nested Class(es) //////////

    MoveCallSegmentsArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    MoveCallSegmentsArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    MoveCallSegmentsArg(const MoveCallSegmentsArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MoveCallSegmentsArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTargetCallSegmentAssociationStaticDescription();
    static its::AsnDescObject* GetCallSegmentsStaticDescription();
    static its::AsnDescObject* GetLegsStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();

public:

    virtual ~MoveCallSegmentsArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MoveCallSegmentsArg(*this);
    }

    virtual std::string GetName() const
    { return "MoveCallSegmentsArg"; }

    void SetTargetCallSegmentAssociation(CSAID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetCallSegmentAssociationStaticDescription());
        AddElement(0, element);
    }

    void SetTargetCallSegmentAssociation(const CSAID& element)
    {
        its::AsnObject& asnObject = const_cast<CSAID&>(element);
        asnObject.SetDescription(GetTargetCallSegmentAssociationStaticDescription());
        AddElement(0, element);
    }

    const CSAID& GetTargetCallSegmentAssociation() const
    {
        return static_cast<const CSAID&> (ElementAt(0));
    }

    void SetCallSegments(CallSegments* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallSegmentsStaticDescription());
        AddElement(1, element);
    }

    void SetCallSegments(const CallSegments& element)
    {
        its::AsnObject& asnObject = const_cast<CallSegments&>(element);
        asnObject.SetDescription(GetCallSegmentsStaticDescription());
        AddElement(1, element);
    }

    const CallSegments& GetCallSegments() const
    {
        return static_cast<const CallSegments&> (ElementAt(1));
    }

    void SetLegs(Legs* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLegsStaticDescription());
        AddElement(2, element);
    }

    void SetLegs(const Legs& element)
    {
        its::AsnObject& asnObject = const_cast<Legs&>(element);
        asnObject.SetDescription(GetLegsStaticDescription());
        AddElement(2, element);
    }

    const Legs& GetLegs() const
    {
        return static_cast<const Legs&> (ElementAt(2));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(3, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensions() const
    {
        return Contains(3);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_MOVE_CALL_SEGMENTS_ARG_H_)

