//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_REMOVE_ENTRY_ARGUMENT_H_)
#define _INAP_CS2_REMOVE_ENTRY_ARGUMENT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnSetOf.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_distinguished_name.h>
#include <inap_cs2_in_service_controls.h>
#include <inap_cs2_security_parameters.h>
#include <inap_cs2_operation_progress.h>
#include <inap_cs2_extension.h>



namespace inap_cs2 {



class RemoveEntryArgument : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSetOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::Extension Extension;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSetOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSetOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSetOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSetOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(Extension* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionStaticDescription());
            AsnSetOf::AddElement(element);
        }

        void AddElement(const Extension& element)
        {
            its::AsnObject& asnObject = const_cast<Extension&>(element);
            asnObject.SetDescription(GetExtensionStaticDescription());
            AsnSetOf::AddElement(element);
        }

        const Extension& ElementAt(int index) const
        {
            return static_cast<const Extension&> (AsnSetOf::ElementAt(index));
        }

    };


        typedef inap_cs2::DistinguishedName DistinguishedName;


        typedef inap_cs2::InServiceControls InServiceControls;


        typedef inap_cs2::SecurityParameters SecurityParameters;


        typedef inap_cs2::OperationProgress OperationProgress;


////////// End Nested Class(es) //////////

    RemoveEntryArgument() : its::AsnSet(6, false)
    {
        Initialize();
    }

    RemoveEntryArgument(its::Octets& octets) : its::AsnSet(6, false)
    {
        Initialize();
        Decode(octets);
    }

    RemoveEntryArgument(const RemoveEntryArgument& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    RemoveEntryArgument(its::AsnDescObject* description) : its::AsnSet(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetObjectStaticDescription();
    static its::AsnDescObject* GetServiceControlsStaticDescription();
    static its::AsnDescObject* GetSecurityParametersStaticDescription();
    static its::AsnDescObject* GetRequestorStaticDescription();
    static its::AsnDescObject* GetOperationProgressStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();

public:

    virtual ~RemoveEntryArgument()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RemoveEntryArgument(*this);
    }

    virtual std::string GetName() const
    { return "RemoveEntryArgument"; }

    void SetObject(DistinguishedName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetObjectStaticDescription());
        AddElement(0, element);
    }

    void SetObject(const DistinguishedName& element)
    {
        its::AsnObject& asnObject = const_cast<DistinguishedName&>(element);
        asnObject.SetDescription(GetObjectStaticDescription());
        AddElement(0, element);
}

    const DistinguishedName& GetObject() const
    {
        return static_cast<const DistinguishedName&> (ElementAt(0));
    }

    void SetServiceControls(InServiceControls* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceControlsStaticDescription());
        AddElement(1, element);
    }

    void SetServiceControls(const InServiceControls& element)
    {
        its::AsnObject& asnObject = const_cast<InServiceControls&>(element);
        asnObject.SetDescription(GetServiceControlsStaticDescription());
        AddElement(1, element);
}

    bool OptionServiceControls() const
    {
        return Contains(1);
    }

    const InServiceControls& GetServiceControls() const
    {
        ITS_REQUIRE(OptionServiceControls());
        return static_cast<const InServiceControls&> (ElementAt(1));
    }

    void SetSecurityParameters(SecurityParameters* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSecurityParametersStaticDescription());
        AddElement(2, element);
    }

    void SetSecurityParameters(const SecurityParameters& element)
    {
        its::AsnObject& asnObject = const_cast<SecurityParameters&>(element);
        asnObject.SetDescription(GetSecurityParametersStaticDescription());
        AddElement(2, element);
}

    bool OptionSecurityParameters() const
    {
        return Contains(2);
    }

    const SecurityParameters& GetSecurityParameters() const
    {
        ITS_REQUIRE(OptionSecurityParameters());
        return static_cast<const SecurityParameters&> (ElementAt(2));
    }

    void SetRequestor(DistinguishedName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestorStaticDescription());
        AddElement(3, element);
    }

    void SetRequestor(const DistinguishedName& element)
    {
        its::AsnObject& asnObject = const_cast<DistinguishedName&>(element);
        asnObject.SetDescription(GetRequestorStaticDescription());
        AddElement(3, element);
}

    bool OptionRequestor() const
    {
        return Contains(3);
    }

    const DistinguishedName& GetRequestor() const
    {
        ITS_REQUIRE(OptionRequestor());
        return static_cast<const DistinguishedName&> (ElementAt(3));
    }

    void SetOperationProgress(OperationProgress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOperationProgressStaticDescription());
        AddElement(4, element);
    }

    void SetOperationProgress(const OperationProgress& element)
    {
        its::AsnObject& asnObject = const_cast<OperationProgress&>(element);
        asnObject.SetDescription(GetOperationProgressStaticDescription());
        AddElement(4, element);
}

    bool OptionOperationProgress() const
    {
        return Contains(4);
    }

    const OperationProgress& GetOperationProgress() const
    {
        ITS_REQUIRE(OptionOperationProgress());
        return static_cast<const OperationProgress&> (ElementAt(4));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(5, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(5, element);
}

    bool OptionExtensions() const
    {
        return Contains(5);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_REMOVE_ENTRY_ARGUMENT_H_)

