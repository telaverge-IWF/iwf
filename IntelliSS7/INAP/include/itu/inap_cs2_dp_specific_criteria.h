//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_DP_SPECIFIC_CRITERIA_H_)
#define _INAP_CS2_DP_SPECIFIC_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequenceOf.h>

#include <inap_cs2_number_of_digits.h>
#include <inap_cs2_application_timer.h>
#include <inap_cs2_mid_call_control_info.h>



namespace inap_cs2 {



class DpSpecificCriteria : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::NumberOfDigits NumberOfDigits;


        typedef inap_cs2::ApplicationTimer ApplicationTimer;


        typedef inap_cs2::MidCallControlInfo MidCallControlInfo;


////////// End Nested Class(es) //////////

    DpSpecificCriteria() : its::AsnChoice(false)
    {
        Initialize();
    }

    DpSpecificCriteria(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    DpSpecificCriteria(const DpSpecificCriteria& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    DpSpecificCriteria(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    DpSpecificCriteria(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNumberOfDigitsStaticDescription();
    static its::AsnDescObject* GetApplicationTimerStaticDescription();
    static its::AsnDescObject* GetMidCallControlInfoStaticDescription();

public:

    virtual ~DpSpecificCriteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new DpSpecificCriteria(*this);
    }

    virtual std::string GetName() const
    { return "DpSpecificCriteria"; }

    void SetChoiceNumberOfDigits(NumberOfDigits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNumberOfDigitsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNumberOfDigits(const NumberOfDigits& choice)
    {
        its::AsnObject& asnObject = const_cast<NumberOfDigits&>(choice);
        asnObject.SetDescription(GetNumberOfDigitsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNumberOfDigits() const
    {
        return Contains(GetNumberOfDigitsStaticDescription()->TagIdentity());
    }

    const NumberOfDigits& GetChoiceNumberOfDigits() const
    {
        ITS_REQUIRE(ChoiceNumberOfDigits());
        return static_cast<const NumberOfDigits&> (GetChoice());
    }

    void SetChoiceApplicationTimer(ApplicationTimer* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetApplicationTimerStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceApplicationTimer(const ApplicationTimer& choice)
    {
        its::AsnObject& asnObject = const_cast<ApplicationTimer&>(choice);
        asnObject.SetDescription(GetApplicationTimerStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceApplicationTimer() const
    {
        return Contains(GetApplicationTimerStaticDescription()->TagIdentity());
    }

    const ApplicationTimer& GetChoiceApplicationTimer() const
    {
        ITS_REQUIRE(ChoiceApplicationTimer());
        return static_cast<const ApplicationTimer&> (GetChoice());
    }

    void SetChoiceMidCallControlInfo(MidCallControlInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMidCallControlInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMidCallControlInfo(const MidCallControlInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MidCallControlInfo&>(choice);
        asnObject.SetDescription(GetMidCallControlInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMidCallControlInfo() const
    {
        return Contains(GetMidCallControlInfoStaticDescription()->TagIdentity());
    }

    const MidCallControlInfo& GetChoiceMidCallControlInfo() const
    {
        ITS_REQUIRE(ChoiceMidCallControlInfo());
        return static_cast<const MidCallControlInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_DP_SPECIFIC_CRITERIA_H_)

