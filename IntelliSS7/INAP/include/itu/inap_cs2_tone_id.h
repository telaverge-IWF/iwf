//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_TONE_ID_H_)
#define _INAP_CS2_TONE_ID_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnObjectIdentifier.h>
#include <AsnInteger.h>

#include <inap_cs2_integer4.h>



namespace inap_cs2 {



class ToneId : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class Global : public its::AsnObjectIdentifier
    {
    public:

        Global() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        Global(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        Global(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        Global(const Global& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        Global(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        Global(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Global()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Global(*this);
        }

        virtual std::string GetName() const
        { return "Global"; }

    };


        typedef inap_cs2::Integer4 Integer4;


////////// End Nested Class(es) //////////

    ToneId() : its::AsnChoice(false)
    {
        Initialize();
    }

    ToneId(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ToneId(const ToneId& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ToneId(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ToneId(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocalStaticDescription();
    static its::AsnDescObject* GetGlobalStaticDescription();

public:

    virtual ~ToneId()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ToneId(*this);
    }

    virtual std::string GetName() const
    { return "ToneId"; }

    void SetChoiceLocal(Integer4* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLocalStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLocal(const Integer4& choice)
    {
        its::AsnObject& asnObject = const_cast<Integer4&>(choice);
        asnObject.SetDescription(GetLocalStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLocal() const
    {
        return Contains(GetLocalStaticDescription()->TagIdentity());
    }

    const Integer4& GetChoiceLocal() const
    {
        ITS_REQUIRE(ChoiceLocal());
        return static_cast<const Integer4&> (GetChoice());
    }

    void SetChoiceGlobal(Global* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGlobalStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGlobal(const Global& choice)
    {
        its::AsnObject& asnObject = const_cast<Global&>(choice);
        asnObject.SetDescription(GetGlobalStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGlobal() const
    {
        return Contains(GetGlobalStaticDescription()->TagIdentity());
    }

    const Global& GetChoiceGlobal() const
    {
        ITS_REQUIRE(ChoiceGlobal());
        return static_cast<const Global&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_TONE_ID_H_)

