//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SECURITY_PARAMETERS_H_)
#define _INAP_CS2_SECURITY_PARAMETERS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnBitString.h>
#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnChoice.h>
#include <AsnInteger.h>

#include <inap_cs2_certification_path.h>
#include <inap_cs2_distinguished_name.h>
#include <inap_cs2_time.h>
#include <inap_cs2_protection_request.h>



namespace inap_cs2 {



class SecurityParameters : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////



    class Random : public its::AsnBitString
    {
    public:

        Random() : its::AsnBitString(false)
        {
            Initialize();
        }

        Random(const std::vector<bool>& array) : its::AsnBitString(array, false)
        {
            Initialize();
        }

        Random(its::Octets& octets) : its::AsnBitString(false)
        {
            Initialize();
            Decode(octets);
        }

        Random(const Random& rhs) : its::AsnBitString(rhs)
        {
            // Nothing to do.
        }

        Random(its::AsnDescObject* description) : its::AsnBitString(description)
        {
            // Nothing to do.
        }

        Random(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Random()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Random(*this);
        }

        virtual std::string GetName() const
        { return "Random"; }

    };


        typedef inap_cs2::CertificationPath CertificationPath;


        typedef inap_cs2::DistinguishedName DistinguishedName;


        typedef inap_cs2::Time Time;


        typedef inap_cs2::ProtectionRequest ProtectionRequest;


////////// End Nested Class(es) //////////

    SecurityParameters() : its::AsnSet(5, false)
    {
        Initialize();
    }

    SecurityParameters(its::Octets& octets) : its::AsnSet(5, false)
    {
        Initialize();
        Decode(octets);
    }

    SecurityParameters(const SecurityParameters& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    SecurityParameters(its::AsnDescObject* description) : its::AsnSet(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCertification_pathStaticDescription();
    static its::AsnDescObject* GetDistinguishedNameStaticDescription();
    static its::AsnDescObject* GetTimeStaticDescription();
    static its::AsnDescObject* GetRandomStaticDescription();
    static its::AsnDescObject* GetTargetStaticDescription();

public:

    virtual ~SecurityParameters()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SecurityParameters(*this);
    }

    virtual std::string GetName() const
    { return "SecurityParameters"; }

    void SetCertification_path(CertificationPath* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCertification_pathStaticDescription());
        AddElement(0, element);
    }

    void SetCertification_path(const CertificationPath& element)
    {
        its::AsnObject& asnObject = const_cast<CertificationPath&>(element);
        asnObject.SetDescription(GetCertification_pathStaticDescription());
        AddElement(0, element);
}

    bool OptionCertification_path() const
    {
        return Contains(0);
    }

    const CertificationPath& GetCertification_path() const
    {
        ITS_REQUIRE(OptionCertification_path());
        return static_cast<const CertificationPath&> (ElementAt(0));
    }

    void SetDistinguishedName(DistinguishedName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDistinguishedNameStaticDescription());
        AddElement(1, element);
    }

    void SetDistinguishedName(const DistinguishedName& element)
    {
        its::AsnObject& asnObject = const_cast<DistinguishedName&>(element);
        asnObject.SetDescription(GetDistinguishedNameStaticDescription());
        AddElement(1, element);
}

    bool OptionDistinguishedName() const
    {
        return Contains(1);
    }

    const DistinguishedName& GetDistinguishedName() const
    {
        ITS_REQUIRE(OptionDistinguishedName());
        return static_cast<const DistinguishedName&> (ElementAt(1));
    }

    void SetTime(Time* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTimeStaticDescription());
        AddElement(2, element);
    }

    void SetTime(const Time& element)
    {
        its::AsnObject& asnObject = const_cast<Time&>(element);
        asnObject.SetDescription(GetTimeStaticDescription());
        AddElement(2, element);
}

    bool OptionTime() const
    {
        return Contains(2);
    }

    const Time& GetTime() const
    {
        ITS_REQUIRE(OptionTime());
        return static_cast<const Time&> (ElementAt(2));
    }

    void SetRandom(Random* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRandomStaticDescription());
        AddElement(3, element);
    }

    void SetRandom(const Random& element)
    {
        its::AsnObject& asnObject = const_cast<Random&>(element);
        asnObject.SetDescription(GetRandomStaticDescription());
        AddElement(3, element);
}

    bool OptionRandom() const
    {
        return Contains(3);
    }

    const Random& GetRandom() const
    {
        ITS_REQUIRE(OptionRandom());
        return static_cast<const Random&> (ElementAt(3));
    }

    void SetTarget(ProtectionRequest* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetStaticDescription());
        AddElement(4, element);
    }

    void SetTarget(const ProtectionRequest& element)
    {
        its::AsnObject& asnObject = const_cast<ProtectionRequest&>(element);
        asnObject.SetDescription(GetTargetStaticDescription());
        AddElement(4, element);
}

    bool OptionTarget() const
    {
        return Contains(4);
    }

    const ProtectionRequest& GetTarget() const
    {
        ITS_REQUIRE(OptionTarget());
        return static_cast<const ProtectionRequest&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SECURITY_PARAMETERS_H_)

