//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_TRIGGER_TYPE_H_)
#define _INAP_CS2_TRIGGER_TYPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace inap_cs2 {



class TriggerType : public its::AsnEnumerated
{
public:

    TriggerType() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    TriggerType(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    TriggerType(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    TriggerType(const TriggerType& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    TriggerType(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    TriggerType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~TriggerType()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TriggerType(*this);
    }

    virtual std::string GetName() const
    { return "TriggerType"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        TRIGGER_TYPE_FEATURE_ACTIVATION = 0,
        TRIGGER_TYPE_VERTICAL_SERVICE_CODE = 1,
        TRIGGER_TYPE_CUSTOMIZED_ACCESS = 2,
        TRIGGER_TYPE_CUSTOMIZED_INTERCOM = 3,
        TRIGGER_TYPE_EMERGENCY_SERVICE = 12,
        TRIGGER_TYPE_AFR = 13,
        TRIGGER_TYPE_SHARED_IO_TRUNK = 14,
        TRIGGER_TYPE_OFF_HOOK_DELAY = 17,
        TRIGGER_TYPE_CHANNEL_SETUP_PRI = 18,
        TRIGGER_TYPE_TNO_ANSWER = 25,
        TRIGGER_TYPE_TBUSY = 26,
        TRIGGER_TYPE_OCALLED_PARTY_BUSY = 27,
        TRIGGER_TYPE_ONO_ANSWER = 29,
        TRIGGER_TYPE_ORIGINATION_ATTEMPT_AUTHORIZED = 30,
        TRIGGER_TYPE_OANSWER = 31,
        TRIGGER_TYPE_ODISCONNECT = 32,
        TRIGGER_TYPE_TERM_ATTEMPT_AUTHORIZED = 33,
        TRIGGER_TYPE_TANSWER = 34,
        TRIGGER_TYPE_TDISCONNECT = 35

    };

    void SetFeatureActivation()
    { _value = 0; }

    bool IsFeatureActivation() const
    { return _value == 0; }

    void SetVerticalServiceCode()
    { _value = 1; }

    bool IsVerticalServiceCode() const
    { return _value == 1; }

    void SetCustomizedAccess()
    { _value = 2; }

    bool IsCustomizedAccess() const
    { return _value == 2; }

    void SetCustomizedIntercom()
    { _value = 3; }

    bool IsCustomizedIntercom() const
    { return _value == 3; }

    void SetEmergencyService()
    { _value = 12; }

    bool IsEmergencyService() const
    { return _value == 12; }

    void SetAFR()
    { _value = 13; }

    bool IsAFR() const
    { return _value == 13; }

    void SetSharedIOTrunk()
    { _value = 14; }

    bool IsSharedIOTrunk() const
    { return _value == 14; }

    void SetOffHookDelay()
    { _value = 17; }

    bool IsOffHookDelay() const
    { return _value == 17; }

    void SetChannelSetupPRI()
    { _value = 18; }

    bool IsChannelSetupPRI() const
    { return _value == 18; }

    void SetTNoAnswer()
    { _value = 25; }

    bool IsTNoAnswer() const
    { return _value == 25; }

    void SetTBusy()
    { _value = 26; }

    bool IsTBusy() const
    { return _value == 26; }

    void SetOCalledPartyBusy()
    { _value = 27; }

    bool IsOCalledPartyBusy() const
    { return _value == 27; }

    void SetONoAnswer()
    { _value = 29; }

    bool IsONoAnswer() const
    { return _value == 29; }

    void SetOriginationAttemptAuthorized()
    { _value = 30; }

    bool IsOriginationAttemptAuthorized() const
    { return _value == 30; }

    void SetOAnswer()
    { _value = 31; }

    bool IsOAnswer() const
    { return _value == 31; }

    void SetODisconnect()
    { _value = 32; }

    bool IsODisconnect() const
    { return _value == 32; }

    void SetTermAttemptAuthorized()
    { _value = 33; }

    bool IsTermAttemptAuthorized() const
    { return _value == 33; }

    void SetTAnswer()
    { _value = 34; }

    bool IsTAnswer() const
    { return _value == 34; }

    void SetTDisconnect()
    { _value = 35; }

    bool IsTDisconnect() const
    { return _value == 35; }

};



} // namespace.

#endif    // !defined(_INAP_CS2_TRIGGER_TYPE_H_)

