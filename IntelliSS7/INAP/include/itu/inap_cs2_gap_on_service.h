//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_GAP_ON_SERVICE_H_)
#define _INAP_CS2_GAP_ON_SERVICE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>

#include <inap_cs2_service_key.h>
#include <inap_cs2_event_type_bcsm.h>



namespace inap_cs2 {



class GapOnService : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::ServiceKey ServiceKey;


        typedef inap_cs2::EventTypeBCSM EventTypeBCSM;


////////// End Nested Class(es) //////////

    GapOnService() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    GapOnService(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    GapOnService(const GapOnService& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    GapOnService(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetDpCriteriaStaticDescription();

public:

    virtual ~GapOnService()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GapOnService(*this);
    }

    virtual std::string GetName() const
    { return "GapOnService"; }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    const ServiceKey& GetServiceKey() const
    {
        return static_cast<const ServiceKey&> (ElementAt(0));
    }

    void SetDpCriteria(EventTypeBCSM* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDpCriteriaStaticDescription());
        AddElement(1, element);
    }

    void SetDpCriteria(const EventTypeBCSM& element)
    {
        its::AsnObject& asnObject = const_cast<EventTypeBCSM&>(element);
        asnObject.SetDescription(GetDpCriteriaStaticDescription());
        AddElement(1, element);
    }

    bool OptionDpCriteria() const
    {
        return Contains(1);
    }

    const EventTypeBCSM& GetDpCriteria() const
    {
        ITS_REQUIRE(OptionDpCriteria());
        return static_cast<const EventTypeBCSM&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_GAP_ON_SERVICE_H_)

