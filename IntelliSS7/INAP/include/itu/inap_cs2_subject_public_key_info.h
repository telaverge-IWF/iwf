//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SUBJECT_PUBLIC_KEY_INFO_H_)
#define _INAP_CS2_SUBJECT_PUBLIC_KEY_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>

#include <inap_cs2_algorithm_identifier.h>



namespace inap_cs2 {



class SubjectPublicKeyInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class SubjectPublicKey : public its::AsnBitString
    {
    public:

        SubjectPublicKey() : its::AsnBitString(false)
        {
            Initialize();
        }

        SubjectPublicKey(const std::vector<bool>& array) : its::AsnBitString(array, false)
        {
            Initialize();
        }

        SubjectPublicKey(its::Octets& octets) : its::AsnBitString(false)
        {
            Initialize();
            Decode(octets);
        }

        SubjectPublicKey(const SubjectPublicKey& rhs) : its::AsnBitString(rhs)
        {
            // Nothing to do.
        }

        SubjectPublicKey(its::AsnDescObject* description) : its::AsnBitString(description)
        {
            // Nothing to do.
        }

        SubjectPublicKey(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SubjectPublicKey()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SubjectPublicKey(*this);
        }

        virtual std::string GetName() const
        { return "SubjectPublicKey"; }

    };


        typedef inap_cs2::AlgorithmIdentifier AlgorithmIdentifier;


////////// End Nested Class(es) //////////

    SubjectPublicKeyInfo() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    SubjectPublicKeyInfo(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    SubjectPublicKeyInfo(const SubjectPublicKeyInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SubjectPublicKeyInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAlgorithmStaticDescription();
    static its::AsnDescObject* GetSubjectPublicKeyStaticDescription();

public:

    virtual ~SubjectPublicKeyInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SubjectPublicKeyInfo(*this);
    }

    virtual std::string GetName() const
    { return "SubjectPublicKeyInfo"; }

    void SetAlgorithm(AlgorithmIdentifier* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlgorithmStaticDescription());
        AddElement(0, element);
    }

    void SetAlgorithm(const AlgorithmIdentifier& element)
    {
        its::AsnObject& asnObject = const_cast<AlgorithmIdentifier&>(element);
        asnObject.SetDescription(GetAlgorithmStaticDescription());
        AddElement(0, element);
    }

    const AlgorithmIdentifier& GetAlgorithm() const
    {
        return static_cast<const AlgorithmIdentifier&> (ElementAt(0));
    }

    void SetSubjectPublicKey(SubjectPublicKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubjectPublicKeyStaticDescription());
        AddElement(1, element);
    }

    void SetSubjectPublicKey(const SubjectPublicKey& element)
    {
        its::AsnObject& asnObject = const_cast<SubjectPublicKey&>(element);
        asnObject.SetDescription(GetSubjectPublicKeyStaticDescription());
        AddElement(1, element);
    }

    const SubjectPublicKey& GetSubjectPublicKey() const
    {
        return static_cast<const SubjectPublicKey&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SUBJECT_PUBLIC_KEY_INFO_H_)

