//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ATTRIBUTE_TYPE_AND_VALUE_H_)
#define _INAP_CS2_ATTRIBUTE_TYPE_AND_VALUE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>
#include <AsnChoice.h>

#include <inap_cs2_attribute_type.h>
#include <inap_cs2_attribute_value.h>



namespace inap_cs2 {



class AttributeTypeAndValue : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::AttributeType AttributeType;


        typedef inap_cs2::AttributeValue AttributeValue;


////////// End Nested Class(es) //////////

    AttributeTypeAndValue() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    AttributeTypeAndValue(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    AttributeTypeAndValue(const AttributeTypeAndValue& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AttributeTypeAndValue(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTypeStaticDescription();
    static its::AsnDescObject* GetValueStaticDescription();

public:

    virtual ~AttributeTypeAndValue()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AttributeTypeAndValue(*this);
    }

    virtual std::string GetName() const
    { return "AttributeTypeAndValue"; }

    void SetType(AttributeType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    void SetType(const AttributeType& element)
    {
        its::AsnObject& asnObject = const_cast<AttributeType&>(element);
        asnObject.SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    const AttributeType& GetType() const
    {
        return static_cast<const AttributeType&> (ElementAt(0));
    }

    void SetValue(AttributeValue* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetValueStaticDescription());
        AddElement(1, element);
    }

    void SetValue(const AttributeValue& element)
    {
        its::AsnObject& asnObject = const_cast<AttributeValue&>(element);
        asnObject.SetDescription(GetValueStaticDescription());
        AddElement(1, element);
    }

    const AttributeValue& GetValue() const
    {
        return static_cast<const AttributeValue&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ATTRIBUTE_TYPE_AND_VALUE_H_)

