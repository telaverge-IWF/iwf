//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_EXTENSION_FIELD_H_)
#define _INAP_CS2_EXTENSION_FIELD_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>
#include <AsnAny.h>



namespace inap_cs2 {



class ExtensionField : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Type : public its::AsnInteger
    {
    public:

        Type() : its::AsnInteger(false)
        {
            Initialize();
        }

        Type(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        Type(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        Type(const Type& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        Type(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        Type(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Type()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Type(*this);
        }

        virtual std::string GetName() const
        { return "Type"; }

    };



    class Criticality : public its::AsnEnumerated
    {
    public:

        Criticality() : its::AsnEnumerated(false)
        {
            Initialize();
        }

        Criticality(long value) : its::AsnEnumerated(value, false)
        {
            Initialize();
        }

        Criticality(its::Octets& octets) : its::AsnEnumerated(false)
        {
            Initialize();
            Decode(octets);
        }

        Criticality(const Criticality& rhs) : its::AsnEnumerated(rhs)
        {
            // Nothing to do.
        }

        Criticality(its::AsnDescObject* description) : its::AsnEnumerated(description)
        {
            // Nothing to do.
        }

        Criticality(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Criticality()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Criticality(*this);
        }

        virtual std::string GetName() const
        { return "Criticality"; }

        virtual long Get(const std::string& valueName) const;

        virtual std::string Get(long value) const;

        virtual std::string GetExt(long value) const;

        enum {
            CRITICALITY_IGNORE = 0,
            CRITICALITY_ABORT = 1

        };

        void SetIgnore()
        { _value = 0; }

        bool IsIgnore() const
        { return _value == 0; }

        void SetAbort()
        { _value = 1; }

        bool IsAbort() const
        { return _value == 1; }

    };



    class Value : public its::AsnAny
    {
    public:

        Value() : its::AsnAny(false)
        {
            Initialize();
        }

        Value(its::AsnObject* any) : its::AsnAny(any, false)
        {
            Initialize();
        }

        Value(its::Octets& octets) : its::AsnAny(false)
        {
            Initialize();
            Decode(octets);
        }

        Value(const Value& rhs) : its::AsnAny(rhs)
        {
            // Nothing to do.
        }

        Value(its::AsnDescObject* description) : its::AsnAny(description)
        {
            // Nothing to do.
        }

    Value(its::AsnDescObject* description, its::AsnObject* any) : its::AsnAny(description, any)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Value()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Value(*this);
        }

        virtual std::string GetName() const
        { return "Value"; }

    };


////////// End Nested Class(es) //////////

    ExtensionField() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    ExtensionField(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    ExtensionField(const ExtensionField& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ExtensionField(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTypeStaticDescription();
    static its::AsnDescObject* GetCriticalityStaticDescription();
    static its::AsnDescObject* GetValueStaticDescription();

public:

    virtual ~ExtensionField()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ExtensionField(*this);
    }

    virtual std::string GetName() const
    { return "ExtensionField"; }

    void SetType(Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    void SetType(const Type& element)
    {
        its::AsnObject& asnObject = const_cast<Type&>(element);
        asnObject.SetDescription(GetTypeStaticDescription());
        AddElement(0, element);
    }

    const Type& GetType() const
    {
        return static_cast<const Type&> (ElementAt(0));
    }

    void SetCriticality(Criticality* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCriticalityStaticDescription());
        AddElement(1, element);
    }

    void SetCriticality(const Criticality& element)
    {
        its::AsnObject& asnObject = const_cast<Criticality&>(element);
        asnObject.SetDescription(GetCriticalityStaticDescription());
        AddElement(1, element);
    }

    const Criticality& GetCriticality() const
    {
        return static_cast<const Criticality&> (ElementAt(1));
    }

    void SetValue(Value* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetValueStaticDescription());
        AddElement(2, element);
    }

    void SetValue(const Value& element)
    {
        its::AsnObject& asnObject = const_cast<Value&>(element);
        asnObject.SetDescription(GetValueStaticDescription());
        AddElement(2, element);
    }

    const Value& GetValue() const
    {
        return static_cast<const Value&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_EXTENSION_FIELD_H_)

