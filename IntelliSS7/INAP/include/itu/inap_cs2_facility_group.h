//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_FACILITY_GROUP_H_)
#define _INAP_CS2_FACILITY_GROUP_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>



namespace inap_cs2 {



class FacilityGroup : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class TrunkGroupID : public its::AsnInteger
    {
    public:

        TrunkGroupID() : its::AsnInteger(false)
        {
            Initialize();
        }

        TrunkGroupID(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        TrunkGroupID(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        TrunkGroupID(const TrunkGroupID& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        TrunkGroupID(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        TrunkGroupID(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TrunkGroupID()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TrunkGroupID(*this);
        }

        virtual std::string GetName() const
        { return "TrunkGroupID"; }

    };



    class PrivateFacilityID : public its::AsnInteger
    {
    public:

        PrivateFacilityID() : its::AsnInteger(false)
        {
            Initialize();
        }

        PrivateFacilityID(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        PrivateFacilityID(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        PrivateFacilityID(const PrivateFacilityID& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        PrivateFacilityID(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        PrivateFacilityID(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~PrivateFacilityID()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PrivateFacilityID(*this);
        }

        virtual std::string GetName() const
        { return "PrivateFacilityID"; }

    };



    class HuntGroup : public its::AsnOctetString
    {
    public:

        HuntGroup() : its::AsnOctetString(false)
        {
            Initialize();
        }

        HuntGroup(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        HuntGroup(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        HuntGroup(const HuntGroup& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        HuntGroup(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        HuntGroup(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~HuntGroup()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new HuntGroup(*this);
        }

        virtual std::string GetName() const
        { return "HuntGroup"; }

    };



    class RouteIndex : public its::AsnOctetString
    {
    public:

        RouteIndex() : its::AsnOctetString(false)
        {
            Initialize();
        }

        RouteIndex(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        RouteIndex(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        RouteIndex(const RouteIndex& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        RouteIndex(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        RouteIndex(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~RouteIndex()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RouteIndex(*this);
        }

        virtual std::string GetName() const
        { return "RouteIndex"; }

    };


////////// End Nested Class(es) //////////

    FacilityGroup() : its::AsnChoice(false)
    {
        Initialize();
    }

    FacilityGroup(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    FacilityGroup(const FacilityGroup& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    FacilityGroup(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    FacilityGroup(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTrunkGroupIDStaticDescription();
    static its::AsnDescObject* GetPrivateFacilityIDStaticDescription();
    static its::AsnDescObject* GetHuntGroupStaticDescription();
    static its::AsnDescObject* GetRouteIndexStaticDescription();

public:

    virtual ~FacilityGroup()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new FacilityGroup(*this);
    }

    virtual std::string GetName() const
    { return "FacilityGroup"; }

    void SetChoiceTrunkGroupID(TrunkGroupID* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTrunkGroupIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTrunkGroupID(const TrunkGroupID& choice)
    {
        its::AsnObject& asnObject = const_cast<TrunkGroupID&>(choice);
        asnObject.SetDescription(GetTrunkGroupIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTrunkGroupID() const
    {
        return Contains(GetTrunkGroupIDStaticDescription()->TagIdentity());
    }

    const TrunkGroupID& GetChoiceTrunkGroupID() const
    {
        ITS_REQUIRE(ChoiceTrunkGroupID());
        return static_cast<const TrunkGroupID&> (GetChoice());
    }

    void SetChoicePrivateFacilityID(PrivateFacilityID* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetPrivateFacilityIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoicePrivateFacilityID(const PrivateFacilityID& choice)
    {
        its::AsnObject& asnObject = const_cast<PrivateFacilityID&>(choice);
        asnObject.SetDescription(GetPrivateFacilityIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoicePrivateFacilityID() const
    {
        return Contains(GetPrivateFacilityIDStaticDescription()->TagIdentity());
    }

    const PrivateFacilityID& GetChoicePrivateFacilityID() const
    {
        ITS_REQUIRE(ChoicePrivateFacilityID());
        return static_cast<const PrivateFacilityID&> (GetChoice());
    }

    void SetChoiceHuntGroup(HuntGroup* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetHuntGroupStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceHuntGroup(const HuntGroup& choice)
    {
        its::AsnObject& asnObject = const_cast<HuntGroup&>(choice);
        asnObject.SetDescription(GetHuntGroupStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceHuntGroup() const
    {
        return Contains(GetHuntGroupStaticDescription()->TagIdentity());
    }

    const HuntGroup& GetChoiceHuntGroup() const
    {
        ITS_REQUIRE(ChoiceHuntGroup());
        return static_cast<const HuntGroup&> (GetChoice());
    }

    void SetChoiceRouteIndex(RouteIndex* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRouteIndexStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRouteIndex(const RouteIndex& choice)
    {
        its::AsnObject& asnObject = const_cast<RouteIndex&>(choice);
        asnObject.SetDescription(GetRouteIndexStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRouteIndex() const
    {
        return Contains(GetRouteIndexStaticDescription()->TagIdentity());
    }

    const RouteIndex& GetChoiceRouteIndex() const
    {
        ITS_REQUIRE(ChoiceRouteIndex());
        return static_cast<const RouteIndex&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_FACILITY_GROUP_H_)

