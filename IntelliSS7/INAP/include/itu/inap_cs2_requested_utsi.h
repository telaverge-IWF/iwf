//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_REQUESTED_UTSI_H_)
#define _INAP_CS2_REQUESTED_UTSI_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>

#include <inap_cs2_usi_service_indicator.h>
#include <inap_cs2_usi_monitor_mode.h>
#include <inap_cs2_leg_id.h>



namespace inap_cs2 {



class RequestedUTSI : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::USIServiceIndicator USIServiceIndicator;


        typedef inap_cs2::USIMonitorMode USIMonitorMode;


        typedef inap_cs2::LegID LegID;


////////// End Nested Class(es) //////////

    RequestedUTSI() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    RequestedUTSI(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedUTSI(const RequestedUTSI& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RequestedUTSI(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUSIServiceIndicatorStaticDescription();
    static its::AsnDescObject* GetUSImonitorModeStaticDescription();
    static its::AsnDescObject* GetLegIDStaticDescription();

public:

    virtual ~RequestedUTSI()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedUTSI(*this);
    }

    virtual std::string GetName() const
    { return "RequestedUTSI"; }

    void SetUSIServiceIndicator(USIServiceIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUSIServiceIndicatorStaticDescription());
        AddElement(0, element);
    }

    void SetUSIServiceIndicator(const USIServiceIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<USIServiceIndicator&>(element);
        asnObject.SetDescription(GetUSIServiceIndicatorStaticDescription());
        AddElement(0, element);
    }

    const USIServiceIndicator& GetUSIServiceIndicator() const
    {
        return static_cast<const USIServiceIndicator&> (ElementAt(0));
    }

    void SetUSImonitorMode(USIMonitorMode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUSImonitorModeStaticDescription());
        AddElement(1, element);
    }

    void SetUSImonitorMode(const USIMonitorMode& element)
    {
        its::AsnObject& asnObject = const_cast<USIMonitorMode&>(element);
        asnObject.SetDescription(GetUSImonitorModeStaticDescription());
        AddElement(1, element);
    }

    const USIMonitorMode& GetUSImonitorMode() const
    {
        return static_cast<const USIMonitorMode&> (ElementAt(1));
    }

    void SetLegID(LegID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLegIDStaticDescription());
        AddElement(2, element);
    }

    void SetLegID(const LegID& element)
    {
        its::AsnObject& asnObject = const_cast<LegID&>(element);
        asnObject.SetDescription(GetLegIDStaticDescription());
        AddElement(2, element);
    }

    const LegID& GetLegID() const
    {
        return static_cast<const LegID&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_REQUESTED_UTSI_H_)

