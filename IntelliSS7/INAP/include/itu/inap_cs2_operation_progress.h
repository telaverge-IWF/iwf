//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_OPERATION_PROGRESS_H_)
#define _INAP_CS2_OPERATION_PROGRESS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>

#include <inap_cs2_name_resolution_phase.h>



namespace inap_cs2 {



class OperationProgress : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////



    class NextRDNToBeResolved : public its::AsnInteger
    {
    public:

        NextRDNToBeResolved() : its::AsnInteger(false)
        {
            Initialize();
        }

        NextRDNToBeResolved(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        NextRDNToBeResolved(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        NextRDNToBeResolved(const NextRDNToBeResolved& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        NextRDNToBeResolved(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        NextRDNToBeResolved(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NextRDNToBeResolved()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NextRDNToBeResolved(*this);
        }

        virtual std::string GetName() const
        { return "NextRDNToBeResolved"; }

    };


        typedef inap_cs2::NameResolutionPhase NameResolutionPhase;


////////// End Nested Class(es) //////////

    OperationProgress() : its::AsnSet(2, false)
    {
        Initialize();
    }

    OperationProgress(its::Octets& octets) : its::AsnSet(2, false)
    {
        Initialize();
        Decode(octets);
    }

    OperationProgress(const OperationProgress& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    OperationProgress(its::AsnDescObject* description) : its::AsnSet(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNameResolutionPhaseStaticDescription();
    static its::AsnDescObject* GetNextRDNToBeResolvedStaticDescription();

public:

    virtual ~OperationProgress()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new OperationProgress(*this);
    }

    virtual std::string GetName() const
    { return "OperationProgress"; }

    void SetNameResolutionPhase(NameResolutionPhase* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNameResolutionPhaseStaticDescription());
        AddElement(0, element);
    }

    void SetNameResolutionPhase(const NameResolutionPhase& element)
    {
        its::AsnObject& asnObject = const_cast<NameResolutionPhase&>(element);
        asnObject.SetDescription(GetNameResolutionPhaseStaticDescription());
        AddElement(0, element);
}

    const NameResolutionPhase& GetNameResolutionPhase() const
    {
        return static_cast<const NameResolutionPhase&> (ElementAt(0));
    }

    void SetNextRDNToBeResolved(NextRDNToBeResolved* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNextRDNToBeResolvedStaticDescription());
        AddElement(1, element);
    }

    void SetNextRDNToBeResolved(const NextRDNToBeResolved& element)
    {
        its::AsnObject& asnObject = const_cast<NextRDNToBeResolved&>(element);
        asnObject.SetDescription(GetNextRDNToBeResolvedStaticDescription());
        AddElement(1, element);
}

    bool OptionNextRDNToBeResolved() const
    {
        return Contains(1);
    }

    const NextRDNToBeResolved& GetNextRDNToBeResolved() const
    {
        ITS_REQUIRE(OptionNextRDNToBeResolved());
        return static_cast<const NextRDNToBeResolved&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_OPERATION_PROGRESS_H_)

