//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_TERM_ATTEMPT_AUTHORIZED_ARG_H_)
#define _INAP_CS2_TERM_ATTEMPT_AUTHORIZED_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnOctetString.h>

#include <inap_cs2_dp_specific_common_parameters.h>
#include <inap_cs2_called_party_business_group_id.h>
#include <inap_cs2_called_party_subaddress.h>
#include <inap_cs2_calling_party_business_group_id.h>
#include <inap_cs2_original_called_party_id.h>
#include <inap_cs2_redirecting_party_id.h>
#include <inap_cs2_redirection_information.h>
#include <inap_cs2_route_list.h>
#include <inap_cs2_travelling_class_mark.h>
#include <inap_cs2_extension_field.h>
#include <inap_cs2_calling_party_subaddress.h>



namespace inap_cs2 {



class TermAttemptAuthorizedArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef inap_cs2::DpSpecificCommonParameters DpSpecificCommonParameters;


        typedef inap_cs2::CalledPartyBusinessGroupID CalledPartyBusinessGroupID;


        typedef inap_cs2::CalledPartySubaddress CalledPartySubaddress;


        typedef inap_cs2::CallingPartyBusinessGroupID CallingPartyBusinessGroupID;


        typedef inap_cs2::OriginalCalledPartyID OriginalCalledPartyID;


        typedef inap_cs2::RedirectingPartyID RedirectingPartyID;


        typedef inap_cs2::RedirectionInformation RedirectionInformation;


        typedef inap_cs2::RouteList RouteList;


        typedef inap_cs2::TravellingClassMark TravellingClassMark;


        typedef inap_cs2::CallingPartySubaddress CallingPartySubaddress;


////////// End Nested Class(es) //////////

    TermAttemptAuthorizedArg() : its::AsnSequence(11, false)
    {
        Initialize();
    }

    TermAttemptAuthorizedArg(its::Octets& octets) : its::AsnSequence(11, false)
    {
        Initialize();
        Decode(octets);
    }

    TermAttemptAuthorizedArg(const TermAttemptAuthorizedArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    TermAttemptAuthorizedArg(its::AsnDescObject* description) : its::AsnSequence(11, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDpSpecificCommonParametersStaticDescription();
    static its::AsnDescObject* GetCalledPartyBusinessGroupIDStaticDescription();
    static its::AsnDescObject* GetCalledPartySubaddressStaticDescription();
    static its::AsnDescObject* GetCallingPartyBusinessGroupIDStaticDescription();
    static its::AsnDescObject* GetOriginalCalledPartyIDStaticDescription();
    static its::AsnDescObject* GetRedirectingPartyIDStaticDescription();
    static its::AsnDescObject* GetRedirectionInformationStaticDescription();
    static its::AsnDescObject* GetRouteListStaticDescription();
    static its::AsnDescObject* GetTravellingClassMarkStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetCallingPartySubaddressStaticDescription();

public:

    virtual ~TermAttemptAuthorizedArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TermAttemptAuthorizedArg(*this);
    }

    virtual std::string GetName() const
    { return "TermAttemptAuthorizedArg"; }

    void SetDpSpecificCommonParameters(DpSpecificCommonParameters* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDpSpecificCommonParametersStaticDescription());
        AddElement(0, element);
    }

    void SetDpSpecificCommonParameters(const DpSpecificCommonParameters& element)
    {
        its::AsnObject& asnObject = const_cast<DpSpecificCommonParameters&>(element);
        asnObject.SetDescription(GetDpSpecificCommonParametersStaticDescription());
        AddElement(0, element);
    }

    const DpSpecificCommonParameters& GetDpSpecificCommonParameters() const
    {
        return static_cast<const DpSpecificCommonParameters&> (ElementAt(0));
    }

    void SetCalledPartyBusinessGroupID(CalledPartyBusinessGroupID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyBusinessGroupIDStaticDescription());
        AddElement(1, element);
    }

    void SetCalledPartyBusinessGroupID(const CalledPartyBusinessGroupID& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyBusinessGroupID&>(element);
        asnObject.SetDescription(GetCalledPartyBusinessGroupIDStaticDescription());
        AddElement(1, element);
    }

    bool OptionCalledPartyBusinessGroupID() const
    {
        return Contains(1);
    }

    const CalledPartyBusinessGroupID& GetCalledPartyBusinessGroupID() const
    {
        ITS_REQUIRE(OptionCalledPartyBusinessGroupID());
        return static_cast<const CalledPartyBusinessGroupID&> (ElementAt(1));
    }

    void SetCalledPartySubaddress(CalledPartySubaddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartySubaddressStaticDescription());
        AddElement(2, element);
    }

    void SetCalledPartySubaddress(const CalledPartySubaddress& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartySubaddress&>(element);
        asnObject.SetDescription(GetCalledPartySubaddressStaticDescription());
        AddElement(2, element);
    }

    bool OptionCalledPartySubaddress() const
    {
        return Contains(2);
    }

    const CalledPartySubaddress& GetCalledPartySubaddress() const
    {
        ITS_REQUIRE(OptionCalledPartySubaddress());
        return static_cast<const CalledPartySubaddress&> (ElementAt(2));
    }

    void SetCallingPartyBusinessGroupID(CallingPartyBusinessGroupID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyBusinessGroupIDStaticDescription());
        AddElement(3, element);
    }

    void SetCallingPartyBusinessGroupID(const CallingPartyBusinessGroupID& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyBusinessGroupID&>(element);
        asnObject.SetDescription(GetCallingPartyBusinessGroupIDStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallingPartyBusinessGroupID() const
    {
        return Contains(3);
    }

    const CallingPartyBusinessGroupID& GetCallingPartyBusinessGroupID() const
    {
        ITS_REQUIRE(OptionCallingPartyBusinessGroupID());
        return static_cast<const CallingPartyBusinessGroupID&> (ElementAt(3));
    }

    void SetOriginalCalledPartyID(OriginalCalledPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(4, element);
    }

    void SetOriginalCalledPartyID(const OriginalCalledPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<OriginalCalledPartyID&>(element);
        asnObject.SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(4, element);
    }

    bool OptionOriginalCalledPartyID() const
    {
        return Contains(4);
    }

    const OriginalCalledPartyID& GetOriginalCalledPartyID() const
    {
        ITS_REQUIRE(OptionOriginalCalledPartyID());
        return static_cast<const OriginalCalledPartyID&> (ElementAt(4));
    }

    void SetRedirectingPartyID(RedirectingPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(5, element);
    }

    void SetRedirectingPartyID(const RedirectingPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectingPartyID&>(element);
        asnObject.SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(5, element);
    }

    bool OptionRedirectingPartyID() const
    {
        return Contains(5);
    }

    const RedirectingPartyID& GetRedirectingPartyID() const
    {
        ITS_REQUIRE(OptionRedirectingPartyID());
        return static_cast<const RedirectingPartyID&> (ElementAt(5));
    }

    void SetRedirectionInformation(RedirectionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(6, element);
    }

    void SetRedirectionInformation(const RedirectionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectionInformation&>(element);
        asnObject.SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(6, element);
    }

    bool OptionRedirectionInformation() const
    {
        return Contains(6);
    }

    const RedirectionInformation& GetRedirectionInformation() const
    {
        ITS_REQUIRE(OptionRedirectionInformation());
        return static_cast<const RedirectionInformation&> (ElementAt(6));
    }

    void SetRouteList(RouteList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRouteListStaticDescription());
        AddElement(7, element);
    }

    void SetRouteList(const RouteList& element)
    {
        its::AsnObject& asnObject = const_cast<RouteList&>(element);
        asnObject.SetDescription(GetRouteListStaticDescription());
        AddElement(7, element);
    }

    bool OptionRouteList() const
    {
        return Contains(7);
    }

    const RouteList& GetRouteList() const
    {
        ITS_REQUIRE(OptionRouteList());
        return static_cast<const RouteList&> (ElementAt(7));
    }

    void SetTravellingClassMark(TravellingClassMark* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTravellingClassMarkStaticDescription());
        AddElement(8, element);
    }

    void SetTravellingClassMark(const TravellingClassMark& element)
    {
        its::AsnObject& asnObject = const_cast<TravellingClassMark&>(element);
        asnObject.SetDescription(GetTravellingClassMarkStaticDescription());
        AddElement(8, element);
    }

    bool OptionTravellingClassMark() const
    {
        return Contains(8);
    }

    const TravellingClassMark& GetTravellingClassMark() const
    {
        ITS_REQUIRE(OptionTravellingClassMark());
        return static_cast<const TravellingClassMark&> (ElementAt(8));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(9, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(9, element);
    }

    bool OptionExtensions() const
    {
        return Contains(9);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(9));
    }

    void SetCallingPartySubaddress(CallingPartySubaddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartySubaddressStaticDescription());
        AddElement(10, element);
    }

    void SetCallingPartySubaddress(const CallingPartySubaddress& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartySubaddress&>(element);
        asnObject.SetDescription(GetCallingPartySubaddressStaticDescription());
        AddElement(10, element);
    }

    bool OptionCallingPartySubaddress() const
    {
        return Contains(10);
    }

    const CallingPartySubaddress& GetCallingPartySubaddress() const
    {
        ITS_REQUIRE(OptionCallingPartySubaddress());
        return static_cast<const CallingPartySubaddress&> (ElementAt(10));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_TERM_ATTEMPT_AUTHORIZED_ARG_H_)

