//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_BEARER_CAPABILITIES_H_)
#define _INAP_CS2_BEARER_CAPABILITIES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace inap_cs2 {



class BearerCapabilities : public its::AsnBitString
{
public:

    BearerCapabilities() : its::AsnBitString(false)
    {
        Initialize();
    }

    BearerCapabilities(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    BearerCapabilities(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    BearerCapabilities(const BearerCapabilities& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    BearerCapabilities(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    BearerCapabilities(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~BearerCapabilities()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new BearerCapabilities(*this);
    }

    virtual std::string GetName() const
    { return "BearerCapabilities"; }

    void SetVideo()
    { Set(10); }

    void ResetVideo()
    { Reset(10); }

    bool IsVideoSet() const
    { return IsSet(10); }

    bool IsVideoDefined() const
    { return 10 < GetSize(); }

    void SetBc7khzAudio()
    { Set(9); }

    void ResetBc7khzAudio()
    { Reset(9); }

    bool IsBc7khzAudioSet() const
    { return IsSet(9); }

    bool IsBc7khzAudioDefined() const
    { return 9 < GetSize(); }

    void SetBc3_1khzAudio()
    { Set(8); }

    void ResetBc3_1khzAudio()
    { Reset(8); }

    bool IsBc3_1khzAudioSet() const
    { return IsSet(8); }

    bool IsBc3_1khzAudioDefined() const
    { return 8 < GetSize(); }

    void SetRestrictedDigitalInfo()
    { Set(7); }

    void ResetRestrictedDigitalInfo()
    { Reset(7); }

    bool IsRestrictedDigitalInfoSet() const
    { return IsSet(7); }

    bool IsRestrictedDigitalInfoDefined() const
    { return 7 < GetSize(); }

    void SetMultirate()
    { Set(6); }

    void ResetMultirate()
    { Reset(6); }

    bool IsMultirateSet() const
    { return IsSet(6); }

    bool IsMultirateDefined() const
    { return 6 < GetSize(); }

    void SetBc1920kbits()
    { Set(5); }

    void ResetBc1920kbits()
    { Reset(5); }

    bool IsBc1920kbitsSet() const
    { return IsSet(5); }

    bool IsBc1920kbitsDefined() const
    { return 5 < GetSize(); }

    void SetBc1536kbits()
    { Set(4); }

    void ResetBc1536kbits()
    { Reset(4); }

    bool IsBc1536kbitsSet() const
    { return IsSet(4); }

    bool IsBc1536kbitsDefined() const
    { return 4 < GetSize(); }

    void SetBc384kbits()
    { Set(3); }

    void ResetBc384kbits()
    { Reset(3); }

    bool IsBc384kbitsSet() const
    { return IsSet(3); }

    bool IsBc384kbitsDefined() const
    { return 3 < GetSize(); }

    void SetBc2x64kbits()
    { Set(2); }

    void ResetBc2x64kbits()
    { Reset(2); }

    bool IsBc2x64kbitsSet() const
    { return IsSet(2); }

    bool IsBc2x64kbitsDefined() const
    { return 2 < GetSize(); }

    void SetBc64kbits()
    { Set(1); }

    void ResetBc64kbits()
    { Reset(1); }

    bool IsBc64kbitsSet() const
    { return IsSet(1); }

    bool IsBc64kbitsDefined() const
    { return 1 < GetSize(); }

    void SetSpeech()
    { Set(0); }

    void ResetSpeech()
    { Reset(0); }

    bool IsSpeechSet() const
    { return IsSet(0); }

    bool IsSpeechDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_INAP_CS2_BEARER_CAPABILITIES_H_)

