//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_GAP_CRITERIA_H_)
#define _INAP_CS2_GAP_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <inap_cs2_digits.h>
#include <inap_cs2_gap_on_service.h>
#include <inap_cs2_service_key.h>
#include <inap_cs2_location_number.h>



namespace inap_cs2 {



class GapCriteria : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class GapAllInTraffic : public its::AsnNull
    {
    public:

        GapAllInTraffic() : its::AsnNull(false)
        {
            Initialize();
        }

        GapAllInTraffic(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        GapAllInTraffic(const GapAllInTraffic& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        GapAllInTraffic(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~GapAllInTraffic()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new GapAllInTraffic(*this);
        }

        virtual std::string GetName() const
        { return "GapAllInTraffic"; }

    };



    class CalledAddressAndService : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Digits Digits;


            typedef inap_cs2::ServiceKey ServiceKey;


    ////////// End Nested Class(es) //////////

        CalledAddressAndService() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        CalledAddressAndService(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        CalledAddressAndService(const CalledAddressAndService& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CalledAddressAndService(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCalledAddressValueStaticDescription();
        static its::AsnDescObject* GetServiceKeyStaticDescription();

    public:

        virtual ~CalledAddressAndService()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CalledAddressAndService(*this);
        }

        virtual std::string GetName() const
        { return "CalledAddressAndService"; }

        void SetCalledAddressValue(Digits* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCalledAddressValueStaticDescription());
            AddElement(0, element);
        }

        void SetCalledAddressValue(const Digits& element)
        {
            its::AsnObject& asnObject = const_cast<Digits&>(element);
            asnObject.SetDescription(GetCalledAddressValueStaticDescription());
            AddElement(0, element);
        }

        const Digits& GetCalledAddressValue() const
        {
            return static_cast<const Digits&> (ElementAt(0));
        }

        void SetServiceKey(ServiceKey* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        void SetServiceKey(const ServiceKey& element)
        {
            its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
            asnObject.SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        const ServiceKey& GetServiceKey() const
        {
            return static_cast<const ServiceKey&> (ElementAt(1));
        }

    };



    class CallingAddressAndService : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Digits Digits;


            typedef inap_cs2::ServiceKey ServiceKey;


            typedef inap_cs2::LocationNumber LocationNumber;


    ////////// End Nested Class(es) //////////

        CallingAddressAndService() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        CallingAddressAndService(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        CallingAddressAndService(const CallingAddressAndService& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CallingAddressAndService(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCallingAddressValueStaticDescription();
        static its::AsnDescObject* GetServiceKeyStaticDescription();
        static its::AsnDescObject* GetLocationNumberStaticDescription();

    public:

        virtual ~CallingAddressAndService()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallingAddressAndService(*this);
        }

        virtual std::string GetName() const
        { return "CallingAddressAndService"; }

        void SetCallingAddressValue(Digits* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallingAddressValueStaticDescription());
            AddElement(0, element);
        }

        void SetCallingAddressValue(const Digits& element)
        {
            its::AsnObject& asnObject = const_cast<Digits&>(element);
            asnObject.SetDescription(GetCallingAddressValueStaticDescription());
            AddElement(0, element);
        }

        const Digits& GetCallingAddressValue() const
        {
            return static_cast<const Digits&> (ElementAt(0));
        }

        void SetServiceKey(ServiceKey* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        void SetServiceKey(const ServiceKey& element)
        {
            its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
            asnObject.SetDescription(GetServiceKeyStaticDescription());
            AddElement(1, element);
        }

        const ServiceKey& GetServiceKey() const
        {
            return static_cast<const ServiceKey&> (ElementAt(1));
        }

        void SetLocationNumber(LocationNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
            AddElement(2, element);
        }

        void SetLocationNumber(const LocationNumber& element)
        {
            its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
            asnObject.SetDescription(GetLocationNumberStaticDescription());
            AddElement(2, element);
        }

        bool OptionLocationNumber() const
        {
            return Contains(2);
        }

        const LocationNumber& GetLocationNumber() const
        {
            ITS_REQUIRE(OptionLocationNumber());
            return static_cast<const LocationNumber&> (ElementAt(2));
        }

    };


        typedef inap_cs2::Digits Digits;


        typedef inap_cs2::GapOnService GapOnService;


////////// End Nested Class(es) //////////

    GapCriteria() : its::AsnChoice(false)
    {
        Initialize();
    }

    GapCriteria(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    GapCriteria(const GapCriteria& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    GapCriteria(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    GapCriteria(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCalledAddressValueStaticDescription();
    static its::AsnDescObject* GetGapOnServiceStaticDescription();
    static its::AsnDescObject* GetGapAllInTrafficStaticDescription();
    static its::AsnDescObject* GetCalledAddressAndServiceStaticDescription();
    static its::AsnDescObject* GetCallingAddressAndServiceStaticDescription();

public:

    virtual ~GapCriteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GapCriteria(*this);
    }

    virtual std::string GetName() const
    { return "GapCriteria"; }

    void SetChoiceCalledAddressValue(Digits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCalledAddressValueStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCalledAddressValue(const Digits& choice)
    {
        its::AsnObject& asnObject = const_cast<Digits&>(choice);
        asnObject.SetDescription(GetCalledAddressValueStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCalledAddressValue() const
    {
        return Contains(GetCalledAddressValueStaticDescription()->TagIdentity());
    }

    const Digits& GetChoiceCalledAddressValue() const
    {
        ITS_REQUIRE(ChoiceCalledAddressValue());
        return static_cast<const Digits&> (GetChoice());
    }

    void SetChoiceGapOnService(GapOnService* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGapOnServiceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGapOnService(const GapOnService& choice)
    {
        its::AsnObject& asnObject = const_cast<GapOnService&>(choice);
        asnObject.SetDescription(GetGapOnServiceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGapOnService() const
    {
        return Contains(GetGapOnServiceStaticDescription()->TagIdentity());
    }

    const GapOnService& GetChoiceGapOnService() const
    {
        ITS_REQUIRE(ChoiceGapOnService());
        return static_cast<const GapOnService&> (GetChoice());
    }

    void SetChoiceGapAllInTraffic(GapAllInTraffic* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGapAllInTrafficStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGapAllInTraffic(const GapAllInTraffic& choice)
    {
        its::AsnObject& asnObject = const_cast<GapAllInTraffic&>(choice);
        asnObject.SetDescription(GetGapAllInTrafficStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGapAllInTraffic() const
    {
        return Contains(GetGapAllInTrafficStaticDescription()->TagIdentity());
    }

    const GapAllInTraffic& GetChoiceGapAllInTraffic() const
    {
        ITS_REQUIRE(ChoiceGapAllInTraffic());
        return static_cast<const GapAllInTraffic&> (GetChoice());
    }

    void SetChoiceCalledAddressAndService(CalledAddressAndService* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCalledAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCalledAddressAndService(const CalledAddressAndService& choice)
    {
        its::AsnObject& asnObject = const_cast<CalledAddressAndService&>(choice);
        asnObject.SetDescription(GetCalledAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCalledAddressAndService() const
    {
        return Contains(GetCalledAddressAndServiceStaticDescription()->TagIdentity());
    }

    const CalledAddressAndService& GetChoiceCalledAddressAndService() const
    {
        ITS_REQUIRE(ChoiceCalledAddressAndService());
        return static_cast<const CalledAddressAndService&> (GetChoice());
    }

    void SetChoiceCallingAddressAndService(CallingAddressAndService* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallingAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallingAddressAndService(const CallingAddressAndService& choice)
    {
        its::AsnObject& asnObject = const_cast<CallingAddressAndService&>(choice);
        asnObject.SetDescription(GetCallingAddressAndServiceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallingAddressAndService() const
    {
        return Contains(GetCallingAddressAndServiceStaticDescription()->TagIdentity());
    }

    const CallingAddressAndService& GetChoiceCallingAddressAndService() const
    {
        ITS_REQUIRE(ChoiceCallingAddressAndService());
        return static_cast<const CallingAddressAndService&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_GAP_CRITERIA_H_)

