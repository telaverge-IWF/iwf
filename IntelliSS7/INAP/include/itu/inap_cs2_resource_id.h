//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_RESOURCE_ID_H_)
#define _INAP_CS2_RESOURCE_ID_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <inap_cs2_digits.h>
#include <inap_cs2_facility_group.h>



namespace inap_cs2 {



class ResourceID : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class FacilityGroupMemberID : public its::AsnInteger
    {
    public:

        FacilityGroupMemberID() : its::AsnInteger(false)
        {
            Initialize();
        }

        FacilityGroupMemberID(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        FacilityGroupMemberID(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        FacilityGroupMemberID(const FacilityGroupMemberID& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        FacilityGroupMemberID(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        FacilityGroupMemberID(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~FacilityGroupMemberID()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new FacilityGroupMemberID(*this);
        }

        virtual std::string GetName() const
        { return "FacilityGroupMemberID"; }

    };



    class TrunkGroupID : public its::AsnInteger
    {
    public:

        TrunkGroupID() : its::AsnInteger(false)
        {
            Initialize();
        }

        TrunkGroupID(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        TrunkGroupID(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        TrunkGroupID(const TrunkGroupID& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        TrunkGroupID(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        TrunkGroupID(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TrunkGroupID()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TrunkGroupID(*this);
        }

        virtual std::string GetName() const
        { return "TrunkGroupID"; }

    };


        typedef inap_cs2::Digits Digits;


        typedef inap_cs2::FacilityGroup FacilityGroup;


////////// End Nested Class(es) //////////

    ResourceID() : its::AsnChoice(false)
    {
        Initialize();
    }

    ResourceID(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ResourceID(const ResourceID& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ResourceID(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ResourceID(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLineIDStaticDescription();
    static its::AsnDescObject* GetFacilityGroupIDStaticDescription();
    static its::AsnDescObject* GetFacilityGroupMemberIDStaticDescription();
    static its::AsnDescObject* GetTrunkGroupIDStaticDescription();

public:

    virtual ~ResourceID()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ResourceID(*this);
    }

    virtual std::string GetName() const
    { return "ResourceID"; }

    void SetChoiceLineID(Digits* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLineIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLineID(const Digits& choice)
    {
        its::AsnObject& asnObject = const_cast<Digits&>(choice);
        asnObject.SetDescription(GetLineIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLineID() const
    {
        return Contains(GetLineIDStaticDescription()->TagIdentity());
    }

    const Digits& GetChoiceLineID() const
    {
        ITS_REQUIRE(ChoiceLineID());
        return static_cast<const Digits&> (GetChoice());
    }

    void SetChoiceFacilityGroupID(FacilityGroup* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetFacilityGroupIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceFacilityGroupID(const FacilityGroup& choice)
    {
        its::AsnObject& asnObject = const_cast<FacilityGroup&>(choice);
        asnObject.SetDescription(GetFacilityGroupIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceFacilityGroupID() const
    {
        return Contains(GetFacilityGroupIDStaticDescription()->TagIdentity());
    }

    const FacilityGroup& GetChoiceFacilityGroupID() const
    {
        ITS_REQUIRE(ChoiceFacilityGroupID());
        return static_cast<const FacilityGroup&> (GetChoice());
    }

    void SetChoiceFacilityGroupMemberID(FacilityGroupMemberID* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetFacilityGroupMemberIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceFacilityGroupMemberID(const FacilityGroupMemberID& choice)
    {
        its::AsnObject& asnObject = const_cast<FacilityGroupMemberID&>(choice);
        asnObject.SetDescription(GetFacilityGroupMemberIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceFacilityGroupMemberID() const
    {
        return Contains(GetFacilityGroupMemberIDStaticDescription()->TagIdentity());
    }

    const FacilityGroupMemberID& GetChoiceFacilityGroupMemberID() const
    {
        ITS_REQUIRE(ChoiceFacilityGroupMemberID());
        return static_cast<const FacilityGroupMemberID&> (GetChoice());
    }

    void SetChoiceTrunkGroupID(TrunkGroupID* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTrunkGroupIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTrunkGroupID(const TrunkGroupID& choice)
    {
        its::AsnObject& asnObject = const_cast<TrunkGroupID&>(choice);
        asnObject.SetDescription(GetTrunkGroupIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTrunkGroupID() const
    {
        return Contains(GetTrunkGroupIDStaticDescription()->TagIdentity());
    }

    const TrunkGroupID& GetChoiceTrunkGroupID() const
    {
        ITS_REQUIRE(ChoiceTrunkGroupID());
        return static_cast<const TrunkGroupID&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_RESOURCE_ID_H_)

