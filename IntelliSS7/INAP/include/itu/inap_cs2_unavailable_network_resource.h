//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_UNAVAILABLE_NETWORK_RESOURCE_H_)
#define _INAP_CS2_UNAVAILABLE_NETWORK_RESOURCE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace inap_cs2 {



class UnavailableNetworkResource : public its::AsnEnumerated
{
public:

    UnavailableNetworkResource() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    UnavailableNetworkResource(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    UnavailableNetworkResource(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    UnavailableNetworkResource(const UnavailableNetworkResource& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    UnavailableNetworkResource(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    UnavailableNetworkResource(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~UnavailableNetworkResource()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UnavailableNetworkResource(*this);
    }

    virtual std::string GetName() const
    { return "UnavailableNetworkResource"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        UNAVAILABLE_NETWORK_RESOURCE_UNAVAILABLE_RESOURCES = 0,
        UNAVAILABLE_NETWORK_RESOURCE_COMPONENT_FAILURE = 1,
        UNAVAILABLE_NETWORK_RESOURCE_BASIC_CALL_PROCESSING_EXCEPTION = 2,
        UNAVAILABLE_NETWORK_RESOURCE_RESOURCE_STATUS_FAILURE = 3,
        UNAVAILABLE_NETWORK_RESOURCE_END_USER_FAILURE = 4

    };

    void SetUnavailableResources()
    { _value = 0; }

    bool IsUnavailableResources() const
    { return _value == 0; }

    void SetComponentFailure()
    { _value = 1; }

    bool IsComponentFailure() const
    { return _value == 1; }

    void SetBasicCallProcessingException()
    { _value = 2; }

    bool IsBasicCallProcessingException() const
    { return _value == 2; }

    void SetResourceStatusFailure()
    { _value = 3; }

    bool IsResourceStatusFailure() const
    { return _value == 3; }

    void SetEndUserFailure()
    { _value = 4; }

    bool IsEndUserFailure() const
    { return _value == 4; }

};



} // namespace.

#endif    // !defined(_INAP_CS2_UNAVAILABLE_NETWORK_RESOURCE_H_)

