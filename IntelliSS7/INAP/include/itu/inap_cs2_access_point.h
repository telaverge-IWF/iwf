//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ACCESS_POINT_H_)
#define _INAP_CS2_ACCESS_POINT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSet.h>
#include <AsnChoice.h>
#include <AsnSequence.h>

#include <inap_cs2_name.h>
#include <inap_cs2_presentation_address.h>



namespace inap_cs2 {



class AccessPoint : public its::AsnSet
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Name Name;


        typedef inap_cs2::PresentationAddress PresentationAddress;


////////// End Nested Class(es) //////////

    AccessPoint() : its::AsnSet(2, false)
    {
        Initialize();
    }

    AccessPoint(its::Octets& octets) : its::AsnSet(2, false)
    {
        Initialize();
        Decode(octets);
    }

    AccessPoint(const AccessPoint& rhs) : its::AsnSet(rhs)
    {
        // Nothing to do.
    }

    AccessPoint(its::AsnDescObject* description) : its::AsnSet(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAe_titleStaticDescription();
    static its::AsnDescObject* GetAddressStaticDescription();

public:

    virtual ~AccessPoint()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AccessPoint(*this);
    }

    virtual std::string GetName() const
    { return "AccessPoint"; }

    void SetAe_title(Name* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAe_titleStaticDescription());
        AddElement(0, element);
    }

    void SetAe_title(const Name& element)
    {
        its::AsnObject& asnObject = const_cast<Name&>(element);
        asnObject.SetDescription(GetAe_titleStaticDescription());
        AddElement(0, element);
}

    const Name& GetAe_title() const
    {
        return static_cast<const Name&> (ElementAt(0));
    }

    void SetAddress(PresentationAddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAddressStaticDescription());
        AddElement(1, element);
    }

    void SetAddress(const PresentationAddress& element)
    {
        its::AsnObject& asnObject = const_cast<PresentationAddress&>(element);
        asnObject.SetDescription(GetAddressStaticDescription());
        AddElement(1, element);
}

    const PresentationAddress& GetAddress() const
    {
        return static_cast<const PresentationAddress&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ACCESS_POINT_H_)

