//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ENTITY_RELEASED_ARG_H_)
#define _INAP_CS2_ENTITY_RELEASED_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <inap_cs2_call_segment_id.h>
#include <inap_cs2_reason.h>
#include <inap_cs2_cause.h>
#include <inap_cs2_leg_id.h>



namespace inap_cs2 {



class EntityReleasedArg : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class CSFailure : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::CallSegmentID CallSegmentID;


            typedef inap_cs2::Reason Reason;


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        CSFailure() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        CSFailure(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        CSFailure(const CSFailure& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        CSFailure(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCallSegmentIDStaticDescription();
        static its::AsnDescObject* GetReasonStaticDescription();
        static its::AsnDescObject* GetCauseStaticDescription();

    public:

        virtual ~CSFailure()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CSFailure(*this);
        }

        virtual std::string GetName() const
        { return "CSFailure"; }

        void SetCallSegmentID(CallSegmentID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallSegmentIDStaticDescription());
            AddElement(0, element);
        }

        void SetCallSegmentID(const CallSegmentID& element)
        {
            its::AsnObject& asnObject = const_cast<CallSegmentID&>(element);
            asnObject.SetDescription(GetCallSegmentIDStaticDescription());
            AddElement(0, element);
        }

        const CallSegmentID& GetCallSegmentID() const
        {
            return static_cast<const CallSegmentID&> (ElementAt(0));
        }

        void SetReason(Reason* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReasonStaticDescription());
            AddElement(1, element);
        }

        void SetReason(const Reason& element)
        {
            its::AsnObject& asnObject = const_cast<Reason&>(element);
            asnObject.SetDescription(GetReasonStaticDescription());
            AddElement(1, element);
        }

        bool OptionReason() const
        {
            return Contains(1);
        }

        const Reason& GetReason() const
        {
            ITS_REQUIRE(OptionReason());
            return static_cast<const Reason&> (ElementAt(1));
        }

        void SetCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCauseStaticDescription());
            AddElement(2, element);
        }

        void SetCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetCauseStaticDescription());
            AddElement(2, element);
        }

        bool OptionCause() const
        {
            return Contains(2);
        }

        const Cause& GetCause() const
        {
            ITS_REQUIRE(OptionCause());
            return static_cast<const Cause&> (ElementAt(2));
        }

    };



    class BCSMFailure : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::LegID LegID;


            typedef inap_cs2::Reason Reason;


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        BCSMFailure() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        BCSMFailure(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        BCSMFailure(const BCSMFailure& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        BCSMFailure(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetLegIDStaticDescription();
        static its::AsnDescObject* GetReasonStaticDescription();
        static its::AsnDescObject* GetCauseStaticDescription();

    public:

        virtual ~BCSMFailure()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new BCSMFailure(*this);
        }

        virtual std::string GetName() const
        { return "BCSMFailure"; }

        void SetLegID(LegID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLegIDStaticDescription());
            AddElement(0, element);
        }

        void SetLegID(const LegID& element)
        {
            its::AsnObject& asnObject = const_cast<LegID&>(element);
            asnObject.SetDescription(GetLegIDStaticDescription());
            AddElement(0, element);
        }

        const LegID& GetLegID() const
        {
            return static_cast<const LegID&> (ElementAt(0));
        }

        void SetReason(Reason* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReasonStaticDescription());
            AddElement(1, element);
        }

        void SetReason(const Reason& element)
        {
            its::AsnObject& asnObject = const_cast<Reason&>(element);
            asnObject.SetDescription(GetReasonStaticDescription());
            AddElement(1, element);
        }

        bool OptionReason() const
        {
            return Contains(1);
        }

        const Reason& GetReason() const
        {
            ITS_REQUIRE(OptionReason());
            return static_cast<const Reason&> (ElementAt(1));
        }

        void SetCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCauseStaticDescription());
            AddElement(2, element);
        }

        void SetCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetCauseStaticDescription());
            AddElement(2, element);
        }

        bool OptionCause() const
        {
            return Contains(2);
        }

        const Cause& GetCause() const
        {
            ITS_REQUIRE(OptionCause());
            return static_cast<const Cause&> (ElementAt(2));
        }

    };


////////// End Nested Class(es) //////////

    EntityReleasedArg() : its::AsnChoice(false)
    {
        Initialize();
    }

    EntityReleasedArg(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EntityReleasedArg(const EntityReleasedArg& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EntityReleasedArg(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EntityReleasedArg(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCSFailureStaticDescription();
    static its::AsnDescObject* GetBCSMFailureStaticDescription();

public:

    virtual ~EntityReleasedArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EntityReleasedArg(*this);
    }

    virtual std::string GetName() const
    { return "EntityReleasedArg"; }

    void SetChoiceCSFailure(CSFailure* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCSFailureStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCSFailure(const CSFailure& choice)
    {
        its::AsnObject& asnObject = const_cast<CSFailure&>(choice);
        asnObject.SetDescription(GetCSFailureStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCSFailure() const
    {
        return Contains(GetCSFailureStaticDescription()->TagIdentity());
    }

    const CSFailure& GetChoiceCSFailure() const
    {
        ITS_REQUIRE(ChoiceCSFailure());
        return static_cast<const CSFailure&> (GetChoice());
    }

    void SetChoiceBCSMFailure(BCSMFailure* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetBCSMFailureStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceBCSMFailure(const BCSMFailure& choice)
    {
        its::AsnObject& asnObject = const_cast<BCSMFailure&>(choice);
        asnObject.SetDescription(GetBCSMFailureStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceBCSMFailure() const
    {
        return Contains(GetBCSMFailureStaticDescription()->TagIdentity());
    }

    const BCSMFailure& GetChoiceBCSMFailure() const
    {
        ITS_REQUIRE(ChoiceBCSMFailure());
        return static_cast<const BCSMFailure&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ENTITY_RELEASED_ARG_H_)

