//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_CERTIFICATE_H_)
#define _INAP_CS2_CERTIFICATE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnChoice.h>

#include <inap_cs2_version.h>
#include <inap_cs2_serial_number.h>
#include <inap_cs2_algorithm_identifier.h>
#include <inap_cs2_name.h>
#include <inap_cs2_validity.h>
#include <inap_cs2_subject_public_key_info.h>



namespace inap_cs2 {



class Certificate : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef inap_cs2::Version Version;


        typedef inap_cs2::SerialNumber SerialNumber;


        typedef inap_cs2::AlgorithmIdentifier AlgorithmIdentifier;


        typedef inap_cs2::Name Name;


        typedef inap_cs2::Validity Validity;


        typedef inap_cs2::SubjectPublicKeyInfo SubjectPublicKeyInfo;


////////// End Nested Class(es) //////////

    Certificate() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    Certificate(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    Certificate(const Certificate& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Certificate(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetVersionStaticDescription();
    static its::AsnDescObject* GetSerialNumberStaticDescription();
    static its::AsnDescObject* GetSignatureStaticDescription();
    static its::AsnDescObject* GetIssuerStaticDescription();
    static its::AsnDescObject* GetValidityStaticDescription();
    static its::AsnDescObject* GetSubjectStaticDescription();
    static its::AsnDescObject* GetSubjectPublicKeyInfoStaticDescription();

public:

    virtual ~Certificate()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Certificate(*this);
    }

    virtual std::string GetName() const
    { return "Certificate"; }

    void SetVersion(Version* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVersionStaticDescription());
        AddElement(0, element);
    }

    void SetVersion(const Version& element)
    {
        its::AsnObject& asnObject = const_cast<Version&>(element);
        asnObject.SetDescription(GetVersionStaticDescription());
        AddElement(0, element);
    }

    bool OptionVersion() const
    {
        return Contains(0);
    }

    const Version& GetVersion() const
    {
        ITS_REQUIRE(OptionVersion());
        return static_cast<const Version&> (ElementAt(0));
    }

    void SetSerialNumber(SerialNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSerialNumberStaticDescription());
        AddElement(1, element);
    }

    void SetSerialNumber(const SerialNumber& element)
    {
        its::AsnObject& asnObject = const_cast<SerialNumber&>(element);
        asnObject.SetDescription(GetSerialNumberStaticDescription());
        AddElement(1, element);
    }

    const SerialNumber& GetSerialNumber() const
    {
        return static_cast<const SerialNumber&> (ElementAt(1));
    }

    void SetSignature(AlgorithmIdentifier* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSignatureStaticDescription());
        AddElement(2, element);
    }

    void SetSignature(const AlgorithmIdentifier& element)
    {
        its::AsnObject& asnObject = const_cast<AlgorithmIdentifier&>(element);
        asnObject.SetDescription(GetSignatureStaticDescription());
        AddElement(2, element);
    }

    const AlgorithmIdentifier& GetSignature() const
    {
        return static_cast<const AlgorithmIdentifier&> (ElementAt(2));
    }

    void SetIssuer(Name* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIssuerStaticDescription());
        AddElement(3, element);
    }

    void SetIssuer(const Name& element)
    {
        its::AsnObject& asnObject = const_cast<Name&>(element);
        asnObject.SetDescription(GetIssuerStaticDescription());
        AddElement(3, element);
    }

    const Name& GetIssuer() const
    {
        return static_cast<const Name&> (ElementAt(3));
    }

    void SetValidity(Validity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetValidityStaticDescription());
        AddElement(4, element);
    }

    void SetValidity(const Validity& element)
    {
        its::AsnObject& asnObject = const_cast<Validity&>(element);
        asnObject.SetDescription(GetValidityStaticDescription());
        AddElement(4, element);
    }

    const Validity& GetValidity() const
    {
        return static_cast<const Validity&> (ElementAt(4));
    }

    void SetSubject(Name* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubjectStaticDescription());
        AddElement(5, element);
    }

    void SetSubject(const Name& element)
    {
        its::AsnObject& asnObject = const_cast<Name&>(element);
        asnObject.SetDescription(GetSubjectStaticDescription());
        AddElement(5, element);
    }

    const Name& GetSubject() const
    {
        return static_cast<const Name&> (ElementAt(5));
    }

    void SetSubjectPublicKeyInfo(SubjectPublicKeyInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubjectPublicKeyInfoStaticDescription());
        AddElement(6, element);
    }

    void SetSubjectPublicKeyInfo(const SubjectPublicKeyInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SubjectPublicKeyInfo&>(element);
        asnObject.SetDescription(GetSubjectPublicKeyInfoStaticDescription());
        AddElement(6, element);
    }

    const SubjectPublicKeyInfo& GetSubjectPublicKeyInfo() const
    {
        return static_cast<const SubjectPublicKeyInfo&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_CERTIFICATE_H_)

