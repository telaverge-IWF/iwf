//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_INFORMATION_TO_RECORD_H_)
#define _INAP_CS2_INFORMATION_TO_RECORD_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnBoolean.h>

#include <inap_cs2_elementary_message_id.h>



namespace inap_cs2 {



class InformationToRecord : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class MessageDeletionTimeOut : public its::AsnInteger
    {
    public:

        MessageDeletionTimeOut() : its::AsnInteger(false)
        {
            Initialize();
        }

        MessageDeletionTimeOut(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MessageDeletionTimeOut(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MessageDeletionTimeOut(const MessageDeletionTimeOut& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MessageDeletionTimeOut(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MessageDeletionTimeOut(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MessageDeletionTimeOut()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MessageDeletionTimeOut(*this);
        }

        virtual std::string GetName() const
        { return "MessageDeletionTimeOut"; }

    };



    class TimeToRecord : public its::AsnInteger
    {
    public:

        TimeToRecord() : its::AsnInteger(false)
        {
            Initialize();
        }

        TimeToRecord(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        TimeToRecord(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        TimeToRecord(const TimeToRecord& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        TimeToRecord(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        TimeToRecord(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TimeToRecord()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TimeToRecord(*this);
        }

        virtual std::string GetName() const
        { return "TimeToRecord"; }

    };



    class ControlDigits : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class EndOfRecordingDigit : public its::AsnOctetString
        {
        public:

            EndOfRecordingDigit() : its::AsnOctetString(false)
            {
                Initialize();
            }

            EndOfRecordingDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            EndOfRecordingDigit(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            EndOfRecordingDigit(const EndOfRecordingDigit& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            EndOfRecordingDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            EndOfRecordingDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~EndOfRecordingDigit()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new EndOfRecordingDigit(*this);
            }

            virtual std::string GetName() const
            { return "EndOfRecordingDigit"; }

        };



        class CancelDigit : public its::AsnOctetString
        {
        public:

            CancelDigit() : its::AsnOctetString(false)
            {
                Initialize();
            }

            CancelDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            CancelDigit(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            CancelDigit(const CancelDigit& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            CancelDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            CancelDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CancelDigit()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CancelDigit(*this);
            }

            virtual std::string GetName() const
            { return "CancelDigit"; }

        };



        class ReplayDigit : public its::AsnOctetString
        {
        public:

            ReplayDigit() : its::AsnOctetString(false)
            {
                Initialize();
            }

            ReplayDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            ReplayDigit(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            ReplayDigit(const ReplayDigit& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            ReplayDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            ReplayDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~ReplayDigit()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new ReplayDigit(*this);
            }

            virtual std::string GetName() const
            { return "ReplayDigit"; }

        };



        class RestartRecordingDigit : public its::AsnOctetString
        {
        public:

            RestartRecordingDigit() : its::AsnOctetString(false)
            {
                Initialize();
            }

            RestartRecordingDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            RestartRecordingDigit(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            RestartRecordingDigit(const RestartRecordingDigit& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            RestartRecordingDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            RestartRecordingDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RestartRecordingDigit()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RestartRecordingDigit(*this);
            }

            virtual std::string GetName() const
            { return "RestartRecordingDigit"; }

        };



        class RestartAllowed : public its::AsnBoolean
        {
        public:

            RestartAllowed(bool value) : its::AsnBoolean(value, false)
            {
                Initialize();
            }

            RestartAllowed(its::Octets& octets) : its::AsnBoolean(false, false)
            {
                Initialize();
                Decode(octets);
            }

            RestartAllowed(const RestartAllowed& rhs) : its::AsnBoolean(rhs)
            {
                // Nothing to do.
            }

            RestartAllowed(its::AsnDescObject* description) : its::AsnBoolean(description)
            {
                // Nothing to do.
            }

            RestartAllowed(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RestartAllowed()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RestartAllowed(*this);
            }

            virtual std::string GetName() const
            { return "RestartAllowed"; }

        };



        class ReplayAllowed : public its::AsnBoolean
        {
        public:

            ReplayAllowed(bool value) : its::AsnBoolean(value, false)
            {
                Initialize();
            }

            ReplayAllowed(its::Octets& octets) : its::AsnBoolean(false, false)
            {
                Initialize();
                Decode(octets);
            }

            ReplayAllowed(const ReplayAllowed& rhs) : its::AsnBoolean(rhs)
            {
                // Nothing to do.
            }

            ReplayAllowed(its::AsnDescObject* description) : its::AsnBoolean(description)
            {
                // Nothing to do.
            }

            ReplayAllowed(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~ReplayAllowed()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new ReplayAllowed(*this);
            }

            virtual std::string GetName() const
            { return "ReplayAllowed"; }

        };


    ////////// End Nested Class(es) //////////

        ControlDigits() : its::AsnSequence(6, false)
        {
            Initialize();
        }

        ControlDigits(its::Octets& octets) : its::AsnSequence(6, false)
        {
            Initialize();
            Decode(octets);
        }

        ControlDigits(const ControlDigits& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ControlDigits(its::AsnDescObject* description) : its::AsnSequence(6, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetEndOfRecordingDigitStaticDescription();
        static its::AsnDescObject* GetCancelDigitStaticDescription();
        static its::AsnDescObject* GetReplayDigitStaticDescription();
        static its::AsnDescObject* GetRestartRecordingDigitStaticDescription();
        static its::AsnDescObject* GetRestartAllowedStaticDescription();
        static its::AsnDescObject* GetReplayAllowedStaticDescription();

    public:

        virtual ~ControlDigits()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ControlDigits(*this);
        }

        virtual std::string GetName() const
        { return "ControlDigits"; }

        void SetEndOfRecordingDigit(EndOfRecordingDigit* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetEndOfRecordingDigitStaticDescription());
            AddElement(0, element);
        }

        void SetEndOfRecordingDigit(const EndOfRecordingDigit& element)
        {
            its::AsnObject& asnObject = const_cast<EndOfRecordingDigit&>(element);
            asnObject.SetDescription(GetEndOfRecordingDigitStaticDescription());
            AddElement(0, element);
        }

        bool OptionEndOfRecordingDigit() const
        {
            return Contains(0);
        }

        const EndOfRecordingDigit& GetEndOfRecordingDigit() const
        {
            ITS_REQUIRE(OptionEndOfRecordingDigit());
            return static_cast<const EndOfRecordingDigit&> (ElementAt(0));
        }

        void SetCancelDigit(CancelDigit* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCancelDigitStaticDescription());
            AddElement(1, element);
        }

        void SetCancelDigit(const CancelDigit& element)
        {
            its::AsnObject& asnObject = const_cast<CancelDigit&>(element);
            asnObject.SetDescription(GetCancelDigitStaticDescription());
            AddElement(1, element);
        }

        bool OptionCancelDigit() const
        {
            return Contains(1);
        }

        const CancelDigit& GetCancelDigit() const
        {
            ITS_REQUIRE(OptionCancelDigit());
            return static_cast<const CancelDigit&> (ElementAt(1));
        }

        void SetReplayDigit(ReplayDigit* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReplayDigitStaticDescription());
            AddElement(2, element);
        }

        void SetReplayDigit(const ReplayDigit& element)
        {
            its::AsnObject& asnObject = const_cast<ReplayDigit&>(element);
            asnObject.SetDescription(GetReplayDigitStaticDescription());
            AddElement(2, element);
        }

        bool OptionReplayDigit() const
        {
            return Contains(2);
        }

        const ReplayDigit& GetReplayDigit() const
        {
            ITS_REQUIRE(OptionReplayDigit());
            return static_cast<const ReplayDigit&> (ElementAt(2));
        }

        void SetRestartRecordingDigit(RestartRecordingDigit* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRestartRecordingDigitStaticDescription());
            AddElement(3, element);
        }

        void SetRestartRecordingDigit(const RestartRecordingDigit& element)
        {
            its::AsnObject& asnObject = const_cast<RestartRecordingDigit&>(element);
            asnObject.SetDescription(GetRestartRecordingDigitStaticDescription());
            AddElement(3, element);
        }

        bool OptionRestartRecordingDigit() const
        {
            return Contains(3);
        }

        const RestartRecordingDigit& GetRestartRecordingDigit() const
        {
            ITS_REQUIRE(OptionRestartRecordingDigit());
            return static_cast<const RestartRecordingDigit&> (ElementAt(3));
        }

        void SetRestartAllowed(RestartAllowed* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRestartAllowedStaticDescription());
            AddElement(4, element);
        }

        void SetRestartAllowed(const RestartAllowed& element)
        {
            its::AsnObject& asnObject = const_cast<RestartAllowed&>(element);
            asnObject.SetDescription(GetRestartAllowedStaticDescription());
            AddElement(4, element);
        }

        const RestartAllowed& GetRestartAllowed() const
        {
            return static_cast<const RestartAllowed&> (ElementAt(4));
        }

        void SetReplayAllowed(ReplayAllowed* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReplayAllowedStaticDescription());
            AddElement(5, element);
        }

        void SetReplayAllowed(const ReplayAllowed& element)
        {
            its::AsnObject& asnObject = const_cast<ReplayAllowed&>(element);
            asnObject.SetDescription(GetReplayAllowedStaticDescription());
            AddElement(5, element);
        }

        const ReplayAllowed& GetReplayAllowed() const
        {
            return static_cast<const ReplayAllowed&> (ElementAt(5));
        }

    };


        typedef inap_cs2::ElementaryMessageID ElementaryMessageID;


////////// End Nested Class(es) //////////

    InformationToRecord() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    InformationToRecord(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    InformationToRecord(const InformationToRecord& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InformationToRecord(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMessageIDStaticDescription();
    static its::AsnDescObject* GetMessageDeletionTimeOutStaticDescription();
    static its::AsnDescObject* GetTimeToRecordStaticDescription();
    static its::AsnDescObject* GetControlDigitsStaticDescription();

public:

    virtual ~InformationToRecord()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InformationToRecord(*this);
    }

    virtual std::string GetName() const
    { return "InformationToRecord"; }

    void SetMessageID(ElementaryMessageID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMessageIDStaticDescription());
        AddElement(0, element);
    }

    void SetMessageID(const ElementaryMessageID& element)
    {
        its::AsnObject& asnObject = const_cast<ElementaryMessageID&>(element);
        asnObject.SetDescription(GetMessageIDStaticDescription());
        AddElement(0, element);
    }

    bool OptionMessageID() const
    {
        return Contains(0);
    }

    const ElementaryMessageID& GetMessageID() const
    {
        ITS_REQUIRE(OptionMessageID());
        return static_cast<const ElementaryMessageID&> (ElementAt(0));
    }

    void SetMessageDeletionTimeOut(MessageDeletionTimeOut* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMessageDeletionTimeOutStaticDescription());
        AddElement(1, element);
    }

    void SetMessageDeletionTimeOut(const MessageDeletionTimeOut& element)
    {
        its::AsnObject& asnObject = const_cast<MessageDeletionTimeOut&>(element);
        asnObject.SetDescription(GetMessageDeletionTimeOutStaticDescription());
        AddElement(1, element);
    }

    bool OptionMessageDeletionTimeOut() const
    {
        return Contains(1);
    }

    const MessageDeletionTimeOut& GetMessageDeletionTimeOut() const
    {
        ITS_REQUIRE(OptionMessageDeletionTimeOut());
        return static_cast<const MessageDeletionTimeOut&> (ElementAt(1));
    }

    void SetTimeToRecord(TimeToRecord* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTimeToRecordStaticDescription());
        AddElement(2, element);
    }

    void SetTimeToRecord(const TimeToRecord& element)
    {
        its::AsnObject& asnObject = const_cast<TimeToRecord&>(element);
        asnObject.SetDescription(GetTimeToRecordStaticDescription());
        AddElement(2, element);
    }

    bool OptionTimeToRecord() const
    {
        return Contains(2);
    }

    const TimeToRecord& GetTimeToRecord() const
    {
        ITS_REQUIRE(OptionTimeToRecord());
        return static_cast<const TimeToRecord&> (ElementAt(2));
    }

    void SetControlDigits(ControlDigits* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetControlDigitsStaticDescription());
        AddElement(3, element);
    }

    void SetControlDigits(const ControlDigits& element)
    {
        its::AsnObject& asnObject = const_cast<ControlDigits&>(element);
        asnObject.SetDescription(GetControlDigitsStaticDescription());
        AddElement(3, element);
    }

    const ControlDigits& GetControlDigits() const
    {
        return static_cast<const ControlDigits&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_INFORMATION_TO_RECORD_H_)

