//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_SERVICE_CONTROL_OPTIONS_H_)
#define _INAP_CS2_SERVICE_CONTROL_OPTIONS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace inap_cs2 {



class ServiceControlOptions : public its::AsnBitString
{
public:

    ServiceControlOptions() : its::AsnBitString(false)
    {
        Initialize();
    }

    ServiceControlOptions(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    ServiceControlOptions(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    ServiceControlOptions(const ServiceControlOptions& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    ServiceControlOptions(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    ServiceControlOptions(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~ServiceControlOptions()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ServiceControlOptions(*this);
    }

    virtual std::string GetName() const
    { return "ServiceControlOptions"; }

    void SetCountFamily()
    { Set(11); }

    void ResetCountFamily()
    { Reset(11); }

    bool IsCountFamilySet() const
    { return IsSet(11); }

    bool IsCountFamilyDefined() const
    { return 11 < GetSize(); }

    void SetNoSubtypeSelection()
    { Set(10); }

    void ResetNoSubtypeSelection()
    { Reset(10); }

    bool IsNoSubtypeSelectionSet() const
    { return IsSet(10); }

    bool IsNoSubtypeSelectionDefined() const
    { return 10 < GetSize(); }

    void SetNoSubtypeMatch()
    { Set(9); }

    void ResetNoSubtypeMatch()
    { Reset(9); }

    bool IsNoSubtypeMatchSet() const
    { return IsSet(9); }

    bool IsNoSubtypeMatchDefined() const
    { return 9 < GetSize(); }

    void SetManageDSAIT()
    { Set(8); }

    void ResetManageDSAIT()
    { Reset(8); }

    bool IsManageDSAITSet() const
    { return IsSet(8); }

    bool IsManageDSAITDefined() const
    { return 8 < GetSize(); }

    void SetPartialNameResolution()
    { Set(7); }

    void ResetPartialNameResolution()
    { Reset(7); }

    bool IsPartialNameResolutionSet() const
    { return IsSet(7); }

    bool IsPartialNameResolutionDefined() const
    { return 7 < GetSize(); }

    void SetCopyShallDo()
    { Set(6); }

    void ResetCopyShallDo()
    { Reset(6); }

    bool IsCopyShallDoSet() const
    { return IsSet(6); }

    bool IsCopyShallDoDefined() const
    { return 6 < GetSize(); }

    void SetSubentries()
    { Set(5); }

    void ResetSubentries()
    { Reset(5); }

    bool IsSubentriesSet() const
    { return IsSet(5); }

    bool IsSubentriesDefined() const
    { return 5 < GetSize(); }

    void SetDontDereferenceAliases()
    { Set(4); }

    void ResetDontDereferenceAliases()
    { Reset(4); }

    bool IsDontDereferenceAliasesSet() const
    { return IsSet(4); }

    bool IsDontDereferenceAliasesDefined() const
    { return 4 < GetSize(); }

    void SetDontUseCopy()
    { Set(3); }

    void ResetDontUseCopy()
    { Reset(3); }

    bool IsDontUseCopySet() const
    { return IsSet(3); }

    bool IsDontUseCopyDefined() const
    { return 3 < GetSize(); }

    void SetLocalScope()
    { Set(2); }

    void ResetLocalScope()
    { Reset(2); }

    bool IsLocalScopeSet() const
    { return IsSet(2); }

    bool IsLocalScopeDefined() const
    { return 2 < GetSize(); }

    void SetChainingProhibited()
    { Set(1); }

    void ResetChainingProhibited()
    { Reset(1); }

    bool IsChainingProhibitedSet() const
    { return IsSet(1); }

    bool IsChainingProhibitedDefined() const
    { return 1 < GetSize(); }

    void SetPreferChaining()
    { Set(0); }

    void ResetPreferChaining()
    { Reset(0); }

    bool IsPreferChainingSet() const
    { return IsSet(0); }

    bool IsPreferChainingDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_INAP_CS2_SERVICE_CONTROL_OPTIONS_H_)

