//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_ATTRIBUTE_TYPES_H_)
#define _INAP_CS2_ATTRIBUTE_TYPES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnSetOf.h>
#include <AsnObjectIdentifier.h>

#include <inap_cs2_attribute_type.h>



namespace inap_cs2 {



class AttributeTypes : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AllAttributes : public its::AsnNull
    {
    public:

        AllAttributes() : its::AsnNull(false)
        {
            Initialize();
        }

        AllAttributes(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AllAttributes(const AllAttributes& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AllAttributes(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AllAttributes()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllAttributes(*this);
        }

        virtual std::string GetName() const
        { return "AllAttributes"; }

    };



    class Select : public its::AsnSetOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef inap_cs2::AttributeType AttributeType;


    ////////// End Nested Class //////////

        Select() : its::AsnSetOf(false)
        {
            Initialize();
        }

        Select(its::Octets& octets) : its::AsnSetOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Select(const Select& rhs) : its::AsnSetOf(rhs)
        {
            // Nothing to do.
        }

        Select(its::AsnDescObject* description) : its::AsnSetOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAttributeTypeStaticDescription();

    public:

        virtual ~Select()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Select(*this);
        }

        virtual std::string GetName() const
        { return "Select"; }

        void AddElement(AttributeType* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAttributeTypeStaticDescription());
            AsnSetOf::AddElement(element);
        }

        void AddElement(const AttributeType& element)
        {
            its::AsnObject& asnObject = const_cast<AttributeType&>(element);
            asnObject.SetDescription(GetAttributeTypeStaticDescription());
            AsnSetOf::AddElement(element);
        }

        const AttributeType& ElementAt(int index) const
        {
            return static_cast<const AttributeType&> (AsnSetOf::ElementAt(index));
        }

    };


////////// End Nested Class(es) //////////

    AttributeTypes() : its::AsnChoice(false)
    {
        Initialize();
    }

    AttributeTypes(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    AttributeTypes(const AttributeTypes& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    AttributeTypes(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    AttributeTypes(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAllAttributesStaticDescription();
    static its::AsnDescObject* GetSelectStaticDescription();

public:

    virtual ~AttributeTypes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AttributeTypes(*this);
    }

    virtual std::string GetName() const
    { return "AttributeTypes"; }

    void SetChoiceAllAttributes(AllAttributes* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAllAttributesStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAllAttributes(const AllAttributes& choice)
    {
        its::AsnObject& asnObject = const_cast<AllAttributes&>(choice);
        asnObject.SetDescription(GetAllAttributesStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAllAttributes() const
    {
        return Contains(GetAllAttributesStaticDescription()->TagIdentity());
    }

    const AllAttributes& GetChoiceAllAttributes() const
    {
        ITS_REQUIRE(ChoiceAllAttributes());
        return static_cast<const AllAttributes&> (GetChoice());
    }

    void SetChoiceSelect(Select* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSelectStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSelect(const Select& choice)
    {
        its::AsnObject& asnObject = const_cast<Select&>(choice);
        asnObject.SetDescription(GetSelectStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSelect() const
    {
        return Contains(GetSelectStaticDescription()->TagIdentity());
    }

    const Select& GetChoiceSelect() const
    {
        ITS_REQUIRE(ChoiceSelect());
        return static_cast<const Select&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_ATTRIBUTE_TYPES_H_)

