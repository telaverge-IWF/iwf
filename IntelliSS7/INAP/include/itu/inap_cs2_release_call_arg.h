//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_INAP_CS2_RELEASE_CALL_ARG_H_)
#define _INAP_CS2_RELEASE_CALL_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <inap_cs2_cause.h>



namespace inap_cs2 {



class ReleaseCallArg : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AssociatedCallSegment : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class CallSegment : public its::AsnInteger
        {
        public:

            CallSegment() : its::AsnInteger(false)
            {
                Initialize();
            }

            CallSegment(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            CallSegment(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            CallSegment(const CallSegment& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            CallSegment(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            CallSegment(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CallSegment()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CallSegment(*this);
            }

            virtual std::string GetName() const
            { return "CallSegment"; }

        };


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        AssociatedCallSegment() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        AssociatedCallSegment(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        AssociatedCallSegment(const AssociatedCallSegment& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AssociatedCallSegment(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCallSegmentStaticDescription();
        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~AssociatedCallSegment()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AssociatedCallSegment(*this);
        }

        virtual std::string GetName() const
        { return "AssociatedCallSegment"; }

        void SetCallSegment(CallSegment* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallSegmentStaticDescription());
            AddElement(0, element);
        }

        void SetCallSegment(const CallSegment& element)
        {
            its::AsnObject& asnObject = const_cast<CallSegment&>(element);
            asnObject.SetDescription(GetCallSegmentStaticDescription());
            AddElement(0, element);
        }

        const CallSegment& GetCallSegment() const
        {
            return static_cast<const CallSegment&> (ElementAt(0));
        }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(1, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(1, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(1);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(1));
        }

    };



    class AllCallSegments : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef inap_cs2::Cause Cause;


    ////////// End Nested Class(es) //////////

        AllCallSegments() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        AllCallSegments(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        AllCallSegments(const AllCallSegments& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AllCallSegments(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~AllCallSegments()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllCallSegments(*this);
        }

        virtual std::string GetName() const
        { return "AllCallSegments"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };


        typedef inap_cs2::Cause Cause;


////////// End Nested Class(es) //////////

    ReleaseCallArg() : its::AsnChoice(false)
    {
        Initialize();
    }

    ReleaseCallArg(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ReleaseCallArg(const ReleaseCallArg& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ReleaseCallArg(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ReleaseCallArg(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetInitialCallSegmentStaticDescription();
    static its::AsnDescObject* GetAssociatedCallSegmentStaticDescription();
    static its::AsnDescObject* GetAllCallSegmentsStaticDescription();

public:

    virtual ~ReleaseCallArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ReleaseCallArg(*this);
    }

    virtual std::string GetName() const
    { return "ReleaseCallArg"; }

    void SetChoiceInitialCallSegment(Cause* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetInitialCallSegmentStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceInitialCallSegment(const Cause& choice)
    {
        its::AsnObject& asnObject = const_cast<Cause&>(choice);
        asnObject.SetDescription(GetInitialCallSegmentStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceInitialCallSegment() const
    {
        return Contains(GetInitialCallSegmentStaticDescription()->TagIdentity());
    }

    const Cause& GetChoiceInitialCallSegment() const
    {
        ITS_REQUIRE(ChoiceInitialCallSegment());
        return static_cast<const Cause&> (GetChoice());
    }

    void SetChoiceAssociatedCallSegment(AssociatedCallSegment* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAssociatedCallSegmentStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAssociatedCallSegment(const AssociatedCallSegment& choice)
    {
        its::AsnObject& asnObject = const_cast<AssociatedCallSegment&>(choice);
        asnObject.SetDescription(GetAssociatedCallSegmentStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAssociatedCallSegment() const
    {
        return Contains(GetAssociatedCallSegmentStaticDescription()->TagIdentity());
    }

    const AssociatedCallSegment& GetChoiceAssociatedCallSegment() const
    {
        ITS_REQUIRE(ChoiceAssociatedCallSegment());
        return static_cast<const AssociatedCallSegment&> (GetChoice());
    }

    void SetChoiceAllCallSegments(AllCallSegments* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAllCallSegmentsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAllCallSegments(const AllCallSegments& choice)
    {
        its::AsnObject& asnObject = const_cast<AllCallSegments&>(choice);
        asnObject.SetDescription(GetAllCallSegmentsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAllCallSegments() const
    {
        return Contains(GetAllCallSegmentsStaticDescription()->TagIdentity());
    }

    const AllCallSegments& GetChoiceAllCallSegments() const
    {
        ITS_REQUIRE(ChoiceAllCallSegments());
        return static_cast<const AllCallSegments&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_INAP_CS2_RELEASE_CALL_ARG_H_)

