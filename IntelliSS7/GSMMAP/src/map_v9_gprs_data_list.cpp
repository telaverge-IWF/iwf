//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_gprs_data_list.h>

#include <AsnDescSequenceOf.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class //////////


// Type PDP_Context is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* GPRSDataList::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new GPRSDataList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 50;
        staticDesc._element = GetPDP_ContextStaticDescription();
        staticDesc.SetTypeName("GPRSDataList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSDataList::GetPDP_ContextStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(10);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDP_Context(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = PDP_Context::GetPdp_ContextIdStaticDescription();
        staticDesc._elementVect[1] = PDP_Context::GetPdp_TypeStaticDescription();
        staticDesc._elementVect[2] = PDP_Context::GetPdp_AddressStaticDescription();
        staticDesc._elementVect[3] = PDP_Context::GetQos_SubscribedStaticDescription();
        staticDesc._elementVect[4] = PDP_Context::GetVplmnAddressAllowedStaticDescription();
        staticDesc._elementVect[5] = PDP_Context::GetApnStaticDescription();
        staticDesc._elementVect[6] = PDP_Context::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[7] = PDP_Context::GetExt_QoS_SubscribedStaticDescription();
        staticDesc._elementVect[8] = PDP_Context::GetPdp_ChargingCharacteristicsStaticDescription();
        staticDesc._elementVect[9] = PDP_Context::GetExt2_QoS_SubscribedStaticDescription();
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





