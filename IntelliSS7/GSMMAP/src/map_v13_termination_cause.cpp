//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_termination_cause.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;



AsnDescObject* TerminationCause::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TerminationCause(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._clauseExtensible = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueExtSet.insert(6);
        staticDesc._valueExtSet.insert(7);
        staticDesc._valueExtSet.insert(8);
        staticDesc._valueExtSet.insert(9);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"normal", 0}, {"errorundefined", 1}, {"internalTimeout", 2}, {"congestion", 3}, {"mt-lrRestart", 4}, {"privacyViolation", 5}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{"shapeOfLocationEstimateNotSupported", 6}, {"subscriberTermination", 7}, {"uETermination", 8}, {"networkTermination", 9}, {NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("TerminationCause");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long TerminationCause::Get(const std::string& valueName) const
{
    if (valueName == "normal")
    {
        return 0;
    }
    else if (valueName == "errorundefined")
    {
        return 1;
    }
    else if (valueName == "internalTimeout")
    {
        return 2;
    }
    else if (valueName == "congestion")
    {
        return 3;
    }
    else if (valueName == "mt-lrRestart")
    {
        return 4;
    }
    else if (valueName == "privacyViolation")
    {
        return 5;
    }
    else if (valueName == "shapeOfLocationEstimateNotSupported")
    {
        return 6;
    }
    else if (valueName == "subscriberTermination")
    {
        return 7;
    }
    else if (valueName == "uETermination")
    {
        return 8;
    }
    else if (valueName == "networkTermination")
    {
        return 9;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string TerminationCause::Get(long value) const
{
    if (value == 0)
    {
        return "normal";
    }
    else if (value == 1)
    {
        return "errorundefined";
    }
    else if (value == 2)
    {
        return "internalTimeout";
    }
    else if (value == 3)
    {
        return "congestion";
    }
    else if (value == 4)
    {
        return "mt-lrRestart";
    }
    else if (value == 5)
    {
        return "privacyViolation";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string TerminationCause::GetExt(long value) const
{
    if (value == 6)
    {
        return "shapeOfLocationEstimateNotSupported";
    }
    else if (value == 7)
    {
        return "subscriberTermination";
    }
    else if (value == 8)
    {
        return "uETermination";
    }
    else if (value == 9)
    {
        return "networkTermination";
    }
    else
    {
        return "";
    }
}





