//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_map_dialogue_pdu.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type MAP_OpenInfo is a reference => no code generated.

// Type MAP_AcceptInfo is a reference => no code generated.

// Type MAP_CloseInfo is a reference => no code generated.

// Type MAP_RefuseInfo is a reference => no code generated.

// Type MAP_UserAbortInfo is a reference => no code generated.

// Type MAP_ProviderAbortInfo is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* MAP_DialoguePDU::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new MAP_DialoguePDU(&staticDesc));
        staticDesc._choiceList.push_back(GetMap_openStaticDescription());
        staticDesc._choiceList.push_back(GetMap_acceptStaticDescription());
        staticDesc._choiceList.push_back(GetMap_closeStaticDescription());
        staticDesc._choiceList.push_back(GetMap_refuseStaticDescription());
        staticDesc._choiceList.push_back(GetMap_userAbortStaticDescription());
        staticDesc._choiceList.push_back(GetMap_providerAbortStaticDescription());
        staticDesc.SetTypeName("MAP-DialoguePDU");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_openStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_OpenInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_OpenInfo::GetDestinationReferenceStaticDescription();
        staticDesc._elementVect[1] = MAP_OpenInfo::GetOriginationReferenceStaticDescription();
        staticDesc._elementVect[2] = MAP_OpenInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("map-open");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_acceptStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(1);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_AcceptInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_AcceptInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("map-accept");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_closeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(1);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_CloseInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_CloseInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("map-close");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_refuseStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_RefuseInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_RefuseInfo::GetReasonStaticDescription();
        staticDesc._elementVect[1] = MAP_RefuseInfo::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[2] = MAP_RefuseInfo::GetAlternativeApplicationContextStaticDescription();
        staticDesc.SetNamedTypeName("map-refuse");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_userAbortStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_UserAbortInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_UserAbortInfo::GetMap_UserAbortChoiceStaticDescription();
        staticDesc._elementVect[1] = MAP_UserAbortInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("map-userAbort");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAP_DialoguePDU::GetMap_providerAbortStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MAP_ProviderAbortInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MAP_ProviderAbortInfo::GetMap_ProviderAbortReasonStaticDescription();
        staticDesc._elementVect[1] = MAP_ProviderAbortInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("map-providerAbort");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





