//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_access_type.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;



AsnDescObject* AccessType::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AccessType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._clauseExtensible = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        staticDesc._valueSet.insert(8);
        staticDesc._valueSet.insert(9);
        staticDesc._valueExtSet.insert(10);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"call", 0}, {"emergencyCall", 1}, {"locationUpdating", 2}, {"supplementaryService", 3}, {"shortMessage", 4}, {"gprsAttach", 5}, {"routingAreaUpdating", 6}, {"serviceRequest", 7}, {"pdpContextActivation", 8}, {"pdpContextDeactivation", 9}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{"gprsDetach", 10}, {NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("AccessType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long AccessType::Get(const std::string& valueName) const
{
    if (valueName == "call")
    {
        return 0;
    }
    else if (valueName == "emergencyCall")
    {
        return 1;
    }
    else if (valueName == "locationUpdating")
    {
        return 2;
    }
    else if (valueName == "supplementaryService")
    {
        return 3;
    }
    else if (valueName == "shortMessage")
    {
        return 4;
    }
    else if (valueName == "gprsAttach")
    {
        return 5;
    }
    else if (valueName == "routingAreaUpdating")
    {
        return 6;
    }
    else if (valueName == "serviceRequest")
    {
        return 7;
    }
    else if (valueName == "pdpContextActivation")
    {
        return 8;
    }
    else if (valueName == "pdpContextDeactivation")
    {
        return 9;
    }
    else if (valueName == "gprsDetach")
    {
        return 10;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string AccessType::Get(long value) const
{
    if (value == 0)
    {
        return "call";
    }
    else if (value == 1)
    {
        return "emergencyCall";
    }
    else if (value == 2)
    {
        return "locationUpdating";
    }
    else if (value == 3)
    {
        return "supplementaryService";
    }
    else if (value == 4)
    {
        return "shortMessage";
    }
    else if (value == 5)
    {
        return "gprsAttach";
    }
    else if (value == 6)
    {
        return "routingAreaUpdating";
    }
    else if (value == 7)
    {
        return "serviceRequest";
    }
    else if (value == 8)
    {
        return "pdpContextActivation";
    }
    else if (value == 9)
    {
        return "pdpContextDeactivation";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string AccessType::GetExt(long value) const
{
    if (value == 10)
    {
        return "gprsDetach";
    }
    else
    {
        return "";
    }
}





