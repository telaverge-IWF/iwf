//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v1_network_resource.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v1;



AsnDescObject* NetworkResource::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new NetworkResource(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"pLMN", 0}, {"hLR", 1}, {"vLR", 2}, {"previous-VLR", 3}, {"controlling-MSC", 4}, {"vMSC", 5}, {"eIR", 6}, {"radioSubSystem", 7}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("NetworkResource");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long NetworkResource::Get(const std::string& valueName) const
{
    if (valueName == "pLMN")
    {
        return 0;
    }
    else if (valueName == "hLR")
    {
        return 1;
    }
    else if (valueName == "vLR")
    {
        return 2;
    }
    else if (valueName == "previous-VLR")
    {
        return 3;
    }
    else if (valueName == "controlling-MSC")
    {
        return 4;
    }
    else if (valueName == "vMSC")
    {
        return 5;
    }
    else if (valueName == "eIR")
    {
        return 6;
    }
    else if (valueName == "radioSubSystem")
    {
        return 7;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string NetworkResource::Get(long value) const
{
    if (value == 0)
    {
        return "pLMN";
    }
    else if (value == 1)
    {
        return "hLR";
    }
    else if (value == 2)
    {
        return "vLR";
    }
    else if (value == 3)
    {
        return "previous-VLR";
    }
    else if (value == 4)
    {
        return "controlling-MSC";
    }
    else if (value == 5)
    {
        return "vMSC";
    }
    else if (value == 6)
    {
        return "eIR";
    }
    else if (value == 7)
    {
        return "radioSubSystem";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string NetworkResource::GetExt(long value) const
{
    return "";
}





