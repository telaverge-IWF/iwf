//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_eps_data_list.h>

#include <AsnDescSequenceOf.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class //////////


// Type APN_Configuration is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* EPS_DataList::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EPS_DataList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 50;
        staticDesc._element = GetAPN_ConfigurationStaticDescription();
        staticDesc.SetTypeName("EPS-DataList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EPS_DataList::GetAPN_ConfigurationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(16);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new APN_Configuration(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = APN_Configuration::GetContextIdStaticDescription();
        staticDesc._elementVect[1] = APN_Configuration::GetPdn_TypeStaticDescription();
        staticDesc._elementVect[2] = APN_Configuration::GetServedPartyIP_IPv4_AddressStaticDescription();
        staticDesc._elementVect[3] = APN_Configuration::GetApnStaticDescription();
        staticDesc._elementVect[4] = APN_Configuration::GetEps_qos_SubscribedStaticDescription();
        staticDesc._elementVect[5] = APN_Configuration::GetPdn_gw_IdentityStaticDescription();
        staticDesc._elementVect[6] = APN_Configuration::GetPdn_gw_AllocationTypeStaticDescription();
        staticDesc._elementVect[7] = APN_Configuration::GetVplmnAddressAllowedStaticDescription();
        staticDesc._elementVect[8] = APN_Configuration::GetChargingCharacteristicsStaticDescription();
        staticDesc._elementVect[9] = APN_Configuration::GetAmbrStaticDescription();
        staticDesc._elementVect[10] = APN_Configuration::GetSpecificAPNInfoListStaticDescription();
        staticDesc._elementVect[11] = APN_Configuration::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[12] = APN_Configuration::GetServedPartyIP_IPv6_AddressStaticDescription();
        staticDesc._elementVect[13] = APN_Configuration::GetApn_oi_ReplacementStaticDescription();
        staticDesc._elementVect[14] = APN_Configuration::GetSipto_PermissionStaticDescription();
        staticDesc._elementVect[15] = APN_Configuration::GetLipa_PermissionStaticDescription();
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





