//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_subscriber_info.h>

#include <AsnDescSequence.h>
#include <AsnDescChoice.h>
#include <AsnDescOctetString.h>
#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class(es) //////////


// Type LocationInformation is a reference => no code generated.

// Type SubscriberState is a reference => no code generated.

// Type ExtensionContainer is a reference => no code generated.

// Type LocationInformationGPRS is a reference => no code generated.

// Type PS_SubscriberState is a reference => no code generated.

// Type IMEI is a reference => no code generated.

// Type MS_Classmark2 is a reference => no code generated.

// Type GPRSMSClass is a reference => no code generated.

// Type MNPInfoRes is a reference => no code generated.

// Type IMS_VoiceOverPS_SessionsInd is a reference => no code generated.

// Type Time is a reference => no code generated.

// Type Used_RAT_Type is a reference => no code generated.

// Type PS_SubscriberState is a reference => no code generated.

// Type LocationInformationEPS is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* SubscriberInfo::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(14);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SubscriberInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetLocationInformationStaticDescription();
        staticDesc._elementVect[1] = GetSubscriberStateStaticDescription();
        staticDesc._elementVect[2] = GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[4] = GetPs_SubscriberStateStaticDescription();
        staticDesc._elementVect[5] = GetImeiStaticDescription();
        staticDesc._elementVect[6] = GetMs_Classmark2StaticDescription();
        staticDesc._elementVect[7] = GetGprs_MS_ClassStaticDescription();
        staticDesc._elementVect[8] = GetMnpInfoResStaticDescription();
        staticDesc._elementVect[9] = GetImsVoiceOverPS_SessionsIndicationStaticDescription();
        staticDesc._elementVect[10] = GetLastUE_ActivityTimeStaticDescription();
        staticDesc._elementVect[11] = GetLastRAT_TypeStaticDescription();
        staticDesc._elementVect[12] = GetEps_SubscriberStateStaticDescription();
        staticDesc._elementVect[13] = GetLocationInformationEPSStaticDescription();
        staticDesc.SetTypeName("SubscriberInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetLocationInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(13);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformation::GetAgeOfLocationInformationStaticDescription();
        staticDesc._elementVect[1] = LocationInformation::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[2] = LocationInformation::GetVlr_numberStaticDescription();
        staticDesc._elementVect[3] = LocationInformation::GetLocationNumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformation::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[5] = LocationInformation::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformation::GetSelectedLSA_IdStaticDescription();
        staticDesc._elementVect[7] = LocationInformation::GetMsc_NumberStaticDescription();
        staticDesc._elementVect[8] = LocationInformation::GetGeodeticInformationStaticDescription();
        staticDesc._elementVect[9] = LocationInformation::GetCurrentLocationRetrievedStaticDescription();
        staticDesc._elementVect[10] = LocationInformation::GetSai_PresentStaticDescription();
        staticDesc._elementVect[11] = LocationInformation::GetLocationInformationEPSStaticDescription();
        staticDesc._elementVect[12] = LocationInformation::GetUserCSGInformationStaticDescription();
        staticDesc.SetNamedTypeName("locationInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetSubscriberStateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SubscriberState(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._choiceList.push_back(SubscriberState::GetAssumedIdleStaticDescription());
        staticDesc._choiceList.push_back(SubscriberState::GetCamelBusyStaticDescription());
        staticDesc._choiceList.push_back(SubscriberState::GetNetDetNotReachableStaticDescription());
        staticDesc._choiceList.push_back(SubscriberState::GetNotProvidedFromVLRStaticDescription());
        staticDesc.SetNamedTypeName("subscriberState");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetExtensionContainerStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ExtensionContainer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ExtensionContainer::GetPrivateExtensionListStaticDescription();
        staticDesc._elementVect[1] = ExtensionContainer::GetPcs_ExtensionsStaticDescription();
        staticDesc.SetNamedTypeName("extensionContainer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetLocationInformationGPRSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(11);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationGPRS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationGPRS::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[1] = LocationInformationGPRS::GetRouteingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationGPRS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[3] = LocationInformationGPRS::GetSgsn_NumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformationGPRS::GetSelectedLSAIdentityStaticDescription();
        staticDesc._elementVect[5] = LocationInformationGPRS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformationGPRS::GetSai_PresentStaticDescription();
        staticDesc._elementVect[7] = LocationInformationGPRS::GetGeodeticInformationStaticDescription();
        staticDesc._elementVect[8] = LocationInformationGPRS::GetCurrentLocationRetrievedStaticDescription();
        staticDesc._elementVect[9] = LocationInformationGPRS::GetAgeOfLocationInformationStaticDescription();
        staticDesc._elementVect[10] = LocationInformationGPRS::GetUserCSGInformationStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationGPRS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetPs_SubscriberStateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PS_SubscriberState(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._choiceList.push_back(PS_SubscriberState::GetNotProvidedFromSGSNorMMEStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_DetachedStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_AttachedNotReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_AttachedReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_PDP_ActiveNotReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_PDP_ActiveReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetNetDetNotReachableStaticDescription());
        staticDesc.SetNamedTypeName("ps-SubscriberState");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetImeiStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new IMEI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 5));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("imei");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetMs_Classmark2StaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MS_Classmark2(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 3;
        staticDesc._maxSize = 3;
        staticDesc.SetNamedTypeName("ms-Classmark2");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetGprs_MS_ClassStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRSMSClass(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 7));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = GPRSMSClass::GetMSNetworkCapabilityStaticDescription();
        staticDesc._elementVect[1] = GPRSMSClass::GetMSRadioAccessCapabilityStaticDescription();
        staticDesc.SetNamedTypeName("gprs-MS-Class");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetMnpInfoResStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MNPInfoRes(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 8));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MNPInfoRes::GetRouteingNumberStaticDescription();
        staticDesc._elementVect[1] = MNPInfoRes::GetImsiStaticDescription();
        staticDesc._elementVect[2] = MNPInfoRes::GetMsisdnStaticDescription();
        staticDesc._elementVect[3] = MNPInfoRes::GetNumberPortabilityStatusStaticDescription();
        staticDesc._elementVect[4] = MNPInfoRes::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("mnpInfoRes");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetImsVoiceOverPS_SessionsIndicationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new IMS_VoiceOverPS_SessionsInd(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 9));
        staticDesc._clauseOptional = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"imsVoiceOverPS-SessionsNotSupported", 0}, {"imsVoiceOverPS-SessionsSupported", 1}, {"unknown", 2}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("imsVoiceOverPS-SessionsIndication");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetLastUE_ActivityTimeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Time(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 10));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 4;
        staticDesc._maxSize = 4;
        staticDesc.SetNamedTypeName("lastUE-ActivityTime");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetLastRAT_TypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Used_RAT_Type(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 11));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"utran", 0}, {"geran", 1}, {"gan", 2}, {"i-hspa-evolution", 3}, {"e-utran", 4}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("lastRAT-Type");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetEps_SubscriberStateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PS_SubscriberState(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 12));
        staticDesc._clauseOptional = true;
        staticDesc._choiceList.push_back(PS_SubscriberState::GetNotProvidedFromSGSNorMMEStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_DetachedStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_AttachedNotReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_AttachedReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_PDP_ActiveNotReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetPs_PDP_ActiveReachableForPagingStaticDescription());
        staticDesc._choiceList.push_back(PS_SubscriberState::GetNetDetNotReachableStaticDescription());
        staticDesc.SetNamedTypeName("eps-SubscriberState");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SubscriberInfo::GetLocationInformationEPSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(8);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationEPS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 13));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationEPS::GetE_utranCellGlobalIdentityStaticDescription();
        staticDesc._elementVect[1] = LocationInformationEPS::GetTrackingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationEPS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = LocationInformationEPS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[4] = LocationInformationEPS::GetGeodeticInformationStaticDescription();
        staticDesc._elementVect[5] = LocationInformationEPS::GetCurrentLocationRetrievedStaticDescription();
        staticDesc._elementVect[6] = LocationInformationEPS::GetAgeOfLocationInformationStaticDescription();
        staticDesc._elementVect[7] = LocationInformationEPS::GetMme_NameStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationEPS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





