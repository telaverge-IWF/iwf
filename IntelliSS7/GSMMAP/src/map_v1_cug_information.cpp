//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v1_cug_information.h>

#include <AsnDescSequence.h>
#include <AsnDescChoice.h>
#include <AsnDescSequenceOf.h>
#include <AsnDescOctetString.h>


using namespace its;
using namespace map_v1;




////////// Begin Nested Class(es) //////////


// Type CUG_Facilities is a reference => no code generated.



////////// Begin Nested Class(es) //////////


// Type CUG_Feature is a reference => no code generated.

// Type CUG_FeatureList is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* CUG_Information::Cug_FeatureOrList::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Cug_FeatureOrList(&staticDesc));
        staticDesc._choiceList.push_back(GetCug_FeatureStaticDescription());
        staticDesc._choiceList.push_back(GetCug_FeatureListStaticDescription());
        staticDesc.SetNamedTypeName("cug-FeatureOrList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CUG_Information::Cug_FeatureOrList::GetCug_FeatureStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(4);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CUG_Feature(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = CUG_Feature::GetCug_InterlockStaticDescription();
        staticDesc._elementVect[1] = CUG_Feature::GetCug_IndexStaticDescription();
        staticDesc._elementVect[2] = CUG_Feature::GetCug_OptionsStaticDescription();
        staticDesc._elementVect[3] = CUG_Feature::GetSs_StatusStaticDescription();
        staticDesc.SetNamedTypeName("cug-Feature");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CUG_Information::Cug_FeatureOrList::GetCug_FeatureListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CUG_FeatureList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 10;
        staticDesc._element = CUG_FeatureList::GetCUG_FeatureStaticDescription();
        staticDesc.SetNamedTypeName("cug-FeatureList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* CUG_Information::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new CUG_Information(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetCug_FacilitiesStaticDescription();
        staticDesc._elementVect[1] = GetCug_FeatureOrListStaticDescription();
        staticDesc.SetTypeName("CUG-Information");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CUG_Information::GetCug_FacilitiesStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CUG_Facilities(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("cug-Facilities");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CUG_Information::GetCug_FeatureOrListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Cug_FeatureOrList(&staticDesc));
        staticDesc._choiceList.push_back(Cug_FeatureOrList::GetCug_FeatureStaticDescription());
        staticDesc._choiceList.push_back(Cug_FeatureOrList::GetCug_FeatureListStaticDescription());
        staticDesc.SetNamedTypeName("cug-FeatureOrList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





