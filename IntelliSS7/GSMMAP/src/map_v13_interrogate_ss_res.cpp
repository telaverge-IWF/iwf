//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_interrogate_ss_res.h>

#include <AsnDescChoice.h>
#include <AsnDescOctetString.h>
#include <AsnDescSequenceOf.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class(es) //////////


// Type SS_Status is a reference => no code generated.

// Type BasicServiceGroupList is a reference => no code generated.

// Type ForwardingFeatureList is a reference => no code generated.

// Type GenericServiceInfo is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* InterrogateSS_Res::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new InterrogateSS_Res(&staticDesc));
        staticDesc._choiceList.push_back(GetSs_StatusStaticDescription());
        staticDesc._choiceList.push_back(GetBasicServiceGroupListStaticDescription());
        staticDesc._choiceList.push_back(GetForwardingFeatureListStaticDescription());
        staticDesc._choiceList.push_back(GetGenericServiceInfoStaticDescription());
        staticDesc.SetTypeName("InterrogateSS-Res");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* InterrogateSS_Res::GetSs_StatusStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SS_Status(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("ss-Status");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* InterrogateSS_Res::GetBasicServiceGroupListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new BasicServiceGroupList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 13;
        staticDesc._element = BasicServiceGroupList::GetBasicServiceCodeStaticDescription();
        staticDesc.SetNamedTypeName("basicServiceGroupList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* InterrogateSS_Res::GetForwardingFeatureListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ForwardingFeatureList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 13;
        staticDesc._element = ForwardingFeatureList::GetForwardingFeatureStaticDescription();
        staticDesc.SetNamedTypeName("forwardingFeatureList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* InterrogateSS_Res::GetGenericServiceInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(8);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GenericServiceInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GenericServiceInfo::GetSs_StatusStaticDescription();
        staticDesc._elementVect[1] = GenericServiceInfo::GetCliRestrictionOptionStaticDescription();
        staticDesc._elementVect[2] = GenericServiceInfo::GetMaximumEntitledPriorityStaticDescription();
        staticDesc._elementVect[3] = GenericServiceInfo::GetDefaultPriorityStaticDescription();
        staticDesc._elementVect[4] = GenericServiceInfo::GetCcbs_FeatureListStaticDescription();
        staticDesc._elementVect[5] = GenericServiceInfo::GetNbrSBStaticDescription();
        staticDesc._elementVect[6] = GenericServiceInfo::GetNbrUserStaticDescription();
        staticDesc._elementVect[7] = GenericServiceInfo::GetNbrSNStaticDescription();
        staticDesc.SetNamedTypeName("genericServiceInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





