//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_ext_ss_info_for_cse.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type Ext_ForwardingInfoFor_CSE is a reference => no code generated.

// Type Ext_CallBarringInfoFor_CSE is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* Ext_SS_InfoFor_CSE::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Ext_SS_InfoFor_CSE(&staticDesc));
        staticDesc._choiceList.push_back(GetForwardingInfoFor_CSEStaticDescription());
        staticDesc._choiceList.push_back(GetCallBarringInfoFor_CSEStaticDescription());
        staticDesc.SetTypeName("Ext-SS-InfoFor-CSE");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_InfoFor_CSE::GetForwardingInfoFor_CSEStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(4);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Ext_ForwardingInfoFor_CSE(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Ext_ForwardingInfoFor_CSE::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = Ext_ForwardingInfoFor_CSE::GetForwardingFeatureListStaticDescription();
        staticDesc._elementVect[2] = Ext_ForwardingInfoFor_CSE::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[3] = Ext_ForwardingInfoFor_CSE::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("forwardingInfoFor-CSE");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_InfoFor_CSE::GetCallBarringInfoFor_CSEStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(6);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Ext_CallBarringInfoFor_CSE(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Ext_CallBarringInfoFor_CSE::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = Ext_CallBarringInfoFor_CSE::GetCallBarringFeatureListStaticDescription();
        staticDesc._elementVect[2] = Ext_CallBarringInfoFor_CSE::GetPasswordStaticDescription();
        staticDesc._elementVect[3] = Ext_CallBarringInfoFor_CSE::GetWrongPasswordAttemptsCounterStaticDescription();
        staticDesc._elementVect[4] = Ext_CallBarringInfoFor_CSE::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[5] = Ext_CallBarringInfoFor_CSE::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("callBarringInfoFor-CSE");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





