//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_forward_access_signalling_arg.h>

#include <AsnDescSequence.h>
#include <AsnDescNull.h>
#include <AsnDescOctetString.h>
#include <AsnDescEnumerated.h>
#include <AsnDescSequenceOf.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class(es) //////////


// Type AccessNetworkSignalInfo is a reference => no code generated.

// Type IntegrityProtectionInformation is a reference => no code generated.

// Type EncryptionInformation is a reference => no code generated.

// Type KeyStatus is a reference => no code generated.

// Type AllowedGSM_Algorithms is a reference => no code generated.

// Type AllowedUMTS_Algorithms is a reference => no code generated.

// Type RadioResourceInformation is a reference => no code generated.

// Type ExtensionContainer is a reference => no code generated.

// Type RadioResourceList is a reference => no code generated.

// Type BSSMAP_ServiceHandover is a reference => no code generated.

// Type RANAP_ServiceHandover is a reference => no code generated.

// Type BSSMAP_ServiceHandoverList is a reference => no code generated.

// Type Codec is a reference => no code generated.

// Type SupportedCodecsList is a reference => no code generated.


AsnDescObject* ForwardAccessSignalling_Arg::Rab_ConfigurationIndicator::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Rab_ConfigurationIndicator(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 13));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("rab-ConfigurationIndicator");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


// Type Codec is a reference => no code generated.

// Type RadioResourceInformation is a reference => no code generated.

// Type TracePropagationList is a reference => no code generated.

// Type AoIPCodecsList is a reference => no code generated.

// Type AoIPCodec is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* ForwardAccessSignalling_Arg::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(20);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ForwardAccessSignalling_Arg(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetAn_APDUStaticDescription();
        staticDesc._elementVect[1] = GetIntegrityProtectionInfoStaticDescription();
        staticDesc._elementVect[2] = GetEncryptionInfoStaticDescription();
        staticDesc._elementVect[3] = GetKeyStatusStaticDescription();
        staticDesc._elementVect[4] = GetAllowedGSM_AlgorithmsStaticDescription();
        staticDesc._elementVect[5] = GetAllowedUMTS_AlgorithmsStaticDescription();
        staticDesc._elementVect[6] = GetRadioResourceInformationStaticDescription();
        staticDesc._elementVect[7] = GetExtensionContainerStaticDescription();
        staticDesc._elementVect[8] = GetRadioResourceListStaticDescription();
        staticDesc._elementVect[9] = GetBssmap_ServiceHandoverStaticDescription();
        staticDesc._elementVect[10] = GetRanap_ServiceHandoverStaticDescription();
        staticDesc._elementVect[11] = GetBssmap_ServiceHandoverListStaticDescription();
        staticDesc._elementVect[12] = GetCurrentlyUsedCodecStaticDescription();
        staticDesc._elementVect[13] = GetIuSupportedCodecsListStaticDescription();
        staticDesc._elementVect[14] = GetRab_ConfigurationIndicatorStaticDescription();
        staticDesc._elementVect[15] = GetIuSelectedCodecStaticDescription();
        staticDesc._elementVect[16] = GetAlternativeChannelTypeStaticDescription();
        staticDesc._elementVect[17] = GetTracePropagationListStaticDescription();
        staticDesc._elementVect[18] = GetAoipSupportedCodecsListAnchorStaticDescription();
        staticDesc._elementVect[19] = GetAoipSelectedCodecTargetStaticDescription();
        staticDesc.SetTypeName("ForwardAccessSignalling-Arg");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAn_APDUStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AccessNetworkSignalInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = AccessNetworkSignalInfo::GetAccessNetworkProtocolIdStaticDescription();
        staticDesc._elementVect[1] = AccessNetworkSignalInfo::GetSignalInfoStaticDescription();
        staticDesc._elementVect[2] = AccessNetworkSignalInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("an-APDU");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetIntegrityProtectionInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new IntegrityProtectionInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 18;
        staticDesc._maxSize = 100;
        staticDesc.SetNamedTypeName("integrityProtectionInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetEncryptionInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EncryptionInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 18;
        staticDesc._maxSize = 100;
        staticDesc.SetNamedTypeName("encryptionInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetKeyStatusStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new KeyStatus(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"old", 0}, {"new", 1}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("keyStatus");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAllowedGSM_AlgorithmsStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AllowedGSM_Algorithms(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("allowedGSM-Algorithms");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAllowedUMTS_AlgorithmsStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AllowedUMTS_Algorithms(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = AllowedUMTS_Algorithms::GetIntegrityProtectionAlgorithmsStaticDescription();
        staticDesc._elementVect[1] = AllowedUMTS_Algorithms::GetEncryptionAlgorithmsStaticDescription();
        staticDesc._elementVect[2] = AllowedUMTS_Algorithms::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("allowedUMTS-Algorithms");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetRadioResourceInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RadioResourceInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 3;
        staticDesc._maxSize = 13;
        staticDesc.SetNamedTypeName("radioResourceInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetExtensionContainerStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ExtensionContainer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ExtensionContainer::GetPrivateExtensionListStaticDescription();
        staticDesc._elementVect[1] = ExtensionContainer::GetPcs_ExtensionsStaticDescription();
        staticDesc.SetNamedTypeName("extensionContainer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetRadioResourceListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RadioResourceList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 7));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 7;
        staticDesc._element = RadioResourceList::GetRadioResourceStaticDescription();
        staticDesc.SetNamedTypeName("radioResourceList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetBssmap_ServiceHandoverStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new BSSMAP_ServiceHandover(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 9));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("bssmap-ServiceHandover");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetRanap_ServiceHandoverStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RANAP_ServiceHandover(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 8));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("ranap-ServiceHandover");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetBssmap_ServiceHandoverListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new BSSMAP_ServiceHandoverList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 10));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 7;
        staticDesc._element = BSSMAP_ServiceHandoverList::GetBSSMAP_ServiceHandoverInfoStaticDescription();
        staticDesc.SetNamedTypeName("bssmap-ServiceHandoverList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetCurrentlyUsedCodecStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Codec(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 11));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 4;
        staticDesc.SetNamedTypeName("currentlyUsedCodec");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetIuSupportedCodecsListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SupportedCodecsList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 12));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = SupportedCodecsList::GetUtranCodecListStaticDescription();
        staticDesc._elementVect[1] = SupportedCodecsList::GetGeranCodecListStaticDescription();
        staticDesc._elementVect[2] = SupportedCodecsList::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("iuSupportedCodecsList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetRab_ConfigurationIndicatorStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Rab_ConfigurationIndicator(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 13));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("rab-ConfigurationIndicator");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetIuSelectedCodecStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Codec(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 14));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 4;
        staticDesc.SetNamedTypeName("iuSelectedCodec");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAlternativeChannelTypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RadioResourceInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 15));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 3;
        staticDesc._maxSize = 13;
        staticDesc.SetNamedTypeName("alternativeChannelType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetTracePropagationListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(12);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TracePropagationList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 17));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = TracePropagationList::GetTraceReferenceStaticDescription();
        staticDesc._elementVect[1] = TracePropagationList::GetTraceTypeStaticDescription();
        staticDesc._elementVect[2] = TracePropagationList::GetTraceReference2StaticDescription();
        staticDesc._elementVect[3] = TracePropagationList::GetTraceRecordingSessionReferenceStaticDescription();
        staticDesc._elementVect[4] = TracePropagationList::GetRnc_TraceDepthStaticDescription();
        staticDesc._elementVect[5] = TracePropagationList::GetRnc_InterfaceListStaticDescription();
        staticDesc._elementVect[6] = TracePropagationList::GetMsc_s_TraceDepthStaticDescription();
        staticDesc._elementVect[7] = TracePropagationList::GetMsc_s_InterfaceListStaticDescription();
        staticDesc._elementVect[8] = TracePropagationList::GetMsc_s_EventListStaticDescription();
        staticDesc._elementVect[9] = TracePropagationList::GetMgw_TraceDepthStaticDescription();
        staticDesc._elementVect[10] = TracePropagationList::GetMgw_InterfaceListStaticDescription();
        staticDesc._elementVect[11] = TracePropagationList::GetMgw_EventListStaticDescription();
        staticDesc.SetNamedTypeName("tracePropagationList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAoipSupportedCodecsListAnchorStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(9);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AoIPCodecsList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 18));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = AoIPCodecsList::GetCodec1StaticDescription();
        staticDesc._elementVect[1] = AoIPCodecsList::GetCodec2StaticDescription();
        staticDesc._elementVect[2] = AoIPCodecsList::GetCodec3StaticDescription();
        staticDesc._elementVect[3] = AoIPCodecsList::GetCodec4StaticDescription();
        staticDesc._elementVect[4] = AoIPCodecsList::GetCodec5StaticDescription();
        staticDesc._elementVect[5] = AoIPCodecsList::GetCodec6StaticDescription();
        staticDesc._elementVect[6] = AoIPCodecsList::GetCodec7StaticDescription();
        staticDesc._elementVect[7] = AoIPCodecsList::GetCodec8StaticDescription();
        staticDesc._elementVect[8] = AoIPCodecsList::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("aoipSupportedCodecsListAnchor");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* ForwardAccessSignalling_Arg::GetAoipSelectedCodecTargetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AoIPCodec(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 19));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 3;
        staticDesc.SetNamedTypeName("aoipSelectedCodecTarget");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





