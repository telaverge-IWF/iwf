//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v1_map_abort_information.h>

#include <AsnDescSequence.h>
#include <AsnDescEnumerated.h>
#include <AsnDescOctetString.h>


using namespace its;
using namespace map_v1;




////////// Begin Nested Class(es) //////////



AsnDescObject* MAPAbortInformation::AbortCause::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new AbortCause(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        staticDesc._valueSet.insert(8);
        staticDesc._valueSet.insert(9);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"unspecifiedReason", 0}, {"versionNotSupported", 1}, {"userResourceLimitation", 2}, {"resourceUnavailableLongTermProblem", 3}, {"resourceUnavailableTemporaryProblem", 4}, {"radioChannelRelease", 5}, {"networkPathRelease", 6}, {"callRelease", 7}, {"associatedProcedureFailed", 8}, {"remoteOperationFailure", 9}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetNamedTypeName("abortCause");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long MAPAbortInformation::AbortCause::Get(const std::string& valueName) const
{
    if (valueName == "unspecifiedReason")
    {
        return 0;
    }
    else if (valueName == "versionNotSupported")
    {
        return 1;
    }
    else if (valueName == "userResourceLimitation")
    {
        return 2;
    }
    else if (valueName == "resourceUnavailableLongTermProblem")
    {
        return 3;
    }
    else if (valueName == "resourceUnavailableTemporaryProblem")
    {
        return 4;
    }
    else if (valueName == "radioChannelRelease")
    {
        return 5;
    }
    else if (valueName == "networkPathRelease")
    {
        return 6;
    }
    else if (valueName == "callRelease")
    {
        return 7;
    }
    else if (valueName == "associatedProcedureFailed")
    {
        return 8;
    }
    else if (valueName == "remoteOperationFailure")
    {
        return 9;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string MAPAbortInformation::AbortCause::Get(long value) const
{
    if (value == 0)
    {
        return "unspecifiedReason";
    }
    else if (value == 1)
    {
        return "versionNotSupported";
    }
    else if (value == 2)
    {
        return "userResourceLimitation";
    }
    else if (value == 3)
    {
        return "resourceUnavailableLongTermProblem";
    }
    else if (value == 4)
    {
        return "resourceUnavailableTemporaryProblem";
    }
    else if (value == 5)
    {
        return "radioChannelRelease";
    }
    else if (value == 6)
    {
        return "networkPathRelease";
    }
    else if (value == 7)
    {
        return "callRelease";
    }
    else if (value == 8)
    {
        return "associatedProcedureFailed";
    }
    else if (value == 9)
    {
        return "remoteOperationFailure";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string MAPAbortInformation::AbortCause::GetExt(long value) const
{
    return "";
}



AsnDescObject* MAPAbortInformation::AdditionalInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new AdditionalInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 200;
        staticDesc.SetNamedTypeName("additionalInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* MAPAbortInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new MAPAbortInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetAbortCauseStaticDescription();
        staticDesc._elementVect[1] = GetAdditionalInformationStaticDescription();
        staticDesc.SetTypeName("MAPAbortInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAPAbortInformation::GetAbortCauseStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AbortCause(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        staticDesc._valueSet.insert(8);
        staticDesc._valueSet.insert(9);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"unspecifiedReason", 0}, {"versionNotSupported", 1}, {"userResourceLimitation", 2}, {"resourceUnavailableLongTermProblem", 3}, {"resourceUnavailableTemporaryProblem", 4}, {"radioChannelRelease", 5}, {"networkPathRelease", 6}, {"callRelease", 7}, {"associatedProcedureFailed", 8}, {"remoteOperationFailure", 9}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("abortCause");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* MAPAbortInformation::GetAdditionalInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AdditionalInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 200;
        staticDesc.SetNamedTypeName("additionalInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





