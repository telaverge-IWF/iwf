//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v1_call_status.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v1;



AsnDescObject* CallStatus::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new CallStatus(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        staticDesc._valueSet.insert(8);
        staticDesc._valueSet.insert(9);
        staticDesc._valueSet.insert(10);
        staticDesc._valueSet.insert(11);
        staticDesc._valueSet.insert(12);
        staticDesc._valueSet.insert(13);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"undetermined", 0}, {"successfulNormalTermination", 1}, {"successfulAbnormalTermination", 2}, {"forwarded", 4}, {"forwardedWithAbnormalTermination", 5}, {"rerouted", 6}, {"reroutedWithAbnormalTermination", 7}, {"unsuccessfulNoRadioContact", 8}, {"unsuccessfulNoResponse", 9}, {"unsuccessfulBusySubscriber", 10}, {"unsuccessfulSystemFailed", 11}, {"unsuccessfulSubscriptionViolation", 12}, {"unsuccessfulUnsupportedFacility", 13}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("CallStatus");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long CallStatus::Get(const std::string& valueName) const
{
    if (valueName == "undetermined")
    {
        return 0;
    }
    else if (valueName == "successfulNormalTermination")
    {
        return 1;
    }
    else if (valueName == "successfulAbnormalTermination")
    {
        return 2;
    }
    else if (valueName == "forwarded")
    {
        return 4;
    }
    else if (valueName == "forwardedWithAbnormalTermination")
    {
        return 5;
    }
    else if (valueName == "rerouted")
    {
        return 6;
    }
    else if (valueName == "reroutedWithAbnormalTermination")
    {
        return 7;
    }
    else if (valueName == "unsuccessfulNoRadioContact")
    {
        return 8;
    }
    else if (valueName == "unsuccessfulNoResponse")
    {
        return 9;
    }
    else if (valueName == "unsuccessfulBusySubscriber")
    {
        return 10;
    }
    else if (valueName == "unsuccessfulSystemFailed")
    {
        return 11;
    }
    else if (valueName == "unsuccessfulSubscriptionViolation")
    {
        return 12;
    }
    else if (valueName == "unsuccessfulUnsupportedFacility")
    {
        return 13;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string CallStatus::Get(long value) const
{
    if (value == 0)
    {
        return "undetermined";
    }
    else if (value == 1)
    {
        return "successfulNormalTermination";
    }
    else if (value == 2)
    {
        return "successfulAbnormalTermination";
    }
    else if (value == 4)
    {
        return "forwarded";
    }
    else if (value == 5)
    {
        return "forwardedWithAbnormalTermination";
    }
    else if (value == 6)
    {
        return "rerouted";
    }
    else if (value == 7)
    {
        return "reroutedWithAbnormalTermination";
    }
    else if (value == 8)
    {
        return "unsuccessfulNoRadioContact";
    }
    else if (value == 9)
    {
        return "unsuccessfulNoResponse";
    }
    else if (value == 10)
    {
        return "unsuccessfulBusySubscriber";
    }
    else if (value == 11)
    {
        return "unsuccessfulSystemFailed";
    }
    else if (value == 12)
    {
        return "unsuccessfulSubscriptionViolation";
    }
    else if (value == 13)
    {
        return "unsuccessfulUnsupportedFacility";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string CallStatus::GetExt(long value) const
{
    return "";
}





