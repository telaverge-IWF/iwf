//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_logging_interval.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;



AsnDescObject* LoggingInterval::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LoggingInterval(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"d1dot28", 0}, {"d2dot56", 1}, {"d5dot12", 2}, {"d10dot24", 3}, {"d20dot48", 4}, {"d30dot72", 5}, {"d40dot96", 6}, {"d61dot44", 7}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("LoggingInterval");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long LoggingInterval::Get(const std::string& valueName) const
{
    if (valueName == "d1dot28")
    {
        return 0;
    }
    else if (valueName == "d2dot56")
    {
        return 1;
    }
    else if (valueName == "d5dot12")
    {
        return 2;
    }
    else if (valueName == "d10dot24")
    {
        return 3;
    }
    else if (valueName == "d20dot48")
    {
        return 4;
    }
    else if (valueName == "d30dot72")
    {
        return 5;
    }
    else if (valueName == "d40dot96")
    {
        return 6;
    }
    else if (valueName == "d61dot44")
    {
        return 7;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string LoggingInterval::Get(long value) const
{
    if (value == 0)
    {
        return "d1dot28";
    }
    else if (value == 1)
    {
        return "d2dot56";
    }
    else if (value == 2)
    {
        return "d5dot12";
    }
    else if (value == 3)
    {
        return "d10dot24";
    }
    else if (value == 4)
    {
        return "d20dot48";
    }
    else if (value == 5)
    {
        return "d30dot72";
    }
    else if (value == 6)
    {
        return "d40dot96";
    }
    else if (value == 7)
    {
        return "d61dot44";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string LoggingInterval::GetExt(long value) const
{
    return "";
}





