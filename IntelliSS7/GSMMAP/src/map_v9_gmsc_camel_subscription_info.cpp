//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_gmsc_camel_subscription_info.h>

#include <AsnDescSequence.h>
#include <AsnDescSequenceOf.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type T_CSI is a reference => no code generated.

// Type O_CSI is a reference => no code generated.

// Type ExtensionContainer is a reference => no code generated.

// Type O_BcsmCamelTDPCriteriaList is a reference => no code generated.

// Type T_BCSM_CAMEL_TDP_CriteriaList is a reference => no code generated.

// Type D_CSI is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* GmscCamelSubscriptionInfo::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(6);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new GmscCamelSubscriptionInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetT_CSIStaticDescription();
        staticDesc._elementVect[1] = GetO_CSIStaticDescription();
        staticDesc._elementVect[2] = GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = GetO_BcsmCamelTDP_CriteriaListStaticDescription();
        staticDesc._elementVect[4] = GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription();
        staticDesc._elementVect[5] = GetD_csiStaticDescription();
        staticDesc.SetTypeName("GmscCamelSubscriptionInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetT_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new T_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = T_CSI::GetT_BcsmCamelTDPDataListStaticDescription();
        staticDesc._elementVect[1] = T_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[2] = T_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[3] = T_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = T_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("t-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetO_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new O_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = O_CSI::GetO_BcsmCamelTDPDataListStaticDescription();
        staticDesc._elementVect[1] = O_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[2] = O_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[3] = O_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = O_CSI::GetCsiActiveStaticDescription();
        staticDesc.SetNamedTypeName("o-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetExtensionContainerStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ExtensionContainer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ExtensionContainer::GetPrivateExtensionListStaticDescription();
        staticDesc._elementVect[1] = ExtensionContainer::GetPcs_ExtensionsStaticDescription();
        staticDesc.SetNamedTypeName("extensionContainer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetO_BcsmCamelTDP_CriteriaListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new O_BcsmCamelTDPCriteriaList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 10;
        staticDesc._element = O_BcsmCamelTDPCriteriaList::GetO_BcsmCamelTDP_CriteriaStaticDescription();
        staticDesc.SetNamedTypeName("o-BcsmCamelTDP-CriteriaList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new T_BCSM_CAMEL_TDP_CriteriaList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 10;
        staticDesc._element = T_BCSM_CAMEL_TDP_CriteriaList::GetT_BCSM_CAMEL_TDP_CriteriaStaticDescription();
        staticDesc.SetNamedTypeName("t-BCSM-CAMEL-TDP-CriteriaList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GmscCamelSubscriptionInfo::GetD_csiStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new D_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = D_CSI::GetDp_AnalysedInfoCriteriaListStaticDescription();
        staticDesc._elementVect[1] = D_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[2] = D_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = D_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = D_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("d-csi");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





