<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PerformHO_Arg</className>
<asnTypeName>PerformHO-Arg</asnTypeName>
<moduleName>MAP_V2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetTargetCellId</name>
<signature>void SetTargetCellId(GlobalCellId* element)</signature>
<elmentName>TargetCellId</elmentName>
<asnElementName>targetCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTargetCellId</name>
<signature>void SetTargetCellId(const GlobalCellId&amp; element)</signature>
<elementName>TargetCellId</elementName>
<asnElementName>targetCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTargetCellId</name>
<signature>const GlobalCellId&amp; GetTargetCellId() const</signature>
<elementName>TargetCellId</elementName>
<asnElementName>targetCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetServingCellId</name>
<signature>void SetServingCellId(GlobalCellId* element)</signature>
<elmentName>ServingCellId</elmentName>
<asnElementName>servingCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServingCellId</name>
<signature>void SetServingCellId(const GlobalCellId&amp; element)</signature>
<elementName>ServingCellId</elementName>
<asnElementName>servingCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServingCellId</name>
<signature>const GlobalCellId&amp; GetServingCellId() const</signature>
<elementName>ServingCellId</elementName>
<asnElementName>servingCellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetChannelType</name>
<signature>void SetChannelType(ChannelType* element)</signature>
<elmentName>ChannelType</elmentName>
<asnElementName>channelType</asnElementName>
<elementTypeName>ChannelType</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChannelType</name>
<signature>void SetChannelType(const ChannelType&amp; element)</signature>
<elementName>ChannelType</elementName>
<asnElementName>channelType</asnElementName>
<elementTypeName>ChannelType</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChannelType</name>
<signature>const ChannelType&amp; GetChannelType() const</signature>
<elementName>ChannelType</elementName>
<asnElementName>channelType</asnElementName>
<elementTypeName>ChannelType</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetClassmarkInfo</name>
<signature>void SetClassmarkInfo(ClassmarkInfo* element)</signature>
<elmentName>ClassmarkInfo</elmentName>
<asnElementName>classmarkInfo</asnElementName>
<elementTypeName>ClassmarkInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetClassmarkInfo</name>
<signature>void SetClassmarkInfo(const ClassmarkInfo&amp; element)</signature>
<elementName>ClassmarkInfo</elementName>
<asnElementName>classmarkInfo</asnElementName>
<elementTypeName>ClassmarkInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetClassmarkInfo</name>
<signature>const ClassmarkInfo&amp; GetClassmarkInfo() const</signature>
<elementName>ClassmarkInfo</elementName>
<asnElementName>classmarkInfo</asnElementName>
<elementTypeName>ClassmarkInfo</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetHandoverPriority</name>
<signature>void SetHandoverPriority(HandoverPriority* element)</signature>
<elmentName>HandoverPriority</elmentName>
<asnElementName>handoverPriority</asnElementName>
<elementTypeName>HandoverPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetHandoverPriority</name>
<signature>void SetHandoverPriority(const HandoverPriority&amp; element)</signature>
<elementName>HandoverPriority</elementName>
<asnElementName>handoverPriority</asnElementName>
<elementTypeName>HandoverPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetHandoverPriority</name>
<signature>const HandoverPriority&amp; GetHandoverPriority() const</signature>
<elementName>HandoverPriority</elementName>
<asnElementName>handoverPriority</asnElementName>
<elementTypeName>HandoverPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionHandoverPriority</name>
<signature>bool OptionHandoverPriority() const</signature>
<elementName>HandoverPriority</elementName>
<asnElementName>handoverPriority</asnElementName>
<elementTypeName>HandoverPriority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetKc</name>
<signature>void SetKc(Kc* element)</signature>
<elmentName>Kc</elmentName>
<asnElementName>kc</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetKc</name>
<signature>void SetKc(const Kc&amp; element)</signature>
<elementName>Kc</elementName>
<asnElementName>kc</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetKc</name>
<signature>const Kc&amp; GetKc() const</signature>
<elementName>Kc</elementName>
<asnElementName>kc</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionKc</name>
<signature>bool OptionKc() const</signature>
<elementName>Kc</elementName>
<asnElementName>kc</asnElementName>
<elementTypeName>Kc</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PerformHO-Arg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PerformHO-Arg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    targetCellId GlobalCellId -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    servingCellId GlobalCellId -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    channelType ChannelType -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    classmarkInfo ClassmarkInfo -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    handoverPriority [11] IMPLICIT HandoverPriority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    kc [12] IMPLICIT Kc -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

