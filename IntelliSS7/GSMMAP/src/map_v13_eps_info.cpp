//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_eps_info.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>
#include <AsnDescBitString.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class(es) //////////


// Type PDN_GW_Update is a reference => no code generated.

// Type ISR_Information is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* EPS_Info::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EPS_Info(&staticDesc));
        staticDesc._choiceList.push_back(GetPdn_gw_updateStaticDescription());
        staticDesc._choiceList.push_back(GetIsr_InformationStaticDescription());
        staticDesc.SetTypeName("EPS-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EPS_Info::GetPdn_gw_updateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(4);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDN_GW_Update(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = PDN_GW_Update::GetApnStaticDescription();
        staticDesc._elementVect[1] = PDN_GW_Update::GetPdn_gw_IdentityStaticDescription();
        staticDesc._elementVect[2] = PDN_GW_Update::GetContextIdStaticDescription();
        staticDesc._elementVect[3] = PDN_GW_Update::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("pdn-gw-update");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EPS_Info::GetIsr_InformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescBitString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ISR_Information(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 3;
        staticDesc._maxSize = 8;
        staticDesc.SetNamedTypeName("isr-Information");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





