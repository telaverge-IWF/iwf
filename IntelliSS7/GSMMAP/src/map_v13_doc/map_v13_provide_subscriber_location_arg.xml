<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ProvideSubscriberLocation_Arg</className>
<asnTypeName>ProvideSubscriberLocation-Arg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetLocationType</name>
<signature>void SetLocationType(LocationType* element)</signature>
<elmentName>LocationType</elmentName>
<asnElementName>locationType</asnElementName>
<elementTypeName>LocationType</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationType</name>
<signature>void SetLocationType(const LocationType&amp; element)</signature>
<elementName>LocationType</elementName>
<asnElementName>locationType</asnElementName>
<elementTypeName>LocationType</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationType</name>
<signature>const LocationType&amp; GetLocationType() const</signature>
<elementName>LocationType</elementName>
<asnElementName>locationType</asnElementName>
<elementTypeName>LocationType</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetMlc_Number</name>
<signature>void SetMlc_Number(ISDN_AddressString* element)</signature>
<elmentName>Mlc_Number</elmentName>
<asnElementName>mlc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMlc_Number</name>
<signature>void SetMlc_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Mlc_Number</elementName>
<asnElementName>mlc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMlc_Number</name>
<signature>const ISDN_AddressString&amp; GetMlc_Number() const</signature>
<elementName>Mlc_Number</elementName>
<asnElementName>mlc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetLcs_ClientID</name>
<signature>void SetLcs_ClientID(LCS_ClientID* element)</signature>
<elmentName>Lcs_ClientID</elmentName>
<asnElementName>lcs-ClientID</asnElementName>
<elementTypeName>LCS_ClientID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_ClientID</name>
<signature>void SetLcs_ClientID(const LCS_ClientID&amp; element)</signature>
<elementName>Lcs_ClientID</elementName>
<asnElementName>lcs-ClientID</asnElementName>
<elementTypeName>LCS_ClientID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_ClientID</name>
<signature>const LCS_ClientID&amp; GetLcs_ClientID() const</signature>
<elementName>Lcs_ClientID</elementName>
<asnElementName>lcs-ClientID</asnElementName>
<elementTypeName>LCS_ClientID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_ClientID</name>
<signature>bool OptionLcs_ClientID() const</signature>
<elementName>Lcs_ClientID</elementName>
<asnElementName>lcs-ClientID</asnElementName>
<elementTypeName>LCS_ClientID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPrivacyOverride</name>
<signature>void SetPrivacyOverride(PrivacyOverride* element)</signature>
<elmentName>PrivacyOverride</elmentName>
<asnElementName>privacyOverride</asnElementName>
<elementTypeName>PrivacyOverride</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPrivacyOverride</name>
<signature>void SetPrivacyOverride(const PrivacyOverride&amp; element)</signature>
<elementName>PrivacyOverride</elementName>
<asnElementName>privacyOverride</asnElementName>
<elementTypeName>PrivacyOverride</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPrivacyOverride</name>
<signature>const PrivacyOverride&amp; GetPrivacyOverride() const</signature>
<elementName>PrivacyOverride</elementName>
<asnElementName>privacyOverride</asnElementName>
<elementTypeName>PrivacyOverride</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPrivacyOverride</name>
<signature>bool OptionPrivacyOverride() const</signature>
<elementName>PrivacyOverride</elementName>
<asnElementName>privacyOverride</asnElementName>
<elementTypeName>PrivacyOverride</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImsi</name>
<signature>bool OptionImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMsisdn</name>
<signature>void SetMsisdn(ISDN_AddressString* element)</signature>
<elmentName>Msisdn</elmentName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMsisdn</name>
<signature>void SetMsisdn(const ISDN_AddressString&amp; element)</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMsisdn</name>
<signature>const ISDN_AddressString&amp; GetMsisdn() const</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMsisdn</name>
<signature>bool OptionMsisdn() const</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLmsi</name>
<signature>void SetLmsi(LMSI* element)</signature>
<elmentName>Lmsi</elmentName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLmsi</name>
<signature>void SetLmsi(const LMSI&amp; element)</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLmsi</name>
<signature>const LMSI&amp; GetLmsi() const</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLmsi</name>
<signature>bool OptionLmsi() const</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetImei</name>
<signature>void SetImei(IMEI* element)</signature>
<elmentName>Imei</elmentName>
<asnElementName>imei</asnElementName>
<elementTypeName>IMEI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImei</name>
<signature>void SetImei(const IMEI&amp; element)</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>IMEI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImei</name>
<signature>const IMEI&amp; GetImei() const</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>IMEI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImei</name>
<signature>bool OptionImei() const</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>IMEI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcs_Priority</name>
<signature>void SetLcs_Priority(LCS_Priority* element)</signature>
<elmentName>Lcs_Priority</elmentName>
<asnElementName>lcs-Priority</asnElementName>
<elementTypeName>LCS_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_Priority</name>
<signature>void SetLcs_Priority(const LCS_Priority&amp; element)</signature>
<elementName>Lcs_Priority</elementName>
<asnElementName>lcs-Priority</asnElementName>
<elementTypeName>LCS_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_Priority</name>
<signature>const LCS_Priority&amp; GetLcs_Priority() const</signature>
<elementName>Lcs_Priority</elementName>
<asnElementName>lcs-Priority</asnElementName>
<elementTypeName>LCS_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_Priority</name>
<signature>bool OptionLcs_Priority() const</signature>
<elementName>Lcs_Priority</elementName>
<asnElementName>lcs-Priority</asnElementName>
<elementTypeName>LCS_Priority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcs_QoS</name>
<signature>void SetLcs_QoS(LCS_QoS* element)</signature>
<elmentName>Lcs_QoS</elmentName>
<asnElementName>lcs-QoS</asnElementName>
<elementTypeName>LCS_QoS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_QoS</name>
<signature>void SetLcs_QoS(const LCS_QoS&amp; element)</signature>
<elementName>Lcs_QoS</elementName>
<asnElementName>lcs-QoS</asnElementName>
<elementTypeName>LCS_QoS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_QoS</name>
<signature>const LCS_QoS&amp; GetLcs_QoS() const</signature>
<elementName>Lcs_QoS</elementName>
<asnElementName>lcs-QoS</asnElementName>
<elementTypeName>LCS_QoS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_QoS</name>
<signature>bool OptionLcs_QoS() const</signature>
<elementName>Lcs_QoS</elementName>
<asnElementName>lcs-QoS</asnElementName>
<elementTypeName>LCS_QoS</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSupportedGADShapes</name>
<signature>void SetSupportedGADShapes(SupportedGADShapes* element)</signature>
<elmentName>SupportedGADShapes</elmentName>
<asnElementName>supportedGADShapes</asnElementName>
<elementTypeName>SupportedGADShapes</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSupportedGADShapes</name>
<signature>void SetSupportedGADShapes(const SupportedGADShapes&amp; element)</signature>
<elementName>SupportedGADShapes</elementName>
<asnElementName>supportedGADShapes</asnElementName>
<elementTypeName>SupportedGADShapes</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSupportedGADShapes</name>
<signature>const SupportedGADShapes&amp; GetSupportedGADShapes() const</signature>
<elementName>SupportedGADShapes</elementName>
<asnElementName>supportedGADShapes</asnElementName>
<elementTypeName>SupportedGADShapes</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSupportedGADShapes</name>
<signature>bool OptionSupportedGADShapes() const</signature>
<elementName>SupportedGADShapes</elementName>
<asnElementName>supportedGADShapes</asnElementName>
<elementTypeName>SupportedGADShapes</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcs_ReferenceNumber</name>
<signature>void SetLcs_ReferenceNumber(LCS_ReferenceNumber* element)</signature>
<elmentName>Lcs_ReferenceNumber</elmentName>
<asnElementName>lcs-ReferenceNumber</asnElementName>
<elementTypeName>LCS_ReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_ReferenceNumber</name>
<signature>void SetLcs_ReferenceNumber(const LCS_ReferenceNumber&amp; element)</signature>
<elementName>Lcs_ReferenceNumber</elementName>
<asnElementName>lcs-ReferenceNumber</asnElementName>
<elementTypeName>LCS_ReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_ReferenceNumber</name>
<signature>const LCS_ReferenceNumber&amp; GetLcs_ReferenceNumber() const</signature>
<elementName>Lcs_ReferenceNumber</elementName>
<asnElementName>lcs-ReferenceNumber</asnElementName>
<elementTypeName>LCS_ReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_ReferenceNumber</name>
<signature>bool OptionLcs_ReferenceNumber() const</signature>
<elementName>Lcs_ReferenceNumber</elementName>
<asnElementName>lcs-ReferenceNumber</asnElementName>
<elementTypeName>LCS_ReferenceNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcsServiceTypeID</name>
<signature>void SetLcsServiceTypeID(LCSServiceTypeID* element)</signature>
<elmentName>LcsServiceTypeID</elmentName>
<asnElementName>lcsServiceTypeID</asnElementName>
<elementTypeName>LCSServiceTypeID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcsServiceTypeID</name>
<signature>void SetLcsServiceTypeID(const LCSServiceTypeID&amp; element)</signature>
<elementName>LcsServiceTypeID</elementName>
<asnElementName>lcsServiceTypeID</asnElementName>
<elementTypeName>LCSServiceTypeID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcsServiceTypeID</name>
<signature>const LCSServiceTypeID&amp; GetLcsServiceTypeID() const</signature>
<elementName>LcsServiceTypeID</elementName>
<asnElementName>lcsServiceTypeID</asnElementName>
<elementTypeName>LCSServiceTypeID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcsServiceTypeID</name>
<signature>bool OptionLcsServiceTypeID() const</signature>
<elementName>LcsServiceTypeID</elementName>
<asnElementName>lcsServiceTypeID</asnElementName>
<elementTypeName>LCSServiceTypeID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcsCodeword</name>
<signature>void SetLcsCodeword(LCSCodeword* element)</signature>
<elmentName>LcsCodeword</elmentName>
<asnElementName>lcsCodeword</asnElementName>
<elementTypeName>LCSCodeword</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcsCodeword</name>
<signature>void SetLcsCodeword(const LCSCodeword&amp; element)</signature>
<elementName>LcsCodeword</elementName>
<asnElementName>lcsCodeword</asnElementName>
<elementTypeName>LCSCodeword</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcsCodeword</name>
<signature>const LCSCodeword&amp; GetLcsCodeword() const</signature>
<elementName>LcsCodeword</elementName>
<asnElementName>lcsCodeword</asnElementName>
<elementTypeName>LCSCodeword</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcsCodeword</name>
<signature>bool OptionLcsCodeword() const</signature>
<elementName>LcsCodeword</elementName>
<asnElementName>lcsCodeword</asnElementName>
<elementTypeName>LCSCodeword</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcs_PrivacyCheck</name>
<signature>void SetLcs_PrivacyCheck(LCS_PrivacyCheck* element)</signature>
<elmentName>Lcs_PrivacyCheck</elmentName>
<asnElementName>lcs-PrivacyCheck</asnElementName>
<elementTypeName>LCS_PrivacyCheck</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_PrivacyCheck</name>
<signature>void SetLcs_PrivacyCheck(const LCS_PrivacyCheck&amp; element)</signature>
<elementName>Lcs_PrivacyCheck</elementName>
<asnElementName>lcs-PrivacyCheck</asnElementName>
<elementTypeName>LCS_PrivacyCheck</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_PrivacyCheck</name>
<signature>const LCS_PrivacyCheck&amp; GetLcs_PrivacyCheck() const</signature>
<elementName>Lcs_PrivacyCheck</elementName>
<asnElementName>lcs-PrivacyCheck</asnElementName>
<elementTypeName>LCS_PrivacyCheck</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_PrivacyCheck</name>
<signature>bool OptionLcs_PrivacyCheck() const</signature>
<elementName>Lcs_PrivacyCheck</elementName>
<asnElementName>lcs-PrivacyCheck</asnElementName>
<elementTypeName>LCS_PrivacyCheck</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAreaEventInfo</name>
<signature>void SetAreaEventInfo(AreaEventInfo* element)</signature>
<elmentName>AreaEventInfo</elmentName>
<asnElementName>areaEventInfo</asnElementName>
<elementTypeName>AreaEventInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAreaEventInfo</name>
<signature>void SetAreaEventInfo(const AreaEventInfo&amp; element)</signature>
<elementName>AreaEventInfo</elementName>
<asnElementName>areaEventInfo</asnElementName>
<elementTypeName>AreaEventInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAreaEventInfo</name>
<signature>const AreaEventInfo&amp; GetAreaEventInfo() const</signature>
<elementName>AreaEventInfo</elementName>
<asnElementName>areaEventInfo</asnElementName>
<elementTypeName>AreaEventInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAreaEventInfo</name>
<signature>bool OptionAreaEventInfo() const</signature>
<elementName>AreaEventInfo</elementName>
<asnElementName>areaEventInfo</asnElementName>
<elementTypeName>AreaEventInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetH_gmlc_Address</name>
<signature>void SetH_gmlc_Address(GSN_Address* element)</signature>
<elmentName>H_gmlc_Address</elmentName>
<asnElementName>h-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetH_gmlc_Address</name>
<signature>void SetH_gmlc_Address(const GSN_Address&amp; element)</signature>
<elementName>H_gmlc_Address</elementName>
<asnElementName>h-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetH_gmlc_Address</name>
<signature>const GSN_Address&amp; GetH_gmlc_Address() const</signature>
<elementName>H_gmlc_Address</elementName>
<asnElementName>h-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionH_gmlc_Address</name>
<signature>bool OptionH_gmlc_Address() const</signature>
<elementName>H_gmlc_Address</elementName>
<asnElementName>h-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMo_lrShortCircuitIndicator</name>
<signature>void SetMo_lrShortCircuitIndicator(Mo_lrShortCircuitIndicator* element)</signature>
<elmentName>Mo_lrShortCircuitIndicator</elmentName>
<asnElementName>mo-lrShortCircuitIndicator</asnElementName>
<elementTypeName>Mo_lrShortCircuitIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMo_lrShortCircuitIndicator</name>
<signature>void SetMo_lrShortCircuitIndicator(const Mo_lrShortCircuitIndicator&amp; element)</signature>
<elementName>Mo_lrShortCircuitIndicator</elementName>
<asnElementName>mo-lrShortCircuitIndicator</asnElementName>
<elementTypeName>Mo_lrShortCircuitIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMo_lrShortCircuitIndicator</name>
<signature>const Mo_lrShortCircuitIndicator&amp; GetMo_lrShortCircuitIndicator() const</signature>
<elementName>Mo_lrShortCircuitIndicator</elementName>
<asnElementName>mo-lrShortCircuitIndicator</asnElementName>
<elementTypeName>Mo_lrShortCircuitIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMo_lrShortCircuitIndicator</name>
<signature>bool OptionMo_lrShortCircuitIndicator() const</signature>
<elementName>Mo_lrShortCircuitIndicator</elementName>
<asnElementName>mo-lrShortCircuitIndicator</asnElementName>
<elementTypeName>Mo_lrShortCircuitIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPeriodicLDRInfo</name>
<signature>void SetPeriodicLDRInfo(PeriodicLDRInfo* element)</signature>
<elmentName>PeriodicLDRInfo</elmentName>
<asnElementName>periodicLDRInfo</asnElementName>
<elementTypeName>PeriodicLDRInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPeriodicLDRInfo</name>
<signature>void SetPeriodicLDRInfo(const PeriodicLDRInfo&amp; element)</signature>
<elementName>PeriodicLDRInfo</elementName>
<asnElementName>periodicLDRInfo</asnElementName>
<elementTypeName>PeriodicLDRInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPeriodicLDRInfo</name>
<signature>const PeriodicLDRInfo&amp; GetPeriodicLDRInfo() const</signature>
<elementName>PeriodicLDRInfo</elementName>
<asnElementName>periodicLDRInfo</asnElementName>
<elementTypeName>PeriodicLDRInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPeriodicLDRInfo</name>
<signature>bool OptionPeriodicLDRInfo() const</signature>
<elementName>PeriodicLDRInfo</elementName>
<asnElementName>periodicLDRInfo</asnElementName>
<elementTypeName>PeriodicLDRInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReportingPLMNList</name>
<signature>void SetReportingPLMNList(ReportingPLMNList* element)</signature>
<elmentName>ReportingPLMNList</elmentName>
<asnElementName>reportingPLMNList</asnElementName>
<elementTypeName>ReportingPLMNList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReportingPLMNList</name>
<signature>void SetReportingPLMNList(const ReportingPLMNList&amp; element)</signature>
<elementName>ReportingPLMNList</elementName>
<asnElementName>reportingPLMNList</asnElementName>
<elementTypeName>ReportingPLMNList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReportingPLMNList</name>
<signature>const ReportingPLMNList&amp; GetReportingPLMNList() const</signature>
<elementName>ReportingPLMNList</elementName>
<asnElementName>reportingPLMNList</asnElementName>
<elementTypeName>ReportingPLMNList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReportingPLMNList</name>
<signature>bool OptionReportingPLMNList() const</signature>
<elementName>ReportingPLMNList</elementName>
<asnElementName>reportingPLMNList</asnElementName>
<elementTypeName>ReportingPLMNList</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ProvideSubscriberLocation-Arg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ProvideSubscriberLocation-Arg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    locationType LocationType -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mlc-Number ISDN-AddressString -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-ClientID [0] IMPLICIT LCS-ClientID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    privacyOverride [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    imsi [2] IMPLICIT IMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    msisdn [3] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lmsi [4] IMPLICIT LMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    imei [5] IMPLICIT IMEI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-Priority [6] IMPLICIT LCS-Priority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-QoS [7] IMPLICIT LCS-QoS -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [8] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    supportedGADShapes [9] IMPLICIT SupportedGADShapes -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-ReferenceNumber [10] IMPLICIT LCS-ReferenceNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcsServiceTypeID [11] IMPLICIT LCSServiceTypeID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcsCodeword [12] IMPLICIT LCSCodeword -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-PrivacyCheck [13] IMPLICIT LCS-PrivacyCheck -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    areaEventInfo [14] IMPLICIT AreaEventInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    h-gmlc-Address [15] IMPLICIT GSN-Address -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mo-lrShortCircuitIndicator [16] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    periodicLDRInfo [17] IMPLICIT PeriodicLDRInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    reportingPLMNList [18] IMPLICIT ReportingPLMNList -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

