<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>SendIdentificationArg</className>
<asnTypeName>SendIdentificationArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetTmsi</name>
<signature>void SetTmsi(TMSI* element)</signature>
<elmentName>Tmsi</elmentName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTmsi</name>
<signature>void SetTmsi(const TMSI&amp; element)</signature>
<elementName>Tmsi</elementName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTmsi</name>
<signature>const TMSI&amp; GetTmsi() const</signature>
<elementName>Tmsi</elementName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetNumberOfRequestedVectors</name>
<signature>void SetNumberOfRequestedVectors(NumberOfRequestedVectors* element)</signature>
<elmentName>NumberOfRequestedVectors</elmentName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNumberOfRequestedVectors</name>
<signature>void SetNumberOfRequestedVectors(const NumberOfRequestedVectors&amp; element)</signature>
<elementName>NumberOfRequestedVectors</elementName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNumberOfRequestedVectors</name>
<signature>const NumberOfRequestedVectors&amp; GetNumberOfRequestedVectors() const</signature>
<elementName>NumberOfRequestedVectors</elementName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNumberOfRequestedVectors</name>
<signature>bool OptionNumberOfRequestedVectors() const</signature>
<elementName>NumberOfRequestedVectors</elementName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSegmentationProhibited</name>
<signature>void SetSegmentationProhibited(SegmentationProhibited* element)</signature>
<elmentName>SegmentationProhibited</elmentName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSegmentationProhibited</name>
<signature>void SetSegmentationProhibited(const SegmentationProhibited&amp; element)</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSegmentationProhibited</name>
<signature>const SegmentationProhibited&amp; GetSegmentationProhibited() const</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSegmentationProhibited</name>
<signature>bool OptionSegmentationProhibited() const</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMsc_Number</name>
<signature>void SetMsc_Number(ISDN_AddressString* element)</signature>
<elmentName>Msc_Number</elmentName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMsc_Number</name>
<signature>void SetMsc_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Msc_Number</elementName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMsc_Number</name>
<signature>const ISDN_AddressString&amp; GetMsc_Number() const</signature>
<elementName>Msc_Number</elementName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMsc_Number</name>
<signature>bool OptionMsc_Number() const</signature>
<elementName>Msc_Number</elementName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPrevious_LAI</name>
<signature>void SetPrevious_LAI(LAIFixedLength* element)</signature>
<elmentName>Previous_LAI</elmentName>
<asnElementName>previous-LAI</asnElementName>
<elementTypeName>LAIFixedLength</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPrevious_LAI</name>
<signature>void SetPrevious_LAI(const LAIFixedLength&amp; element)</signature>
<elementName>Previous_LAI</elementName>
<asnElementName>previous-LAI</asnElementName>
<elementTypeName>LAIFixedLength</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPrevious_LAI</name>
<signature>const LAIFixedLength&amp; GetPrevious_LAI() const</signature>
<elementName>Previous_LAI</elementName>
<asnElementName>previous-LAI</asnElementName>
<elementTypeName>LAIFixedLength</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPrevious_LAI</name>
<signature>bool OptionPrevious_LAI() const</signature>
<elementName>Previous_LAI</elementName>
<asnElementName>previous-LAI</asnElementName>
<elementTypeName>LAIFixedLength</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetHopCounter</name>
<signature>void SetHopCounter(HopCounter* element)</signature>
<elmentName>HopCounter</elmentName>
<asnElementName>hopCounter</asnElementName>
<elementTypeName>HopCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetHopCounter</name>
<signature>void SetHopCounter(const HopCounter&amp; element)</signature>
<elementName>HopCounter</elementName>
<asnElementName>hopCounter</asnElementName>
<elementTypeName>HopCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetHopCounter</name>
<signature>const HopCounter&amp; GetHopCounter() const</signature>
<elementName>HopCounter</elementName>
<asnElementName>hopCounter</asnElementName>
<elementTypeName>HopCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionHopCounter</name>
<signature>bool OptionHopCounter() const</signature>
<elementName>HopCounter</elementName>
<asnElementName>hopCounter</asnElementName>
<elementTypeName>HopCounter</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMtRoamingForwardingSupported</name>
<signature>void SetMtRoamingForwardingSupported(MtRoamingForwardingSupported* element)</signature>
<elmentName>MtRoamingForwardingSupported</elmentName>
<asnElementName>mtRoamingForwardingSupported</asnElementName>
<elementTypeName>MtRoamingForwardingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMtRoamingForwardingSupported</name>
<signature>void SetMtRoamingForwardingSupported(const MtRoamingForwardingSupported&amp; element)</signature>
<elementName>MtRoamingForwardingSupported</elementName>
<asnElementName>mtRoamingForwardingSupported</asnElementName>
<elementTypeName>MtRoamingForwardingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMtRoamingForwardingSupported</name>
<signature>const MtRoamingForwardingSupported&amp; GetMtRoamingForwardingSupported() const</signature>
<elementName>MtRoamingForwardingSupported</elementName>
<asnElementName>mtRoamingForwardingSupported</asnElementName>
<elementTypeName>MtRoamingForwardingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMtRoamingForwardingSupported</name>
<signature>bool OptionMtRoamingForwardingSupported() const</signature>
<elementName>MtRoamingForwardingSupported</elementName>
<asnElementName>mtRoamingForwardingSupported</asnElementName>
<elementTypeName>MtRoamingForwardingSupported</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNewVLR_Number</name>
<signature>void SetNewVLR_Number(ISDN_AddressString* element)</signature>
<elmentName>NewVLR_Number</elmentName>
<asnElementName>newVLR-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNewVLR_Number</name>
<signature>void SetNewVLR_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>NewVLR_Number</elementName>
<asnElementName>newVLR-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNewVLR_Number</name>
<signature>const ISDN_AddressString&amp; GetNewVLR_Number() const</signature>
<elementName>NewVLR_Number</elementName>
<asnElementName>newVLR-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNewVLR_Number</name>
<signature>bool OptionNewVLR_Number() const</signature>
<elementName>NewVLR_Number</elementName>
<asnElementName>newVLR-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNew_lmsi</name>
<signature>void SetNew_lmsi(LMSI* element)</signature>
<elmentName>New_lmsi</elmentName>
<asnElementName>new-lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNew_lmsi</name>
<signature>void SetNew_lmsi(const LMSI&amp; element)</signature>
<elementName>New_lmsi</elementName>
<asnElementName>new-lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNew_lmsi</name>
<signature>const LMSI&amp; GetNew_lmsi() const</signature>
<elementName>New_lmsi</elementName>
<asnElementName>new-lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNew_lmsi</name>
<signature>bool OptionNew_lmsi() const</signature>
<elementName>New_lmsi</elementName>
<asnElementName>new-lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SendIdentificationArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SendIdentificationArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    tmsi TMSI -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    numberOfRequestedVectors NumberOfRequestedVectors -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    segmentationProhibited NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    msc-Number ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    previous-LAI [0] IMPLICIT LAIFixedLength -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    hopCounter [1] IMPLICIT HopCounter -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mtRoamingForwardingSupported [2] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    newVLR-Number [3] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    new-lmsi [4] IMPLICIT LMSI -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

