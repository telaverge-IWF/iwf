<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CallBarringData</className>
<asnTypeName>CallBarringData</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetCallBarringFeatureList</name>
<signature>void SetCallBarringFeatureList(Ext_CallBarFeatureList* element)</signature>
<elmentName>CallBarringFeatureList</elmentName>
<asnElementName>callBarringFeatureList</asnElementName>
<elementTypeName>Ext_CallBarFeatureList</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallBarringFeatureList</name>
<signature>void SetCallBarringFeatureList(const Ext_CallBarFeatureList&amp; element)</signature>
<elementName>CallBarringFeatureList</elementName>
<asnElementName>callBarringFeatureList</asnElementName>
<elementTypeName>Ext_CallBarFeatureList</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallBarringFeatureList</name>
<signature>const Ext_CallBarFeatureList&amp; GetCallBarringFeatureList() const</signature>
<elementName>CallBarringFeatureList</elementName>
<asnElementName>callBarringFeatureList</asnElementName>
<elementTypeName>Ext_CallBarFeatureList</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetPassword</name>
<signature>void SetPassword(Password* element)</signature>
<elmentName>Password</elmentName>
<asnElementName>password</asnElementName>
<elementTypeName>Password</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPassword</name>
<signature>void SetPassword(const Password&amp; element)</signature>
<elementName>Password</elementName>
<asnElementName>password</asnElementName>
<elementTypeName>Password</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPassword</name>
<signature>const Password&amp; GetPassword() const</signature>
<elementName>Password</elementName>
<asnElementName>password</asnElementName>
<elementTypeName>Password</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPassword</name>
<signature>bool OptionPassword() const</signature>
<elementName>Password</elementName>
<asnElementName>password</asnElementName>
<elementTypeName>Password</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetWrongPasswordAttemptsCounter</name>
<signature>void SetWrongPasswordAttemptsCounter(WrongPasswordAttemptsCounter* element)</signature>
<elmentName>WrongPasswordAttemptsCounter</elmentName>
<asnElementName>wrongPasswordAttemptsCounter</asnElementName>
<elementTypeName>WrongPasswordAttemptsCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetWrongPasswordAttemptsCounter</name>
<signature>void SetWrongPasswordAttemptsCounter(const WrongPasswordAttemptsCounter&amp; element)</signature>
<elementName>WrongPasswordAttemptsCounter</elementName>
<asnElementName>wrongPasswordAttemptsCounter</asnElementName>
<elementTypeName>WrongPasswordAttemptsCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetWrongPasswordAttemptsCounter</name>
<signature>const WrongPasswordAttemptsCounter&amp; GetWrongPasswordAttemptsCounter() const</signature>
<elementName>WrongPasswordAttemptsCounter</elementName>
<asnElementName>wrongPasswordAttemptsCounter</asnElementName>
<elementTypeName>WrongPasswordAttemptsCounter</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionWrongPasswordAttemptsCounter</name>
<signature>bool OptionWrongPasswordAttemptsCounter() const</signature>
<elementName>WrongPasswordAttemptsCounter</elementName>
<asnElementName>wrongPasswordAttemptsCounter</asnElementName>
<elementTypeName>WrongPasswordAttemptsCounter</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNotificationToCSE</name>
<signature>void SetNotificationToCSE(NotificationToCSE* element)</signature>
<elmentName>NotificationToCSE</elmentName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNotificationToCSE</name>
<signature>void SetNotificationToCSE(const NotificationToCSE&amp; element)</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNotificationToCSE</name>
<signature>const NotificationToCSE&amp; GetNotificationToCSE() const</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNotificationToCSE</name>
<signature>bool OptionNotificationToCSE() const</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CallBarringData information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CallBarringData ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    callBarringFeatureList Ext-CallBarFeatureList -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    password Password -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    wrongPasswordAttemptsCounter WrongPasswordAttemptsCounter -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    notificationToCSE NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

