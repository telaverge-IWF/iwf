<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ProcessGroupCallSignallingArg</className>
<asnTypeName>ProcessGroupCallSignallingArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetUplinkRequest</name>
<signature>void SetUplinkRequest(UplinkRequest* element)</signature>
<elmentName>UplinkRequest</elmentName>
<asnElementName>uplinkRequest</asnElementName>
<elementTypeName>UplinkRequest</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkRequest</name>
<signature>void SetUplinkRequest(const UplinkRequest&amp; element)</signature>
<elementName>UplinkRequest</elementName>
<asnElementName>uplinkRequest</asnElementName>
<elementTypeName>UplinkRequest</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkRequest</name>
<signature>const UplinkRequest&amp; GetUplinkRequest() const</signature>
<elementName>UplinkRequest</elementName>
<asnElementName>uplinkRequest</asnElementName>
<elementTypeName>UplinkRequest</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkRequest</name>
<signature>bool OptionUplinkRequest() const</signature>
<elementName>UplinkRequest</elementName>
<asnElementName>uplinkRequest</asnElementName>
<elementTypeName>UplinkRequest</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkReleaseIndication</name>
<signature>void SetUplinkReleaseIndication(UplinkReleaseIndication* element)</signature>
<elmentName>UplinkReleaseIndication</elmentName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkReleaseIndication</name>
<signature>void SetUplinkReleaseIndication(const UplinkReleaseIndication&amp; element)</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkReleaseIndication</name>
<signature>const UplinkReleaseIndication&amp; GetUplinkReleaseIndication() const</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkReleaseIndication</name>
<signature>bool OptionUplinkReleaseIndication() const</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReleaseGroupCall</name>
<signature>void SetReleaseGroupCall(ReleaseGroupCall* element)</signature>
<elmentName>ReleaseGroupCall</elmentName>
<asnElementName>releaseGroupCall</asnElementName>
<elementTypeName>ReleaseGroupCall</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReleaseGroupCall</name>
<signature>void SetReleaseGroupCall(const ReleaseGroupCall&amp; element)</signature>
<elementName>ReleaseGroupCall</elementName>
<asnElementName>releaseGroupCall</asnElementName>
<elementTypeName>ReleaseGroupCall</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReleaseGroupCall</name>
<signature>const ReleaseGroupCall&amp; GetReleaseGroupCall() const</signature>
<elementName>ReleaseGroupCall</elementName>
<asnElementName>releaseGroupCall</asnElementName>
<elementTypeName>ReleaseGroupCall</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReleaseGroupCall</name>
<signature>bool OptionReleaseGroupCall() const</signature>
<elementName>ReleaseGroupCall</elementName>
<asnElementName>releaseGroupCall</asnElementName>
<elementTypeName>ReleaseGroupCall</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTalkerPriority</name>
<signature>void SetTalkerPriority(TalkerPriority* element)</signature>
<elmentName>TalkerPriority</elmentName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTalkerPriority</name>
<signature>void SetTalkerPriority(const TalkerPriority&amp; element)</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTalkerPriority</name>
<signature>const TalkerPriority&amp; GetTalkerPriority() const</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTalkerPriority</name>
<signature>bool OptionTalkerPriority() const</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalInfo</name>
<signature>void SetAdditionalInfo(AdditionalInfo* element)</signature>
<elmentName>AdditionalInfo</elmentName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalInfo</name>
<signature>void SetAdditionalInfo(const AdditionalInfo&amp; element)</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalInfo</name>
<signature>const AdditionalInfo&amp; GetAdditionalInfo() const</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalInfo</name>
<signature>bool OptionAdditionalInfo() const</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEmergencyModeResetCommandFlag</name>
<signature>void SetEmergencyModeResetCommandFlag(EmergencyModeResetCommandFlag* element)</signature>
<elmentName>EmergencyModeResetCommandFlag</elmentName>
<asnElementName>emergencyModeResetCommandFlag</asnElementName>
<elementTypeName>EmergencyModeResetCommandFlag</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEmergencyModeResetCommandFlag</name>
<signature>void SetEmergencyModeResetCommandFlag(const EmergencyModeResetCommandFlag&amp; element)</signature>
<elementName>EmergencyModeResetCommandFlag</elementName>
<asnElementName>emergencyModeResetCommandFlag</asnElementName>
<elementTypeName>EmergencyModeResetCommandFlag</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEmergencyModeResetCommandFlag</name>
<signature>const EmergencyModeResetCommandFlag&amp; GetEmergencyModeResetCommandFlag() const</signature>
<elementName>EmergencyModeResetCommandFlag</elementName>
<asnElementName>emergencyModeResetCommandFlag</asnElementName>
<elementTypeName>EmergencyModeResetCommandFlag</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEmergencyModeResetCommandFlag</name>
<signature>bool OptionEmergencyModeResetCommandFlag() const</signature>
<elementName>EmergencyModeResetCommandFlag</elementName>
<asnElementName>emergencyModeResetCommandFlag</asnElementName>
<elementTypeName>EmergencyModeResetCommandFlag</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAn_APDU</name>
<signature>void SetAn_APDU(AccessNetworkSignalInfo* element)</signature>
<elmentName>An_APDU</elmentName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAn_APDU</name>
<signature>void SetAn_APDU(const AccessNetworkSignalInfo&amp; element)</signature>
<elementName>An_APDU</elementName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAn_APDU</name>
<signature>const AccessNetworkSignalInfo&amp; GetAn_APDU() const</signature>
<elementName>An_APDU</elementName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAn_APDU</name>
<signature>bool OptionAn_APDU() const</signature>
<elementName>An_APDU</elementName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ProcessGroupCallSignallingArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ProcessGroupCallSignallingArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    uplinkRequest [0] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkReleaseIndication [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    releaseGroupCall [2] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    talkerPriority [3] IMPLICIT TalkerPriority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalInfo [4] IMPLICIT AdditionalInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    emergencyModeResetCommandFlag [5] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    an-APDU [6] IMPLICIT AccessNetworkSignalInfo -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

