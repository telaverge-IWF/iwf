<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>SendAuthenticationInfoArg</className>
<asnTypeName>SendAuthenticationInfoArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetNumberOfRequestedVectors</name>
<signature>void SetNumberOfRequestedVectors(NumberOfRequestedVectors* element)</signature>
<elmentName>NumberOfRequestedVectors</elmentName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNumberOfRequestedVectors</name>
<signature>void SetNumberOfRequestedVectors(const NumberOfRequestedVectors&amp; element)</signature>
<elementName>NumberOfRequestedVectors</elementName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNumberOfRequestedVectors</name>
<signature>const NumberOfRequestedVectors&amp; GetNumberOfRequestedVectors() const</signature>
<elementName>NumberOfRequestedVectors</elementName>
<asnElementName>numberOfRequestedVectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetSegmentationProhibited</name>
<signature>void SetSegmentationProhibited(SegmentationProhibited* element)</signature>
<elmentName>SegmentationProhibited</elmentName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSegmentationProhibited</name>
<signature>void SetSegmentationProhibited(const SegmentationProhibited&amp; element)</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSegmentationProhibited</name>
<signature>const SegmentationProhibited&amp; GetSegmentationProhibited() const</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSegmentationProhibited</name>
<signature>bool OptionSegmentationProhibited() const</signature>
<elementName>SegmentationProhibited</elementName>
<asnElementName>segmentationProhibited</asnElementName>
<elementTypeName>SegmentationProhibited</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetImmediateResponsePreferred</name>
<signature>void SetImmediateResponsePreferred(ImmediateResponsePreferred* element)</signature>
<elmentName>ImmediateResponsePreferred</elmentName>
<asnElementName>immediateResponsePreferred</asnElementName>
<elementTypeName>ImmediateResponsePreferred</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImmediateResponsePreferred</name>
<signature>void SetImmediateResponsePreferred(const ImmediateResponsePreferred&amp; element)</signature>
<elementName>ImmediateResponsePreferred</elementName>
<asnElementName>immediateResponsePreferred</asnElementName>
<elementTypeName>ImmediateResponsePreferred</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImmediateResponsePreferred</name>
<signature>const ImmediateResponsePreferred&amp; GetImmediateResponsePreferred() const</signature>
<elementName>ImmediateResponsePreferred</elementName>
<asnElementName>immediateResponsePreferred</asnElementName>
<elementTypeName>ImmediateResponsePreferred</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImmediateResponsePreferred</name>
<signature>bool OptionImmediateResponsePreferred() const</signature>
<elementName>ImmediateResponsePreferred</elementName>
<asnElementName>immediateResponsePreferred</asnElementName>
<elementTypeName>ImmediateResponsePreferred</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRe_synchronisationInfo</name>
<signature>void SetRe_synchronisationInfo(Re_synchronisationInfo* element)</signature>
<elmentName>Re_synchronisationInfo</elmentName>
<asnElementName>re-synchronisationInfo</asnElementName>
<elementTypeName>Re_synchronisationInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRe_synchronisationInfo</name>
<signature>void SetRe_synchronisationInfo(const Re_synchronisationInfo&amp; element)</signature>
<elementName>Re_synchronisationInfo</elementName>
<asnElementName>re-synchronisationInfo</asnElementName>
<elementTypeName>Re_synchronisationInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRe_synchronisationInfo</name>
<signature>const Re_synchronisationInfo&amp; GetRe_synchronisationInfo() const</signature>
<elementName>Re_synchronisationInfo</elementName>
<asnElementName>re-synchronisationInfo</asnElementName>
<elementTypeName>Re_synchronisationInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRe_synchronisationInfo</name>
<signature>bool OptionRe_synchronisationInfo() const</signature>
<elementName>Re_synchronisationInfo</elementName>
<asnElementName>re-synchronisationInfo</asnElementName>
<elementTypeName>Re_synchronisationInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRequestingNodeType</name>
<signature>void SetRequestingNodeType(RequestingNodeType* element)</signature>
<elmentName>RequestingNodeType</elmentName>
<asnElementName>requestingNodeType</asnElementName>
<elementTypeName>RequestingNodeType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRequestingNodeType</name>
<signature>void SetRequestingNodeType(const RequestingNodeType&amp; element)</signature>
<elementName>RequestingNodeType</elementName>
<asnElementName>requestingNodeType</asnElementName>
<elementTypeName>RequestingNodeType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRequestingNodeType</name>
<signature>const RequestingNodeType&amp; GetRequestingNodeType() const</signature>
<elementName>RequestingNodeType</elementName>
<asnElementName>requestingNodeType</asnElementName>
<elementTypeName>RequestingNodeType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRequestingNodeType</name>
<signature>bool OptionRequestingNodeType() const</signature>
<elementName>RequestingNodeType</elementName>
<asnElementName>requestingNodeType</asnElementName>
<elementTypeName>RequestingNodeType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRequestingPLMN_Id</name>
<signature>void SetRequestingPLMN_Id(PLMN_Id* element)</signature>
<elmentName>RequestingPLMN_Id</elmentName>
<asnElementName>requestingPLMN-Id</asnElementName>
<elementTypeName>PLMN_Id</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRequestingPLMN_Id</name>
<signature>void SetRequestingPLMN_Id(const PLMN_Id&amp; element)</signature>
<elementName>RequestingPLMN_Id</elementName>
<asnElementName>requestingPLMN-Id</asnElementName>
<elementTypeName>PLMN_Id</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRequestingPLMN_Id</name>
<signature>const PLMN_Id&amp; GetRequestingPLMN_Id() const</signature>
<elementName>RequestingPLMN_Id</elementName>
<asnElementName>requestingPLMN-Id</asnElementName>
<elementTypeName>PLMN_Id</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRequestingPLMN_Id</name>
<signature>bool OptionRequestingPLMN_Id() const</signature>
<elementName>RequestingPLMN_Id</elementName>
<asnElementName>requestingPLMN-Id</asnElementName>
<elementTypeName>PLMN_Id</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNumberOfRequestedAdditional_Vectors</name>
<signature>void SetNumberOfRequestedAdditional_Vectors(NumberOfRequestedVectors* element)</signature>
<elmentName>NumberOfRequestedAdditional_Vectors</elmentName>
<asnElementName>numberOfRequestedAdditional-Vectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNumberOfRequestedAdditional_Vectors</name>
<signature>void SetNumberOfRequestedAdditional_Vectors(const NumberOfRequestedVectors&amp; element)</signature>
<elementName>NumberOfRequestedAdditional_Vectors</elementName>
<asnElementName>numberOfRequestedAdditional-Vectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNumberOfRequestedAdditional_Vectors</name>
<signature>const NumberOfRequestedVectors&amp; GetNumberOfRequestedAdditional_Vectors() const</signature>
<elementName>NumberOfRequestedAdditional_Vectors</elementName>
<asnElementName>numberOfRequestedAdditional-Vectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNumberOfRequestedAdditional_Vectors</name>
<signature>bool OptionNumberOfRequestedAdditional_Vectors() const</signature>
<elementName>NumberOfRequestedAdditional_Vectors</elementName>
<asnElementName>numberOfRequestedAdditional-Vectors</asnElementName>
<elementTypeName>NumberOfRequestedVectors</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalVectorsAreForEPS</name>
<signature>void SetAdditionalVectorsAreForEPS(AdditionalVectorsAreForEPS* element)</signature>
<elmentName>AdditionalVectorsAreForEPS</elmentName>
<asnElementName>additionalVectorsAreForEPS</asnElementName>
<elementTypeName>AdditionalVectorsAreForEPS</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalVectorsAreForEPS</name>
<signature>void SetAdditionalVectorsAreForEPS(const AdditionalVectorsAreForEPS&amp; element)</signature>
<elementName>AdditionalVectorsAreForEPS</elementName>
<asnElementName>additionalVectorsAreForEPS</asnElementName>
<elementTypeName>AdditionalVectorsAreForEPS</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalVectorsAreForEPS</name>
<signature>const AdditionalVectorsAreForEPS&amp; GetAdditionalVectorsAreForEPS() const</signature>
<elementName>AdditionalVectorsAreForEPS</elementName>
<asnElementName>additionalVectorsAreForEPS</asnElementName>
<elementTypeName>AdditionalVectorsAreForEPS</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalVectorsAreForEPS</name>
<signature>bool OptionAdditionalVectorsAreForEPS() const</signature>
<elementName>AdditionalVectorsAreForEPS</elementName>
<asnElementName>additionalVectorsAreForEPS</asnElementName>
<elementTypeName>AdditionalVectorsAreForEPS</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SendAuthenticationInfoArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SendAuthenticationInfoArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    imsi [0] IMPLICIT IMSI -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    numberOfRequestedVectors NumberOfRequestedVectors -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    segmentationProhibited NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    immediateResponsePreferred [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    re-synchronisationInfo Re-synchronisationInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [2] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    requestingNodeType [3] IMPLICIT RequestingNodeType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    requestingPLMN-Id [4] IMPLICIT PLMN-Id -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    numberOfRequestedAdditional-Vectors [5] IMPLICIT NumberOfRequestedVectors -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalVectorsAreForEPS [6] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

