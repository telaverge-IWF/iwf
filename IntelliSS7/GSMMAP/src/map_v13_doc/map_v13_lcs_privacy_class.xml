<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>LCS_PrivacyClass</className>
<asnTypeName>LCS-PrivacyClass</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetSs_Code</name>
<signature>void SetSs_Code(SS_Code* element)</signature>
<elmentName>Ss_Code</elmentName>
<asnElementName>ss-Code</asnElementName>
<elementTypeName>SS_Code</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSs_Code</name>
<signature>void SetSs_Code(const SS_Code&amp; element)</signature>
<elementName>Ss_Code</elementName>
<asnElementName>ss-Code</asnElementName>
<elementTypeName>SS_Code</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSs_Code</name>
<signature>const SS_Code&amp; GetSs_Code() const</signature>
<elementName>Ss_Code</elementName>
<asnElementName>ss-Code</asnElementName>
<elementTypeName>SS_Code</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetSs_Status</name>
<signature>void SetSs_Status(Ext_SS_Status* element)</signature>
<elmentName>Ss_Status</elmentName>
<asnElementName>ss-Status</asnElementName>
<elementTypeName>Ext_SS_Status</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSs_Status</name>
<signature>void SetSs_Status(const Ext_SS_Status&amp; element)</signature>
<elementName>Ss_Status</elementName>
<asnElementName>ss-Status</asnElementName>
<elementTypeName>Ext_SS_Status</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSs_Status</name>
<signature>const Ext_SS_Status&amp; GetSs_Status() const</signature>
<elementName>Ss_Status</elementName>
<asnElementName>ss-Status</asnElementName>
<elementTypeName>Ext_SS_Status</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetNotificationToMSUser</name>
<signature>void SetNotificationToMSUser(NotificationToMSUser* element)</signature>
<elmentName>NotificationToMSUser</elmentName>
<asnElementName>notificationToMSUser</asnElementName>
<elementTypeName>NotificationToMSUser</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNotificationToMSUser</name>
<signature>void SetNotificationToMSUser(const NotificationToMSUser&amp; element)</signature>
<elementName>NotificationToMSUser</elementName>
<asnElementName>notificationToMSUser</asnElementName>
<elementTypeName>NotificationToMSUser</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNotificationToMSUser</name>
<signature>const NotificationToMSUser&amp; GetNotificationToMSUser() const</signature>
<elementName>NotificationToMSUser</elementName>
<asnElementName>notificationToMSUser</asnElementName>
<elementTypeName>NotificationToMSUser</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNotificationToMSUser</name>
<signature>bool OptionNotificationToMSUser() const</signature>
<elementName>NotificationToMSUser</elementName>
<asnElementName>notificationToMSUser</asnElementName>
<elementTypeName>NotificationToMSUser</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExternalClientList</name>
<signature>void SetExternalClientList(ExternalClientList* element)</signature>
<elmentName>ExternalClientList</elmentName>
<asnElementName>externalClientList</asnElementName>
<elementTypeName>ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExternalClientList</name>
<signature>void SetExternalClientList(const ExternalClientList&amp; element)</signature>
<elementName>ExternalClientList</elementName>
<asnElementName>externalClientList</asnElementName>
<elementTypeName>ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExternalClientList</name>
<signature>const ExternalClientList&amp; GetExternalClientList() const</signature>
<elementName>ExternalClientList</elementName>
<asnElementName>externalClientList</asnElementName>
<elementTypeName>ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExternalClientList</name>
<signature>bool OptionExternalClientList() const</signature>
<elementName>ExternalClientList</elementName>
<asnElementName>externalClientList</asnElementName>
<elementTypeName>ExternalClientList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPlmnClientList</name>
<signature>void SetPlmnClientList(PLMNClientList* element)</signature>
<elmentName>PlmnClientList</elmentName>
<asnElementName>plmnClientList</asnElementName>
<elementTypeName>PLMNClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPlmnClientList</name>
<signature>void SetPlmnClientList(const PLMNClientList&amp; element)</signature>
<elementName>PlmnClientList</elementName>
<asnElementName>plmnClientList</asnElementName>
<elementTypeName>PLMNClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPlmnClientList</name>
<signature>const PLMNClientList&amp; GetPlmnClientList() const</signature>
<elementName>PlmnClientList</elementName>
<asnElementName>plmnClientList</asnElementName>
<elementTypeName>PLMNClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPlmnClientList</name>
<signature>bool OptionPlmnClientList() const</signature>
<elementName>PlmnClientList</elementName>
<asnElementName>plmnClientList</asnElementName>
<elementTypeName>PLMNClientList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExt_externalClientList</name>
<signature>void SetExt_externalClientList(Ext_ExternalClientList* element)</signature>
<elmentName>Ext_externalClientList</elmentName>
<asnElementName>ext-externalClientList</asnElementName>
<elementTypeName>Ext_ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExt_externalClientList</name>
<signature>void SetExt_externalClientList(const Ext_ExternalClientList&amp; element)</signature>
<elementName>Ext_externalClientList</elementName>
<asnElementName>ext-externalClientList</asnElementName>
<elementTypeName>Ext_ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExt_externalClientList</name>
<signature>const Ext_ExternalClientList&amp; GetExt_externalClientList() const</signature>
<elementName>Ext_externalClientList</elementName>
<asnElementName>ext-externalClientList</asnElementName>
<elementTypeName>Ext_ExternalClientList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExt_externalClientList</name>
<signature>bool OptionExt_externalClientList() const</signature>
<elementName>Ext_externalClientList</elementName>
<asnElementName>ext-externalClientList</asnElementName>
<elementTypeName>Ext_ExternalClientList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceTypeList</name>
<signature>void SetServiceTypeList(ServiceTypeList* element)</signature>
<elmentName>ServiceTypeList</elmentName>
<asnElementName>serviceTypeList</asnElementName>
<elementTypeName>ServiceTypeList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceTypeList</name>
<signature>void SetServiceTypeList(const ServiceTypeList&amp; element)</signature>
<elementName>ServiceTypeList</elementName>
<asnElementName>serviceTypeList</asnElementName>
<elementTypeName>ServiceTypeList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceTypeList</name>
<signature>const ServiceTypeList&amp; GetServiceTypeList() const</signature>
<elementName>ServiceTypeList</elementName>
<asnElementName>serviceTypeList</asnElementName>
<elementTypeName>ServiceTypeList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceTypeList</name>
<signature>bool OptionServiceTypeList() const</signature>
<elementName>ServiceTypeList</elementName>
<asnElementName>serviceTypeList</asnElementName>
<elementTypeName>ServiceTypeList</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- LCS-PrivacyClass information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>LCS-PrivacyClass ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    ss-Code SS-Code -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ss-Status Ext-SS-Status -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    notificationToMSUser [0] IMPLICIT NotificationToMSUser -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    externalClientList [1] IMPLICIT ExternalClientList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    plmnClientList [2] IMPLICIT PLMNClientList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [3] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ext-externalClientList [4] IMPLICIT Ext-ExternalClientList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceTypeList [5] IMPLICIT ServiceTypeList -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

