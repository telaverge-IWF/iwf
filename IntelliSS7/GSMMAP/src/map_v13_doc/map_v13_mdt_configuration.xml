<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>MDT_Configuration</className>
<asnTypeName>MDT-Configuration</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetJobType</name>
<signature>void SetJobType(JobType* element)</signature>
<elmentName>JobType</elmentName>
<asnElementName>jobType</asnElementName>
<elementTypeName>JobType</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetJobType</name>
<signature>void SetJobType(const JobType&amp; element)</signature>
<elementName>JobType</elementName>
<asnElementName>jobType</asnElementName>
<elementTypeName>JobType</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetJobType</name>
<signature>const JobType&amp; GetJobType() const</signature>
<elementName>JobType</elementName>
<asnElementName>jobType</asnElementName>
<elementTypeName>JobType</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAreaScope</name>
<signature>void SetAreaScope(AreaScope* element)</signature>
<elmentName>AreaScope</elmentName>
<asnElementName>areaScope</asnElementName>
<elementTypeName>AreaScope</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAreaScope</name>
<signature>void SetAreaScope(const AreaScope&amp; element)</signature>
<elementName>AreaScope</elementName>
<asnElementName>areaScope</asnElementName>
<elementTypeName>AreaScope</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAreaScope</name>
<signature>const AreaScope&amp; GetAreaScope() const</signature>
<elementName>AreaScope</elementName>
<asnElementName>areaScope</asnElementName>
<elementTypeName>AreaScope</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAreaScope</name>
<signature>bool OptionAreaScope() const</signature>
<elementName>AreaScope</elementName>
<asnElementName>areaScope</asnElementName>
<elementTypeName>AreaScope</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetListOfMeasurements</name>
<signature>void SetListOfMeasurements(ListOfMeasurements* element)</signature>
<elmentName>ListOfMeasurements</elmentName>
<asnElementName>listOfMeasurements</asnElementName>
<elementTypeName>ListOfMeasurements</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetListOfMeasurements</name>
<signature>void SetListOfMeasurements(const ListOfMeasurements&amp; element)</signature>
<elementName>ListOfMeasurements</elementName>
<asnElementName>listOfMeasurements</asnElementName>
<elementTypeName>ListOfMeasurements</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetListOfMeasurements</name>
<signature>const ListOfMeasurements&amp; GetListOfMeasurements() const</signature>
<elementName>ListOfMeasurements</elementName>
<asnElementName>listOfMeasurements</asnElementName>
<elementTypeName>ListOfMeasurements</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionListOfMeasurements</name>
<signature>bool OptionListOfMeasurements() const</signature>
<elementName>ListOfMeasurements</elementName>
<asnElementName>listOfMeasurements</asnElementName>
<elementTypeName>ListOfMeasurements</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReportingTrigger</name>
<signature>void SetReportingTrigger(ReportingTrigger* element)</signature>
<elmentName>ReportingTrigger</elmentName>
<asnElementName>reportingTrigger</asnElementName>
<elementTypeName>ReportingTrigger</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReportingTrigger</name>
<signature>void SetReportingTrigger(const ReportingTrigger&amp; element)</signature>
<elementName>ReportingTrigger</elementName>
<asnElementName>reportingTrigger</asnElementName>
<elementTypeName>ReportingTrigger</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReportingTrigger</name>
<signature>const ReportingTrigger&amp; GetReportingTrigger() const</signature>
<elementName>ReportingTrigger</elementName>
<asnElementName>reportingTrigger</asnElementName>
<elementTypeName>ReportingTrigger</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReportingTrigger</name>
<signature>bool OptionReportingTrigger() const</signature>
<elementName>ReportingTrigger</elementName>
<asnElementName>reportingTrigger</asnElementName>
<elementTypeName>ReportingTrigger</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReportInterval</name>
<signature>void SetReportInterval(ReportInterval* element)</signature>
<elmentName>ReportInterval</elmentName>
<asnElementName>reportInterval</asnElementName>
<elementTypeName>ReportInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReportInterval</name>
<signature>void SetReportInterval(const ReportInterval&amp; element)</signature>
<elementName>ReportInterval</elementName>
<asnElementName>reportInterval</asnElementName>
<elementTypeName>ReportInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReportInterval</name>
<signature>const ReportInterval&amp; GetReportInterval() const</signature>
<elementName>ReportInterval</elementName>
<asnElementName>reportInterval</asnElementName>
<elementTypeName>ReportInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReportInterval</name>
<signature>bool OptionReportInterval() const</signature>
<elementName>ReportInterval</elementName>
<asnElementName>reportInterval</asnElementName>
<elementTypeName>ReportInterval</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetReportAmount</name>
<signature>void SetReportAmount(ReportAmount* element)</signature>
<elmentName>ReportAmount</elmentName>
<asnElementName>reportAmount</asnElementName>
<elementTypeName>ReportAmount</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetReportAmount</name>
<signature>void SetReportAmount(const ReportAmount&amp; element)</signature>
<elementName>ReportAmount</elementName>
<asnElementName>reportAmount</asnElementName>
<elementTypeName>ReportAmount</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetReportAmount</name>
<signature>const ReportAmount&amp; GetReportAmount() const</signature>
<elementName>ReportAmount</elementName>
<asnElementName>reportAmount</asnElementName>
<elementTypeName>ReportAmount</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionReportAmount</name>
<signature>bool OptionReportAmount() const</signature>
<elementName>ReportAmount</elementName>
<asnElementName>reportAmount</asnElementName>
<elementTypeName>ReportAmount</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEventThresholdRSRP</name>
<signature>void SetEventThresholdRSRP(EventThresholdRSRP* element)</signature>
<elmentName>EventThresholdRSRP</elmentName>
<asnElementName>eventThresholdRSRP</asnElementName>
<elementTypeName>EventThresholdRSRP</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEventThresholdRSRP</name>
<signature>void SetEventThresholdRSRP(const EventThresholdRSRP&amp; element)</signature>
<elementName>EventThresholdRSRP</elementName>
<asnElementName>eventThresholdRSRP</asnElementName>
<elementTypeName>EventThresholdRSRP</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEventThresholdRSRP</name>
<signature>const EventThresholdRSRP&amp; GetEventThresholdRSRP() const</signature>
<elementName>EventThresholdRSRP</elementName>
<asnElementName>eventThresholdRSRP</asnElementName>
<elementTypeName>EventThresholdRSRP</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEventThresholdRSRP</name>
<signature>bool OptionEventThresholdRSRP() const</signature>
<elementName>EventThresholdRSRP</elementName>
<asnElementName>eventThresholdRSRP</asnElementName>
<elementTypeName>EventThresholdRSRP</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEventThresholdRSRQ</name>
<signature>void SetEventThresholdRSRQ(EventThresholdRSRQ* element)</signature>
<elmentName>EventThresholdRSRQ</elmentName>
<asnElementName>eventThresholdRSRQ</asnElementName>
<elementTypeName>EventThresholdRSRQ</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEventThresholdRSRQ</name>
<signature>void SetEventThresholdRSRQ(const EventThresholdRSRQ&amp; element)</signature>
<elementName>EventThresholdRSRQ</elementName>
<asnElementName>eventThresholdRSRQ</asnElementName>
<elementTypeName>EventThresholdRSRQ</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEventThresholdRSRQ</name>
<signature>const EventThresholdRSRQ&amp; GetEventThresholdRSRQ() const</signature>
<elementName>EventThresholdRSRQ</elementName>
<asnElementName>eventThresholdRSRQ</asnElementName>
<elementTypeName>EventThresholdRSRQ</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEventThresholdRSRQ</name>
<signature>bool OptionEventThresholdRSRQ() const</signature>
<elementName>EventThresholdRSRQ</elementName>
<asnElementName>eventThresholdRSRQ</asnElementName>
<elementTypeName>EventThresholdRSRQ</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLoggingInterval</name>
<signature>void SetLoggingInterval(LoggingInterval* element)</signature>
<elmentName>LoggingInterval</elmentName>
<asnElementName>loggingInterval</asnElementName>
<elementTypeName>LoggingInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLoggingInterval</name>
<signature>void SetLoggingInterval(const LoggingInterval&amp; element)</signature>
<elementName>LoggingInterval</elementName>
<asnElementName>loggingInterval</asnElementName>
<elementTypeName>LoggingInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLoggingInterval</name>
<signature>const LoggingInterval&amp; GetLoggingInterval() const</signature>
<elementName>LoggingInterval</elementName>
<asnElementName>loggingInterval</asnElementName>
<elementTypeName>LoggingInterval</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLoggingInterval</name>
<signature>bool OptionLoggingInterval() const</signature>
<elementName>LoggingInterval</elementName>
<asnElementName>loggingInterval</asnElementName>
<elementTypeName>LoggingInterval</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLoggingDuration</name>
<signature>void SetLoggingDuration(LoggingDuration* element)</signature>
<elmentName>LoggingDuration</elmentName>
<asnElementName>loggingDuration</asnElementName>
<elementTypeName>LoggingDuration</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLoggingDuration</name>
<signature>void SetLoggingDuration(const LoggingDuration&amp; element)</signature>
<elementName>LoggingDuration</elementName>
<asnElementName>loggingDuration</asnElementName>
<elementTypeName>LoggingDuration</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLoggingDuration</name>
<signature>const LoggingDuration&amp; GetLoggingDuration() const</signature>
<elementName>LoggingDuration</elementName>
<asnElementName>loggingDuration</asnElementName>
<elementTypeName>LoggingDuration</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLoggingDuration</name>
<signature>bool OptionLoggingDuration() const</signature>
<elementName>LoggingDuration</elementName>
<asnElementName>loggingDuration</asnElementName>
<elementTypeName>LoggingDuration</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- MDT-Configuration information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>MDT-Configuration ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    jobType JobType -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    areaScope AreaScope -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    listOfMeasurements ListOfMeasurements -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    reportingTrigger [0] IMPLICIT ReportingTrigger -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    reportInterval ReportInterval -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    reportAmount [1] IMPLICIT ReportAmount -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    eventThresholdRSRP EventThresholdRSRP -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    eventThresholdRSRQ [2] IMPLICIT EventThresholdRSRQ -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    loggingInterval [3] IMPLICIT LoggingInterval -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    loggingDuration [4] IMPLICIT LoggingDuration -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [5] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

