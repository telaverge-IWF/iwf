<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>SendGroupCallInfoArg</className>
<asnTypeName>SendGroupCallInfoArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetRequestedInfo</name>
<signature>void SetRequestedInfo(RequestedInfo* element)</signature>
<elmentName>RequestedInfo</elmentName>
<asnElementName>requestedInfo</asnElementName>
<elementTypeName>RequestedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRequestedInfo</name>
<signature>void SetRequestedInfo(const RequestedInfo&amp; element)</signature>
<elementName>RequestedInfo</elementName>
<asnElementName>requestedInfo</asnElementName>
<elementTypeName>RequestedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRequestedInfo</name>
<signature>const RequestedInfo&amp; GetRequestedInfo() const</signature>
<elementName>RequestedInfo</elementName>
<asnElementName>requestedInfo</asnElementName>
<elementTypeName>RequestedInfo</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetGroupId</name>
<signature>void SetGroupId(Long_GroupId* element)</signature>
<elmentName>GroupId</elmentName>
<asnElementName>groupId</asnElementName>
<elementTypeName>Long_GroupId</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGroupId</name>
<signature>void SetGroupId(const Long_GroupId&amp; element)</signature>
<elementName>GroupId</elementName>
<asnElementName>groupId</asnElementName>
<elementTypeName>Long_GroupId</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGroupId</name>
<signature>const Long_GroupId&amp; GetGroupId() const</signature>
<elementName>GroupId</elementName>
<asnElementName>groupId</asnElementName>
<elementTypeName>Long_GroupId</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetTeleservice</name>
<signature>void SetTeleservice(Ext_TeleserviceCode* element)</signature>
<elmentName>Teleservice</elmentName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTeleservice</name>
<signature>void SetTeleservice(const Ext_TeleserviceCode&amp; element)</signature>
<elementName>Teleservice</elementName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTeleservice</name>
<signature>const Ext_TeleserviceCode&amp; GetTeleservice() const</signature>
<elementName>Teleservice</elementName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCellId</name>
<signature>void SetCellId(GlobalCellId* element)</signature>
<elmentName>CellId</elmentName>
<asnElementName>cellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCellId</name>
<signature>void SetCellId(const GlobalCellId&amp; element)</signature>
<elementName>CellId</elementName>
<asnElementName>cellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCellId</name>
<signature>const GlobalCellId&amp; GetCellId() const</signature>
<elementName>CellId</elementName>
<asnElementName>cellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCellId</name>
<signature>bool OptionCellId() const</signature>
<elementName>CellId</elementName>
<asnElementName>cellId</asnElementName>
<elementTypeName>GlobalCellId</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImsi</name>
<signature>bool OptionImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTmsi</name>
<signature>void SetTmsi(TMSI* element)</signature>
<elmentName>Tmsi</elmentName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTmsi</name>
<signature>void SetTmsi(const TMSI&amp; element)</signature>
<elementName>Tmsi</elementName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTmsi</name>
<signature>const TMSI&amp; GetTmsi() const</signature>
<elementName>Tmsi</elementName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTmsi</name>
<signature>bool OptionTmsi() const</signature>
<elementName>Tmsi</elementName>
<asnElementName>tmsi</asnElementName>
<elementTypeName>TMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalInfo</name>
<signature>void SetAdditionalInfo(AdditionalInfo* element)</signature>
<elmentName>AdditionalInfo</elmentName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalInfo</name>
<signature>void SetAdditionalInfo(const AdditionalInfo&amp; element)</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalInfo</name>
<signature>const AdditionalInfo&amp; GetAdditionalInfo() const</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalInfo</name>
<signature>bool OptionAdditionalInfo() const</signature>
<elementName>AdditionalInfo</elementName>
<asnElementName>additionalInfo</asnElementName>
<elementTypeName>AdditionalInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTalkerPriority</name>
<signature>void SetTalkerPriority(TalkerPriority* element)</signature>
<elmentName>TalkerPriority</elmentName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTalkerPriority</name>
<signature>void SetTalkerPriority(const TalkerPriority&amp; element)</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTalkerPriority</name>
<signature>const TalkerPriority&amp; GetTalkerPriority() const</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTalkerPriority</name>
<signature>bool OptionTalkerPriority() const</signature>
<elementName>TalkerPriority</elementName>
<asnElementName>talkerPriority</asnElementName>
<elementTypeName>TalkerPriority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCksn</name>
<signature>void SetCksn(Cksn* element)</signature>
<elmentName>Cksn</elmentName>
<asnElementName>cksn</asnElementName>
<elementTypeName>Cksn</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCksn</name>
<signature>void SetCksn(const Cksn&amp; element)</signature>
<elementName>Cksn</elementName>
<asnElementName>cksn</asnElementName>
<elementTypeName>Cksn</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCksn</name>
<signature>const Cksn&amp; GetCksn() const</signature>
<elementName>Cksn</elementName>
<asnElementName>cksn</asnElementName>
<elementTypeName>Cksn</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCksn</name>
<signature>bool OptionCksn() const</signature>
<elementName>Cksn</elementName>
<asnElementName>cksn</asnElementName>
<elementTypeName>Cksn</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SendGroupCallInfoArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SendGroupCallInfoArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    requestedInfo RequestedInfo -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    groupId Long-GroupId -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    teleservice Ext-TeleserviceCode -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cellId [0] IMPLICIT GlobalCellId -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    imsi [1] IMPLICIT IMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tmsi [2] IMPLICIT TMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalInfo [3] IMPLICIT AdditionalInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    talkerPriority [4] IMPLICIT TalkerPriority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cksn [5] IMPLICIT Cksn -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [6] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

