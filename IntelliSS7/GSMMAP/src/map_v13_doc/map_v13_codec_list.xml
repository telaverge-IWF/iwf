<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CodecList</className>
<asnTypeName>CodecList</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetCodec1</name>
<signature>void SetCodec1(Codec* element)</signature>
<elmentName>Codec1</elmentName>
<asnElementName>codec1</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec1</name>
<signature>void SetCodec1(const Codec&amp; element)</signature>
<elementName>Codec1</elementName>
<asnElementName>codec1</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec1</name>
<signature>const Codec&amp; GetCodec1() const</signature>
<elementName>Codec1</elementName>
<asnElementName>codec1</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCodec2</name>
<signature>void SetCodec2(Codec* element)</signature>
<elmentName>Codec2</elmentName>
<asnElementName>codec2</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec2</name>
<signature>void SetCodec2(const Codec&amp; element)</signature>
<elementName>Codec2</elementName>
<asnElementName>codec2</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec2</name>
<signature>const Codec&amp; GetCodec2() const</signature>
<elementName>Codec2</elementName>
<asnElementName>codec2</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec2</name>
<signature>bool OptionCodec2() const</signature>
<elementName>Codec2</elementName>
<asnElementName>codec2</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec3</name>
<signature>void SetCodec3(Codec* element)</signature>
<elmentName>Codec3</elmentName>
<asnElementName>codec3</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec3</name>
<signature>void SetCodec3(const Codec&amp; element)</signature>
<elementName>Codec3</elementName>
<asnElementName>codec3</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec3</name>
<signature>const Codec&amp; GetCodec3() const</signature>
<elementName>Codec3</elementName>
<asnElementName>codec3</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec3</name>
<signature>bool OptionCodec3() const</signature>
<elementName>Codec3</elementName>
<asnElementName>codec3</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec4</name>
<signature>void SetCodec4(Codec* element)</signature>
<elmentName>Codec4</elmentName>
<asnElementName>codec4</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec4</name>
<signature>void SetCodec4(const Codec&amp; element)</signature>
<elementName>Codec4</elementName>
<asnElementName>codec4</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec4</name>
<signature>const Codec&amp; GetCodec4() const</signature>
<elementName>Codec4</elementName>
<asnElementName>codec4</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec4</name>
<signature>bool OptionCodec4() const</signature>
<elementName>Codec4</elementName>
<asnElementName>codec4</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec5</name>
<signature>void SetCodec5(Codec* element)</signature>
<elmentName>Codec5</elmentName>
<asnElementName>codec5</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec5</name>
<signature>void SetCodec5(const Codec&amp; element)</signature>
<elementName>Codec5</elementName>
<asnElementName>codec5</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec5</name>
<signature>const Codec&amp; GetCodec5() const</signature>
<elementName>Codec5</elementName>
<asnElementName>codec5</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec5</name>
<signature>bool OptionCodec5() const</signature>
<elementName>Codec5</elementName>
<asnElementName>codec5</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec6</name>
<signature>void SetCodec6(Codec* element)</signature>
<elmentName>Codec6</elmentName>
<asnElementName>codec6</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec6</name>
<signature>void SetCodec6(const Codec&amp; element)</signature>
<elementName>Codec6</elementName>
<asnElementName>codec6</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec6</name>
<signature>const Codec&amp; GetCodec6() const</signature>
<elementName>Codec6</elementName>
<asnElementName>codec6</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec6</name>
<signature>bool OptionCodec6() const</signature>
<elementName>Codec6</elementName>
<asnElementName>codec6</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec7</name>
<signature>void SetCodec7(Codec* element)</signature>
<elmentName>Codec7</elmentName>
<asnElementName>codec7</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec7</name>
<signature>void SetCodec7(const Codec&amp; element)</signature>
<elementName>Codec7</elementName>
<asnElementName>codec7</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec7</name>
<signature>const Codec&amp; GetCodec7() const</signature>
<elementName>Codec7</elementName>
<asnElementName>codec7</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec7</name>
<signature>bool OptionCodec7() const</signature>
<elementName>Codec7</elementName>
<asnElementName>codec7</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCodec8</name>
<signature>void SetCodec8(Codec* element)</signature>
<elmentName>Codec8</elmentName>
<asnElementName>codec8</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec8</name>
<signature>void SetCodec8(const Codec&amp; element)</signature>
<elementName>Codec8</elementName>
<asnElementName>codec8</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec8</name>
<signature>const Codec&amp; GetCodec8() const</signature>
<elementName>Codec8</elementName>
<asnElementName>codec8</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCodec8</name>
<signature>bool OptionCodec8() const</signature>
<elementName>Codec8</elementName>
<asnElementName>codec8</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CodecList information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 4]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CodecList ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    codec1 [1] IMPLICIT Codec -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec2 [2] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec3 [3] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec4 [4] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec5 [5] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec6 [6] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec7 [7] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec8 [8] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [9] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

