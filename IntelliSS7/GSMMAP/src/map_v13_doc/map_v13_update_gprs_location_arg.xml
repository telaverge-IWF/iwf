<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>UpdateGprsLocationArg</className>
<asnTypeName>UpdateGprsLocationArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetSgsn_Number</name>
<signature>void SetSgsn_Number(ISDN_AddressString* element)</signature>
<elmentName>Sgsn_Number</elmentName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSgsn_Number</name>
<signature>void SetSgsn_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Sgsn_Number</elementName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSgsn_Number</name>
<signature>const ISDN_AddressString&amp; GetSgsn_Number() const</signature>
<elementName>Sgsn_Number</elementName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetSgsn_Address</name>
<signature>void SetSgsn_Address(GSN_Address* element)</signature>
<elmentName>Sgsn_Address</elmentName>
<asnElementName>sgsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSgsn_Address</name>
<signature>void SetSgsn_Address(const GSN_Address&amp; element)</signature>
<elementName>Sgsn_Address</elementName>
<asnElementName>sgsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSgsn_Address</name>
<signature>const GSN_Address&amp; GetSgsn_Address() const</signature>
<elementName>Sgsn_Address</elementName>
<asnElementName>sgsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSgsn_Capability</name>
<signature>void SetSgsn_Capability(SGSN_Capability* element)</signature>
<elmentName>Sgsn_Capability</elmentName>
<asnElementName>sgsn-Capability</asnElementName>
<elementTypeName>SGSN_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSgsn_Capability</name>
<signature>void SetSgsn_Capability(const SGSN_Capability&amp; element)</signature>
<elementName>Sgsn_Capability</elementName>
<asnElementName>sgsn-Capability</asnElementName>
<elementTypeName>SGSN_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSgsn_Capability</name>
<signature>const SGSN_Capability&amp; GetSgsn_Capability() const</signature>
<elementName>Sgsn_Capability</elementName>
<asnElementName>sgsn-Capability</asnElementName>
<elementTypeName>SGSN_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSgsn_Capability</name>
<signature>bool OptionSgsn_Capability() const</signature>
<elementName>Sgsn_Capability</elementName>
<asnElementName>sgsn-Capability</asnElementName>
<elementTypeName>SGSN_Capability</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetInformPreviousNetworkEntity</name>
<signature>void SetInformPreviousNetworkEntity(InformPreviousNetworkEntity* element)</signature>
<elmentName>InformPreviousNetworkEntity</elmentName>
<asnElementName>informPreviousNetworkEntity</asnElementName>
<elementTypeName>InformPreviousNetworkEntity</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInformPreviousNetworkEntity</name>
<signature>void SetInformPreviousNetworkEntity(const InformPreviousNetworkEntity&amp; element)</signature>
<elementName>InformPreviousNetworkEntity</elementName>
<asnElementName>informPreviousNetworkEntity</asnElementName>
<elementTypeName>InformPreviousNetworkEntity</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInformPreviousNetworkEntity</name>
<signature>const InformPreviousNetworkEntity&amp; GetInformPreviousNetworkEntity() const</signature>
<elementName>InformPreviousNetworkEntity</elementName>
<asnElementName>informPreviousNetworkEntity</asnElementName>
<elementTypeName>InformPreviousNetworkEntity</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInformPreviousNetworkEntity</name>
<signature>bool OptionInformPreviousNetworkEntity() const</signature>
<elementName>InformPreviousNetworkEntity</elementName>
<asnElementName>informPreviousNetworkEntity</asnElementName>
<elementTypeName>InformPreviousNetworkEntity</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPs_LCS_NotSupportedByUE</name>
<signature>void SetPs_LCS_NotSupportedByUE(Ps_LCS_NotSupportedByUE* element)</signature>
<elmentName>Ps_LCS_NotSupportedByUE</elmentName>
<asnElementName>ps-LCS-NotSupportedByUE</asnElementName>
<elementTypeName>Ps_LCS_NotSupportedByUE</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPs_LCS_NotSupportedByUE</name>
<signature>void SetPs_LCS_NotSupportedByUE(const Ps_LCS_NotSupportedByUE&amp; element)</signature>
<elementName>Ps_LCS_NotSupportedByUE</elementName>
<asnElementName>ps-LCS-NotSupportedByUE</asnElementName>
<elementTypeName>Ps_LCS_NotSupportedByUE</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPs_LCS_NotSupportedByUE</name>
<signature>const Ps_LCS_NotSupportedByUE&amp; GetPs_LCS_NotSupportedByUE() const</signature>
<elementName>Ps_LCS_NotSupportedByUE</elementName>
<asnElementName>ps-LCS-NotSupportedByUE</asnElementName>
<elementTypeName>Ps_LCS_NotSupportedByUE</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPs_LCS_NotSupportedByUE</name>
<signature>bool OptionPs_LCS_NotSupportedByUE() const</signature>
<elementName>Ps_LCS_NotSupportedByUE</elementName>
<asnElementName>ps-LCS-NotSupportedByUE</asnElementName>
<elementTypeName>Ps_LCS_NotSupportedByUE</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetV_gmlc_Address</name>
<signature>void SetV_gmlc_Address(GSN_Address* element)</signature>
<elmentName>V_gmlc_Address</elmentName>
<asnElementName>v-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetV_gmlc_Address</name>
<signature>void SetV_gmlc_Address(const GSN_Address&amp; element)</signature>
<elementName>V_gmlc_Address</elementName>
<asnElementName>v-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetV_gmlc_Address</name>
<signature>const GSN_Address&amp; GetV_gmlc_Address() const</signature>
<elementName>V_gmlc_Address</elementName>
<asnElementName>v-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionV_gmlc_Address</name>
<signature>bool OptionV_gmlc_Address() const</signature>
<elementName>V_gmlc_Address</elementName>
<asnElementName>v-gmlc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdd_info</name>
<signature>void SetAdd_info(ADD_Info* element)</signature>
<elmentName>Add_info</elmentName>
<asnElementName>add-info</asnElementName>
<elementTypeName>ADD_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdd_info</name>
<signature>void SetAdd_info(const ADD_Info&amp; element)</signature>
<elementName>Add_info</elementName>
<asnElementName>add-info</asnElementName>
<elementTypeName>ADD_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdd_info</name>
<signature>const ADD_Info&amp; GetAdd_info() const</signature>
<elementName>Add_info</elementName>
<asnElementName>add-info</asnElementName>
<elementTypeName>ADD_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdd_info</name>
<signature>bool OptionAdd_info() const</signature>
<elementName>Add_info</elementName>
<asnElementName>add-info</asnElementName>
<elementTypeName>ADD_Info</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEps_info</name>
<signature>void SetEps_info(EPS_Info* element)</signature>
<elmentName>Eps_info</elmentName>
<asnElementName>eps-info</asnElementName>
<elementTypeName>EPS_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEps_info</name>
<signature>void SetEps_info(const EPS_Info&amp; element)</signature>
<elementName>Eps_info</elementName>
<asnElementName>eps-info</asnElementName>
<elementTypeName>EPS_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEps_info</name>
<signature>const EPS_Info&amp; GetEps_info() const</signature>
<elementName>Eps_info</elementName>
<asnElementName>eps-info</asnElementName>
<elementTypeName>EPS_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEps_info</name>
<signature>bool OptionEps_info() const</signature>
<elementName>Eps_info</elementName>
<asnElementName>eps-info</asnElementName>
<elementTypeName>EPS_Info</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServingNodeTypeIndicator</name>
<signature>void SetServingNodeTypeIndicator(ServingNodeTypeIndicator* element)</signature>
<elmentName>ServingNodeTypeIndicator</elmentName>
<asnElementName>servingNodeTypeIndicator</asnElementName>
<elementTypeName>ServingNodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServingNodeTypeIndicator</name>
<signature>void SetServingNodeTypeIndicator(const ServingNodeTypeIndicator&amp; element)</signature>
<elementName>ServingNodeTypeIndicator</elementName>
<asnElementName>servingNodeTypeIndicator</asnElementName>
<elementTypeName>ServingNodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServingNodeTypeIndicator</name>
<signature>const ServingNodeTypeIndicator&amp; GetServingNodeTypeIndicator() const</signature>
<elementName>ServingNodeTypeIndicator</elementName>
<asnElementName>servingNodeTypeIndicator</asnElementName>
<elementTypeName>ServingNodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServingNodeTypeIndicator</name>
<signature>bool OptionServingNodeTypeIndicator() const</signature>
<elementName>ServingNodeTypeIndicator</elementName>
<asnElementName>servingNodeTypeIndicator</asnElementName>
<elementTypeName>ServingNodeTypeIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSkipSubscriberDataUpdate</name>
<signature>void SetSkipSubscriberDataUpdate(SkipSubscriberDataUpdate* element)</signature>
<elmentName>SkipSubscriberDataUpdate</elmentName>
<asnElementName>skipSubscriberDataUpdate</asnElementName>
<elementTypeName>SkipSubscriberDataUpdate</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSkipSubscriberDataUpdate</name>
<signature>void SetSkipSubscriberDataUpdate(const SkipSubscriberDataUpdate&amp; element)</signature>
<elementName>SkipSubscriberDataUpdate</elementName>
<asnElementName>skipSubscriberDataUpdate</asnElementName>
<elementTypeName>SkipSubscriberDataUpdate</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSkipSubscriberDataUpdate</name>
<signature>const SkipSubscriberDataUpdate&amp; GetSkipSubscriberDataUpdate() const</signature>
<elementName>SkipSubscriberDataUpdate</elementName>
<asnElementName>skipSubscriberDataUpdate</asnElementName>
<elementTypeName>SkipSubscriberDataUpdate</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSkipSubscriberDataUpdate</name>
<signature>bool OptionSkipSubscriberDataUpdate() const</signature>
<elementName>SkipSubscriberDataUpdate</elementName>
<asnElementName>skipSubscriberDataUpdate</asnElementName>
<elementTypeName>SkipSubscriberDataUpdate</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUsedRAT_Type</name>
<signature>void SetUsedRAT_Type(Used_RAT_Type* element)</signature>
<elmentName>UsedRAT_Type</elmentName>
<asnElementName>usedRAT-Type</asnElementName>
<elementTypeName>Used_RAT_Type</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUsedRAT_Type</name>
<signature>void SetUsedRAT_Type(const Used_RAT_Type&amp; element)</signature>
<elementName>UsedRAT_Type</elementName>
<asnElementName>usedRAT-Type</asnElementName>
<elementTypeName>Used_RAT_Type</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUsedRAT_Type</name>
<signature>const Used_RAT_Type&amp; GetUsedRAT_Type() const</signature>
<elementName>UsedRAT_Type</elementName>
<asnElementName>usedRAT-Type</asnElementName>
<elementTypeName>Used_RAT_Type</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUsedRAT_Type</name>
<signature>bool OptionUsedRAT_Type() const</signature>
<elementName>UsedRAT_Type</elementName>
<asnElementName>usedRAT-Type</asnElementName>
<elementTypeName>Used_RAT_Type</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGprsSubscriptionDataNotNeeded</name>
<signature>void SetGprsSubscriptionDataNotNeeded(GprsSubscriptionDataNotNeeded* element)</signature>
<elmentName>GprsSubscriptionDataNotNeeded</elmentName>
<asnElementName>gprsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>GprsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGprsSubscriptionDataNotNeeded</name>
<signature>void SetGprsSubscriptionDataNotNeeded(const GprsSubscriptionDataNotNeeded&amp; element)</signature>
<elementName>GprsSubscriptionDataNotNeeded</elementName>
<asnElementName>gprsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>GprsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGprsSubscriptionDataNotNeeded</name>
<signature>const GprsSubscriptionDataNotNeeded&amp; GetGprsSubscriptionDataNotNeeded() const</signature>
<elementName>GprsSubscriptionDataNotNeeded</elementName>
<asnElementName>gprsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>GprsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGprsSubscriptionDataNotNeeded</name>
<signature>bool OptionGprsSubscriptionDataNotNeeded() const</signature>
<elementName>GprsSubscriptionDataNotNeeded</elementName>
<asnElementName>gprsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>GprsSubscriptionDataNotNeeded</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNodeTypeIndicator</name>
<signature>void SetNodeTypeIndicator(NodeTypeIndicator* element)</signature>
<elmentName>NodeTypeIndicator</elmentName>
<asnElementName>nodeTypeIndicator</asnElementName>
<elementTypeName>NodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNodeTypeIndicator</name>
<signature>void SetNodeTypeIndicator(const NodeTypeIndicator&amp; element)</signature>
<elementName>NodeTypeIndicator</elementName>
<asnElementName>nodeTypeIndicator</asnElementName>
<elementTypeName>NodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNodeTypeIndicator</name>
<signature>const NodeTypeIndicator&amp; GetNodeTypeIndicator() const</signature>
<elementName>NodeTypeIndicator</elementName>
<asnElementName>nodeTypeIndicator</asnElementName>
<elementTypeName>NodeTypeIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNodeTypeIndicator</name>
<signature>bool OptionNodeTypeIndicator() const</signature>
<elementName>NodeTypeIndicator</elementName>
<asnElementName>nodeTypeIndicator</asnElementName>
<elementTypeName>NodeTypeIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAreaRestricted</name>
<signature>void SetAreaRestricted(AreaRestricted* element)</signature>
<elmentName>AreaRestricted</elmentName>
<asnElementName>areaRestricted</asnElementName>
<elementTypeName>AreaRestricted</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAreaRestricted</name>
<signature>void SetAreaRestricted(const AreaRestricted&amp; element)</signature>
<elementName>AreaRestricted</elementName>
<asnElementName>areaRestricted</asnElementName>
<elementTypeName>AreaRestricted</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAreaRestricted</name>
<signature>const AreaRestricted&amp; GetAreaRestricted() const</signature>
<elementName>AreaRestricted</elementName>
<asnElementName>areaRestricted</asnElementName>
<elementTypeName>AreaRestricted</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAreaRestricted</name>
<signature>bool OptionAreaRestricted() const</signature>
<elementName>AreaRestricted</elementName>
<asnElementName>areaRestricted</asnElementName>
<elementTypeName>AreaRestricted</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUe_reachableIndicator</name>
<signature>void SetUe_reachableIndicator(Ue_reachableIndicator* element)</signature>
<elmentName>Ue_reachableIndicator</elmentName>
<asnElementName>ue-reachableIndicator</asnElementName>
<elementTypeName>Ue_reachableIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUe_reachableIndicator</name>
<signature>void SetUe_reachableIndicator(const Ue_reachableIndicator&amp; element)</signature>
<elementName>Ue_reachableIndicator</elementName>
<asnElementName>ue-reachableIndicator</asnElementName>
<elementTypeName>Ue_reachableIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUe_reachableIndicator</name>
<signature>const Ue_reachableIndicator&amp; GetUe_reachableIndicator() const</signature>
<elementName>Ue_reachableIndicator</elementName>
<asnElementName>ue-reachableIndicator</asnElementName>
<elementTypeName>Ue_reachableIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUe_reachableIndicator</name>
<signature>bool OptionUe_reachableIndicator() const</signature>
<elementName>Ue_reachableIndicator</elementName>
<asnElementName>ue-reachableIndicator</asnElementName>
<elementTypeName>Ue_reachableIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEpsSubscriptionDataNotNeeded</name>
<signature>void SetEpsSubscriptionDataNotNeeded(EpsSubscriptionDataNotNeeded* element)</signature>
<elmentName>EpsSubscriptionDataNotNeeded</elmentName>
<asnElementName>epsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>EpsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEpsSubscriptionDataNotNeeded</name>
<signature>void SetEpsSubscriptionDataNotNeeded(const EpsSubscriptionDataNotNeeded&amp; element)</signature>
<elementName>EpsSubscriptionDataNotNeeded</elementName>
<asnElementName>epsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>EpsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEpsSubscriptionDataNotNeeded</name>
<signature>const EpsSubscriptionDataNotNeeded&amp; GetEpsSubscriptionDataNotNeeded() const</signature>
<elementName>EpsSubscriptionDataNotNeeded</elementName>
<asnElementName>epsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>EpsSubscriptionDataNotNeeded</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEpsSubscriptionDataNotNeeded</name>
<signature>bool OptionEpsSubscriptionDataNotNeeded() const</signature>
<elementName>EpsSubscriptionDataNotNeeded</elementName>
<asnElementName>epsSubscriptionDataNotNeeded</asnElementName>
<elementTypeName>EpsSubscriptionDataNotNeeded</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUe_srvcc_Capability</name>
<signature>void SetUe_srvcc_Capability(UE_SRVCC_Capability* element)</signature>
<elmentName>Ue_srvcc_Capability</elmentName>
<asnElementName>ue-srvcc-Capability</asnElementName>
<elementTypeName>UE_SRVCC_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUe_srvcc_Capability</name>
<signature>void SetUe_srvcc_Capability(const UE_SRVCC_Capability&amp; element)</signature>
<elementName>Ue_srvcc_Capability</elementName>
<asnElementName>ue-srvcc-Capability</asnElementName>
<elementTypeName>UE_SRVCC_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUe_srvcc_Capability</name>
<signature>const UE_SRVCC_Capability&amp; GetUe_srvcc_Capability() const</signature>
<elementName>Ue_srvcc_Capability</elementName>
<asnElementName>ue-srvcc-Capability</asnElementName>
<elementTypeName>UE_SRVCC_Capability</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUe_srvcc_Capability</name>
<signature>bool OptionUe_srvcc_Capability() const</signature>
<elementName>Ue_srvcc_Capability</elementName>
<asnElementName>ue-srvcc-Capability</asnElementName>
<elementTypeName>UE_SRVCC_Capability</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- UpdateGprsLocationArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>UpdateGprsLocationArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    imsi IMSI -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    sgsn-Number ISDN-AddressString -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    sgsn-Address GSN-Address -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    sgsn-Capability [0] IMPLICIT SGSN-Capability -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    informPreviousNetworkEntity [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ps-LCS-NotSupportedByUE [2] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    v-gmlc-Address [3] IMPLICIT GSN-Address -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    add-info [4] IMPLICIT ADD-Info -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    eps-info [5] IMPLICIT EPS-Info -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    servingNodeTypeIndicator [6] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    skipSubscriberDataUpdate [7] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    usedRAT-Type [8] IMPLICIT Used-RAT-Type -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gprsSubscriptionDataNotNeeded [9] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    nodeTypeIndicator [10] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    areaRestricted [11] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ue-reachableIndicator [12] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    epsSubscriptionDataNotNeeded [13] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ue-srvcc-Capability [14] IMPLICIT UE-SRVCC-Capability -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

