<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ProvideRoamingNumberArg</className>
<asnTypeName>ProvideRoamingNumberArg</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetMsc_Number</name>
<signature>void SetMsc_Number(ISDN_AddressString* element)</signature>
<elmentName>Msc_Number</elmentName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMsc_Number</name>
<signature>void SetMsc_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Msc_Number</elementName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMsc_Number</name>
<signature>const ISDN_AddressString&amp; GetMsc_Number() const</signature>
<elementName>Msc_Number</elementName>
<asnElementName>msc-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetMsisdn</name>
<signature>void SetMsisdn(ISDN_AddressString* element)</signature>
<elmentName>Msisdn</elmentName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMsisdn</name>
<signature>void SetMsisdn(const ISDN_AddressString&amp; element)</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMsisdn</name>
<signature>const ISDN_AddressString&amp; GetMsisdn() const</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMsisdn</name>
<signature>bool OptionMsisdn() const</signature>
<elementName>Msisdn</elementName>
<asnElementName>msisdn</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLmsi</name>
<signature>void SetLmsi(LMSI* element)</signature>
<elmentName>Lmsi</elmentName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLmsi</name>
<signature>void SetLmsi(const LMSI&amp; element)</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLmsi</name>
<signature>const LMSI&amp; GetLmsi() const</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLmsi</name>
<signature>bool OptionLmsi() const</signature>
<elementName>Lmsi</elementName>
<asnElementName>lmsi</asnElementName>
<elementTypeName>LMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGsm_BearerCapability</name>
<signature>void SetGsm_BearerCapability(ExternalSignalInfo* element)</signature>
<elmentName>Gsm_BearerCapability</elmentName>
<asnElementName>gsm-BearerCapability</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGsm_BearerCapability</name>
<signature>void SetGsm_BearerCapability(const ExternalSignalInfo&amp; element)</signature>
<elementName>Gsm_BearerCapability</elementName>
<asnElementName>gsm-BearerCapability</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGsm_BearerCapability</name>
<signature>const ExternalSignalInfo&amp; GetGsm_BearerCapability() const</signature>
<elementName>Gsm_BearerCapability</elementName>
<asnElementName>gsm-BearerCapability</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGsm_BearerCapability</name>
<signature>bool OptionGsm_BearerCapability() const</signature>
<elementName>Gsm_BearerCapability</elementName>
<asnElementName>gsm-BearerCapability</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNetworkSignalInfo</name>
<signature>void SetNetworkSignalInfo(ExternalSignalInfo* element)</signature>
<elmentName>NetworkSignalInfo</elmentName>
<asnElementName>networkSignalInfo</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNetworkSignalInfo</name>
<signature>void SetNetworkSignalInfo(const ExternalSignalInfo&amp; element)</signature>
<elementName>NetworkSignalInfo</elementName>
<asnElementName>networkSignalInfo</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNetworkSignalInfo</name>
<signature>const ExternalSignalInfo&amp; GetNetworkSignalInfo() const</signature>
<elementName>NetworkSignalInfo</elementName>
<asnElementName>networkSignalInfo</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNetworkSignalInfo</name>
<signature>bool OptionNetworkSignalInfo() const</signature>
<elementName>NetworkSignalInfo</elementName>
<asnElementName>networkSignalInfo</asnElementName>
<elementTypeName>ExternalSignalInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(SuppressionOfAnnouncement* element)</signature>
<elmentName>SuppressionOfAnnouncement</elmentName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(const SuppressionOfAnnouncement&amp; element)</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSuppressionOfAnnouncement</name>
<signature>const SuppressionOfAnnouncement&amp; GetSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSuppressionOfAnnouncement</name>
<signature>bool OptionSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGmsc_Address</name>
<signature>void SetGmsc_Address(ISDN_AddressString* element)</signature>
<elmentName>Gmsc_Address</elmentName>
<asnElementName>gmsc-Address</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGmsc_Address</name>
<signature>void SetGmsc_Address(const ISDN_AddressString&amp; element)</signature>
<elementName>Gmsc_Address</elementName>
<asnElementName>gmsc-Address</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGmsc_Address</name>
<signature>const ISDN_AddressString&amp; GetGmsc_Address() const</signature>
<elementName>Gmsc_Address</elementName>
<asnElementName>gmsc-Address</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGmsc_Address</name>
<signature>bool OptionGmsc_Address() const</signature>
<elementName>Gmsc_Address</elementName>
<asnElementName>gmsc-Address</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallReferenceNumber</name>
<signature>void SetCallReferenceNumber(CallReferenceNumber* element)</signature>
<elmentName>CallReferenceNumber</elmentName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallReferenceNumber</name>
<signature>void SetCallReferenceNumber(const CallReferenceNumber&amp; element)</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallReferenceNumber</name>
<signature>const CallReferenceNumber&amp; GetCallReferenceNumber() const</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallReferenceNumber</name>
<signature>bool OptionCallReferenceNumber() const</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOr_Interrogation</name>
<signature>void SetOr_Interrogation(Or_Interrogation* element)</signature>
<elmentName>Or_Interrogation</elmentName>
<asnElementName>or-Interrogation</asnElementName>
<elementTypeName>Or_Interrogation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOr_Interrogation</name>
<signature>void SetOr_Interrogation(const Or_Interrogation&amp; element)</signature>
<elementName>Or_Interrogation</elementName>
<asnElementName>or-Interrogation</asnElementName>
<elementTypeName>Or_Interrogation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOr_Interrogation</name>
<signature>const Or_Interrogation&amp; GetOr_Interrogation() const</signature>
<elementName>Or_Interrogation</elementName>
<asnElementName>or-Interrogation</asnElementName>
<elementTypeName>Or_Interrogation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOr_Interrogation</name>
<signature>bool OptionOr_Interrogation() const</signature>
<elementName>Or_Interrogation</elementName>
<asnElementName>or-Interrogation</asnElementName>
<elementTypeName>Or_Interrogation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCcbs_Call</name>
<signature>void SetCcbs_Call(Ccbs_Call* element)</signature>
<elmentName>Ccbs_Call</elmentName>
<asnElementName>ccbs-Call</asnElementName>
<elementTypeName>Ccbs_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCcbs_Call</name>
<signature>void SetCcbs_Call(const Ccbs_Call&amp; element)</signature>
<elementName>Ccbs_Call</elementName>
<asnElementName>ccbs-Call</asnElementName>
<elementTypeName>Ccbs_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCcbs_Call</name>
<signature>const Ccbs_Call&amp; GetCcbs_Call() const</signature>
<elementName>Ccbs_Call</elementName>
<asnElementName>ccbs-Call</asnElementName>
<elementTypeName>Ccbs_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCcbs_Call</name>
<signature>bool OptionCcbs_Call() const</signature>
<elementName>Ccbs_Call</elementName>
<asnElementName>ccbs-Call</asnElementName>
<elementTypeName>Ccbs_Call</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSupportedCamelPhasesInInterrogatingNode</name>
<signature>void SetSupportedCamelPhasesInInterrogatingNode(SupportedCamelPhases* element)</signature>
<elmentName>SupportedCamelPhasesInInterrogatingNode</elmentName>
<asnElementName>supportedCamelPhasesInInterrogatingNode</asnElementName>
<elementTypeName>SupportedCamelPhases</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSupportedCamelPhasesInInterrogatingNode</name>
<signature>void SetSupportedCamelPhasesInInterrogatingNode(const SupportedCamelPhases&amp; element)</signature>
<elementName>SupportedCamelPhasesInInterrogatingNode</elementName>
<asnElementName>supportedCamelPhasesInInterrogatingNode</asnElementName>
<elementTypeName>SupportedCamelPhases</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSupportedCamelPhasesInInterrogatingNode</name>
<signature>const SupportedCamelPhases&amp; GetSupportedCamelPhasesInInterrogatingNode() const</signature>
<elementName>SupportedCamelPhasesInInterrogatingNode</elementName>
<asnElementName>supportedCamelPhasesInInterrogatingNode</asnElementName>
<elementTypeName>SupportedCamelPhases</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSupportedCamelPhasesInInterrogatingNode</name>
<signature>bool OptionSupportedCamelPhasesInInterrogatingNode() const</signature>
<elementName>SupportedCamelPhasesInInterrogatingNode</elementName>
<asnElementName>supportedCamelPhasesInInterrogatingNode</asnElementName>
<elementTypeName>SupportedCamelPhases</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalSignalInfo</name>
<signature>void SetAdditionalSignalInfo(Ext_ExternalSignalInfo* element)</signature>
<elmentName>AdditionalSignalInfo</elmentName>
<asnElementName>additionalSignalInfo</asnElementName>
<elementTypeName>Ext_ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalSignalInfo</name>
<signature>void SetAdditionalSignalInfo(const Ext_ExternalSignalInfo&amp; element)</signature>
<elementName>AdditionalSignalInfo</elementName>
<asnElementName>additionalSignalInfo</asnElementName>
<elementTypeName>Ext_ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalSignalInfo</name>
<signature>const Ext_ExternalSignalInfo&amp; GetAdditionalSignalInfo() const</signature>
<elementName>AdditionalSignalInfo</elementName>
<asnElementName>additionalSignalInfo</asnElementName>
<elementTypeName>Ext_ExternalSignalInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalSignalInfo</name>
<signature>bool OptionAdditionalSignalInfo() const</signature>
<elementName>AdditionalSignalInfo</elementName>
<asnElementName>additionalSignalInfo</asnElementName>
<elementTypeName>Ext_ExternalSignalInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOrNotSupportedInGMSC</name>
<signature>void SetOrNotSupportedInGMSC(OrNotSupportedInGMSC* element)</signature>
<elmentName>OrNotSupportedInGMSC</elmentName>
<asnElementName>orNotSupportedInGMSC</asnElementName>
<elementTypeName>OrNotSupportedInGMSC</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOrNotSupportedInGMSC</name>
<signature>void SetOrNotSupportedInGMSC(const OrNotSupportedInGMSC&amp; element)</signature>
<elementName>OrNotSupportedInGMSC</elementName>
<asnElementName>orNotSupportedInGMSC</asnElementName>
<elementTypeName>OrNotSupportedInGMSC</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOrNotSupportedInGMSC</name>
<signature>const OrNotSupportedInGMSC&amp; GetOrNotSupportedInGMSC() const</signature>
<elementName>OrNotSupportedInGMSC</elementName>
<asnElementName>orNotSupportedInGMSC</asnElementName>
<elementTypeName>OrNotSupportedInGMSC</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOrNotSupportedInGMSC</name>
<signature>bool OptionOrNotSupportedInGMSC() const</signature>
<elementName>OrNotSupportedInGMSC</elementName>
<asnElementName>orNotSupportedInGMSC</asnElementName>
<elementTypeName>OrNotSupportedInGMSC</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPre_pagingSupported</name>
<signature>void SetPre_pagingSupported(Pre_pagingSupported* element)</signature>
<elmentName>Pre_pagingSupported</elmentName>
<asnElementName>pre-pagingSupported</asnElementName>
<elementTypeName>Pre_pagingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPre_pagingSupported</name>
<signature>void SetPre_pagingSupported(const Pre_pagingSupported&amp; element)</signature>
<elementName>Pre_pagingSupported</elementName>
<asnElementName>pre-pagingSupported</asnElementName>
<elementTypeName>Pre_pagingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPre_pagingSupported</name>
<signature>const Pre_pagingSupported&amp; GetPre_pagingSupported() const</signature>
<elementName>Pre_pagingSupported</elementName>
<asnElementName>pre-pagingSupported</asnElementName>
<elementTypeName>Pre_pagingSupported</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPre_pagingSupported</name>
<signature>bool OptionPre_pagingSupported() const</signature>
<elementName>Pre_pagingSupported</elementName>
<asnElementName>pre-pagingSupported</asnElementName>
<elementTypeName>Pre_pagingSupported</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLongFTN_Supported</name>
<signature>void SetLongFTN_Supported(LongFTN_Supported* element)</signature>
<elmentName>LongFTN_Supported</elmentName>
<asnElementName>longFTN-Supported</asnElementName>
<elementTypeName>LongFTN_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLongFTN_Supported</name>
<signature>void SetLongFTN_Supported(const LongFTN_Supported&amp; element)</signature>
<elementName>LongFTN_Supported</elementName>
<asnElementName>longFTN-Supported</asnElementName>
<elementTypeName>LongFTN_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLongFTN_Supported</name>
<signature>const LongFTN_Supported&amp; GetLongFTN_Supported() const</signature>
<elementName>LongFTN_Supported</elementName>
<asnElementName>longFTN-Supported</asnElementName>
<elementTypeName>LongFTN_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLongFTN_Supported</name>
<signature>bool OptionLongFTN_Supported() const</signature>
<elementName>LongFTN_Supported</elementName>
<asnElementName>longFTN-Supported</asnElementName>
<elementTypeName>LongFTN_Supported</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSuppress_VT_CSI</name>
<signature>void SetSuppress_VT_CSI(Suppress_VT_CSI* element)</signature>
<elmentName>Suppress_VT_CSI</elmentName>
<asnElementName>suppress-VT-CSI</asnElementName>
<elementTypeName>Suppress_VT_CSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSuppress_VT_CSI</name>
<signature>void SetSuppress_VT_CSI(const Suppress_VT_CSI&amp; element)</signature>
<elementName>Suppress_VT_CSI</elementName>
<asnElementName>suppress-VT-CSI</asnElementName>
<elementTypeName>Suppress_VT_CSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSuppress_VT_CSI</name>
<signature>const Suppress_VT_CSI&amp; GetSuppress_VT_CSI() const</signature>
<elementName>Suppress_VT_CSI</elementName>
<asnElementName>suppress-VT-CSI</asnElementName>
<elementTypeName>Suppress_VT_CSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSuppress_VT_CSI</name>
<signature>bool OptionSuppress_VT_CSI() const</signature>
<elementName>Suppress_VT_CSI</elementName>
<asnElementName>suppress-VT-CSI</asnElementName>
<elementTypeName>Suppress_VT_CSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOfferedCamel4CSIsInInterrogatingNode</name>
<signature>void SetOfferedCamel4CSIsInInterrogatingNode(OfferedCamel4CSIs* element)</signature>
<elmentName>OfferedCamel4CSIsInInterrogatingNode</elmentName>
<asnElementName>offeredCamel4CSIsInInterrogatingNode</asnElementName>
<elementTypeName>OfferedCamel4CSIs</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOfferedCamel4CSIsInInterrogatingNode</name>
<signature>void SetOfferedCamel4CSIsInInterrogatingNode(const OfferedCamel4CSIs&amp; element)</signature>
<elementName>OfferedCamel4CSIsInInterrogatingNode</elementName>
<asnElementName>offeredCamel4CSIsInInterrogatingNode</asnElementName>
<elementTypeName>OfferedCamel4CSIs</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOfferedCamel4CSIsInInterrogatingNode</name>
<signature>const OfferedCamel4CSIs&amp; GetOfferedCamel4CSIsInInterrogatingNode() const</signature>
<elementName>OfferedCamel4CSIsInInterrogatingNode</elementName>
<asnElementName>offeredCamel4CSIsInInterrogatingNode</asnElementName>
<elementTypeName>OfferedCamel4CSIs</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOfferedCamel4CSIsInInterrogatingNode</name>
<signature>bool OptionOfferedCamel4CSIsInInterrogatingNode() const</signature>
<elementName>OfferedCamel4CSIsInInterrogatingNode</elementName>
<asnElementName>offeredCamel4CSIsInInterrogatingNode</asnElementName>
<elementTypeName>OfferedCamel4CSIs</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMtRoamingRetrySupported</name>
<signature>void SetMtRoamingRetrySupported(MtRoamingRetrySupported* element)</signature>
<elmentName>MtRoamingRetrySupported</elmentName>
<asnElementName>mtRoamingRetrySupported</asnElementName>
<elementTypeName>MtRoamingRetrySupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMtRoamingRetrySupported</name>
<signature>void SetMtRoamingRetrySupported(const MtRoamingRetrySupported&amp; element)</signature>
<elementName>MtRoamingRetrySupported</elementName>
<asnElementName>mtRoamingRetrySupported</asnElementName>
<elementTypeName>MtRoamingRetrySupported</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMtRoamingRetrySupported</name>
<signature>const MtRoamingRetrySupported&amp; GetMtRoamingRetrySupported() const</signature>
<elementName>MtRoamingRetrySupported</elementName>
<asnElementName>mtRoamingRetrySupported</asnElementName>
<elementTypeName>MtRoamingRetrySupported</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMtRoamingRetrySupported</name>
<signature>bool OptionMtRoamingRetrySupported() const</signature>
<elementName>MtRoamingRetrySupported</elementName>
<asnElementName>mtRoamingRetrySupported</asnElementName>
<elementTypeName>MtRoamingRetrySupported</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPagingArea</name>
<signature>void SetPagingArea(PagingArea* element)</signature>
<elmentName>PagingArea</elmentName>
<asnElementName>pagingArea</asnElementName>
<elementTypeName>PagingArea</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPagingArea</name>
<signature>void SetPagingArea(const PagingArea&amp; element)</signature>
<elementName>PagingArea</elementName>
<asnElementName>pagingArea</asnElementName>
<elementTypeName>PagingArea</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPagingArea</name>
<signature>const PagingArea&amp; GetPagingArea() const</signature>
<elementName>PagingArea</elementName>
<asnElementName>pagingArea</asnElementName>
<elementTypeName>PagingArea</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPagingArea</name>
<signature>bool OptionPagingArea() const</signature>
<elementName>PagingArea</elementName>
<asnElementName>pagingArea</asnElementName>
<elementTypeName>PagingArea</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallPriority</name>
<signature>void SetCallPriority(EMLPP_Priority* element)</signature>
<elmentName>CallPriority</elmentName>
<asnElementName>callPriority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallPriority</name>
<signature>void SetCallPriority(const EMLPP_Priority&amp; element)</signature>
<elementName>CallPriority</elementName>
<asnElementName>callPriority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallPriority</name>
<signature>const EMLPP_Priority&amp; GetCallPriority() const</signature>
<elementName>CallPriority</elementName>
<asnElementName>callPriority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallPriority</name>
<signature>bool OptionCallPriority() const</signature>
<elementName>CallPriority</elementName>
<asnElementName>callPriority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMtrf_Indicator</name>
<signature>void SetMtrf_Indicator(Mtrf_Indicator* element)</signature>
<elmentName>Mtrf_Indicator</elmentName>
<asnElementName>mtrf-Indicator</asnElementName>
<elementTypeName>Mtrf_Indicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMtrf_Indicator</name>
<signature>void SetMtrf_Indicator(const Mtrf_Indicator&amp; element)</signature>
<elementName>Mtrf_Indicator</elementName>
<asnElementName>mtrf-Indicator</asnElementName>
<elementTypeName>Mtrf_Indicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMtrf_Indicator</name>
<signature>const Mtrf_Indicator&amp; GetMtrf_Indicator() const</signature>
<elementName>Mtrf_Indicator</elementName>
<asnElementName>mtrf-Indicator</asnElementName>
<elementTypeName>Mtrf_Indicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMtrf_Indicator</name>
<signature>bool OptionMtrf_Indicator() const</signature>
<elementName>Mtrf_Indicator</elementName>
<asnElementName>mtrf-Indicator</asnElementName>
<elementTypeName>Mtrf_Indicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOldMSC_Number</name>
<signature>void SetOldMSC_Number(ISDN_AddressString* element)</signature>
<elmentName>OldMSC_Number</elmentName>
<asnElementName>oldMSC-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOldMSC_Number</name>
<signature>void SetOldMSC_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>OldMSC_Number</elementName>
<asnElementName>oldMSC-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOldMSC_Number</name>
<signature>const ISDN_AddressString&amp; GetOldMSC_Number() const</signature>
<elementName>OldMSC_Number</elementName>
<asnElementName>oldMSC-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOldMSC_Number</name>
<signature>bool OptionOldMSC_Number() const</signature>
<elementName>OldMSC_Number</elementName>
<asnElementName>oldMSC-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ProvideRoamingNumberArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ProvideRoamingNumberArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    imsi [0] IMPLICIT IMSI -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    msc-Number [1] IMPLICIT ISDN-AddressString -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    msisdn [2] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lmsi [4] IMPLICIT LMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gsm-BearerCapability [5] IMPLICIT ExternalSignalInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    networkSignalInfo [6] IMPLICIT ExternalSignalInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    suppressionOfAnnouncement [7] IMPLICIT SuppressionOfAnnouncement -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gmsc-Address [8] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callReferenceNumber [9] IMPLICIT CallReferenceNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    or-Interrogation [10] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [11] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alertingPattern [12] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ccbs-Call [13] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    supportedCamelPhasesInInterrogatingNode [15] IMPLICIT SupportedCamelPhases -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalSignalInfo [14] IMPLICIT Ext-ExternalSignalInfo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    orNotSupportedInGMSC [16] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    pre-pagingSupported [17] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    longFTN-Supported [18] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    suppress-VT-CSI [19] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    offeredCamel4CSIsInInterrogatingNode [20] IMPLICIT OfferedCamel4CSIs -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mtRoamingRetrySupported [21] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    pagingArea [22] IMPLICIT PagingArea -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callPriority [23] IMPLICIT EMLPP-Priority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mtrf-Indicator [24] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oldMSC-Number [25] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

