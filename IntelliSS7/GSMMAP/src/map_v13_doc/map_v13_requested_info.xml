<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>RequestedInfo</className>
<asnTypeName>RequestedInfo</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetLocationInformation</name>
<signature>void SetLocationInformation(LocationInformation* element)</signature>
<elmentName>LocationInformation</elmentName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationInformation</name>
<signature>void SetLocationInformation(const LocationInformation&amp; element)</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationInformation</name>
<signature>const LocationInformation&amp; GetLocationInformation() const</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationInformation</name>
<signature>bool OptionLocationInformation() const</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSubscriberState</name>
<signature>void SetSubscriberState(SubscriberState* element)</signature>
<elmentName>SubscriberState</elmentName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSubscriberState</name>
<signature>void SetSubscriberState(const SubscriberState&amp; element)</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSubscriberState</name>
<signature>const SubscriberState&amp; GetSubscriberState() const</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSubscriberState</name>
<signature>bool OptionSubscriberState() const</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCurrentLocation</name>
<signature>void SetCurrentLocation(CurrentLocation* element)</signature>
<elmentName>CurrentLocation</elmentName>
<asnElementName>currentLocation</asnElementName>
<elementTypeName>CurrentLocation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCurrentLocation</name>
<signature>void SetCurrentLocation(const CurrentLocation&amp; element)</signature>
<elementName>CurrentLocation</elementName>
<asnElementName>currentLocation</asnElementName>
<elementTypeName>CurrentLocation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCurrentLocation</name>
<signature>const CurrentLocation&amp; GetCurrentLocation() const</signature>
<elementName>CurrentLocation</elementName>
<asnElementName>currentLocation</asnElementName>
<elementTypeName>CurrentLocation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCurrentLocation</name>
<signature>bool OptionCurrentLocation() const</signature>
<elementName>CurrentLocation</elementName>
<asnElementName>currentLocation</asnElementName>
<elementTypeName>CurrentLocation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRequestedDomain</name>
<signature>void SetRequestedDomain(DomainType* element)</signature>
<elmentName>RequestedDomain</elmentName>
<asnElementName>requestedDomain</asnElementName>
<elementTypeName>DomainType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRequestedDomain</name>
<signature>void SetRequestedDomain(const DomainType&amp; element)</signature>
<elementName>RequestedDomain</elementName>
<asnElementName>requestedDomain</asnElementName>
<elementTypeName>DomainType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRequestedDomain</name>
<signature>const DomainType&amp; GetRequestedDomain() const</signature>
<elementName>RequestedDomain</elementName>
<asnElementName>requestedDomain</asnElementName>
<elementTypeName>DomainType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRequestedDomain</name>
<signature>bool OptionRequestedDomain() const</signature>
<elementName>RequestedDomain</elementName>
<asnElementName>requestedDomain</asnElementName>
<elementTypeName>DomainType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetImei</name>
<signature>void SetImei(Imei* element)</signature>
<elmentName>Imei</elmentName>
<asnElementName>imei</asnElementName>
<elementTypeName>Imei</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImei</name>
<signature>void SetImei(const Imei&amp; element)</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>Imei</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImei</name>
<signature>const Imei&amp; GetImei() const</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>Imei</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImei</name>
<signature>bool OptionImei() const</signature>
<elementName>Imei</elementName>
<asnElementName>imei</asnElementName>
<elementTypeName>Imei</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMs_classmark</name>
<signature>void SetMs_classmark(Ms_classmark* element)</signature>
<elmentName>Ms_classmark</elmentName>
<asnElementName>ms-classmark</asnElementName>
<elementTypeName>Ms_classmark</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMs_classmark</name>
<signature>void SetMs_classmark(const Ms_classmark&amp; element)</signature>
<elementName>Ms_classmark</elementName>
<asnElementName>ms-classmark</asnElementName>
<elementTypeName>Ms_classmark</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMs_classmark</name>
<signature>const Ms_classmark&amp; GetMs_classmark() const</signature>
<elementName>Ms_classmark</elementName>
<asnElementName>ms-classmark</asnElementName>
<elementTypeName>Ms_classmark</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMs_classmark</name>
<signature>bool OptionMs_classmark() const</signature>
<elementName>Ms_classmark</elementName>
<asnElementName>ms-classmark</asnElementName>
<elementTypeName>Ms_classmark</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMnpRequestedInfo</name>
<signature>void SetMnpRequestedInfo(MnpRequestedInfo* element)</signature>
<elmentName>MnpRequestedInfo</elmentName>
<asnElementName>mnpRequestedInfo</asnElementName>
<elementTypeName>MnpRequestedInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMnpRequestedInfo</name>
<signature>void SetMnpRequestedInfo(const MnpRequestedInfo&amp; element)</signature>
<elementName>MnpRequestedInfo</elementName>
<asnElementName>mnpRequestedInfo</asnElementName>
<elementTypeName>MnpRequestedInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMnpRequestedInfo</name>
<signature>const MnpRequestedInfo&amp; GetMnpRequestedInfo() const</signature>
<elementName>MnpRequestedInfo</elementName>
<asnElementName>mnpRequestedInfo</asnElementName>
<elementTypeName>MnpRequestedInfo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMnpRequestedInfo</name>
<signature>bool OptionMnpRequestedInfo() const</signature>
<elementName>MnpRequestedInfo</elementName>
<asnElementName>mnpRequestedInfo</asnElementName>
<elementTypeName>MnpRequestedInfo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationInformationEPS_Supported</name>
<signature>void SetLocationInformationEPS_Supported(LocationInformationEPS_Supported* element)</signature>
<elmentName>LocationInformationEPS_Supported</elmentName>
<asnElementName>locationInformationEPS-Supported</asnElementName>
<elementTypeName>LocationInformationEPS_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationInformationEPS_Supported</name>
<signature>void SetLocationInformationEPS_Supported(const LocationInformationEPS_Supported&amp; element)</signature>
<elementName>LocationInformationEPS_Supported</elementName>
<asnElementName>locationInformationEPS-Supported</asnElementName>
<elementTypeName>LocationInformationEPS_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationInformationEPS_Supported</name>
<signature>const LocationInformationEPS_Supported&amp; GetLocationInformationEPS_Supported() const</signature>
<elementName>LocationInformationEPS_Supported</elementName>
<asnElementName>locationInformationEPS-Supported</asnElementName>
<elementTypeName>LocationInformationEPS_Supported</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationInformationEPS_Supported</name>
<signature>bool OptionLocationInformationEPS_Supported() const</signature>
<elementName>LocationInformationEPS_Supported</elementName>
<asnElementName>locationInformationEPS-Supported</asnElementName>
<elementTypeName>LocationInformationEPS_Supported</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetT_adsData</name>
<signature>void SetT_adsData(T_adsData* element)</signature>
<elmentName>T_adsData</elmentName>
<asnElementName>t-adsData</asnElementName>
<elementTypeName>T_adsData</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetT_adsData</name>
<signature>void SetT_adsData(const T_adsData&amp; element)</signature>
<elementName>T_adsData</elementName>
<asnElementName>t-adsData</asnElementName>
<elementTypeName>T_adsData</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetT_adsData</name>
<signature>const T_adsData&amp; GetT_adsData() const</signature>
<elementName>T_adsData</elementName>
<asnElementName>t-adsData</asnElementName>
<elementTypeName>T_adsData</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionT_adsData</name>
<signature>bool OptionT_adsData() const</signature>
<elementName>T_adsData</elementName>
<asnElementName>t-adsData</asnElementName>
<elementTypeName>T_adsData</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRequestedNodes</name>
<signature>void SetRequestedNodes(RequestedNodes* element)</signature>
<elmentName>RequestedNodes</elmentName>
<asnElementName>requestedNodes</asnElementName>
<elementTypeName>RequestedNodes</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRequestedNodes</name>
<signature>void SetRequestedNodes(const RequestedNodes&amp; element)</signature>
<elementName>RequestedNodes</elementName>
<asnElementName>requestedNodes</asnElementName>
<elementTypeName>RequestedNodes</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRequestedNodes</name>
<signature>const RequestedNodes&amp; GetRequestedNodes() const</signature>
<elementName>RequestedNodes</elementName>
<asnElementName>requestedNodes</asnElementName>
<elementTypeName>RequestedNodes</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRequestedNodes</name>
<signature>bool OptionRequestedNodes() const</signature>
<elementName>RequestedNodes</elementName>
<asnElementName>requestedNodes</asnElementName>
<elementTypeName>RequestedNodes</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServingNodeIndication</name>
<signature>void SetServingNodeIndication(ServingNodeIndication* element)</signature>
<elmentName>ServingNodeIndication</elmentName>
<asnElementName>servingNodeIndication</asnElementName>
<elementTypeName>ServingNodeIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServingNodeIndication</name>
<signature>void SetServingNodeIndication(const ServingNodeIndication&amp; element)</signature>
<elementName>ServingNodeIndication</elementName>
<asnElementName>servingNodeIndication</asnElementName>
<elementTypeName>ServingNodeIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServingNodeIndication</name>
<signature>const ServingNodeIndication&amp; GetServingNodeIndication() const</signature>
<elementName>ServingNodeIndication</elementName>
<asnElementName>servingNodeIndication</asnElementName>
<elementTypeName>ServingNodeIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServingNodeIndication</name>
<signature>bool OptionServingNodeIndication() const</signature>
<elementName>ServingNodeIndication</elementName>
<asnElementName>servingNodeIndication</asnElementName>
<elementTypeName>ServingNodeIndication</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- RequestedInfo information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 3]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>RequestedInfo ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    locationInformation [0] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    subscriberState [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [2] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    currentLocation [3] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    requestedDomain [4] IMPLICIT DomainType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    imei [6] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ms-classmark [5] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mnpRequestedInfo [7] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationInformationEPS-Supported [11] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    t-adsData [8] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    requestedNodes [9] IMPLICIT RequestedNodes -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    servingNodeIndication [10] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

