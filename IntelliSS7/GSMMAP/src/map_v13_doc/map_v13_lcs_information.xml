<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>LCSInformation</className>
<asnTypeName>LCSInformation</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetGmlc_List</name>
<signature>void SetGmlc_List(GMLC_List* element)</signature>
<elmentName>Gmlc_List</elmentName>
<asnElementName>gmlc-List</asnElementName>
<elementTypeName>GMLC_List</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGmlc_List</name>
<signature>void SetGmlc_List(const GMLC_List&amp; element)</signature>
<elementName>Gmlc_List</elementName>
<asnElementName>gmlc-List</asnElementName>
<elementTypeName>GMLC_List</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGmlc_List</name>
<signature>const GMLC_List&amp; GetGmlc_List() const</signature>
<elementName>Gmlc_List</elementName>
<asnElementName>gmlc-List</asnElementName>
<elementTypeName>GMLC_List</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGmlc_List</name>
<signature>bool OptionGmlc_List() const</signature>
<elementName>Gmlc_List</elementName>
<asnElementName>gmlc-List</asnElementName>
<elementTypeName>GMLC_List</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLcs_PrivacyExceptionList</name>
<signature>void SetLcs_PrivacyExceptionList(LCS_PrivacyExceptionList* element)</signature>
<elmentName>Lcs_PrivacyExceptionList</elmentName>
<asnElementName>lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLcs_PrivacyExceptionList</name>
<signature>void SetLcs_PrivacyExceptionList(const LCS_PrivacyExceptionList&amp; element)</signature>
<elementName>Lcs_PrivacyExceptionList</elementName>
<asnElementName>lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLcs_PrivacyExceptionList</name>
<signature>const LCS_PrivacyExceptionList&amp; GetLcs_PrivacyExceptionList() const</signature>
<elementName>Lcs_PrivacyExceptionList</elementName>
<asnElementName>lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLcs_PrivacyExceptionList</name>
<signature>bool OptionLcs_PrivacyExceptionList() const</signature>
<elementName>Lcs_PrivacyExceptionList</elementName>
<asnElementName>lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMolr_List</name>
<signature>void SetMolr_List(MOLR_List* element)</signature>
<elmentName>Molr_List</elmentName>
<asnElementName>molr-List</asnElementName>
<elementTypeName>MOLR_List</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMolr_List</name>
<signature>void SetMolr_List(const MOLR_List&amp; element)</signature>
<elementName>Molr_List</elementName>
<asnElementName>molr-List</asnElementName>
<elementTypeName>MOLR_List</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMolr_List</name>
<signature>const MOLR_List&amp; GetMolr_List() const</signature>
<elementName>Molr_List</elementName>
<asnElementName>molr-List</asnElementName>
<elementTypeName>MOLR_List</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMolr_List</name>
<signature>bool OptionMolr_List() const</signature>
<elementName>Molr_List</elementName>
<asnElementName>molr-List</asnElementName>
<elementTypeName>MOLR_List</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdd_lcs_PrivacyExceptionList</name>
<signature>void SetAdd_lcs_PrivacyExceptionList(LCS_PrivacyExceptionList* element)</signature>
<elmentName>Add_lcs_PrivacyExceptionList</elmentName>
<asnElementName>add-lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdd_lcs_PrivacyExceptionList</name>
<signature>void SetAdd_lcs_PrivacyExceptionList(const LCS_PrivacyExceptionList&amp; element)</signature>
<elementName>Add_lcs_PrivacyExceptionList</elementName>
<asnElementName>add-lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdd_lcs_PrivacyExceptionList</name>
<signature>const LCS_PrivacyExceptionList&amp; GetAdd_lcs_PrivacyExceptionList() const</signature>
<elementName>Add_lcs_PrivacyExceptionList</elementName>
<asnElementName>add-lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdd_lcs_PrivacyExceptionList</name>
<signature>bool OptionAdd_lcs_PrivacyExceptionList() const</signature>
<elementName>Add_lcs_PrivacyExceptionList</elementName>
<asnElementName>add-lcs-PrivacyExceptionList</asnElementName>
<elementTypeName>LCS_PrivacyExceptionList</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- LCSInformation information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>LCSInformation ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    gmlc-List [0] IMPLICIT GMLC-List -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    lcs-PrivacyExceptionList [1] IMPLICIT LCS-PrivacyExceptionList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    molr-List [2] IMPLICIT MOLR-List -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    add-lcs-PrivacyExceptionList [3] IMPLICIT LCS-PrivacyExceptionList -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

