<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>SelectedUMTS_Algorithms</className>
<asnTypeName>SelectedUMTS-Algorithms</asnTypeName>
<moduleName>MAP_V13</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetIntegrityProtectionAlgorithm</name>
<signature>void SetIntegrityProtectionAlgorithm(ChosenIntegrityProtectionAlgorithm* element)</signature>
<elmentName>IntegrityProtectionAlgorithm</elmentName>
<asnElementName>integrityProtectionAlgorithm</asnElementName>
<elementTypeName>ChosenIntegrityProtectionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIntegrityProtectionAlgorithm</name>
<signature>void SetIntegrityProtectionAlgorithm(const ChosenIntegrityProtectionAlgorithm&amp; element)</signature>
<elementName>IntegrityProtectionAlgorithm</elementName>
<asnElementName>integrityProtectionAlgorithm</asnElementName>
<elementTypeName>ChosenIntegrityProtectionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIntegrityProtectionAlgorithm</name>
<signature>const ChosenIntegrityProtectionAlgorithm&amp; GetIntegrityProtectionAlgorithm() const</signature>
<elementName>IntegrityProtectionAlgorithm</elementName>
<asnElementName>integrityProtectionAlgorithm</asnElementName>
<elementTypeName>ChosenIntegrityProtectionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIntegrityProtectionAlgorithm</name>
<signature>bool OptionIntegrityProtectionAlgorithm() const</signature>
<elementName>IntegrityProtectionAlgorithm</elementName>
<asnElementName>integrityProtectionAlgorithm</asnElementName>
<elementTypeName>ChosenIntegrityProtectionAlgorithm</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEncryptionAlgorithm</name>
<signature>void SetEncryptionAlgorithm(ChosenEncryptionAlgorithm* element)</signature>
<elmentName>EncryptionAlgorithm</elmentName>
<asnElementName>encryptionAlgorithm</asnElementName>
<elementTypeName>ChosenEncryptionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEncryptionAlgorithm</name>
<signature>void SetEncryptionAlgorithm(const ChosenEncryptionAlgorithm&amp; element)</signature>
<elementName>EncryptionAlgorithm</elementName>
<asnElementName>encryptionAlgorithm</asnElementName>
<elementTypeName>ChosenEncryptionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEncryptionAlgorithm</name>
<signature>const ChosenEncryptionAlgorithm&amp; GetEncryptionAlgorithm() const</signature>
<elementName>EncryptionAlgorithm</elementName>
<asnElementName>encryptionAlgorithm</asnElementName>
<elementTypeName>ChosenEncryptionAlgorithm</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEncryptionAlgorithm</name>
<signature>bool OptionEncryptionAlgorithm() const</signature>
<elementName>EncryptionAlgorithm</elementName>
<asnElementName>encryptionAlgorithm</asnElementName>
<elementTypeName>ChosenEncryptionAlgorithm</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SelectedUMTS-Algorithms information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 2]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SelectedUMTS-Algorithms ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    integrityProtectionAlgorithm [0] IMPLICIT ChosenIntegrityProtectionAlgorithm -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    encryptionAlgorithm [1] IMPLICIT ChosenEncryptionAlgorithm -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [2] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

