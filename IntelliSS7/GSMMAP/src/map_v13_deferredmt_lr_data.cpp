//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_deferredmt_lr_data.h>

#include <AsnDescSequence.h>
#include <AsnDescBitString.h>
#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;




////////// Begin Nested Class(es) //////////


// Type DeferredLocationEventType is a reference => no code generated.

// Type TerminationCause is a reference => no code generated.

// Type LCSLocationInfo is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* Deferredmt_lrData::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Deferredmt_lrData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetDeferredLocationEventTypeStaticDescription();
        staticDesc._elementVect[1] = GetTerminationCauseStaticDescription();
        staticDesc._elementVect[2] = GetLcsLocationInfoStaticDescription();
        staticDesc.SetTypeName("Deferredmt-lrData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Deferredmt_lrData::GetDeferredLocationEventTypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescBitString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new DeferredLocationEventType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 3));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 16;
        staticDesc.SetNamedTypeName("deferredLocationEventType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Deferredmt_lrData::GetTerminationCauseStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TerminationCause(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"normal", 0}, {"errorundefined", 1}, {"internalTimeout", 2}, {"congestion", 3}, {"mt-lrRestart", 4}, {"privacyViolation", 5}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("terminationCause");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Deferredmt_lrData::GetLcsLocationInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(9);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LCSLocationInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LCSLocationInfo::GetNetworkNode_NumberStaticDescription();
        staticDesc._elementVect[1] = LCSLocationInfo::GetLmsiStaticDescription();
        staticDesc._elementVect[2] = LCSLocationInfo::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = LCSLocationInfo::GetGprsNodeIndicatorStaticDescription();
        staticDesc._elementVect[4] = LCSLocationInfo::GetAdditional_NumberStaticDescription();
        staticDesc._elementVect[5] = LCSLocationInfo::GetSupportedLCS_CapabilitySetsStaticDescription();
        staticDesc._elementVect[6] = LCSLocationInfo::GetAdditional_LCS_CapabilitySetsStaticDescription();
        staticDesc._elementVect[7] = LCSLocationInfo::GetMme_NameStaticDescription();
        staticDesc._elementVect[8] = LCSLocationInfo::GetAaa_Server_NameStaticDescription();
        staticDesc.SetNamedTypeName("lcsLocationInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





