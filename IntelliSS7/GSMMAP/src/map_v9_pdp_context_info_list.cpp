//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_pdp_context_info_list.h>

#include <AsnDescSequenceOf.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class //////////


// Type PDP_ContextInfo is a reference => no code generated.

////////// End Nested Class //////////

AsnDescObject* PDP_ContextInfoList::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new PDP_ContextInfoList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 50;
        staticDesc._element = GetPDP_ContextInfoStaticDescription();
        staticDesc.SetTypeName("PDP-ContextInfoList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* PDP_ContextInfoList::GetPDP_ContextInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(21);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDP_ContextInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = PDP_ContextInfo::GetPdp_ContextIdentifierStaticDescription();
        staticDesc._elementVect[1] = PDP_ContextInfo::GetPdp_ContextActiveStaticDescription();
        staticDesc._elementVect[2] = PDP_ContextInfo::GetPdp_TypeStaticDescription();
        staticDesc._elementVect[3] = PDP_ContextInfo::GetPdp_AddressStaticDescription();
        staticDesc._elementVect[4] = PDP_ContextInfo::GetApn_SubscribedStaticDescription();
        staticDesc._elementVect[5] = PDP_ContextInfo::GetApn_InUseStaticDescription();
        staticDesc._elementVect[6] = PDP_ContextInfo::GetNsapiStaticDescription();
        staticDesc._elementVect[7] = PDP_ContextInfo::GetTransactionIdStaticDescription();
        staticDesc._elementVect[8] = PDP_ContextInfo::GetTeid_ForGnAndGpStaticDescription();
        staticDesc._elementVect[9] = PDP_ContextInfo::GetTeid_ForIuStaticDescription();
        staticDesc._elementVect[10] = PDP_ContextInfo::GetGgsn_AddressStaticDescription();
        staticDesc._elementVect[11] = PDP_ContextInfo::GetQos_SubscribedStaticDescription();
        staticDesc._elementVect[12] = PDP_ContextInfo::GetQos_RequestedStaticDescription();
        staticDesc._elementVect[13] = PDP_ContextInfo::GetQos_NegotiatedStaticDescription();
        staticDesc._elementVect[14] = PDP_ContextInfo::GetChargingIdStaticDescription();
        staticDesc._elementVect[15] = PDP_ContextInfo::GetChargingCharacteristicsStaticDescription();
        staticDesc._elementVect[16] = PDP_ContextInfo::GetRnc_AddressStaticDescription();
        staticDesc._elementVect[17] = PDP_ContextInfo::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[18] = PDP_ContextInfo::GetQos2_SubscribedStaticDescription();
        staticDesc._elementVect[19] = PDP_ContextInfo::GetQos2_RequestedStaticDescription();
        staticDesc._elementVect[20] = PDP_ContextInfo::GetQos2_NegotiatedStaticDescription();
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





