//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_current_security_context.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type GSM_SecurityContextData is a reference => no code generated.

// Type UMTS_SecurityContextData is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* CurrentSecurityContext::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new CurrentSecurityContext(&staticDesc));
        staticDesc._choiceList.push_back(GetGsm_SecurityContextDataStaticDescription());
        staticDesc._choiceList.push_back(GetUmts_SecurityContextDataStaticDescription());
        staticDesc.SetTypeName("CurrentSecurityContext");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CurrentSecurityContext::GetGsm_SecurityContextDataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GSM_SecurityContextData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GSM_SecurityContextData::GetKcStaticDescription();
        staticDesc._elementVect[1] = GSM_SecurityContextData::GetCksnStaticDescription();
        staticDesc.SetNamedTypeName("gsm-SecurityContextData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CurrentSecurityContext::GetUmts_SecurityContextDataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new UMTS_SecurityContextData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = UMTS_SecurityContextData::GetCkStaticDescription();
        staticDesc._elementVect[1] = UMTS_SecurityContextData::GetIkStaticDescription();
        staticDesc._elementVect[2] = UMTS_SecurityContextData::GetKsiStaticDescription();
        staticDesc.SetNamedTypeName("umts-SecurityContextData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





