//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_sgsn_camel_subscription_info.h>

#include <AsnDescSequence.h>
#include <AsnDescSequenceOf.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type GPRS_CSI is a reference => no code generated.

// Type SMS_CSI is a reference => no code generated.

// Type ExtensionContainer is a reference => no code generated.

// Type SMS_CSI is a reference => no code generated.

// Type MT_smsCAMELTDP_CriteriaList is a reference => no code generated.

// Type MG_CSI is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(6);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new SGSN_CAMEL_SubscriptionInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetGprs_CSIStaticDescription();
        staticDesc._elementVect[1] = GetMo_sms_CSIStaticDescription();
        staticDesc._elementVect[2] = GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = GetMt_sms_CSIStaticDescription();
        staticDesc._elementVect[4] = GetMt_smsCAMELTDP_CriteriaListStaticDescription();
        staticDesc._elementVect[5] = GetMg_csiStaticDescription();
        staticDesc.SetTypeName("SGSN-CAMEL-SubscriptionInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetGprs_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRS_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GPRS_CSI::GetGprs_CamelTDPDataListStaticDescription();
        staticDesc._elementVect[1] = GPRS_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[2] = GPRS_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = GPRS_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = GPRS_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("gprs-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetMo_sms_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SMS_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = SMS_CSI::GetSms_CAMEL_TDP_DataListStaticDescription();
        staticDesc._elementVect[1] = SMS_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[2] = SMS_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = SMS_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = SMS_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("mo-sms-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetExtensionContainerStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ExtensionContainer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ExtensionContainer::GetPrivateExtensionListStaticDescription();
        staticDesc._elementVect[1] = ExtensionContainer::GetPcs_ExtensionsStaticDescription();
        staticDesc.SetNamedTypeName("extensionContainer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetMt_sms_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SMS_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = SMS_CSI::GetSms_CAMEL_TDP_DataListStaticDescription();
        staticDesc._elementVect[1] = SMS_CSI::GetCamelCapabilityHandlingStaticDescription();
        staticDesc._elementVect[2] = SMS_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[3] = SMS_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[4] = SMS_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("mt-sms-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetMt_smsCAMELTDP_CriteriaListStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MT_smsCAMELTDP_CriteriaList(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 10;
        staticDesc._element = MT_smsCAMELTDP_CriteriaList::GetMT_smsCAMELTDP_CriteriaStaticDescription();
        staticDesc.SetNamedTypeName("mt-smsCAMELTDP-CriteriaList");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* SGSN_CAMEL_SubscriptionInfo::GetMg_csiStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(6);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MG_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = MG_CSI::GetMobilityTriggersStaticDescription();
        staticDesc._elementVect[1] = MG_CSI::GetServiceKeyStaticDescription();
        staticDesc._elementVect[2] = MG_CSI::GetGsmSCF_AddressStaticDescription();
        staticDesc._elementVect[3] = MG_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[4] = MG_CSI::GetNotificationToCSEStaticDescription();
        staticDesc._elementVect[5] = MG_CSI::GetCsi_ActiveStaticDescription();
        staticDesc.SetNamedTypeName("mg-csi");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





