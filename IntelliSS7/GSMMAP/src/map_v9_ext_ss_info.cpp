//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_ext_ss_info.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type Ext_ForwInfo is a reference => no code generated.

// Type Ext_CallBarInfo is a reference => no code generated.

// Type CUG_Info is a reference => no code generated.

// Type Ext_SS_Data is a reference => no code generated.

// Type EMLPP_Info is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* Ext_SS_Info::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Ext_SS_Info(&staticDesc));
        staticDesc._choiceList.push_back(GetForwardingInfoStaticDescription());
        staticDesc._choiceList.push_back(GetCallBarringInfoStaticDescription());
        staticDesc._choiceList.push_back(GetCug_InfoStaticDescription());
        staticDesc._choiceList.push_back(GetSs_DataStaticDescription());
        staticDesc._choiceList.push_back(GetEmlpp_InfoStaticDescription());
        staticDesc.SetTypeName("Ext-SS-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_Info::GetForwardingInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Ext_ForwInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Ext_ForwInfo::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = Ext_ForwInfo::GetForwardingFeatureListStaticDescription();
        staticDesc._elementVect[2] = Ext_ForwInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("forwardingInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_Info::GetCallBarringInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Ext_CallBarInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Ext_CallBarInfo::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = Ext_CallBarInfo::GetCallBarringFeatureListStaticDescription();
        staticDesc._elementVect[2] = Ext_CallBarInfo::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("callBarringInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_Info::GetCug_InfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CUG_Info(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = CUG_Info::GetCug_SubscriptionListStaticDescription();
        staticDesc._elementVect[1] = CUG_Info::GetCug_FeatureListStaticDescription();
        staticDesc._elementVect[2] = CUG_Info::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("cug-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_Info::GetSs_DataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Ext_SS_Data(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Ext_SS_Data::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = Ext_SS_Data::GetSs_StatusStaticDescription();
        staticDesc._elementVect[2] = Ext_SS_Data::GetSs_SubscriptionOptionStaticDescription();
        staticDesc._elementVect[3] = Ext_SS_Data::GetBasicServiceGroupListStaticDescription();
        staticDesc._elementVect[4] = Ext_SS_Data::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("ss-Data");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* Ext_SS_Info::GetEmlpp_InfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EMLPP_Info(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = EMLPP_Info::GetMaximumentitledPriorityStaticDescription();
        staticDesc._elementVect[1] = EMLPP_Info::GetDefaultPriorityStaticDescription();
        staticDesc._elementVect[2] = EMLPP_Info::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("emlpp-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





