//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v9_any_time_modification_arg.h>

#include <AsnDescSequence.h>
#include <AsnDescNull.h>
#include <AsnDescChoice.h>
#include <AsnDescOctetString.h>


using namespace its;
using namespace map_v9;




////////// Begin Nested Class(es) //////////


// Type SubscriberIdentity is a reference => no code generated.

// Type ISDN_AddressString is a reference => no code generated.

// Type ModificationRequestFor_CF_Info is a reference => no code generated.

// Type ModificationRequestFor_CB_Info is a reference => no code generated.

// Type ModificationRequestFor_CSI is a reference => no code generated.

// Type ExtensionContainer is a reference => no code generated.


AsnDescObject* AnyTimeModificationArg::LongFTN_Supported::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new LongFTN_Supported(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("longFTN-Supported");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


// Type ModificationRequestFor_ODB_data is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* AnyTimeModificationArg::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(8);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_GSMMAP) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new AnyTimeModificationArg(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetSubscriberIdentityStaticDescription();
        staticDesc._elementVect[1] = GetGsmSCF_AddressStaticDescription();
        staticDesc._elementVect[2] = GetModificationRequestFor_CF_InfoStaticDescription();
        staticDesc._elementVect[3] = GetModificationRequestFor_CB_InfoStaticDescription();
        staticDesc._elementVect[4] = GetModificationRequestFor_CSIStaticDescription();
        staticDesc._elementVect[5] = GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = GetLongFTN_SupportedStaticDescription();
        staticDesc._elementVect[7] = GetModificationRequestFor_ODB_dataStaticDescription();
        staticDesc.SetTypeName("AnyTimeModificationArg");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetSubscriberIdentityStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SubscriberIdentity(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._choiceList.push_back(SubscriberIdentity::GetImsiStaticDescription());
        staticDesc._choiceList.push_back(SubscriberIdentity::GetMsisdnStaticDescription());
        staticDesc.SetNamedTypeName("subscriberIdentity");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetGsmSCF_AddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ISDN_AddressString(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 20;
        staticDesc.SetNamedTypeName("gsmSCF-Address");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetModificationRequestFor_CF_InfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(8);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ModificationRequestFor_CF_Info(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ModificationRequestFor_CF_Info::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = ModificationRequestFor_CF_Info::GetBasicServiceStaticDescription();
        staticDesc._elementVect[2] = ModificationRequestFor_CF_Info::GetSs_StatusStaticDescription();
        staticDesc._elementVect[3] = ModificationRequestFor_CF_Info::GetForwardedToNumberStaticDescription();
        staticDesc._elementVect[4] = ModificationRequestFor_CF_Info::GetForwardedToSubaddressStaticDescription();
        staticDesc._elementVect[5] = ModificationRequestFor_CF_Info::GetNoReplyConditionTimeStaticDescription();
        staticDesc._elementVect[6] = ModificationRequestFor_CF_Info::GetModifyNotificationToCSEStaticDescription();
        staticDesc._elementVect[7] = ModificationRequestFor_CF_Info::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("modificationRequestFor-CF-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetModificationRequestFor_CB_InfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ModificationRequestFor_CB_Info(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ModificationRequestFor_CB_Info::GetSs_CodeStaticDescription();
        staticDesc._elementVect[1] = ModificationRequestFor_CB_Info::GetBasicServiceStaticDescription();
        staticDesc._elementVect[2] = ModificationRequestFor_CB_Info::GetSs_StatusStaticDescription();
        staticDesc._elementVect[3] = ModificationRequestFor_CB_Info::GetPasswordStaticDescription();
        staticDesc._elementVect[4] = ModificationRequestFor_CB_Info::GetWrongPasswordAttemptsCounterStaticDescription();
        staticDesc._elementVect[5] = ModificationRequestFor_CB_Info::GetModifyNotificationToCSEStaticDescription();
        staticDesc._elementVect[6] = ModificationRequestFor_CB_Info::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("modificationRequestFor-CB-Info");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetModificationRequestFor_CSIStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ModificationRequestFor_CSI(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ModificationRequestFor_CSI::GetRequestedCamel_SubscriptionInfoStaticDescription();
        staticDesc._elementVect[1] = ModificationRequestFor_CSI::GetModifyNotificationToCSEStaticDescription();
        staticDesc._elementVect[2] = ModificationRequestFor_CSI::GetModifyCSI_StateStaticDescription();
        staticDesc._elementVect[3] = ModificationRequestFor_CSI::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[4] = ModificationRequestFor_CSI::GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription();
        staticDesc.SetNamedTypeName("modificationRequestFor-CSI");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetExtensionContainerStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ExtensionContainer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ExtensionContainer::GetPrivateExtensionListStaticDescription();
        staticDesc._elementVect[1] = ExtensionContainer::GetPcs_ExtensionsStaticDescription();
        staticDesc.SetNamedTypeName("extensionContainer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetLongFTN_SupportedStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LongFTN_Supported(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("longFTN-Supported");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AnyTimeModificationArg::GetModificationRequestFor_ODB_dataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ModificationRequestFor_ODB_data(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 7));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = ModificationRequestFor_ODB_data::GetOdb_dataStaticDescription();
        staticDesc._elementVect[1] = ModificationRequestFor_ODB_data::GetModifyNotificationToCSEStaticDescription();
        staticDesc._elementVect[2] = ModificationRequestFor_ODB_data::GetExtensionContainerStaticDescription();
        staticDesc.SetNamedTypeName("modificationRequestFor-ODB-data");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





