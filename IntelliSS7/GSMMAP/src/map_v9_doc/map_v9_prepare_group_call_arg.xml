<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PrepareGroupCallArg</className>
<asnTypeName>PrepareGroupCallArg</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetTeleservice</name>
<signature>void SetTeleservice(Ext_TeleserviceCode* element)</signature>
<elmentName>Teleservice</elmentName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTeleservice</name>
<signature>void SetTeleservice(const Ext_TeleserviceCode&amp; element)</signature>
<elementName>Teleservice</elementName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTeleservice</name>
<signature>const Ext_TeleserviceCode&amp; GetTeleservice() const</signature>
<elementName>Teleservice</elementName>
<asnElementName>teleservice</asnElementName>
<elementTypeName>Ext_TeleserviceCode</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetAsciCallReference</name>
<signature>void SetAsciCallReference(ASCI_CallReference* element)</signature>
<elmentName>AsciCallReference</elmentName>
<asnElementName>asciCallReference</asnElementName>
<elementTypeName>ASCI_CallReference</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAsciCallReference</name>
<signature>void SetAsciCallReference(const ASCI_CallReference&amp; element)</signature>
<elementName>AsciCallReference</elementName>
<asnElementName>asciCallReference</asnElementName>
<elementTypeName>ASCI_CallReference</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAsciCallReference</name>
<signature>const ASCI_CallReference&amp; GetAsciCallReference() const</signature>
<elementName>AsciCallReference</elementName>
<asnElementName>asciCallReference</asnElementName>
<elementTypeName>ASCI_CallReference</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCodec_Info</name>
<signature>void SetCodec_Info(CODEC_Info* element)</signature>
<elmentName>Codec_Info</elmentName>
<asnElementName>codec-Info</asnElementName>
<elementTypeName>CODEC_Info</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCodec_Info</name>
<signature>void SetCodec_Info(const CODEC_Info&amp; element)</signature>
<elementName>Codec_Info</elementName>
<asnElementName>codec-Info</asnElementName>
<elementTypeName>CODEC_Info</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCodec_Info</name>
<signature>const CODEC_Info&amp; GetCodec_Info() const</signature>
<elementName>Codec_Info</elementName>
<asnElementName>codec-Info</asnElementName>
<elementTypeName>CODEC_Info</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCipheringAlgorithm</name>
<signature>void SetCipheringAlgorithm(CipheringAlgorithm* element)</signature>
<elmentName>CipheringAlgorithm</elmentName>
<asnElementName>cipheringAlgorithm</asnElementName>
<elementTypeName>CipheringAlgorithm</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCipheringAlgorithm</name>
<signature>void SetCipheringAlgorithm(const CipheringAlgorithm&amp; element)</signature>
<elementName>CipheringAlgorithm</elementName>
<asnElementName>cipheringAlgorithm</asnElementName>
<elementTypeName>CipheringAlgorithm</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCipheringAlgorithm</name>
<signature>const CipheringAlgorithm&amp; GetCipheringAlgorithm() const</signature>
<elementName>CipheringAlgorithm</elementName>
<asnElementName>cipheringAlgorithm</asnElementName>
<elementTypeName>CipheringAlgorithm</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetGroupKeyNumber</name>
<signature>void SetGroupKeyNumber(GroupKeyNumber* element)</signature>
<elmentName>GroupKeyNumber</elmentName>
<asnElementName>groupKeyNumber</asnElementName>
<elementTypeName>GroupKeyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGroupKeyNumber</name>
<signature>void SetGroupKeyNumber(const GroupKeyNumber&amp; element)</signature>
<elementName>GroupKeyNumber</elementName>
<asnElementName>groupKeyNumber</asnElementName>
<elementTypeName>GroupKeyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGroupKeyNumber</name>
<signature>const GroupKeyNumber&amp; GetGroupKeyNumber() const</signature>
<elementName>GroupKeyNumber</elementName>
<asnElementName>groupKeyNumber</asnElementName>
<elementTypeName>GroupKeyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGroupKeyNumber</name>
<signature>bool OptionGroupKeyNumber() const</signature>
<elementName>GroupKeyNumber</elementName>
<asnElementName>groupKeyNumber</asnElementName>
<elementTypeName>GroupKeyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGroupKey</name>
<signature>void SetGroupKey(Kc* element)</signature>
<elmentName>GroupKey</elmentName>
<asnElementName>groupKey</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGroupKey</name>
<signature>void SetGroupKey(const Kc&amp; element)</signature>
<elementName>GroupKey</elementName>
<asnElementName>groupKey</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGroupKey</name>
<signature>const Kc&amp; GetGroupKey() const</signature>
<elementName>GroupKey</elementName>
<asnElementName>groupKey</asnElementName>
<elementTypeName>Kc</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGroupKey</name>
<signature>bool OptionGroupKey() const</signature>
<elementName>GroupKey</elementName>
<asnElementName>groupKey</asnElementName>
<elementTypeName>Kc</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPriority</name>
<signature>void SetPriority(EMLPP_Priority* element)</signature>
<elmentName>Priority</elmentName>
<asnElementName>priority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPriority</name>
<signature>void SetPriority(const EMLPP_Priority&amp; element)</signature>
<elementName>Priority</elementName>
<asnElementName>priority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPriority</name>
<signature>const EMLPP_Priority&amp; GetPriority() const</signature>
<elementName>Priority</elementName>
<asnElementName>priority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPriority</name>
<signature>bool OptionPriority() const</signature>
<elementName>Priority</elementName>
<asnElementName>priority</asnElementName>
<elementTypeName>EMLPP_Priority</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkFree</name>
<signature>void SetUplinkFree(UplinkFree* element)</signature>
<elmentName>UplinkFree</elmentName>
<asnElementName>uplinkFree</asnElementName>
<elementTypeName>UplinkFree</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkFree</name>
<signature>void SetUplinkFree(const UplinkFree&amp; element)</signature>
<elementName>UplinkFree</elementName>
<asnElementName>uplinkFree</asnElementName>
<elementTypeName>UplinkFree</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkFree</name>
<signature>const UplinkFree&amp; GetUplinkFree() const</signature>
<elementName>UplinkFree</elementName>
<asnElementName>uplinkFree</asnElementName>
<elementTypeName>UplinkFree</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkFree</name>
<signature>bool OptionUplinkFree() const</signature>
<elementName>UplinkFree</elementName>
<asnElementName>uplinkFree</asnElementName>
<elementTypeName>UplinkFree</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetVstk</name>
<signature>void SetVstk(VSTK* element)</signature>
<elmentName>Vstk</elmentName>
<asnElementName>vstk</asnElementName>
<elementTypeName>VSTK</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetVstk</name>
<signature>void SetVstk(const VSTK&amp; element)</signature>
<elementName>Vstk</elementName>
<asnElementName>vstk</asnElementName>
<elementTypeName>VSTK</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetVstk</name>
<signature>const VSTK&amp; GetVstk() const</signature>
<elementName>Vstk</elementName>
<asnElementName>vstk</asnElementName>
<elementTypeName>VSTK</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionVstk</name>
<signature>bool OptionVstk() const</signature>
<elementName>Vstk</elementName>
<asnElementName>vstk</asnElementName>
<elementTypeName>VSTK</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetVstk_rand</name>
<signature>void SetVstk_rand(VSTK_RAND* element)</signature>
<elmentName>Vstk_rand</elmentName>
<asnElementName>vstk-rand</asnElementName>
<elementTypeName>VSTK_RAND</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetVstk_rand</name>
<signature>void SetVstk_rand(const VSTK_RAND&amp; element)</signature>
<elementName>Vstk_rand</elementName>
<asnElementName>vstk-rand</asnElementName>
<elementTypeName>VSTK_RAND</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetVstk_rand</name>
<signature>const VSTK_RAND&amp; GetVstk_rand() const</signature>
<elementName>Vstk_rand</elementName>
<asnElementName>vstk-rand</asnElementName>
<elementTypeName>VSTK_RAND</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PrepareGroupCallArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PrepareGroupCallArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    teleservice Ext-TeleserviceCode -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    asciCallReference ASCI-CallReference -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    codec-Info CODEC-Info -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cipheringAlgorithm CipheringAlgorithm -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    groupKeyNumber [0] IMPLICIT GroupKeyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    groupKey [1] IMPLICIT Kc -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    priority [2] IMPLICIT EMLPP-Priority -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkFree [3] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [4] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    vstk [5] IMPLICIT VSTK -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    vstk-rand [6] IMPLICIT VSTK-RAND -- [linked] --</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

