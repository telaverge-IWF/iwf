<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>AuthenticationFailureReportArg</className>
<asnTypeName>AuthenticationFailureReportArg</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetFailureCause</name>
<signature>void SetFailureCause(FailureCause* element)</signature>
<elmentName>FailureCause</elmentName>
<asnElementName>failureCause</asnElementName>
<elementTypeName>FailureCause</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFailureCause</name>
<signature>void SetFailureCause(const FailureCause&amp; element)</signature>
<elementName>FailureCause</elementName>
<asnElementName>failureCause</asnElementName>
<elementTypeName>FailureCause</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFailureCause</name>
<signature>const FailureCause&amp; GetFailureCause() const</signature>
<elementName>FailureCause</elementName>
<asnElementName>failureCause</asnElementName>
<elementTypeName>FailureCause</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRe_attempt</name>
<signature>void SetRe_attempt(Re_attempt* element)</signature>
<elmentName>Re_attempt</elmentName>
<asnElementName>re-attempt</asnElementName>
<elementTypeName>Re_attempt</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRe_attempt</name>
<signature>void SetRe_attempt(const Re_attempt&amp; element)</signature>
<elementName>Re_attempt</elementName>
<asnElementName>re-attempt</asnElementName>
<elementTypeName>Re_attempt</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRe_attempt</name>
<signature>const Re_attempt&amp; GetRe_attempt() const</signature>
<elementName>Re_attempt</elementName>
<asnElementName>re-attempt</asnElementName>
<elementTypeName>Re_attempt</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRe_attempt</name>
<signature>bool OptionRe_attempt() const</signature>
<elementName>Re_attempt</elementName>
<asnElementName>re-attempt</asnElementName>
<elementTypeName>Re_attempt</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAccessType</name>
<signature>void SetAccessType(AccessType* element)</signature>
<elmentName>AccessType</elmentName>
<asnElementName>accessType</asnElementName>
<elementTypeName>AccessType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAccessType</name>
<signature>void SetAccessType(const AccessType&amp; element)</signature>
<elementName>AccessType</elementName>
<asnElementName>accessType</asnElementName>
<elementTypeName>AccessType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAccessType</name>
<signature>const AccessType&amp; GetAccessType() const</signature>
<elementName>AccessType</elementName>
<asnElementName>accessType</asnElementName>
<elementTypeName>AccessType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAccessType</name>
<signature>bool OptionAccessType() const</signature>
<elementName>AccessType</elementName>
<asnElementName>accessType</asnElementName>
<elementTypeName>AccessType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRand</name>
<signature>void SetRand(RAND* element)</signature>
<elmentName>Rand</elmentName>
<asnElementName>rand</asnElementName>
<elementTypeName>RAND</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRand</name>
<signature>void SetRand(const RAND&amp; element)</signature>
<elementName>Rand</elementName>
<asnElementName>rand</asnElementName>
<elementTypeName>RAND</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRand</name>
<signature>const RAND&amp; GetRand() const</signature>
<elementName>Rand</elementName>
<asnElementName>rand</asnElementName>
<elementTypeName>RAND</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRand</name>
<signature>bool OptionRand() const</signature>
<elementName>Rand</elementName>
<asnElementName>rand</asnElementName>
<elementTypeName>RAND</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetVlr_Number</name>
<signature>void SetVlr_Number(ISDN_AddressString* element)</signature>
<elmentName>Vlr_Number</elmentName>
<asnElementName>vlr-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetVlr_Number</name>
<signature>void SetVlr_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Vlr_Number</elementName>
<asnElementName>vlr-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetVlr_Number</name>
<signature>const ISDN_AddressString&amp; GetVlr_Number() const</signature>
<elementName>Vlr_Number</elementName>
<asnElementName>vlr-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionVlr_Number</name>
<signature>bool OptionVlr_Number() const</signature>
<elementName>Vlr_Number</elementName>
<asnElementName>vlr-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSgsn_Number</name>
<signature>void SetSgsn_Number(ISDN_AddressString* element)</signature>
<elmentName>Sgsn_Number</elmentName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSgsn_Number</name>
<signature>void SetSgsn_Number(const ISDN_AddressString&amp; element)</signature>
<elementName>Sgsn_Number</elementName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSgsn_Number</name>
<signature>const ISDN_AddressString&amp; GetSgsn_Number() const</signature>
<elementName>Sgsn_Number</elementName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSgsn_Number</name>
<signature>bool OptionSgsn_Number() const</signature>
<elementName>Sgsn_Number</elementName>
<asnElementName>sgsn-Number</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- AuthenticationFailureReportArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>AuthenticationFailureReportArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    imsi IMSI -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    failureCause FailureCause -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    re-attempt BOOLEAN OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    accessType AccessType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    rand RAND -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    vlr-Number [0] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    sgsn-Number [1] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

