<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>D_CSI</className>
<asnTypeName>D-CSI</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDp_AnalysedInfoCriteriaList</name>
<signature>void SetDp_AnalysedInfoCriteriaList(DP_AnalysedInfoCriteriaList* element)</signature>
<elmentName>Dp_AnalysedInfoCriteriaList</elmentName>
<asnElementName>dp-AnalysedInfoCriteriaList</asnElementName>
<elementTypeName>DP_AnalysedInfoCriteriaList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDp_AnalysedInfoCriteriaList</name>
<signature>void SetDp_AnalysedInfoCriteriaList(const DP_AnalysedInfoCriteriaList&amp; element)</signature>
<elementName>Dp_AnalysedInfoCriteriaList</elementName>
<asnElementName>dp-AnalysedInfoCriteriaList</asnElementName>
<elementTypeName>DP_AnalysedInfoCriteriaList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDp_AnalysedInfoCriteriaList</name>
<signature>const DP_AnalysedInfoCriteriaList&amp; GetDp_AnalysedInfoCriteriaList() const</signature>
<elementName>Dp_AnalysedInfoCriteriaList</elementName>
<asnElementName>dp-AnalysedInfoCriteriaList</asnElementName>
<elementTypeName>DP_AnalysedInfoCriteriaList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDp_AnalysedInfoCriteriaList</name>
<signature>bool OptionDp_AnalysedInfoCriteriaList() const</signature>
<elementName>Dp_AnalysedInfoCriteriaList</elementName>
<asnElementName>dp-AnalysedInfoCriteriaList</asnElementName>
<elementTypeName>DP_AnalysedInfoCriteriaList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCamelCapabilityHandling</name>
<signature>void SetCamelCapabilityHandling(CamelCapabilityHandling* element)</signature>
<elmentName>CamelCapabilityHandling</elmentName>
<asnElementName>camelCapabilityHandling</asnElementName>
<elementTypeName>CamelCapabilityHandling</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCamelCapabilityHandling</name>
<signature>void SetCamelCapabilityHandling(const CamelCapabilityHandling&amp; element)</signature>
<elementName>CamelCapabilityHandling</elementName>
<asnElementName>camelCapabilityHandling</asnElementName>
<elementTypeName>CamelCapabilityHandling</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCamelCapabilityHandling</name>
<signature>const CamelCapabilityHandling&amp; GetCamelCapabilityHandling() const</signature>
<elementName>CamelCapabilityHandling</elementName>
<asnElementName>camelCapabilityHandling</asnElementName>
<elementTypeName>CamelCapabilityHandling</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCamelCapabilityHandling</name>
<signature>bool OptionCamelCapabilityHandling() const</signature>
<elementName>CamelCapabilityHandling</elementName>
<asnElementName>camelCapabilityHandling</asnElementName>
<elementTypeName>CamelCapabilityHandling</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNotificationToCSE</name>
<signature>void SetNotificationToCSE(NotificationToCSE* element)</signature>
<elmentName>NotificationToCSE</elmentName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNotificationToCSE</name>
<signature>void SetNotificationToCSE(const NotificationToCSE&amp; element)</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNotificationToCSE</name>
<signature>const NotificationToCSE&amp; GetNotificationToCSE() const</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNotificationToCSE</name>
<signature>bool OptionNotificationToCSE() const</signature>
<elementName>NotificationToCSE</elementName>
<asnElementName>notificationToCSE</asnElementName>
<elementTypeName>NotificationToCSE</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCsi_Active</name>
<signature>void SetCsi_Active(Csi_Active* element)</signature>
<elmentName>Csi_Active</elmentName>
<asnElementName>csi-Active</asnElementName>
<elementTypeName>Csi_Active</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCsi_Active</name>
<signature>void SetCsi_Active(const Csi_Active&amp; element)</signature>
<elementName>Csi_Active</elementName>
<asnElementName>csi-Active</asnElementName>
<elementTypeName>Csi_Active</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCsi_Active</name>
<signature>const Csi_Active&amp; GetCsi_Active() const</signature>
<elementName>Csi_Active</elementName>
<asnElementName>csi-Active</asnElementName>
<elementTypeName>Csi_Active</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCsi_Active</name>
<signature>bool OptionCsi_Active() const</signature>
<elementName>Csi_Active</elementName>
<asnElementName>csi-Active</asnElementName>
<elementTypeName>Csi_Active</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- D-CSI information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 5]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>D-CSI ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    dp-AnalysedInfoCriteriaList [0] IMPLICIT DP-AnalysedInfoCriteriaList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    camelCapabilityHandling [1] IMPLICIT CamelCapabilityHandling -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [2] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    notificationToCSE [3] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    csi-Active [4] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

