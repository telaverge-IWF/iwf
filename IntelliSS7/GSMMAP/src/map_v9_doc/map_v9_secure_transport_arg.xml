<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>SecureTransportArg</className>
<asnTypeName>SecureTransportArg</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetSecurityHeader</name>
<signature>void SetSecurityHeader(SecurityHeader* element)</signature>
<elmentName>SecurityHeader</elmentName>
<asnElementName>securityHeader</asnElementName>
<elementTypeName>SecurityHeader</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSecurityHeader</name>
<signature>void SetSecurityHeader(const SecurityHeader&amp; element)</signature>
<elementName>SecurityHeader</elementName>
<asnElementName>securityHeader</asnElementName>
<elementTypeName>SecurityHeader</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSecurityHeader</name>
<signature>const SecurityHeader&amp; GetSecurityHeader() const</signature>
<elementName>SecurityHeader</elementName>
<asnElementName>securityHeader</asnElementName>
<elementTypeName>SecurityHeader</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetProtectedPayload</name>
<signature>void SetProtectedPayload(ProtectedPayload* element)</signature>
<elmentName>ProtectedPayload</elmentName>
<asnElementName>protectedPayload</asnElementName>
<elementTypeName>ProtectedPayload</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetProtectedPayload</name>
<signature>void SetProtectedPayload(const ProtectedPayload&amp; element)</signature>
<elementName>ProtectedPayload</elementName>
<asnElementName>protectedPayload</asnElementName>
<elementTypeName>ProtectedPayload</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetProtectedPayload</name>
<signature>const ProtectedPayload&amp; GetProtectedPayload() const</signature>
<elementName>ProtectedPayload</elementName>
<asnElementName>protectedPayload</asnElementName>
<elementTypeName>ProtectedPayload</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionProtectedPayload</name>
<signature>bool OptionProtectedPayload() const</signature>
<elementName>ProtectedPayload</elementName>
<asnElementName>protectedPayload</asnElementName>
<elementTypeName>ProtectedPayload</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- SecureTransportArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>SecureTransportArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    securityHeader SecurityHeader -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    protectedPayload ProtectedPayload -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

