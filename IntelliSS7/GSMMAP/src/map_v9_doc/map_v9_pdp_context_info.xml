<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PDP_ContextInfo</className>
<asnTypeName>PDP-ContextInfo</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetPdp_ContextIdentifier</name>
<signature>void SetPdp_ContextIdentifier(ContextId* element)</signature>
<elmentName>Pdp_ContextIdentifier</elmentName>
<asnElementName>pdp-ContextIdentifier</asnElementName>
<elementTypeName>ContextId</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPdp_ContextIdentifier</name>
<signature>void SetPdp_ContextIdentifier(const ContextId&amp; element)</signature>
<elementName>Pdp_ContextIdentifier</elementName>
<asnElementName>pdp-ContextIdentifier</asnElementName>
<elementTypeName>ContextId</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPdp_ContextIdentifier</name>
<signature>const ContextId&amp; GetPdp_ContextIdentifier() const</signature>
<elementName>Pdp_ContextIdentifier</elementName>
<asnElementName>pdp-ContextIdentifier</asnElementName>
<elementTypeName>ContextId</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetPdp_ContextActive</name>
<signature>void SetPdp_ContextActive(Pdp_ContextActive* element)</signature>
<elmentName>Pdp_ContextActive</elmentName>
<asnElementName>pdp-ContextActive</asnElementName>
<elementTypeName>Pdp_ContextActive</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPdp_ContextActive</name>
<signature>void SetPdp_ContextActive(const Pdp_ContextActive&amp; element)</signature>
<elementName>Pdp_ContextActive</elementName>
<asnElementName>pdp-ContextActive</asnElementName>
<elementTypeName>Pdp_ContextActive</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPdp_ContextActive</name>
<signature>const Pdp_ContextActive&amp; GetPdp_ContextActive() const</signature>
<elementName>Pdp_ContextActive</elementName>
<asnElementName>pdp-ContextActive</asnElementName>
<elementTypeName>Pdp_ContextActive</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPdp_ContextActive</name>
<signature>bool OptionPdp_ContextActive() const</signature>
<elementName>Pdp_ContextActive</elementName>
<asnElementName>pdp-ContextActive</asnElementName>
<elementTypeName>Pdp_ContextActive</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetPdp_Type</name>
<signature>void SetPdp_Type(PDP_Type* element)</signature>
<elmentName>Pdp_Type</elmentName>
<asnElementName>pdp-Type</asnElementName>
<elementTypeName>PDP_Type</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPdp_Type</name>
<signature>void SetPdp_Type(const PDP_Type&amp; element)</signature>
<elementName>Pdp_Type</elementName>
<asnElementName>pdp-Type</asnElementName>
<elementTypeName>PDP_Type</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPdp_Type</name>
<signature>const PDP_Type&amp; GetPdp_Type() const</signature>
<elementName>Pdp_Type</elementName>
<asnElementName>pdp-Type</asnElementName>
<elementTypeName>PDP_Type</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetPdp_Address</name>
<signature>void SetPdp_Address(PDP_Address* element)</signature>
<elmentName>Pdp_Address</elmentName>
<asnElementName>pdp-Address</asnElementName>
<elementTypeName>PDP_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetPdp_Address</name>
<signature>void SetPdp_Address(const PDP_Address&amp; element)</signature>
<elementName>Pdp_Address</elementName>
<asnElementName>pdp-Address</asnElementName>
<elementTypeName>PDP_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetPdp_Address</name>
<signature>const PDP_Address&amp; GetPdp_Address() const</signature>
<elementName>Pdp_Address</elementName>
<asnElementName>pdp-Address</asnElementName>
<elementTypeName>PDP_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionPdp_Address</name>
<signature>bool OptionPdp_Address() const</signature>
<elementName>Pdp_Address</elementName>
<asnElementName>pdp-Address</asnElementName>
<elementTypeName>PDP_Address</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetApn_Subscribed</name>
<signature>void SetApn_Subscribed(APN* element)</signature>
<elmentName>Apn_Subscribed</elmentName>
<asnElementName>apn-Subscribed</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetApn_Subscribed</name>
<signature>void SetApn_Subscribed(const APN&amp; element)</signature>
<elementName>Apn_Subscribed</elementName>
<asnElementName>apn-Subscribed</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetApn_Subscribed</name>
<signature>const APN&amp; GetApn_Subscribed() const</signature>
<elementName>Apn_Subscribed</elementName>
<asnElementName>apn-Subscribed</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionApn_Subscribed</name>
<signature>bool OptionApn_Subscribed() const</signature>
<elementName>Apn_Subscribed</elementName>
<asnElementName>apn-Subscribed</asnElementName>
<elementTypeName>APN</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetApn_InUse</name>
<signature>void SetApn_InUse(APN* element)</signature>
<elmentName>Apn_InUse</elmentName>
<asnElementName>apn-InUse</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetApn_InUse</name>
<signature>void SetApn_InUse(const APN&amp; element)</signature>
<elementName>Apn_InUse</elementName>
<asnElementName>apn-InUse</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetApn_InUse</name>
<signature>const APN&amp; GetApn_InUse() const</signature>
<elementName>Apn_InUse</elementName>
<asnElementName>apn-InUse</asnElementName>
<elementTypeName>APN</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionApn_InUse</name>
<signature>bool OptionApn_InUse() const</signature>
<elementName>Apn_InUse</elementName>
<asnElementName>apn-InUse</asnElementName>
<elementTypeName>APN</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNsapi</name>
<signature>void SetNsapi(NSAPI* element)</signature>
<elmentName>Nsapi</elmentName>
<asnElementName>nsapi</asnElementName>
<elementTypeName>NSAPI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNsapi</name>
<signature>void SetNsapi(const NSAPI&amp; element)</signature>
<elementName>Nsapi</elementName>
<asnElementName>nsapi</asnElementName>
<elementTypeName>NSAPI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNsapi</name>
<signature>const NSAPI&amp; GetNsapi() const</signature>
<elementName>Nsapi</elementName>
<asnElementName>nsapi</asnElementName>
<elementTypeName>NSAPI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNsapi</name>
<signature>bool OptionNsapi() const</signature>
<elementName>Nsapi</elementName>
<asnElementName>nsapi</asnElementName>
<elementTypeName>NSAPI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTransactionId</name>
<signature>void SetTransactionId(TransactionId* element)</signature>
<elmentName>TransactionId</elmentName>
<asnElementName>transactionId</asnElementName>
<elementTypeName>TransactionId</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTransactionId</name>
<signature>void SetTransactionId(const TransactionId&amp; element)</signature>
<elementName>TransactionId</elementName>
<asnElementName>transactionId</asnElementName>
<elementTypeName>TransactionId</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTransactionId</name>
<signature>const TransactionId&amp; GetTransactionId() const</signature>
<elementName>TransactionId</elementName>
<asnElementName>transactionId</asnElementName>
<elementTypeName>TransactionId</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTransactionId</name>
<signature>bool OptionTransactionId() const</signature>
<elementName>TransactionId</elementName>
<asnElementName>transactionId</asnElementName>
<elementTypeName>TransactionId</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTeid_ForGnAndGp</name>
<signature>void SetTeid_ForGnAndGp(TEID* element)</signature>
<elmentName>Teid_ForGnAndGp</elmentName>
<asnElementName>teid-ForGnAndGp</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTeid_ForGnAndGp</name>
<signature>void SetTeid_ForGnAndGp(const TEID&amp; element)</signature>
<elementName>Teid_ForGnAndGp</elementName>
<asnElementName>teid-ForGnAndGp</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTeid_ForGnAndGp</name>
<signature>const TEID&amp; GetTeid_ForGnAndGp() const</signature>
<elementName>Teid_ForGnAndGp</elementName>
<asnElementName>teid-ForGnAndGp</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTeid_ForGnAndGp</name>
<signature>bool OptionTeid_ForGnAndGp() const</signature>
<elementName>Teid_ForGnAndGp</elementName>
<asnElementName>teid-ForGnAndGp</asnElementName>
<elementTypeName>TEID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTeid_ForIu</name>
<signature>void SetTeid_ForIu(TEID* element)</signature>
<elmentName>Teid_ForIu</elmentName>
<asnElementName>teid-ForIu</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTeid_ForIu</name>
<signature>void SetTeid_ForIu(const TEID&amp; element)</signature>
<elementName>Teid_ForIu</elementName>
<asnElementName>teid-ForIu</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTeid_ForIu</name>
<signature>const TEID&amp; GetTeid_ForIu() const</signature>
<elementName>Teid_ForIu</elementName>
<asnElementName>teid-ForIu</asnElementName>
<elementTypeName>TEID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTeid_ForIu</name>
<signature>bool OptionTeid_ForIu() const</signature>
<elementName>Teid_ForIu</elementName>
<asnElementName>teid-ForIu</asnElementName>
<elementTypeName>TEID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGgsn_Address</name>
<signature>void SetGgsn_Address(GSN_Address* element)</signature>
<elmentName>Ggsn_Address</elmentName>
<asnElementName>ggsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGgsn_Address</name>
<signature>void SetGgsn_Address(const GSN_Address&amp; element)</signature>
<elementName>Ggsn_Address</elementName>
<asnElementName>ggsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGgsn_Address</name>
<signature>const GSN_Address&amp; GetGgsn_Address() const</signature>
<elementName>Ggsn_Address</elementName>
<asnElementName>ggsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGgsn_Address</name>
<signature>bool OptionGgsn_Address() const</signature>
<elementName>Ggsn_Address</elementName>
<asnElementName>ggsn-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos_Subscribed</name>
<signature>void SetQos_Subscribed(Ext_QoS_Subscribed* element)</signature>
<elmentName>Qos_Subscribed</elmentName>
<asnElementName>qos-Subscribed</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos_Subscribed</name>
<signature>void SetQos_Subscribed(const Ext_QoS_Subscribed&amp; element)</signature>
<elementName>Qos_Subscribed</elementName>
<asnElementName>qos-Subscribed</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos_Subscribed</name>
<signature>const Ext_QoS_Subscribed&amp; GetQos_Subscribed() const</signature>
<elementName>Qos_Subscribed</elementName>
<asnElementName>qos-Subscribed</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos_Subscribed</name>
<signature>bool OptionQos_Subscribed() const</signature>
<elementName>Qos_Subscribed</elementName>
<asnElementName>qos-Subscribed</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos_Requested</name>
<signature>void SetQos_Requested(Ext_QoS_Subscribed* element)</signature>
<elmentName>Qos_Requested</elmentName>
<asnElementName>qos-Requested</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos_Requested</name>
<signature>void SetQos_Requested(const Ext_QoS_Subscribed&amp; element)</signature>
<elementName>Qos_Requested</elementName>
<asnElementName>qos-Requested</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos_Requested</name>
<signature>const Ext_QoS_Subscribed&amp; GetQos_Requested() const</signature>
<elementName>Qos_Requested</elementName>
<asnElementName>qos-Requested</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos_Requested</name>
<signature>bool OptionQos_Requested() const</signature>
<elementName>Qos_Requested</elementName>
<asnElementName>qos-Requested</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos_Negotiated</name>
<signature>void SetQos_Negotiated(Ext_QoS_Subscribed* element)</signature>
<elmentName>Qos_Negotiated</elmentName>
<asnElementName>qos-Negotiated</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos_Negotiated</name>
<signature>void SetQos_Negotiated(const Ext_QoS_Subscribed&amp; element)</signature>
<elementName>Qos_Negotiated</elementName>
<asnElementName>qos-Negotiated</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos_Negotiated</name>
<signature>const Ext_QoS_Subscribed&amp; GetQos_Negotiated() const</signature>
<elementName>Qos_Negotiated</elementName>
<asnElementName>qos-Negotiated</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos_Negotiated</name>
<signature>bool OptionQos_Negotiated() const</signature>
<elementName>Qos_Negotiated</elementName>
<asnElementName>qos-Negotiated</asnElementName>
<elementTypeName>Ext_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargingId</name>
<signature>void SetChargingId(GPRSChargingID* element)</signature>
<elmentName>ChargingId</elmentName>
<asnElementName>chargingId</asnElementName>
<elementTypeName>GPRSChargingID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargingId</name>
<signature>void SetChargingId(const GPRSChargingID&amp; element)</signature>
<elementName>ChargingId</elementName>
<asnElementName>chargingId</asnElementName>
<elementTypeName>GPRSChargingID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargingId</name>
<signature>const GPRSChargingID&amp; GetChargingId() const</signature>
<elementName>ChargingId</elementName>
<asnElementName>chargingId</asnElementName>
<elementTypeName>GPRSChargingID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargingId</name>
<signature>bool OptionChargingId() const</signature>
<elementName>ChargingId</elementName>
<asnElementName>chargingId</asnElementName>
<elementTypeName>GPRSChargingID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargingCharacteristics</name>
<signature>void SetChargingCharacteristics(ChargingCharacteristics* element)</signature>
<elmentName>ChargingCharacteristics</elmentName>
<asnElementName>chargingCharacteristics</asnElementName>
<elementTypeName>ChargingCharacteristics</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargingCharacteristics</name>
<signature>void SetChargingCharacteristics(const ChargingCharacteristics&amp; element)</signature>
<elementName>ChargingCharacteristics</elementName>
<asnElementName>chargingCharacteristics</asnElementName>
<elementTypeName>ChargingCharacteristics</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargingCharacteristics</name>
<signature>const ChargingCharacteristics&amp; GetChargingCharacteristics() const</signature>
<elementName>ChargingCharacteristics</elementName>
<asnElementName>chargingCharacteristics</asnElementName>
<elementTypeName>ChargingCharacteristics</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargingCharacteristics</name>
<signature>bool OptionChargingCharacteristics() const</signature>
<elementName>ChargingCharacteristics</elementName>
<asnElementName>chargingCharacteristics</asnElementName>
<elementTypeName>ChargingCharacteristics</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRnc_Address</name>
<signature>void SetRnc_Address(GSN_Address* element)</signature>
<elmentName>Rnc_Address</elmentName>
<asnElementName>rnc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRnc_Address</name>
<signature>void SetRnc_Address(const GSN_Address&amp; element)</signature>
<elementName>Rnc_Address</elementName>
<asnElementName>rnc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRnc_Address</name>
<signature>const GSN_Address&amp; GetRnc_Address() const</signature>
<elementName>Rnc_Address</elementName>
<asnElementName>rnc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRnc_Address</name>
<signature>bool OptionRnc_Address() const</signature>
<elementName>Rnc_Address</elementName>
<asnElementName>rnc-Address</asnElementName>
<elementTypeName>GSN_Address</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos2_Subscribed</name>
<signature>void SetQos2_Subscribed(Ext2_QoS_Subscribed* element)</signature>
<elmentName>Qos2_Subscribed</elmentName>
<asnElementName>qos2-Subscribed</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos2_Subscribed</name>
<signature>void SetQos2_Subscribed(const Ext2_QoS_Subscribed&amp; element)</signature>
<elementName>Qos2_Subscribed</elementName>
<asnElementName>qos2-Subscribed</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos2_Subscribed</name>
<signature>const Ext2_QoS_Subscribed&amp; GetQos2_Subscribed() const</signature>
<elementName>Qos2_Subscribed</elementName>
<asnElementName>qos2-Subscribed</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos2_Subscribed</name>
<signature>bool OptionQos2_Subscribed() const</signature>
<elementName>Qos2_Subscribed</elementName>
<asnElementName>qos2-Subscribed</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos2_Requested</name>
<signature>void SetQos2_Requested(Ext2_QoS_Subscribed* element)</signature>
<elmentName>Qos2_Requested</elmentName>
<asnElementName>qos2-Requested</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos2_Requested</name>
<signature>void SetQos2_Requested(const Ext2_QoS_Subscribed&amp; element)</signature>
<elementName>Qos2_Requested</elementName>
<asnElementName>qos2-Requested</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos2_Requested</name>
<signature>const Ext2_QoS_Subscribed&amp; GetQos2_Requested() const</signature>
<elementName>Qos2_Requested</elementName>
<asnElementName>qos2-Requested</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos2_Requested</name>
<signature>bool OptionQos2_Requested() const</signature>
<elementName>Qos2_Requested</elementName>
<asnElementName>qos2-Requested</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetQos2_Negotiated</name>
<signature>void SetQos2_Negotiated(Ext2_QoS_Subscribed* element)</signature>
<elmentName>Qos2_Negotiated</elmentName>
<asnElementName>qos2-Negotiated</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetQos2_Negotiated</name>
<signature>void SetQos2_Negotiated(const Ext2_QoS_Subscribed&amp; element)</signature>
<elementName>Qos2_Negotiated</elementName>
<asnElementName>qos2-Negotiated</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetQos2_Negotiated</name>
<signature>const Ext2_QoS_Subscribed&amp; GetQos2_Negotiated() const</signature>
<elementName>Qos2_Negotiated</elementName>
<asnElementName>qos2-Negotiated</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionQos2_Negotiated</name>
<signature>bool OptionQos2_Negotiated() const</signature>
<elementName>Qos2_Negotiated</elementName>
<asnElementName>qos2-Negotiated</asnElementName>
<elementTypeName>Ext2_QoS_Subscribed</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PDP-ContextInfo information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PDP-ContextInfo ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    pdp-ContextIdentifier [0] IMPLICIT ContextId -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    pdp-ContextActive [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    pdp-Type [2] IMPLICIT PDP-Type -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    pdp-Address [3] IMPLICIT PDP-Address -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    apn-Subscribed [4] IMPLICIT APN -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    apn-InUse [5] IMPLICIT APN -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    nsapi [6] IMPLICIT NSAPI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    transactionId [7] IMPLICIT TransactionId -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    teid-ForGnAndGp [8] IMPLICIT TEID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    teid-ForIu [9] IMPLICIT TEID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ggsn-Address [10] IMPLICIT GSN-Address -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos-Subscribed [11] IMPLICIT Ext-QoS-Subscribed -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos-Requested [12] IMPLICIT Ext-QoS-Subscribed -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos-Negotiated [13] IMPLICIT Ext-QoS-Subscribed -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargingId [14] IMPLICIT GPRSChargingID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargingCharacteristics [15] IMPLICIT ChargingCharacteristics -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    rnc-Address [16] IMPLICIT GSN-Address -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [17] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos2-Subscribed [18] IMPLICIT Ext2-QoS-Subscribed -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos2-Requested [19] IMPLICIT Ext2-QoS-Subscribed -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    qos2-Negotiated [20] IMPLICIT Ext2-QoS-Subscribed -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

