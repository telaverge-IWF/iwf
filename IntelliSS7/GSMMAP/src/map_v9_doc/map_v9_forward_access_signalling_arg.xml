<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ForwardAccessSignalling_Arg</className>
<asnTypeName>ForwardAccessSignalling-Arg</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetAn_APDU</name>
<signature>void SetAn_APDU(AccessNetworkSignalInfo* element)</signature>
<elmentName>An_APDU</elmentName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAn_APDU</name>
<signature>void SetAn_APDU(const AccessNetworkSignalInfo&amp; element)</signature>
<elementName>An_APDU</elementName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAn_APDU</name>
<signature>const AccessNetworkSignalInfo&amp; GetAn_APDU() const</signature>
<elementName>An_APDU</elementName>
<asnElementName>an-APDU</asnElementName>
<elementTypeName>AccessNetworkSignalInfo</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetIntegrityProtectionInfo</name>
<signature>void SetIntegrityProtectionInfo(IntegrityProtectionInformation* element)</signature>
<elmentName>IntegrityProtectionInfo</elmentName>
<asnElementName>integrityProtectionInfo</asnElementName>
<elementTypeName>IntegrityProtectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIntegrityProtectionInfo</name>
<signature>void SetIntegrityProtectionInfo(const IntegrityProtectionInformation&amp; element)</signature>
<elementName>IntegrityProtectionInfo</elementName>
<asnElementName>integrityProtectionInfo</asnElementName>
<elementTypeName>IntegrityProtectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIntegrityProtectionInfo</name>
<signature>const IntegrityProtectionInformation&amp; GetIntegrityProtectionInfo() const</signature>
<elementName>IntegrityProtectionInfo</elementName>
<asnElementName>integrityProtectionInfo</asnElementName>
<elementTypeName>IntegrityProtectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIntegrityProtectionInfo</name>
<signature>bool OptionIntegrityProtectionInfo() const</signature>
<elementName>IntegrityProtectionInfo</elementName>
<asnElementName>integrityProtectionInfo</asnElementName>
<elementTypeName>IntegrityProtectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEncryptionInfo</name>
<signature>void SetEncryptionInfo(EncryptionInformation* element)</signature>
<elmentName>EncryptionInfo</elmentName>
<asnElementName>encryptionInfo</asnElementName>
<elementTypeName>EncryptionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEncryptionInfo</name>
<signature>void SetEncryptionInfo(const EncryptionInformation&amp; element)</signature>
<elementName>EncryptionInfo</elementName>
<asnElementName>encryptionInfo</asnElementName>
<elementTypeName>EncryptionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEncryptionInfo</name>
<signature>const EncryptionInformation&amp; GetEncryptionInfo() const</signature>
<elementName>EncryptionInfo</elementName>
<asnElementName>encryptionInfo</asnElementName>
<elementTypeName>EncryptionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEncryptionInfo</name>
<signature>bool OptionEncryptionInfo() const</signature>
<elementName>EncryptionInfo</elementName>
<asnElementName>encryptionInfo</asnElementName>
<elementTypeName>EncryptionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetKeyStatus</name>
<signature>void SetKeyStatus(KeyStatus* element)</signature>
<elmentName>KeyStatus</elmentName>
<asnElementName>keyStatus</asnElementName>
<elementTypeName>KeyStatus</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetKeyStatus</name>
<signature>void SetKeyStatus(const KeyStatus&amp; element)</signature>
<elementName>KeyStatus</elementName>
<asnElementName>keyStatus</asnElementName>
<elementTypeName>KeyStatus</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetKeyStatus</name>
<signature>const KeyStatus&amp; GetKeyStatus() const</signature>
<elementName>KeyStatus</elementName>
<asnElementName>keyStatus</asnElementName>
<elementTypeName>KeyStatus</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionKeyStatus</name>
<signature>bool OptionKeyStatus() const</signature>
<elementName>KeyStatus</elementName>
<asnElementName>keyStatus</asnElementName>
<elementTypeName>KeyStatus</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAllowedGSM_Algorithms</name>
<signature>void SetAllowedGSM_Algorithms(AllowedGSM_Algorithms* element)</signature>
<elmentName>AllowedGSM_Algorithms</elmentName>
<asnElementName>allowedGSM-Algorithms</asnElementName>
<elementTypeName>AllowedGSM_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAllowedGSM_Algorithms</name>
<signature>void SetAllowedGSM_Algorithms(const AllowedGSM_Algorithms&amp; element)</signature>
<elementName>AllowedGSM_Algorithms</elementName>
<asnElementName>allowedGSM-Algorithms</asnElementName>
<elementTypeName>AllowedGSM_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAllowedGSM_Algorithms</name>
<signature>const AllowedGSM_Algorithms&amp; GetAllowedGSM_Algorithms() const</signature>
<elementName>AllowedGSM_Algorithms</elementName>
<asnElementName>allowedGSM-Algorithms</asnElementName>
<elementTypeName>AllowedGSM_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAllowedGSM_Algorithms</name>
<signature>bool OptionAllowedGSM_Algorithms() const</signature>
<elementName>AllowedGSM_Algorithms</elementName>
<asnElementName>allowedGSM-Algorithms</asnElementName>
<elementTypeName>AllowedGSM_Algorithms</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAllowedUMTS_Algorithms</name>
<signature>void SetAllowedUMTS_Algorithms(AllowedUMTS_Algorithms* element)</signature>
<elmentName>AllowedUMTS_Algorithms</elmentName>
<asnElementName>allowedUMTS-Algorithms</asnElementName>
<elementTypeName>AllowedUMTS_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAllowedUMTS_Algorithms</name>
<signature>void SetAllowedUMTS_Algorithms(const AllowedUMTS_Algorithms&amp; element)</signature>
<elementName>AllowedUMTS_Algorithms</elementName>
<asnElementName>allowedUMTS-Algorithms</asnElementName>
<elementTypeName>AllowedUMTS_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAllowedUMTS_Algorithms</name>
<signature>const AllowedUMTS_Algorithms&amp; GetAllowedUMTS_Algorithms() const</signature>
<elementName>AllowedUMTS_Algorithms</elementName>
<asnElementName>allowedUMTS-Algorithms</asnElementName>
<elementTypeName>AllowedUMTS_Algorithms</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAllowedUMTS_Algorithms</name>
<signature>bool OptionAllowedUMTS_Algorithms() const</signature>
<elementName>AllowedUMTS_Algorithms</elementName>
<asnElementName>allowedUMTS-Algorithms</asnElementName>
<elementTypeName>AllowedUMTS_Algorithms</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRadioResourceInformation</name>
<signature>void SetRadioResourceInformation(RadioResourceInformation* element)</signature>
<elmentName>RadioResourceInformation</elmentName>
<asnElementName>radioResourceInformation</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRadioResourceInformation</name>
<signature>void SetRadioResourceInformation(const RadioResourceInformation&amp; element)</signature>
<elementName>RadioResourceInformation</elementName>
<asnElementName>radioResourceInformation</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRadioResourceInformation</name>
<signature>const RadioResourceInformation&amp; GetRadioResourceInformation() const</signature>
<elementName>RadioResourceInformation</elementName>
<asnElementName>radioResourceInformation</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRadioResourceInformation</name>
<signature>bool OptionRadioResourceInformation() const</signature>
<elementName>RadioResourceInformation</elementName>
<asnElementName>radioResourceInformation</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRadioResourceList</name>
<signature>void SetRadioResourceList(RadioResourceList* element)</signature>
<elmentName>RadioResourceList</elmentName>
<asnElementName>radioResourceList</asnElementName>
<elementTypeName>RadioResourceList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRadioResourceList</name>
<signature>void SetRadioResourceList(const RadioResourceList&amp; element)</signature>
<elementName>RadioResourceList</elementName>
<asnElementName>radioResourceList</asnElementName>
<elementTypeName>RadioResourceList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRadioResourceList</name>
<signature>const RadioResourceList&amp; GetRadioResourceList() const</signature>
<elementName>RadioResourceList</elementName>
<asnElementName>radioResourceList</asnElementName>
<elementTypeName>RadioResourceList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRadioResourceList</name>
<signature>bool OptionRadioResourceList() const</signature>
<elementName>RadioResourceList</elementName>
<asnElementName>radioResourceList</asnElementName>
<elementTypeName>RadioResourceList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBssmap_ServiceHandover</name>
<signature>void SetBssmap_ServiceHandover(BSSMAP_ServiceHandover* element)</signature>
<elmentName>Bssmap_ServiceHandover</elmentName>
<asnElementName>bssmap-ServiceHandover</asnElementName>
<elementTypeName>BSSMAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBssmap_ServiceHandover</name>
<signature>void SetBssmap_ServiceHandover(const BSSMAP_ServiceHandover&amp; element)</signature>
<elementName>Bssmap_ServiceHandover</elementName>
<asnElementName>bssmap-ServiceHandover</asnElementName>
<elementTypeName>BSSMAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBssmap_ServiceHandover</name>
<signature>const BSSMAP_ServiceHandover&amp; GetBssmap_ServiceHandover() const</signature>
<elementName>Bssmap_ServiceHandover</elementName>
<asnElementName>bssmap-ServiceHandover</asnElementName>
<elementTypeName>BSSMAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBssmap_ServiceHandover</name>
<signature>bool OptionBssmap_ServiceHandover() const</signature>
<elementName>Bssmap_ServiceHandover</elementName>
<asnElementName>bssmap-ServiceHandover</asnElementName>
<elementTypeName>BSSMAP_ServiceHandover</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRanap_ServiceHandover</name>
<signature>void SetRanap_ServiceHandover(RANAP_ServiceHandover* element)</signature>
<elmentName>Ranap_ServiceHandover</elmentName>
<asnElementName>ranap-ServiceHandover</asnElementName>
<elementTypeName>RANAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRanap_ServiceHandover</name>
<signature>void SetRanap_ServiceHandover(const RANAP_ServiceHandover&amp; element)</signature>
<elementName>Ranap_ServiceHandover</elementName>
<asnElementName>ranap-ServiceHandover</asnElementName>
<elementTypeName>RANAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRanap_ServiceHandover</name>
<signature>const RANAP_ServiceHandover&amp; GetRanap_ServiceHandover() const</signature>
<elementName>Ranap_ServiceHandover</elementName>
<asnElementName>ranap-ServiceHandover</asnElementName>
<elementTypeName>RANAP_ServiceHandover</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRanap_ServiceHandover</name>
<signature>bool OptionRanap_ServiceHandover() const</signature>
<elementName>Ranap_ServiceHandover</elementName>
<asnElementName>ranap-ServiceHandover</asnElementName>
<elementTypeName>RANAP_ServiceHandover</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBssmap_ServiceHandoverList</name>
<signature>void SetBssmap_ServiceHandoverList(BSSMAP_ServiceHandoverList* element)</signature>
<elmentName>Bssmap_ServiceHandoverList</elmentName>
<asnElementName>bssmap-ServiceHandoverList</asnElementName>
<elementTypeName>BSSMAP_ServiceHandoverList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBssmap_ServiceHandoverList</name>
<signature>void SetBssmap_ServiceHandoverList(const BSSMAP_ServiceHandoverList&amp; element)</signature>
<elementName>Bssmap_ServiceHandoverList</elementName>
<asnElementName>bssmap-ServiceHandoverList</asnElementName>
<elementTypeName>BSSMAP_ServiceHandoverList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBssmap_ServiceHandoverList</name>
<signature>const BSSMAP_ServiceHandoverList&amp; GetBssmap_ServiceHandoverList() const</signature>
<elementName>Bssmap_ServiceHandoverList</elementName>
<asnElementName>bssmap-ServiceHandoverList</asnElementName>
<elementTypeName>BSSMAP_ServiceHandoverList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBssmap_ServiceHandoverList</name>
<signature>bool OptionBssmap_ServiceHandoverList() const</signature>
<elementName>Bssmap_ServiceHandoverList</elementName>
<asnElementName>bssmap-ServiceHandoverList</asnElementName>
<elementTypeName>BSSMAP_ServiceHandoverList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCurrentlyUsedCodec</name>
<signature>void SetCurrentlyUsedCodec(Codec* element)</signature>
<elmentName>CurrentlyUsedCodec</elmentName>
<asnElementName>currentlyUsedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCurrentlyUsedCodec</name>
<signature>void SetCurrentlyUsedCodec(const Codec&amp; element)</signature>
<elementName>CurrentlyUsedCodec</elementName>
<asnElementName>currentlyUsedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCurrentlyUsedCodec</name>
<signature>const Codec&amp; GetCurrentlyUsedCodec() const</signature>
<elementName>CurrentlyUsedCodec</elementName>
<asnElementName>currentlyUsedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCurrentlyUsedCodec</name>
<signature>bool OptionCurrentlyUsedCodec() const</signature>
<elementName>CurrentlyUsedCodec</elementName>
<asnElementName>currentlyUsedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAvailableCodecsList</name>
<signature>void SetAvailableCodecsList(AvailableCodecsList* element)</signature>
<elmentName>AvailableCodecsList</elmentName>
<asnElementName>availableCodecsList</asnElementName>
<elementTypeName>AvailableCodecsList</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAvailableCodecsList</name>
<signature>void SetAvailableCodecsList(const AvailableCodecsList&amp; element)</signature>
<elementName>AvailableCodecsList</elementName>
<asnElementName>availableCodecsList</asnElementName>
<elementTypeName>AvailableCodecsList</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAvailableCodecsList</name>
<signature>const AvailableCodecsList&amp; GetAvailableCodecsList() const</signature>
<elementName>AvailableCodecsList</elementName>
<asnElementName>availableCodecsList</asnElementName>
<elementTypeName>AvailableCodecsList</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAvailableCodecsList</name>
<signature>bool OptionAvailableCodecsList() const</signature>
<elementName>AvailableCodecsList</elementName>
<asnElementName>availableCodecsList</asnElementName>
<elementTypeName>AvailableCodecsList</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRab_ConfigurationIndicator</name>
<signature>void SetRab_ConfigurationIndicator(Rab_ConfigurationIndicator* element)</signature>
<elmentName>Rab_ConfigurationIndicator</elmentName>
<asnElementName>rab-ConfigurationIndicator</asnElementName>
<elementTypeName>Rab_ConfigurationIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRab_ConfigurationIndicator</name>
<signature>void SetRab_ConfigurationIndicator(const Rab_ConfigurationIndicator&amp; element)</signature>
<elementName>Rab_ConfigurationIndicator</elementName>
<asnElementName>rab-ConfigurationIndicator</asnElementName>
<elementTypeName>Rab_ConfigurationIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRab_ConfigurationIndicator</name>
<signature>const Rab_ConfigurationIndicator&amp; GetRab_ConfigurationIndicator() const</signature>
<elementName>Rab_ConfigurationIndicator</elementName>
<asnElementName>rab-ConfigurationIndicator</asnElementName>
<elementTypeName>Rab_ConfigurationIndicator</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRab_ConfigurationIndicator</name>
<signature>bool OptionRab_ConfigurationIndicator() const</signature>
<elementName>Rab_ConfigurationIndicator</elementName>
<asnElementName>rab-ConfigurationIndicator</asnElementName>
<elementTypeName>Rab_ConfigurationIndicator</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIuSelectedCodec</name>
<signature>void SetIuSelectedCodec(Codec* element)</signature>
<elmentName>IuSelectedCodec</elmentName>
<asnElementName>iuSelectedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIuSelectedCodec</name>
<signature>void SetIuSelectedCodec(const Codec&amp; element)</signature>
<elementName>IuSelectedCodec</elementName>
<asnElementName>iuSelectedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIuSelectedCodec</name>
<signature>const Codec&amp; GetIuSelectedCodec() const</signature>
<elementName>IuSelectedCodec</elementName>
<asnElementName>iuSelectedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIuSelectedCodec</name>
<signature>bool OptionIuSelectedCodec() const</signature>
<elementName>IuSelectedCodec</elementName>
<asnElementName>iuSelectedCodec</asnElementName>
<elementTypeName>Codec</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAlternativeChannelType</name>
<signature>void SetAlternativeChannelType(RadioResourceInformation* element)</signature>
<elmentName>AlternativeChannelType</elmentName>
<asnElementName>alternativeChannelType</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlternativeChannelType</name>
<signature>void SetAlternativeChannelType(const RadioResourceInformation&amp; element)</signature>
<elementName>AlternativeChannelType</elementName>
<asnElementName>alternativeChannelType</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlternativeChannelType</name>
<signature>const RadioResourceInformation&amp; GetAlternativeChannelType() const</signature>
<elementName>AlternativeChannelType</elementName>
<asnElementName>alternativeChannelType</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlternativeChannelType</name>
<signature>bool OptionAlternativeChannelType() const</signature>
<elementName>AlternativeChannelType</elementName>
<asnElementName>alternativeChannelType</asnElementName>
<elementTypeName>RadioResourceInformation</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ForwardAccessSignalling-Arg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ForwardAccessSignalling-Arg ::= [3] IMPLICIT SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    an-APDU AccessNetworkSignalInfo -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    integrityProtectionInfo [0] IMPLICIT IntegrityProtectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    encryptionInfo [1] IMPLICIT EncryptionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    keyStatus [2] IMPLICIT KeyStatus -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer [3] IMPLICIT ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    allowedGSM-Algorithms [4] IMPLICIT AllowedGSM-Algorithms -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    allowedUMTS-Algorithms [5] IMPLICIT AllowedUMTS-Algorithms -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    radioResourceInformation [6] IMPLICIT RadioResourceInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    radioResourceList [7] IMPLICIT RadioResourceList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    bssmap-ServiceHandover [9] IMPLICIT BSSMAP-ServiceHandover -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ranap-ServiceHandover [8] IMPLICIT RANAP-ServiceHandover -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    bssmap-ServiceHandoverList [10] IMPLICIT BSSMAP-ServiceHandoverList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    currentlyUsedCodec [11] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    availableCodecsList [12] IMPLICIT AvailableCodecsList -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    rab-ConfigurationIndicator [13] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iuSelectedCodec [14] IMPLICIT Codec -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    alternativeChannelType [15] IMPLICIT RadioResourceInformation -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

