<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ForwardGroupCallSignallingArg</className>
<asnTypeName>ForwardGroupCallSignallingArg</asnTypeName>
<moduleName>MAP_V9</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetImsi</name>
<signature>void SetImsi(IMSI* element)</signature>
<elmentName>Imsi</elmentName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetImsi</name>
<signature>void SetImsi(const IMSI&amp; element)</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetImsi</name>
<signature>const IMSI&amp; GetImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionImsi</name>
<signature>bool OptionImsi() const</signature>
<elementName>Imsi</elementName>
<asnElementName>imsi</asnElementName>
<elementTypeName>IMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkRequestAck</name>
<signature>void SetUplinkRequestAck(UplinkRequestAck* element)</signature>
<elmentName>UplinkRequestAck</elmentName>
<asnElementName>uplinkRequestAck</asnElementName>
<elementTypeName>UplinkRequestAck</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkRequestAck</name>
<signature>void SetUplinkRequestAck(const UplinkRequestAck&amp; element)</signature>
<elementName>UplinkRequestAck</elementName>
<asnElementName>uplinkRequestAck</asnElementName>
<elementTypeName>UplinkRequestAck</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkRequestAck</name>
<signature>const UplinkRequestAck&amp; GetUplinkRequestAck() const</signature>
<elementName>UplinkRequestAck</elementName>
<asnElementName>uplinkRequestAck</asnElementName>
<elementTypeName>UplinkRequestAck</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkRequestAck</name>
<signature>bool OptionUplinkRequestAck() const</signature>
<elementName>UplinkRequestAck</elementName>
<asnElementName>uplinkRequestAck</asnElementName>
<elementTypeName>UplinkRequestAck</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkReleaseIndication</name>
<signature>void SetUplinkReleaseIndication(UplinkReleaseIndication* element)</signature>
<elmentName>UplinkReleaseIndication</elmentName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkReleaseIndication</name>
<signature>void SetUplinkReleaseIndication(const UplinkReleaseIndication&amp; element)</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkReleaseIndication</name>
<signature>const UplinkReleaseIndication&amp; GetUplinkReleaseIndication() const</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkReleaseIndication</name>
<signature>bool OptionUplinkReleaseIndication() const</signature>
<elementName>UplinkReleaseIndication</elementName>
<asnElementName>uplinkReleaseIndication</asnElementName>
<elementTypeName>UplinkReleaseIndication</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkRejectCommand</name>
<signature>void SetUplinkRejectCommand(UplinkRejectCommand* element)</signature>
<elmentName>UplinkRejectCommand</elmentName>
<asnElementName>uplinkRejectCommand</asnElementName>
<elementTypeName>UplinkRejectCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkRejectCommand</name>
<signature>void SetUplinkRejectCommand(const UplinkRejectCommand&amp; element)</signature>
<elementName>UplinkRejectCommand</elementName>
<asnElementName>uplinkRejectCommand</asnElementName>
<elementTypeName>UplinkRejectCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkRejectCommand</name>
<signature>const UplinkRejectCommand&amp; GetUplinkRejectCommand() const</signature>
<elementName>UplinkRejectCommand</elementName>
<asnElementName>uplinkRejectCommand</asnElementName>
<elementTypeName>UplinkRejectCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkRejectCommand</name>
<signature>bool OptionUplinkRejectCommand() const</signature>
<elementName>UplinkRejectCommand</elementName>
<asnElementName>uplinkRejectCommand</asnElementName>
<elementTypeName>UplinkRejectCommand</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkSeizedCommand</name>
<signature>void SetUplinkSeizedCommand(UplinkSeizedCommand* element)</signature>
<elmentName>UplinkSeizedCommand</elmentName>
<asnElementName>uplinkSeizedCommand</asnElementName>
<elementTypeName>UplinkSeizedCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkSeizedCommand</name>
<signature>void SetUplinkSeizedCommand(const UplinkSeizedCommand&amp; element)</signature>
<elementName>UplinkSeizedCommand</elementName>
<asnElementName>uplinkSeizedCommand</asnElementName>
<elementTypeName>UplinkSeizedCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkSeizedCommand</name>
<signature>const UplinkSeizedCommand&amp; GetUplinkSeizedCommand() const</signature>
<elementName>UplinkSeizedCommand</elementName>
<asnElementName>uplinkSeizedCommand</asnElementName>
<elementTypeName>UplinkSeizedCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkSeizedCommand</name>
<signature>bool OptionUplinkSeizedCommand() const</signature>
<elementName>UplinkSeizedCommand</elementName>
<asnElementName>uplinkSeizedCommand</asnElementName>
<elementTypeName>UplinkSeizedCommand</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetUplinkReleaseCommand</name>
<signature>void SetUplinkReleaseCommand(UplinkReleaseCommand* element)</signature>
<elmentName>UplinkReleaseCommand</elmentName>
<asnElementName>uplinkReleaseCommand</asnElementName>
<elementTypeName>UplinkReleaseCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetUplinkReleaseCommand</name>
<signature>void SetUplinkReleaseCommand(const UplinkReleaseCommand&amp; element)</signature>
<elementName>UplinkReleaseCommand</elementName>
<asnElementName>uplinkReleaseCommand</asnElementName>
<elementTypeName>UplinkReleaseCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetUplinkReleaseCommand</name>
<signature>const UplinkReleaseCommand&amp; GetUplinkReleaseCommand() const</signature>
<elementName>UplinkReleaseCommand</elementName>
<asnElementName>uplinkReleaseCommand</asnElementName>
<elementTypeName>UplinkReleaseCommand</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionUplinkReleaseCommand</name>
<signature>bool OptionUplinkReleaseCommand() const</signature>
<elementName>UplinkReleaseCommand</elementName>
<asnElementName>uplinkReleaseCommand</asnElementName>
<elementTypeName>UplinkReleaseCommand</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(ExtensionContainer* element)</signature>
<elmentName>ExtensionContainer</elmentName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionContainer</name>
<signature>void SetExtensionContainer(const ExtensionContainer&amp; element)</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionContainer</name>
<signature>const ExtensionContainer&amp; GetExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionContainer</name>
<signature>bool OptionExtensionContainer() const</signature>
<elementName>ExtensionContainer</elementName>
<asnElementName>extensionContainer</asnElementName>
<elementTypeName>ExtensionContainer</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetStateAttributes</name>
<signature>void SetStateAttributes(StateAttributes* element)</signature>
<elmentName>StateAttributes</elmentName>
<asnElementName>stateAttributes</asnElementName>
<elementTypeName>StateAttributes</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetStateAttributes</name>
<signature>void SetStateAttributes(const StateAttributes&amp; element)</signature>
<elementName>StateAttributes</elementName>
<asnElementName>stateAttributes</asnElementName>
<elementTypeName>StateAttributes</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetStateAttributes</name>
<signature>const StateAttributes&amp; GetStateAttributes() const</signature>
<elementName>StateAttributes</elementName>
<asnElementName>stateAttributes</asnElementName>
<elementTypeName>StateAttributes</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionStateAttributes</name>
<signature>bool OptionStateAttributes() const</signature>
<elementName>StateAttributes</elementName>
<asnElementName>stateAttributes</asnElementName>
<elementTypeName>StateAttributes</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ForwardGroupCallSignallingArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ForwardGroupCallSignallingArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    imsi IMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkRequestAck [0] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkReleaseIndication [1] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkRejectCommand [2] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkSeizedCommand [3] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    uplinkReleaseCommand [4] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionContainer ExtensionContainer -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    stateAttributes [5] IMPLICIT StateAttributes -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

