//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <MAP_UserInfo.h>

#include <AsnDescSequenceOf.h>
#include <AsnDescSequence.h>


#if defined(ITS_NAMESPACE)
using namespace its;
using namespace its;
#endif // defined(ITS_NAMESPACE)




////////// Begin Nested Class //////////


// Type EXTERNAL is a reference => no code generated.


////////// End Nested Class //////////

MAP_UserInfo::MAP_UserInfo() : AsnSequenceOf(false)
{
    Initialize();
}

MAP_UserInfo::MAP_UserInfo(Octets& octets) : AsnSequenceOf(false)
{
    Initialize();

    Decode(octets);
}

MAP_UserInfo::MAP_UserInfo(const MAP_UserInfo& rhs) : AsnSequenceOf(rhs)
{
    // Nothing to do.
}

MAP_UserInfo::MAP_UserInfo(AsnDescObject* descriptionParam) : AsnSequenceOf(descriptionParam)
{
    // Nothing to do.
}

void MAP_UserInfo::Initialize()
{
    ITS_THROW_ASSERT(description == NULL);

    description = GetStaticDescription();
    description->IncRef();
}

AsnDescObject* MAP_UserInfo::GetStaticDescription()
{
    static bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequenceOf staticDesc;

    if (initialized)
    {
        ITS_THROW_ENSURE(result != NULL);

        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();

        ITS_THROW_ENSURE(result != NULL);

        return result;
    }
    else
    {
        ITS_THROW_ASSERT(result == NULL);

        // To deny the reference counting mechanism.
        // (staticDesc is static.)
        staticDesc.IncRef();

        staticDesc.SetCloneForFactory(new MAP_UserInfo(&staticDesc));

        // One circular reference to remove.
        // (cloneForFactory is an attribute of staticDesc.)
        staticDesc.DecRef();

        staticDesc.TagAddLevel(new Tag(Tag::CLASS_UNIVERSAL, Tag::CONSTRUCTED, 16));

        staticDesc.SetElement(GetEXTERNALStaticDescription());

        result = &staticDesc;

        initialized = true;

        Asn::Unlock();

        ITS_THROW_ENSURE(result != NULL);

        return result;
    }
}

AsnDescObject* MAP_UserInfo::GetEXTERNALStaticDescription()
{
    static bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(4);

    if (initialized)
    {
        ITS_THROW_ENSURE(result != NULL);

        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();

        ITS_THROW_ENSURE(result != NULL);

        return result;
    }
    else
    {
        ITS_THROW_ASSERT(result == NULL);

        // To deny the reference counting mechanism.
        // (staticDesc is static.)
        staticDesc.IncRef();

        staticDesc.SetCloneForFactory(new EXTERNAL(&staticDesc));

        // One circular reference to remove.
        // (cloneForFactory is an attribute of staticDesc.)
        staticDesc.DecRef();

        staticDesc.TagAddLevel(new Tag(Tag::CLASS_UNIVERSAL, Tag::CONSTRUCTED, 8));

        staticDesc.AddElement(0, EXTERNAL::GetDirect_referenceStaticDescription());
        staticDesc.AddElement(1, EXTERNAL::GetIndirect_referenceStaticDescription());
        staticDesc.AddElement(2, EXTERNAL::GetData_value_descriptorStaticDescription());
        staticDesc.AddElement(3, EXTERNAL::GetEncodingStaticDescription());

        result = &staticDesc;

        initialized = true;

        Asn::Unlock();

        ITS_THROW_ENSURE(result != NULL);

        return result;
    }
}

MAP_UserInfo::~MAP_UserInfo()
{
    // Nothing to do.
}

AsnObject* MAP_UserInfo::Clone() const
{
    return new MAP_UserInfo(*this);
}

void MAP_UserInfo::AddElement(EXTERNAL* element)
{
    ITS_THROW_REQUIRE(element != NULL);

    element->AsnObject::SetDescription(GetEXTERNALStaticDescription());
    AsnSequenceOf::AddElement(element);
}

void MAP_UserInfo::AddElement(const EXTERNAL& element)
{
    AsnObject& asnObject = const_cast<EXTERNAL&>(element);

    asnObject.SetDescription(GetEXTERNALStaticDescription());

    AsnSequenceOf::AddElement(element);
}

const MAP_UserInfo::EXTERNAL& MAP_UserInfo::ElementAt(int index) const
{
    return static_cast<const EXTERNAL&> (AsnSequenceOf::ElementAt(index));
}





