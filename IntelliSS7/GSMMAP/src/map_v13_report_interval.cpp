//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <map_v13_report_interval.h>

#include <AsnDescEnumerated.h>


using namespace its;
using namespace map_v13;



AsnDescObject* ReportInterval::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new ReportInterval(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_PRIMITIVE, 10));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(4);
        staticDesc._valueSet.insert(5);
        staticDesc._valueSet.insert(6);
        staticDesc._valueSet.insert(7);
        staticDesc._valueSet.insert(8);
        staticDesc._valueSet.insert(9);
        staticDesc._valueSet.insert(10);
        staticDesc._valueSet.insert(11);
        staticDesc._valueSet.insert(12);
        staticDesc._valueSet.insert(13);
        staticDesc._valueSet.insert(14);
        staticDesc._valueSet.insert(15);
        staticDesc._valueSet.insert(16);
        staticDesc._valueSet.insert(17);
        staticDesc._valueSet.insert(18);
        staticDesc._valueSet.insert(19);
        staticDesc._valueSet.insert(20);
        staticDesc._valueSet.insert(21);
        staticDesc._valueSet.insert(22);
        staticDesc._valueSet.insert(23);
        staticDesc._valueSet.insert(24);
        staticDesc._valueSet.insert(25);
        staticDesc._valueSet.insert(26);
        staticDesc._valueSet.insert(27);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"umts250ms", 0}, {"umts500ms", 1}, {"umts1000ms", 2}, {"umts2000ms", 3}, {"umts3000ms", 4}, {"umts4000ms", 5}, {"umts6000ms", 6}, {"umts8000ms", 7}, {"umts12000ms", 8}, {"umts16000ms", 9}, {"umts20000ms", 10}, {"umts24000ms", 11}, {"umts28000ms", 12}, {"umts32000ms", 13}, {"umts64000ms", 14}, {"lte120ms", 15}, {"lte240ms", 16}, {"lte480ms", 17}, {"lte640ms", 18}, {"lte1024ms", 19}, {"lte2048ms", 20}, {"lte5120ms", 21}, {"lte10240ms", 22}, {"lte1min", 23}, {"lte6min", 24}, {"lte12min", 25}, {"lte30min", 26}, {"lte60min", 27}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        static AsnDescEnumerated::NamedNumber namedNumberExtList[] = {{NULL, 0}};
        staticDesc.SetNamedNumberExtList(namedNumberExtList);
        staticDesc.SetTypeName("ReportInterval");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

long ReportInterval::Get(const std::string& valueName) const
{
    if (valueName == "umts250ms")
    {
        return 0;
    }
    else if (valueName == "umts500ms")
    {
        return 1;
    }
    else if (valueName == "umts1000ms")
    {
        return 2;
    }
    else if (valueName == "umts2000ms")
    {
        return 3;
    }
    else if (valueName == "umts3000ms")
    {
        return 4;
    }
    else if (valueName == "umts4000ms")
    {
        return 5;
    }
    else if (valueName == "umts6000ms")
    {
        return 6;
    }
    else if (valueName == "umts8000ms")
    {
        return 7;
    }
    else if (valueName == "umts12000ms")
    {
        return 8;
    }
    else if (valueName == "umts16000ms")
    {
        return 9;
    }
    else if (valueName == "umts20000ms")
    {
        return 10;
    }
    else if (valueName == "umts24000ms")
    {
        return 11;
    }
    else if (valueName == "umts28000ms")
    {
        return 12;
    }
    else if (valueName == "umts32000ms")
    {
        return 13;
    }
    else if (valueName == "umts64000ms")
    {
        return 14;
    }
    else if (valueName == "lte120ms")
    {
        return 15;
    }
    else if (valueName == "lte240ms")
    {
        return 16;
    }
    else if (valueName == "lte480ms")
    {
        return 17;
    }
    else if (valueName == "lte640ms")
    {
        return 18;
    }
    else if (valueName == "lte1024ms")
    {
        return 19;
    }
    else if (valueName == "lte2048ms")
    {
        return 20;
    }
    else if (valueName == "lte5120ms")
    {
        return 21;
    }
    else if (valueName == "lte10240ms")
    {
        return 22;
    }
    else if (valueName == "lte1min")
    {
        return 23;
    }
    else if (valueName == "lte6min")
    {
        return 24;
    }
    else if (valueName == "lte12min")
    {
        return 25;
    }
    else if (valueName == "lte30min")
    {
        return 26;
    }
    else if (valueName == "lte60min")
    {
        return 27;
    }
    else
    {
        bool invalid_value_name = false;
        ITS_ASSERT(invalid_value_name);

        return 0;
    }
}

std::string ReportInterval::Get(long value) const
{
    if (value == 0)
    {
        return "umts250ms";
    }
    else if (value == 1)
    {
        return "umts500ms";
    }
    else if (value == 2)
    {
        return "umts1000ms";
    }
    else if (value == 3)
    {
        return "umts2000ms";
    }
    else if (value == 4)
    {
        return "umts3000ms";
    }
    else if (value == 5)
    {
        return "umts4000ms";
    }
    else if (value == 6)
    {
        return "umts6000ms";
    }
    else if (value == 7)
    {
        return "umts8000ms";
    }
    else if (value == 8)
    {
        return "umts12000ms";
    }
    else if (value == 9)
    {
        return "umts16000ms";
    }
    else if (value == 10)
    {
        return "umts20000ms";
    }
    else if (value == 11)
    {
        return "umts24000ms";
    }
    else if (value == 12)
    {
        return "umts28000ms";
    }
    else if (value == 13)
    {
        return "umts32000ms";
    }
    else if (value == 14)
    {
        return "umts64000ms";
    }
    else if (value == 15)
    {
        return "lte120ms";
    }
    else if (value == 16)
    {
        return "lte240ms";
    }
    else if (value == 17)
    {
        return "lte480ms";
    }
    else if (value == 18)
    {
        return "lte640ms";
    }
    else if (value == 19)
    {
        return "lte1024ms";
    }
    else if (value == 20)
    {
        return "lte2048ms";
    }
    else if (value == 21)
    {
        return "lte5120ms";
    }
    else if (value == 22)
    {
        return "lte10240ms";
    }
    else if (value == 23)
    {
        return "lte1min";
    }
    else if (value == 24)
    {
        return "lte6min";
    }
    else if (value == 25)
    {
        return "lte12min";
    }
    else if (value == 26)
    {
        return "lte30min";
    }
    else if (value == 27)
    {
        return "lte60min";
    }
    else
    {
        bool invalid_value = false;
        ITS_ASSERT(invalid_value);

        return "";
    }
}

std::string ReportInterval::GetExt(long value) const
{
    return "";
}





