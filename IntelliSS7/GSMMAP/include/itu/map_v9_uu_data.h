//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_UU_DATA_H_)
#define _MAP_V9_UU_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_uu_indicator.h>
#include <map_v9_uui.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class UU_Data : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class UusCFInteraction : public its::AsnNull
    {
    public:

        UusCFInteraction() : its::AsnNull(false)
        {
            Initialize();
        }

        UusCFInteraction(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        UusCFInteraction(const UusCFInteraction& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        UusCFInteraction(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UusCFInteraction()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UusCFInteraction(*this);
        }

        virtual std::string GetName() const
        { return "UusCFInteraction"; }

    };


        typedef map_v9::UUIndicator UUIndicator;


        typedef map_v9::UUI UUI;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    UU_Data() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    UU_Data(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    UU_Data(const UU_Data& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UU_Data(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUuIndicatorStaticDescription();
    static its::AsnDescObject* GetUuiStaticDescription();
    static its::AsnDescObject* GetUusCFInteractionStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~UU_Data()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UU_Data(*this);
    }

    virtual std::string GetName() const
    { return "UU_Data"; }

    void SetUuIndicator(UUIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUuIndicatorStaticDescription());
        AddElement(0, element);
    }

    void SetUuIndicator(const UUIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<UUIndicator&>(element);
        asnObject.SetDescription(GetUuIndicatorStaticDescription());
        AddElement(0, element);
    }

    bool OptionUuIndicator() const
    {
        return Contains(0);
    }

    const UUIndicator& GetUuIndicator() const
    {
        ITS_REQUIRE(OptionUuIndicator());
        return static_cast<const UUIndicator&> (ElementAt(0));
    }

    void SetUui(UUI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUuiStaticDescription());
        AddElement(1, element);
    }

    void SetUui(const UUI& element)
    {
        its::AsnObject& asnObject = const_cast<UUI&>(element);
        asnObject.SetDescription(GetUuiStaticDescription());
        AddElement(1, element);
    }

    bool OptionUui() const
    {
        return Contains(1);
    }

    const UUI& GetUui() const
    {
        ITS_REQUIRE(OptionUui());
        return static_cast<const UUI&> (ElementAt(1));
    }

    void SetUusCFInteraction(UusCFInteraction* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUusCFInteractionStaticDescription());
        AddElement(2, element);
    }

    void SetUusCFInteraction(const UusCFInteraction& element)
    {
        its::AsnObject& asnObject = const_cast<UusCFInteraction&>(element);
        asnObject.SetDescription(GetUusCFInteractionStaticDescription());
        AddElement(2, element);
    }

    bool OptionUusCFInteraction() const
    {
        return Contains(2);
    }

    const UusCFInteraction& GetUusCFInteraction() const
    {
        ITS_REQUIRE(OptionUusCFInteraction());
        return static_cast<const UusCFInteraction&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_UU_DATA_H_)

