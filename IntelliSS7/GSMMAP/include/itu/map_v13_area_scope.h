//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_AREA_SCOPE_H_)
#define _MAP_V13_AREA_SCOPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>

#include <map_v13_cgi_list.h>
#include <map_v13_e_utran_cgi_list.h>
#include <map_v13_routing_area_id_list.h>
#include <map_v13_location_area_id_list.h>
#include <map_v13_tracking_area_id_list.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class AreaScope : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::CGI_List CGI_List;


        typedef map_v13::E_UTRAN_CGI_List E_UTRAN_CGI_List;


        typedef map_v13::RoutingAreaId_List RoutingAreaId_List;


        typedef map_v13::LocationAreaId_List LocationAreaId_List;


        typedef map_v13::TrackingAreaId_List TrackingAreaId_List;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    AreaScope() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    AreaScope(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    AreaScope(const AreaScope& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AreaScope(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCgi_ListStaticDescription();
    static its::AsnDescObject* GetE_utran_cgi_ListStaticDescription();
    static its::AsnDescObject* GetRoutingAreaId_ListStaticDescription();
    static its::AsnDescObject* GetLocationAreaId_ListStaticDescription();
    static its::AsnDescObject* GetTrackingAreaId_ListStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~AreaScope()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AreaScope(*this);
    }

    virtual std::string GetName() const
    { return "AreaScope"; }

    void SetCgi_List(CGI_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCgi_ListStaticDescription());
        AddElement(0, element);
    }

    void SetCgi_List(const CGI_List& element)
    {
        its::AsnObject& asnObject = const_cast<CGI_List&>(element);
        asnObject.SetDescription(GetCgi_ListStaticDescription());
        AddElement(0, element);
    }

    bool OptionCgi_List() const
    {
        return Contains(0);
    }

    const CGI_List& GetCgi_List() const
    {
        ITS_REQUIRE(OptionCgi_List());
        return static_cast<const CGI_List&> (ElementAt(0));
    }

    void SetE_utran_cgi_List(E_UTRAN_CGI_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE_utran_cgi_ListStaticDescription());
        AddElement(1, element);
    }

    void SetE_utran_cgi_List(const E_UTRAN_CGI_List& element)
    {
        its::AsnObject& asnObject = const_cast<E_UTRAN_CGI_List&>(element);
        asnObject.SetDescription(GetE_utran_cgi_ListStaticDescription());
        AddElement(1, element);
    }

    bool OptionE_utran_cgi_List() const
    {
        return Contains(1);
    }

    const E_UTRAN_CGI_List& GetE_utran_cgi_List() const
    {
        ITS_REQUIRE(OptionE_utran_cgi_List());
        return static_cast<const E_UTRAN_CGI_List&> (ElementAt(1));
    }

    void SetRoutingAreaId_List(RoutingAreaId_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRoutingAreaId_ListStaticDescription());
        AddElement(2, element);
    }

    void SetRoutingAreaId_List(const RoutingAreaId_List& element)
    {
        its::AsnObject& asnObject = const_cast<RoutingAreaId_List&>(element);
        asnObject.SetDescription(GetRoutingAreaId_ListStaticDescription());
        AddElement(2, element);
    }

    bool OptionRoutingAreaId_List() const
    {
        return Contains(2);
    }

    const RoutingAreaId_List& GetRoutingAreaId_List() const
    {
        ITS_REQUIRE(OptionRoutingAreaId_List());
        return static_cast<const RoutingAreaId_List&> (ElementAt(2));
    }

    void SetLocationAreaId_List(LocationAreaId_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationAreaId_ListStaticDescription());
        AddElement(3, element);
    }

    void SetLocationAreaId_List(const LocationAreaId_List& element)
    {
        its::AsnObject& asnObject = const_cast<LocationAreaId_List&>(element);
        asnObject.SetDescription(GetLocationAreaId_ListStaticDescription());
        AddElement(3, element);
    }

    bool OptionLocationAreaId_List() const
    {
        return Contains(3);
    }

    const LocationAreaId_List& GetLocationAreaId_List() const
    {
        ITS_REQUIRE(OptionLocationAreaId_List());
        return static_cast<const LocationAreaId_List&> (ElementAt(3));
    }

    void SetTrackingAreaId_List(TrackingAreaId_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTrackingAreaId_ListStaticDescription());
        AddElement(4, element);
    }

    void SetTrackingAreaId_List(const TrackingAreaId_List& element)
    {
        its::AsnObject& asnObject = const_cast<TrackingAreaId_List&>(element);
        asnObject.SetDescription(GetTrackingAreaId_ListStaticDescription());
        AddElement(4, element);
    }

    bool OptionTrackingAreaId_List() const
    {
        return Contains(4);
    }

    const TrackingAreaId_List& GetTrackingAreaId_List() const
    {
        ITS_REQUIRE(OptionTrackingAreaId_List());
        return static_cast<const TrackingAreaId_List&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_AREA_SCOPE_H_)

