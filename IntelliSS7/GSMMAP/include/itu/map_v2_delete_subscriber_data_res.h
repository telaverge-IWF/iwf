//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_DELETE_SUBSCRIBER_DATA_RES_H_)
#define _MAP_V2_DELETE_SUBSCRIBER_DATA_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>

#include <map_v2_regional_subscription_response.h>



namespace map_v2 {



class DeleteSubscriberDataRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::RegionalSubscriptionResponse RegionalSubscriptionResponse;


////////// End Nested Class(es) //////////

    DeleteSubscriberDataRes() : its::AsnSequence(1, false)
    {
        Initialize();
    }

    DeleteSubscriberDataRes(its::Octets& octets) : its::AsnSequence(1, false)
    {
        Initialize();
        Decode(octets);
    }

    DeleteSubscriberDataRes(const DeleteSubscriberDataRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    DeleteSubscriberDataRes(its::AsnDescObject* description) : its::AsnSequence(1, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRegionalSubscriptionResponseStaticDescription();

public:

    virtual ~DeleteSubscriberDataRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new DeleteSubscriberDataRes(*this);
    }

    virtual std::string GetName() const
    { return "DeleteSubscriberDataRes"; }

    void SetRegionalSubscriptionResponse(RegionalSubscriptionResponse* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRegionalSubscriptionResponseStaticDescription());
        AddElement(0, element);
    }

    void SetRegionalSubscriptionResponse(const RegionalSubscriptionResponse& element)
    {
        its::AsnObject& asnObject = const_cast<RegionalSubscriptionResponse&>(element);
        asnObject.SetDescription(GetRegionalSubscriptionResponseStaticDescription());
        AddElement(0, element);
    }

    bool OptionRegionalSubscriptionResponse() const
    {
        return Contains(0);
    }

    const RegionalSubscriptionResponse& GetRegionalSubscriptionResponse() const
    {
        ITS_REQUIRE(OptionRegionalSubscriptionResponse());
        return static_cast<const RegionalSubscriptionResponse&> (ElementAt(0));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_DELETE_SUBSCRIBER_DATA_RES_H_)

