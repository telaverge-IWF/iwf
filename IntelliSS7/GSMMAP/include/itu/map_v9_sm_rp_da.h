//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_SM_RP_DA_H_)
#define _MAP_V9_SM_RP_DA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_imsi.h>
#include <map_v9_lmsi.h>
#include <map_v9_address_string.h>



namespace map_v9 {



class SM_RP_DA : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class NoSM_RP_DA : public its::AsnNull
    {
    public:

        NoSM_RP_DA() : its::AsnNull(false)
        {
            Initialize();
        }

        NoSM_RP_DA(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        NoSM_RP_DA(const NoSM_RP_DA& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        NoSM_RP_DA(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NoSM_RP_DA()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NoSM_RP_DA(*this);
        }

        virtual std::string GetName() const
        { return "NoSM_RP_DA"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::LMSI LMSI;


        typedef map_v9::AddressString AddressString;


////////// End Nested Class(es) //////////

    SM_RP_DA() : its::AsnChoice(false)
    {
        Initialize();
    }

    SM_RP_DA(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    SM_RP_DA(const SM_RP_DA& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    SM_RP_DA(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    SM_RP_DA(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetLmsiStaticDescription();
    static its::AsnDescObject* GetServiceCentreAddressDAStaticDescription();
    static its::AsnDescObject* GetNoSM_RP_DAStaticDescription();

public:

    virtual ~SM_RP_DA()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SM_RP_DA(*this);
    }

    virtual std::string GetName() const
    { return "SM_RP_DA"; }

    void SetChoiceImsi(IMSI* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceImsi(const IMSI& choice)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(choice);
        asnObject.SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceImsi() const
    {
        return Contains(GetImsiStaticDescription()->TagIdentity());
    }

    const IMSI& GetChoiceImsi() const
    {
        ITS_REQUIRE(ChoiceImsi());
        return static_cast<const IMSI&> (GetChoice());
    }

    void SetChoiceLmsi(LMSI* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLmsiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLmsi(const LMSI& choice)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(choice);
        asnObject.SetDescription(GetLmsiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLmsi() const
    {
        return Contains(GetLmsiStaticDescription()->TagIdentity());
    }

    const LMSI& GetChoiceLmsi() const
    {
        ITS_REQUIRE(ChoiceLmsi());
        return static_cast<const LMSI&> (GetChoice());
    }

    void SetChoiceServiceCentreAddressDA(AddressString* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetServiceCentreAddressDAStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceServiceCentreAddressDA(const AddressString& choice)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(choice);
        asnObject.SetDescription(GetServiceCentreAddressDAStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceServiceCentreAddressDA() const
    {
        return Contains(GetServiceCentreAddressDAStaticDescription()->TagIdentity());
    }

    const AddressString& GetChoiceServiceCentreAddressDA() const
    {
        ITS_REQUIRE(ChoiceServiceCentreAddressDA());
        return static_cast<const AddressString&> (GetChoice());
    }

    void SetChoiceNoSM_RP_DA(NoSM_RP_DA* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNoSM_RP_DAStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNoSM_RP_DA(const NoSM_RP_DA& choice)
    {
        its::AsnObject& asnObject = const_cast<NoSM_RP_DA&>(choice);
        asnObject.SetDescription(GetNoSM_RP_DAStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNoSM_RP_DA() const
    {
        return Contains(GetNoSM_RP_DAStaticDescription()->TagIdentity());
    }

    const NoSM_RP_DA& GetChoiceNoSM_RP_DA() const
    {
        ITS_REQUIRE(ChoiceNoSM_RP_DA());
        return static_cast<const NoSM_RP_DA&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_SM_RP_DA_H_)

