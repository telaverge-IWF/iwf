//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_RESUME_CALL_HANDLING_ARG_H_)
#define _MAP_V13_RESUME_CALL_HANDLING_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnSequenceOf.h>

#include <map_v13_call_reference_number.h>
#include <map_v13_ext_basic_service_code.h>
#include <map_v13_forwarding_data.h>
#include <map_v13_imsi.h>
#include <map_v13_cug_check_info.h>
#include <map_v13_o_csi.h>
#include <map_v13_extension_container.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_uu_data.h>
#include <map_v13_d_csi.h>
#include <map_v13_o_bcsm_camel_tdp_criteria_list.h>



namespace map_v13 {



class ResumeCallHandlingArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Ccbs_Possible : public its::AsnNull
    {
    public:

        Ccbs_Possible() : its::AsnNull(false)
        {
            Initialize();
        }

        Ccbs_Possible(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ccbs_Possible(const Ccbs_Possible& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ccbs_Possible(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ccbs_Possible()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ccbs_Possible(*this);
        }

        virtual std::string GetName() const
        { return "Ccbs_Possible"; }

    };



    class AllInformationSent : public its::AsnNull
    {
    public:

        AllInformationSent() : its::AsnNull(false)
        {
            Initialize();
        }

        AllInformationSent(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AllInformationSent(const AllInformationSent& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AllInformationSent(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AllInformationSent()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllInformationSent(*this);
        }

        virtual std::string GetName() const
        { return "AllInformationSent"; }

    };



    class MtRoamingRetry : public its::AsnNull
    {
    public:

        MtRoamingRetry() : its::AsnNull(false)
        {
            Initialize();
        }

        MtRoamingRetry(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MtRoamingRetry(const MtRoamingRetry& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MtRoamingRetry(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MtRoamingRetry()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MtRoamingRetry(*this);
        }

        virtual std::string GetName() const
        { return "MtRoamingRetry"; }

    };


        typedef map_v13::CallReferenceNumber CallReferenceNumber;


        typedef map_v13::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef map_v13::ForwardingData ForwardingData;


        typedef map_v13::IMSI IMSI;


        typedef map_v13::CUG_CheckInfo CUG_CheckInfo;


        typedef map_v13::O_CSI O_CSI;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::UU_Data UU_Data;


        typedef map_v13::D_CSI D_CSI;


        typedef map_v13::O_BcsmCamelTDPCriteriaList O_BcsmCamelTDPCriteriaList;


////////// End Nested Class(es) //////////

    ResumeCallHandlingArg() : its::AsnSequence(15, false)
    {
        Initialize();
    }

    ResumeCallHandlingArg(its::Octets& octets) : its::AsnSequence(15, false)
    {
        Initialize();
        Decode(octets);
    }

    ResumeCallHandlingArg(const ResumeCallHandlingArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ResumeCallHandlingArg(its::AsnDescObject* description) : its::AsnSequence(15, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCallReferenceNumberStaticDescription();
    static its::AsnDescObject* GetBasicServiceGroupStaticDescription();
    static its::AsnDescObject* GetForwardingDataStaticDescription();
    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetCug_CheckInfoStaticDescription();
    static its::AsnDescObject* GetO_CSIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetCcbs_PossibleStaticDescription();
    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetUu_DataStaticDescription();
    static its::AsnDescObject* GetAllInformationSentStaticDescription();
    static its::AsnDescObject* GetD_csiStaticDescription();
    static its::AsnDescObject* GetO_BcsmCamelTDPCriteriaListStaticDescription();
    static its::AsnDescObject* GetBasicServiceGroup2StaticDescription();
    static its::AsnDescObject* GetMtRoamingRetryStaticDescription();

public:

    virtual ~ResumeCallHandlingArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ResumeCallHandlingArg(*this);
    }

    virtual std::string GetName() const
    { return "ResumeCallHandlingArg"; }

    void SetCallReferenceNumber(CallReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    void SetCallReferenceNumber(const CallReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallReferenceNumber&>(element);
        asnObject.SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    bool OptionCallReferenceNumber() const
    {
        return Contains(0);
    }

    const CallReferenceNumber& GetCallReferenceNumber() const
    {
        ITS_REQUIRE(OptionCallReferenceNumber());
        return static_cast<const CallReferenceNumber&> (ElementAt(0));
    }

    void SetBasicServiceGroup(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(1, element);
    }

    void SetBasicServiceGroup(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(1, element);
    }

    bool OptionBasicServiceGroup() const
    {
        return Contains(1);
    }

    const Ext_BasicServiceCode& GetBasicServiceGroup() const
    {
        ITS_REQUIRE(OptionBasicServiceGroup());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(1));
    }

    void SetForwardingData(ForwardingData* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardingDataStaticDescription());
        AddElement(2, element);
    }

    void SetForwardingData(const ForwardingData& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardingData&>(element);
        asnObject.SetDescription(GetForwardingDataStaticDescription());
        AddElement(2, element);
    }

    bool OptionForwardingData() const
    {
        return Contains(2);
    }

    const ForwardingData& GetForwardingData() const
    {
        ITS_REQUIRE(OptionForwardingData());
        return static_cast<const ForwardingData&> (ElementAt(2));
    }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(3, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(3, element);
    }

    bool OptionImsi() const
    {
        return Contains(3);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(3));
    }

    void SetCug_CheckInfo(CUG_CheckInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(4, element);
    }

    void SetCug_CheckInfo(const CUG_CheckInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_CheckInfo&>(element);
        asnObject.SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(4, element);
    }

    bool OptionCug_CheckInfo() const
    {
        return Contains(4);
    }

    const CUG_CheckInfo& GetCug_CheckInfo() const
    {
        ITS_REQUIRE(OptionCug_CheckInfo());
        return static_cast<const CUG_CheckInfo&> (ElementAt(4));
    }

    void SetO_CSI(O_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_CSIStaticDescription());
        AddElement(5, element);
    }

    void SetO_CSI(const O_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<O_CSI&>(element);
        asnObject.SetDescription(GetO_CSIStaticDescription());
        AddElement(5, element);
    }

    bool OptionO_CSI() const
    {
        return Contains(5);
    }

    const O_CSI& GetO_CSI() const
    {
        ITS_REQUIRE(OptionO_CSI());
        return static_cast<const O_CSI&> (ElementAt(5));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(6);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(6));
    }

    void SetCcbs_Possible(Ccbs_Possible* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_PossibleStaticDescription());
        AddElement(7, element);
    }

    void SetCcbs_Possible(const Ccbs_Possible& element)
    {
        its::AsnObject& asnObject = const_cast<Ccbs_Possible&>(element);
        asnObject.SetDescription(GetCcbs_PossibleStaticDescription());
        AddElement(7, element);
    }

    bool OptionCcbs_Possible() const
    {
        return Contains(7);
    }

    const Ccbs_Possible& GetCcbs_Possible() const
    {
        ITS_REQUIRE(OptionCcbs_Possible());
        return static_cast<const Ccbs_Possible&> (ElementAt(7));
    }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(8, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(8, element);
    }

    bool OptionMsisdn() const
    {
        return Contains(8);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        ITS_REQUIRE(OptionMsisdn());
        return static_cast<const ISDN_AddressString&> (ElementAt(8));
    }

    void SetUu_Data(UU_Data* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUu_DataStaticDescription());
        AddElement(9, element);
    }

    void SetUu_Data(const UU_Data& element)
    {
        its::AsnObject& asnObject = const_cast<UU_Data&>(element);
        asnObject.SetDescription(GetUu_DataStaticDescription());
        AddElement(9, element);
    }

    bool OptionUu_Data() const
    {
        return Contains(9);
    }

    const UU_Data& GetUu_Data() const
    {
        ITS_REQUIRE(OptionUu_Data());
        return static_cast<const UU_Data&> (ElementAt(9));
    }

    void SetAllInformationSent(AllInformationSent* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAllInformationSentStaticDescription());
        AddElement(10, element);
    }

    void SetAllInformationSent(const AllInformationSent& element)
    {
        its::AsnObject& asnObject = const_cast<AllInformationSent&>(element);
        asnObject.SetDescription(GetAllInformationSentStaticDescription());
        AddElement(10, element);
    }

    bool OptionAllInformationSent() const
    {
        return Contains(10);
    }

    const AllInformationSent& GetAllInformationSent() const
    {
        ITS_REQUIRE(OptionAllInformationSent());
        return static_cast<const AllInformationSent&> (ElementAt(10));
    }

    void SetD_csi(D_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetD_csiStaticDescription());
        AddElement(11, element);
    }

    void SetD_csi(const D_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<D_CSI&>(element);
        asnObject.SetDescription(GetD_csiStaticDescription());
        AddElement(11, element);
    }

    bool OptionD_csi() const
    {
        return Contains(11);
    }

    const D_CSI& GetD_csi() const
    {
        ITS_REQUIRE(OptionD_csi());
        return static_cast<const D_CSI&> (ElementAt(11));
    }

    void SetO_BcsmCamelTDPCriteriaList(O_BcsmCamelTDPCriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_BcsmCamelTDPCriteriaListStaticDescription());
        AddElement(12, element);
    }

    void SetO_BcsmCamelTDPCriteriaList(const O_BcsmCamelTDPCriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<O_BcsmCamelTDPCriteriaList&>(element);
        asnObject.SetDescription(GetO_BcsmCamelTDPCriteriaListStaticDescription());
        AddElement(12, element);
    }

    bool OptionO_BcsmCamelTDPCriteriaList() const
    {
        return Contains(12);
    }

    const O_BcsmCamelTDPCriteriaList& GetO_BcsmCamelTDPCriteriaList() const
    {
        ITS_REQUIRE(OptionO_BcsmCamelTDPCriteriaList());
        return static_cast<const O_BcsmCamelTDPCriteriaList&> (ElementAt(12));
    }

    void SetBasicServiceGroup2(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceGroup2StaticDescription());
        AddElement(13, element);
    }

    void SetBasicServiceGroup2(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceGroup2StaticDescription());
        AddElement(13, element);
    }

    bool OptionBasicServiceGroup2() const
    {
        return Contains(13);
    }

    const Ext_BasicServiceCode& GetBasicServiceGroup2() const
    {
        ITS_REQUIRE(OptionBasicServiceGroup2());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(13));
    }

    void SetMtRoamingRetry(MtRoamingRetry* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMtRoamingRetryStaticDescription());
        AddElement(14, element);
    }

    void SetMtRoamingRetry(const MtRoamingRetry& element)
    {
        its::AsnObject& asnObject = const_cast<MtRoamingRetry&>(element);
        asnObject.SetDescription(GetMtRoamingRetryStaticDescription());
        AddElement(14, element);
    }

    bool OptionMtRoamingRetry() const
    {
        return Contains(14);
    }

    const MtRoamingRetry& GetMtRoamingRetry() const
    {
        ITS_REQUIRE(OptionMtRoamingRetry());
        return static_cast<const MtRoamingRetry&> (ElementAt(14));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_RESUME_CALL_HANDLING_ARG_H_)

