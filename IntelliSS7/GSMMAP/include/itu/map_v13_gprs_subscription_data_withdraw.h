//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_GPRS_SUBSCRIPTION_DATA_WITHDRAW_H_)
#define _MAP_V13_GPRS_SUBSCRIPTION_DATA_WITHDRAW_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>

#include <map_v13_context_id_list.h>



namespace map_v13 {



class GPRSSubscriptionDataWithdraw : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AllGPRSData : public its::AsnNull
    {
    public:

        AllGPRSData() : its::AsnNull(false)
        {
            Initialize();
        }

        AllGPRSData(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AllGPRSData(const AllGPRSData& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AllGPRSData(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AllGPRSData()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllGPRSData(*this);
        }

        virtual std::string GetName() const
        { return "AllGPRSData"; }

    };


        typedef map_v13::ContextIdList ContextIdList;


////////// End Nested Class(es) //////////

    GPRSSubscriptionDataWithdraw() : its::AsnChoice(false)
    {
        Initialize();
    }

    GPRSSubscriptionDataWithdraw(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    GPRSSubscriptionDataWithdraw(const GPRSSubscriptionDataWithdraw& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    GPRSSubscriptionDataWithdraw(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    GPRSSubscriptionDataWithdraw(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAllGPRSDataStaticDescription();
    static its::AsnDescObject* GetContextIdListStaticDescription();

public:

    virtual ~GPRSSubscriptionDataWithdraw()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GPRSSubscriptionDataWithdraw(*this);
    }

    virtual std::string GetName() const
    { return "GPRSSubscriptionDataWithdraw"; }

    void SetChoiceAllGPRSData(AllGPRSData* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAllGPRSDataStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAllGPRSData(const AllGPRSData& choice)
    {
        its::AsnObject& asnObject = const_cast<AllGPRSData&>(choice);
        asnObject.SetDescription(GetAllGPRSDataStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAllGPRSData() const
    {
        return Contains(GetAllGPRSDataStaticDescription()->TagIdentity());
    }

    const AllGPRSData& GetChoiceAllGPRSData() const
    {
        ITS_REQUIRE(ChoiceAllGPRSData());
        return static_cast<const AllGPRSData&> (GetChoice());
    }

    void SetChoiceContextIdList(ContextIdList* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetContextIdListStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceContextIdList(const ContextIdList& choice)
    {
        its::AsnObject& asnObject = const_cast<ContextIdList&>(choice);
        asnObject.SetDescription(GetContextIdListStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceContextIdList() const
    {
        return Contains(GetContextIdListStaticDescription()->TagIdentity());
    }

    const ContextIdList& GetChoiceContextIdList() const
    {
        ITS_REQUIRE(ChoiceContextIdList());
        return static_cast<const ContextIdList&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_GPRS_SUBSCRIPTION_DATA_WITHDRAW_H_)

