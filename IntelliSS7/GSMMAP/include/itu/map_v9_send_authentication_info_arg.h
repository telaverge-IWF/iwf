//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_SEND_AUTHENTICATION_INFO_ARG_H_)
#define _MAP_V9_SEND_AUTHENTICATION_INFO_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>

#include <map_v9_imsi.h>
#include <map_v9_number_of_requested_vectors.h>
#include <map_v9_re_synchronisation_info.h>
#include <map_v9_extension_container.h>
#include <map_v9_requesting_node_type.h>
#include <map_v9_plmn_id.h>



namespace map_v9 {



class SendAuthenticationInfoArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class SegmentationProhibited : public its::AsnNull
    {
    public:

        SegmentationProhibited() : its::AsnNull(false)
        {
            Initialize();
        }

        SegmentationProhibited(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SegmentationProhibited(const SegmentationProhibited& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SegmentationProhibited(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SegmentationProhibited()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SegmentationProhibited(*this);
        }

        virtual std::string GetName() const
        { return "SegmentationProhibited"; }

    };



    class ImmediateResponsePreferred : public its::AsnNull
    {
    public:

        ImmediateResponsePreferred() : its::AsnNull(false)
        {
            Initialize();
        }

        ImmediateResponsePreferred(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ImmediateResponsePreferred(const ImmediateResponsePreferred& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ImmediateResponsePreferred(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ImmediateResponsePreferred()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ImmediateResponsePreferred(*this);
        }

        virtual std::string GetName() const
        { return "ImmediateResponsePreferred"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::NumberOfRequestedVectors NumberOfRequestedVectors;


        typedef map_v9::Re_synchronisationInfo Re_synchronisationInfo;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::RequestingNodeType RequestingNodeType;


        typedef map_v9::PLMN_Id PLMN_Id;


////////// End Nested Class(es) //////////

    SendAuthenticationInfoArg() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    SendAuthenticationInfoArg(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    SendAuthenticationInfoArg(const SendAuthenticationInfoArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendAuthenticationInfoArg(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetNumberOfRequestedVectorsStaticDescription();
    static its::AsnDescObject* GetSegmentationProhibitedStaticDescription();
    static its::AsnDescObject* GetImmediateResponsePreferredStaticDescription();
    static its::AsnDescObject* GetRe_synchronisationInfoStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetRequestingNodeTypeStaticDescription();
    static its::AsnDescObject* GetRequestingPLMN_IdStaticDescription();

public:

    virtual ~SendAuthenticationInfoArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendAuthenticationInfoArg(*this);
    }

    virtual std::string GetName() const
    { return "SendAuthenticationInfoArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetNumberOfRequestedVectors(NumberOfRequestedVectors* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfRequestedVectorsStaticDescription());
        AddElement(1, element);
    }

    void SetNumberOfRequestedVectors(const NumberOfRequestedVectors& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfRequestedVectors&>(element);
        asnObject.SetDescription(GetNumberOfRequestedVectorsStaticDescription());
        AddElement(1, element);
    }

    const NumberOfRequestedVectors& GetNumberOfRequestedVectors() const
    {
        return static_cast<const NumberOfRequestedVectors&> (ElementAt(1));
    }

    void SetSegmentationProhibited(SegmentationProhibited* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSegmentationProhibitedStaticDescription());
        AddElement(2, element);
    }

    void SetSegmentationProhibited(const SegmentationProhibited& element)
    {
        its::AsnObject& asnObject = const_cast<SegmentationProhibited&>(element);
        asnObject.SetDescription(GetSegmentationProhibitedStaticDescription());
        AddElement(2, element);
    }

    bool OptionSegmentationProhibited() const
    {
        return Contains(2);
    }

    const SegmentationProhibited& GetSegmentationProhibited() const
    {
        ITS_REQUIRE(OptionSegmentationProhibited());
        return static_cast<const SegmentationProhibited&> (ElementAt(2));
    }

    void SetImmediateResponsePreferred(ImmediateResponsePreferred* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImmediateResponsePreferredStaticDescription());
        AddElement(3, element);
    }

    void SetImmediateResponsePreferred(const ImmediateResponsePreferred& element)
    {
        its::AsnObject& asnObject = const_cast<ImmediateResponsePreferred&>(element);
        asnObject.SetDescription(GetImmediateResponsePreferredStaticDescription());
        AddElement(3, element);
    }

    bool OptionImmediateResponsePreferred() const
    {
        return Contains(3);
    }

    const ImmediateResponsePreferred& GetImmediateResponsePreferred() const
    {
        ITS_REQUIRE(OptionImmediateResponsePreferred());
        return static_cast<const ImmediateResponsePreferred&> (ElementAt(3));
    }

    void SetRe_synchronisationInfo(Re_synchronisationInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRe_synchronisationInfoStaticDescription());
        AddElement(4, element);
    }

    void SetRe_synchronisationInfo(const Re_synchronisationInfo& element)
    {
        its::AsnObject& asnObject = const_cast<Re_synchronisationInfo&>(element);
        asnObject.SetDescription(GetRe_synchronisationInfoStaticDescription());
        AddElement(4, element);
    }

    bool OptionRe_synchronisationInfo() const
    {
        return Contains(4);
    }

    const Re_synchronisationInfo& GetRe_synchronisationInfo() const
    {
        ITS_REQUIRE(OptionRe_synchronisationInfo());
        return static_cast<const Re_synchronisationInfo&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetRequestingNodeType(RequestingNodeType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestingNodeTypeStaticDescription());
        AddElement(6, element);
    }

    void SetRequestingNodeType(const RequestingNodeType& element)
    {
        its::AsnObject& asnObject = const_cast<RequestingNodeType&>(element);
        asnObject.SetDescription(GetRequestingNodeTypeStaticDescription());
        AddElement(6, element);
    }

    bool OptionRequestingNodeType() const
    {
        return Contains(6);
    }

    const RequestingNodeType& GetRequestingNodeType() const
    {
        ITS_REQUIRE(OptionRequestingNodeType());
        return static_cast<const RequestingNodeType&> (ElementAt(6));
    }

    void SetRequestingPLMN_Id(PLMN_Id* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestingPLMN_IdStaticDescription());
        AddElement(7, element);
    }

    void SetRequestingPLMN_Id(const PLMN_Id& element)
    {
        its::AsnObject& asnObject = const_cast<PLMN_Id&>(element);
        asnObject.SetDescription(GetRequestingPLMN_IdStaticDescription());
        AddElement(7, element);
    }

    bool OptionRequestingPLMN_Id() const
    {
        return Contains(7);
    }

    const PLMN_Id& GetRequestingPLMN_Id() const
    {
        ITS_REQUIRE(OptionRequestingPLMN_Id());
        return static_cast<const PLMN_Id&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_SEND_AUTHENTICATION_INFO_ARG_H_)

