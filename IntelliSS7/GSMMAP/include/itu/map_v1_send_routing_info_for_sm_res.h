//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SEND_ROUTING_INFO_FOR_SM_RES_H_)
#define _MAP_V1_SEND_ROUTING_INFO_FOR_SM_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnBoolean.h>

#include <map_v1_imsi.h>
#include <map_v1_location_info.h>
#include <map_v1_l_ms_id.h>
#include <map_v1_forwarding_data.h>



namespace map_v1 {



class SendRoutingInfoForSMRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LocInfoOrForwData : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class LocInfo : public its::AsnSequence
        {
        public:


        ////////// Begin Nested Class(es) //////////


                typedef map_v1::LocationInfo LocationInfo;


                typedef map_v1::LMsId LMsId;


        ////////// End Nested Class(es) //////////

            LocInfo() : its::AsnSequence(2, false)
            {
                Initialize();
            }

            LocInfo(its::Octets& octets) : its::AsnSequence(2, false)
            {
                Initialize();
                Decode(octets);
            }

            LocInfo(const LocInfo& rhs) : its::AsnSequence(rhs)
            {
                // Nothing to do.
            }

            LocInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetLocationInfoStaticDescription();
            static its::AsnDescObject* GetLMsIdStaticDescription();

        public:

            virtual ~LocInfo()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new LocInfo(*this);
            }

            virtual std::string GetName() const
            { return "LocInfo"; }

            void SetLocationInfo(LocationInfo* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetLocationInfoStaticDescription());
                AddElement(0, element);
            }

            void SetLocationInfo(const LocationInfo& element)
            {
                its::AsnObject& asnObject = const_cast<LocationInfo&>(element);
                asnObject.SetDescription(GetLocationInfoStaticDescription());
                AddElement(0, element);
            }

            const LocationInfo& GetLocationInfo() const
            {
                return static_cast<const LocationInfo&> (ElementAt(0));
            }

            void SetLMsId(LMsId* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetLMsIdStaticDescription());
                AddElement(1, element);
            }

            void SetLMsId(const LMsId& element)
            {
                its::AsnObject& asnObject = const_cast<LMsId&>(element);
                asnObject.SetDescription(GetLMsIdStaticDescription());
                AddElement(1, element);
            }

            bool OptionLMsId() const
            {
                return Contains(1);
            }

            const LMsId& GetLMsId() const
            {
                ITS_REQUIRE(OptionLMsId());
                return static_cast<const LMsId&> (ElementAt(1));
            }

        };


            typedef map_v1::ForwardingData ForwardingData;


    ////////// End Nested Class(es) //////////

        LocInfoOrForwData() : its::AsnChoice(false)
        {
            Initialize();
        }

        LocInfoOrForwData(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        LocInfoOrForwData(const LocInfoOrForwData& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        LocInfoOrForwData(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        LocInfoOrForwData(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetLocInfoStaticDescription();
        static its::AsnDescObject* GetForwardingDataStaticDescription();

    public:

        virtual ~LocInfoOrForwData()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LocInfoOrForwData(*this);
        }

        virtual std::string GetName() const
        { return "LocInfoOrForwData"; }

        void SetChoiceLocInfo(LocInfo* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetLocInfoStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceLocInfo(const LocInfo& choice)
        {
            its::AsnObject& asnObject = const_cast<LocInfo&>(choice);
            asnObject.SetDescription(GetLocInfoStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceLocInfo() const
        {
            return Contains(GetLocInfoStaticDescription()->TagIdentity());
        }

        const LocInfo& GetChoiceLocInfo() const
        {
            ITS_REQUIRE(ChoiceLocInfo());
            return static_cast<const LocInfo&> (GetChoice());
        }

        void SetChoiceForwardingData(ForwardingData* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetForwardingDataStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceForwardingData(const ForwardingData& choice)
        {
            its::AsnObject& asnObject = const_cast<ForwardingData&>(choice);
            asnObject.SetDescription(GetForwardingDataStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceForwardingData() const
        {
            return Contains(GetForwardingDataStaticDescription()->TagIdentity());
        }

        const ForwardingData& GetChoiceForwardingData() const
        {
            ITS_REQUIRE(ChoiceForwardingData());
            return static_cast<const ForwardingData&> (GetChoice());
        }

    };



    class Mwd_Set : public its::AsnBoolean
    {
    public:

        Mwd_Set(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Mwd_Set(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Mwd_Set(const Mwd_Set& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Mwd_Set(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Mwd_Set(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mwd_Set()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mwd_Set(*this);
        }

        virtual std::string GetName() const
        { return "Mwd_Set"; }

    };


        typedef map_v1::IMSI IMSI;


////////// End Nested Class(es) //////////

    SendRoutingInfoForSMRes() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    SendRoutingInfoForSMRes(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInfoForSMRes(const SendRoutingInfoForSMRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInfoForSMRes(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetLocInfoOrForwDataStaticDescription();
    static its::AsnDescObject* GetMwd_SetStaticDescription();

public:

    virtual ~SendRoutingInfoForSMRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInfoForSMRes(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInfoForSMRes"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetLocInfoOrForwData(LocInfoOrForwData* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocInfoOrForwDataStaticDescription());
        AddElement(1, element);
    }

    void SetLocInfoOrForwData(const LocInfoOrForwData& element)
    {
        its::AsnObject& asnObject = const_cast<LocInfoOrForwData&>(element);
        asnObject.SetDescription(GetLocInfoOrForwDataStaticDescription());
        AddElement(1, element);
    }

    const LocInfoOrForwData& GetLocInfoOrForwData() const
    {
        return static_cast<const LocInfoOrForwData&> (ElementAt(1));
    }

    void SetMwd_Set(Mwd_Set* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMwd_SetStaticDescription());
        AddElement(2, element);
    }

    void SetMwd_Set(const Mwd_Set& element)
    {
        its::AsnObject& asnObject = const_cast<Mwd_Set&>(element);
        asnObject.SetDescription(GetMwd_SetStaticDescription());
        AddElement(2, element);
    }

    bool OptionMwd_Set() const
    {
        return Contains(2);
    }

    const Mwd_Set& GetMwd_Set() const
    {
        ITS_REQUIRE(OptionMwd_Set());
        return static_cast<const Mwd_Set&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SEND_ROUTING_INFO_FOR_SM_RES_H_)

