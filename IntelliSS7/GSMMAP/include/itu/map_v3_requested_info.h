//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_REQUESTED_INFO_H_)
#define _MAP_V3_REQUESTED_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>

#include <map_v3_extension_container.h>



namespace map_v3 {



class RequestedInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LocationInformation : public its::AsnNull
    {
    public:

        LocationInformation() : its::AsnNull(false)
        {
            Initialize();
        }

        LocationInformation(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LocationInformation(const LocationInformation& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LocationInformation(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LocationInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LocationInformation(*this);
        }

        virtual std::string GetName() const
        { return "LocationInformation"; }

    };



    class SubscriberState : public its::AsnNull
    {
    public:

        SubscriberState() : its::AsnNull(false)
        {
            Initialize();
        }

        SubscriberState(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SubscriberState(const SubscriberState& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SubscriberState(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SubscriberState()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SubscriberState(*this);
        }

        virtual std::string GetName() const
        { return "SubscriberState"; }

    };


        typedef map_v3::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    RequestedInfo() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    RequestedInfo(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedInfo(const RequestedInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RequestedInfo(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocationInformationStaticDescription();
    static its::AsnDescObject* GetSubscriberStateStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~RequestedInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedInfo(*this);
    }

    virtual std::string GetName() const
    { return "RequestedInfo"; }

    void SetLocationInformation(LocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    void SetLocationInformation(const LocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformation&>(element);
        asnObject.SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    bool OptionLocationInformation() const
    {
        return Contains(0);
    }

    const LocationInformation& GetLocationInformation() const
    {
        ITS_REQUIRE(OptionLocationInformation());
        return static_cast<const LocationInformation&> (ElementAt(0));
    }

    void SetSubscriberState(SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    void SetSubscriberState(const SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberState&>(element);
        asnObject.SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    bool OptionSubscriberState() const
    {
        return Contains(1);
    }

    const SubscriberState& GetSubscriberState() const
    {
        ITS_REQUIRE(OptionSubscriberState());
        return static_cast<const SubscriberState&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_REQUESTED_INFO_H_)

