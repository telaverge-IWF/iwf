//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_TRACE_PROPAGATION_LIST_H_)
#define _MAP_V13_TRACE_PROPAGATION_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>
#include <AsnBitString.h>

#include <map_v13_trace_reference.h>
#include <map_v13_trace_type.h>
#include <map_v13_trace_reference2.h>
#include <map_v13_trace_recording_session_reference.h>
#include <map_v13_trace_depth.h>
#include <map_v13_rnc_interface_list.h>
#include <map_v13_msc_s_interface_list.h>
#include <map_v13_msc_s_event_list.h>
#include <map_v13_mgw_interface_list.h>
#include <map_v13_mgw_event_list.h>



namespace map_v13 {



class TracePropagationList : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::TraceReference TraceReference;


        typedef map_v13::TraceType TraceType;


        typedef map_v13::TraceReference2 TraceReference2;


        typedef map_v13::TraceRecordingSessionReference TraceRecordingSessionReference;


        typedef map_v13::TraceDepth TraceDepth;


        typedef map_v13::RNC_InterfaceList RNC_InterfaceList;


        typedef map_v13::MSC_S_InterfaceList MSC_S_InterfaceList;


        typedef map_v13::MSC_S_EventList MSC_S_EventList;


        typedef map_v13::MGW_InterfaceList MGW_InterfaceList;


        typedef map_v13::MGW_EventList MGW_EventList;


////////// End Nested Class(es) //////////

    TracePropagationList() : its::AsnSequence(12, false)
    {
        Initialize();
    }

    TracePropagationList(its::Octets& octets) : its::AsnSequence(12, false)
    {
        Initialize();
        Decode(octets);
    }

    TracePropagationList(const TracePropagationList& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    TracePropagationList(its::AsnDescObject* description) : its::AsnSequence(12, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTraceReferenceStaticDescription();
    static its::AsnDescObject* GetTraceTypeStaticDescription();
    static its::AsnDescObject* GetTraceReference2StaticDescription();
    static its::AsnDescObject* GetTraceRecordingSessionReferenceStaticDescription();
    static its::AsnDescObject* GetRnc_TraceDepthStaticDescription();
    static its::AsnDescObject* GetRnc_InterfaceListStaticDescription();
    static its::AsnDescObject* GetMsc_s_TraceDepthStaticDescription();
    static its::AsnDescObject* GetMsc_s_InterfaceListStaticDescription();
    static its::AsnDescObject* GetMsc_s_EventListStaticDescription();
    static its::AsnDescObject* GetMgw_TraceDepthStaticDescription();
    static its::AsnDescObject* GetMgw_InterfaceListStaticDescription();
    static its::AsnDescObject* GetMgw_EventListStaticDescription();

public:

    virtual ~TracePropagationList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TracePropagationList(*this);
    }

    virtual std::string GetName() const
    { return "TracePropagationList"; }

    void SetTraceReference(TraceReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceReferenceStaticDescription());
        AddElement(0, element);
    }

    void SetTraceReference(const TraceReference& element)
    {
        its::AsnObject& asnObject = const_cast<TraceReference&>(element);
        asnObject.SetDescription(GetTraceReferenceStaticDescription());
        AddElement(0, element);
    }

    bool OptionTraceReference() const
    {
        return Contains(0);
    }

    const TraceReference& GetTraceReference() const
    {
        ITS_REQUIRE(OptionTraceReference());
        return static_cast<const TraceReference&> (ElementAt(0));
    }

    void SetTraceType(TraceType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceTypeStaticDescription());
        AddElement(1, element);
    }

    void SetTraceType(const TraceType& element)
    {
        its::AsnObject& asnObject = const_cast<TraceType&>(element);
        asnObject.SetDescription(GetTraceTypeStaticDescription());
        AddElement(1, element);
    }

    bool OptionTraceType() const
    {
        return Contains(1);
    }

    const TraceType& GetTraceType() const
    {
        ITS_REQUIRE(OptionTraceType());
        return static_cast<const TraceType&> (ElementAt(1));
    }

    void SetTraceReference2(TraceReference2* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceReference2StaticDescription());
        AddElement(2, element);
    }

    void SetTraceReference2(const TraceReference2& element)
    {
        its::AsnObject& asnObject = const_cast<TraceReference2&>(element);
        asnObject.SetDescription(GetTraceReference2StaticDescription());
        AddElement(2, element);
    }

    bool OptionTraceReference2() const
    {
        return Contains(2);
    }

    const TraceReference2& GetTraceReference2() const
    {
        ITS_REQUIRE(OptionTraceReference2());
        return static_cast<const TraceReference2&> (ElementAt(2));
    }

    void SetTraceRecordingSessionReference(TraceRecordingSessionReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceRecordingSessionReferenceStaticDescription());
        AddElement(3, element);
    }

    void SetTraceRecordingSessionReference(const TraceRecordingSessionReference& element)
    {
        its::AsnObject& asnObject = const_cast<TraceRecordingSessionReference&>(element);
        asnObject.SetDescription(GetTraceRecordingSessionReferenceStaticDescription());
        AddElement(3, element);
    }

    bool OptionTraceRecordingSessionReference() const
    {
        return Contains(3);
    }

    const TraceRecordingSessionReference& GetTraceRecordingSessionReference() const
    {
        ITS_REQUIRE(OptionTraceRecordingSessionReference());
        return static_cast<const TraceRecordingSessionReference&> (ElementAt(3));
    }

    void SetRnc_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRnc_TraceDepthStaticDescription());
        AddElement(4, element);
    }

    void SetRnc_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetRnc_TraceDepthStaticDescription());
        AddElement(4, element);
    }

    bool OptionRnc_TraceDepth() const
    {
        return Contains(4);
    }

    const TraceDepth& GetRnc_TraceDepth() const
    {
        ITS_REQUIRE(OptionRnc_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(4));
    }

    void SetRnc_InterfaceList(RNC_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRnc_InterfaceListStaticDescription());
        AddElement(5, element);
    }

    void SetRnc_InterfaceList(const RNC_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<RNC_InterfaceList&>(element);
        asnObject.SetDescription(GetRnc_InterfaceListStaticDescription());
        AddElement(5, element);
    }

    bool OptionRnc_InterfaceList() const
    {
        return Contains(5);
    }

    const RNC_InterfaceList& GetRnc_InterfaceList() const
    {
        ITS_REQUIRE(OptionRnc_InterfaceList());
        return static_cast<const RNC_InterfaceList&> (ElementAt(5));
    }

    void SetMsc_s_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_TraceDepthStaticDescription());
        AddElement(6, element);
    }

    void SetMsc_s_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetMsc_s_TraceDepthStaticDescription());
        AddElement(6, element);
    }

    bool OptionMsc_s_TraceDepth() const
    {
        return Contains(6);
    }

    const TraceDepth& GetMsc_s_TraceDepth() const
    {
        ITS_REQUIRE(OptionMsc_s_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(6));
    }

    void SetMsc_s_InterfaceList(MSC_S_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_InterfaceListStaticDescription());
        AddElement(7, element);
    }

    void SetMsc_s_InterfaceList(const MSC_S_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<MSC_S_InterfaceList&>(element);
        asnObject.SetDescription(GetMsc_s_InterfaceListStaticDescription());
        AddElement(7, element);
    }

    bool OptionMsc_s_InterfaceList() const
    {
        return Contains(7);
    }

    const MSC_S_InterfaceList& GetMsc_s_InterfaceList() const
    {
        ITS_REQUIRE(OptionMsc_s_InterfaceList());
        return static_cast<const MSC_S_InterfaceList&> (ElementAt(7));
    }

    void SetMsc_s_EventList(MSC_S_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_EventListStaticDescription());
        AddElement(8, element);
    }

    void SetMsc_s_EventList(const MSC_S_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<MSC_S_EventList&>(element);
        asnObject.SetDescription(GetMsc_s_EventListStaticDescription());
        AddElement(8, element);
    }

    bool OptionMsc_s_EventList() const
    {
        return Contains(8);
    }

    const MSC_S_EventList& GetMsc_s_EventList() const
    {
        ITS_REQUIRE(OptionMsc_s_EventList());
        return static_cast<const MSC_S_EventList&> (ElementAt(8));
    }

    void SetMgw_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_TraceDepthStaticDescription());
        AddElement(9, element);
    }

    void SetMgw_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetMgw_TraceDepthStaticDescription());
        AddElement(9, element);
    }

    bool OptionMgw_TraceDepth() const
    {
        return Contains(9);
    }

    const TraceDepth& GetMgw_TraceDepth() const
    {
        ITS_REQUIRE(OptionMgw_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(9));
    }

    void SetMgw_InterfaceList(MGW_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_InterfaceListStaticDescription());
        AddElement(10, element);
    }

    void SetMgw_InterfaceList(const MGW_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<MGW_InterfaceList&>(element);
        asnObject.SetDescription(GetMgw_InterfaceListStaticDescription());
        AddElement(10, element);
    }

    bool OptionMgw_InterfaceList() const
    {
        return Contains(10);
    }

    const MGW_InterfaceList& GetMgw_InterfaceList() const
    {
        ITS_REQUIRE(OptionMgw_InterfaceList());
        return static_cast<const MGW_InterfaceList&> (ElementAt(10));
    }

    void SetMgw_EventList(MGW_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_EventListStaticDescription());
        AddElement(11, element);
    }

    void SetMgw_EventList(const MGW_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<MGW_EventList&>(element);
        asnObject.SetDescription(GetMgw_EventListStaticDescription());
        AddElement(11, element);
    }

    bool OptionMgw_EventList() const
    {
        return Contains(11);
    }

    const MGW_EventList& GetMgw_EventList() const
    {
        ITS_REQUIRE(OptionMgw_EventList());
        return static_cast<const MGW_EventList&> (ElementAt(11));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_TRACE_PROPAGATION_LIST_H_)

