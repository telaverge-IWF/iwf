//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_MAP_ABORT_INFORMATION_H_)
#define _MAP_V1_MAP_ABORT_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>



namespace map_v1 {



class MAPAbortInformation : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class AbortCause : public its::AsnEnumerated
    {
    public:

        AbortCause() : its::AsnEnumerated(false)
        {
            Initialize();
        }

        AbortCause(long value) : its::AsnEnumerated(value, false)
        {
            Initialize();
        }

        AbortCause(its::Octets& octets) : its::AsnEnumerated(false)
        {
            Initialize();
            Decode(octets);
        }

        AbortCause(const AbortCause& rhs) : its::AsnEnumerated(rhs)
        {
            // Nothing to do.
        }

        AbortCause(its::AsnDescObject* description) : its::AsnEnumerated(description)
        {
            // Nothing to do.
        }

        AbortCause(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AbortCause()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AbortCause(*this);
        }

        virtual std::string GetName() const
        { return "AbortCause"; }

        virtual long Get(const std::string& valueName) const;

        virtual std::string Get(long value) const;

        virtual std::string GetExt(long value) const;

        enum {
            ABORT_CAUSE_UNSPECIFIED_REASON = 0,
            ABORT_CAUSE_VERSION_NOT_SUPPORTED = 1,
            ABORT_CAUSE_USER_RESOURCE_LIMITATION = 2,
            ABORT_CAUSE_RESOURCE_UNAVAILABLE_LONG_TERM_PROBLEM = 3,
            ABORT_CAUSE_RESOURCE_UNAVAILABLE_TEMPORARY_PROBLEM = 4,
            ABORT_CAUSE_RADIO_CHANNEL_RELEASE = 5,
            ABORT_CAUSE_NETWORK_PATH_RELEASE = 6,
            ABORT_CAUSE_CALL_RELEASE = 7,
            ABORT_CAUSE_ASSOCIATED_PROCEDURE_FAILED = 8,
            ABORT_CAUSE_REMOTE_OPERATION_FAILURE = 9

        };

        void SetUnspecifiedReason()
        { _value = 0; }

        bool IsUnspecifiedReason() const
        { return _value == 0; }

        void SetVersionNotSupported()
        { _value = 1; }

        bool IsVersionNotSupported() const
        { return _value == 1; }

        void SetUserResourceLimitation()
        { _value = 2; }

        bool IsUserResourceLimitation() const
        { return _value == 2; }

        void SetResourceUnavailableLongTermProblem()
        { _value = 3; }

        bool IsResourceUnavailableLongTermProblem() const
        { return _value == 3; }

        void SetResourceUnavailableTemporaryProblem()
        { _value = 4; }

        bool IsResourceUnavailableTemporaryProblem() const
        { return _value == 4; }

        void SetRadioChannelRelease()
        { _value = 5; }

        bool IsRadioChannelRelease() const
        { return _value == 5; }

        void SetNetworkPathRelease()
        { _value = 6; }

        bool IsNetworkPathRelease() const
        { return _value == 6; }

        void SetCallRelease()
        { _value = 7; }

        bool IsCallRelease() const
        { return _value == 7; }

        void SetAssociatedProcedureFailed()
        { _value = 8; }

        bool IsAssociatedProcedureFailed() const
        { return _value == 8; }

        void SetRemoteOperationFailure()
        { _value = 9; }

        bool IsRemoteOperationFailure() const
        { return _value == 9; }

    };



    class AdditionalInformation : public its::AsnOctetString
    {
    public:

        AdditionalInformation() : its::AsnOctetString(false)
        {
            Initialize();
        }

        AdditionalInformation(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        AdditionalInformation(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        AdditionalInformation(const AdditionalInformation& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        AdditionalInformation(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        AdditionalInformation(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AdditionalInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AdditionalInformation(*this);
        }

        virtual std::string GetName() const
        { return "AdditionalInformation"; }

    };


////////// End Nested Class(es) //////////

    MAPAbortInformation() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    MAPAbortInformation(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    MAPAbortInformation(const MAPAbortInformation& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MAPAbortInformation(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAbortCauseStaticDescription();
    static its::AsnDescObject* GetAdditionalInformationStaticDescription();

public:

    virtual ~MAPAbortInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MAPAbortInformation(*this);
    }

    virtual std::string GetName() const
    { return "MAPAbortInformation"; }

    void SetAbortCause(AbortCause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAbortCauseStaticDescription());
        AddElement(0, element);
    }

    void SetAbortCause(const AbortCause& element)
    {
        its::AsnObject& asnObject = const_cast<AbortCause&>(element);
        asnObject.SetDescription(GetAbortCauseStaticDescription());
        AddElement(0, element);
    }

    const AbortCause& GetAbortCause() const
    {
        return static_cast<const AbortCause&> (ElementAt(0));
    }

    void SetAdditionalInformation(AdditionalInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalInformationStaticDescription());
        AddElement(1, element);
    }

    void SetAdditionalInformation(const AdditionalInformation& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalInformation&>(element);
        asnObject.SetDescription(GetAdditionalInformationStaticDescription());
        AddElement(1, element);
    }

    const AdditionalInformation& GetAdditionalInformation() const
    {
        return static_cast<const AdditionalInformation&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_MAP_ABORT_INFORMATION_H_)

