//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LOCATION_INFORMATION_EPS_H_)
#define _MAP_V13_LOCATION_INFORMATION_EPS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v13_e_utran_cgi.h>
#include <map_v13_ta_id.h>
#include <map_v13_extension_container.h>
#include <map_v13_geographical_information.h>
#include <map_v13_geodetic_information.h>
#include <map_v13_age_of_location_information.h>
#include <map_v13_diameter_identity.h>



namespace map_v13 {



class LocationInformationEPS : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class CurrentLocationRetrieved : public its::AsnNull
    {
    public:

        CurrentLocationRetrieved() : its::AsnNull(false)
        {
            Initialize();
        }

        CurrentLocationRetrieved(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CurrentLocationRetrieved(const CurrentLocationRetrieved& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CurrentLocationRetrieved(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CurrentLocationRetrieved()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CurrentLocationRetrieved(*this);
        }

        virtual std::string GetName() const
        { return "CurrentLocationRetrieved"; }

    };


        typedef map_v13::E_UTRAN_CGI E_UTRAN_CGI;


        typedef map_v13::TA_Id TA_Id;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::GeographicalInformation GeographicalInformation;


        typedef map_v13::GeodeticInformation GeodeticInformation;


        typedef map_v13::AgeOfLocationInformation AgeOfLocationInformation;


        typedef map_v13::DiameterIdentity DiameterIdentity;


////////// End Nested Class(es) //////////

    LocationInformationEPS() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    LocationInformationEPS(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    LocationInformationEPS(const LocationInformationEPS& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LocationInformationEPS(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetE_utranCellGlobalIdentityStaticDescription();
    static its::AsnDescObject* GetTrackingAreaIdentityStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetGeographicalInformationStaticDescription();
    static its::AsnDescObject* GetGeodeticInformationStaticDescription();
    static its::AsnDescObject* GetCurrentLocationRetrievedStaticDescription();
    static its::AsnDescObject* GetAgeOfLocationInformationStaticDescription();
    static its::AsnDescObject* GetMme_NameStaticDescription();

public:

    virtual ~LocationInformationEPS()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LocationInformationEPS(*this);
    }

    virtual std::string GetName() const
    { return "LocationInformationEPS"; }

    void SetE_utranCellGlobalIdentity(E_UTRAN_CGI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE_utranCellGlobalIdentityStaticDescription());
        AddElement(0, element);
    }

    void SetE_utranCellGlobalIdentity(const E_UTRAN_CGI& element)
    {
        its::AsnObject& asnObject = const_cast<E_UTRAN_CGI&>(element);
        asnObject.SetDescription(GetE_utranCellGlobalIdentityStaticDescription());
        AddElement(0, element);
    }

    bool OptionE_utranCellGlobalIdentity() const
    {
        return Contains(0);
    }

    const E_UTRAN_CGI& GetE_utranCellGlobalIdentity() const
    {
        ITS_REQUIRE(OptionE_utranCellGlobalIdentity());
        return static_cast<const E_UTRAN_CGI&> (ElementAt(0));
    }

    void SetTrackingAreaIdentity(TA_Id* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTrackingAreaIdentityStaticDescription());
        AddElement(1, element);
    }

    void SetTrackingAreaIdentity(const TA_Id& element)
    {
        its::AsnObject& asnObject = const_cast<TA_Id&>(element);
        asnObject.SetDescription(GetTrackingAreaIdentityStaticDescription());
        AddElement(1, element);
    }

    bool OptionTrackingAreaIdentity() const
    {
        return Contains(1);
    }

    const TA_Id& GetTrackingAreaIdentity() const
    {
        ITS_REQUIRE(OptionTrackingAreaIdentity());
        return static_cast<const TA_Id&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetGeographicalInformation(GeographicalInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(3, element);
    }

    void SetGeographicalInformation(const GeographicalInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GeographicalInformation&>(element);
        asnObject.SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(3, element);
    }

    bool OptionGeographicalInformation() const
    {
        return Contains(3);
    }

    const GeographicalInformation& GetGeographicalInformation() const
    {
        ITS_REQUIRE(OptionGeographicalInformation());
        return static_cast<const GeographicalInformation&> (ElementAt(3));
    }

    void SetGeodeticInformation(GeodeticInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeodeticInformationStaticDescription());
        AddElement(4, element);
    }

    void SetGeodeticInformation(const GeodeticInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GeodeticInformation&>(element);
        asnObject.SetDescription(GetGeodeticInformationStaticDescription());
        AddElement(4, element);
    }

    bool OptionGeodeticInformation() const
    {
        return Contains(4);
    }

    const GeodeticInformation& GetGeodeticInformation() const
    {
        ITS_REQUIRE(OptionGeodeticInformation());
        return static_cast<const GeodeticInformation&> (ElementAt(4));
    }

    void SetCurrentLocationRetrieved(CurrentLocationRetrieved* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCurrentLocationRetrievedStaticDescription());
        AddElement(5, element);
    }

    void SetCurrentLocationRetrieved(const CurrentLocationRetrieved& element)
    {
        its::AsnObject& asnObject = const_cast<CurrentLocationRetrieved&>(element);
        asnObject.SetDescription(GetCurrentLocationRetrievedStaticDescription());
        AddElement(5, element);
    }

    bool OptionCurrentLocationRetrieved() const
    {
        return Contains(5);
    }

    const CurrentLocationRetrieved& GetCurrentLocationRetrieved() const
    {
        ITS_REQUIRE(OptionCurrentLocationRetrieved());
        return static_cast<const CurrentLocationRetrieved&> (ElementAt(5));
    }

    void SetAgeOfLocationInformation(AgeOfLocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(6, element);
    }

    void SetAgeOfLocationInformation(const AgeOfLocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<AgeOfLocationInformation&>(element);
        asnObject.SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(6, element);
    }

    bool OptionAgeOfLocationInformation() const
    {
        return Contains(6);
    }

    const AgeOfLocationInformation& GetAgeOfLocationInformation() const
    {
        ITS_REQUIRE(OptionAgeOfLocationInformation());
        return static_cast<const AgeOfLocationInformation&> (ElementAt(6));
    }

    void SetMme_Name(DiameterIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMme_NameStaticDescription());
        AddElement(7, element);
    }

    void SetMme_Name(const DiameterIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<DiameterIdentity&>(element);
        asnObject.SetDescription(GetMme_NameStaticDescription());
        AddElement(7, element);
    }

    bool OptionMme_Name() const
    {
        return Contains(7);
    }

    const DiameterIdentity& GetMme_Name() const
    {
        ITS_REQUIRE(OptionMme_Name());
        return static_cast<const DiameterIdentity&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LOCATION_INFORMATION_EPS_H_)

