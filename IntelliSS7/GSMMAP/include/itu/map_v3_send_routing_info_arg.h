//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_SEND_ROUTING_INFO_ARG_H_)
#define _MAP_V3_SEND_ROUTING_INFO_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>

#include <map_v3_isdn_address_string.h>
#include <map_v3_cug_check_info.h>
#include <map_v3_number_of_forwarding.h>
#include <map_v3_interrogation_type.h>
#include <map_v3_or_phase.h>
#include <map_v3_call_reference_number.h>
#include <map_v3_forwarding_reason.h>
#include <map_v3_ext_basic_service_code.h>
#include <map_v3_external_signal_info.h>
#include <map_v3_camel_info.h>
#include <map_v3_suppression_of_announcement.h>
#include <map_v3_extension_container.h>



namespace map_v3 {



class SendRoutingInfoArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Or_Interrogation : public its::AsnNull
    {
    public:

        Or_Interrogation() : its::AsnNull(false)
        {
            Initialize();
        }

        Or_Interrogation(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Or_Interrogation(const Or_Interrogation& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Or_Interrogation(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Or_Interrogation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Or_Interrogation(*this);
        }

        virtual std::string GetName() const
        { return "Or_Interrogation"; }

    };


        typedef map_v3::ISDN_AddressString ISDN_AddressString;


        typedef map_v3::CUG_CheckInfo CUG_CheckInfo;


        typedef map_v3::NumberOfForwarding NumberOfForwarding;


        typedef map_v3::InterrogationType InterrogationType;


        typedef map_v3::OR_Phase OR_Phase;


        typedef map_v3::CallReferenceNumber CallReferenceNumber;


        typedef map_v3::ForwardingReason ForwardingReason;


        typedef map_v3::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef map_v3::ExternalSignalInfo ExternalSignalInfo;


        typedef map_v3::CamelInfo CamelInfo;


        typedef map_v3::SuppressionOfAnnouncement SuppressionOfAnnouncement;


        typedef map_v3::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    SendRoutingInfoArg() : its::AsnSequence(14, false)
    {
        Initialize();
    }

    SendRoutingInfoArg(its::Octets& octets) : its::AsnSequence(14, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInfoArg(const SendRoutingInfoArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInfoArg(its::AsnDescObject* description) : its::AsnSequence(14, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetCug_CheckInfoStaticDescription();
    static its::AsnDescObject* GetNumberOfForwardingStaticDescription();
    static its::AsnDescObject* GetInterrogationTypeStaticDescription();
    static its::AsnDescObject* GetOr_InterrogationStaticDescription();
    static its::AsnDescObject* GetOr_CapabilityStaticDescription();
    static its::AsnDescObject* GetGmsc_AddressStaticDescription();
    static its::AsnDescObject* GetCallReferenceNumberStaticDescription();
    static its::AsnDescObject* GetForwardingReasonStaticDescription();
    static its::AsnDescObject* GetBasicServiceGroupStaticDescription();
    static its::AsnDescObject* GetNetworkSignalInfoStaticDescription();
    static its::AsnDescObject* GetCamelInfoStaticDescription();
    static its::AsnDescObject* GetSuppressionOfAnnouncementStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~SendRoutingInfoArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInfoArg(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInfoArg"; }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(0, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetCug_CheckInfo(CUG_CheckInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(1, element);
    }

    void SetCug_CheckInfo(const CUG_CheckInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_CheckInfo&>(element);
        asnObject.SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionCug_CheckInfo() const
    {
        return Contains(1);
    }

    const CUG_CheckInfo& GetCug_CheckInfo() const
    {
        ITS_REQUIRE(OptionCug_CheckInfo());
        return static_cast<const CUG_CheckInfo&> (ElementAt(1));
    }

    void SetNumberOfForwarding(NumberOfForwarding* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(2, element);
    }

    void SetNumberOfForwarding(const NumberOfForwarding& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfForwarding&>(element);
        asnObject.SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(2, element);
    }

    bool OptionNumberOfForwarding() const
    {
        return Contains(2);
    }

    const NumberOfForwarding& GetNumberOfForwarding() const
    {
        ITS_REQUIRE(OptionNumberOfForwarding());
        return static_cast<const NumberOfForwarding&> (ElementAt(2));
    }

    void SetInterrogationType(InterrogationType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInterrogationTypeStaticDescription());
        AddElement(3, element);
    }

    void SetInterrogationType(const InterrogationType& element)
    {
        its::AsnObject& asnObject = const_cast<InterrogationType&>(element);
        asnObject.SetDescription(GetInterrogationTypeStaticDescription());
        AddElement(3, element);
    }

    const InterrogationType& GetInterrogationType() const
    {
        return static_cast<const InterrogationType&> (ElementAt(3));
    }

    void SetOr_Interrogation(Or_Interrogation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOr_InterrogationStaticDescription());
        AddElement(4, element);
    }

    void SetOr_Interrogation(const Or_Interrogation& element)
    {
        its::AsnObject& asnObject = const_cast<Or_Interrogation&>(element);
        asnObject.SetDescription(GetOr_InterrogationStaticDescription());
        AddElement(4, element);
    }

    bool OptionOr_Interrogation() const
    {
        return Contains(4);
    }

    const Or_Interrogation& GetOr_Interrogation() const
    {
        ITS_REQUIRE(OptionOr_Interrogation());
        return static_cast<const Or_Interrogation&> (ElementAt(4));
    }

    void SetOr_Capability(OR_Phase* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOr_CapabilityStaticDescription());
        AddElement(5, element);
    }

    void SetOr_Capability(const OR_Phase& element)
    {
        its::AsnObject& asnObject = const_cast<OR_Phase&>(element);
        asnObject.SetDescription(GetOr_CapabilityStaticDescription());
        AddElement(5, element);
    }

    bool OptionOr_Capability() const
    {
        return Contains(5);
    }

    const OR_Phase& GetOr_Capability() const
    {
        ITS_REQUIRE(OptionOr_Capability());
        return static_cast<const OR_Phase&> (ElementAt(5));
    }

    void SetGmsc_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGmsc_AddressStaticDescription());
        AddElement(6, element);
    }

    void SetGmsc_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetGmsc_AddressStaticDescription());
        AddElement(6, element);
    }

    const ISDN_AddressString& GetGmsc_Address() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(6));
    }

    void SetCallReferenceNumber(CallReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(7, element);
    }

    void SetCallReferenceNumber(const CallReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallReferenceNumber&>(element);
        asnObject.SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(7, element);
    }

    bool OptionCallReferenceNumber() const
    {
        return Contains(7);
    }

    const CallReferenceNumber& GetCallReferenceNumber() const
    {
        ITS_REQUIRE(OptionCallReferenceNumber());
        return static_cast<const CallReferenceNumber&> (ElementAt(7));
    }

    void SetForwardingReason(ForwardingReason* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardingReasonStaticDescription());
        AddElement(8, element);
    }

    void SetForwardingReason(const ForwardingReason& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardingReason&>(element);
        asnObject.SetDescription(GetForwardingReasonStaticDescription());
        AddElement(8, element);
    }

    bool OptionForwardingReason() const
    {
        return Contains(8);
    }

    const ForwardingReason& GetForwardingReason() const
    {
        ITS_REQUIRE(OptionForwardingReason());
        return static_cast<const ForwardingReason&> (ElementAt(8));
    }

    void SetBasicServiceGroup(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(9, element);
    }

    void SetBasicServiceGroup(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(9, element);
    }

    bool OptionBasicServiceGroup() const
    {
        return Contains(9);
    }

    const Ext_BasicServiceCode& GetBasicServiceGroup() const
    {
        ITS_REQUIRE(OptionBasicServiceGroup());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(9));
    }

    void SetNetworkSignalInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(10, element);
    }

    void SetNetworkSignalInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(10, element);
    }

    bool OptionNetworkSignalInfo() const
    {
        return Contains(10);
    }

    const ExternalSignalInfo& GetNetworkSignalInfo() const
    {
        ITS_REQUIRE(OptionNetworkSignalInfo());
        return static_cast<const ExternalSignalInfo&> (ElementAt(10));
    }

    void SetCamelInfo(CamelInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCamelInfoStaticDescription());
        AddElement(11, element);
    }

    void SetCamelInfo(const CamelInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CamelInfo&>(element);
        asnObject.SetDescription(GetCamelInfoStaticDescription());
        AddElement(11, element);
    }

    bool OptionCamelInfo() const
    {
        return Contains(11);
    }

    const CamelInfo& GetCamelInfo() const
    {
        ITS_REQUIRE(OptionCamelInfo());
        return static_cast<const CamelInfo&> (ElementAt(11));
    }

    void SetSuppressionOfAnnouncement(SuppressionOfAnnouncement* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSuppressionOfAnnouncementStaticDescription());
        AddElement(12, element);
    }

    void SetSuppressionOfAnnouncement(const SuppressionOfAnnouncement& element)
    {
        its::AsnObject& asnObject = const_cast<SuppressionOfAnnouncement&>(element);
        asnObject.SetDescription(GetSuppressionOfAnnouncementStaticDescription());
        AddElement(12, element);
    }

    bool OptionSuppressionOfAnnouncement() const
    {
        return Contains(12);
    }

    const SuppressionOfAnnouncement& GetSuppressionOfAnnouncement() const
    {
        ITS_REQUIRE(OptionSuppressionOfAnnouncement());
        return static_cast<const SuppressionOfAnnouncement&> (ElementAt(12));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(13, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(13, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(13);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(13));
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_SEND_ROUTING_INFO_ARG_H_)

