//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_SM_DELIVERY_FAILURE_CAUSE_WITH_DIAGNOSTIC_H_)
#define _MAP_V2_SM_DELIVERY_FAILURE_CAUSE_WITH_DIAGNOSTIC_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <map_v2_sm_enumerated_delivery_failure_cause.h>
#include <map_v2_signal_info.h>



namespace map_v2 {



class SM_DeliveryFailureCauseWithDiagnostic : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::SM_EnumeratedDeliveryFailureCause SM_EnumeratedDeliveryFailureCause;


        typedef map_v2::SignalInfo SignalInfo;


////////// End Nested Class(es) //////////

    SM_DeliveryFailureCauseWithDiagnostic() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    SM_DeliveryFailureCauseWithDiagnostic(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    SM_DeliveryFailureCauseWithDiagnostic(const SM_DeliveryFailureCauseWithDiagnostic& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SM_DeliveryFailureCauseWithDiagnostic(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSm_EnumeratedDeliveryFailureCauseStaticDescription();
    static its::AsnDescObject* GetDiagnosticInfoStaticDescription();

public:

    virtual ~SM_DeliveryFailureCauseWithDiagnostic()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SM_DeliveryFailureCauseWithDiagnostic(*this);
    }

    virtual std::string GetName() const
    { return "SM_DeliveryFailureCauseWithDiagnostic"; }

    void SetSm_EnumeratedDeliveryFailureCause(SM_EnumeratedDeliveryFailureCause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_EnumeratedDeliveryFailureCauseStaticDescription());
        AddElement(0, element);
    }

    void SetSm_EnumeratedDeliveryFailureCause(const SM_EnumeratedDeliveryFailureCause& element)
    {
        its::AsnObject& asnObject = const_cast<SM_EnumeratedDeliveryFailureCause&>(element);
        asnObject.SetDescription(GetSm_EnumeratedDeliveryFailureCauseStaticDescription());
        AddElement(0, element);
    }

    const SM_EnumeratedDeliveryFailureCause& GetSm_EnumeratedDeliveryFailureCause() const
    {
        return static_cast<const SM_EnumeratedDeliveryFailureCause&> (ElementAt(0));
    }

    void SetDiagnosticInfo(SignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDiagnosticInfoStaticDescription());
        AddElement(1, element);
    }

    void SetDiagnosticInfo(const SignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SignalInfo&>(element);
        asnObject.SetDescription(GetDiagnosticInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionDiagnosticInfo() const
    {
        return Contains(1);
    }

    const SignalInfo& GetDiagnosticInfo() const
    {
        ITS_REQUIRE(OptionDiagnosticInfo());
        return static_cast<const SignalInfo&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_SM_DELIVERY_FAILURE_CAUSE_WITH_DIAGNOSTIC_H_)

