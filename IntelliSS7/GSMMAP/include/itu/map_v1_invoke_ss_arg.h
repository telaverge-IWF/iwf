//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_INVOKE_SS_ARG_H_)
#define _MAP_V1_INVOKE_SS_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnInteger.h>

#include <map_v1_ss_code.h>
#include <map_v1_basic_service_code.h>
#include <map_v1_user_to_user_service_indicator.h>
#include <map_v1_cug_index.h>
#include <map_v1_number_of_conferees.h>



namespace map_v1 {



class InvokeSS_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::SS_Code SS_Code;


        typedef map_v1::BasicServiceCode BasicServiceCode;


        typedef map_v1::UserToUserServiceIndicator UserToUserServiceIndicator;


        typedef map_v1::CUG_Index CUG_Index;


        typedef map_v1::NumberOfConferees NumberOfConferees;


////////// End Nested Class(es) //////////

    InvokeSS_Arg() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    InvokeSS_Arg(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    InvokeSS_Arg(const InvokeSS_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InvokeSS_Arg(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetBasicServiceStaticDescription();
    static its::AsnDescObject* GetUserToUserServiceIndicatorStaticDescription();
    static its::AsnDescObject* GetCug_IndexStaticDescription();
    static its::AsnDescObject* GetNumberOfConfereesStaticDescription();

public:

    virtual ~InvokeSS_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InvokeSS_Arg(*this);
    }

    virtual std::string GetName() const
    { return "InvokeSS_Arg"; }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    const SS_Code& GetSs_Code() const
    {
        return static_cast<const SS_Code&> (ElementAt(0));
    }

    void SetBasicService(BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    void SetBasicService(const BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    bool OptionBasicService() const
    {
        return Contains(1);
    }

    const BasicServiceCode& GetBasicService() const
    {
        ITS_REQUIRE(OptionBasicService());
        return static_cast<const BasicServiceCode&> (ElementAt(1));
    }

    void SetUserToUserServiceIndicator(UserToUserServiceIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUserToUserServiceIndicatorStaticDescription());
        AddElement(2, element);
    }

    void SetUserToUserServiceIndicator(const UserToUserServiceIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<UserToUserServiceIndicator&>(element);
        asnObject.SetDescription(GetUserToUserServiceIndicatorStaticDescription());
        AddElement(2, element);
    }

    bool OptionUserToUserServiceIndicator() const
    {
        return Contains(2);
    }

    const UserToUserServiceIndicator& GetUserToUserServiceIndicator() const
    {
        ITS_REQUIRE(OptionUserToUserServiceIndicator());
        return static_cast<const UserToUserServiceIndicator&> (ElementAt(2));
    }

    void SetCug_Index(CUG_Index* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_IndexStaticDescription());
        AddElement(3, element);
    }

    void SetCug_Index(const CUG_Index& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Index&>(element);
        asnObject.SetDescription(GetCug_IndexStaticDescription());
        AddElement(3, element);
    }

    bool OptionCug_Index() const
    {
        return Contains(3);
    }

    const CUG_Index& GetCug_Index() const
    {
        ITS_REQUIRE(OptionCug_Index());
        return static_cast<const CUG_Index&> (ElementAt(3));
    }

    void SetNumberOfConferees(NumberOfConferees* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfConfereesStaticDescription());
        AddElement(4, element);
    }

    void SetNumberOfConferees(const NumberOfConferees& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfConferees&>(element);
        asnObject.SetDescription(GetNumberOfConfereesStaticDescription());
        AddElement(4, element);
    }

    bool OptionNumberOfConferees() const
    {
        return Contains(4);
    }

    const NumberOfConferees& GetNumberOfConferees() const
    {
        ITS_REQUIRE(OptionNumberOfConferees());
        return static_cast<const NumberOfConferees&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_INVOKE_SS_ARG_H_)

