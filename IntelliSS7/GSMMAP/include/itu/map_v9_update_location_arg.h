//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_UPDATE_LOCATION_ARG_H_)
#define _MAP_V9_UPDATE_LOCATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_imsi.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_lmsi.h>
#include <map_v9_extension_container.h>
#include <map_v9_vlr_capability.h>
#include <map_v9_gsn_address.h>
#include <map_v9_add_info.h>



namespace map_v9 {



class UpdateLocationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class InformPreviousNetworkEntity : public its::AsnNull
    {
    public:

        InformPreviousNetworkEntity() : its::AsnNull(false)
        {
            Initialize();
        }

        InformPreviousNetworkEntity(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        InformPreviousNetworkEntity(const InformPreviousNetworkEntity& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        InformPreviousNetworkEntity(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InformPreviousNetworkEntity()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InformPreviousNetworkEntity(*this);
        }

        virtual std::string GetName() const
        { return "InformPreviousNetworkEntity"; }

    };



    class Cs_LCS_NotSupportedByUE : public its::AsnNull
    {
    public:

        Cs_LCS_NotSupportedByUE() : its::AsnNull(false)
        {
            Initialize();
        }

        Cs_LCS_NotSupportedByUE(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Cs_LCS_NotSupportedByUE(const Cs_LCS_NotSupportedByUE& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Cs_LCS_NotSupportedByUE(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Cs_LCS_NotSupportedByUE()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Cs_LCS_NotSupportedByUE(*this);
        }

        virtual std::string GetName() const
        { return "Cs_LCS_NotSupportedByUE"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::LMSI LMSI;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::VLR_Capability VLR_Capability;


        typedef map_v9::GSN_Address GSN_Address;


        typedef map_v9::ADD_Info ADD_Info;


////////// End Nested Class(es) //////////

    UpdateLocationArg() : its::AsnSequence(10, false)
    {
        Initialize();
    }

    UpdateLocationArg(its::Octets& octets) : its::AsnSequence(10, false)
    {
        Initialize();
        Decode(octets);
    }

    UpdateLocationArg(const UpdateLocationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UpdateLocationArg(its::AsnDescObject* description) : its::AsnSequence(10, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetMsc_NumberStaticDescription();
    static its::AsnDescObject* GetVlr_NumberStaticDescription();
    static its::AsnDescObject* GetLmsiStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetVlr_CapabilityStaticDescription();
    static its::AsnDescObject* GetInformPreviousNetworkEntityStaticDescription();
    static its::AsnDescObject* GetCs_LCS_NotSupportedByUEStaticDescription();
    static its::AsnDescObject* GetV_gmlc_AddressStaticDescription();
    static its::AsnDescObject* GetAdd_infoStaticDescription();

public:

    virtual ~UpdateLocationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UpdateLocationArg(*this);
    }

    virtual std::string GetName() const
    { return "UpdateLocationArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetMsc_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetMsc_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsc_NumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetMsc_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetVlr_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVlr_NumberStaticDescription());
        AddElement(2, element);
    }

    void SetVlr_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetVlr_NumberStaticDescription());
        AddElement(2, element);
    }

    const ISDN_AddressString& GetVlr_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(2));
    }

    void SetLmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLmsiStaticDescription());
        AddElement(3, element);
    }

    void SetLmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetLmsiStaticDescription());
        AddElement(3, element);
    }

    bool OptionLmsi() const
    {
        return Contains(3);
    }

    const LMSI& GetLmsi() const
    {
        ITS_REQUIRE(OptionLmsi());
        return static_cast<const LMSI&> (ElementAt(3));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(4);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(4));
    }

    void SetVlr_Capability(VLR_Capability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVlr_CapabilityStaticDescription());
        AddElement(5, element);
    }

    void SetVlr_Capability(const VLR_Capability& element)
    {
        its::AsnObject& asnObject = const_cast<VLR_Capability&>(element);
        asnObject.SetDescription(GetVlr_CapabilityStaticDescription());
        AddElement(5, element);
    }

    bool OptionVlr_Capability() const
    {
        return Contains(5);
    }

    const VLR_Capability& GetVlr_Capability() const
    {
        ITS_REQUIRE(OptionVlr_Capability());
        return static_cast<const VLR_Capability&> (ElementAt(5));
    }

    void SetInformPreviousNetworkEntity(InformPreviousNetworkEntity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInformPreviousNetworkEntityStaticDescription());
        AddElement(6, element);
    }

    void SetInformPreviousNetworkEntity(const InformPreviousNetworkEntity& element)
    {
        its::AsnObject& asnObject = const_cast<InformPreviousNetworkEntity&>(element);
        asnObject.SetDescription(GetInformPreviousNetworkEntityStaticDescription());
        AddElement(6, element);
    }

    bool OptionInformPreviousNetworkEntity() const
    {
        return Contains(6);
    }

    const InformPreviousNetworkEntity& GetInformPreviousNetworkEntity() const
    {
        ITS_REQUIRE(OptionInformPreviousNetworkEntity());
        return static_cast<const InformPreviousNetworkEntity&> (ElementAt(6));
    }

    void SetCs_LCS_NotSupportedByUE(Cs_LCS_NotSupportedByUE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCs_LCS_NotSupportedByUEStaticDescription());
        AddElement(7, element);
    }

    void SetCs_LCS_NotSupportedByUE(const Cs_LCS_NotSupportedByUE& element)
    {
        its::AsnObject& asnObject = const_cast<Cs_LCS_NotSupportedByUE&>(element);
        asnObject.SetDescription(GetCs_LCS_NotSupportedByUEStaticDescription());
        AddElement(7, element);
    }

    bool OptionCs_LCS_NotSupportedByUE() const
    {
        return Contains(7);
    }

    const Cs_LCS_NotSupportedByUE& GetCs_LCS_NotSupportedByUE() const
    {
        ITS_REQUIRE(OptionCs_LCS_NotSupportedByUE());
        return static_cast<const Cs_LCS_NotSupportedByUE&> (ElementAt(7));
    }

    void SetV_gmlc_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetV_gmlc_AddressStaticDescription());
        AddElement(8, element);
    }

    void SetV_gmlc_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetV_gmlc_AddressStaticDescription());
        AddElement(8, element);
    }

    bool OptionV_gmlc_Address() const
    {
        return Contains(8);
    }

    const GSN_Address& GetV_gmlc_Address() const
    {
        ITS_REQUIRE(OptionV_gmlc_Address());
        return static_cast<const GSN_Address&> (ElementAt(8));
    }

    void SetAdd_info(ADD_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdd_infoStaticDescription());
        AddElement(9, element);
    }

    void SetAdd_info(const ADD_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ADD_Info&>(element);
        asnObject.SetDescription(GetAdd_infoStaticDescription());
        AddElement(9, element);
    }

    const ADD_Info& GetAdd_info() const
    {
        return static_cast<const ADD_Info&> (ElementAt(9));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_UPDATE_LOCATION_ARG_H_)

