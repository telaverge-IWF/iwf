//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_MAP_OPEN_INFO_H_)
#define _MAP_V2_MAP_OPEN_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v2_address_string.h>



namespace map_v2 {



class MAP_OpenInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::AddressString AddressString;


////////// End Nested Class(es) //////////

    MAP_OpenInfo() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    MAP_OpenInfo(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    MAP_OpenInfo(const MAP_OpenInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MAP_OpenInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDestinationReferenceStaticDescription();
    static its::AsnDescObject* GetOriginationReferenceStaticDescription();

public:

    virtual ~MAP_OpenInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MAP_OpenInfo(*this);
    }

    virtual std::string GetName() const
    { return "MAP_OpenInfo"; }

    void SetDestinationReference(AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDestinationReferenceStaticDescription());
        AddElement(0, element);
    }

    void SetDestinationReference(const AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(element);
        asnObject.SetDescription(GetDestinationReferenceStaticDescription());
        AddElement(0, element);
    }

    bool OptionDestinationReference() const
    {
        return Contains(0);
    }

    const AddressString& GetDestinationReference() const
    {
        ITS_REQUIRE(OptionDestinationReference());
        return static_cast<const AddressString&> (ElementAt(0));
    }

    void SetOriginationReference(AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOriginationReferenceStaticDescription());
        AddElement(1, element);
    }

    void SetOriginationReference(const AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(element);
        asnObject.SetDescription(GetOriginationReferenceStaticDescription());
        AddElement(1, element);
    }

    bool OptionOriginationReference() const
    {
        return Contains(1);
    }

    const AddressString& GetOriginationReference() const
    {
        ITS_REQUIRE(OptionOriginationReference());
        return static_cast<const AddressString&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_MAP_OPEN_INFO_H_)

