//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_LCS_INFORMATION_H_)
#define _MAP_V9_LCS_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>

#include <map_v9_gmlc_list.h>
#include <map_v9_lcs_privacy_exception_list.h>
#include <map_v9_molr_list.h>



namespace map_v9 {



class LCSInformation : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::GMLC_List GMLC_List;


        typedef map_v9::LCS_PrivacyExceptionList LCS_PrivacyExceptionList;


        typedef map_v9::MOLR_List MOLR_List;


////////// End Nested Class(es) //////////

    LCSInformation() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    LCSInformation(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    LCSInformation(const LCSInformation& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LCSInformation(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGmlc_ListStaticDescription();
    static its::AsnDescObject* GetLcs_PrivacyExceptionListStaticDescription();
    static its::AsnDescObject* GetMolr_ListStaticDescription();
    static its::AsnDescObject* GetAdd_lcs_PrivacyExceptionListStaticDescription();

public:

    virtual ~LCSInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCSInformation(*this);
    }

    virtual std::string GetName() const
    { return "LCSInformation"; }

    void SetGmlc_List(GMLC_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGmlc_ListStaticDescription());
        AddElement(0, element);
    }

    void SetGmlc_List(const GMLC_List& element)
    {
        its::AsnObject& asnObject = const_cast<GMLC_List&>(element);
        asnObject.SetDescription(GetGmlc_ListStaticDescription());
        AddElement(0, element);
    }

    bool OptionGmlc_List() const
    {
        return Contains(0);
    }

    const GMLC_List& GetGmlc_List() const
    {
        ITS_REQUIRE(OptionGmlc_List());
        return static_cast<const GMLC_List&> (ElementAt(0));
    }

    void SetLcs_PrivacyExceptionList(LCS_PrivacyExceptionList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_PrivacyExceptionListStaticDescription());
        AddElement(1, element);
    }

    void SetLcs_PrivacyExceptionList(const LCS_PrivacyExceptionList& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_PrivacyExceptionList&>(element);
        asnObject.SetDescription(GetLcs_PrivacyExceptionListStaticDescription());
        AddElement(1, element);
    }

    bool OptionLcs_PrivacyExceptionList() const
    {
        return Contains(1);
    }

    const LCS_PrivacyExceptionList& GetLcs_PrivacyExceptionList() const
    {
        ITS_REQUIRE(OptionLcs_PrivacyExceptionList());
        return static_cast<const LCS_PrivacyExceptionList&> (ElementAt(1));
    }

    void SetMolr_List(MOLR_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMolr_ListStaticDescription());
        AddElement(2, element);
    }

    void SetMolr_List(const MOLR_List& element)
    {
        its::AsnObject& asnObject = const_cast<MOLR_List&>(element);
        asnObject.SetDescription(GetMolr_ListStaticDescription());
        AddElement(2, element);
    }

    bool OptionMolr_List() const
    {
        return Contains(2);
    }

    const MOLR_List& GetMolr_List() const
    {
        ITS_REQUIRE(OptionMolr_List());
        return static_cast<const MOLR_List&> (ElementAt(2));
    }

    void SetAdd_lcs_PrivacyExceptionList(LCS_PrivacyExceptionList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdd_lcs_PrivacyExceptionListStaticDescription());
        AddElement(3, element);
    }

    void SetAdd_lcs_PrivacyExceptionList(const LCS_PrivacyExceptionList& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_PrivacyExceptionList&>(element);
        asnObject.SetDescription(GetAdd_lcs_PrivacyExceptionListStaticDescription());
        AddElement(3, element);
    }

    bool OptionAdd_lcs_PrivacyExceptionList() const
    {
        return Contains(3);
    }

    const LCS_PrivacyExceptionList& GetAdd_lcs_PrivacyExceptionList() const
    {
        ITS_REQUIRE(OptionAdd_lcs_PrivacyExceptionList());
        return static_cast<const LCS_PrivacyExceptionList&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_LCS_INFORMATION_H_)

