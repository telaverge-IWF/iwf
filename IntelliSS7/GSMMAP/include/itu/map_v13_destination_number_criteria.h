//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_DESTINATION_NUMBER_CRITERIA_H_)
#define _MAP_V13_DESTINATION_NUMBER_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v13_match_type.h>
#include <map_v13_destination_number_list.h>
#include <map_v13_destination_number_length_list.h>



namespace map_v13 {



class DestinationNumberCriteria : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::MatchType MatchType;


        typedef map_v13::DestinationNumberList DestinationNumberList;


        typedef map_v13::DestinationNumberLengthList DestinationNumberLengthList;


////////// End Nested Class(es) //////////

    DestinationNumberCriteria() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    DestinationNumberCriteria(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    DestinationNumberCriteria(const DestinationNumberCriteria& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    DestinationNumberCriteria(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMatchTypeStaticDescription();
    static its::AsnDescObject* GetDestinationNumberListStaticDescription();
    static its::AsnDescObject* GetDestinationNumberLengthListStaticDescription();

public:

    virtual ~DestinationNumberCriteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new DestinationNumberCriteria(*this);
    }

    virtual std::string GetName() const
    { return "DestinationNumberCriteria"; }

    void SetMatchType(MatchType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMatchTypeStaticDescription());
        AddElement(0, element);
    }

    void SetMatchType(const MatchType& element)
    {
        its::AsnObject& asnObject = const_cast<MatchType&>(element);
        asnObject.SetDescription(GetMatchTypeStaticDescription());
        AddElement(0, element);
    }

    const MatchType& GetMatchType() const
    {
        return static_cast<const MatchType&> (ElementAt(0));
    }

    void SetDestinationNumberList(DestinationNumberList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDestinationNumberListStaticDescription());
        AddElement(1, element);
    }

    void SetDestinationNumberList(const DestinationNumberList& element)
    {
        its::AsnObject& asnObject = const_cast<DestinationNumberList&>(element);
        asnObject.SetDescription(GetDestinationNumberListStaticDescription());
        AddElement(1, element);
    }

    bool OptionDestinationNumberList() const
    {
        return Contains(1);
    }

    const DestinationNumberList& GetDestinationNumberList() const
    {
        ITS_REQUIRE(OptionDestinationNumberList());
        return static_cast<const DestinationNumberList&> (ElementAt(1));
    }

    void SetDestinationNumberLengthList(DestinationNumberLengthList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDestinationNumberLengthListStaticDescription());
        AddElement(2, element);
    }

    void SetDestinationNumberLengthList(const DestinationNumberLengthList& element)
    {
        its::AsnObject& asnObject = const_cast<DestinationNumberLengthList&>(element);
        asnObject.SetDescription(GetDestinationNumberLengthListStaticDescription());
        AddElement(2, element);
    }

    bool OptionDestinationNumberLengthList() const
    {
        return Contains(2);
    }

    const DestinationNumberLengthList& GetDestinationNumberLengthList() const
    {
        ITS_REQUIRE(OptionDestinationNumberLengthList());
        return static_cast<const DestinationNumberLengthList&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_DESTINATION_NUMBER_CRITERIA_H_)

