//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_COMPLETE_CALL_ARG_H_)
#define _MAP_V1_COMPLETE_CALL_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>
#include <AsnSequenceOf.h>

#include <map_v1_isdn_address_string.h>
#include <map_v1_category.h>
#include <map_v1_cug_index.h>
#include <map_v1_external_signal_info.h>
#include <map_v1_no_reply_condition_time.h>
#include <map_v1_ss_data_list.h>



namespace map_v1 {



class CompleteCallArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::Category Category;


        typedef map_v1::CUG_Index CUG_Index;


        typedef map_v1::ExternalSignalInfo ExternalSignalInfo;


        typedef map_v1::NoReplyConditionTime NoReplyConditionTime;


        typedef map_v1::SS_DataList SS_DataList;


////////// End Nested Class(es) //////////

    CompleteCallArg() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    CompleteCallArg(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    CompleteCallArg(const CompleteCallArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CompleteCallArg(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsIsdnStaticDescription();
    static its::AsnDescObject* GetCategoryStaticDescription();
    static its::AsnDescObject* GetCug_IndexStaticDescription();
    static its::AsnDescObject* GetGSM_BearerCapabilityStaticDescription();
    static its::AsnDescObject* GetNoReplyConditionTimeStaticDescription();
    static its::AsnDescObject* GetSs_DataListStaticDescription();

public:

    virtual ~CompleteCallArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CompleteCallArg(*this);
    }

    virtual std::string GetName() const
    { return "CompleteCallArg"; }

    void SetMsIsdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    void SetMsIsdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetMsIsdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetCategory(Category* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCategoryStaticDescription());
        AddElement(1, element);
    }

    void SetCategory(const Category& element)
    {
        its::AsnObject& asnObject = const_cast<Category&>(element);
        asnObject.SetDescription(GetCategoryStaticDescription());
        AddElement(1, element);
    }

    bool OptionCategory() const
    {
        return Contains(1);
    }

    const Category& GetCategory() const
    {
        ITS_REQUIRE(OptionCategory());
        return static_cast<const Category&> (ElementAt(1));
    }

    void SetCug_Index(CUG_Index* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_IndexStaticDescription());
        AddElement(2, element);
    }

    void SetCug_Index(const CUG_Index& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Index&>(element);
        asnObject.SetDescription(GetCug_IndexStaticDescription());
        AddElement(2, element);
    }

    bool OptionCug_Index() const
    {
        return Contains(2);
    }

    const CUG_Index& GetCug_Index() const
    {
        ITS_REQUIRE(OptionCug_Index());
        return static_cast<const CUG_Index&> (ElementAt(2));
    }

    void SetGSM_BearerCapability(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGSM_BearerCapabilityStaticDescription());
        AddElement(3, element);
    }

    void SetGSM_BearerCapability(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetGSM_BearerCapabilityStaticDescription());
        AddElement(3, element);
    }

    bool OptionGSM_BearerCapability() const
    {
        return Contains(3);
    }

    const ExternalSignalInfo& GetGSM_BearerCapability() const
    {
        ITS_REQUIRE(OptionGSM_BearerCapability());
        return static_cast<const ExternalSignalInfo&> (ElementAt(3));
    }

    void SetNoReplyConditionTime(NoReplyConditionTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNoReplyConditionTimeStaticDescription());
        AddElement(4, element);
    }

    void SetNoReplyConditionTime(const NoReplyConditionTime& element)
    {
        its::AsnObject& asnObject = const_cast<NoReplyConditionTime&>(element);
        asnObject.SetDescription(GetNoReplyConditionTimeStaticDescription());
        AddElement(4, element);
    }

    bool OptionNoReplyConditionTime() const
    {
        return Contains(4);
    }

    const NoReplyConditionTime& GetNoReplyConditionTime() const
    {
        ITS_REQUIRE(OptionNoReplyConditionTime());
        return static_cast<const NoReplyConditionTime&> (ElementAt(4));
    }

    void SetSs_DataList(SS_DataList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_DataListStaticDescription());
        AddElement(5, element);
    }

    void SetSs_DataList(const SS_DataList& element)
    {
        its::AsnObject& asnObject = const_cast<SS_DataList&>(element);
        asnObject.SetDescription(GetSs_DataListStaticDescription());
        AddElement(5, element);
    }

    bool OptionSs_DataList() const
    {
        return Contains(5);
    }

    const SS_DataList& GetSs_DataList() const
    {
        ITS_REQUIRE(OptionSs_DataList());
        return static_cast<const SS_DataList&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_COMPLETE_CALL_ARG_H_)

