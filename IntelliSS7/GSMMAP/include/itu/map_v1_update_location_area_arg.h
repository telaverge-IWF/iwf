//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_UPDATE_LOCATION_AREA_ARG_H_)
#define _MAP_V1_UPDATE_LOCATION_AREA_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v1_subscriber_id.h>
#include <map_v1_loc_area_id.h>
#include <map_v1_cksn.h>



namespace map_v1 {



class UpdateLocationAreaArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class PreviousLocAreaId : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class Null : public its::AsnNull
        {
        public:

            Null() : its::AsnNull(false)
            {
                Initialize();
            }

            Null(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            Null(const Null& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            Null(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~Null()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Null(*this);
            }

            virtual std::string GetName() const
            { return "Null"; }

        };


            typedef map_v1::LocAreaId LocAreaId;


    ////////// End Nested Class(es) //////////

        PreviousLocAreaId() : its::AsnChoice(false)
        {
            Initialize();
        }

        PreviousLocAreaId(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        PreviousLocAreaId(const PreviousLocAreaId& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        PreviousLocAreaId(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        PreviousLocAreaId(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetLocAreaIdStaticDescription();
        static its::AsnDescObject* GetNullStaticDescription();

    public:

        virtual ~PreviousLocAreaId()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PreviousLocAreaId(*this);
        }

        virtual std::string GetName() const
        { return "PreviousLocAreaId"; }

        void SetChoiceLocAreaId(LocAreaId* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetLocAreaIdStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceLocAreaId(const LocAreaId& choice)
        {
            its::AsnObject& asnObject = const_cast<LocAreaId&>(choice);
            asnObject.SetDescription(GetLocAreaIdStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceLocAreaId() const
        {
            return Contains(GetLocAreaIdStaticDescription()->TagIdentity());
        }

        const LocAreaId& GetChoiceLocAreaId() const
        {
            ITS_REQUIRE(ChoiceLocAreaId());
            return static_cast<const LocAreaId&> (GetChoice());
        }

        void SetChoiceNull(Null* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetNullStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceNull(const Null& choice)
        {
            its::AsnObject& asnObject = const_cast<Null&>(choice);
            asnObject.SetDescription(GetNullStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceNull() const
        {
            return Contains(GetNullStaticDescription()->TagIdentity());
        }

        const Null& GetChoiceNull() const
        {
            ITS_REQUIRE(ChoiceNull());
            return static_cast<const Null&> (GetChoice());
        }

    };


        typedef map_v1::SubscriberId SubscriberId;


        typedef map_v1::LocAreaId LocAreaId;


        typedef map_v1::CKSN CKSN;


////////// End Nested Class(es) //////////

    UpdateLocationAreaArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    UpdateLocationAreaArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    UpdateLocationAreaArg(const UpdateLocationAreaArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UpdateLocationAreaArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSubscriberIdStaticDescription();
    static its::AsnDescObject* GetPreviousLocAreaIdStaticDescription();
    static its::AsnDescObject* GetTargetLocAreaIdStaticDescription();
    static its::AsnDescObject* GetCksnStaticDescription();

public:

    virtual ~UpdateLocationAreaArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UpdateLocationAreaArg(*this);
    }

    virtual std::string GetName() const
    { return "UpdateLocationAreaArg"; }

    void SetSubscriberId(SubscriberId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberIdStaticDescription());
        AddElement(0, element);
    }

    void SetSubscriberId(const SubscriberId& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberId&>(element);
        asnObject.SetDescription(GetSubscriberIdStaticDescription());
        AddElement(0, element);
    }

    const SubscriberId& GetSubscriberId() const
    {
        return static_cast<const SubscriberId&> (ElementAt(0));
    }

    void SetPreviousLocAreaId(PreviousLocAreaId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPreviousLocAreaIdStaticDescription());
        AddElement(1, element);
    }

    void SetPreviousLocAreaId(const PreviousLocAreaId& element)
    {
        its::AsnObject& asnObject = const_cast<PreviousLocAreaId&>(element);
        asnObject.SetDescription(GetPreviousLocAreaIdStaticDescription());
        AddElement(1, element);
    }

    const PreviousLocAreaId& GetPreviousLocAreaId() const
    {
        return static_cast<const PreviousLocAreaId&> (ElementAt(1));
    }

    void SetTargetLocAreaId(LocAreaId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetLocAreaIdStaticDescription());
        AddElement(2, element);
    }

    void SetTargetLocAreaId(const LocAreaId& element)
    {
        its::AsnObject& asnObject = const_cast<LocAreaId&>(element);
        asnObject.SetDescription(GetTargetLocAreaIdStaticDescription());
        AddElement(2, element);
    }

    const LocAreaId& GetTargetLocAreaId() const
    {
        return static_cast<const LocAreaId&> (ElementAt(2));
    }

    void SetCksn(CKSN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCksnStaticDescription());
        AddElement(3, element);
    }

    void SetCksn(const CKSN& element)
    {
        its::AsnObject& asnObject = const_cast<CKSN&>(element);
        asnObject.SetDescription(GetCksnStaticDescription());
        AddElement(3, element);
    }

    const CKSN& GetCksn() const
    {
        return static_cast<const CKSN&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_UPDATE_LOCATION_AREA_ARG_H_)

