//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REQUESTED_CAMEL_SUBSCRIPTION_INFO_H_)
#define _MAP_V13_REQUESTED_CAMEL_SUBSCRIPTION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class RequestedCAMEL_SubscriptionInfo : public its::AsnEnumerated
{
public:

    RequestedCAMEL_SubscriptionInfo() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    RequestedCAMEL_SubscriptionInfo(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    RequestedCAMEL_SubscriptionInfo(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedCAMEL_SubscriptionInfo(const RequestedCAMEL_SubscriptionInfo& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    RequestedCAMEL_SubscriptionInfo(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    RequestedCAMEL_SubscriptionInfo(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~RequestedCAMEL_SubscriptionInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedCAMEL_SubscriptionInfo(*this);
    }

    virtual std::string GetName() const
    { return "RequestedCAMEL_SubscriptionInfo"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_O_CSI = 0,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_T_CSI = 1,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_VT_CSI = 2,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_TIF_CSI = 3,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_GPRS_CSI = 4,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_MO_SMS_CSI = 5,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_SS_CSI = 6,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_M_CSI = 7,
        REQUESTED_CAMEL_SUBSCRIPTION_INFO_D_CSI = 8

    };

    void SetO_CSI()
    { _value = 0; }

    bool IsO_CSI() const
    { return _value == 0; }

    void SetT_CSI()
    { _value = 1; }

    bool IsT_CSI() const
    { return _value == 1; }

    void SetVt_CSI()
    { _value = 2; }

    bool IsVt_CSI() const
    { return _value == 2; }

    void SetTif_CSI()
    { _value = 3; }

    bool IsTif_CSI() const
    { return _value == 3; }

    void SetGprs_CSI()
    { _value = 4; }

    bool IsGprs_CSI() const
    { return _value == 4; }

    void SetMo_sms_CSI()
    { _value = 5; }

    bool IsMo_sms_CSI() const
    { return _value == 5; }

    void SetSs_CSI()
    { _value = 6; }

    bool IsSs_CSI() const
    { return _value == 6; }

    void SetM_CSI()
    { _value = 7; }

    bool IsM_CSI() const
    { return _value == 7; }

    void SetD_csi()
    { _value = 8; }

    bool IsD_csi() const
    { return _value == 8; }

};



} // namespace.

#endif    // !defined(_MAP_V13_REQUESTED_CAMEL_SUBSCRIPTION_INFO_H_)

