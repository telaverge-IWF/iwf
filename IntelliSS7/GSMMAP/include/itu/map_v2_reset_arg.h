//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_RESET_ARG_H_)
#define _MAP_V2_RESET_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>

#include <map_v2_network_resource.h>
#include <map_v2_isdn_address_string.h>
#include <map_v2_hlr_list.h>



namespace map_v2 {



class ResetArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::NetworkResource NetworkResource;


        typedef map_v2::ISDN_AddressString ISDN_AddressString;


        typedef map_v2::HLR_List HLR_List;


////////// End Nested Class(es) //////////

    ResetArg() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    ResetArg(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    ResetArg(const ResetArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ResetArg(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNetworkResourceStaticDescription();
    static its::AsnDescObject* GetHlr_NumberStaticDescription();
    static its::AsnDescObject* GetHlr_ListStaticDescription();

public:

    virtual ~ResetArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ResetArg(*this);
    }

    virtual std::string GetName() const
    { return "ResetArg"; }

    void SetNetworkResource(NetworkResource* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkResourceStaticDescription());
        AddElement(0, element);
    }

    void SetNetworkResource(const NetworkResource& element)
    {
        its::AsnObject& asnObject = const_cast<NetworkResource&>(element);
        asnObject.SetDescription(GetNetworkResourceStaticDescription());
        AddElement(0, element);
    }

    bool OptionNetworkResource() const
    {
        return Contains(0);
    }

    const NetworkResource& GetNetworkResource() const
    {
        ITS_REQUIRE(OptionNetworkResource());
        return static_cast<const NetworkResource&> (ElementAt(0));
    }

    void SetHlr_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHlr_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetHlr_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetHlr_NumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetHlr_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetHlr_List(HLR_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHlr_ListStaticDescription());
        AddElement(2, element);
    }

    void SetHlr_List(const HLR_List& element)
    {
        its::AsnObject& asnObject = const_cast<HLR_List&>(element);
        asnObject.SetDescription(GetHlr_ListStaticDescription());
        AddElement(2, element);
    }

    bool OptionHlr_List() const
    {
        return Contains(2);
    }

    const HLR_List& GetHlr_List() const
    {
        ITS_REQUIRE(OptionHlr_List());
        return static_cast<const HLR_List&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_RESET_ARG_H_)

