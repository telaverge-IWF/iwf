//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SUBSCRIBER_INFO_H_)
#define _MAP_V13_SUBSCRIBER_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <map_v13_location_information.h>
#include <map_v13_subscriber_state.h>
#include <map_v13_extension_container.h>
#include <map_v13_location_information_gprs.h>
#include <map_v13_ps_subscriber_state.h>
#include <map_v13_imei.h>
#include <map_v13_ms_classmark2.h>
#include <map_v13_gprsms_class.h>
#include <map_v13_mnp_info_res.h>
#include <map_v13_ims_voice_over_ps_sessions_ind.h>
#include <map_v13_time.h>
#include <map_v13_used_rat_type.h>
#include <map_v13_location_information_eps.h>



namespace map_v13 {



class SubscriberInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::LocationInformation LocationInformation;


        typedef map_v13::SubscriberState SubscriberState;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::LocationInformationGPRS LocationInformationGPRS;


        typedef map_v13::PS_SubscriberState PS_SubscriberState;


        typedef map_v13::IMEI IMEI;


        typedef map_v13::MS_Classmark2 MS_Classmark2;


        typedef map_v13::GPRSMSClass GPRSMSClass;


        typedef map_v13::MNPInfoRes MNPInfoRes;


        typedef map_v13::IMS_VoiceOverPS_SessionsInd IMS_VoiceOverPS_SessionsInd;


        typedef map_v13::Time Time;


        typedef map_v13::Used_RAT_Type Used_RAT_Type;


        typedef map_v13::LocationInformationEPS LocationInformationEPS;


////////// End Nested Class(es) //////////

    SubscriberInfo() : its::AsnSequence(14, false)
    {
        Initialize();
    }

    SubscriberInfo(its::Octets& octets) : its::AsnSequence(14, false)
    {
        Initialize();
        Decode(octets);
    }

    SubscriberInfo(const SubscriberInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SubscriberInfo(its::AsnDescObject* description) : its::AsnSequence(14, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocationInformationStaticDescription();
    static its::AsnDescObject* GetSubscriberStateStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetLocationInformationGPRSStaticDescription();
    static its::AsnDescObject* GetPs_SubscriberStateStaticDescription();
    static its::AsnDescObject* GetImeiStaticDescription();
    static its::AsnDescObject* GetMs_Classmark2StaticDescription();
    static its::AsnDescObject* GetGprs_MS_ClassStaticDescription();
    static its::AsnDescObject* GetMnpInfoResStaticDescription();
    static its::AsnDescObject* GetImsVoiceOverPS_SessionsIndicationStaticDescription();
    static its::AsnDescObject* GetLastUE_ActivityTimeStaticDescription();
    static its::AsnDescObject* GetLastRAT_TypeStaticDescription();
    static its::AsnDescObject* GetEps_SubscriberStateStaticDescription();
    static its::AsnDescObject* GetLocationInformationEPSStaticDescription();

public:

    virtual ~SubscriberInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SubscriberInfo(*this);
    }

    virtual std::string GetName() const
    { return "SubscriberInfo"; }

    void SetLocationInformation(LocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    void SetLocationInformation(const LocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformation&>(element);
        asnObject.SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    bool OptionLocationInformation() const
    {
        return Contains(0);
    }

    const LocationInformation& GetLocationInformation() const
    {
        ITS_REQUIRE(OptionLocationInformation());
        return static_cast<const LocationInformation&> (ElementAt(0));
    }

    void SetSubscriberState(SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    void SetSubscriberState(const SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberState&>(element);
        asnObject.SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    bool OptionSubscriberState() const
    {
        return Contains(1);
    }

    const SubscriberState& GetSubscriberState() const
    {
        ITS_REQUIRE(OptionSubscriberState());
        return static_cast<const SubscriberState&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetLocationInformationGPRS(LocationInformationGPRS* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationGPRSStaticDescription());
        AddElement(3, element);
    }

    void SetLocationInformationGPRS(const LocationInformationGPRS& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformationGPRS&>(element);
        asnObject.SetDescription(GetLocationInformationGPRSStaticDescription());
        AddElement(3, element);
    }

    bool OptionLocationInformationGPRS() const
    {
        return Contains(3);
    }

    const LocationInformationGPRS& GetLocationInformationGPRS() const
    {
        ITS_REQUIRE(OptionLocationInformationGPRS());
        return static_cast<const LocationInformationGPRS&> (ElementAt(3));
    }

    void SetPs_SubscriberState(PS_SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPs_SubscriberStateStaticDescription());
        AddElement(4, element);
    }

    void SetPs_SubscriberState(const PS_SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<PS_SubscriberState&>(element);
        asnObject.SetDescription(GetPs_SubscriberStateStaticDescription());
        AddElement(4, element);
    }

    bool OptionPs_SubscriberState() const
    {
        return Contains(4);
    }

    const PS_SubscriberState& GetPs_SubscriberState() const
    {
        ITS_REQUIRE(OptionPs_SubscriberState());
        return static_cast<const PS_SubscriberState&> (ElementAt(4));
    }

    void SetImei(IMEI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImeiStaticDescription());
        AddElement(5, element);
    }

    void SetImei(const IMEI& element)
    {
        its::AsnObject& asnObject = const_cast<IMEI&>(element);
        asnObject.SetDescription(GetImeiStaticDescription());
        AddElement(5, element);
    }

    bool OptionImei() const
    {
        return Contains(5);
    }

    const IMEI& GetImei() const
    {
        ITS_REQUIRE(OptionImei());
        return static_cast<const IMEI&> (ElementAt(5));
    }

    void SetMs_Classmark2(MS_Classmark2* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMs_Classmark2StaticDescription());
        AddElement(6, element);
    }

    void SetMs_Classmark2(const MS_Classmark2& element)
    {
        its::AsnObject& asnObject = const_cast<MS_Classmark2&>(element);
        asnObject.SetDescription(GetMs_Classmark2StaticDescription());
        AddElement(6, element);
    }

    bool OptionMs_Classmark2() const
    {
        return Contains(6);
    }

    const MS_Classmark2& GetMs_Classmark2() const
    {
        ITS_REQUIRE(OptionMs_Classmark2());
        return static_cast<const MS_Classmark2&> (ElementAt(6));
    }

    void SetGprs_MS_Class(GPRSMSClass* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGprs_MS_ClassStaticDescription());
        AddElement(7, element);
    }

    void SetGprs_MS_Class(const GPRSMSClass& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSMSClass&>(element);
        asnObject.SetDescription(GetGprs_MS_ClassStaticDescription());
        AddElement(7, element);
    }

    bool OptionGprs_MS_Class() const
    {
        return Contains(7);
    }

    const GPRSMSClass& GetGprs_MS_Class() const
    {
        ITS_REQUIRE(OptionGprs_MS_Class());
        return static_cast<const GPRSMSClass&> (ElementAt(7));
    }

    void SetMnpInfoRes(MNPInfoRes* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMnpInfoResStaticDescription());
        AddElement(8, element);
    }

    void SetMnpInfoRes(const MNPInfoRes& element)
    {
        its::AsnObject& asnObject = const_cast<MNPInfoRes&>(element);
        asnObject.SetDescription(GetMnpInfoResStaticDescription());
        AddElement(8, element);
    }

    bool OptionMnpInfoRes() const
    {
        return Contains(8);
    }

    const MNPInfoRes& GetMnpInfoRes() const
    {
        ITS_REQUIRE(OptionMnpInfoRes());
        return static_cast<const MNPInfoRes&> (ElementAt(8));
    }

    void SetImsVoiceOverPS_SessionsIndication(IMS_VoiceOverPS_SessionsInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsVoiceOverPS_SessionsIndicationStaticDescription());
        AddElement(9, element);
    }

    void SetImsVoiceOverPS_SessionsIndication(const IMS_VoiceOverPS_SessionsInd& element)
    {
        its::AsnObject& asnObject = const_cast<IMS_VoiceOverPS_SessionsInd&>(element);
        asnObject.SetDescription(GetImsVoiceOverPS_SessionsIndicationStaticDescription());
        AddElement(9, element);
    }

    bool OptionImsVoiceOverPS_SessionsIndication() const
    {
        return Contains(9);
    }

    const IMS_VoiceOverPS_SessionsInd& GetImsVoiceOverPS_SessionsIndication() const
    {
        ITS_REQUIRE(OptionImsVoiceOverPS_SessionsIndication());
        return static_cast<const IMS_VoiceOverPS_SessionsInd&> (ElementAt(9));
    }

    void SetLastUE_ActivityTime(Time* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLastUE_ActivityTimeStaticDescription());
        AddElement(10, element);
    }

    void SetLastUE_ActivityTime(const Time& element)
    {
        its::AsnObject& asnObject = const_cast<Time&>(element);
        asnObject.SetDescription(GetLastUE_ActivityTimeStaticDescription());
        AddElement(10, element);
    }

    bool OptionLastUE_ActivityTime() const
    {
        return Contains(10);
    }

    const Time& GetLastUE_ActivityTime() const
    {
        ITS_REQUIRE(OptionLastUE_ActivityTime());
        return static_cast<const Time&> (ElementAt(10));
    }

    void SetLastRAT_Type(Used_RAT_Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLastRAT_TypeStaticDescription());
        AddElement(11, element);
    }

    void SetLastRAT_Type(const Used_RAT_Type& element)
    {
        its::AsnObject& asnObject = const_cast<Used_RAT_Type&>(element);
        asnObject.SetDescription(GetLastRAT_TypeStaticDescription());
        AddElement(11, element);
    }

    bool OptionLastRAT_Type() const
    {
        return Contains(11);
    }

    const Used_RAT_Type& GetLastRAT_Type() const
    {
        ITS_REQUIRE(OptionLastRAT_Type());
        return static_cast<const Used_RAT_Type&> (ElementAt(11));
    }

    void SetEps_SubscriberState(PS_SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEps_SubscriberStateStaticDescription());
        AddElement(12, element);
    }

    void SetEps_SubscriberState(const PS_SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<PS_SubscriberState&>(element);
        asnObject.SetDescription(GetEps_SubscriberStateStaticDescription());
        AddElement(12, element);
    }

    bool OptionEps_SubscriberState() const
    {
        return Contains(12);
    }

    const PS_SubscriberState& GetEps_SubscriberState() const
    {
        ITS_REQUIRE(OptionEps_SubscriberState());
        return static_cast<const PS_SubscriberState&> (ElementAt(12));
    }

    void SetLocationInformationEPS(LocationInformationEPS* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationEPSStaticDescription());
        AddElement(13, element);
    }

    void SetLocationInformationEPS(const LocationInformationEPS& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformationEPS&>(element);
        asnObject.SetDescription(GetLocationInformationEPSStaticDescription());
        AddElement(13, element);
    }

    bool OptionLocationInformationEPS() const
    {
        return Contains(13);
    }

    const LocationInformationEPS& GetLocationInformationEPS() const
    {
        ITS_REQUIRE(OptionLocationInformationEPS());
        return static_cast<const LocationInformationEPS&> (ElementAt(13));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SUBSCRIBER_INFO_H_)

