//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CANCEL_LOCATION_ARG_H_)
#define _MAP_V13_CANCEL_LOCATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnChoice.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <map_v13_identity.h>
#include <map_v13_cancellation_type.h>
#include <map_v13_extension_container.h>
#include <map_v13_type_of_update.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_lmsi.h>



namespace map_v13 {



class CancelLocationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Mtrf_SupportedAndAuthorized : public its::AsnNull
    {
    public:

        Mtrf_SupportedAndAuthorized() : its::AsnNull(false)
        {
            Initialize();
        }

        Mtrf_SupportedAndAuthorized(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Mtrf_SupportedAndAuthorized(const Mtrf_SupportedAndAuthorized& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Mtrf_SupportedAndAuthorized(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mtrf_SupportedAndAuthorized()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mtrf_SupportedAndAuthorized(*this);
        }

        virtual std::string GetName() const
        { return "Mtrf_SupportedAndAuthorized"; }

    };



    class Mtrf_SupportedAndNotAuthorized : public its::AsnNull
    {
    public:

        Mtrf_SupportedAndNotAuthorized() : its::AsnNull(false)
        {
            Initialize();
        }

        Mtrf_SupportedAndNotAuthorized(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Mtrf_SupportedAndNotAuthorized(const Mtrf_SupportedAndNotAuthorized& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Mtrf_SupportedAndNotAuthorized(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mtrf_SupportedAndNotAuthorized()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mtrf_SupportedAndNotAuthorized(*this);
        }

        virtual std::string GetName() const
        { return "Mtrf_SupportedAndNotAuthorized"; }

    };


        typedef map_v13::Identity Identity;


        typedef map_v13::CancellationType CancellationType;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::TypeOfUpdate TypeOfUpdate;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::LMSI LMSI;


////////// End Nested Class(es) //////////

    CancelLocationArg() : its::AsnSequence(9, false)
    {
        Initialize();
    }

    CancelLocationArg(its::Octets& octets) : its::AsnSequence(9, false)
    {
        Initialize();
        Decode(octets);
    }

    CancelLocationArg(const CancelLocationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CancelLocationArg(its::AsnDescObject* description) : its::AsnSequence(9, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetIdentityStaticDescription();
    static its::AsnDescObject* GetCancellationTypeStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetTypeOfUpdateStaticDescription();
    static its::AsnDescObject* GetMtrf_SupportedAndAuthorizedStaticDescription();
    static its::AsnDescObject* GetMtrf_SupportedAndNotAuthorizedStaticDescription();
    static its::AsnDescObject* GetNewMSC_NumberStaticDescription();
    static its::AsnDescObject* GetNewVLR_NumberStaticDescription();
    static its::AsnDescObject* GetNew_lmsiStaticDescription();

public:

    virtual ~CancelLocationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CancelLocationArg(*this);
    }

    virtual std::string GetName() const
    { return "CancelLocationArg"; }

    void SetIdentity(Identity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIdentityStaticDescription());
        AddElement(0, element);
    }

    void SetIdentity(const Identity& element)
    {
        its::AsnObject& asnObject = const_cast<Identity&>(element);
        asnObject.SetDescription(GetIdentityStaticDescription());
        AddElement(0, element);
    }

    const Identity& GetIdentity() const
    {
        return static_cast<const Identity&> (ElementAt(0));
    }

    void SetCancellationType(CancellationType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCancellationTypeStaticDescription());
        AddElement(1, element);
    }

    void SetCancellationType(const CancellationType& element)
    {
        its::AsnObject& asnObject = const_cast<CancellationType&>(element);
        asnObject.SetDescription(GetCancellationTypeStaticDescription());
        AddElement(1, element);
    }

    bool OptionCancellationType() const
    {
        return Contains(1);
    }

    const CancellationType& GetCancellationType() const
    {
        ITS_REQUIRE(OptionCancellationType());
        return static_cast<const CancellationType&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetTypeOfUpdate(TypeOfUpdate* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTypeOfUpdateStaticDescription());
        AddElement(3, element);
    }

    void SetTypeOfUpdate(const TypeOfUpdate& element)
    {
        its::AsnObject& asnObject = const_cast<TypeOfUpdate&>(element);
        asnObject.SetDescription(GetTypeOfUpdateStaticDescription());
        AddElement(3, element);
    }

    bool OptionTypeOfUpdate() const
    {
        return Contains(3);
    }

    const TypeOfUpdate& GetTypeOfUpdate() const
    {
        ITS_REQUIRE(OptionTypeOfUpdate());
        return static_cast<const TypeOfUpdate&> (ElementAt(3));
    }

    void SetMtrf_SupportedAndAuthorized(Mtrf_SupportedAndAuthorized* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMtrf_SupportedAndAuthorizedStaticDescription());
        AddElement(4, element);
    }

    void SetMtrf_SupportedAndAuthorized(const Mtrf_SupportedAndAuthorized& element)
    {
        its::AsnObject& asnObject = const_cast<Mtrf_SupportedAndAuthorized&>(element);
        asnObject.SetDescription(GetMtrf_SupportedAndAuthorizedStaticDescription());
        AddElement(4, element);
    }

    bool OptionMtrf_SupportedAndAuthorized() const
    {
        return Contains(4);
    }

    const Mtrf_SupportedAndAuthorized& GetMtrf_SupportedAndAuthorized() const
    {
        ITS_REQUIRE(OptionMtrf_SupportedAndAuthorized());
        return static_cast<const Mtrf_SupportedAndAuthorized&> (ElementAt(4));
    }

    void SetMtrf_SupportedAndNotAuthorized(Mtrf_SupportedAndNotAuthorized* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMtrf_SupportedAndNotAuthorizedStaticDescription());
        AddElement(5, element);
    }

    void SetMtrf_SupportedAndNotAuthorized(const Mtrf_SupportedAndNotAuthorized& element)
    {
        its::AsnObject& asnObject = const_cast<Mtrf_SupportedAndNotAuthorized&>(element);
        asnObject.SetDescription(GetMtrf_SupportedAndNotAuthorizedStaticDescription());
        AddElement(5, element);
    }

    bool OptionMtrf_SupportedAndNotAuthorized() const
    {
        return Contains(5);
    }

    const Mtrf_SupportedAndNotAuthorized& GetMtrf_SupportedAndNotAuthorized() const
    {
        ITS_REQUIRE(OptionMtrf_SupportedAndNotAuthorized());
        return static_cast<const Mtrf_SupportedAndNotAuthorized&> (ElementAt(5));
    }

    void SetNewMSC_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNewMSC_NumberStaticDescription());
        AddElement(6, element);
    }

    void SetNewMSC_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetNewMSC_NumberStaticDescription());
        AddElement(6, element);
    }

    bool OptionNewMSC_Number() const
    {
        return Contains(6);
    }

    const ISDN_AddressString& GetNewMSC_Number() const
    {
        ITS_REQUIRE(OptionNewMSC_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(6));
    }

    void SetNewVLR_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNewVLR_NumberStaticDescription());
        AddElement(7, element);
    }

    void SetNewVLR_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetNewVLR_NumberStaticDescription());
        AddElement(7, element);
    }

    bool OptionNewVLR_Number() const
    {
        return Contains(7);
    }

    const ISDN_AddressString& GetNewVLR_Number() const
    {
        ITS_REQUIRE(OptionNewVLR_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(7));
    }

    void SetNew_lmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNew_lmsiStaticDescription());
        AddElement(8, element);
    }

    void SetNew_lmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetNew_lmsiStaticDescription());
        AddElement(8, element);
    }

    bool OptionNew_lmsi() const
    {
        return Contains(8);
    }

    const LMSI& GetNew_lmsi() const
    {
        ITS_REQUIRE(OptionNew_lmsi());
        return static_cast<const LMSI&> (ElementAt(8));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CANCEL_LOCATION_ARG_H_)

