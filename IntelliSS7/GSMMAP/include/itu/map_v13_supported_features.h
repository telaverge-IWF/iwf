//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SUPPORTED_FEATURES_H_)
#define _MAP_V13_SUPPORTED_FEATURES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class SupportedFeatures : public its::AsnBitString
{
public:

    SupportedFeatures() : its::AsnBitString(false)
    {
        Initialize();
    }

    SupportedFeatures(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    SupportedFeatures(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    SupportedFeatures(const SupportedFeatures& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    SupportedFeatures(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    SupportedFeatures(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SupportedFeatures()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SupportedFeatures(*this);
    }

    virtual std::string GetName() const
    { return "SupportedFeatures"; }

    void SetBoicExHC()
    { Set(25); }

    void ResetBoicExHC()
    { Reset(25); }

    bool IsBoicExHCSet() const
    { return IsSet(25); }

    bool IsBoicExHCDefined() const
    { return 25 < GetSize(); }

    void SetBoic()
    { Set(24); }

    void ResetBoic()
    { Reset(24); }

    bool IsBoicSet() const
    { return IsSet(24); }

    bool IsBoicDefined() const
    { return 24 < GetSize(); }

    void SetBaoc()
    { Set(23); }

    void ResetBaoc()
    { Reset(23); }

    bool IsBaocSet() const
    { return IsSet(23); }

    bool IsBaocDefined() const
    { return 23 < GetSize(); }

    void SetBarring_OutgoingCalls()
    { Set(22); }

    void ResetBarring_OutgoingCalls()
    { Reset(22); }

    bool IsBarring_OutgoingCallsSet() const
    { return IsSet(22); }

    bool IsBarring_OutgoingCallsDefined() const
    { return 22 < GetSize(); }

    void SetSm_mo_pp()
    { Set(21); }

    void ResetSm_mo_pp()
    { Reset(21); }

    bool IsSm_mo_ppSet() const
    { return IsSet(21); }

    bool IsSm_mo_ppDefined() const
    { return 21 < GetSize(); }

    void SetLcs_transferToThirdParty()
    { Set(20); }

    void ResetLcs_transferToThirdParty()
    { Reset(20); }

    bool IsLcs_transferToThirdPartySet() const
    { return IsSet(20); }

    bool IsLcs_transferToThirdPartyDefined() const
    { return 20 < GetSize(); }

    void SetLcs_autonomousSelfLocation()
    { Set(19); }

    void ResetLcs_autonomousSelfLocation()
    { Reset(19); }

    bool IsLcs_autonomousSelfLocationSet() const
    { return IsSet(19); }

    bool IsLcs_autonomousSelfLocationDefined() const
    { return 19 < GetSize(); }

    void SetLcs_basicSelfLocation()
    { Set(18); }

    void ResetLcs_basicSelfLocation()
    { Reset(18); }

    bool IsLcs_basicSelfLocationSet() const
    { return IsSet(18); }

    bool IsLcs_basicSelfLocationDefined() const
    { return 18 < GetSize(); }

    void SetLcs_all_MOLR_SS()
    { Set(17); }

    void ResetLcs_all_MOLR_SS()
    { Reset(17); }

    bool IsLcs_all_MOLR_SSSet() const
    { return IsSet(17); }

    bool IsLcs_all_MOLR_SSDefined() const
    { return 17 < GetSize(); }

    void SetLcs_ServiceType()
    { Set(16); }

    void ResetLcs_ServiceType()
    { Reset(16); }

    bool IsLcs_ServiceTypeSet() const
    { return IsSet(16); }

    bool IsLcs_ServiceTypeDefined() const
    { return 16 < GetSize(); }

    void SetLcs_PLMN_operator()
    { Set(15); }

    void ResetLcs_PLMN_operator()
    { Reset(15); }

    bool IsLcs_PLMN_operatorSet() const
    { return IsSet(15); }

    bool IsLcs_PLMN_operatorDefined() const
    { return 15 < GetSize(); }

    void SetLcs_CallSessionUnrelated()
    { Set(14); }

    void ResetLcs_CallSessionUnrelated()
    { Reset(14); }

    bool IsLcs_CallSessionUnrelatedSet() const
    { return IsSet(14); }

    bool IsLcs_CallSessionUnrelatedDefined() const
    { return 14 < GetSize(); }

    void SetLcs_CallSessionRelated()
    { Set(13); }

    void ResetLcs_CallSessionRelated()
    { Reset(13); }

    bool IsLcs_CallSessionRelatedSet() const
    { return IsSet(13); }

    bool IsLcs_CallSessionRelatedDefined() const
    { return 13 < GetSize(); }

    void SetLcs_universal()
    { Set(12); }

    void ResetLcs_universal()
    { Reset(12); }

    bool IsLcs_universalSet() const
    { return IsSet(12); }

    bool IsLcs_universalDefined() const
    { return 12 < GetSize(); }

    void SetLcs_all_PrivExcep()
    { Set(11); }

    void ResetLcs_all_PrivExcep()
    { Reset(11); }

    bool IsLcs_all_PrivExcepSet() const
    { return IsSet(11); }

    bool IsLcs_all_PrivExcepDefined() const
    { return 11 < GetSize(); }

    void SetTrace()
    { Set(10); }

    void ResetTrace()
    { Reset(10); }

    bool IsTraceSet() const
    { return IsSet(10); }

    bool IsTraceDefined() const
    { return 10 < GetSize(); }

    void SetRegSub()
    { Set(9); }

    void ResetRegSub()
    { Reset(9); }

    bool IsRegSubSet() const
    { return IsSet(9); }

    bool IsRegSubDefined() const
    { return 9 < GetSize(); }

    void SetOdb_all_interzonal_og_and_internat_og_not_to_HPLMN_country()
    { Set(8); }

    void ResetOdb_all_interzonal_og_and_internat_og_not_to_HPLMN_country()
    { Reset(8); }

    bool IsOdb_all_interzonal_og_and_internat_og_not_to_HPLMN_countrySet() const
    { return IsSet(8); }

    bool IsOdb_all_interzonal_og_and_internat_og_not_to_HPLMN_countryDefined() const
    { return 8 < GetSize(); }

    void SetOdb_all_interzonal_og_not_to_HPLMN_country()
    { Set(7); }

    void ResetOdb_all_interzonal_og_not_to_HPLMN_country()
    { Reset(7); }

    bool IsOdb_all_interzonal_og_not_to_HPLMN_countrySet() const
    { return IsSet(7); }

    bool IsOdb_all_interzonal_og_not_to_HPLMN_countryDefined() const
    { return 7 < GetSize(); }

    void SetOdb_all_interzonal_og()
    { Set(6); }

    void ResetOdb_all_interzonal_og()
    { Reset(6); }

    bool IsOdb_all_interzonal_ogSet() const
    { return IsSet(6); }

    bool IsOdb_all_interzonal_ogDefined() const
    { return 6 < GetSize(); }

    void SetOdb_all_int_og_not_to_HPLMN_country()
    { Set(5); }

    void ResetOdb_all_int_og_not_to_HPLMN_country()
    { Reset(5); }

    bool IsOdb_all_int_og_not_to_HPLMN_countrySet() const
    { return IsSet(5); }

    bool IsOdb_all_int_og_not_to_HPLMN_countryDefined() const
    { return 5 < GetSize(); }

    void SetOdb_all_international_og()
    { Set(4); }

    void ResetOdb_all_international_og()
    { Reset(4); }

    bool IsOdb_all_international_ogSet() const
    { return IsSet(4); }

    bool IsOdb_all_international_ogDefined() const
    { return 4 < GetSize(); }

    void SetOdb_all_og()
    { Set(3); }

    void ResetOdb_all_og()
    { Reset(3); }

    bool IsOdb_all_ogSet() const
    { return IsSet(3); }

    bool IsOdb_all_ogDefined() const
    { return 3 < GetSize(); }

    void SetOdb_VPLMN_APN()
    { Set(2); }

    void ResetOdb_VPLMN_APN()
    { Reset(2); }

    bool IsOdb_VPLMN_APNSet() const
    { return IsSet(2); }

    bool IsOdb_VPLMN_APNDefined() const
    { return 2 < GetSize(); }

    void SetOdb_HPLMN_APN()
    { Set(1); }

    void ResetOdb_HPLMN_APN()
    { Reset(1); }

    bool IsOdb_HPLMN_APNSet() const
    { return IsSet(1); }

    bool IsOdb_HPLMN_APNDefined() const
    { return 1 < GetSize(); }

    void SetOdb_all_apn()
    { Set(0); }

    void ResetOdb_all_apn()
    { Reset(0); }

    bool IsOdb_all_apnSet() const
    { return IsSet(0); }

    bool IsOdb_all_apnDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_SUPPORTED_FEATURES_H_)

