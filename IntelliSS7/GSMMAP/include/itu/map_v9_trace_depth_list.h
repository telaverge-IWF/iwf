//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_TRACE_DEPTH_LIST_H_)
#define _MAP_V9_TRACE_DEPTH_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>

#include <map_v9_trace_depth.h>



namespace map_v9 {



class TraceDepthList : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::TraceDepth TraceDepth;


////////// End Nested Class(es) //////////

    TraceDepthList() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    TraceDepthList(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    TraceDepthList(const TraceDepthList& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    TraceDepthList(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsc_s_TraceDepthStaticDescription();
    static its::AsnDescObject* GetMgw_TraceDepthStaticDescription();
    static its::AsnDescObject* GetSgsn_TraceDepthStaticDescription();
    static its::AsnDescObject* GetGgsn_TraceDepthStaticDescription();
    static its::AsnDescObject* GetRnc_TraceDepthStaticDescription();
    static its::AsnDescObject* GetBmsc_TraceDepthStaticDescription();

public:

    virtual ~TraceDepthList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TraceDepthList(*this);
    }

    virtual std::string GetName() const
    { return "TraceDepthList"; }

    void SetMsc_s_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_TraceDepthStaticDescription());
        AddElement(0, element);
    }

    void SetMsc_s_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetMsc_s_TraceDepthStaticDescription());
        AddElement(0, element);
    }

    bool OptionMsc_s_TraceDepth() const
    {
        return Contains(0);
    }

    const TraceDepth& GetMsc_s_TraceDepth() const
    {
        ITS_REQUIRE(OptionMsc_s_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(0));
    }

    void SetMgw_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_TraceDepthStaticDescription());
        AddElement(1, element);
    }

    void SetMgw_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetMgw_TraceDepthStaticDescription());
        AddElement(1, element);
    }

    bool OptionMgw_TraceDepth() const
    {
        return Contains(1);
    }

    const TraceDepth& GetMgw_TraceDepth() const
    {
        ITS_REQUIRE(OptionMgw_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(1));
    }

    void SetSgsn_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_TraceDepthStaticDescription());
        AddElement(2, element);
    }

    void SetSgsn_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetSgsn_TraceDepthStaticDescription());
        AddElement(2, element);
    }

    bool OptionSgsn_TraceDepth() const
    {
        return Contains(2);
    }

    const TraceDepth& GetSgsn_TraceDepth() const
    {
        ITS_REQUIRE(OptionSgsn_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(2));
    }

    void SetGgsn_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGgsn_TraceDepthStaticDescription());
        AddElement(3, element);
    }

    void SetGgsn_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetGgsn_TraceDepthStaticDescription());
        AddElement(3, element);
    }

    bool OptionGgsn_TraceDepth() const
    {
        return Contains(3);
    }

    const TraceDepth& GetGgsn_TraceDepth() const
    {
        ITS_REQUIRE(OptionGgsn_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(3));
    }

    void SetRnc_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRnc_TraceDepthStaticDescription());
        AddElement(4, element);
    }

    void SetRnc_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetRnc_TraceDepthStaticDescription());
        AddElement(4, element);
    }

    bool OptionRnc_TraceDepth() const
    {
        return Contains(4);
    }

    const TraceDepth& GetRnc_TraceDepth() const
    {
        ITS_REQUIRE(OptionRnc_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(4));
    }

    void SetBmsc_TraceDepth(TraceDepth* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBmsc_TraceDepthStaticDescription());
        AddElement(5, element);
    }

    void SetBmsc_TraceDepth(const TraceDepth& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepth&>(element);
        asnObject.SetDescription(GetBmsc_TraceDepthStaticDescription());
        AddElement(5, element);
    }

    bool OptionBmsc_TraceDepth() const
    {
        return Contains(5);
    }

    const TraceDepth& GetBmsc_TraceDepth() const
    {
        ITS_REQUIRE(OptionBmsc_TraceDepth());
        return static_cast<const TraceDepth&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_TRACE_DEPTH_LIST_H_)

