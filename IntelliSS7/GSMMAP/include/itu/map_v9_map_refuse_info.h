//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_MAP_REFUSE_INFO_H_)
#define _MAP_V9_MAP_REFUSE_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>
#include <AsnEnumerated.h>

#include <map_v9_reason.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class MAP_RefuseInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class AlternativeApplicationContext : public its::AsnObjectIdentifier
    {
    public:

        AlternativeApplicationContext() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        AlternativeApplicationContext(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        AlternativeApplicationContext(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        AlternativeApplicationContext(const AlternativeApplicationContext& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        AlternativeApplicationContext(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        AlternativeApplicationContext(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AlternativeApplicationContext()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AlternativeApplicationContext(*this);
        }

        virtual std::string GetName() const
        { return "AlternativeApplicationContext"; }

    };


        typedef map_v9::Reason Reason;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    MAP_RefuseInfo() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    MAP_RefuseInfo(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    MAP_RefuseInfo(const MAP_RefuseInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MAP_RefuseInfo(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetReasonStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetAlternativeApplicationContextStaticDescription();

public:

    virtual ~MAP_RefuseInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MAP_RefuseInfo(*this);
    }

    virtual std::string GetName() const
    { return "MAP_RefuseInfo"; }

    void SetReason(Reason* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReasonStaticDescription());
        AddElement(0, element);
    }

    void SetReason(const Reason& element)
    {
        its::AsnObject& asnObject = const_cast<Reason&>(element);
        asnObject.SetDescription(GetReasonStaticDescription());
        AddElement(0, element);
    }

    const Reason& GetReason() const
    {
        return static_cast<const Reason&> (ElementAt(0));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(1);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(1));
    }

    void SetAlternativeApplicationContext(AlternativeApplicationContext* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlternativeApplicationContextStaticDescription());
        AddElement(2, element);
    }

    void SetAlternativeApplicationContext(const AlternativeApplicationContext& element)
    {
        its::AsnObject& asnObject = const_cast<AlternativeApplicationContext&>(element);
        asnObject.SetDescription(GetAlternativeApplicationContextStaticDescription());
        AddElement(2, element);
    }

    bool OptionAlternativeApplicationContext() const
    {
        return Contains(2);
    }

    const AlternativeApplicationContext& GetAlternativeApplicationContext() const
    {
        ITS_REQUIRE(OptionAlternativeApplicationContext());
        return static_cast<const AlternativeApplicationContext&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_MAP_REFUSE_INFO_H_)

