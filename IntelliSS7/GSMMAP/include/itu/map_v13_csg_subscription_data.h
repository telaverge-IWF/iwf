//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CSG_SUBSCRIPTION_DATA_H_)
#define _MAP_V13_CSG_SUBSCRIPTION_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>

#include <map_v13_csg_id.h>
#include <map_v13_time.h>
#include <map_v13_extension_container.h>
#include <map_v13_lipa_allowed_apn_list.h>



namespace map_v13 {



class CSG_SubscriptionData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::CSG_Id CSG_Id;


        typedef map_v13::Time Time;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::LIPA_AllowedAPNList LIPA_AllowedAPNList;


////////// End Nested Class(es) //////////

    CSG_SubscriptionData() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    CSG_SubscriptionData(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    CSG_SubscriptionData(const CSG_SubscriptionData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CSG_SubscriptionData(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCsg_IdStaticDescription();
    static its::AsnDescObject* GetExpirationDateStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetLipa_AllowedAPNListStaticDescription();

public:

    virtual ~CSG_SubscriptionData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CSG_SubscriptionData(*this);
    }

    virtual std::string GetName() const
    { return "CSG_SubscriptionData"; }

    void SetCsg_Id(CSG_Id* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCsg_IdStaticDescription());
        AddElement(0, element);
    }

    void SetCsg_Id(const CSG_Id& element)
    {
        its::AsnObject& asnObject = const_cast<CSG_Id&>(element);
        asnObject.SetDescription(GetCsg_IdStaticDescription());
        AddElement(0, element);
    }

    const CSG_Id& GetCsg_Id() const
    {
        return static_cast<const CSG_Id&> (ElementAt(0));
    }

    void SetExpirationDate(Time* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExpirationDateStaticDescription());
        AddElement(1, element);
    }

    void SetExpirationDate(const Time& element)
    {
        its::AsnObject& asnObject = const_cast<Time&>(element);
        asnObject.SetDescription(GetExpirationDateStaticDescription());
        AddElement(1, element);
    }

    bool OptionExpirationDate() const
    {
        return Contains(1);
    }

    const Time& GetExpirationDate() const
    {
        ITS_REQUIRE(OptionExpirationDate());
        return static_cast<const Time&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetLipa_AllowedAPNList(LIPA_AllowedAPNList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLipa_AllowedAPNListStaticDescription());
        AddElement(3, element);
    }

    void SetLipa_AllowedAPNList(const LIPA_AllowedAPNList& element)
    {
        its::AsnObject& asnObject = const_cast<LIPA_AllowedAPNList&>(element);
        asnObject.SetDescription(GetLipa_AllowedAPNListStaticDescription());
        AddElement(3, element);
    }

    bool OptionLipa_AllowedAPNList() const
    {
        return Contains(3);
    }

    const LIPA_AllowedAPNList& GetLipa_AllowedAPNList() const
    {
        ITS_REQUIRE(OptionLipa_AllowedAPNList());
        return static_cast<const LIPA_AllowedAPNList&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CSG_SUBSCRIPTION_DATA_H_)

