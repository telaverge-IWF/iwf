//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_PDP_CONTEXT_H_)
#define _MAP_V9_PDP_CONTEXT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <map_v9_context_id.h>
#include <map_v9_pdp_type.h>
#include <map_v9_pdp_address.h>
#include <map_v9_qo_s_subscribed.h>
#include <map_v9_apn.h>
#include <map_v9_extension_container.h>
#include <map_v9_ext_qo_s_subscribed.h>
#include <map_v9_charging_characteristics.h>
#include <map_v9_ext2_qo_s_subscribed.h>



namespace map_v9 {



class PDP_Context : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class VplmnAddressAllowed : public its::AsnNull
    {
    public:

        VplmnAddressAllowed() : its::AsnNull(false)
        {
            Initialize();
        }

        VplmnAddressAllowed(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        VplmnAddressAllowed(const VplmnAddressAllowed& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        VplmnAddressAllowed(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VplmnAddressAllowed()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VplmnAddressAllowed(*this);
        }

        virtual std::string GetName() const
        { return "VplmnAddressAllowed"; }

    };


        typedef map_v9::ContextId ContextId;


        typedef map_v9::PDP_Type PDP_Type;


        typedef map_v9::PDP_Address PDP_Address;


        typedef map_v9::QoS_Subscribed QoS_Subscribed;


        typedef map_v9::APN APN;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::Ext_QoS_Subscribed Ext_QoS_Subscribed;


        typedef map_v9::ChargingCharacteristics ChargingCharacteristics;


        typedef map_v9::Ext2_QoS_Subscribed Ext2_QoS_Subscribed;


////////// End Nested Class(es) //////////

    PDP_Context() : its::AsnSequence(10, false)
    {
        Initialize();
    }

    PDP_Context(its::Octets& octets) : its::AsnSequence(10, false)
    {
        Initialize();
        Decode(octets);
    }

    PDP_Context(const PDP_Context& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PDP_Context(its::AsnDescObject* description) : its::AsnSequence(10, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPdp_ContextIdStaticDescription();
    static its::AsnDescObject* GetPdp_TypeStaticDescription();
    static its::AsnDescObject* GetPdp_AddressStaticDescription();
    static its::AsnDescObject* GetQos_SubscribedStaticDescription();
    static its::AsnDescObject* GetVplmnAddressAllowedStaticDescription();
    static its::AsnDescObject* GetApnStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetExt_QoS_SubscribedStaticDescription();
    static its::AsnDescObject* GetPdp_ChargingCharacteristicsStaticDescription();
    static its::AsnDescObject* GetExt2_QoS_SubscribedStaticDescription();

public:

    virtual ~PDP_Context()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PDP_Context(*this);
    }

    virtual std::string GetName() const
    { return "PDP_Context"; }

    void SetPdp_ContextId(ContextId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_ContextIdStaticDescription());
        AddElement(0, element);
    }

    void SetPdp_ContextId(const ContextId& element)
    {
        its::AsnObject& asnObject = const_cast<ContextId&>(element);
        asnObject.SetDescription(GetPdp_ContextIdStaticDescription());
        AddElement(0, element);
    }

    const ContextId& GetPdp_ContextId() const
    {
        return static_cast<const ContextId&> (ElementAt(0));
    }

    void SetPdp_Type(PDP_Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_TypeStaticDescription());
        AddElement(1, element);
    }

    void SetPdp_Type(const PDP_Type& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Type&>(element);
        asnObject.SetDescription(GetPdp_TypeStaticDescription());
        AddElement(1, element);
    }

    const PDP_Type& GetPdp_Type() const
    {
        return static_cast<const PDP_Type&> (ElementAt(1));
    }

    void SetPdp_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_AddressStaticDescription());
        AddElement(2, element);
    }

    void SetPdp_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetPdp_AddressStaticDescription());
        AddElement(2, element);
    }

    bool OptionPdp_Address() const
    {
        return Contains(2);
    }

    const PDP_Address& GetPdp_Address() const
    {
        ITS_REQUIRE(OptionPdp_Address());
        return static_cast<const PDP_Address&> (ElementAt(2));
    }

    void SetQos_Subscribed(QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos_SubscribedStaticDescription());
        AddElement(3, element);
    }

    void SetQos_Subscribed(const QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos_SubscribedStaticDescription());
        AddElement(3, element);
    }

    const QoS_Subscribed& GetQos_Subscribed() const
    {
        return static_cast<const QoS_Subscribed&> (ElementAt(3));
    }

    void SetVplmnAddressAllowed(VplmnAddressAllowed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVplmnAddressAllowedStaticDescription());
        AddElement(4, element);
    }

    void SetVplmnAddressAllowed(const VplmnAddressAllowed& element)
    {
        its::AsnObject& asnObject = const_cast<VplmnAddressAllowed&>(element);
        asnObject.SetDescription(GetVplmnAddressAllowedStaticDescription());
        AddElement(4, element);
    }

    bool OptionVplmnAddressAllowed() const
    {
        return Contains(4);
    }

    const VplmnAddressAllowed& GetVplmnAddressAllowed() const
    {
        ITS_REQUIRE(OptionVplmnAddressAllowed());
        return static_cast<const VplmnAddressAllowed&> (ElementAt(4));
    }

    void SetApn(APN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApnStaticDescription());
        AddElement(5, element);
    }

    void SetApn(const APN& element)
    {
        its::AsnObject& asnObject = const_cast<APN&>(element);
        asnObject.SetDescription(GetApnStaticDescription());
        AddElement(5, element);
    }

    const APN& GetApn() const
    {
        return static_cast<const APN&> (ElementAt(5));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(6);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(6));
    }

    void SetExt_QoS_Subscribed(Ext_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExt_QoS_SubscribedStaticDescription());
        AddElement(7, element);
    }

    void SetExt_QoS_Subscribed(const Ext_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetExt_QoS_SubscribedStaticDescription());
        AddElement(7, element);
    }

    bool OptionExt_QoS_Subscribed() const
    {
        return Contains(7);
    }

    const Ext_QoS_Subscribed& GetExt_QoS_Subscribed() const
    {
        ITS_REQUIRE(OptionExt_QoS_Subscribed());
        return static_cast<const Ext_QoS_Subscribed&> (ElementAt(7));
    }

    void SetPdp_ChargingCharacteristics(ChargingCharacteristics* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_ChargingCharacteristicsStaticDescription());
        AddElement(8, element);
    }

    void SetPdp_ChargingCharacteristics(const ChargingCharacteristics& element)
    {
        its::AsnObject& asnObject = const_cast<ChargingCharacteristics&>(element);
        asnObject.SetDescription(GetPdp_ChargingCharacteristicsStaticDescription());
        AddElement(8, element);
    }

    bool OptionPdp_ChargingCharacteristics() const
    {
        return Contains(8);
    }

    const ChargingCharacteristics& GetPdp_ChargingCharacteristics() const
    {
        ITS_REQUIRE(OptionPdp_ChargingCharacteristics());
        return static_cast<const ChargingCharacteristics&> (ElementAt(8));
    }

    void SetExt2_QoS_Subscribed(Ext2_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExt2_QoS_SubscribedStaticDescription());
        AddElement(9, element);
    }

    void SetExt2_QoS_Subscribed(const Ext2_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext2_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetExt2_QoS_SubscribedStaticDescription());
        AddElement(9, element);
    }

    bool OptionExt2_QoS_Subscribed() const
    {
        return Contains(9);
    }

    const Ext2_QoS_Subscribed& GetExt2_QoS_Subscribed() const
    {
        ITS_REQUIRE(OptionExt2_QoS_Subscribed());
        return static_cast<const Ext2_QoS_Subscribed&> (ElementAt(9));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_PDP_CONTEXT_H_)

