//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_ADDITIONAL_NETWORK_RESOURCE_H_)
#define _MAP_V13_ADDITIONAL_NETWORK_RESOURCE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class AdditionalNetworkResource : public its::AsnEnumerated
{
public:

    AdditionalNetworkResource() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    AdditionalNetworkResource(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    AdditionalNetworkResource(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    AdditionalNetworkResource(const AdditionalNetworkResource& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    AdditionalNetworkResource(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    AdditionalNetworkResource(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~AdditionalNetworkResource()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AdditionalNetworkResource(*this);
    }

    virtual std::string GetName() const
    { return "AdditionalNetworkResource"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        ADDITIONAL_NETWORK_RESOURCE_SGSN = 0,
        ADDITIONAL_NETWORK_RESOURCE_GGSN = 1,
        ADDITIONAL_NETWORK_RESOURCE_GMLC = 2,
        ADDITIONAL_NETWORK_RESOURCE_GSM_SCF = 3,
        ADDITIONAL_NETWORK_RESOURCE_NPLR = 4,
        ADDITIONAL_NETWORK_RESOURCE_AUC = 5
,
        ADDITIONAL_NETWORK_RESOURCE_UE = 6,
        ADDITIONAL_NETWORK_RESOURCE_MME = 7
    };

    void SetSgsn()
    { _value = 0; }

    bool IsSgsn() const
    { return _value == 0; }

    void SetGgsn()
    { _value = 1; }

    bool IsGgsn() const
    { return _value == 1; }

    void SetGmlc()
    { _value = 2; }

    bool IsGmlc() const
    { return _value == 2; }

    void SetGsmSCF()
    { _value = 3; }

    bool IsGsmSCF() const
    { return _value == 3; }

    void SetNplr()
    { _value = 4; }

    bool IsNplr() const
    { return _value == 4; }

    void SetAuc()
    { _value = 5; }

    bool IsAuc() const
    { return _value == 5; }

    void SetUe()
    { _value = 6; SetExtension(true); }

    bool IsUe()
    { return (IsExtension() && (_value == 6)); }

    void SetMme()
    { _value = 7; SetExtension(true); }

    bool IsMme()
    { return (IsExtension() && (_value == 7)); }

};



} // namespace.

#endif    // !defined(_MAP_V13_ADDITIONAL_NETWORK_RESOURCE_H_)

