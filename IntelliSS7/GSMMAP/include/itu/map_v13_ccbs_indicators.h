//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CCBS_INDICATORS_H_)
#define _MAP_V13_CCBS_INDICATORS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>

#include <map_v13_extension_container.h>



namespace map_v13 {



class CCBS_Indicators : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Ccbs_Possible : public its::AsnNull
    {
    public:

        Ccbs_Possible() : its::AsnNull(false)
        {
            Initialize();
        }

        Ccbs_Possible(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ccbs_Possible(const Ccbs_Possible& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ccbs_Possible(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ccbs_Possible()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ccbs_Possible(*this);
        }

        virtual std::string GetName() const
        { return "Ccbs_Possible"; }

    };



    class KeepCCBS_CallIndicator : public its::AsnNull
    {
    public:

        KeepCCBS_CallIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        KeepCCBS_CallIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        KeepCCBS_CallIndicator(const KeepCCBS_CallIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        KeepCCBS_CallIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~KeepCCBS_CallIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new KeepCCBS_CallIndicator(*this);
        }

        virtual std::string GetName() const
        { return "KeepCCBS_CallIndicator"; }

    };


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    CCBS_Indicators() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    CCBS_Indicators(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    CCBS_Indicators(const CCBS_Indicators& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CCBS_Indicators(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCcbs_PossibleStaticDescription();
    static its::AsnDescObject* GetKeepCCBS_CallIndicatorStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~CCBS_Indicators()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CCBS_Indicators(*this);
    }

    virtual std::string GetName() const
    { return "CCBS_Indicators"; }

    void SetCcbs_Possible(Ccbs_Possible* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_PossibleStaticDescription());
        AddElement(0, element);
    }

    void SetCcbs_Possible(const Ccbs_Possible& element)
    {
        its::AsnObject& asnObject = const_cast<Ccbs_Possible&>(element);
        asnObject.SetDescription(GetCcbs_PossibleStaticDescription());
        AddElement(0, element);
    }

    bool OptionCcbs_Possible() const
    {
        return Contains(0);
    }

    const Ccbs_Possible& GetCcbs_Possible() const
    {
        ITS_REQUIRE(OptionCcbs_Possible());
        return static_cast<const Ccbs_Possible&> (ElementAt(0));
    }

    void SetKeepCCBS_CallIndicator(KeepCCBS_CallIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetKeepCCBS_CallIndicatorStaticDescription());
        AddElement(1, element);
    }

    void SetKeepCCBS_CallIndicator(const KeepCCBS_CallIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<KeepCCBS_CallIndicator&>(element);
        asnObject.SetDescription(GetKeepCCBS_CallIndicatorStaticDescription());
        AddElement(1, element);
    }

    bool OptionKeepCCBS_CallIndicator() const
    {
        return Contains(1);
    }

    const KeepCCBS_CallIndicator& GetKeepCCBS_CallIndicator() const
    {
        ITS_REQUIRE(OptionKeepCCBS_CallIndicator());
        return static_cast<const KeepCCBS_CallIndicator&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CCBS_INDICATORS_H_)

