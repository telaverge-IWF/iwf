//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_VOICE_GROUP_CALL_DATA_H_)
#define _MAP_V13_VOICE_GROUP_CALL_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnBitString.h>

#include <map_v13_group_id.h>
#include <map_v13_extension_container.h>
#include <map_v13_additional_subscriptions.h>
#include <map_v13_additional_info.h>
#include <map_v13_long_group_id.h>



namespace map_v13 {



class VoiceGroupCallData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::GroupId GroupId;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::AdditionalSubscriptions AdditionalSubscriptions;


        typedef map_v13::AdditionalInfo AdditionalInfo;


        typedef map_v13::Long_GroupId Long_GroupId;


////////// End Nested Class(es) //////////

    VoiceGroupCallData() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    VoiceGroupCallData(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    VoiceGroupCallData(const VoiceGroupCallData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    VoiceGroupCallData(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGroupIdStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetAdditionalSubscriptionsStaticDescription();
    static its::AsnDescObject* GetAdditionalInfoStaticDescription();
    static its::AsnDescObject* GetLongGroupIdStaticDescription();

public:

    virtual ~VoiceGroupCallData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new VoiceGroupCallData(*this);
    }

    virtual std::string GetName() const
    { return "VoiceGroupCallData"; }

    void SetGroupId(GroupId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGroupIdStaticDescription());
        AddElement(0, element);
    }

    void SetGroupId(const GroupId& element)
    {
        its::AsnObject& asnObject = const_cast<GroupId&>(element);
        asnObject.SetDescription(GetGroupIdStaticDescription());
        AddElement(0, element);
    }

    const GroupId& GetGroupId() const
    {
        return static_cast<const GroupId&> (ElementAt(0));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(1);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(1));
    }

    void SetAdditionalSubscriptions(AdditionalSubscriptions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalSubscriptionsStaticDescription());
        AddElement(2, element);
    }

    void SetAdditionalSubscriptions(const AdditionalSubscriptions& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalSubscriptions&>(element);
        asnObject.SetDescription(GetAdditionalSubscriptionsStaticDescription());
        AddElement(2, element);
    }

    bool OptionAdditionalSubscriptions() const
    {
        return Contains(2);
    }

    const AdditionalSubscriptions& GetAdditionalSubscriptions() const
    {
        ITS_REQUIRE(OptionAdditionalSubscriptions());
        return static_cast<const AdditionalSubscriptions&> (ElementAt(2));
    }

    void SetAdditionalInfo(AdditionalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(3, element);
    }

    void SetAdditionalInfo(const AdditionalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalInfo&>(element);
        asnObject.SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionAdditionalInfo() const
    {
        return Contains(3);
    }

    const AdditionalInfo& GetAdditionalInfo() const
    {
        ITS_REQUIRE(OptionAdditionalInfo());
        return static_cast<const AdditionalInfo&> (ElementAt(3));
    }

    void SetLongGroupId(Long_GroupId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLongGroupIdStaticDescription());
        AddElement(4, element);
    }

    void SetLongGroupId(const Long_GroupId& element)
    {
        its::AsnObject& asnObject = const_cast<Long_GroupId&>(element);
        asnObject.SetDescription(GetLongGroupIdStaticDescription());
        AddElement(4, element);
    }

    bool OptionLongGroupId() const
    {
        return Contains(4);
    }

    const Long_GroupId& GetLongGroupId() const
    {
        ITS_REQUIRE(OptionLongGroupId());
        return static_cast<const Long_GroupId&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_VOICE_GROUP_CALL_DATA_H_)

