//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_GPRSMS_CLASS_H_)
#define _MAP_V13_GPRSMS_CLASS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v13_ms_network_capability.h>
#include <map_v13_ms_radio_access_capability.h>



namespace map_v13 {



class GPRSMSClass : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::MSNetworkCapability MSNetworkCapability;


        typedef map_v13::MSRadioAccessCapability MSRadioAccessCapability;


////////// End Nested Class(es) //////////

    GPRSMSClass() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    GPRSMSClass(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    GPRSMSClass(const GPRSMSClass& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    GPRSMSClass(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMSNetworkCapabilityStaticDescription();
    static its::AsnDescObject* GetMSRadioAccessCapabilityStaticDescription();

public:

    virtual ~GPRSMSClass()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GPRSMSClass(*this);
    }

    virtual std::string GetName() const
    { return "GPRSMSClass"; }

    void SetMSNetworkCapability(MSNetworkCapability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMSNetworkCapabilityStaticDescription());
        AddElement(0, element);
    }

    void SetMSNetworkCapability(const MSNetworkCapability& element)
    {
        its::AsnObject& asnObject = const_cast<MSNetworkCapability&>(element);
        asnObject.SetDescription(GetMSNetworkCapabilityStaticDescription());
        AddElement(0, element);
    }

    const MSNetworkCapability& GetMSNetworkCapability() const
    {
        return static_cast<const MSNetworkCapability&> (ElementAt(0));
    }

    void SetMSRadioAccessCapability(MSRadioAccessCapability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMSRadioAccessCapabilityStaticDescription());
        AddElement(1, element);
    }

    void SetMSRadioAccessCapability(const MSRadioAccessCapability& element)
    {
        its::AsnObject& asnObject = const_cast<MSRadioAccessCapability&>(element);
        asnObject.SetDescription(GetMSRadioAccessCapabilityStaticDescription());
        AddElement(1, element);
    }

    bool OptionMSRadioAccessCapability() const
    {
        return Contains(1);
    }

    const MSRadioAccessCapability& GetMSRadioAccessCapability() const
    {
        ITS_REQUIRE(OptionMSRadioAccessCapability());
        return static_cast<const MSRadioAccessCapability&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_GPRSMS_CLASS_H_)

