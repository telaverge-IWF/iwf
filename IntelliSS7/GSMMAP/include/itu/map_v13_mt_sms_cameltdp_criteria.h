//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_MT_SMS_CAMELTDP_CRITERIA_H_)
#define _MAP_V13_MT_SMS_CAMELTDP_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v13_sms_trigger_detection_point.h>
#include <map_v13_tpdu_type_criterion.h>



namespace map_v13 {



class MT_smsCAMELTDP_Criteria : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::SMS_TriggerDetectionPoint SMS_TriggerDetectionPoint;


        typedef map_v13::TPDU_TypeCriterion TPDU_TypeCriterion;


////////// End Nested Class(es) //////////

    MT_smsCAMELTDP_Criteria() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    MT_smsCAMELTDP_Criteria(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    MT_smsCAMELTDP_Criteria(const MT_smsCAMELTDP_Criteria& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MT_smsCAMELTDP_Criteria(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSms_TriggerDetectionPointStaticDescription();
    static its::AsnDescObject* GetTpdu_TypeCriterionStaticDescription();

public:

    virtual ~MT_smsCAMELTDP_Criteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MT_smsCAMELTDP_Criteria(*this);
    }

    virtual std::string GetName() const
    { return "MT_smsCAMELTDP_Criteria"; }

    void SetSms_TriggerDetectionPoint(SMS_TriggerDetectionPoint* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSms_TriggerDetectionPointStaticDescription());
        AddElement(0, element);
    }

    void SetSms_TriggerDetectionPoint(const SMS_TriggerDetectionPoint& element)
    {
        its::AsnObject& asnObject = const_cast<SMS_TriggerDetectionPoint&>(element);
        asnObject.SetDescription(GetSms_TriggerDetectionPointStaticDescription());
        AddElement(0, element);
    }

    const SMS_TriggerDetectionPoint& GetSms_TriggerDetectionPoint() const
    {
        return static_cast<const SMS_TriggerDetectionPoint&> (ElementAt(0));
    }

    void SetTpdu_TypeCriterion(TPDU_TypeCriterion* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTpdu_TypeCriterionStaticDescription());
        AddElement(1, element);
    }

    void SetTpdu_TypeCriterion(const TPDU_TypeCriterion& element)
    {
        its::AsnObject& asnObject = const_cast<TPDU_TypeCriterion&>(element);
        asnObject.SetDescription(GetTpdu_TypeCriterionStaticDescription());
        AddElement(1, element);
    }

    bool OptionTpdu_TypeCriterion() const
    {
        return Contains(1);
    }

    const TPDU_TypeCriterion& GetTpdu_TypeCriterion() const
    {
        ITS_REQUIRE(OptionTpdu_TypeCriterion());
        return static_cast<const TPDU_TypeCriterion&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_MT_SMS_CAMELTDP_CRITERIA_H_)

