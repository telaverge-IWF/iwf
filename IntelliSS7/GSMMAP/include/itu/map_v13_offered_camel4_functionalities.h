//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_OFFERED_CAMEL4_FUNCTIONALITIES_H_)
#define _MAP_V13_OFFERED_CAMEL4_FUNCTIONALITIES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class OfferedCamel4Functionalities : public its::AsnBitString
{
public:

    OfferedCamel4Functionalities() : its::AsnBitString(false)
    {
        Initialize();
    }

    OfferedCamel4Functionalities(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    OfferedCamel4Functionalities(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    OfferedCamel4Functionalities(const OfferedCamel4Functionalities& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    OfferedCamel4Functionalities(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    OfferedCamel4Functionalities(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~OfferedCamel4Functionalities()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new OfferedCamel4Functionalities(*this);
    }

    virtual std::string GetName() const
    { return "OfferedCamel4Functionalities"; }

    void SetCollectInformation()
    { Set(19); }

    void ResetCollectInformation()
    { Reset(19); }

    bool IsCollectInformationSet() const
    { return IsSet(19); }

    bool IsCollectInformationDefined() const
    { return 19 < GetSize(); }

    void SetServiceChangeDP()
    { Set(18); }

    void ResetServiceChangeDP()
    { Reset(18); }

    bool IsServiceChangeDPSet() const
    { return IsSet(18); }

    bool IsServiceChangeDPDefined() const
    { return 18 < GetSize(); }

    void SetCriteriaForChangeOfPositionDP()
    { Set(17); }

    void ResetCriteriaForChangeOfPositionDP()
    { Reset(17); }

    bool IsCriteriaForChangeOfPositionDPSet() const
    { return IsSet(17); }

    bool IsCriteriaForChangeOfPositionDPDefined() const
    { return 17 < GetSize(); }

    void SetServingNetworkEnhancedDialledServices()
    { Set(16); }

    void ResetServingNetworkEnhancedDialledServices()
    { Reset(16); }

    bool IsServingNetworkEnhancedDialledServicesSet() const
    { return IsSet(16); }

    bool IsServingNetworkEnhancedDialledServicesDefined() const
    { return 16 < GetSize(); }

    void SetSubscribedEnhancedDialledServices()
    { Set(15); }

    void ResetSubscribedEnhancedDialledServices()
    { Reset(15); }

    bool IsSubscribedEnhancedDialledServicesSet() const
    { return IsSet(15); }

    bool IsSubscribedEnhancedDialledServicesDefined() const
    { return 15 < GetSize(); }

    void SetCf_Enhancements()
    { Set(14); }

    void ResetCf_Enhancements()
    { Reset(14); }

    bool IsCf_EnhancementsSet() const
    { return IsSet(14); }

    bool IsCf_EnhancementsDefined() const
    { return 14 < GetSize(); }

    void SetWarningToneEnhancements()
    { Set(13); }

    void ResetWarningToneEnhancements()
    { Reset(13); }

    bool IsWarningToneEnhancementsSet() const
    { return IsSet(13); }

    bool IsWarningToneEnhancementsDefined() const
    { return 13 < GetSize(); }

    void SetOr_Interactions()
    { Set(12); }

    void ResetOr_Interactions()
    { Reset(12); }

    bool IsOr_InteractionsSet() const
    { return IsSet(12); }

    bool IsOr_InteractionsDefined() const
    { return 12 < GetSize(); }

    void SetChangeOfPositionDP()
    { Set(11); }

    void ResetChangeOfPositionDP()
    { Reset(11); }

    bool IsChangeOfPositionDPSet() const
    { return IsSet(11); }

    bool IsChangeOfPositionDPDefined() const
    { return 11 < GetSize(); }

    void SetLocationAtAlerting()
    { Set(10); }

    void ResetLocationAtAlerting()
    { Reset(10); }

    bool IsLocationAtAlertingSet() const
    { return IsSet(10); }

    bool IsLocationAtAlertingDefined() const
    { return 10 < GetSize(); }

    void SetAlertingDP()
    { Set(9); }

    void ResetAlertingDP()
    { Reset(9); }

    bool IsAlertingDPSet() const
    { return IsSet(9); }

    bool IsAlertingDPDefined() const
    { return 9 < GetSize(); }

    void SetChargingIndicator()
    { Set(8); }

    void ResetChargingIndicator()
    { Reset(8); }

    bool IsChargingIndicatorSet() const
    { return IsSet(8); }

    bool IsChargingIndicatorDefined() const
    { return 8 < GetSize(); }

    void SetDtmf_MidCall()
    { Set(7); }

    void ResetDtmf_MidCall()
    { Reset(7); }

    bool IsDtmf_MidCallSet() const
    { return IsSet(7); }

    bool IsDtmf_MidCallDefined() const
    { return 7 < GetSize(); }

    void SetPlayTone()
    { Set(6); }

    void ResetPlayTone()
    { Reset(6); }

    bool IsPlayToneSet() const
    { return IsSet(6); }

    bool IsPlayToneDefined() const
    { return 6 < GetSize(); }

    void SetDfc_WithArgument()
    { Set(5); }

    void ResetDfc_WithArgument()
    { Reset(5); }

    bool IsDfc_WithArgumentSet() const
    { return IsSet(5); }

    bool IsDfc_WithArgumentDefined() const
    { return 5 < GetSize(); }

    void SetEntityReleased()
    { Set(4); }

    void ResetEntityReleased()
    { Reset(4); }

    bool IsEntityReleasedSet() const
    { return IsSet(4); }

    bool IsEntityReleasedDefined() const
    { return 4 < GetSize(); }

    void SetDisconnectLeg()
    { Set(3); }

    void ResetDisconnectLeg()
    { Reset(3); }

    bool IsDisconnectLegSet() const
    { return IsSet(3); }

    bool IsDisconnectLegDefined() const
    { return 3 < GetSize(); }

    void SetMoveLeg()
    { Set(2); }

    void ResetMoveLeg()
    { Reset(2); }

    bool IsMoveLegSet() const
    { return IsSet(2); }

    bool IsMoveLegDefined() const
    { return 2 < GetSize(); }

    void SetSplitLeg()
    { Set(1); }

    void ResetSplitLeg()
    { Reset(1); }

    bool IsSplitLegSet() const
    { return IsSet(1); }

    bool IsSplitLegDefined() const
    { return 1 < GetSize(); }

    void SetInitiateCallAttempt()
    { Set(0); }

    void ResetInitiateCallAttempt()
    { Reset(0); }

    bool IsInitiateCallAttemptSet() const
    { return IsSet(0); }

    bool IsInitiateCallAttemptDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_OFFERED_CAMEL4_FUNCTIONALITIES_H_)

