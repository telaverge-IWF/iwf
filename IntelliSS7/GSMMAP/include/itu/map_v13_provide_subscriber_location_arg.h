//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PROVIDE_SUBSCRIBER_LOCATION_ARG_H_)
#define _MAP_V13_PROVIDE_SUBSCRIBER_LOCATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnBitString.h>
#include <AsnInteger.h>

#include <map_v13_location_type.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_lcs_client_id.h>
#include <map_v13_imsi.h>
#include <map_v13_lmsi.h>
#include <map_v13_imei.h>
#include <map_v13_lcs_priority.h>
#include <map_v13_lcs_qo_s.h>
#include <map_v13_extension_container.h>
#include <map_v13_supported_gad_shapes.h>
#include <map_v13_lcs_reference_number.h>
#include <map_v13_lcs_service_type_id.h>
#include <map_v13_lcs_codeword.h>
#include <map_v13_lcs_privacy_check.h>
#include <map_v13_area_event_info.h>
#include <map_v13_gsn_address.h>
#include <map_v13_periodic_ldr_info.h>
#include <map_v13_reporting_plmn_list.h>



namespace map_v13 {



class ProvideSubscriberLocation_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class PrivacyOverride : public its::AsnNull
    {
    public:

        PrivacyOverride() : its::AsnNull(false)
        {
            Initialize();
        }

        PrivacyOverride(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        PrivacyOverride(const PrivacyOverride& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        PrivacyOverride(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~PrivacyOverride()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PrivacyOverride(*this);
        }

        virtual std::string GetName() const
        { return "PrivacyOverride"; }

    };



    class Mo_lrShortCircuitIndicator : public its::AsnNull
    {
    public:

        Mo_lrShortCircuitIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        Mo_lrShortCircuitIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Mo_lrShortCircuitIndicator(const Mo_lrShortCircuitIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Mo_lrShortCircuitIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mo_lrShortCircuitIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mo_lrShortCircuitIndicator(*this);
        }

        virtual std::string GetName() const
        { return "Mo_lrShortCircuitIndicator"; }

    };


        typedef map_v13::LocationType LocationType;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::LCS_ClientID LCS_ClientID;


        typedef map_v13::IMSI IMSI;


        typedef map_v13::LMSI LMSI;


        typedef map_v13::IMEI IMEI;


        typedef map_v13::LCS_Priority LCS_Priority;


        typedef map_v13::LCS_QoS LCS_QoS;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::SupportedGADShapes SupportedGADShapes;


        typedef map_v13::LCS_ReferenceNumber LCS_ReferenceNumber;


        typedef map_v13::LCSServiceTypeID LCSServiceTypeID;


        typedef map_v13::LCSCodeword LCSCodeword;


        typedef map_v13::LCS_PrivacyCheck LCS_PrivacyCheck;


        typedef map_v13::AreaEventInfo AreaEventInfo;


        typedef map_v13::GSN_Address GSN_Address;


        typedef map_v13::PeriodicLDRInfo PeriodicLDRInfo;


        typedef map_v13::ReportingPLMNList ReportingPLMNList;


////////// End Nested Class(es) //////////

    ProvideSubscriberLocation_Arg() : its::AsnSequence(21, false)
    {
        Initialize();
    }

    ProvideSubscriberLocation_Arg(its::Octets& octets) : its::AsnSequence(21, false)
    {
        Initialize();
        Decode(octets);
    }

    ProvideSubscriberLocation_Arg(const ProvideSubscriberLocation_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ProvideSubscriberLocation_Arg(its::AsnDescObject* description) : its::AsnSequence(21, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocationTypeStaticDescription();
    static its::AsnDescObject* GetMlc_NumberStaticDescription();
    static its::AsnDescObject* GetLcs_ClientIDStaticDescription();
    static its::AsnDescObject* GetPrivacyOverrideStaticDescription();
    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetLmsiStaticDescription();
    static its::AsnDescObject* GetImeiStaticDescription();
    static its::AsnDescObject* GetLcs_PriorityStaticDescription();
    static its::AsnDescObject* GetLcs_QoSStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetSupportedGADShapesStaticDescription();
    static its::AsnDescObject* GetLcs_ReferenceNumberStaticDescription();
    static its::AsnDescObject* GetLcsServiceTypeIDStaticDescription();
    static its::AsnDescObject* GetLcsCodewordStaticDescription();
    static its::AsnDescObject* GetLcs_PrivacyCheckStaticDescription();
    static its::AsnDescObject* GetAreaEventInfoStaticDescription();
    static its::AsnDescObject* GetH_gmlc_AddressStaticDescription();
    static its::AsnDescObject* GetMo_lrShortCircuitIndicatorStaticDescription();
    static its::AsnDescObject* GetPeriodicLDRInfoStaticDescription();
    static its::AsnDescObject* GetReportingPLMNListStaticDescription();

public:

    virtual ~ProvideSubscriberLocation_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ProvideSubscriberLocation_Arg(*this);
    }

    virtual std::string GetName() const
    { return "ProvideSubscriberLocation_Arg"; }

    void SetLocationType(LocationType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationTypeStaticDescription());
        AddElement(0, element);
    }

    void SetLocationType(const LocationType& element)
    {
        its::AsnObject& asnObject = const_cast<LocationType&>(element);
        asnObject.SetDescription(GetLocationTypeStaticDescription());
        AddElement(0, element);
    }

    const LocationType& GetLocationType() const
    {
        return static_cast<const LocationType&> (ElementAt(0));
    }

    void SetMlc_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMlc_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetMlc_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMlc_NumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetMlc_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetLcs_ClientID(LCS_ClientID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_ClientIDStaticDescription());
        AddElement(2, element);
    }

    void SetLcs_ClientID(const LCS_ClientID& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_ClientID&>(element);
        asnObject.SetDescription(GetLcs_ClientIDStaticDescription());
        AddElement(2, element);
    }

    bool OptionLcs_ClientID() const
    {
        return Contains(2);
    }

    const LCS_ClientID& GetLcs_ClientID() const
    {
        ITS_REQUIRE(OptionLcs_ClientID());
        return static_cast<const LCS_ClientID&> (ElementAt(2));
    }

    void SetPrivacyOverride(PrivacyOverride* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPrivacyOverrideStaticDescription());
        AddElement(3, element);
    }

    void SetPrivacyOverride(const PrivacyOverride& element)
    {
        its::AsnObject& asnObject = const_cast<PrivacyOverride&>(element);
        asnObject.SetDescription(GetPrivacyOverrideStaticDescription());
        AddElement(3, element);
    }

    bool OptionPrivacyOverride() const
    {
        return Contains(3);
    }

    const PrivacyOverride& GetPrivacyOverride() const
    {
        ITS_REQUIRE(OptionPrivacyOverride());
        return static_cast<const PrivacyOverride&> (ElementAt(3));
    }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(4, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(4, element);
    }

    bool OptionImsi() const
    {
        return Contains(4);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(4));
    }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(5, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(5, element);
    }

    bool OptionMsisdn() const
    {
        return Contains(5);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        ITS_REQUIRE(OptionMsisdn());
        return static_cast<const ISDN_AddressString&> (ElementAt(5));
    }

    void SetLmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLmsiStaticDescription());
        AddElement(6, element);
    }

    void SetLmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetLmsiStaticDescription());
        AddElement(6, element);
    }

    bool OptionLmsi() const
    {
        return Contains(6);
    }

    const LMSI& GetLmsi() const
    {
        ITS_REQUIRE(OptionLmsi());
        return static_cast<const LMSI&> (ElementAt(6));
    }

    void SetImei(IMEI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImeiStaticDescription());
        AddElement(7, element);
    }

    void SetImei(const IMEI& element)
    {
        its::AsnObject& asnObject = const_cast<IMEI&>(element);
        asnObject.SetDescription(GetImeiStaticDescription());
        AddElement(7, element);
    }

    bool OptionImei() const
    {
        return Contains(7);
    }

    const IMEI& GetImei() const
    {
        ITS_REQUIRE(OptionImei());
        return static_cast<const IMEI&> (ElementAt(7));
    }

    void SetLcs_Priority(LCS_Priority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_PriorityStaticDescription());
        AddElement(8, element);
    }

    void SetLcs_Priority(const LCS_Priority& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_Priority&>(element);
        asnObject.SetDescription(GetLcs_PriorityStaticDescription());
        AddElement(8, element);
    }

    bool OptionLcs_Priority() const
    {
        return Contains(8);
    }

    const LCS_Priority& GetLcs_Priority() const
    {
        ITS_REQUIRE(OptionLcs_Priority());
        return static_cast<const LCS_Priority&> (ElementAt(8));
    }

    void SetLcs_QoS(LCS_QoS* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_QoSStaticDescription());
        AddElement(9, element);
    }

    void SetLcs_QoS(const LCS_QoS& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_QoS&>(element);
        asnObject.SetDescription(GetLcs_QoSStaticDescription());
        AddElement(9, element);
    }

    bool OptionLcs_QoS() const
    {
        return Contains(9);
    }

    const LCS_QoS& GetLcs_QoS() const
    {
        ITS_REQUIRE(OptionLcs_QoS());
        return static_cast<const LCS_QoS&> (ElementAt(9));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(10, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(10, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(10);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(10));
    }

    void SetSupportedGADShapes(SupportedGADShapes* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedGADShapesStaticDescription());
        AddElement(11, element);
    }

    void SetSupportedGADShapes(const SupportedGADShapes& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedGADShapes&>(element);
        asnObject.SetDescription(GetSupportedGADShapesStaticDescription());
        AddElement(11, element);
    }

    bool OptionSupportedGADShapes() const
    {
        return Contains(11);
    }

    const SupportedGADShapes& GetSupportedGADShapes() const
    {
        ITS_REQUIRE(OptionSupportedGADShapes());
        return static_cast<const SupportedGADShapes&> (ElementAt(11));
    }

    void SetLcs_ReferenceNumber(LCS_ReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_ReferenceNumberStaticDescription());
        AddElement(12, element);
    }

    void SetLcs_ReferenceNumber(const LCS_ReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_ReferenceNumber&>(element);
        asnObject.SetDescription(GetLcs_ReferenceNumberStaticDescription());
        AddElement(12, element);
    }

    bool OptionLcs_ReferenceNumber() const
    {
        return Contains(12);
    }

    const LCS_ReferenceNumber& GetLcs_ReferenceNumber() const
    {
        ITS_REQUIRE(OptionLcs_ReferenceNumber());
        return static_cast<const LCS_ReferenceNumber&> (ElementAt(12));
    }

    void SetLcsServiceTypeID(LCSServiceTypeID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsServiceTypeIDStaticDescription());
        AddElement(13, element);
    }

    void SetLcsServiceTypeID(const LCSServiceTypeID& element)
    {
        its::AsnObject& asnObject = const_cast<LCSServiceTypeID&>(element);
        asnObject.SetDescription(GetLcsServiceTypeIDStaticDescription());
        AddElement(13, element);
    }

    bool OptionLcsServiceTypeID() const
    {
        return Contains(13);
    }

    const LCSServiceTypeID& GetLcsServiceTypeID() const
    {
        ITS_REQUIRE(OptionLcsServiceTypeID());
        return static_cast<const LCSServiceTypeID&> (ElementAt(13));
    }

    void SetLcsCodeword(LCSCodeword* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsCodewordStaticDescription());
        AddElement(14, element);
    }

    void SetLcsCodeword(const LCSCodeword& element)
    {
        its::AsnObject& asnObject = const_cast<LCSCodeword&>(element);
        asnObject.SetDescription(GetLcsCodewordStaticDescription());
        AddElement(14, element);
    }

    bool OptionLcsCodeword() const
    {
        return Contains(14);
    }

    const LCSCodeword& GetLcsCodeword() const
    {
        ITS_REQUIRE(OptionLcsCodeword());
        return static_cast<const LCSCodeword&> (ElementAt(14));
    }

    void SetLcs_PrivacyCheck(LCS_PrivacyCheck* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcs_PrivacyCheckStaticDescription());
        AddElement(15, element);
    }

    void SetLcs_PrivacyCheck(const LCS_PrivacyCheck& element)
    {
        its::AsnObject& asnObject = const_cast<LCS_PrivacyCheck&>(element);
        asnObject.SetDescription(GetLcs_PrivacyCheckStaticDescription());
        AddElement(15, element);
    }

    bool OptionLcs_PrivacyCheck() const
    {
        return Contains(15);
    }

    const LCS_PrivacyCheck& GetLcs_PrivacyCheck() const
    {
        ITS_REQUIRE(OptionLcs_PrivacyCheck());
        return static_cast<const LCS_PrivacyCheck&> (ElementAt(15));
    }

    void SetAreaEventInfo(AreaEventInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAreaEventInfoStaticDescription());
        AddElement(16, element);
    }

    void SetAreaEventInfo(const AreaEventInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AreaEventInfo&>(element);
        asnObject.SetDescription(GetAreaEventInfoStaticDescription());
        AddElement(16, element);
    }

    bool OptionAreaEventInfo() const
    {
        return Contains(16);
    }

    const AreaEventInfo& GetAreaEventInfo() const
    {
        ITS_REQUIRE(OptionAreaEventInfo());
        return static_cast<const AreaEventInfo&> (ElementAt(16));
    }

    void SetH_gmlc_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetH_gmlc_AddressStaticDescription());
        AddElement(17, element);
    }

    void SetH_gmlc_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetH_gmlc_AddressStaticDescription());
        AddElement(17, element);
    }

    bool OptionH_gmlc_Address() const
    {
        return Contains(17);
    }

    const GSN_Address& GetH_gmlc_Address() const
    {
        ITS_REQUIRE(OptionH_gmlc_Address());
        return static_cast<const GSN_Address&> (ElementAt(17));
    }

    void SetMo_lrShortCircuitIndicator(Mo_lrShortCircuitIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMo_lrShortCircuitIndicatorStaticDescription());
        AddElement(18, element);
    }

    void SetMo_lrShortCircuitIndicator(const Mo_lrShortCircuitIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<Mo_lrShortCircuitIndicator&>(element);
        asnObject.SetDescription(GetMo_lrShortCircuitIndicatorStaticDescription());
        AddElement(18, element);
    }

    bool OptionMo_lrShortCircuitIndicator() const
    {
        return Contains(18);
    }

    const Mo_lrShortCircuitIndicator& GetMo_lrShortCircuitIndicator() const
    {
        ITS_REQUIRE(OptionMo_lrShortCircuitIndicator());
        return static_cast<const Mo_lrShortCircuitIndicator&> (ElementAt(18));
    }

    void SetPeriodicLDRInfo(PeriodicLDRInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPeriodicLDRInfoStaticDescription());
        AddElement(19, element);
    }

    void SetPeriodicLDRInfo(const PeriodicLDRInfo& element)
    {
        its::AsnObject& asnObject = const_cast<PeriodicLDRInfo&>(element);
        asnObject.SetDescription(GetPeriodicLDRInfoStaticDescription());
        AddElement(19, element);
    }

    bool OptionPeriodicLDRInfo() const
    {
        return Contains(19);
    }

    const PeriodicLDRInfo& GetPeriodicLDRInfo() const
    {
        ITS_REQUIRE(OptionPeriodicLDRInfo());
        return static_cast<const PeriodicLDRInfo&> (ElementAt(19));
    }

    void SetReportingPLMNList(ReportingPLMNList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReportingPLMNListStaticDescription());
        AddElement(20, element);
    }

    void SetReportingPLMNList(const ReportingPLMNList& element)
    {
        its::AsnObject& asnObject = const_cast<ReportingPLMNList&>(element);
        asnObject.SetDescription(GetReportingPLMNListStaticDescription());
        AddElement(20, element);
    }

    bool OptionReportingPLMNList() const
    {
        return Contains(20);
    }

    const ReportingPLMNList& GetReportingPLMNList() const
    {
        ITS_REQUIRE(OptionReportingPLMNList());
        return static_cast<const ReportingPLMNList&> (ElementAt(20));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PROVIDE_SUBSCRIBER_LOCATION_ARG_H_)

