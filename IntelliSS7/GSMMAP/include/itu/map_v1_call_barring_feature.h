//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_CALL_BARRING_FEATURE_H_)
#define _MAP_V1_CALL_BARRING_FEATURE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v1_basic_service_code.h>
#include <map_v1_ss_status.h>



namespace map_v1 {



class CallBarringFeature : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::BasicServiceCode BasicServiceCode;


        typedef map_v1::SS_Status SS_Status;


////////// End Nested Class(es) //////////

    CallBarringFeature() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CallBarringFeature(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CallBarringFeature(const CallBarringFeature& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CallBarringFeature(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetBasicServiceCodeStaticDescription();
    static its::AsnDescObject* GetSs_StatusStaticDescription();

public:

    virtual ~CallBarringFeature()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallBarringFeature(*this);
    }

    virtual std::string GetName() const
    { return "CallBarringFeature"; }

    void SetBasicServiceCode(BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceCodeStaticDescription());
        AddElement(0, element);
    }

    void SetBasicServiceCode(const BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceCodeStaticDescription());
        AddElement(0, element);
    }

    bool OptionBasicServiceCode() const
    {
        return Contains(0);
    }

    const BasicServiceCode& GetBasicServiceCode() const
    {
        ITS_REQUIRE(OptionBasicServiceCode());
        return static_cast<const BasicServiceCode&> (ElementAt(0));
    }

    void SetSs_Status(SS_Status* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    void SetSs_Status(const SS_Status& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Status&>(element);
        asnObject.SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    const SS_Status& GetSs_Status() const
    {
        return static_cast<const SS_Status&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_CALL_BARRING_FEATURE_H_)

