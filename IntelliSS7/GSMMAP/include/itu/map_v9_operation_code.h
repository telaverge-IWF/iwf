//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_OPERATION_CODE_H_)
#define _MAP_V9_OPERATION_CODE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnObjectIdentifier.h>



namespace map_v9 {



class OperationCode : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class LocalValue : public its::AsnInteger
    {
    public:

        LocalValue() : its::AsnInteger(false)
        {
            Initialize();
        }

        LocalValue(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        LocalValue(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        LocalValue(const LocalValue& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        LocalValue(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        LocalValue(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LocalValue()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LocalValue(*this);
        }

        virtual std::string GetName() const
        { return "LocalValue"; }

    };



    class GlobalValue : public its::AsnObjectIdentifier
    {
    public:

        GlobalValue() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        GlobalValue(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        GlobalValue(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        GlobalValue(const GlobalValue& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        GlobalValue(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        GlobalValue(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~GlobalValue()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new GlobalValue(*this);
        }

        virtual std::string GetName() const
        { return "GlobalValue"; }

    };


////////// End Nested Class(es) //////////

    OperationCode() : its::AsnChoice(false)
    {
        Initialize();
    }

    OperationCode(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    OperationCode(const OperationCode& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    OperationCode(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    OperationCode(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocalValueStaticDescription();
    static its::AsnDescObject* GetGlobalValueStaticDescription();

public:

    virtual ~OperationCode()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new OperationCode(*this);
    }

    virtual std::string GetName() const
    { return "OperationCode"; }

    void SetChoiceLocalValue(LocalValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLocalValueStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLocalValue(const LocalValue& choice)
    {
        its::AsnObject& asnObject = const_cast<LocalValue&>(choice);
        asnObject.SetDescription(GetLocalValueStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLocalValue() const
    {
        return Contains(GetLocalValueStaticDescription()->TagIdentity());
    }

    const LocalValue& GetChoiceLocalValue() const
    {
        ITS_REQUIRE(ChoiceLocalValue());
        return static_cast<const LocalValue&> (GetChoice());
    }

    void SetChoiceGlobalValue(GlobalValue* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetGlobalValueStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceGlobalValue(const GlobalValue& choice)
    {
        its::AsnObject& asnObject = const_cast<GlobalValue&>(choice);
        asnObject.SetDescription(GetGlobalValueStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceGlobalValue() const
    {
        return Contains(GetGlobalValueStaticDescription()->TagIdentity());
    }

    const GlobalValue& GetChoiceGlobalValue() const
    {
        ITS_REQUIRE(ChoiceGlobalValue());
        return static_cast<const GlobalValue&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_OPERATION_CODE_H_)

