//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_SS_SUBSCRIPTION_OPTION_H_)
#define _MAP_V3_SS_SUBSCRIPTION_OPTION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnEnumerated.h>

#include <map_v3_cli_restriction_option.h>
#include <map_v3_override_category.h>



namespace map_v3 {



class SS_SubscriptionOption : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v3::CliRestrictionOption CliRestrictionOption;


        typedef map_v3::OverrideCategory OverrideCategory;


////////// End Nested Class(es) //////////

    SS_SubscriptionOption() : its::AsnChoice(false)
    {
        Initialize();
    }

    SS_SubscriptionOption(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    SS_SubscriptionOption(const SS_SubscriptionOption& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    SS_SubscriptionOption(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    SS_SubscriptionOption(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCliRestrictionOptionStaticDescription();
    static its::AsnDescObject* GetOverrideCategoryStaticDescription();

public:

    virtual ~SS_SubscriptionOption()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SS_SubscriptionOption(*this);
    }

    virtual std::string GetName() const
    { return "SS_SubscriptionOption"; }

    void SetChoiceCliRestrictionOption(CliRestrictionOption* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCliRestrictionOptionStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCliRestrictionOption(const CliRestrictionOption& choice)
    {
        its::AsnObject& asnObject = const_cast<CliRestrictionOption&>(choice);
        asnObject.SetDescription(GetCliRestrictionOptionStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCliRestrictionOption() const
    {
        return Contains(GetCliRestrictionOptionStaticDescription()->TagIdentity());
    }

    const CliRestrictionOption& GetChoiceCliRestrictionOption() const
    {
        ITS_REQUIRE(ChoiceCliRestrictionOption());
        return static_cast<const CliRestrictionOption&> (GetChoice());
    }

    void SetChoiceOverrideCategory(OverrideCategory* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOverrideCategoryStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOverrideCategory(const OverrideCategory& choice)
    {
        its::AsnObject& asnObject = const_cast<OverrideCategory&>(choice);
        asnObject.SetDescription(GetOverrideCategoryStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOverrideCategory() const
    {
        return Contains(GetOverrideCategoryStaticDescription()->TagIdentity());
    }

    const OverrideCategory& GetChoiceOverrideCategory() const
    {
        ITS_REQUIRE(ChoiceOverrideCategory());
        return static_cast<const OverrideCategory&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_SS_SUBSCRIPTION_OPTION_H_)

