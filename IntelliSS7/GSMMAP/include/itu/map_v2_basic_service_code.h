//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_BASIC_SERVICE_CODE_H_)
#define _MAP_V2_BASIC_SERVICE_CODE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v2_bearer_service_code.h>
#include <map_v2_teleservice_code.h>



namespace map_v2 {



class BasicServiceCode : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::BearerServiceCode BearerServiceCode;


        typedef map_v2::TeleserviceCode TeleserviceCode;


////////// End Nested Class(es) //////////

    BasicServiceCode() : its::AsnChoice(false)
    {
        Initialize();
    }

    BasicServiceCode(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    BasicServiceCode(const BasicServiceCode& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    BasicServiceCode(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    BasicServiceCode(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetBearerServiceStaticDescription();
    static its::AsnDescObject* GetTeleserviceStaticDescription();

public:

    virtual ~BasicServiceCode()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new BasicServiceCode(*this);
    }

    virtual std::string GetName() const
    { return "BasicServiceCode"; }

    void SetChoiceBearerService(BearerServiceCode* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetBearerServiceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceBearerService(const BearerServiceCode& choice)
    {
        its::AsnObject& asnObject = const_cast<BearerServiceCode&>(choice);
        asnObject.SetDescription(GetBearerServiceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceBearerService() const
    {
        return Contains(GetBearerServiceStaticDescription()->TagIdentity());
    }

    const BearerServiceCode& GetChoiceBearerService() const
    {
        ITS_REQUIRE(ChoiceBearerService());
        return static_cast<const BearerServiceCode&> (GetChoice());
    }

    void SetChoiceTeleservice(TeleserviceCode* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTeleserviceStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTeleservice(const TeleserviceCode& choice)
    {
        its::AsnObject& asnObject = const_cast<TeleserviceCode&>(choice);
        asnObject.SetDescription(GetTeleserviceStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTeleservice() const
    {
        return Contains(GetTeleserviceStaticDescription()->TagIdentity());
    }

    const TeleserviceCode& GetChoiceTeleservice() const
    {
        ITS_REQUIRE(ChoiceTeleservice());
        return static_cast<const TeleserviceCode&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_BASIC_SERVICE_CODE_H_)

