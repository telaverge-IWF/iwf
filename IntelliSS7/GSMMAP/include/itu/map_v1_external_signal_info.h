//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_EXTERNAL_SIGNAL_INFO_H_)
#define _MAP_V1_EXTERNAL_SIGNAL_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <map_v1_protocol_id.h>
#include <map_v1_signal_info.h>



namespace map_v1 {



class ExternalSignalInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::ProtocolId ProtocolId;


        typedef map_v1::SignalInfo SignalInfo;


////////// End Nested Class(es) //////////

    ExternalSignalInfo() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    ExternalSignalInfo(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    ExternalSignalInfo(const ExternalSignalInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ExternalSignalInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetProtocolIdStaticDescription();
    static its::AsnDescObject* GetSignalInfoStaticDescription();

public:

    virtual ~ExternalSignalInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ExternalSignalInfo(*this);
    }

    virtual std::string GetName() const
    { return "ExternalSignalInfo"; }

    void SetProtocolId(ProtocolId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetProtocolIdStaticDescription());
        AddElement(0, element);
    }

    void SetProtocolId(const ProtocolId& element)
    {
        its::AsnObject& asnObject = const_cast<ProtocolId&>(element);
        asnObject.SetDescription(GetProtocolIdStaticDescription());
        AddElement(0, element);
    }

    const ProtocolId& GetProtocolId() const
    {
        return static_cast<const ProtocolId&> (ElementAt(0));
    }

    void SetSignalInfo(SignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSignalInfoStaticDescription());
        AddElement(1, element);
    }

    void SetSignalInfo(const SignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SignalInfo&>(element);
        asnObject.SetDescription(GetSignalInfoStaticDescription());
        AddElement(1, element);
    }

    const SignalInfo& GetSignalInfo() const
    {
        return static_cast<const SignalInfo&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_EXTERNAL_SIGNAL_INFO_H_)

