//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SUPPORTED_GAD_SHAPES_H_)
#define _MAP_V13_SUPPORTED_GAD_SHAPES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class SupportedGADShapes : public its::AsnBitString
{
public:

    SupportedGADShapes() : its::AsnBitString(false)
    {
        Initialize();
    }

    SupportedGADShapes(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    SupportedGADShapes(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    SupportedGADShapes(const SupportedGADShapes& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    SupportedGADShapes(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    SupportedGADShapes(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SupportedGADShapes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SupportedGADShapes(*this);
    }

    virtual std::string GetName() const
    { return "SupportedGADShapes"; }

    void SetEllipsoidArc()
    { Set(6); }

    void ResetEllipsoidArc()
    { Reset(6); }

    bool IsEllipsoidArcSet() const
    { return IsSet(6); }

    bool IsEllipsoidArcDefined() const
    { return 6 < GetSize(); }

    void SetEllipsoidPointWithAltitudeAndUncertaintyElipsoid()
    { Set(5); }

    void ResetEllipsoidPointWithAltitudeAndUncertaintyElipsoid()
    { Reset(5); }

    bool IsEllipsoidPointWithAltitudeAndUncertaintyElipsoidSet() const
    { return IsSet(5); }

    bool IsEllipsoidPointWithAltitudeAndUncertaintyElipsoidDefined() const
    { return 5 < GetSize(); }

    void SetEllipsoidPointWithAltitude()
    { Set(4); }

    void ResetEllipsoidPointWithAltitude()
    { Reset(4); }

    bool IsEllipsoidPointWithAltitudeSet() const
    { return IsSet(4); }

    bool IsEllipsoidPointWithAltitudeDefined() const
    { return 4 < GetSize(); }

    void SetPolygon()
    { Set(3); }

    void ResetPolygon()
    { Reset(3); }

    bool IsPolygonSet() const
    { return IsSet(3); }

    bool IsPolygonDefined() const
    { return 3 < GetSize(); }

    void SetEllipsoidPointWithUncertaintyEllipse()
    { Set(2); }

    void ResetEllipsoidPointWithUncertaintyEllipse()
    { Reset(2); }

    bool IsEllipsoidPointWithUncertaintyEllipseSet() const
    { return IsSet(2); }

    bool IsEllipsoidPointWithUncertaintyEllipseDefined() const
    { return 2 < GetSize(); }

    void SetEllipsoidPointWithUncertaintyCircle()
    { Set(1); }

    void ResetEllipsoidPointWithUncertaintyCircle()
    { Reset(1); }

    bool IsEllipsoidPointWithUncertaintyCircleSet() const
    { return IsSet(1); }

    bool IsEllipsoidPointWithUncertaintyCircleDefined() const
    { return 1 < GetSize(); }

    void SetEllipsoidPoint()
    { Set(0); }

    void ResetEllipsoidPoint()
    { Reset(0); }

    bool IsEllipsoidPointSet() const
    { return IsSet(0); }

    bool IsEllipsoidPointDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_SUPPORTED_GAD_SHAPES_H_)

