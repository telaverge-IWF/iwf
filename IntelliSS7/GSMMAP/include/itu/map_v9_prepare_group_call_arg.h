//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_PREPARE_GROUP_CALL_ARG_H_)
#define _MAP_V9_PREPARE_GROUP_CALL_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v9_ext_teleservice_code.h>
#include <map_v9_asci_call_reference.h>
#include <map_v9_codec_info.h>
#include <map_v9_ciphering_algorithm.h>
#include <map_v9_group_key_number.h>
#include <map_v9_kc.h>
#include <map_v9_emlpp_priority.h>
#include <map_v9_extension_container.h>
#include <map_v9_vstk.h>
#include <map_v9_vstk_rand.h>



namespace map_v9 {



class PrepareGroupCallArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class UplinkFree : public its::AsnNull
    {
    public:

        UplinkFree() : its::AsnNull(false)
        {
            Initialize();
        }

        UplinkFree(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        UplinkFree(const UplinkFree& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        UplinkFree(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UplinkFree()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UplinkFree(*this);
        }

        virtual std::string GetName() const
        { return "UplinkFree"; }

    };


        typedef map_v9::Ext_TeleserviceCode Ext_TeleserviceCode;


        typedef map_v9::ASCI_CallReference ASCI_CallReference;


        typedef map_v9::CODEC_Info CODEC_Info;


        typedef map_v9::CipheringAlgorithm CipheringAlgorithm;


        typedef map_v9::GroupKeyNumber GroupKeyNumber;


        typedef map_v9::Kc Kc;


        typedef map_v9::EMLPP_Priority EMLPP_Priority;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::VSTK VSTK;


        typedef map_v9::VSTK_RAND VSTK_RAND;


////////// End Nested Class(es) //////////

    PrepareGroupCallArg() : its::AsnSequence(11, false)
    {
        Initialize();
    }

    PrepareGroupCallArg(its::Octets& octets) : its::AsnSequence(11, false)
    {
        Initialize();
        Decode(octets);
    }

    PrepareGroupCallArg(const PrepareGroupCallArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PrepareGroupCallArg(its::AsnDescObject* description) : its::AsnSequence(11, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTeleserviceStaticDescription();
    static its::AsnDescObject* GetAsciCallReferenceStaticDescription();
    static its::AsnDescObject* GetCodec_InfoStaticDescription();
    static its::AsnDescObject* GetCipheringAlgorithmStaticDescription();
    static its::AsnDescObject* GetGroupKeyNumberStaticDescription();
    static its::AsnDescObject* GetGroupKeyStaticDescription();
    static its::AsnDescObject* GetPriorityStaticDescription();
    static its::AsnDescObject* GetUplinkFreeStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetVstkStaticDescription();
    static its::AsnDescObject* GetVstk_randStaticDescription();

public:

    virtual ~PrepareGroupCallArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PrepareGroupCallArg(*this);
    }

    virtual std::string GetName() const
    { return "PrepareGroupCallArg"; }

    void SetTeleservice(Ext_TeleserviceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeleserviceStaticDescription());
        AddElement(0, element);
    }

    void SetTeleservice(const Ext_TeleserviceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_TeleserviceCode&>(element);
        asnObject.SetDescription(GetTeleserviceStaticDescription());
        AddElement(0, element);
    }

    const Ext_TeleserviceCode& GetTeleservice() const
    {
        return static_cast<const Ext_TeleserviceCode&> (ElementAt(0));
    }

    void SetAsciCallReference(ASCI_CallReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(1, element);
    }

    void SetAsciCallReference(const ASCI_CallReference& element)
    {
        its::AsnObject& asnObject = const_cast<ASCI_CallReference&>(element);
        asnObject.SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(1, element);
    }

    const ASCI_CallReference& GetAsciCallReference() const
    {
        return static_cast<const ASCI_CallReference&> (ElementAt(1));
    }

    void SetCodec_Info(CODEC_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCodec_InfoStaticDescription());
        AddElement(2, element);
    }

    void SetCodec_Info(const CODEC_Info& element)
    {
        its::AsnObject& asnObject = const_cast<CODEC_Info&>(element);
        asnObject.SetDescription(GetCodec_InfoStaticDescription());
        AddElement(2, element);
    }

    const CODEC_Info& GetCodec_Info() const
    {
        return static_cast<const CODEC_Info&> (ElementAt(2));
    }

    void SetCipheringAlgorithm(CipheringAlgorithm* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCipheringAlgorithmStaticDescription());
        AddElement(3, element);
    }

    void SetCipheringAlgorithm(const CipheringAlgorithm& element)
    {
        its::AsnObject& asnObject = const_cast<CipheringAlgorithm&>(element);
        asnObject.SetDescription(GetCipheringAlgorithmStaticDescription());
        AddElement(3, element);
    }

    const CipheringAlgorithm& GetCipheringAlgorithm() const
    {
        return static_cast<const CipheringAlgorithm&> (ElementAt(3));
    }

    void SetGroupKeyNumber(GroupKeyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGroupKeyNumberStaticDescription());
        AddElement(4, element);
    }

    void SetGroupKeyNumber(const GroupKeyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<GroupKeyNumber&>(element);
        asnObject.SetDescription(GetGroupKeyNumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionGroupKeyNumber() const
    {
        return Contains(4);
    }

    const GroupKeyNumber& GetGroupKeyNumber() const
    {
        ITS_REQUIRE(OptionGroupKeyNumber());
        return static_cast<const GroupKeyNumber&> (ElementAt(4));
    }

    void SetGroupKey(Kc* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGroupKeyStaticDescription());
        AddElement(5, element);
    }

    void SetGroupKey(const Kc& element)
    {
        its::AsnObject& asnObject = const_cast<Kc&>(element);
        asnObject.SetDescription(GetGroupKeyStaticDescription());
        AddElement(5, element);
    }

    bool OptionGroupKey() const
    {
        return Contains(5);
    }

    const Kc& GetGroupKey() const
    {
        ITS_REQUIRE(OptionGroupKey());
        return static_cast<const Kc&> (ElementAt(5));
    }

    void SetPriority(EMLPP_Priority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPriorityStaticDescription());
        AddElement(6, element);
    }

    void SetPriority(const EMLPP_Priority& element)
    {
        its::AsnObject& asnObject = const_cast<EMLPP_Priority&>(element);
        asnObject.SetDescription(GetPriorityStaticDescription());
        AddElement(6, element);
    }

    bool OptionPriority() const
    {
        return Contains(6);
    }

    const EMLPP_Priority& GetPriority() const
    {
        ITS_REQUIRE(OptionPriority());
        return static_cast<const EMLPP_Priority&> (ElementAt(6));
    }

    void SetUplinkFree(UplinkFree* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUplinkFreeStaticDescription());
        AddElement(7, element);
    }

    void SetUplinkFree(const UplinkFree& element)
    {
        its::AsnObject& asnObject = const_cast<UplinkFree&>(element);
        asnObject.SetDescription(GetUplinkFreeStaticDescription());
        AddElement(7, element);
    }

    bool OptionUplinkFree() const
    {
        return Contains(7);
    }

    const UplinkFree& GetUplinkFree() const
    {
        ITS_REQUIRE(OptionUplinkFree());
        return static_cast<const UplinkFree&> (ElementAt(7));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(8, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(8, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(8);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(8));
    }

    void SetVstk(VSTK* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVstkStaticDescription());
        AddElement(9, element);
    }

    void SetVstk(const VSTK& element)
    {
        its::AsnObject& asnObject = const_cast<VSTK&>(element);
        asnObject.SetDescription(GetVstkStaticDescription());
        AddElement(9, element);
    }

    bool OptionVstk() const
    {
        return Contains(9);
    }

    const VSTK& GetVstk() const
    {
        ITS_REQUIRE(OptionVstk());
        return static_cast<const VSTK&> (ElementAt(9));
    }

    void SetVstk_rand(VSTK_RAND* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVstk_randStaticDescription());
        AddElement(10, element);
    }

    void SetVstk_rand(const VSTK_RAND& element)
    {
        its::AsnObject& asnObject = const_cast<VSTK_RAND&>(element);
        asnObject.SetDescription(GetVstk_randStaticDescription());
        AddElement(10, element);
    }

    const VSTK_RAND& GetVstk_rand() const
    {
        return static_cast<const VSTK_RAND&> (ElementAt(10));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_PREPARE_GROUP_CALL_ARG_H_)

