//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_READY_FOR_SM_ARG_H_)
#define _MAP_V9_READY_FOR_SM_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <map_v9_imsi.h>
#include <map_v9_alert_reason.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class ReadyForSM_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class AlertReasonIndicator : public its::AsnNull
    {
    public:

        AlertReasonIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        AlertReasonIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AlertReasonIndicator(const AlertReasonIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AlertReasonIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AlertReasonIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AlertReasonIndicator(*this);
        }

        virtual std::string GetName() const
        { return "AlertReasonIndicator"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::AlertReason AlertReason;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    ReadyForSM_Arg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    ReadyForSM_Arg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    ReadyForSM_Arg(const ReadyForSM_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ReadyForSM_Arg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetAlertReasonStaticDescription();
    static its::AsnDescObject* GetAlertReasonIndicatorStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~ReadyForSM_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ReadyForSM_Arg(*this);
    }

    virtual std::string GetName() const
    { return "ReadyForSM_Arg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetAlertReason(AlertReason* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlertReasonStaticDescription());
        AddElement(1, element);
    }

    void SetAlertReason(const AlertReason& element)
    {
        its::AsnObject& asnObject = const_cast<AlertReason&>(element);
        asnObject.SetDescription(GetAlertReasonStaticDescription());
        AddElement(1, element);
    }

    const AlertReason& GetAlertReason() const
    {
        return static_cast<const AlertReason&> (ElementAt(1));
    }

    void SetAlertReasonIndicator(AlertReasonIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlertReasonIndicatorStaticDescription());
        AddElement(2, element);
    }

    void SetAlertReasonIndicator(const AlertReasonIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<AlertReasonIndicator&>(element);
        asnObject.SetDescription(GetAlertReasonIndicatorStaticDescription());
        AddElement(2, element);
    }

    bool OptionAlertReasonIndicator() const
    {
        return Contains(2);
    }

    const AlertReasonIndicator& GetAlertReasonIndicator() const
    {
        ITS_REQUIRE(OptionAlertReasonIndicator());
        return static_cast<const AlertReasonIndicator&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_READY_FOR_SM_ARG_H_)

