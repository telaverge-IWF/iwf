//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PROCESS_GROUP_CALL_SIGNALLING_ARG_H_)
#define _MAP_V13_PROCESS_GROUP_CALL_SIGNALLING_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>
#include <AsnBitString.h>

#include <map_v13_extension_container.h>
#include <map_v13_talker_priority.h>
#include <map_v13_additional_info.h>
#include <map_v13_access_network_signal_info.h>



namespace map_v13 {



class ProcessGroupCallSignallingArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class UplinkRequest : public its::AsnNull
    {
    public:

        UplinkRequest() : its::AsnNull(false)
        {
            Initialize();
        }

        UplinkRequest(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        UplinkRequest(const UplinkRequest& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        UplinkRequest(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UplinkRequest()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UplinkRequest(*this);
        }

        virtual std::string GetName() const
        { return "UplinkRequest"; }

    };



    class UplinkReleaseIndication : public its::AsnNull
    {
    public:

        UplinkReleaseIndication() : its::AsnNull(false)
        {
            Initialize();
        }

        UplinkReleaseIndication(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        UplinkReleaseIndication(const UplinkReleaseIndication& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        UplinkReleaseIndication(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~UplinkReleaseIndication()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new UplinkReleaseIndication(*this);
        }

        virtual std::string GetName() const
        { return "UplinkReleaseIndication"; }

    };



    class ReleaseGroupCall : public its::AsnNull
    {
    public:

        ReleaseGroupCall() : its::AsnNull(false)
        {
            Initialize();
        }

        ReleaseGroupCall(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ReleaseGroupCall(const ReleaseGroupCall& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ReleaseGroupCall(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ReleaseGroupCall()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ReleaseGroupCall(*this);
        }

        virtual std::string GetName() const
        { return "ReleaseGroupCall"; }

    };



    class EmergencyModeResetCommandFlag : public its::AsnNull
    {
    public:

        EmergencyModeResetCommandFlag() : its::AsnNull(false)
        {
            Initialize();
        }

        EmergencyModeResetCommandFlag(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        EmergencyModeResetCommandFlag(const EmergencyModeResetCommandFlag& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        EmergencyModeResetCommandFlag(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~EmergencyModeResetCommandFlag()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new EmergencyModeResetCommandFlag(*this);
        }

        virtual std::string GetName() const
        { return "EmergencyModeResetCommandFlag"; }

    };


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::TalkerPriority TalkerPriority;


        typedef map_v13::AdditionalInfo AdditionalInfo;


        typedef map_v13::AccessNetworkSignalInfo AccessNetworkSignalInfo;


////////// End Nested Class(es) //////////

    ProcessGroupCallSignallingArg() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    ProcessGroupCallSignallingArg(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    ProcessGroupCallSignallingArg(const ProcessGroupCallSignallingArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ProcessGroupCallSignallingArg(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUplinkRequestStaticDescription();
    static its::AsnDescObject* GetUplinkReleaseIndicationStaticDescription();
    static its::AsnDescObject* GetReleaseGroupCallStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetTalkerPriorityStaticDescription();
    static its::AsnDescObject* GetAdditionalInfoStaticDescription();
    static its::AsnDescObject* GetEmergencyModeResetCommandFlagStaticDescription();
    static its::AsnDescObject* GetAn_APDUStaticDescription();

public:

    virtual ~ProcessGroupCallSignallingArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ProcessGroupCallSignallingArg(*this);
    }

    virtual std::string GetName() const
    { return "ProcessGroupCallSignallingArg"; }

    void SetUplinkRequest(UplinkRequest* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUplinkRequestStaticDescription());
        AddElement(0, element);
    }

    void SetUplinkRequest(const UplinkRequest& element)
    {
        its::AsnObject& asnObject = const_cast<UplinkRequest&>(element);
        asnObject.SetDescription(GetUplinkRequestStaticDescription());
        AddElement(0, element);
    }

    bool OptionUplinkRequest() const
    {
        return Contains(0);
    }

    const UplinkRequest& GetUplinkRequest() const
    {
        ITS_REQUIRE(OptionUplinkRequest());
        return static_cast<const UplinkRequest&> (ElementAt(0));
    }

    void SetUplinkReleaseIndication(UplinkReleaseIndication* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUplinkReleaseIndicationStaticDescription());
        AddElement(1, element);
    }

    void SetUplinkReleaseIndication(const UplinkReleaseIndication& element)
    {
        its::AsnObject& asnObject = const_cast<UplinkReleaseIndication&>(element);
        asnObject.SetDescription(GetUplinkReleaseIndicationStaticDescription());
        AddElement(1, element);
    }

    bool OptionUplinkReleaseIndication() const
    {
        return Contains(1);
    }

    const UplinkReleaseIndication& GetUplinkReleaseIndication() const
    {
        ITS_REQUIRE(OptionUplinkReleaseIndication());
        return static_cast<const UplinkReleaseIndication&> (ElementAt(1));
    }

    void SetReleaseGroupCall(ReleaseGroupCall* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReleaseGroupCallStaticDescription());
        AddElement(2, element);
    }

    void SetReleaseGroupCall(const ReleaseGroupCall& element)
    {
        its::AsnObject& asnObject = const_cast<ReleaseGroupCall&>(element);
        asnObject.SetDescription(GetReleaseGroupCallStaticDescription());
        AddElement(2, element);
    }

    bool OptionReleaseGroupCall() const
    {
        return Contains(2);
    }

    const ReleaseGroupCall& GetReleaseGroupCall() const
    {
        ITS_REQUIRE(OptionReleaseGroupCall());
        return static_cast<const ReleaseGroupCall&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

    void SetTalkerPriority(TalkerPriority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTalkerPriorityStaticDescription());
        AddElement(4, element);
    }

    void SetTalkerPriority(const TalkerPriority& element)
    {
        its::AsnObject& asnObject = const_cast<TalkerPriority&>(element);
        asnObject.SetDescription(GetTalkerPriorityStaticDescription());
        AddElement(4, element);
    }

    bool OptionTalkerPriority() const
    {
        return Contains(4);
    }

    const TalkerPriority& GetTalkerPriority() const
    {
        ITS_REQUIRE(OptionTalkerPriority());
        return static_cast<const TalkerPriority&> (ElementAt(4));
    }

    void SetAdditionalInfo(AdditionalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(5, element);
    }

    void SetAdditionalInfo(const AdditionalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalInfo&>(element);
        asnObject.SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(5, element);
    }

    bool OptionAdditionalInfo() const
    {
        return Contains(5);
    }

    const AdditionalInfo& GetAdditionalInfo() const
    {
        ITS_REQUIRE(OptionAdditionalInfo());
        return static_cast<const AdditionalInfo&> (ElementAt(5));
    }

    void SetEmergencyModeResetCommandFlag(EmergencyModeResetCommandFlag* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEmergencyModeResetCommandFlagStaticDescription());
        AddElement(6, element);
    }

    void SetEmergencyModeResetCommandFlag(const EmergencyModeResetCommandFlag& element)
    {
        its::AsnObject& asnObject = const_cast<EmergencyModeResetCommandFlag&>(element);
        asnObject.SetDescription(GetEmergencyModeResetCommandFlagStaticDescription());
        AddElement(6, element);
    }

    bool OptionEmergencyModeResetCommandFlag() const
    {
        return Contains(6);
    }

    const EmergencyModeResetCommandFlag& GetEmergencyModeResetCommandFlag() const
    {
        ITS_REQUIRE(OptionEmergencyModeResetCommandFlag());
        return static_cast<const EmergencyModeResetCommandFlag&> (ElementAt(6));
    }

    void SetAn_APDU(AccessNetworkSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAn_APDUStaticDescription());
        AddElement(7, element);
    }

    void SetAn_APDU(const AccessNetworkSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AccessNetworkSignalInfo&>(element);
        asnObject.SetDescription(GetAn_APDUStaticDescription());
        AddElement(7, element);
    }

    bool OptionAn_APDU() const
    {
        return Contains(7);
    }

    const AccessNetworkSignalInfo& GetAn_APDU() const
    {
        ITS_REQUIRE(OptionAn_APDU());
        return static_cast<const AccessNetworkSignalInfo&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PROCESS_GROUP_CALL_SIGNALLING_ARG_H_)

