//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SENT_PARAMETER_H_)
#define _MAP_V1_SENT_PARAMETER_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnSequence.h>

#include <map_v1_imsi.h>
#include <map_v1_authentication_set.h>
#include <map_v1_subscriber_data.h>
#include <map_v1_cug_information.h>
#include <map_v1_ki.h>



namespace map_v1 {



class SentParameter : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::IMSI IMSI;


        typedef map_v1::AuthenticationSet AuthenticationSet;


        typedef map_v1::SubscriberData SubscriberData;


        typedef map_v1::CUG_Information CUG_Information;


        typedef map_v1::Ki Ki;


////////// End Nested Class(es) //////////

    SentParameter() : its::AsnChoice(false)
    {
        Initialize();
    }

    SentParameter(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    SentParameter(const SentParameter& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    SentParameter(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    SentParameter(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetAuthenticationSetStaticDescription();
    static its::AsnDescObject* GetSubscriberDataStaticDescription();
    static its::AsnDescObject* GetCug_InformationStaticDescription();
    static its::AsnDescObject* GetKiStaticDescription();

public:

    virtual ~SentParameter()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SentParameter(*this);
    }

    virtual std::string GetName() const
    { return "SentParameter"; }

    void SetChoiceImsi(IMSI* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceImsi(const IMSI& choice)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(choice);
        asnObject.SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceImsi() const
    {
        return Contains(GetImsiStaticDescription()->TagIdentity());
    }

    const IMSI& GetChoiceImsi() const
    {
        ITS_REQUIRE(ChoiceImsi());
        return static_cast<const IMSI&> (GetChoice());
    }

    void SetChoiceAuthenticationSet(AuthenticationSet* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAuthenticationSetStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAuthenticationSet(const AuthenticationSet& choice)
    {
        its::AsnObject& asnObject = const_cast<AuthenticationSet&>(choice);
        asnObject.SetDescription(GetAuthenticationSetStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAuthenticationSet() const
    {
        return Contains(GetAuthenticationSetStaticDescription()->TagIdentity());
    }

    const AuthenticationSet& GetChoiceAuthenticationSet() const
    {
        ITS_REQUIRE(ChoiceAuthenticationSet());
        return static_cast<const AuthenticationSet&> (GetChoice());
    }

    void SetChoiceSubscriberData(SubscriberData* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetSubscriberDataStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceSubscriberData(const SubscriberData& choice)
    {
        its::AsnObject& asnObject = const_cast<SubscriberData&>(choice);
        asnObject.SetDescription(GetSubscriberDataStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceSubscriberData() const
    {
        return Contains(GetSubscriberDataStaticDescription()->TagIdentity());
    }

    const SubscriberData& GetChoiceSubscriberData() const
    {
        ITS_REQUIRE(ChoiceSubscriberData());
        return static_cast<const SubscriberData&> (GetChoice());
    }

    void SetChoiceCug_Information(CUG_Information* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCug_InformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCug_Information(const CUG_Information& choice)
    {
        its::AsnObject& asnObject = const_cast<CUG_Information&>(choice);
        asnObject.SetDescription(GetCug_InformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCug_Information() const
    {
        return Contains(GetCug_InformationStaticDescription()->TagIdentity());
    }

    const CUG_Information& GetChoiceCug_Information() const
    {
        ITS_REQUIRE(ChoiceCug_Information());
        return static_cast<const CUG_Information&> (GetChoice());
    }

    void SetChoiceKi(Ki* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetKiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceKi(const Ki& choice)
    {
        its::AsnObject& asnObject = const_cast<Ki&>(choice);
        asnObject.SetDescription(GetKiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceKi() const
    {
        return Contains(GetKiStaticDescription()->TagIdentity());
    }

    const Ki& GetChoiceKi() const
    {
        ITS_REQUIRE(ChoiceKi());
        return static_cast<const Ki&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SENT_PARAMETER_H_)

