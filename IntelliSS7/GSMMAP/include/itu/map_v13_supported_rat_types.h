//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SUPPORTED_RAT_TYPES_H_)
#define _MAP_V13_SUPPORTED_RAT_TYPES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class SupportedRAT_Types : public its::AsnBitString
{
public:

    SupportedRAT_Types() : its::AsnBitString(false)
    {
        Initialize();
    }

    SupportedRAT_Types(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    SupportedRAT_Types(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    SupportedRAT_Types(const SupportedRAT_Types& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    SupportedRAT_Types(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    SupportedRAT_Types(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SupportedRAT_Types()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SupportedRAT_Types(*this);
    }

    virtual std::string GetName() const
    { return "SupportedRAT_Types"; }

    void SetE_utran()
    { Set(4); }

    void ResetE_utran()
    { Reset(4); }

    bool IsE_utranSet() const
    { return IsSet(4); }

    bool IsE_utranDefined() const
    { return 4 < GetSize(); }

    void SetI_hspa_evolution()
    { Set(3); }

    void ResetI_hspa_evolution()
    { Reset(3); }

    bool IsI_hspa_evolutionSet() const
    { return IsSet(3); }

    bool IsI_hspa_evolutionDefined() const
    { return 3 < GetSize(); }

    void SetGan()
    { Set(2); }

    void ResetGan()
    { Reset(2); }

    bool IsGanSet() const
    { return IsSet(2); }

    bool IsGanDefined() const
    { return 2 < GetSize(); }

    void SetGeran()
    { Set(1); }

    void ResetGeran()
    { Reset(1); }

    bool IsGeranSet() const
    { return IsSet(1); }

    bool IsGeranDefined() const
    { return 1 < GetSize(); }

    void SetUtran()
    { Set(0); }

    void ResetUtran()
    { Reset(0); }

    bool IsUtranSet() const
    { return IsSet(0); }

    bool IsUtranDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_SUPPORTED_RAT_TYPES_H_)

