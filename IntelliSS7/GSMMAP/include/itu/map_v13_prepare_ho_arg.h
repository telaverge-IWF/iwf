//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PREPARE_HO_ARG_H_)
#define _MAP_V13_PREPARE_HO_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnBitString.h>

#include <map_v13_global_cell_id.h>
#include <map_v13_rnc_id.h>
#include <map_v13_access_network_signal_info.h>
#include <map_v13_imsi.h>
#include <map_v13_integrity_protection_information.h>
#include <map_v13_encryption_information.h>
#include <map_v13_radio_resource_information.h>
#include <map_v13_allowed_gsm_algorithms.h>
#include <map_v13_allowed_umts_algorithms.h>
#include <map_v13_radio_resource_list.h>
#include <map_v13_extension_container.h>
#include <map_v13_rab_id.h>
#include <map_v13_bssmap_service_handover.h>
#include <map_v13_ranap_service_handover.h>
#include <map_v13_bssmap_service_handover_list.h>
#include <map_v13_asci_call_reference.h>
#include <map_v13_geran_classmark.h>
#include <map_v13_codec.h>
#include <map_v13_supported_codecs_list.h>
#include <map_v13_uesbi_iu.h>
#include <map_v13_imei.h>
#include <map_v13_trace_propagation_list.h>
#include <map_v13_ao_ip_codecs_list.h>
#include <map_v13_zone_code_list.h>
#include <map_v13_lcls_global_call_reference.h>
#include <map_v13_lcls_negotiation.h>
#include <map_v13_lcls_configuration_preference.h>



namespace map_v13 {



class PrepareHO_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Ho_NumberNotRequired : public its::AsnNull
    {
    public:

        Ho_NumberNotRequired() : its::AsnNull(false)
        {
            Initialize();
        }

        Ho_NumberNotRequired(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ho_NumberNotRequired(const Ho_NumberNotRequired& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ho_NumberNotRequired(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ho_NumberNotRequired()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ho_NumberNotRequired(*this);
        }

        virtual std::string GetName() const
        { return "Ho_NumberNotRequired"; }

    };



    class MultipleBearerRequested : public its::AsnNull
    {
    public:

        MultipleBearerRequested() : its::AsnNull(false)
        {
            Initialize();
        }

        MultipleBearerRequested(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MultipleBearerRequested(const MultipleBearerRequested& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MultipleBearerRequested(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MultipleBearerRequested()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MultipleBearerRequested(*this);
        }

        virtual std::string GetName() const
        { return "MultipleBearerRequested"; }

    };



    class Rab_ConfigurationIndicator : public its::AsnNull
    {
    public:

        Rab_ConfigurationIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        Rab_ConfigurationIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Rab_ConfigurationIndicator(const Rab_ConfigurationIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Rab_ConfigurationIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Rab_ConfigurationIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Rab_ConfigurationIndicator(*this);
        }

        virtual std::string GetName() const
        { return "Rab_ConfigurationIndicator"; }

    };


        typedef map_v13::GlobalCellId GlobalCellId;


        typedef map_v13::RNCId RNCId;


        typedef map_v13::AccessNetworkSignalInfo AccessNetworkSignalInfo;


        typedef map_v13::IMSI IMSI;


        typedef map_v13::IntegrityProtectionInformation IntegrityProtectionInformation;


        typedef map_v13::EncryptionInformation EncryptionInformation;


        typedef map_v13::RadioResourceInformation RadioResourceInformation;


        typedef map_v13::AllowedGSM_Algorithms AllowedGSM_Algorithms;


        typedef map_v13::AllowedUMTS_Algorithms AllowedUMTS_Algorithms;


        typedef map_v13::RadioResourceList RadioResourceList;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::RAB_Id RAB_Id;


        typedef map_v13::BSSMAP_ServiceHandover BSSMAP_ServiceHandover;


        typedef map_v13::RANAP_ServiceHandover RANAP_ServiceHandover;


        typedef map_v13::BSSMAP_ServiceHandoverList BSSMAP_ServiceHandoverList;


        typedef map_v13::ASCI_CallReference ASCI_CallReference;


        typedef map_v13::GERAN_Classmark GERAN_Classmark;


        typedef map_v13::Codec Codec;


        typedef map_v13::SupportedCodecsList SupportedCodecsList;


        typedef map_v13::UESBI_Iu UESBI_Iu;


        typedef map_v13::IMEI IMEI;


        typedef map_v13::TracePropagationList TracePropagationList;


        typedef map_v13::AoIPCodecsList AoIPCodecsList;


        typedef map_v13::ZoneCodeList ZoneCodeList;


        typedef map_v13::LCLS_GlobalCallReference LCLS_GlobalCallReference;


        typedef map_v13::LCLS_Negotiation LCLS_Negotiation;


        typedef map_v13::LCLS_ConfigurationPreference LCLS_ConfigurationPreference;


////////// End Nested Class(es) //////////

    PrepareHO_Arg() : its::AsnSequence(31, false)
    {
        Initialize();
    }

    PrepareHO_Arg(its::Octets& octets) : its::AsnSequence(31, false)
    {
        Initialize();
        Decode(octets);
    }

    PrepareHO_Arg(const PrepareHO_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PrepareHO_Arg(its::AsnDescObject* description) : its::AsnSequence(31, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTargetCellIdStaticDescription();
    static its::AsnDescObject* GetHo_NumberNotRequiredStaticDescription();
    static its::AsnDescObject* GetTargetRNCIdStaticDescription();
    static its::AsnDescObject* GetAn_APDUStaticDescription();
    static its::AsnDescObject* GetMultipleBearerRequestedStaticDescription();
    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetIntegrityProtectionInfoStaticDescription();
    static its::AsnDescObject* GetEncryptionInfoStaticDescription();
    static its::AsnDescObject* GetRadioResourceInformationStaticDescription();
    static its::AsnDescObject* GetAllowedGSM_AlgorithmsStaticDescription();
    static its::AsnDescObject* GetAllowedUMTS_AlgorithmsStaticDescription();
    static its::AsnDescObject* GetRadioResourceListStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetRab_IdStaticDescription();
    static its::AsnDescObject* GetBssmap_ServiceHandoverStaticDescription();
    static its::AsnDescObject* GetRanap_ServiceHandoverStaticDescription();
    static its::AsnDescObject* GetBssmap_ServiceHandoverListStaticDescription();
    static its::AsnDescObject* GetAsciCallReferenceStaticDescription();
    static its::AsnDescObject* GetGeran_classmarkStaticDescription();
    static its::AsnDescObject* GetIuCurrentlyUsedCodecStaticDescription();
    static its::AsnDescObject* GetIuSupportedCodecsListStaticDescription();
    static its::AsnDescObject* GetRab_ConfigurationIndicatorStaticDescription();
    static its::AsnDescObject* GetUesbi_IuStaticDescription();
    static its::AsnDescObject* GetImeisvStaticDescription();
    static its::AsnDescObject* GetAlternativeChannelTypeStaticDescription();
    static its::AsnDescObject* GetTracePropagationListStaticDescription();
    static its::AsnDescObject* GetAoipSupportedCodecsListAnchorStaticDescription();
    static its::AsnDescObject* GetRegionalSubscriptionDataStaticDescription();
    static its::AsnDescObject* GetLclsGlobalCallReferenceStaticDescription();
    static its::AsnDescObject* GetLcls_NegotiationStaticDescription();
    static its::AsnDescObject* GetLcls_Configuration_PreferenceStaticDescription();

public:

    virtual ~PrepareHO_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PrepareHO_Arg(*this);
    }

    virtual std::string GetName() const
    { return "PrepareHO_Arg"; }

    void SetTargetCellId(GlobalCellId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetCellIdStaticDescription());
        AddElement(0, element);
    }

    void SetTargetCellId(const GlobalCellId& element)
    {
        its::AsnObject& asnObject = const_cast<GlobalCellId&>(element);
        asnObject.SetDescription(GetTargetCellIdStaticDescription());
        AddElement(0, element);
    }

    bool OptionTargetCellId() const
    {
        return Contains(0);
    }

    const GlobalCellId& GetTargetCellId() const
    {
        ITS_REQUIRE(OptionTargetCellId());
        return static_cast<const GlobalCellId&> (ElementAt(0));
    }

    void SetHo_NumberNotRequired(Ho_NumberNotRequired* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHo_NumberNotRequiredStaticDescription());
        AddElement(1, element);
    }

    void SetHo_NumberNotRequired(const Ho_NumberNotRequired& element)
    {
        its::AsnObject& asnObject = const_cast<Ho_NumberNotRequired&>(element);
        asnObject.SetDescription(GetHo_NumberNotRequiredStaticDescription());
        AddElement(1, element);
    }

    bool OptionHo_NumberNotRequired() const
    {
        return Contains(1);
    }

    const Ho_NumberNotRequired& GetHo_NumberNotRequired() const
    {
        ITS_REQUIRE(OptionHo_NumberNotRequired());
        return static_cast<const Ho_NumberNotRequired&> (ElementAt(1));
    }

    void SetTargetRNCId(RNCId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetRNCIdStaticDescription());
        AddElement(2, element);
    }

    void SetTargetRNCId(const RNCId& element)
    {
        its::AsnObject& asnObject = const_cast<RNCId&>(element);
        asnObject.SetDescription(GetTargetRNCIdStaticDescription());
        AddElement(2, element);
    }

    bool OptionTargetRNCId() const
    {
        return Contains(2);
    }

    const RNCId& GetTargetRNCId() const
    {
        ITS_REQUIRE(OptionTargetRNCId());
        return static_cast<const RNCId&> (ElementAt(2));
    }

    void SetAn_APDU(AccessNetworkSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAn_APDUStaticDescription());
        AddElement(3, element);
    }

    void SetAn_APDU(const AccessNetworkSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AccessNetworkSignalInfo&>(element);
        asnObject.SetDescription(GetAn_APDUStaticDescription());
        AddElement(3, element);
    }

    bool OptionAn_APDU() const
    {
        return Contains(3);
    }

    const AccessNetworkSignalInfo& GetAn_APDU() const
    {
        ITS_REQUIRE(OptionAn_APDU());
        return static_cast<const AccessNetworkSignalInfo&> (ElementAt(3));
    }

    void SetMultipleBearerRequested(MultipleBearerRequested* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMultipleBearerRequestedStaticDescription());
        AddElement(4, element);
    }

    void SetMultipleBearerRequested(const MultipleBearerRequested& element)
    {
        its::AsnObject& asnObject = const_cast<MultipleBearerRequested&>(element);
        asnObject.SetDescription(GetMultipleBearerRequestedStaticDescription());
        AddElement(4, element);
    }

    bool OptionMultipleBearerRequested() const
    {
        return Contains(4);
    }

    const MultipleBearerRequested& GetMultipleBearerRequested() const
    {
        ITS_REQUIRE(OptionMultipleBearerRequested());
        return static_cast<const MultipleBearerRequested&> (ElementAt(4));
    }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(5, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(5, element);
    }

    bool OptionImsi() const
    {
        return Contains(5);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(5));
    }

    void SetIntegrityProtectionInfo(IntegrityProtectionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIntegrityProtectionInfoStaticDescription());
        AddElement(6, element);
    }

    void SetIntegrityProtectionInfo(const IntegrityProtectionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<IntegrityProtectionInformation&>(element);
        asnObject.SetDescription(GetIntegrityProtectionInfoStaticDescription());
        AddElement(6, element);
    }

    bool OptionIntegrityProtectionInfo() const
    {
        return Contains(6);
    }

    const IntegrityProtectionInformation& GetIntegrityProtectionInfo() const
    {
        ITS_REQUIRE(OptionIntegrityProtectionInfo());
        return static_cast<const IntegrityProtectionInformation&> (ElementAt(6));
    }

    void SetEncryptionInfo(EncryptionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEncryptionInfoStaticDescription());
        AddElement(7, element);
    }

    void SetEncryptionInfo(const EncryptionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<EncryptionInformation&>(element);
        asnObject.SetDescription(GetEncryptionInfoStaticDescription());
        AddElement(7, element);
    }

    bool OptionEncryptionInfo() const
    {
        return Contains(7);
    }

    const EncryptionInformation& GetEncryptionInfo() const
    {
        ITS_REQUIRE(OptionEncryptionInfo());
        return static_cast<const EncryptionInformation&> (ElementAt(7));
    }

    void SetRadioResourceInformation(RadioResourceInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRadioResourceInformationStaticDescription());
        AddElement(8, element);
    }

    void SetRadioResourceInformation(const RadioResourceInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RadioResourceInformation&>(element);
        asnObject.SetDescription(GetRadioResourceInformationStaticDescription());
        AddElement(8, element);
    }

    bool OptionRadioResourceInformation() const
    {
        return Contains(8);
    }

    const RadioResourceInformation& GetRadioResourceInformation() const
    {
        ITS_REQUIRE(OptionRadioResourceInformation());
        return static_cast<const RadioResourceInformation&> (ElementAt(8));
    }

    void SetAllowedGSM_Algorithms(AllowedGSM_Algorithms* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAllowedGSM_AlgorithmsStaticDescription());
        AddElement(9, element);
    }

    void SetAllowedGSM_Algorithms(const AllowedGSM_Algorithms& element)
    {
        its::AsnObject& asnObject = const_cast<AllowedGSM_Algorithms&>(element);
        asnObject.SetDescription(GetAllowedGSM_AlgorithmsStaticDescription());
        AddElement(9, element);
    }

    bool OptionAllowedGSM_Algorithms() const
    {
        return Contains(9);
    }

    const AllowedGSM_Algorithms& GetAllowedGSM_Algorithms() const
    {
        ITS_REQUIRE(OptionAllowedGSM_Algorithms());
        return static_cast<const AllowedGSM_Algorithms&> (ElementAt(9));
    }

    void SetAllowedUMTS_Algorithms(AllowedUMTS_Algorithms* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAllowedUMTS_AlgorithmsStaticDescription());
        AddElement(10, element);
    }

    void SetAllowedUMTS_Algorithms(const AllowedUMTS_Algorithms& element)
    {
        its::AsnObject& asnObject = const_cast<AllowedUMTS_Algorithms&>(element);
        asnObject.SetDescription(GetAllowedUMTS_AlgorithmsStaticDescription());
        AddElement(10, element);
    }

    bool OptionAllowedUMTS_Algorithms() const
    {
        return Contains(10);
    }

    const AllowedUMTS_Algorithms& GetAllowedUMTS_Algorithms() const
    {
        ITS_REQUIRE(OptionAllowedUMTS_Algorithms());
        return static_cast<const AllowedUMTS_Algorithms&> (ElementAt(10));
    }

    void SetRadioResourceList(RadioResourceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRadioResourceListStaticDescription());
        AddElement(11, element);
    }

    void SetRadioResourceList(const RadioResourceList& element)
    {
        its::AsnObject& asnObject = const_cast<RadioResourceList&>(element);
        asnObject.SetDescription(GetRadioResourceListStaticDescription());
        AddElement(11, element);
    }

    bool OptionRadioResourceList() const
    {
        return Contains(11);
    }

    const RadioResourceList& GetRadioResourceList() const
    {
        ITS_REQUIRE(OptionRadioResourceList());
        return static_cast<const RadioResourceList&> (ElementAt(11));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(12, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(12, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(12);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(12));
    }

    void SetRab_Id(RAB_Id* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRab_IdStaticDescription());
        AddElement(13, element);
    }

    void SetRab_Id(const RAB_Id& element)
    {
        its::AsnObject& asnObject = const_cast<RAB_Id&>(element);
        asnObject.SetDescription(GetRab_IdStaticDescription());
        AddElement(13, element);
    }

    bool OptionRab_Id() const
    {
        return Contains(13);
    }

    const RAB_Id& GetRab_Id() const
    {
        ITS_REQUIRE(OptionRab_Id());
        return static_cast<const RAB_Id&> (ElementAt(13));
    }

    void SetBssmap_ServiceHandover(BSSMAP_ServiceHandover* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBssmap_ServiceHandoverStaticDescription());
        AddElement(14, element);
    }

    void SetBssmap_ServiceHandover(const BSSMAP_ServiceHandover& element)
    {
        its::AsnObject& asnObject = const_cast<BSSMAP_ServiceHandover&>(element);
        asnObject.SetDescription(GetBssmap_ServiceHandoverStaticDescription());
        AddElement(14, element);
    }

    bool OptionBssmap_ServiceHandover() const
    {
        return Contains(14);
    }

    const BSSMAP_ServiceHandover& GetBssmap_ServiceHandover() const
    {
        ITS_REQUIRE(OptionBssmap_ServiceHandover());
        return static_cast<const BSSMAP_ServiceHandover&> (ElementAt(14));
    }

    void SetRanap_ServiceHandover(RANAP_ServiceHandover* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRanap_ServiceHandoverStaticDescription());
        AddElement(15, element);
    }

    void SetRanap_ServiceHandover(const RANAP_ServiceHandover& element)
    {
        its::AsnObject& asnObject = const_cast<RANAP_ServiceHandover&>(element);
        asnObject.SetDescription(GetRanap_ServiceHandoverStaticDescription());
        AddElement(15, element);
    }

    bool OptionRanap_ServiceHandover() const
    {
        return Contains(15);
    }

    const RANAP_ServiceHandover& GetRanap_ServiceHandover() const
    {
        ITS_REQUIRE(OptionRanap_ServiceHandover());
        return static_cast<const RANAP_ServiceHandover&> (ElementAt(15));
    }

    void SetBssmap_ServiceHandoverList(BSSMAP_ServiceHandoverList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBssmap_ServiceHandoverListStaticDescription());
        AddElement(16, element);
    }

    void SetBssmap_ServiceHandoverList(const BSSMAP_ServiceHandoverList& element)
    {
        its::AsnObject& asnObject = const_cast<BSSMAP_ServiceHandoverList&>(element);
        asnObject.SetDescription(GetBssmap_ServiceHandoverListStaticDescription());
        AddElement(16, element);
    }

    bool OptionBssmap_ServiceHandoverList() const
    {
        return Contains(16);
    }

    const BSSMAP_ServiceHandoverList& GetBssmap_ServiceHandoverList() const
    {
        ITS_REQUIRE(OptionBssmap_ServiceHandoverList());
        return static_cast<const BSSMAP_ServiceHandoverList&> (ElementAt(16));
    }

    void SetAsciCallReference(ASCI_CallReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(17, element);
    }

    void SetAsciCallReference(const ASCI_CallReference& element)
    {
        its::AsnObject& asnObject = const_cast<ASCI_CallReference&>(element);
        asnObject.SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(17, element);
    }

    bool OptionAsciCallReference() const
    {
        return Contains(17);
    }

    const ASCI_CallReference& GetAsciCallReference() const
    {
        ITS_REQUIRE(OptionAsciCallReference());
        return static_cast<const ASCI_CallReference&> (ElementAt(17));
    }

    void SetGeran_classmark(GERAN_Classmark* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeran_classmarkStaticDescription());
        AddElement(18, element);
    }

    void SetGeran_classmark(const GERAN_Classmark& element)
    {
        its::AsnObject& asnObject = const_cast<GERAN_Classmark&>(element);
        asnObject.SetDescription(GetGeran_classmarkStaticDescription());
        AddElement(18, element);
    }

    bool OptionGeran_classmark() const
    {
        return Contains(18);
    }

    const GERAN_Classmark& GetGeran_classmark() const
    {
        ITS_REQUIRE(OptionGeran_classmark());
        return static_cast<const GERAN_Classmark&> (ElementAt(18));
    }

    void SetIuCurrentlyUsedCodec(Codec* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIuCurrentlyUsedCodecStaticDescription());
        AddElement(19, element);
    }

    void SetIuCurrentlyUsedCodec(const Codec& element)
    {
        its::AsnObject& asnObject = const_cast<Codec&>(element);
        asnObject.SetDescription(GetIuCurrentlyUsedCodecStaticDescription());
        AddElement(19, element);
    }

    bool OptionIuCurrentlyUsedCodec() const
    {
        return Contains(19);
    }

    const Codec& GetIuCurrentlyUsedCodec() const
    {
        ITS_REQUIRE(OptionIuCurrentlyUsedCodec());
        return static_cast<const Codec&> (ElementAt(19));
    }

    void SetIuSupportedCodecsList(SupportedCodecsList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIuSupportedCodecsListStaticDescription());
        AddElement(20, element);
    }

    void SetIuSupportedCodecsList(const SupportedCodecsList& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedCodecsList&>(element);
        asnObject.SetDescription(GetIuSupportedCodecsListStaticDescription());
        AddElement(20, element);
    }

    bool OptionIuSupportedCodecsList() const
    {
        return Contains(20);
    }

    const SupportedCodecsList& GetIuSupportedCodecsList() const
    {
        ITS_REQUIRE(OptionIuSupportedCodecsList());
        return static_cast<const SupportedCodecsList&> (ElementAt(20));
    }

    void SetRab_ConfigurationIndicator(Rab_ConfigurationIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRab_ConfigurationIndicatorStaticDescription());
        AddElement(21, element);
    }

    void SetRab_ConfigurationIndicator(const Rab_ConfigurationIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<Rab_ConfigurationIndicator&>(element);
        asnObject.SetDescription(GetRab_ConfigurationIndicatorStaticDescription());
        AddElement(21, element);
    }

    bool OptionRab_ConfigurationIndicator() const
    {
        return Contains(21);
    }

    const Rab_ConfigurationIndicator& GetRab_ConfigurationIndicator() const
    {
        ITS_REQUIRE(OptionRab_ConfigurationIndicator());
        return static_cast<const Rab_ConfigurationIndicator&> (ElementAt(21));
    }

    void SetUesbi_Iu(UESBI_Iu* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUesbi_IuStaticDescription());
        AddElement(22, element);
    }

    void SetUesbi_Iu(const UESBI_Iu& element)
    {
        its::AsnObject& asnObject = const_cast<UESBI_Iu&>(element);
        asnObject.SetDescription(GetUesbi_IuStaticDescription());
        AddElement(22, element);
    }

    bool OptionUesbi_Iu() const
    {
        return Contains(22);
    }

    const UESBI_Iu& GetUesbi_Iu() const
    {
        ITS_REQUIRE(OptionUesbi_Iu());
        return static_cast<const UESBI_Iu&> (ElementAt(22));
    }

    void SetImeisv(IMEI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImeisvStaticDescription());
        AddElement(23, element);
    }

    void SetImeisv(const IMEI& element)
    {
        its::AsnObject& asnObject = const_cast<IMEI&>(element);
        asnObject.SetDescription(GetImeisvStaticDescription());
        AddElement(23, element);
    }

    bool OptionImeisv() const
    {
        return Contains(23);
    }

    const IMEI& GetImeisv() const
    {
        ITS_REQUIRE(OptionImeisv());
        return static_cast<const IMEI&> (ElementAt(23));
    }

    void SetAlternativeChannelType(RadioResourceInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlternativeChannelTypeStaticDescription());
        AddElement(24, element);
    }

    void SetAlternativeChannelType(const RadioResourceInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RadioResourceInformation&>(element);
        asnObject.SetDescription(GetAlternativeChannelTypeStaticDescription());
        AddElement(24, element);
    }

    bool OptionAlternativeChannelType() const
    {
        return Contains(24);
    }

    const RadioResourceInformation& GetAlternativeChannelType() const
    {
        ITS_REQUIRE(OptionAlternativeChannelType());
        return static_cast<const RadioResourceInformation&> (ElementAt(24));
    }

    void SetTracePropagationList(TracePropagationList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTracePropagationListStaticDescription());
        AddElement(25, element);
    }

    void SetTracePropagationList(const TracePropagationList& element)
    {
        its::AsnObject& asnObject = const_cast<TracePropagationList&>(element);
        asnObject.SetDescription(GetTracePropagationListStaticDescription());
        AddElement(25, element);
    }

    bool OptionTracePropagationList() const
    {
        return Contains(25);
    }

    const TracePropagationList& GetTracePropagationList() const
    {
        ITS_REQUIRE(OptionTracePropagationList());
        return static_cast<const TracePropagationList&> (ElementAt(25));
    }

    void SetAoipSupportedCodecsListAnchor(AoIPCodecsList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAoipSupportedCodecsListAnchorStaticDescription());
        AddElement(26, element);
    }

    void SetAoipSupportedCodecsListAnchor(const AoIPCodecsList& element)
    {
        its::AsnObject& asnObject = const_cast<AoIPCodecsList&>(element);
        asnObject.SetDescription(GetAoipSupportedCodecsListAnchorStaticDescription());
        AddElement(26, element);
    }

    bool OptionAoipSupportedCodecsListAnchor() const
    {
        return Contains(26);
    }

    const AoIPCodecsList& GetAoipSupportedCodecsListAnchor() const
    {
        ITS_REQUIRE(OptionAoipSupportedCodecsListAnchor());
        return static_cast<const AoIPCodecsList&> (ElementAt(26));
    }

    void SetRegionalSubscriptionData(ZoneCodeList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRegionalSubscriptionDataStaticDescription());
        AddElement(27, element);
    }

    void SetRegionalSubscriptionData(const ZoneCodeList& element)
    {
        its::AsnObject& asnObject = const_cast<ZoneCodeList&>(element);
        asnObject.SetDescription(GetRegionalSubscriptionDataStaticDescription());
        AddElement(27, element);
    }

    bool OptionRegionalSubscriptionData() const
    {
        return Contains(27);
    }

    const ZoneCodeList& GetRegionalSubscriptionData() const
    {
        ITS_REQUIRE(OptionRegionalSubscriptionData());
        return static_cast<const ZoneCodeList&> (ElementAt(27));
    }

    void SetLclsGlobalCallReference(LCLS_GlobalCallReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLclsGlobalCallReferenceStaticDescription());
        AddElement(28, element);
    }

    void SetLclsGlobalCallReference(const LCLS_GlobalCallReference& element)
    {
        its::AsnObject& asnObject = const_cast<LCLS_GlobalCallReference&>(element);
        asnObject.SetDescription(GetLclsGlobalCallReferenceStaticDescription());
        AddElement(28, element);
    }

    bool OptionLclsGlobalCallReference() const
    {
        return Contains(28);
    }

    const LCLS_GlobalCallReference& GetLclsGlobalCallReference() const
    {
        ITS_REQUIRE(OptionLclsGlobalCallReference());
        return static_cast<const LCLS_GlobalCallReference&> (ElementAt(28));
    }

    void SetLcls_Negotiation(LCLS_Negotiation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcls_NegotiationStaticDescription());
        AddElement(29, element);
    }

    void SetLcls_Negotiation(const LCLS_Negotiation& element)
    {
        its::AsnObject& asnObject = const_cast<LCLS_Negotiation&>(element);
        asnObject.SetDescription(GetLcls_NegotiationStaticDescription());
        AddElement(29, element);
    }

    bool OptionLcls_Negotiation() const
    {
        return Contains(29);
    }

    const LCLS_Negotiation& GetLcls_Negotiation() const
    {
        ITS_REQUIRE(OptionLcls_Negotiation());
        return static_cast<const LCLS_Negotiation&> (ElementAt(29));
    }

    void SetLcls_Configuration_Preference(LCLS_ConfigurationPreference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcls_Configuration_PreferenceStaticDescription());
        AddElement(30, element);
    }

    void SetLcls_Configuration_Preference(const LCLS_ConfigurationPreference& element)
    {
        its::AsnObject& asnObject = const_cast<LCLS_ConfigurationPreference&>(element);
        asnObject.SetDescription(GetLcls_Configuration_PreferenceStaticDescription());
        AddElement(30, element);
    }

    bool OptionLcls_Configuration_Preference() const
    {
        return Contains(30);
    }

    const LCLS_ConfigurationPreference& GetLcls_Configuration_Preference() const
    {
        ITS_REQUIRE(OptionLcls_Configuration_Preference());
        return static_cast<const LCLS_ConfigurationPreference&> (ElementAt(30));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PREPARE_HO_ARG_H_)

