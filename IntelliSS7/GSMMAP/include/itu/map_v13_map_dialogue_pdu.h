//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_MAP_DIALOGUE_PDU_H_)
#define _MAP_V13_MAP_DIALOGUE_PDU_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>

#include <map_v13_map_open_info.h>
#include <map_v13_map_accept_info.h>
#include <map_v13_map_close_info.h>
#include <map_v13_map_refuse_info.h>
#include <map_v13_map_user_abort_info.h>
#include <map_v13_map_provider_abort_info.h>



namespace map_v13 {



class MAP_DialoguePDU : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::MAP_OpenInfo MAP_OpenInfo;


        typedef map_v13::MAP_AcceptInfo MAP_AcceptInfo;


        typedef map_v13::MAP_CloseInfo MAP_CloseInfo;


        typedef map_v13::MAP_RefuseInfo MAP_RefuseInfo;


        typedef map_v13::MAP_UserAbortInfo MAP_UserAbortInfo;


        typedef map_v13::MAP_ProviderAbortInfo MAP_ProviderAbortInfo;


////////// End Nested Class(es) //////////

    MAP_DialoguePDU() : its::AsnChoice(false)
    {
        Initialize();
    }

    MAP_DialoguePDU(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    MAP_DialoguePDU(const MAP_DialoguePDU& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    MAP_DialoguePDU(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    MAP_DialoguePDU(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMap_openStaticDescription();
    static its::AsnDescObject* GetMap_acceptStaticDescription();
    static its::AsnDescObject* GetMap_closeStaticDescription();
    static its::AsnDescObject* GetMap_refuseStaticDescription();
    static its::AsnDescObject* GetMap_userAbortStaticDescription();
    static its::AsnDescObject* GetMap_providerAbortStaticDescription();

public:

    virtual ~MAP_DialoguePDU()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MAP_DialoguePDU(*this);
    }

    virtual std::string GetName() const
    { return "MAP_DialoguePDU"; }

    void SetChoiceMap_open(MAP_OpenInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_openStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_open(const MAP_OpenInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_OpenInfo&>(choice);
        asnObject.SetDescription(GetMap_openStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_open() const
    {
        return Contains(GetMap_openStaticDescription()->TagIdentity());
    }

    const MAP_OpenInfo& GetChoiceMap_open() const
    {
        ITS_REQUIRE(ChoiceMap_open());
        return static_cast<const MAP_OpenInfo&> (GetChoice());
    }

    void SetChoiceMap_accept(MAP_AcceptInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_acceptStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_accept(const MAP_AcceptInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_AcceptInfo&>(choice);
        asnObject.SetDescription(GetMap_acceptStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_accept() const
    {
        return Contains(GetMap_acceptStaticDescription()->TagIdentity());
    }

    const MAP_AcceptInfo& GetChoiceMap_accept() const
    {
        ITS_REQUIRE(ChoiceMap_accept());
        return static_cast<const MAP_AcceptInfo&> (GetChoice());
    }

    void SetChoiceMap_close(MAP_CloseInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_closeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_close(const MAP_CloseInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_CloseInfo&>(choice);
        asnObject.SetDescription(GetMap_closeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_close() const
    {
        return Contains(GetMap_closeStaticDescription()->TagIdentity());
    }

    const MAP_CloseInfo& GetChoiceMap_close() const
    {
        ITS_REQUIRE(ChoiceMap_close());
        return static_cast<const MAP_CloseInfo&> (GetChoice());
    }

    void SetChoiceMap_refuse(MAP_RefuseInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_refuseStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_refuse(const MAP_RefuseInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_RefuseInfo&>(choice);
        asnObject.SetDescription(GetMap_refuseStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_refuse() const
    {
        return Contains(GetMap_refuseStaticDescription()->TagIdentity());
    }

    const MAP_RefuseInfo& GetChoiceMap_refuse() const
    {
        ITS_REQUIRE(ChoiceMap_refuse());
        return static_cast<const MAP_RefuseInfo&> (GetChoice());
    }

    void SetChoiceMap_userAbort(MAP_UserAbortInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_userAbortStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_userAbort(const MAP_UserAbortInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_UserAbortInfo&>(choice);
        asnObject.SetDescription(GetMap_userAbortStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_userAbort() const
    {
        return Contains(GetMap_userAbortStaticDescription()->TagIdentity());
    }

    const MAP_UserAbortInfo& GetChoiceMap_userAbort() const
    {
        ITS_REQUIRE(ChoiceMap_userAbort());
        return static_cast<const MAP_UserAbortInfo&> (GetChoice());
    }

    void SetChoiceMap_providerAbort(MAP_ProviderAbortInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMap_providerAbortStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMap_providerAbort(const MAP_ProviderAbortInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<MAP_ProviderAbortInfo&>(choice);
        asnObject.SetDescription(GetMap_providerAbortStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMap_providerAbort() const
    {
        return Contains(GetMap_providerAbortStaticDescription()->TagIdentity());
    }

    const MAP_ProviderAbortInfo& GetChoiceMap_providerAbort() const
    {
        ITS_REQUIRE(ChoiceMap_providerAbort());
        return static_cast<const MAP_ProviderAbortInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_MAP_DIALOGUE_PDU_H_)

