//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SS_FOR_BS_CODE_H_)
#define _MAP_V13_SS_FOR_BS_CODE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>

#include <map_v13_ss_code.h>
#include <map_v13_basic_service_code.h>



namespace map_v13 {



class SS_ForBS_Code : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LongFTN_Supported : public its::AsnNull
    {
    public:

        LongFTN_Supported() : its::AsnNull(false)
        {
            Initialize();
        }

        LongFTN_Supported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LongFTN_Supported(const LongFTN_Supported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LongFTN_Supported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LongFTN_Supported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LongFTN_Supported(*this);
        }

        virtual std::string GetName() const
        { return "LongFTN_Supported"; }

    };


        typedef map_v13::SS_Code SS_Code;


        typedef map_v13::BasicServiceCode BasicServiceCode;


////////// End Nested Class(es) //////////

    SS_ForBS_Code() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    SS_ForBS_Code(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    SS_ForBS_Code(const SS_ForBS_Code& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SS_ForBS_Code(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetBasicServiceStaticDescription();
    static its::AsnDescObject* GetLongFTN_SupportedStaticDescription();

public:

    virtual ~SS_ForBS_Code()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SS_ForBS_Code(*this);
    }

    virtual std::string GetName() const
    { return "SS_ForBS_Code"; }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    const SS_Code& GetSs_Code() const
    {
        return static_cast<const SS_Code&> (ElementAt(0));
    }

    void SetBasicService(BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    void SetBasicService(const BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    bool OptionBasicService() const
    {
        return Contains(1);
    }

    const BasicServiceCode& GetBasicService() const
    {
        ITS_REQUIRE(OptionBasicService());
        return static_cast<const BasicServiceCode&> (ElementAt(1));
    }

    void SetLongFTN_Supported(LongFTN_Supported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLongFTN_SupportedStaticDescription());
        AddElement(2, element);
    }

    void SetLongFTN_Supported(const LongFTN_Supported& element)
    {
        its::AsnObject& asnObject = const_cast<LongFTN_Supported&>(element);
        asnObject.SetDescription(GetLongFTN_SupportedStaticDescription());
        AddElement(2, element);
    }

    bool OptionLongFTN_Supported() const
    {
        return Contains(2);
    }

    const LongFTN_Supported& GetLongFTN_Supported() const
    {
        ITS_REQUIRE(OptionLongFTN_Supported());
        return static_cast<const LongFTN_Supported&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SS_FOR_BS_CODE_H_)

