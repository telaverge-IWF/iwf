//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_DELETE_SUBSCRIBER_DATA_ARG_H_)
#define _MAP_V1_DELETE_SUBSCRIBER_DATA_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>

#include <map_v1_imsi.h>
#include <map_v1_basic_service_list.h>
#include <map_v1_ss_code_list.h>



namespace map_v1 {



class DeleteSubscriberDataArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::IMSI IMSI;


        typedef map_v1::BasicServiceList BasicServiceList;


        typedef map_v1::SS_CodeList SS_CodeList;


////////// End Nested Class(es) //////////

    DeleteSubscriberDataArg() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    DeleteSubscriberDataArg(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    DeleteSubscriberDataArg(const DeleteSubscriberDataArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    DeleteSubscriberDataArg(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetBasicServiceStaticDescription();
    static its::AsnDescObject* GetSs_CodeStaticDescription();

public:

    virtual ~DeleteSubscriberDataArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new DeleteSubscriberDataArg(*this);
    }

    virtual std::string GetName() const
    { return "DeleteSubscriberDataArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetBasicService(BasicServiceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    void SetBasicService(const BasicServiceList& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceList&>(element);
        asnObject.SetDescription(GetBasicServiceStaticDescription());
        AddElement(1, element);
    }

    bool OptionBasicService() const
    {
        return Contains(1);
    }

    const BasicServiceList& GetBasicService() const
    {
        ITS_REQUIRE(OptionBasicService());
        return static_cast<const BasicServiceList&> (ElementAt(1));
    }

    void SetSs_Code(SS_CodeList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(2, element);
    }

    void SetSs_Code(const SS_CodeList& element)
    {
        its::AsnObject& asnObject = const_cast<SS_CodeList&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(2, element);
    }

    bool OptionSs_Code() const
    {
        return Contains(2);
    }

    const SS_CodeList& GetSs_Code() const
    {
        ITS_REQUIRE(OptionSs_Code());
        return static_cast<const SS_CodeList&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_DELETE_SUBSCRIBER_DATA_ARG_H_)

