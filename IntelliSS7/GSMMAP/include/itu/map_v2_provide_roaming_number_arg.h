//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_PROVIDE_ROAMING_NUMBER_ARG_H_)
#define _MAP_V2_PROVIDE_ROAMING_NUMBER_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v2_imsi.h>
#include <map_v2_isdn_address_string.h>
#include <map_v2_lmsi.h>
#include <map_v2_external_signal_info.h>



namespace map_v2 {



class ProvideRoamingNumberArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v2::IMSI IMSI;


        typedef map_v2::ISDN_AddressString ISDN_AddressString;


        typedef map_v2::LMSI LMSI;


        typedef map_v2::ExternalSignalInfo ExternalSignalInfo;


////////// End Nested Class(es) //////////

    ProvideRoamingNumberArg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    ProvideRoamingNumberArg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    ProvideRoamingNumberArg(const ProvideRoamingNumberArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ProvideRoamingNumberArg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetMsc_NumberStaticDescription();
    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetPreviousRoamingNumberStaticDescription();
    static its::AsnDescObject* GetLmsiStaticDescription();
    static its::AsnDescObject* GetGsm_BearerCapabilityStaticDescription();
    static its::AsnDescObject* GetNetworkSignalInfoStaticDescription();

public:

    virtual ~ProvideRoamingNumberArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ProvideRoamingNumberArg(*this);
    }

    virtual std::string GetName() const
    { return "ProvideRoamingNumberArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetMsc_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetMsc_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsc_NumberStaticDescription());
        AddElement(1, element);
    }

    bool OptionMsc_Number() const
    {
        return Contains(1);
    }

    const ISDN_AddressString& GetMsc_Number() const
    {
        ITS_REQUIRE(OptionMsc_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(2, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(2, element);
    }

    bool OptionMsisdn() const
    {
        return Contains(2);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        ITS_REQUIRE(OptionMsisdn());
        return static_cast<const ISDN_AddressString&> (ElementAt(2));
    }

    void SetPreviousRoamingNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPreviousRoamingNumberStaticDescription());
        AddElement(3, element);
    }

    void SetPreviousRoamingNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetPreviousRoamingNumberStaticDescription());
        AddElement(3, element);
    }

    bool OptionPreviousRoamingNumber() const
    {
        return Contains(3);
    }

    const ISDN_AddressString& GetPreviousRoamingNumber() const
    {
        ITS_REQUIRE(OptionPreviousRoamingNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(3));
    }

    void SetLmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLmsiStaticDescription());
        AddElement(4, element);
    }

    void SetLmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetLmsiStaticDescription());
        AddElement(4, element);
    }

    bool OptionLmsi() const
    {
        return Contains(4);
    }

    const LMSI& GetLmsi() const
    {
        ITS_REQUIRE(OptionLmsi());
        return static_cast<const LMSI&> (ElementAt(4));
    }

    void SetGsm_BearerCapability(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGsm_BearerCapabilityStaticDescription());
        AddElement(5, element);
    }

    void SetGsm_BearerCapability(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetGsm_BearerCapabilityStaticDescription());
        AddElement(5, element);
    }

    bool OptionGsm_BearerCapability() const
    {
        return Contains(5);
    }

    const ExternalSignalInfo& GetGsm_BearerCapability() const
    {
        ITS_REQUIRE(OptionGsm_BearerCapability());
        return static_cast<const ExternalSignalInfo&> (ElementAt(5));
    }

    void SetNetworkSignalInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(6, element);
    }

    void SetNetworkSignalInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(6, element);
    }

    bool OptionNetworkSignalInfo() const
    {
        return Contains(6);
    }

    const ExternalSignalInfo& GetNetworkSignalInfo() const
    {
        ITS_REQUIRE(OptionNetworkSignalInfo());
        return static_cast<const ExternalSignalInfo&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_PROVIDE_ROAMING_NUMBER_ARG_H_)

