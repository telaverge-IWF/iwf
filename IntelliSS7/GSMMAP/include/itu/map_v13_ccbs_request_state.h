//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CCBS_REQUEST_STATE_H_)
#define _MAP_V13_CCBS_REQUEST_STATE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class CCBS_RequestState : public its::AsnEnumerated
{
public:

    CCBS_RequestState() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    CCBS_RequestState(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    CCBS_RequestState(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    CCBS_RequestState(const CCBS_RequestState& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    CCBS_RequestState(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    CCBS_RequestState(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~CCBS_RequestState()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CCBS_RequestState(*this);
    }

    virtual std::string GetName() const
    { return "CCBS_RequestState"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        CCBS_REQUEST_STATE_REQUEST = 0,
        CCBS_REQUEST_STATE_RECALL = 1,
        CCBS_REQUEST_STATE_ACTIVE = 2,
        CCBS_REQUEST_STATE_COMPLETED = 3,
        CCBS_REQUEST_STATE_SUSPENDED = 4,
        CCBS_REQUEST_STATE_FROZEN = 5,
        CCBS_REQUEST_STATE_DELETED = 6

    };

    void SetRequest()
    { _value = 0; }

    bool IsRequest() const
    { return _value == 0; }

    void SetRecall()
    { _value = 1; }

    bool IsRecall() const
    { return _value == 1; }

    void SetActive()
    { _value = 2; }

    bool IsActive() const
    { return _value == 2; }

    void SetCompleted()
    { _value = 3; }

    bool IsCompleted() const
    { return _value == 3; }

    void SetSuspended()
    { _value = 4; }

    bool IsSuspended() const
    { return _value == 4; }

    void SetFrozen()
    { _value = 5; }

    bool IsFrozen() const
    { return _value == 5; }

    void SetDeleted()
    { _value = 6; }

    bool IsDeleted() const
    { return _value == 6; }

};



} // namespace.

#endif    // !defined(_MAP_V13_CCBS_REQUEST_STATE_H_)

