//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LOCATION_INFORMATION_GPRS_H_)
#define _MAP_V13_LOCATION_INFORMATION_GPRS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v13_cell_global_id_or_service_area_id_or_lai.h>
#include <map_v13_ra_identity.h>
#include <map_v13_geographical_information.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_lsa_identity.h>
#include <map_v13_extension_container.h>
#include <map_v13_geodetic_information.h>
#include <map_v13_age_of_location_information.h>
#include <map_v13_user_csg_information.h>



namespace map_v13 {



class LocationInformationGPRS : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Sai_Present : public its::AsnNull
    {
    public:

        Sai_Present() : its::AsnNull(false)
        {
            Initialize();
        }

        Sai_Present(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Sai_Present(const Sai_Present& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Sai_Present(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Sai_Present()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Sai_Present(*this);
        }

        virtual std::string GetName() const
        { return "Sai_Present"; }

    };



    class CurrentLocationRetrieved : public its::AsnNull
    {
    public:

        CurrentLocationRetrieved() : its::AsnNull(false)
        {
            Initialize();
        }

        CurrentLocationRetrieved(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CurrentLocationRetrieved(const CurrentLocationRetrieved& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CurrentLocationRetrieved(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CurrentLocationRetrieved()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CurrentLocationRetrieved(*this);
        }

        virtual std::string GetName() const
        { return "CurrentLocationRetrieved"; }

    };


        typedef map_v13::CellGlobalIdOrServiceAreaIdOrLAI CellGlobalIdOrServiceAreaIdOrLAI;


        typedef map_v13::RAIdentity RAIdentity;


        typedef map_v13::GeographicalInformation GeographicalInformation;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::LSAIdentity LSAIdentity;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::GeodeticInformation GeodeticInformation;


        typedef map_v13::AgeOfLocationInformation AgeOfLocationInformation;


        typedef map_v13::UserCSGInformation UserCSGInformation;


////////// End Nested Class(es) //////////

    LocationInformationGPRS() : its::AsnSequence(11, false)
    {
        Initialize();
    }

    LocationInformationGPRS(its::Octets& octets) : its::AsnSequence(11, false)
    {
        Initialize();
        Decode(octets);
    }

    LocationInformationGPRS(const LocationInformationGPRS& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LocationInformationGPRS(its::AsnDescObject* description) : its::AsnSequence(11, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
    static its::AsnDescObject* GetRouteingAreaIdentityStaticDescription();
    static its::AsnDescObject* GetGeographicalInformationStaticDescription();
    static its::AsnDescObject* GetSgsn_NumberStaticDescription();
    static its::AsnDescObject* GetSelectedLSAIdentityStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetSai_PresentStaticDescription();
    static its::AsnDescObject* GetGeodeticInformationStaticDescription();
    static its::AsnDescObject* GetCurrentLocationRetrievedStaticDescription();
    static its::AsnDescObject* GetAgeOfLocationInformationStaticDescription();
    static its::AsnDescObject* GetUserCSGInformationStaticDescription();

public:

    virtual ~LocationInformationGPRS()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LocationInformationGPRS(*this);
    }

    virtual std::string GetName() const
    { return "LocationInformationGPRS"; }

    void SetCellGlobalIdOrServiceAreaIdOrLAI(CellGlobalIdOrServiceAreaIdOrLAI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription());
        AddElement(0, element);
    }

    void SetCellGlobalIdOrServiceAreaIdOrLAI(const CellGlobalIdOrServiceAreaIdOrLAI& element)
    {
        its::AsnObject& asnObject = const_cast<CellGlobalIdOrServiceAreaIdOrLAI&>(element);
        asnObject.SetDescription(GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription());
        AddElement(0, element);
    }

    bool OptionCellGlobalIdOrServiceAreaIdOrLAI() const
    {
        return Contains(0);
    }

    const CellGlobalIdOrServiceAreaIdOrLAI& GetCellGlobalIdOrServiceAreaIdOrLAI() const
    {
        ITS_REQUIRE(OptionCellGlobalIdOrServiceAreaIdOrLAI());
        return static_cast<const CellGlobalIdOrServiceAreaIdOrLAI&> (ElementAt(0));
    }

    void SetRouteingAreaIdentity(RAIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRouteingAreaIdentityStaticDescription());
        AddElement(1, element);
    }

    void SetRouteingAreaIdentity(const RAIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<RAIdentity&>(element);
        asnObject.SetDescription(GetRouteingAreaIdentityStaticDescription());
        AddElement(1, element);
    }

    bool OptionRouteingAreaIdentity() const
    {
        return Contains(1);
    }

    const RAIdentity& GetRouteingAreaIdentity() const
    {
        ITS_REQUIRE(OptionRouteingAreaIdentity());
        return static_cast<const RAIdentity&> (ElementAt(1));
    }

    void SetGeographicalInformation(GeographicalInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(2, element);
    }

    void SetGeographicalInformation(const GeographicalInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GeographicalInformation&>(element);
        asnObject.SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(2, element);
    }

    bool OptionGeographicalInformation() const
    {
        return Contains(2);
    }

    const GeographicalInformation& GetGeographicalInformation() const
    {
        ITS_REQUIRE(OptionGeographicalInformation());
        return static_cast<const GeographicalInformation&> (ElementAt(2));
    }

    void SetSgsn_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_NumberStaticDescription());
        AddElement(3, element);
    }

    void SetSgsn_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetSgsn_NumberStaticDescription());
        AddElement(3, element);
    }

    bool OptionSgsn_Number() const
    {
        return Contains(3);
    }

    const ISDN_AddressString& GetSgsn_Number() const
    {
        ITS_REQUIRE(OptionSgsn_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(3));
    }

    void SetSelectedLSAIdentity(LSAIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSelectedLSAIdentityStaticDescription());
        AddElement(4, element);
    }

    void SetSelectedLSAIdentity(const LSAIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<LSAIdentity&>(element);
        asnObject.SetDescription(GetSelectedLSAIdentityStaticDescription());
        AddElement(4, element);
    }

    bool OptionSelectedLSAIdentity() const
    {
        return Contains(4);
    }

    const LSAIdentity& GetSelectedLSAIdentity() const
    {
        ITS_REQUIRE(OptionSelectedLSAIdentity());
        return static_cast<const LSAIdentity&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetSai_Present(Sai_Present* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSai_PresentStaticDescription());
        AddElement(6, element);
    }

    void SetSai_Present(const Sai_Present& element)
    {
        its::AsnObject& asnObject = const_cast<Sai_Present&>(element);
        asnObject.SetDescription(GetSai_PresentStaticDescription());
        AddElement(6, element);
    }

    bool OptionSai_Present() const
    {
        return Contains(6);
    }

    const Sai_Present& GetSai_Present() const
    {
        ITS_REQUIRE(OptionSai_Present());
        return static_cast<const Sai_Present&> (ElementAt(6));
    }

    void SetGeodeticInformation(GeodeticInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeodeticInformationStaticDescription());
        AddElement(7, element);
    }

    void SetGeodeticInformation(const GeodeticInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GeodeticInformation&>(element);
        asnObject.SetDescription(GetGeodeticInformationStaticDescription());
        AddElement(7, element);
    }

    bool OptionGeodeticInformation() const
    {
        return Contains(7);
    }

    const GeodeticInformation& GetGeodeticInformation() const
    {
        ITS_REQUIRE(OptionGeodeticInformation());
        return static_cast<const GeodeticInformation&> (ElementAt(7));
    }

    void SetCurrentLocationRetrieved(CurrentLocationRetrieved* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCurrentLocationRetrievedStaticDescription());
        AddElement(8, element);
    }

    void SetCurrentLocationRetrieved(const CurrentLocationRetrieved& element)
    {
        its::AsnObject& asnObject = const_cast<CurrentLocationRetrieved&>(element);
        asnObject.SetDescription(GetCurrentLocationRetrievedStaticDescription());
        AddElement(8, element);
    }

    bool OptionCurrentLocationRetrieved() const
    {
        return Contains(8);
    }

    const CurrentLocationRetrieved& GetCurrentLocationRetrieved() const
    {
        ITS_REQUIRE(OptionCurrentLocationRetrieved());
        return static_cast<const CurrentLocationRetrieved&> (ElementAt(8));
    }

    void SetAgeOfLocationInformation(AgeOfLocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(9, element);
    }

    void SetAgeOfLocationInformation(const AgeOfLocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<AgeOfLocationInformation&>(element);
        asnObject.SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(9, element);
    }

    bool OptionAgeOfLocationInformation() const
    {
        return Contains(9);
    }

    const AgeOfLocationInformation& GetAgeOfLocationInformation() const
    {
        ITS_REQUIRE(OptionAgeOfLocationInformation());
        return static_cast<const AgeOfLocationInformation&> (ElementAt(9));
    }

    void SetUserCSGInformation(UserCSGInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUserCSGInformationStaticDescription());
        AddElement(10, element);
    }

    void SetUserCSGInformation(const UserCSGInformation& element)
    {
        its::AsnObject& asnObject = const_cast<UserCSGInformation&>(element);
        asnObject.SetDescription(GetUserCSGInformationStaticDescription());
        AddElement(10, element);
    }

    bool OptionUserCSGInformation() const
    {
        return Contains(10);
    }

    const UserCSGInformation& GetUserCSGInformation() const
    {
        ITS_REQUIRE(OptionUserCSGInformation());
        return static_cast<const UserCSGInformation&> (ElementAt(10));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LOCATION_INFORMATION_GPRS_H_)

