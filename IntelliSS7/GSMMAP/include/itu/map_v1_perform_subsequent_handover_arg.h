//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_PERFORM_SUBSEQUENT_HANDOVER_ARG_H_)
#define _MAP_V1_PERFORM_SUBSEQUENT_HANDOVER_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v1_global_cell_id.h>
#include <map_v1_isdn_address_string.h>
#include <map_v1_classmark_information.h>



namespace map_v1 {



class PerformSubsequentHandoverArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::GlobalCellId GlobalCellId;


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::ClassmarkInformation ClassmarkInformation;


////////// End Nested Class(es) //////////

    PerformSubsequentHandoverArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    PerformSubsequentHandoverArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    PerformSubsequentHandoverArg(const PerformSubsequentHandoverArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PerformSubsequentHandoverArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTargetCellIdStaticDescription();
    static its::AsnDescObject* GetServingCellIdStaticDescription();
    static its::AsnDescObject* GetTargetMscNumberStaticDescription();
    static its::AsnDescObject* GetClassmarkInformationStaticDescription();

public:

    virtual ~PerformSubsequentHandoverArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PerformSubsequentHandoverArg(*this);
    }

    virtual std::string GetName() const
    { return "PerformSubsequentHandoverArg"; }

    void SetTargetCellId(GlobalCellId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetCellIdStaticDescription());
        AddElement(0, element);
    }

    void SetTargetCellId(const GlobalCellId& element)
    {
        its::AsnObject& asnObject = const_cast<GlobalCellId&>(element);
        asnObject.SetDescription(GetTargetCellIdStaticDescription());
        AddElement(0, element);
    }

    const GlobalCellId& GetTargetCellId() const
    {
        return static_cast<const GlobalCellId&> (ElementAt(0));
    }

    void SetServingCellId(GlobalCellId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServingCellIdStaticDescription());
        AddElement(1, element);
    }

    void SetServingCellId(const GlobalCellId& element)
    {
        its::AsnObject& asnObject = const_cast<GlobalCellId&>(element);
        asnObject.SetDescription(GetServingCellIdStaticDescription());
        AddElement(1, element);
    }

    const GlobalCellId& GetServingCellId() const
    {
        return static_cast<const GlobalCellId&> (ElementAt(1));
    }

    void SetTargetMscNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTargetMscNumberStaticDescription());
        AddElement(2, element);
    }

    void SetTargetMscNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetTargetMscNumberStaticDescription());
        AddElement(2, element);
    }

    const ISDN_AddressString& GetTargetMscNumber() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(2));
    }

    void SetClassmarkInformation(ClassmarkInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetClassmarkInformationStaticDescription());
        AddElement(3, element);
    }

    void SetClassmarkInformation(const ClassmarkInformation& element)
    {
        its::AsnObject& asnObject = const_cast<ClassmarkInformation&>(element);
        asnObject.SetDescription(GetClassmarkInformationStaticDescription());
        AddElement(3, element);
    }

    bool OptionClassmarkInformation() const
    {
        return Contains(3);
    }

    const ClassmarkInformation& GetClassmarkInformation() const
    {
        ITS_REQUIRE(OptionClassmarkInformation());
        return static_cast<const ClassmarkInformation&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_PERFORM_SUBSEQUENT_HANDOVER_ARG_H_)

