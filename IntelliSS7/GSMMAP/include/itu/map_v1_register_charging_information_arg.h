//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_REGISTER_CHARGING_INFORMATION_ARG_H_)
#define _MAP_V1_REGISTER_CHARGING_INFORMATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnBaseString.h>
#include <AsnInteger.h>
#include <AsnSequenceOf.h>

#include <map_v1_isdn_address_string.h>
#include <map_v1_imsi.h>
#include <map_v1_call_reference.h>
#include <map_v1_call_type.h>
#include <map_v1_call_status.h>
#include <map_v1_call_date_time.h>
#include <map_v1_call_duration.h>
#include <map_v1_bearer_service_code.h>
#include <map_v1_teleservice_code.h>
#include <map_v1_packet_data_volume.h>
#include <map_v1_charging_unit.h>
#include <map_v1_charge.h>
#include <map_v1_ss_charging_info.h>



namespace map_v1 {



class RegisterChargingInformationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::IMSI IMSI;


        typedef map_v1::CallReference CallReference;


        typedef map_v1::CallType CallType;


        typedef map_v1::CallStatus CallStatus;


        typedef map_v1::CallDateTime CallDateTime;


        typedef map_v1::CallDuration CallDuration;


        typedef map_v1::BearerServiceCode BearerServiceCode;


        typedef map_v1::TeleserviceCode TeleserviceCode;


        typedef map_v1::PacketDataVolume PacketDataVolume;


        typedef map_v1::ChargingUnit ChargingUnit;


        typedef map_v1::Charge Charge;


        typedef map_v1::SS_ChargingInfo SS_ChargingInfo;


////////// End Nested Class(es) //////////

    RegisterChargingInformationArg() : its::AsnSequence(16, false)
    {
        Initialize();
    }

    RegisterChargingInformationArg(its::Octets& octets) : its::AsnSequence(16, false)
    {
        Initialize();
        Decode(octets);
    }

    RegisterChargingInformationArg(const RegisterChargingInformationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RegisterChargingInformationArg(its::AsnDescObject* description) : its::AsnSequence(16, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsIsdnStaticDescription();
    static its::AsnDescObject* GetMscNumberStaticDescription();
    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetCallReferenceStaticDescription();
    static its::AsnDescObject* GetCallTypeStaticDescription();
    static its::AsnDescObject* GetCallStatusStaticDescription();
    static its::AsnDescObject* GetCallDataTimeStaticDescription();
    static its::AsnDescObject* GetCallDurationStaticDescription();
    static its::AsnDescObject* GetBearerServiceCodeStaticDescription();
    static its::AsnDescObject* GetTeleserviceCodeStaticDescription();
    static its::AsnDescObject* GetCalledNumberStaticDescription();
    static its::AsnDescObject* GetCallingNumberStaticDescription();
    static its::AsnDescObject* GetPacketDataVolumeStaticDescription();
    static its::AsnDescObject* GetChargingUnitStaticDescription();
    static its::AsnDescObject* GetChargeStaticDescription();
    static its::AsnDescObject* GetSs_ChargingInfoStaticDescription();

public:

    virtual ~RegisterChargingInformationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RegisterChargingInformationArg(*this);
    }

    virtual std::string GetName() const
    { return "RegisterChargingInformationArg"; }

    void SetMsIsdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    void SetMsIsdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetMsIsdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetMscNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMscNumberStaticDescription());
        AddElement(1, element);
    }

    void SetMscNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMscNumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetMscNumber() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(2, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(2, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(2));
    }

    void SetCallReference(CallReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallReferenceStaticDescription());
        AddElement(3, element);
    }

    void SetCallReference(const CallReference& element)
    {
        its::AsnObject& asnObject = const_cast<CallReference&>(element);
        asnObject.SetDescription(GetCallReferenceStaticDescription());
        AddElement(3, element);
    }

    const CallReference& GetCallReference() const
    {
        return static_cast<const CallReference&> (ElementAt(3));
    }

    void SetCallType(CallType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallTypeStaticDescription());
        AddElement(4, element);
    }

    void SetCallType(const CallType& element)
    {
        its::AsnObject& asnObject = const_cast<CallType&>(element);
        asnObject.SetDescription(GetCallTypeStaticDescription());
        AddElement(4, element);
    }

    const CallType& GetCallType() const
    {
        return static_cast<const CallType&> (ElementAt(4));
    }

    void SetCallStatus(CallStatus* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallStatusStaticDescription());
        AddElement(5, element);
    }

    void SetCallStatus(const CallStatus& element)
    {
        its::AsnObject& asnObject = const_cast<CallStatus&>(element);
        asnObject.SetDescription(GetCallStatusStaticDescription());
        AddElement(5, element);
    }

    const CallStatus& GetCallStatus() const
    {
        return static_cast<const CallStatus&> (ElementAt(5));
    }

    void SetCallDataTime(CallDateTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallDataTimeStaticDescription());
        AddElement(6, element);
    }

    void SetCallDataTime(const CallDateTime& element)
    {
        its::AsnObject& asnObject = const_cast<CallDateTime&>(element);
        asnObject.SetDescription(GetCallDataTimeStaticDescription());
        AddElement(6, element);
    }

    const CallDateTime& GetCallDataTime() const
    {
        return static_cast<const CallDateTime&> (ElementAt(6));
    }

    void SetCallDuration(CallDuration* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallDurationStaticDescription());
        AddElement(7, element);
    }

    void SetCallDuration(const CallDuration& element)
    {
        its::AsnObject& asnObject = const_cast<CallDuration&>(element);
        asnObject.SetDescription(GetCallDurationStaticDescription());
        AddElement(7, element);
    }

    const CallDuration& GetCallDuration() const
    {
        return static_cast<const CallDuration&> (ElementAt(7));
    }

    void SetBearerServiceCode(BearerServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerServiceCodeStaticDescription());
        AddElement(8, element);
    }

    void SetBearerServiceCode(const BearerServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BearerServiceCode&>(element);
        asnObject.SetDescription(GetBearerServiceCodeStaticDescription());
        AddElement(8, element);
    }

    bool OptionBearerServiceCode() const
    {
        return Contains(8);
    }

    const BearerServiceCode& GetBearerServiceCode() const
    {
        ITS_REQUIRE(OptionBearerServiceCode());
        return static_cast<const BearerServiceCode&> (ElementAt(8));
    }

    void SetTeleserviceCode(TeleserviceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeleserviceCodeStaticDescription());
        AddElement(9, element);
    }

    void SetTeleserviceCode(const TeleserviceCode& element)
    {
        its::AsnObject& asnObject = const_cast<TeleserviceCode&>(element);
        asnObject.SetDescription(GetTeleserviceCodeStaticDescription());
        AddElement(9, element);
    }

    bool OptionTeleserviceCode() const
    {
        return Contains(9);
    }

    const TeleserviceCode& GetTeleserviceCode() const
    {
        ITS_REQUIRE(OptionTeleserviceCode());
        return static_cast<const TeleserviceCode&> (ElementAt(9));
    }

    void SetCalledNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledNumberStaticDescription());
        AddElement(10, element);
    }

    void SetCalledNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetCalledNumberStaticDescription());
        AddElement(10, element);
    }

    bool OptionCalledNumber() const
    {
        return Contains(10);
    }

    const ISDN_AddressString& GetCalledNumber() const
    {
        ITS_REQUIRE(OptionCalledNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(10));
    }

    void SetCallingNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingNumberStaticDescription());
        AddElement(11, element);
    }

    void SetCallingNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetCallingNumberStaticDescription());
        AddElement(11, element);
    }

    bool OptionCallingNumber() const
    {
        return Contains(11);
    }

    const ISDN_AddressString& GetCallingNumber() const
    {
        ITS_REQUIRE(OptionCallingNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(11));
    }

    void SetPacketDataVolume(PacketDataVolume* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPacketDataVolumeStaticDescription());
        AddElement(12, element);
    }

    void SetPacketDataVolume(const PacketDataVolume& element)
    {
        its::AsnObject& asnObject = const_cast<PacketDataVolume&>(element);
        asnObject.SetDescription(GetPacketDataVolumeStaticDescription());
        AddElement(12, element);
    }

    bool OptionPacketDataVolume() const
    {
        return Contains(12);
    }

    const PacketDataVolume& GetPacketDataVolume() const
    {
        ITS_REQUIRE(OptionPacketDataVolume());
        return static_cast<const PacketDataVolume&> (ElementAt(12));
    }

    void SetChargingUnit(ChargingUnit* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingUnitStaticDescription());
        AddElement(13, element);
    }

    void SetChargingUnit(const ChargingUnit& element)
    {
        its::AsnObject& asnObject = const_cast<ChargingUnit&>(element);
        asnObject.SetDescription(GetChargingUnitStaticDescription());
        AddElement(13, element);
    }

    bool OptionChargingUnit() const
    {
        return Contains(13);
    }

    const ChargingUnit& GetChargingUnit() const
    {
        ITS_REQUIRE(OptionChargingUnit());
        return static_cast<const ChargingUnit&> (ElementAt(13));
    }

    void SetCharge(Charge* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargeStaticDescription());
        AddElement(14, element);
    }

    void SetCharge(const Charge& element)
    {
        its::AsnObject& asnObject = const_cast<Charge&>(element);
        asnObject.SetDescription(GetChargeStaticDescription());
        AddElement(14, element);
    }

    bool OptionCharge() const
    {
        return Contains(14);
    }

    const Charge& GetCharge() const
    {
        ITS_REQUIRE(OptionCharge());
        return static_cast<const Charge&> (ElementAt(14));
    }

    void SetSs_ChargingInfo(SS_ChargingInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_ChargingInfoStaticDescription());
        AddElement(15, element);
    }

    void SetSs_ChargingInfo(const SS_ChargingInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SS_ChargingInfo&>(element);
        asnObject.SetDescription(GetSs_ChargingInfoStaticDescription());
        AddElement(15, element);
    }

    bool OptionSs_ChargingInfo() const
    {
        return Contains(15);
    }

    const SS_ChargingInfo& GetSs_ChargingInfo() const
    {
        ITS_REQUIRE(OptionSs_ChargingInfo());
        return static_cast<const SS_ChargingInfo&> (ElementAt(15));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_REGISTER_CHARGING_INFORMATION_ARG_H_)

