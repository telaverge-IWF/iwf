//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CCBS_FEATURE_H_)
#define _MAP_V13_CCBS_FEATURE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>

#include <map_v13_ccbs_index.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_isdn_subaddress_string.h>
#include <map_v13_basic_service_code.h>



namespace map_v13 {



class CCBS_Feature : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::CCBS_Index CCBS_Index;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::ISDN_SubaddressString ISDN_SubaddressString;


        typedef map_v13::BasicServiceCode BasicServiceCode;


////////// End Nested Class(es) //////////

    CCBS_Feature() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    CCBS_Feature(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    CCBS_Feature(const CCBS_Feature& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CCBS_Feature(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCcbs_IndexStaticDescription();
    static its::AsnDescObject* GetB_subscriberNumberStaticDescription();
    static its::AsnDescObject* GetB_subscriberSubaddressStaticDescription();
    static its::AsnDescObject* GetBasicServiceGroupStaticDescription();

public:

    virtual ~CCBS_Feature()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CCBS_Feature(*this);
    }

    virtual std::string GetName() const
    { return "CCBS_Feature"; }

    void SetCcbs_Index(CCBS_Index* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_IndexStaticDescription());
        AddElement(0, element);
    }

    void SetCcbs_Index(const CCBS_Index& element)
    {
        its::AsnObject& asnObject = const_cast<CCBS_Index&>(element);
        asnObject.SetDescription(GetCcbs_IndexStaticDescription());
        AddElement(0, element);
    }

    bool OptionCcbs_Index() const
    {
        return Contains(0);
    }

    const CCBS_Index& GetCcbs_Index() const
    {
        ITS_REQUIRE(OptionCcbs_Index());
        return static_cast<const CCBS_Index&> (ElementAt(0));
    }

    void SetB_subscriberNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetB_subscriberNumberStaticDescription());
        AddElement(1, element);
    }

    void SetB_subscriberNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetB_subscriberNumberStaticDescription());
        AddElement(1, element);
    }

    bool OptionB_subscriberNumber() const
    {
        return Contains(1);
    }

    const ISDN_AddressString& GetB_subscriberNumber() const
    {
        ITS_REQUIRE(OptionB_subscriberNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetB_subscriberSubaddress(ISDN_SubaddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetB_subscriberSubaddressStaticDescription());
        AddElement(2, element);
    }

    void SetB_subscriberSubaddress(const ISDN_SubaddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_SubaddressString&>(element);
        asnObject.SetDescription(GetB_subscriberSubaddressStaticDescription());
        AddElement(2, element);
    }

    bool OptionB_subscriberSubaddress() const
    {
        return Contains(2);
    }

    const ISDN_SubaddressString& GetB_subscriberSubaddress() const
    {
        ITS_REQUIRE(OptionB_subscriberSubaddress());
        return static_cast<const ISDN_SubaddressString&> (ElementAt(2));
    }

    void SetBasicServiceGroup(BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(3, element);
    }

    void SetBasicServiceGroup(const BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceGroupStaticDescription());
        AddElement(3, element);
    }

    bool OptionBasicServiceGroup() const
    {
        return Contains(3);
    }

    const BasicServiceCode& GetBasicServiceGroup() const
    {
        ITS_REQUIRE(OptionBasicServiceGroup());
        return static_cast<const BasicServiceCode&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CCBS_FEATURE_H_)

