//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_SLR_ARG_PCS_EXTENSIONS_H_)
#define _MAP_V9_SLR_ARG_PCS_EXTENSIONS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>



namespace map_v9 {



class SLR_Arg_PCS_Extensions : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Na_ESRK_Request : public its::AsnNull
    {
    public:

        Na_ESRK_Request() : its::AsnNull(false)
        {
            Initialize();
        }

        Na_ESRK_Request(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Na_ESRK_Request(const Na_ESRK_Request& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Na_ESRK_Request(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Na_ESRK_Request()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Na_ESRK_Request(*this);
        }

        virtual std::string GetName() const
        { return "Na_ESRK_Request"; }

    };


////////// End Nested Class(es) //////////

    SLR_Arg_PCS_Extensions() : its::AsnSequence(1, false)
    {
        Initialize();
    }

    SLR_Arg_PCS_Extensions(its::Octets& octets) : its::AsnSequence(1, false)
    {
        Initialize();
        Decode(octets);
    }

    SLR_Arg_PCS_Extensions(const SLR_Arg_PCS_Extensions& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SLR_Arg_PCS_Extensions(its::AsnDescObject* description) : its::AsnSequence(1, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNa_ESRK_RequestStaticDescription();

public:

    virtual ~SLR_Arg_PCS_Extensions()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SLR_Arg_PCS_Extensions(*this);
    }

    virtual std::string GetName() const
    { return "SLR_Arg_PCS_Extensions"; }

    void SetNa_ESRK_Request(Na_ESRK_Request* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNa_ESRK_RequestStaticDescription());
        AddElement(0, element);
    }

    void SetNa_ESRK_Request(const Na_ESRK_Request& element)
    {
        its::AsnObject& asnObject = const_cast<Na_ESRK_Request&>(element);
        asnObject.SetDescription(GetNa_ESRK_RequestStaticDescription());
        AddElement(0, element);
    }

    bool OptionNa_ESRK_Request() const
    {
        return Contains(0);
    }

    const Na_ESRK_Request& GetNa_ESRK_Request() const
    {
        ITS_REQUIRE(OptionNa_ESRK_Request());
        return static_cast<const Na_ESRK_Request&> (ElementAt(0));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_SLR_ARG_PCS_EXTENSIONS_H_)

