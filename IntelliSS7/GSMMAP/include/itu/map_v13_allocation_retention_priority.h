//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_ALLOCATION_RETENTION_PRIORITY_H_)
#define _MAP_V13_ALLOCATION_RETENTION_PRIORITY_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnBoolean.h>

#include <map_v13_extension_container.h>



namespace map_v13 {



class Allocation_Retention_Priority : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Priority_level : public its::AsnInteger
    {
    public:

        Priority_level() : its::AsnInteger(false)
        {
            Initialize();
        }

        Priority_level(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        Priority_level(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        Priority_level(const Priority_level& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        Priority_level(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        Priority_level(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Priority_level()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Priority_level(*this);
        }

        virtual std::string GetName() const
        { return "Priority_level"; }

    };



    class Pre_emption_capability : public its::AsnBoolean
    {
    public:

        Pre_emption_capability(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Pre_emption_capability(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Pre_emption_capability(const Pre_emption_capability& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Pre_emption_capability(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Pre_emption_capability(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Pre_emption_capability()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Pre_emption_capability(*this);
        }

        virtual std::string GetName() const
        { return "Pre_emption_capability"; }

    };



    class Pre_emption_vulnerability : public its::AsnBoolean
    {
    public:

        Pre_emption_vulnerability(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Pre_emption_vulnerability(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Pre_emption_vulnerability(const Pre_emption_vulnerability& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Pre_emption_vulnerability(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Pre_emption_vulnerability(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Pre_emption_vulnerability()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Pre_emption_vulnerability(*this);
        }

        virtual std::string GetName() const
        { return "Pre_emption_vulnerability"; }

    };


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    Allocation_Retention_Priority() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    Allocation_Retention_Priority(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    Allocation_Retention_Priority(const Allocation_Retention_Priority& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Allocation_Retention_Priority(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPriority_levelStaticDescription();
    static its::AsnDescObject* GetPre_emption_capabilityStaticDescription();
    static its::AsnDescObject* GetPre_emption_vulnerabilityStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~Allocation_Retention_Priority()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Allocation_Retention_Priority(*this);
    }

    virtual std::string GetName() const
    { return "Allocation_Retention_Priority"; }

    void SetPriority_level(Priority_level* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPriority_levelStaticDescription());
        AddElement(0, element);
    }

    void SetPriority_level(const Priority_level& element)
    {
        its::AsnObject& asnObject = const_cast<Priority_level&>(element);
        asnObject.SetDescription(GetPriority_levelStaticDescription());
        AddElement(0, element);
    }

    const Priority_level& GetPriority_level() const
    {
        return static_cast<const Priority_level&> (ElementAt(0));
    }

    void SetPre_emption_capability(Pre_emption_capability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPre_emption_capabilityStaticDescription());
        AddElement(1, element);
    }

    void SetPre_emption_capability(const Pre_emption_capability& element)
    {
        its::AsnObject& asnObject = const_cast<Pre_emption_capability&>(element);
        asnObject.SetDescription(GetPre_emption_capabilityStaticDescription());
        AddElement(1, element);
    }

    bool OptionPre_emption_capability() const
    {
        return Contains(1);
    }

    const Pre_emption_capability& GetPre_emption_capability() const
    {
        ITS_REQUIRE(OptionPre_emption_capability());
        return static_cast<const Pre_emption_capability&> (ElementAt(1));
    }

    void SetPre_emption_vulnerability(Pre_emption_vulnerability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPre_emption_vulnerabilityStaticDescription());
        AddElement(2, element);
    }

    void SetPre_emption_vulnerability(const Pre_emption_vulnerability& element)
    {
        its::AsnObject& asnObject = const_cast<Pre_emption_vulnerability&>(element);
        asnObject.SetDescription(GetPre_emption_vulnerabilityStaticDescription());
        AddElement(2, element);
    }

    bool OptionPre_emption_vulnerability() const
    {
        return Contains(2);
    }

    const Pre_emption_vulnerability& GetPre_emption_vulnerability() const
    {
        ITS_REQUIRE(OptionPre_emption_vulnerability());
        return static_cast<const Pre_emption_vulnerability&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_ALLOCATION_RETENTION_PRIORITY_H_)

