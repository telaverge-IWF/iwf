//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LOCATION_AREA_H_)
#define _MAP_V13_LOCATION_AREA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v13_lai_fixed_length.h>
#include <map_v13_lac.h>



namespace map_v13 {



class LocationArea : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::LAIFixedLength LAIFixedLength;


        typedef map_v13::LAC LAC;


////////// End Nested Class(es) //////////

    LocationArea() : its::AsnChoice(false)
    {
        Initialize();
    }

    LocationArea(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    LocationArea(const LocationArea& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    LocationArea(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    LocationArea(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLaiFixedLengthStaticDescription();
    static its::AsnDescObject* GetLacStaticDescription();

public:

    virtual ~LocationArea()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LocationArea(*this);
    }

    virtual std::string GetName() const
    { return "LocationArea"; }

    void SetChoiceLaiFixedLength(LAIFixedLength* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLaiFixedLengthStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLaiFixedLength(const LAIFixedLength& choice)
    {
        its::AsnObject& asnObject = const_cast<LAIFixedLength&>(choice);
        asnObject.SetDescription(GetLaiFixedLengthStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLaiFixedLength() const
    {
        return Contains(GetLaiFixedLengthStaticDescription()->TagIdentity());
    }

    const LAIFixedLength& GetChoiceLaiFixedLength() const
    {
        ITS_REQUIRE(ChoiceLaiFixedLength());
        return static_cast<const LAIFixedLength&> (GetChoice());
    }

    void SetChoiceLac(LAC* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLacStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLac(const LAC& choice)
    {
        its::AsnObject& asnObject = const_cast<LAC&>(choice);
        asnObject.SetDescription(GetLacStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLac() const
    {
        return Contains(GetLacStaticDescription()->TagIdentity());
    }

    const LAC& GetChoiceLac() const
    {
        ITS_REQUIRE(ChoiceLac());
        return static_cast<const LAC&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LOCATION_AREA_H_)

