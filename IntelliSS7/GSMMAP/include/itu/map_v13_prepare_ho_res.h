//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PREPARE_HO_RES_H_)
#define _MAP_V13_PREPARE_HO_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>

#include <map_v13_isdn_address_string.h>
#include <map_v13_relocation_number_list.h>
#include <map_v13_access_network_signal_info.h>
#include <map_v13_multicall_bearer_info.h>
#include <map_v13_selected_umts_algorithms.h>
#include <map_v13_chosen_radio_resource_information.h>
#include <map_v13_extension_container.h>
#include <map_v13_codec.h>
#include <map_v13_codec_list.h>
#include <map_v13_ao_ip_codec.h>
#include <map_v13_ao_ip_codecs_list.h>



namespace map_v13 {



class PrepareHO_Res : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class MultipleBearerNotSupported : public its::AsnNull
    {
    public:

        MultipleBearerNotSupported() : its::AsnNull(false)
        {
            Initialize();
        }

        MultipleBearerNotSupported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MultipleBearerNotSupported(const MultipleBearerNotSupported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MultipleBearerNotSupported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MultipleBearerNotSupported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MultipleBearerNotSupported(*this);
        }

        virtual std::string GetName() const
        { return "MultipleBearerNotSupported"; }

    };


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::RelocationNumberList RelocationNumberList;


        typedef map_v13::AccessNetworkSignalInfo AccessNetworkSignalInfo;


        typedef map_v13::MulticallBearerInfo MulticallBearerInfo;


        typedef map_v13::SelectedUMTS_Algorithms SelectedUMTS_Algorithms;


        typedef map_v13::ChosenRadioResourceInformation ChosenRadioResourceInformation;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::Codec Codec;


        typedef map_v13::CodecList CodecList;


        typedef map_v13::AoIPCodec AoIPCodec;


        typedef map_v13::AoIPCodecsList AoIPCodecsList;


////////// End Nested Class(es) //////////

    PrepareHO_Res() : its::AsnSequence(12, false)
    {
        Initialize();
    }

    PrepareHO_Res(its::Octets& octets) : its::AsnSequence(12, false)
    {
        Initialize();
        Decode(octets);
    }

    PrepareHO_Res(const PrepareHO_Res& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PrepareHO_Res(its::AsnDescObject* description) : its::AsnSequence(12, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetHandoverNumberStaticDescription();
    static its::AsnDescObject* GetRelocationNumberListStaticDescription();
    static its::AsnDescObject* GetAn_APDUStaticDescription();
    static its::AsnDescObject* GetMulticallBearerInfoStaticDescription();
    static its::AsnDescObject* GetMultipleBearerNotSupportedStaticDescription();
    static its::AsnDescObject* GetSelectedUMTS_AlgorithmsStaticDescription();
    static its::AsnDescObject* GetChosenRadioResourceInformationStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetIuSelectedCodecStaticDescription();
    static its::AsnDescObject* GetIuAvailableCodecsListStaticDescription();
    static its::AsnDescObject* GetAoipSelectedCodecTargetStaticDescription();
    static its::AsnDescObject* GetAoipAvailableCodecsListMapStaticDescription();

public:

    virtual ~PrepareHO_Res()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PrepareHO_Res(*this);
    }

    virtual std::string GetName() const
    { return "PrepareHO_Res"; }

    void SetHandoverNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHandoverNumberStaticDescription());
        AddElement(0, element);
    }

    void SetHandoverNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetHandoverNumberStaticDescription());
        AddElement(0, element);
    }

    bool OptionHandoverNumber() const
    {
        return Contains(0);
    }

    const ISDN_AddressString& GetHandoverNumber() const
    {
        ITS_REQUIRE(OptionHandoverNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetRelocationNumberList(RelocationNumberList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRelocationNumberListStaticDescription());
        AddElement(1, element);
    }

    void SetRelocationNumberList(const RelocationNumberList& element)
    {
        its::AsnObject& asnObject = const_cast<RelocationNumberList&>(element);
        asnObject.SetDescription(GetRelocationNumberListStaticDescription());
        AddElement(1, element);
    }

    bool OptionRelocationNumberList() const
    {
        return Contains(1);
    }

    const RelocationNumberList& GetRelocationNumberList() const
    {
        ITS_REQUIRE(OptionRelocationNumberList());
        return static_cast<const RelocationNumberList&> (ElementAt(1));
    }

    void SetAn_APDU(AccessNetworkSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAn_APDUStaticDescription());
        AddElement(2, element);
    }

    void SetAn_APDU(const AccessNetworkSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AccessNetworkSignalInfo&>(element);
        asnObject.SetDescription(GetAn_APDUStaticDescription());
        AddElement(2, element);
    }

    bool OptionAn_APDU() const
    {
        return Contains(2);
    }

    const AccessNetworkSignalInfo& GetAn_APDU() const
    {
        ITS_REQUIRE(OptionAn_APDU());
        return static_cast<const AccessNetworkSignalInfo&> (ElementAt(2));
    }

    void SetMulticallBearerInfo(MulticallBearerInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMulticallBearerInfoStaticDescription());
        AddElement(3, element);
    }

    void SetMulticallBearerInfo(const MulticallBearerInfo& element)
    {
        its::AsnObject& asnObject = const_cast<MulticallBearerInfo&>(element);
        asnObject.SetDescription(GetMulticallBearerInfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionMulticallBearerInfo() const
    {
        return Contains(3);
    }

    const MulticallBearerInfo& GetMulticallBearerInfo() const
    {
        ITS_REQUIRE(OptionMulticallBearerInfo());
        return static_cast<const MulticallBearerInfo&> (ElementAt(3));
    }

    void SetMultipleBearerNotSupported(MultipleBearerNotSupported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMultipleBearerNotSupportedStaticDescription());
        AddElement(4, element);
    }

    void SetMultipleBearerNotSupported(const MultipleBearerNotSupported& element)
    {
        its::AsnObject& asnObject = const_cast<MultipleBearerNotSupported&>(element);
        asnObject.SetDescription(GetMultipleBearerNotSupportedStaticDescription());
        AddElement(4, element);
    }

    bool OptionMultipleBearerNotSupported() const
    {
        return Contains(4);
    }

    const MultipleBearerNotSupported& GetMultipleBearerNotSupported() const
    {
        ITS_REQUIRE(OptionMultipleBearerNotSupported());
        return static_cast<const MultipleBearerNotSupported&> (ElementAt(4));
    }

    void SetSelectedUMTS_Algorithms(SelectedUMTS_Algorithms* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSelectedUMTS_AlgorithmsStaticDescription());
        AddElement(5, element);
    }

    void SetSelectedUMTS_Algorithms(const SelectedUMTS_Algorithms& element)
    {
        its::AsnObject& asnObject = const_cast<SelectedUMTS_Algorithms&>(element);
        asnObject.SetDescription(GetSelectedUMTS_AlgorithmsStaticDescription());
        AddElement(5, element);
    }

    bool OptionSelectedUMTS_Algorithms() const
    {
        return Contains(5);
    }

    const SelectedUMTS_Algorithms& GetSelectedUMTS_Algorithms() const
    {
        ITS_REQUIRE(OptionSelectedUMTS_Algorithms());
        return static_cast<const SelectedUMTS_Algorithms&> (ElementAt(5));
    }

    void SetChosenRadioResourceInformation(ChosenRadioResourceInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChosenRadioResourceInformationStaticDescription());
        AddElement(6, element);
    }

    void SetChosenRadioResourceInformation(const ChosenRadioResourceInformation& element)
    {
        its::AsnObject& asnObject = const_cast<ChosenRadioResourceInformation&>(element);
        asnObject.SetDescription(GetChosenRadioResourceInformationStaticDescription());
        AddElement(6, element);
    }

    bool OptionChosenRadioResourceInformation() const
    {
        return Contains(6);
    }

    const ChosenRadioResourceInformation& GetChosenRadioResourceInformation() const
    {
        ITS_REQUIRE(OptionChosenRadioResourceInformation());
        return static_cast<const ChosenRadioResourceInformation&> (ElementAt(6));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(7);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(7));
    }

    void SetIuSelectedCodec(Codec* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIuSelectedCodecStaticDescription());
        AddElement(8, element);
    }

    void SetIuSelectedCodec(const Codec& element)
    {
        its::AsnObject& asnObject = const_cast<Codec&>(element);
        asnObject.SetDescription(GetIuSelectedCodecStaticDescription());
        AddElement(8, element);
    }

    bool OptionIuSelectedCodec() const
    {
        return Contains(8);
    }

    const Codec& GetIuSelectedCodec() const
    {
        ITS_REQUIRE(OptionIuSelectedCodec());
        return static_cast<const Codec&> (ElementAt(8));
    }

    void SetIuAvailableCodecsList(CodecList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIuAvailableCodecsListStaticDescription());
        AddElement(9, element);
    }

    void SetIuAvailableCodecsList(const CodecList& element)
    {
        its::AsnObject& asnObject = const_cast<CodecList&>(element);
        asnObject.SetDescription(GetIuAvailableCodecsListStaticDescription());
        AddElement(9, element);
    }

    bool OptionIuAvailableCodecsList() const
    {
        return Contains(9);
    }

    const CodecList& GetIuAvailableCodecsList() const
    {
        ITS_REQUIRE(OptionIuAvailableCodecsList());
        return static_cast<const CodecList&> (ElementAt(9));
    }

    void SetAoipSelectedCodecTarget(AoIPCodec* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAoipSelectedCodecTargetStaticDescription());
        AddElement(10, element);
    }

    void SetAoipSelectedCodecTarget(const AoIPCodec& element)
    {
        its::AsnObject& asnObject = const_cast<AoIPCodec&>(element);
        asnObject.SetDescription(GetAoipSelectedCodecTargetStaticDescription());
        AddElement(10, element);
    }

    bool OptionAoipSelectedCodecTarget() const
    {
        return Contains(10);
    }

    const AoIPCodec& GetAoipSelectedCodecTarget() const
    {
        ITS_REQUIRE(OptionAoipSelectedCodecTarget());
        return static_cast<const AoIPCodec&> (ElementAt(10));
    }

    void SetAoipAvailableCodecsListMap(AoIPCodecsList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAoipAvailableCodecsListMapStaticDescription());
        AddElement(11, element);
    }

    void SetAoipAvailableCodecsListMap(const AoIPCodecsList& element)
    {
        its::AsnObject& asnObject = const_cast<AoIPCodecsList&>(element);
        asnObject.SetDescription(GetAoipAvailableCodecsListMapStaticDescription());
        AddElement(11, element);
    }

    bool OptionAoipAvailableCodecsListMap() const
    {
        return Contains(11);
    }

    const AoIPCodecsList& GetAoipAvailableCodecsListMap() const
    {
        ITS_REQUIRE(OptionAoipAvailableCodecsListMap());
        return static_cast<const AoIPCodecsList&> (ElementAt(11));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PREPARE_HO_RES_H_)

