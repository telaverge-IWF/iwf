//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_CALL_STATUS_H_)
#define _MAP_V1_CALL_STATUS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v1 {



class CallStatus : public its::AsnEnumerated
{
public:

    CallStatus() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    CallStatus(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    CallStatus(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    CallStatus(const CallStatus& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    CallStatus(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    CallStatus(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~CallStatus()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallStatus(*this);
    }

    virtual std::string GetName() const
    { return "CallStatus"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        CALL_STATUS_UNDETERMINED = 0,
        CALL_STATUS_SUCCESSFUL_NORMAL_TERMINATION = 1,
        CALL_STATUS_SUCCESSFUL_ABNORMAL_TERMINATION = 2,
        CALL_STATUS_FORWARDED = 4,
        CALL_STATUS_FORWARDED_WITH_ABNORMAL_TERMINATION = 5,
        CALL_STATUS_REROUTED = 6,
        CALL_STATUS_REROUTED_WITH_ABNORMAL_TERMINATION = 7,
        CALL_STATUS_UNSUCCESSFUL_NO_RADIO_CONTACT = 8,
        CALL_STATUS_UNSUCCESSFUL_NO_RESPONSE = 9,
        CALL_STATUS_UNSUCCESSFUL_BUSY_SUBSCRIBER = 10,
        CALL_STATUS_UNSUCCESSFUL_SYSTEM_FAILED = 11,
        CALL_STATUS_UNSUCCESSFUL_SUBSCRIPTION_VIOLATION = 12,
        CALL_STATUS_UNSUCCESSFUL_UNSUPPORTED_FACILITY = 13

    };

    void SetUndetermined()
    { _value = 0; }

    bool IsUndetermined() const
    { return _value == 0; }

    void SetSuccessfulNormalTermination()
    { _value = 1; }

    bool IsSuccessfulNormalTermination() const
    { return _value == 1; }

    void SetSuccessfulAbnormalTermination()
    { _value = 2; }

    bool IsSuccessfulAbnormalTermination() const
    { return _value == 2; }

    void SetForwarded()
    { _value = 4; }

    bool IsForwarded() const
    { return _value == 4; }

    void SetForwardedWithAbnormalTermination()
    { _value = 5; }

    bool IsForwardedWithAbnormalTermination() const
    { return _value == 5; }

    void SetRerouted()
    { _value = 6; }

    bool IsRerouted() const
    { return _value == 6; }

    void SetReroutedWithAbnormalTermination()
    { _value = 7; }

    bool IsReroutedWithAbnormalTermination() const
    { return _value == 7; }

    void SetUnsuccessfulNoRadioContact()
    { _value = 8; }

    bool IsUnsuccessfulNoRadioContact() const
    { return _value == 8; }

    void SetUnsuccessfulNoResponse()
    { _value = 9; }

    bool IsUnsuccessfulNoResponse() const
    { return _value == 9; }

    void SetUnsuccessfulBusySubscriber()
    { _value = 10; }

    bool IsUnsuccessfulBusySubscriber() const
    { return _value == 10; }

    void SetUnsuccessfulSystemFailed()
    { _value = 11; }

    bool IsUnsuccessfulSystemFailed() const
    { return _value == 11; }

    void SetUnsuccessfulSubscriptionViolation()
    { _value = 12; }

    bool IsUnsuccessfulSubscriptionViolation() const
    { return _value == 12; }

    void SetUnsuccessfulUnsupportedFacility()
    { _value = 13; }

    bool IsUnsuccessfulUnsupportedFacility() const
    { return _value == 13; }

};



} // namespace.

#endif    // !defined(_MAP_V1_CALL_STATUS_H_)

