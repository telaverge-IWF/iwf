//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_ACTIVATE_TRACE_MODE_ARG_H_)
#define _MAP_V13_ACTIVATE_TRACE_MODE_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>
#include <AsnBitString.h>

#include <map_v13_imsi.h>
#include <map_v13_trace_reference.h>
#include <map_v13_trace_type.h>
#include <map_v13_address_string.h>
#include <map_v13_extension_container.h>
#include <map_v13_trace_reference2.h>
#include <map_v13_trace_depth_list.h>
#include <map_v13_trace_ne_type_list.h>
#include <map_v13_trace_interface_list.h>
#include <map_v13_trace_event_list.h>
#include <map_v13_gsn_address.h>
#include <map_v13_mdt_configuration.h>



namespace map_v13 {



class ActivateTraceModeArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::IMSI IMSI;


        typedef map_v13::TraceReference TraceReference;


        typedef map_v13::TraceType TraceType;


        typedef map_v13::AddressString AddressString;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::TraceReference2 TraceReference2;


        typedef map_v13::TraceDepthList TraceDepthList;


        typedef map_v13::TraceNE_TypeList TraceNE_TypeList;


        typedef map_v13::TraceInterfaceList TraceInterfaceList;


        typedef map_v13::TraceEventList TraceEventList;


        typedef map_v13::GSN_Address GSN_Address;


        typedef map_v13::MDT_Configuration MDT_Configuration;


////////// End Nested Class(es) //////////

    ActivateTraceModeArg() : its::AsnSequence(12, false)
    {
        Initialize();
    }

    ActivateTraceModeArg(its::Octets& octets) : its::AsnSequence(12, false)
    {
        Initialize();
        Decode(octets);
    }

    ActivateTraceModeArg(const ActivateTraceModeArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ActivateTraceModeArg(its::AsnDescObject* description) : its::AsnSequence(12, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetTraceReferenceStaticDescription();
    static its::AsnDescObject* GetTraceTypeStaticDescription();
    static its::AsnDescObject* GetOmc_IdStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetTraceReference2StaticDescription();
    static its::AsnDescObject* GetTraceDepthListStaticDescription();
    static its::AsnDescObject* GetTraceNE_TypeListStaticDescription();
    static its::AsnDescObject* GetTraceInterfaceListStaticDescription();
    static its::AsnDescObject* GetTraceEventListStaticDescription();
    static its::AsnDescObject* GetTraceCollectionEntityStaticDescription();
    static its::AsnDescObject* GetMdt_ConfigurationStaticDescription();

public:

    virtual ~ActivateTraceModeArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ActivateTraceModeArg(*this);
    }

    virtual std::string GetName() const
    { return "ActivateTraceModeArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    bool OptionImsi() const
    {
        return Contains(0);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetTraceReference(TraceReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceReferenceStaticDescription());
        AddElement(1, element);
    }

    void SetTraceReference(const TraceReference& element)
    {
        its::AsnObject& asnObject = const_cast<TraceReference&>(element);
        asnObject.SetDescription(GetTraceReferenceStaticDescription());
        AddElement(1, element);
    }

    const TraceReference& GetTraceReference() const
    {
        return static_cast<const TraceReference&> (ElementAt(1));
    }

    void SetTraceType(TraceType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceTypeStaticDescription());
        AddElement(2, element);
    }

    void SetTraceType(const TraceType& element)
    {
        its::AsnObject& asnObject = const_cast<TraceType&>(element);
        asnObject.SetDescription(GetTraceTypeStaticDescription());
        AddElement(2, element);
    }

    const TraceType& GetTraceType() const
    {
        return static_cast<const TraceType&> (ElementAt(2));
    }

    void SetOmc_Id(AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOmc_IdStaticDescription());
        AddElement(3, element);
    }

    void SetOmc_Id(const AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(element);
        asnObject.SetDescription(GetOmc_IdStaticDescription());
        AddElement(3, element);
    }

    bool OptionOmc_Id() const
    {
        return Contains(3);
    }

    const AddressString& GetOmc_Id() const
    {
        ITS_REQUIRE(OptionOmc_Id());
        return static_cast<const AddressString&> (ElementAt(3));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(4);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(4));
    }

    void SetTraceReference2(TraceReference2* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceReference2StaticDescription());
        AddElement(5, element);
    }

    void SetTraceReference2(const TraceReference2& element)
    {
        its::AsnObject& asnObject = const_cast<TraceReference2&>(element);
        asnObject.SetDescription(GetTraceReference2StaticDescription());
        AddElement(5, element);
    }

    bool OptionTraceReference2() const
    {
        return Contains(5);
    }

    const TraceReference2& GetTraceReference2() const
    {
        ITS_REQUIRE(OptionTraceReference2());
        return static_cast<const TraceReference2&> (ElementAt(5));
    }

    void SetTraceDepthList(TraceDepthList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceDepthListStaticDescription());
        AddElement(6, element);
    }

    void SetTraceDepthList(const TraceDepthList& element)
    {
        its::AsnObject& asnObject = const_cast<TraceDepthList&>(element);
        asnObject.SetDescription(GetTraceDepthListStaticDescription());
        AddElement(6, element);
    }

    bool OptionTraceDepthList() const
    {
        return Contains(6);
    }

    const TraceDepthList& GetTraceDepthList() const
    {
        ITS_REQUIRE(OptionTraceDepthList());
        return static_cast<const TraceDepthList&> (ElementAt(6));
    }

    void SetTraceNE_TypeList(TraceNE_TypeList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceNE_TypeListStaticDescription());
        AddElement(7, element);
    }

    void SetTraceNE_TypeList(const TraceNE_TypeList& element)
    {
        its::AsnObject& asnObject = const_cast<TraceNE_TypeList&>(element);
        asnObject.SetDescription(GetTraceNE_TypeListStaticDescription());
        AddElement(7, element);
    }

    bool OptionTraceNE_TypeList() const
    {
        return Contains(7);
    }

    const TraceNE_TypeList& GetTraceNE_TypeList() const
    {
        ITS_REQUIRE(OptionTraceNE_TypeList());
        return static_cast<const TraceNE_TypeList&> (ElementAt(7));
    }

    void SetTraceInterfaceList(TraceInterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceInterfaceListStaticDescription());
        AddElement(8, element);
    }

    void SetTraceInterfaceList(const TraceInterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<TraceInterfaceList&>(element);
        asnObject.SetDescription(GetTraceInterfaceListStaticDescription());
        AddElement(8, element);
    }

    bool OptionTraceInterfaceList() const
    {
        return Contains(8);
    }

    const TraceInterfaceList& GetTraceInterfaceList() const
    {
        ITS_REQUIRE(OptionTraceInterfaceList());
        return static_cast<const TraceInterfaceList&> (ElementAt(8));
    }

    void SetTraceEventList(TraceEventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceEventListStaticDescription());
        AddElement(9, element);
    }

    void SetTraceEventList(const TraceEventList& element)
    {
        its::AsnObject& asnObject = const_cast<TraceEventList&>(element);
        asnObject.SetDescription(GetTraceEventListStaticDescription());
        AddElement(9, element);
    }

    bool OptionTraceEventList() const
    {
        return Contains(9);
    }

    const TraceEventList& GetTraceEventList() const
    {
        ITS_REQUIRE(OptionTraceEventList());
        return static_cast<const TraceEventList&> (ElementAt(9));
    }

    void SetTraceCollectionEntity(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTraceCollectionEntityStaticDescription());
        AddElement(10, element);
    }

    void SetTraceCollectionEntity(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetTraceCollectionEntityStaticDescription());
        AddElement(10, element);
    }

    bool OptionTraceCollectionEntity() const
    {
        return Contains(10);
    }

    const GSN_Address& GetTraceCollectionEntity() const
    {
        ITS_REQUIRE(OptionTraceCollectionEntity());
        return static_cast<const GSN_Address&> (ElementAt(10));
    }

    void SetMdt_Configuration(MDT_Configuration* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMdt_ConfigurationStaticDescription());
        AddElement(11, element);
    }

    void SetMdt_Configuration(const MDT_Configuration& element)
    {
        its::AsnObject& asnObject = const_cast<MDT_Configuration&>(element);
        asnObject.SetDescription(GetMdt_ConfigurationStaticDescription());
        AddElement(11, element);
    }

    bool OptionMdt_Configuration() const
    {
        return Contains(11);
    }

    const MDT_Configuration& GetMdt_Configuration() const
    {
        ITS_REQUIRE(OptionMdt_Configuration());
        return static_cast<const MDT_Configuration&> (ElementAt(11));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_ACTIVATE_TRACE_MODE_ARG_H_)

