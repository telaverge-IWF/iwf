//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_TRACE_EVENT_LIST_H_)
#define _MAP_V9_TRACE_EVENT_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>

#include <map_v9_msc_s_event_list.h>
#include <map_v9_mgw_event_list.h>
#include <map_v9_sgsn_event_list.h>
#include <map_v9_ggsn_event_list.h>
#include <map_v9_bmsc_event_list.h>



namespace map_v9 {



class TraceEventList : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::MSC_S_EventList MSC_S_EventList;


        typedef map_v9::MGW_EventList MGW_EventList;


        typedef map_v9::SGSN_EventList SGSN_EventList;


        typedef map_v9::GGSN_EventList GGSN_EventList;


        typedef map_v9::BMSC_EventList BMSC_EventList;


////////// End Nested Class(es) //////////

    TraceEventList() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    TraceEventList(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    TraceEventList(const TraceEventList& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    TraceEventList(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsc_s_ListStaticDescription();
    static its::AsnDescObject* GetMgw_ListStaticDescription();
    static its::AsnDescObject* GetSgsn_ListStaticDescription();
    static its::AsnDescObject* GetGgsn_ListStaticDescription();
    static its::AsnDescObject* GetBmsc_ListStaticDescription();

public:

    virtual ~TraceEventList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TraceEventList(*this);
    }

    virtual std::string GetName() const
    { return "TraceEventList"; }

    void SetMsc_s_List(MSC_S_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_ListStaticDescription());
        AddElement(0, element);
    }

    void SetMsc_s_List(const MSC_S_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<MSC_S_EventList&>(element);
        asnObject.SetDescription(GetMsc_s_ListStaticDescription());
        AddElement(0, element);
    }

    bool OptionMsc_s_List() const
    {
        return Contains(0);
    }

    const MSC_S_EventList& GetMsc_s_List() const
    {
        ITS_REQUIRE(OptionMsc_s_List());
        return static_cast<const MSC_S_EventList&> (ElementAt(0));
    }

    void SetMgw_List(MGW_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_ListStaticDescription());
        AddElement(1, element);
    }

    void SetMgw_List(const MGW_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<MGW_EventList&>(element);
        asnObject.SetDescription(GetMgw_ListStaticDescription());
        AddElement(1, element);
    }

    bool OptionMgw_List() const
    {
        return Contains(1);
    }

    const MGW_EventList& GetMgw_List() const
    {
        ITS_REQUIRE(OptionMgw_List());
        return static_cast<const MGW_EventList&> (ElementAt(1));
    }

    void SetSgsn_List(SGSN_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_ListStaticDescription());
        AddElement(2, element);
    }

    void SetSgsn_List(const SGSN_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<SGSN_EventList&>(element);
        asnObject.SetDescription(GetSgsn_ListStaticDescription());
        AddElement(2, element);
    }

    bool OptionSgsn_List() const
    {
        return Contains(2);
    }

    const SGSN_EventList& GetSgsn_List() const
    {
        ITS_REQUIRE(OptionSgsn_List());
        return static_cast<const SGSN_EventList&> (ElementAt(2));
    }

    void SetGgsn_List(GGSN_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGgsn_ListStaticDescription());
        AddElement(3, element);
    }

    void SetGgsn_List(const GGSN_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<GGSN_EventList&>(element);
        asnObject.SetDescription(GetGgsn_ListStaticDescription());
        AddElement(3, element);
    }

    bool OptionGgsn_List() const
    {
        return Contains(3);
    }

    const GGSN_EventList& GetGgsn_List() const
    {
        ITS_REQUIRE(OptionGgsn_List());
        return static_cast<const GGSN_EventList&> (ElementAt(3));
    }

    void SetBmsc_List(BMSC_EventList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBmsc_ListStaticDescription());
        AddElement(4, element);
    }

    void SetBmsc_List(const BMSC_EventList& element)
    {
        its::AsnObject& asnObject = const_cast<BMSC_EventList&>(element);
        asnObject.SetDescription(GetBmsc_ListStaticDescription());
        AddElement(4, element);
    }

    bool OptionBmsc_List() const
    {
        return Contains(4);
    }

    const BMSC_EventList& GetBmsc_List() const
    {
        ITS_REQUIRE(OptionBmsc_List());
        return static_cast<const BMSC_EventList&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_TRACE_EVENT_LIST_H_)

