//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_FORWARD_SS_NOTIFICATION_ARG_H_)
#define _MAP_V1_FORWARD_SS_NOTIFICATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v1_imsi.h>
#include <map_v1_ss_code.h>
#include <map_v1_teleservice_code.h>
#include <map_v1_bearer_service_code.h>
#include <map_v1_ss_status.h>
#include <map_v1_ss_notification.h>



namespace map_v1 {



class ForwardSsNotificationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::IMSI IMSI;


        typedef map_v1::SS_Code SS_Code;


        typedef map_v1::TeleserviceCode TeleserviceCode;


        typedef map_v1::BearerServiceCode BearerServiceCode;


        typedef map_v1::SS_Status SS_Status;


        typedef map_v1::SS_Notification SS_Notification;


////////// End Nested Class(es) //////////

    ForwardSsNotificationArg() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    ForwardSsNotificationArg(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    ForwardSsNotificationArg(const ForwardSsNotificationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ForwardSsNotificationArg(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetTeleserviceStaticDescription();
    static its::AsnDescObject* GetBearerServiceStaticDescription();
    static its::AsnDescObject* GetSs_StatusStaticDescription();
    static its::AsnDescObject* GetSs_NotificationStaticDescription();

public:

    virtual ~ForwardSsNotificationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ForwardSsNotificationArg(*this);
    }

    virtual std::string GetName() const
    { return "ForwardSsNotificationArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    bool OptionImsi() const
    {
        return Contains(0);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(1, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(1, element);
    }

    bool OptionSs_Code() const
    {
        return Contains(1);
    }

    const SS_Code& GetSs_Code() const
    {
        ITS_REQUIRE(OptionSs_Code());
        return static_cast<const SS_Code&> (ElementAt(1));
    }

    void SetTeleservice(TeleserviceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeleserviceStaticDescription());
        AddElement(2, element);
    }

    void SetTeleservice(const TeleserviceCode& element)
    {
        its::AsnObject& asnObject = const_cast<TeleserviceCode&>(element);
        asnObject.SetDescription(GetTeleserviceStaticDescription());
        AddElement(2, element);
    }

    bool OptionTeleservice() const
    {
        return Contains(2);
    }

    const TeleserviceCode& GetTeleservice() const
    {
        ITS_REQUIRE(OptionTeleservice());
        return static_cast<const TeleserviceCode&> (ElementAt(2));
    }

    void SetBearerService(BearerServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerServiceStaticDescription());
        AddElement(3, element);
    }

    void SetBearerService(const BearerServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BearerServiceCode&>(element);
        asnObject.SetDescription(GetBearerServiceStaticDescription());
        AddElement(3, element);
    }

    bool OptionBearerService() const
    {
        return Contains(3);
    }

    const BearerServiceCode& GetBearerService() const
    {
        ITS_REQUIRE(OptionBearerService());
        return static_cast<const BearerServiceCode&> (ElementAt(3));
    }

    void SetSs_Status(SS_Status* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_StatusStaticDescription());
        AddElement(4, element);
    }

    void SetSs_Status(const SS_Status& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Status&>(element);
        asnObject.SetDescription(GetSs_StatusStaticDescription());
        AddElement(4, element);
    }

    bool OptionSs_Status() const
    {
        return Contains(4);
    }

    const SS_Status& GetSs_Status() const
    {
        ITS_REQUIRE(OptionSs_Status());
        return static_cast<const SS_Status&> (ElementAt(4));
    }

    void SetSs_Notification(SS_Notification* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_NotificationStaticDescription());
        AddElement(5, element);
    }

    void SetSs_Notification(const SS_Notification& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Notification&>(element);
        asnObject.SetDescription(GetSs_NotificationStaticDescription());
        AddElement(5, element);
    }

    bool OptionSs_Notification() const
    {
        return Contains(5);
    }

    const SS_Notification& GetSs_Notification() const
    {
        ITS_REQUIRE(OptionSs_Notification());
        return static_cast<const SS_Notification&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_FORWARD_SS_NOTIFICATION_ARG_H_)

