//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SEND_GROUP_CALL_INFO_RES_H_)
#define _MAP_V13_SEND_GROUP_CALL_INFO_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnBitString.h>

#include <map_v13_isdn_address_string.h>
#include <map_v13_asci_call_reference.h>
#include <map_v13_imsi.h>
#include <map_v13_additional_info.h>
#include <map_v13_additional_subscriptions.h>
#include <map_v13_kc.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class SendGroupCallInfoRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::ASCI_CallReference ASCI_CallReference;


        typedef map_v13::IMSI IMSI;


        typedef map_v13::AdditionalInfo AdditionalInfo;


        typedef map_v13::AdditionalSubscriptions AdditionalSubscriptions;


        typedef map_v13::Kc Kc;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    SendGroupCallInfoRes() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    SendGroupCallInfoRes(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    SendGroupCallInfoRes(const SendGroupCallInfoRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendGroupCallInfoRes(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAnchorMSC_AddressStaticDescription();
    static its::AsnDescObject* GetAsciCallReferenceStaticDescription();
    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetAdditionalInfoStaticDescription();
    static its::AsnDescObject* GetAdditionalSubscriptionsStaticDescription();
    static its::AsnDescObject* GetKcStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~SendGroupCallInfoRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendGroupCallInfoRes(*this);
    }

    virtual std::string GetName() const
    { return "SendGroupCallInfoRes"; }

    void SetAnchorMSC_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAnchorMSC_AddressStaticDescription());
        AddElement(0, element);
    }

    void SetAnchorMSC_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetAnchorMSC_AddressStaticDescription());
        AddElement(0, element);
    }

    bool OptionAnchorMSC_Address() const
    {
        return Contains(0);
    }

    const ISDN_AddressString& GetAnchorMSC_Address() const
    {
        ITS_REQUIRE(OptionAnchorMSC_Address());
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetAsciCallReference(ASCI_CallReference* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(1, element);
    }

    void SetAsciCallReference(const ASCI_CallReference& element)
    {
        its::AsnObject& asnObject = const_cast<ASCI_CallReference&>(element);
        asnObject.SetDescription(GetAsciCallReferenceStaticDescription());
        AddElement(1, element);
    }

    bool OptionAsciCallReference() const
    {
        return Contains(1);
    }

    const ASCI_CallReference& GetAsciCallReference() const
    {
        ITS_REQUIRE(OptionAsciCallReference());
        return static_cast<const ASCI_CallReference&> (ElementAt(1));
    }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(2, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(2, element);
    }

    bool OptionImsi() const
    {
        return Contains(2);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(2));
    }

    void SetAdditionalInfo(AdditionalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(3, element);
    }

    void SetAdditionalInfo(const AdditionalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalInfo&>(element);
        asnObject.SetDescription(GetAdditionalInfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionAdditionalInfo() const
    {
        return Contains(3);
    }

    const AdditionalInfo& GetAdditionalInfo() const
    {
        ITS_REQUIRE(OptionAdditionalInfo());
        return static_cast<const AdditionalInfo&> (ElementAt(3));
    }

    void SetAdditionalSubscriptions(AdditionalSubscriptions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalSubscriptionsStaticDescription());
        AddElement(4, element);
    }

    void SetAdditionalSubscriptions(const AdditionalSubscriptions& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalSubscriptions&>(element);
        asnObject.SetDescription(GetAdditionalSubscriptionsStaticDescription());
        AddElement(4, element);
    }

    bool OptionAdditionalSubscriptions() const
    {
        return Contains(4);
    }

    const AdditionalSubscriptions& GetAdditionalSubscriptions() const
    {
        ITS_REQUIRE(OptionAdditionalSubscriptions());
        return static_cast<const AdditionalSubscriptions&> (ElementAt(4));
    }

    void SetKc(Kc* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetKcStaticDescription());
        AddElement(5, element);
    }

    void SetKc(const Kc& element)
    {
        its::AsnObject& asnObject = const_cast<Kc&>(element);
        asnObject.SetDescription(GetKcStaticDescription());
        AddElement(5, element);
    }

    bool OptionKc() const
    {
        return Contains(5);
    }

    const Kc& GetKc() const
    {
        ITS_REQUIRE(OptionKc());
        return static_cast<const Kc&> (ElementAt(5));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(6);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SEND_GROUP_CALL_INFO_RES_H_)

