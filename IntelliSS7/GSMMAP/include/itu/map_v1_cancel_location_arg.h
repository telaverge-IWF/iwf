//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_CANCEL_LOCATION_ARG_H_)
#define _MAP_V1_CANCEL_LOCATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v1_imsi.h>
#include <map_v1_l_ms_id.h>



namespace map_v1 {



class CancelLocationArg : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class Imsi_WithLMsId : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef map_v1::IMSI IMSI;


            typedef map_v1::LMsId LMsId;


    ////////// End Nested Class(es) //////////

        Imsi_WithLMsId() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        Imsi_WithLMsId(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        Imsi_WithLMsId(const Imsi_WithLMsId& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        Imsi_WithLMsId(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetImsiStaticDescription();
        static its::AsnDescObject* GetLMsIdStaticDescription();

    public:

        virtual ~Imsi_WithLMsId()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Imsi_WithLMsId(*this);
        }

        virtual std::string GetName() const
        { return "Imsi_WithLMsId"; }

        void SetImsi(IMSI* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetImsiStaticDescription());
            AddElement(0, element);
        }

        void SetImsi(const IMSI& element)
        {
            its::AsnObject& asnObject = const_cast<IMSI&>(element);
            asnObject.SetDescription(GetImsiStaticDescription());
            AddElement(0, element);
        }

        const IMSI& GetImsi() const
        {
            return static_cast<const IMSI&> (ElementAt(0));
        }

        void SetLMsId(LMsId* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLMsIdStaticDescription());
            AddElement(1, element);
        }

        void SetLMsId(const LMsId& element)
        {
            its::AsnObject& asnObject = const_cast<LMsId&>(element);
            asnObject.SetDescription(GetLMsIdStaticDescription());
            AddElement(1, element);
        }

        const LMsId& GetLMsId() const
        {
            return static_cast<const LMsId&> (ElementAt(1));
        }

    };


        typedef map_v1::IMSI IMSI;


////////// End Nested Class(es) //////////

    CancelLocationArg() : its::AsnChoice(false)
    {
        Initialize();
    }

    CancelLocationArg(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CancelLocationArg(const CancelLocationArg& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CancelLocationArg(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CancelLocationArg(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetImsi_WithLMsIdStaticDescription();

public:

    virtual ~CancelLocationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CancelLocationArg(*this);
    }

    virtual std::string GetName() const
    { return "CancelLocationArg"; }

    void SetChoiceImsi(IMSI* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceImsi(const IMSI& choice)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(choice);
        asnObject.SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceImsi() const
    {
        return Contains(GetImsiStaticDescription()->TagIdentity());
    }

    const IMSI& GetChoiceImsi() const
    {
        ITS_REQUIRE(ChoiceImsi());
        return static_cast<const IMSI&> (GetChoice());
    }

    void SetChoiceImsi_WithLMsId(Imsi_WithLMsId* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetImsi_WithLMsIdStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceImsi_WithLMsId(const Imsi_WithLMsId& choice)
    {
        its::AsnObject& asnObject = const_cast<Imsi_WithLMsId&>(choice);
        asnObject.SetDescription(GetImsi_WithLMsIdStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceImsi_WithLMsId() const
    {
        return Contains(GetImsi_WithLMsIdStaticDescription()->TagIdentity());
    }

    const Imsi_WithLMsId& GetChoiceImsi_WithLMsId() const
    {
        ITS_REQUIRE(ChoiceImsi_WithLMsId());
        return static_cast<const Imsi_WithLMsId&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_CANCEL_LOCATION_ARG_H_)

