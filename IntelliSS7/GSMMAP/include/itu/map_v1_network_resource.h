//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_NETWORK_RESOURCE_H_)
#define _MAP_V1_NETWORK_RESOURCE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v1 {



class NetworkResource : public its::AsnEnumerated
{
public:

    NetworkResource() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    NetworkResource(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    NetworkResource(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    NetworkResource(const NetworkResource& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    NetworkResource(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    NetworkResource(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~NetworkResource()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new NetworkResource(*this);
    }

    virtual std::string GetName() const
    { return "NetworkResource"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        NETWORK_RESOURCE_PLMN = 0,
        NETWORK_RESOURCE_HLR = 1,
        NETWORK_RESOURCE_VLR = 2,
        NETWORK_RESOURCE_PREVIOUS_VLR = 3,
        NETWORK_RESOURCE_CONTROLLING_MSC = 4,
        NETWORK_RESOURCE_VMSC = 5,
        NETWORK_RESOURCE_EIR = 6,
        NETWORK_RESOURCE_RADIO_SUB_SYSTEM = 7

    };

    void SetPLMN()
    { _value = 0; }

    bool IsPLMN() const
    { return _value == 0; }

    void SetHLR()
    { _value = 1; }

    bool IsHLR() const
    { return _value == 1; }

    void SetVLR()
    { _value = 2; }

    bool IsVLR() const
    { return _value == 2; }

    void SetPrevious_VLR()
    { _value = 3; }

    bool IsPrevious_VLR() const
    { return _value == 3; }

    void SetControlling_MSC()
    { _value = 4; }

    bool IsControlling_MSC() const
    { return _value == 4; }

    void SetVMSC()
    { _value = 5; }

    bool IsVMSC() const
    { return _value == 5; }

    void SetEIR()
    { _value = 6; }

    bool IsEIR() const
    { return _value == 6; }

    void SetRadioSubSystem()
    { _value = 7; }

    bool IsRadioSubSystem() const
    { return _value == 7; }

};



} // namespace.

#endif    // !defined(_MAP_V1_NETWORK_RESOURCE_H_)

