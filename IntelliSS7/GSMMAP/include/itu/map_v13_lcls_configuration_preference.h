//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LCLS_CONFIGURATION_PREFERENCE_H_)
#define _MAP_V13_LCLS_CONFIGURATION_PREFERENCE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class LCLS_ConfigurationPreference : public its::AsnBitString
{
public:

    LCLS_ConfigurationPreference() : its::AsnBitString(false)
    {
        Initialize();
    }

    LCLS_ConfigurationPreference(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    LCLS_ConfigurationPreference(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    LCLS_ConfigurationPreference(const LCLS_ConfigurationPreference& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    LCLS_ConfigurationPreference(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    LCLS_ConfigurationPreference(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~LCLS_ConfigurationPreference()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCLS_ConfigurationPreference(*this);
    }

    virtual std::string GetName() const
    { return "LCLS_ConfigurationPreference"; }

    void SetBackward_data_reception_indicator()
    { Set(3); }

    void ResetBackward_data_reception_indicator()
    { Reset(3); }

    bool IsBackward_data_reception_indicatorSet() const
    { return IsSet(3); }

    bool IsBackward_data_reception_indicatorDefined() const
    { return 3 < GetSize(); }

    void SetForward_data_reception_indicator()
    { Set(2); }

    void ResetForward_data_reception_indicator()
    { Reset(2); }

    bool IsForward_data_reception_indicatorSet() const
    { return IsSet(2); }

    bool IsForward_data_reception_indicatorDefined() const
    { return 2 < GetSize(); }

    void SetBackward_data_sending_indicator()
    { Set(1); }

    void ResetBackward_data_sending_indicator()
    { Reset(1); }

    bool IsBackward_data_sending_indicatorSet() const
    { return IsSet(1); }

    bool IsBackward_data_sending_indicatorDefined() const
    { return 1 < GetSize(); }

    void SetForward_data_sending_indicator()
    { Set(0); }

    void ResetForward_data_sending_indicator()
    { Reset(0); }

    bool IsForward_data_sending_indicatorSet() const
    { return IsSet(0); }

    bool IsForward_data_sending_indicatorDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_LCLS_CONFIGURATION_PREFERENCE_H_)

