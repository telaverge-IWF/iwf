//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_FORWARD_SHORT_MESSAGE_ARG_H_)
#define _MAP_V1_FORWARD_SHORT_MESSAGE_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v1_sm_rp_da.h>
#include <map_v1_sm_rp_oa.h>
#include <map_v1_sm_rp_ui.h>



namespace map_v1 {



class ForwardShortMessageArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::SM_RP_DA SM_RP_DA;


        typedef map_v1::SM_RP_OA SM_RP_OA;


        typedef map_v1::SM_RP_UI SM_RP_UI;


////////// End Nested Class(es) //////////

    ForwardShortMessageArg() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    ForwardShortMessageArg(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    ForwardShortMessageArg(const ForwardShortMessageArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ForwardShortMessageArg(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSm_RP_DAStaticDescription();
    static its::AsnDescObject* GetSm_RP_OAStaticDescription();
    static its::AsnDescObject* GetSm_RP_UIStaticDescription();

public:

    virtual ~ForwardShortMessageArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ForwardShortMessageArg(*this);
    }

    virtual std::string GetName() const
    { return "ForwardShortMessageArg"; }

    void SetSm_RP_DA(SM_RP_DA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_DAStaticDescription());
        AddElement(0, element);
    }

    void SetSm_RP_DA(const SM_RP_DA& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_DA&>(element);
        asnObject.SetDescription(GetSm_RP_DAStaticDescription());
        AddElement(0, element);
    }

    const SM_RP_DA& GetSm_RP_DA() const
    {
        return static_cast<const SM_RP_DA&> (ElementAt(0));
    }

    void SetSm_RP_OA(SM_RP_OA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_OAStaticDescription());
        AddElement(1, element);
    }

    void SetSm_RP_OA(const SM_RP_OA& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_OA&>(element);
        asnObject.SetDescription(GetSm_RP_OAStaticDescription());
        AddElement(1, element);
    }

    const SM_RP_OA& GetSm_RP_OA() const
    {
        return static_cast<const SM_RP_OA&> (ElementAt(1));
    }

    void SetSm_RP_UI(SM_RP_UI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(2, element);
    }

    void SetSm_RP_UI(const SM_RP_UI& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_UI&>(element);
        asnObject.SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(2, element);
    }

    const SM_RP_UI& GetSm_RP_UI() const
    {
        return static_cast<const SM_RP_UI&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_FORWARD_SHORT_MESSAGE_ARG_H_)

