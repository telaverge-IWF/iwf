//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SEND_IDENTIFICATION_ARG_H_)
#define _MAP_V13_SEND_IDENTIFICATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v13_tmsi.h>
#include <map_v13_number_of_requested_vectors.h>
#include <map_v13_extension_container.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_lai_fixed_length.h>
#include <map_v13_hop_counter.h>
#include <map_v13_lmsi.h>



namespace map_v13 {



class SendIdentificationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class SegmentationProhibited : public its::AsnNull
    {
    public:

        SegmentationProhibited() : its::AsnNull(false)
        {
            Initialize();
        }

        SegmentationProhibited(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SegmentationProhibited(const SegmentationProhibited& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SegmentationProhibited(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SegmentationProhibited()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SegmentationProhibited(*this);
        }

        virtual std::string GetName() const
        { return "SegmentationProhibited"; }

    };



    class MtRoamingForwardingSupported : public its::AsnNull
    {
    public:

        MtRoamingForwardingSupported() : its::AsnNull(false)
        {
            Initialize();
        }

        MtRoamingForwardingSupported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MtRoamingForwardingSupported(const MtRoamingForwardingSupported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MtRoamingForwardingSupported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MtRoamingForwardingSupported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MtRoamingForwardingSupported(*this);
        }

        virtual std::string GetName() const
        { return "MtRoamingForwardingSupported"; }

    };


        typedef map_v13::TMSI TMSI;


        typedef map_v13::NumberOfRequestedVectors NumberOfRequestedVectors;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::LAIFixedLength LAIFixedLength;


        typedef map_v13::HopCounter HopCounter;


        typedef map_v13::LMSI LMSI;


////////// End Nested Class(es) //////////

    SendIdentificationArg() : its::AsnSequence(10, false)
    {
        Initialize();
    }

    SendIdentificationArg(its::Octets& octets) : its::AsnSequence(10, false)
    {
        Initialize();
        Decode(octets);
    }

    SendIdentificationArg(const SendIdentificationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendIdentificationArg(its::AsnDescObject* description) : its::AsnSequence(10, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTmsiStaticDescription();
    static its::AsnDescObject* GetNumberOfRequestedVectorsStaticDescription();
    static its::AsnDescObject* GetSegmentationProhibitedStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetMsc_NumberStaticDescription();
    static its::AsnDescObject* GetPrevious_LAIStaticDescription();
    static its::AsnDescObject* GetHopCounterStaticDescription();
    static its::AsnDescObject* GetMtRoamingForwardingSupportedStaticDescription();
    static its::AsnDescObject* GetNewVLR_NumberStaticDescription();
    static its::AsnDescObject* GetNew_lmsiStaticDescription();

public:

    virtual ~SendIdentificationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendIdentificationArg(*this);
    }

    virtual std::string GetName() const
    { return "SendIdentificationArg"; }

    void SetTmsi(TMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTmsiStaticDescription());
        AddElement(0, element);
    }

    void SetTmsi(const TMSI& element)
    {
        its::AsnObject& asnObject = const_cast<TMSI&>(element);
        asnObject.SetDescription(GetTmsiStaticDescription());
        AddElement(0, element);
    }

    const TMSI& GetTmsi() const
    {
        return static_cast<const TMSI&> (ElementAt(0));
    }

    void SetNumberOfRequestedVectors(NumberOfRequestedVectors* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfRequestedVectorsStaticDescription());
        AddElement(1, element);
    }

    void SetNumberOfRequestedVectors(const NumberOfRequestedVectors& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfRequestedVectors&>(element);
        asnObject.SetDescription(GetNumberOfRequestedVectorsStaticDescription());
        AddElement(1, element);
    }

    bool OptionNumberOfRequestedVectors() const
    {
        return Contains(1);
    }

    const NumberOfRequestedVectors& GetNumberOfRequestedVectors() const
    {
        ITS_REQUIRE(OptionNumberOfRequestedVectors());
        return static_cast<const NumberOfRequestedVectors&> (ElementAt(1));
    }

    void SetSegmentationProhibited(SegmentationProhibited* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSegmentationProhibitedStaticDescription());
        AddElement(2, element);
    }

    void SetSegmentationProhibited(const SegmentationProhibited& element)
    {
        its::AsnObject& asnObject = const_cast<SegmentationProhibited&>(element);
        asnObject.SetDescription(GetSegmentationProhibitedStaticDescription());
        AddElement(2, element);
    }

    bool OptionSegmentationProhibited() const
    {
        return Contains(2);
    }

    const SegmentationProhibited& GetSegmentationProhibited() const
    {
        ITS_REQUIRE(OptionSegmentationProhibited());
        return static_cast<const SegmentationProhibited&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

    void SetMsc_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_NumberStaticDescription());
        AddElement(4, element);
    }

    void SetMsc_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsc_NumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionMsc_Number() const
    {
        return Contains(4);
    }

    const ISDN_AddressString& GetMsc_Number() const
    {
        ITS_REQUIRE(OptionMsc_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(4));
    }

    void SetPrevious_LAI(LAIFixedLength* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPrevious_LAIStaticDescription());
        AddElement(5, element);
    }

    void SetPrevious_LAI(const LAIFixedLength& element)
    {
        its::AsnObject& asnObject = const_cast<LAIFixedLength&>(element);
        asnObject.SetDescription(GetPrevious_LAIStaticDescription());
        AddElement(5, element);
    }

    bool OptionPrevious_LAI() const
    {
        return Contains(5);
    }

    const LAIFixedLength& GetPrevious_LAI() const
    {
        ITS_REQUIRE(OptionPrevious_LAI());
        return static_cast<const LAIFixedLength&> (ElementAt(5));
    }

    void SetHopCounter(HopCounter* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHopCounterStaticDescription());
        AddElement(6, element);
    }

    void SetHopCounter(const HopCounter& element)
    {
        its::AsnObject& asnObject = const_cast<HopCounter&>(element);
        asnObject.SetDescription(GetHopCounterStaticDescription());
        AddElement(6, element);
    }

    bool OptionHopCounter() const
    {
        return Contains(6);
    }

    const HopCounter& GetHopCounter() const
    {
        ITS_REQUIRE(OptionHopCounter());
        return static_cast<const HopCounter&> (ElementAt(6));
    }

    void SetMtRoamingForwardingSupported(MtRoamingForwardingSupported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMtRoamingForwardingSupportedStaticDescription());
        AddElement(7, element);
    }

    void SetMtRoamingForwardingSupported(const MtRoamingForwardingSupported& element)
    {
        its::AsnObject& asnObject = const_cast<MtRoamingForwardingSupported&>(element);
        asnObject.SetDescription(GetMtRoamingForwardingSupportedStaticDescription());
        AddElement(7, element);
    }

    bool OptionMtRoamingForwardingSupported() const
    {
        return Contains(7);
    }

    const MtRoamingForwardingSupported& GetMtRoamingForwardingSupported() const
    {
        ITS_REQUIRE(OptionMtRoamingForwardingSupported());
        return static_cast<const MtRoamingForwardingSupported&> (ElementAt(7));
    }

    void SetNewVLR_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNewVLR_NumberStaticDescription());
        AddElement(8, element);
    }

    void SetNewVLR_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetNewVLR_NumberStaticDescription());
        AddElement(8, element);
    }

    bool OptionNewVLR_Number() const
    {
        return Contains(8);
    }

    const ISDN_AddressString& GetNewVLR_Number() const
    {
        ITS_REQUIRE(OptionNewVLR_Number());
        return static_cast<const ISDN_AddressString&> (ElementAt(8));
    }

    void SetNew_lmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNew_lmsiStaticDescription());
        AddElement(9, element);
    }

    void SetNew_lmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetNew_lmsiStaticDescription());
        AddElement(9, element);
    }

    bool OptionNew_lmsi() const
    {
        return Contains(9);
    }

    const LMSI& GetNew_lmsi() const
    {
        ITS_REQUIRE(OptionNew_lmsi());
        return static_cast<const LMSI&> (ElementAt(9));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SEND_IDENTIFICATION_ARG_H_)

