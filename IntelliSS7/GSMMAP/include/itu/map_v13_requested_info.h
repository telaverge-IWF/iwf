//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REQUESTED_INFO_H_)
#define _MAP_V13_REQUESTED_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>
#include <AsnBitString.h>

#include <map_v13_extension_container.h>
#include <map_v13_domain_type.h>
#include <map_v13_requested_nodes.h>



namespace map_v13 {



class RequestedInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LocationInformation : public its::AsnNull
    {
    public:

        LocationInformation() : its::AsnNull(false)
        {
            Initialize();
        }

        LocationInformation(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LocationInformation(const LocationInformation& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LocationInformation(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LocationInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LocationInformation(*this);
        }

        virtual std::string GetName() const
        { return "LocationInformation"; }

    };



    class SubscriberState : public its::AsnNull
    {
    public:

        SubscriberState() : its::AsnNull(false)
        {
            Initialize();
        }

        SubscriberState(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SubscriberState(const SubscriberState& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SubscriberState(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SubscriberState()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SubscriberState(*this);
        }

        virtual std::string GetName() const
        { return "SubscriberState"; }

    };



    class CurrentLocation : public its::AsnNull
    {
    public:

        CurrentLocation() : its::AsnNull(false)
        {
            Initialize();
        }

        CurrentLocation(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CurrentLocation(const CurrentLocation& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CurrentLocation(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CurrentLocation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CurrentLocation(*this);
        }

        virtual std::string GetName() const
        { return "CurrentLocation"; }

    };



    class Imei : public its::AsnNull
    {
    public:

        Imei() : its::AsnNull(false)
        {
            Initialize();
        }

        Imei(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Imei(const Imei& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Imei(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Imei()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Imei(*this);
        }

        virtual std::string GetName() const
        { return "Imei"; }

    };



    class Ms_classmark : public its::AsnNull
    {
    public:

        Ms_classmark() : its::AsnNull(false)
        {
            Initialize();
        }

        Ms_classmark(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ms_classmark(const Ms_classmark& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ms_classmark(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ms_classmark()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ms_classmark(*this);
        }

        virtual std::string GetName() const
        { return "Ms_classmark"; }

    };



    class MnpRequestedInfo : public its::AsnNull
    {
    public:

        MnpRequestedInfo() : its::AsnNull(false)
        {
            Initialize();
        }

        MnpRequestedInfo(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MnpRequestedInfo(const MnpRequestedInfo& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MnpRequestedInfo(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MnpRequestedInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MnpRequestedInfo(*this);
        }

        virtual std::string GetName() const
        { return "MnpRequestedInfo"; }

    };



    class LocationInformationEPS_Supported : public its::AsnNull
    {
    public:

        LocationInformationEPS_Supported() : its::AsnNull(false)
        {
            Initialize();
        }

        LocationInformationEPS_Supported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LocationInformationEPS_Supported(const LocationInformationEPS_Supported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LocationInformationEPS_Supported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LocationInformationEPS_Supported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LocationInformationEPS_Supported(*this);
        }

        virtual std::string GetName() const
        { return "LocationInformationEPS_Supported"; }

    };



    class T_adsData : public its::AsnNull
    {
    public:

        T_adsData() : its::AsnNull(false)
        {
            Initialize();
        }

        T_adsData(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        T_adsData(const T_adsData& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        T_adsData(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~T_adsData()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new T_adsData(*this);
        }

        virtual std::string GetName() const
        { return "T_adsData"; }

    };



    class ServingNodeIndication : public its::AsnNull
    {
    public:

        ServingNodeIndication() : its::AsnNull(false)
        {
            Initialize();
        }

        ServingNodeIndication(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ServingNodeIndication(const ServingNodeIndication& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ServingNodeIndication(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ServingNodeIndication()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ServingNodeIndication(*this);
        }

        virtual std::string GetName() const
        { return "ServingNodeIndication"; }

    };


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::DomainType DomainType;


        typedef map_v13::RequestedNodes RequestedNodes;


////////// End Nested Class(es) //////////

    RequestedInfo() : its::AsnSequence(12, false)
    {
        Initialize();
    }

    RequestedInfo(its::Octets& octets) : its::AsnSequence(12, false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedInfo(const RequestedInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RequestedInfo(its::AsnDescObject* description) : its::AsnSequence(12, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLocationInformationStaticDescription();
    static its::AsnDescObject* GetSubscriberStateStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetCurrentLocationStaticDescription();
    static its::AsnDescObject* GetRequestedDomainStaticDescription();
    static its::AsnDescObject* GetImeiStaticDescription();
    static its::AsnDescObject* GetMs_classmarkStaticDescription();
    static its::AsnDescObject* GetMnpRequestedInfoStaticDescription();
    static its::AsnDescObject* GetLocationInformationEPS_SupportedStaticDescription();
    static its::AsnDescObject* GetT_adsDataStaticDescription();
    static its::AsnDescObject* GetRequestedNodesStaticDescription();
    static its::AsnDescObject* GetServingNodeIndicationStaticDescription();

public:

    virtual ~RequestedInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedInfo(*this);
    }

    virtual std::string GetName() const
    { return "RequestedInfo"; }

    void SetLocationInformation(LocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    void SetLocationInformation(const LocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformation&>(element);
        asnObject.SetDescription(GetLocationInformationStaticDescription());
        AddElement(0, element);
    }

    bool OptionLocationInformation() const
    {
        return Contains(0);
    }

    const LocationInformation& GetLocationInformation() const
    {
        ITS_REQUIRE(OptionLocationInformation());
        return static_cast<const LocationInformation&> (ElementAt(0));
    }

    void SetSubscriberState(SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    void SetSubscriberState(const SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberState&>(element);
        asnObject.SetDescription(GetSubscriberStateStaticDescription());
        AddElement(1, element);
    }

    bool OptionSubscriberState() const
    {
        return Contains(1);
    }

    const SubscriberState& GetSubscriberState() const
    {
        ITS_REQUIRE(OptionSubscriberState());
        return static_cast<const SubscriberState&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetCurrentLocation(CurrentLocation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCurrentLocationStaticDescription());
        AddElement(3, element);
    }

    void SetCurrentLocation(const CurrentLocation& element)
    {
        its::AsnObject& asnObject = const_cast<CurrentLocation&>(element);
        asnObject.SetDescription(GetCurrentLocationStaticDescription());
        AddElement(3, element);
    }

    bool OptionCurrentLocation() const
    {
        return Contains(3);
    }

    const CurrentLocation& GetCurrentLocation() const
    {
        ITS_REQUIRE(OptionCurrentLocation());
        return static_cast<const CurrentLocation&> (ElementAt(3));
    }

    void SetRequestedDomain(DomainType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedDomainStaticDescription());
        AddElement(4, element);
    }

    void SetRequestedDomain(const DomainType& element)
    {
        its::AsnObject& asnObject = const_cast<DomainType&>(element);
        asnObject.SetDescription(GetRequestedDomainStaticDescription());
        AddElement(4, element);
    }

    bool OptionRequestedDomain() const
    {
        return Contains(4);
    }

    const DomainType& GetRequestedDomain() const
    {
        ITS_REQUIRE(OptionRequestedDomain());
        return static_cast<const DomainType&> (ElementAt(4));
    }

    void SetImei(Imei* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImeiStaticDescription());
        AddElement(5, element);
    }

    void SetImei(const Imei& element)
    {
        its::AsnObject& asnObject = const_cast<Imei&>(element);
        asnObject.SetDescription(GetImeiStaticDescription());
        AddElement(5, element);
    }

    bool OptionImei() const
    {
        return Contains(5);
    }

    const Imei& GetImei() const
    {
        ITS_REQUIRE(OptionImei());
        return static_cast<const Imei&> (ElementAt(5));
    }

    void SetMs_classmark(Ms_classmark* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMs_classmarkStaticDescription());
        AddElement(6, element);
    }

    void SetMs_classmark(const Ms_classmark& element)
    {
        its::AsnObject& asnObject = const_cast<Ms_classmark&>(element);
        asnObject.SetDescription(GetMs_classmarkStaticDescription());
        AddElement(6, element);
    }

    bool OptionMs_classmark() const
    {
        return Contains(6);
    }

    const Ms_classmark& GetMs_classmark() const
    {
        ITS_REQUIRE(OptionMs_classmark());
        return static_cast<const Ms_classmark&> (ElementAt(6));
    }

    void SetMnpRequestedInfo(MnpRequestedInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMnpRequestedInfoStaticDescription());
        AddElement(7, element);
    }

    void SetMnpRequestedInfo(const MnpRequestedInfo& element)
    {
        its::AsnObject& asnObject = const_cast<MnpRequestedInfo&>(element);
        asnObject.SetDescription(GetMnpRequestedInfoStaticDescription());
        AddElement(7, element);
    }

    bool OptionMnpRequestedInfo() const
    {
        return Contains(7);
    }

    const MnpRequestedInfo& GetMnpRequestedInfo() const
    {
        ITS_REQUIRE(OptionMnpRequestedInfo());
        return static_cast<const MnpRequestedInfo&> (ElementAt(7));
    }

    void SetLocationInformationEPS_Supported(LocationInformationEPS_Supported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationEPS_SupportedStaticDescription());
        AddElement(8, element);
    }

    void SetLocationInformationEPS_Supported(const LocationInformationEPS_Supported& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformationEPS_Supported&>(element);
        asnObject.SetDescription(GetLocationInformationEPS_SupportedStaticDescription());
        AddElement(8, element);
    }

    bool OptionLocationInformationEPS_Supported() const
    {
        return Contains(8);
    }

    const LocationInformationEPS_Supported& GetLocationInformationEPS_Supported() const
    {
        ITS_REQUIRE(OptionLocationInformationEPS_Supported());
        return static_cast<const LocationInformationEPS_Supported&> (ElementAt(8));
    }

    void SetT_adsData(T_adsData* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetT_adsDataStaticDescription());
        AddElement(9, element);
    }

    void SetT_adsData(const T_adsData& element)
    {
        its::AsnObject& asnObject = const_cast<T_adsData&>(element);
        asnObject.SetDescription(GetT_adsDataStaticDescription());
        AddElement(9, element);
    }

    bool OptionT_adsData() const
    {
        return Contains(9);
    }

    const T_adsData& GetT_adsData() const
    {
        ITS_REQUIRE(OptionT_adsData());
        return static_cast<const T_adsData&> (ElementAt(9));
    }

    void SetRequestedNodes(RequestedNodes* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedNodesStaticDescription());
        AddElement(10, element);
    }

    void SetRequestedNodes(const RequestedNodes& element)
    {
        its::AsnObject& asnObject = const_cast<RequestedNodes&>(element);
        asnObject.SetDescription(GetRequestedNodesStaticDescription());
        AddElement(10, element);
    }

    bool OptionRequestedNodes() const
    {
        return Contains(10);
    }

    const RequestedNodes& GetRequestedNodes() const
    {
        ITS_REQUIRE(OptionRequestedNodes());
        return static_cast<const RequestedNodes&> (ElementAt(10));
    }

    void SetServingNodeIndication(ServingNodeIndication* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServingNodeIndicationStaticDescription());
        AddElement(11, element);
    }

    void SetServingNodeIndication(const ServingNodeIndication& element)
    {
        its::AsnObject& asnObject = const_cast<ServingNodeIndication&>(element);
        asnObject.SetDescription(GetServingNodeIndicationStaticDescription());
        AddElement(11, element);
    }

    bool OptionServingNodeIndication() const
    {
        return Contains(11);
    }

    const ServingNodeIndication& GetServingNodeIndication() const
    {
        ITS_REQUIRE(OptionServingNodeIndication());
        return static_cast<const ServingNodeIndication&> (ElementAt(11));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_REQUESTED_INFO_H_)

