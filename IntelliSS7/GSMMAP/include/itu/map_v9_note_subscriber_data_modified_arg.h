//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_NOTE_SUBSCRIBER_DATA_MODIFIED_ARG_H_)
#define _MAP_V9_NOTE_SUBSCRIBER_DATA_MODIFIED_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_imsi.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_ext_forwarding_info_for_cse.h>
#include <map_v9_ext_call_barring_info_for_cse.h>
#include <map_v9_odb_info.h>
#include <map_v9_camel_subscription_info.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class NoteSubscriberDataModifiedArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class AllInformationSent : public its::AsnNull
    {
    public:

        AllInformationSent() : its::AsnNull(false)
        {
            Initialize();
        }

        AllInformationSent(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AllInformationSent(const AllInformationSent& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AllInformationSent(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AllInformationSent()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllInformationSent(*this);
        }

        virtual std::string GetName() const
        { return "AllInformationSent"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::Ext_ForwardingInfoFor_CSE Ext_ForwardingInfoFor_CSE;


        typedef map_v9::Ext_CallBarringInfoFor_CSE Ext_CallBarringInfoFor_CSE;


        typedef map_v9::ODB_Info ODB_Info;


        typedef map_v9::CAMEL_SubscriptionInfo CAMEL_SubscriptionInfo;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    NoteSubscriberDataModifiedArg() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    NoteSubscriberDataModifiedArg(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    NoteSubscriberDataModifiedArg(const NoteSubscriberDataModifiedArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    NoteSubscriberDataModifiedArg(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetForwardingInfoFor_CSEStaticDescription();
    static its::AsnDescObject* GetCallBarringInfoFor_CSEStaticDescription();
    static its::AsnDescObject* GetOdb_InfoStaticDescription();
    static its::AsnDescObject* GetCamel_SubscriptionInfoStaticDescription();
    static its::AsnDescObject* GetAllInformationSentStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~NoteSubscriberDataModifiedArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new NoteSubscriberDataModifiedArg(*this);
    }

    virtual std::string GetName() const
    { return "NoteSubscriberDataModifiedArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(1, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetForwardingInfoFor_CSE(Ext_ForwardingInfoFor_CSE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardingInfoFor_CSEStaticDescription());
        AddElement(2, element);
    }

    void SetForwardingInfoFor_CSE(const Ext_ForwardingInfoFor_CSE& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_ForwardingInfoFor_CSE&>(element);
        asnObject.SetDescription(GetForwardingInfoFor_CSEStaticDescription());
        AddElement(2, element);
    }

    bool OptionForwardingInfoFor_CSE() const
    {
        return Contains(2);
    }

    const Ext_ForwardingInfoFor_CSE& GetForwardingInfoFor_CSE() const
    {
        ITS_REQUIRE(OptionForwardingInfoFor_CSE());
        return static_cast<const Ext_ForwardingInfoFor_CSE&> (ElementAt(2));
    }

    void SetCallBarringInfoFor_CSE(Ext_CallBarringInfoFor_CSE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallBarringInfoFor_CSEStaticDescription());
        AddElement(3, element);
    }

    void SetCallBarringInfoFor_CSE(const Ext_CallBarringInfoFor_CSE& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_CallBarringInfoFor_CSE&>(element);
        asnObject.SetDescription(GetCallBarringInfoFor_CSEStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallBarringInfoFor_CSE() const
    {
        return Contains(3);
    }

    const Ext_CallBarringInfoFor_CSE& GetCallBarringInfoFor_CSE() const
    {
        ITS_REQUIRE(OptionCallBarringInfoFor_CSE());
        return static_cast<const Ext_CallBarringInfoFor_CSE&> (ElementAt(3));
    }

    void SetOdb_Info(ODB_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOdb_InfoStaticDescription());
        AddElement(4, element);
    }

    void SetOdb_Info(const ODB_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ODB_Info&>(element);
        asnObject.SetDescription(GetOdb_InfoStaticDescription());
        AddElement(4, element);
    }

    bool OptionOdb_Info() const
    {
        return Contains(4);
    }

    const ODB_Info& GetOdb_Info() const
    {
        ITS_REQUIRE(OptionOdb_Info());
        return static_cast<const ODB_Info&> (ElementAt(4));
    }

    void SetCamel_SubscriptionInfo(CAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCamel_SubscriptionInfoStaticDescription());
        AddElement(5, element);
    }

    void SetCamel_SubscriptionInfo(const CAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetCamel_SubscriptionInfoStaticDescription());
        AddElement(5, element);
    }

    bool OptionCamel_SubscriptionInfo() const
    {
        return Contains(5);
    }

    const CAMEL_SubscriptionInfo& GetCamel_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionCamel_SubscriptionInfo());
        return static_cast<const CAMEL_SubscriptionInfo&> (ElementAt(5));
    }

    void SetAllInformationSent(AllInformationSent* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAllInformationSentStaticDescription());
        AddElement(6, element);
    }

    void SetAllInformationSent(const AllInformationSent& element)
    {
        its::AsnObject& asnObject = const_cast<AllInformationSent&>(element);
        asnObject.SetDescription(GetAllInformationSentStaticDescription());
        AddElement(6, element);
    }

    bool OptionAllInformationSent() const
    {
        return Contains(6);
    }

    const AllInformationSent& GetAllInformationSent() const
    {
        ITS_REQUIRE(OptionAllInformationSent());
        return static_cast<const AllInformationSent&> (ElementAt(6));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(7);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_NOTE_SUBSCRIBER_DATA_MODIFIED_ARG_H_)

