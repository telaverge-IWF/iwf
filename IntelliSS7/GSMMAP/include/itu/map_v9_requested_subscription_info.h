//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_REQUESTED_SUBSCRIPTION_INFO_H_)
#define _MAP_V9_REQUESTED_SUBSCRIPTION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>

#include <map_v9_ss_for_bs_code.h>
#include <map_v9_requested_camel_subscription_info.h>
#include <map_v9_extension_container.h>
#include <map_v9_additional_requested_camel_subscription_info.h>



namespace map_v9 {



class RequestedSubscriptionInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Odb : public its::AsnNull
    {
    public:

        Odb() : its::AsnNull(false)
        {
            Initialize();
        }

        Odb(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Odb(const Odb& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Odb(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Odb()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Odb(*this);
        }

        virtual std::string GetName() const
        { return "Odb"; }

    };



    class SupportedVLR_CAMEL_Phases : public its::AsnNull
    {
    public:

        SupportedVLR_CAMEL_Phases() : its::AsnNull(false)
        {
            Initialize();
        }

        SupportedVLR_CAMEL_Phases(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SupportedVLR_CAMEL_Phases(const SupportedVLR_CAMEL_Phases& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SupportedVLR_CAMEL_Phases(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SupportedVLR_CAMEL_Phases()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SupportedVLR_CAMEL_Phases(*this);
        }

        virtual std::string GetName() const
        { return "SupportedVLR_CAMEL_Phases"; }

    };



    class SupportedSGSN_CAMEL_Phases : public its::AsnNull
    {
    public:

        SupportedSGSN_CAMEL_Phases() : its::AsnNull(false)
        {
            Initialize();
        }

        SupportedSGSN_CAMEL_Phases(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SupportedSGSN_CAMEL_Phases(const SupportedSGSN_CAMEL_Phases& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SupportedSGSN_CAMEL_Phases(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SupportedSGSN_CAMEL_Phases()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SupportedSGSN_CAMEL_Phases(*this);
        }

        virtual std::string GetName() const
        { return "SupportedSGSN_CAMEL_Phases"; }

    };


        typedef map_v9::SS_ForBS_Code SS_ForBS_Code;


        typedef map_v9::RequestedCAMEL_SubscriptionInfo RequestedCAMEL_SubscriptionInfo;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::AdditionalRequestedCAMEL_SubscriptionInfo AdditionalRequestedCAMEL_SubscriptionInfo;


////////// End Nested Class(es) //////////

    RequestedSubscriptionInfo() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    RequestedSubscriptionInfo(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedSubscriptionInfo(const RequestedSubscriptionInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RequestedSubscriptionInfo(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRequestedSS_InfoStaticDescription();
    static its::AsnDescObject* GetOdbStaticDescription();
    static its::AsnDescObject* GetRequestedCAMEL_SubscriptionInfoStaticDescription();
    static its::AsnDescObject* GetSupportedVLR_CAMEL_PhasesStaticDescription();
    static its::AsnDescObject* GetSupportedSGSN_CAMEL_PhasesStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription();

public:

    virtual ~RequestedSubscriptionInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedSubscriptionInfo(*this);
    }

    virtual std::string GetName() const
    { return "RequestedSubscriptionInfo"; }

    void SetRequestedSS_Info(SS_ForBS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedSS_InfoStaticDescription());
        AddElement(0, element);
    }

    void SetRequestedSS_Info(const SS_ForBS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_ForBS_Code&>(element);
        asnObject.SetDescription(GetRequestedSS_InfoStaticDescription());
        AddElement(0, element);
    }

    bool OptionRequestedSS_Info() const
    {
        return Contains(0);
    }

    const SS_ForBS_Code& GetRequestedSS_Info() const
    {
        ITS_REQUIRE(OptionRequestedSS_Info());
        return static_cast<const SS_ForBS_Code&> (ElementAt(0));
    }

    void SetOdb(Odb* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOdbStaticDescription());
        AddElement(1, element);
    }

    void SetOdb(const Odb& element)
    {
        its::AsnObject& asnObject = const_cast<Odb&>(element);
        asnObject.SetDescription(GetOdbStaticDescription());
        AddElement(1, element);
    }

    bool OptionOdb() const
    {
        return Contains(1);
    }

    const Odb& GetOdb() const
    {
        ITS_REQUIRE(OptionOdb());
        return static_cast<const Odb&> (ElementAt(1));
    }

    void SetRequestedCAMEL_SubscriptionInfo(RequestedCAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(2, element);
    }

    void SetRequestedCAMEL_SubscriptionInfo(const RequestedCAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<RequestedCAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionRequestedCAMEL_SubscriptionInfo() const
    {
        return Contains(2);
    }

    const RequestedCAMEL_SubscriptionInfo& GetRequestedCAMEL_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionRequestedCAMEL_SubscriptionInfo());
        return static_cast<const RequestedCAMEL_SubscriptionInfo&> (ElementAt(2));
    }

    void SetSupportedVLR_CAMEL_Phases(SupportedVLR_CAMEL_Phases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedVLR_CAMEL_PhasesStaticDescription());
        AddElement(3, element);
    }

    void SetSupportedVLR_CAMEL_Phases(const SupportedVLR_CAMEL_Phases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedVLR_CAMEL_Phases&>(element);
        asnObject.SetDescription(GetSupportedVLR_CAMEL_PhasesStaticDescription());
        AddElement(3, element);
    }

    bool OptionSupportedVLR_CAMEL_Phases() const
    {
        return Contains(3);
    }

    const SupportedVLR_CAMEL_Phases& GetSupportedVLR_CAMEL_Phases() const
    {
        ITS_REQUIRE(OptionSupportedVLR_CAMEL_Phases());
        return static_cast<const SupportedVLR_CAMEL_Phases&> (ElementAt(3));
    }

    void SetSupportedSGSN_CAMEL_Phases(SupportedSGSN_CAMEL_Phases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedSGSN_CAMEL_PhasesStaticDescription());
        AddElement(4, element);
    }

    void SetSupportedSGSN_CAMEL_Phases(const SupportedSGSN_CAMEL_Phases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedSGSN_CAMEL_Phases&>(element);
        asnObject.SetDescription(GetSupportedSGSN_CAMEL_PhasesStaticDescription());
        AddElement(4, element);
    }

    bool OptionSupportedSGSN_CAMEL_Phases() const
    {
        return Contains(4);
    }

    const SupportedSGSN_CAMEL_Phases& GetSupportedSGSN_CAMEL_Phases() const
    {
        ITS_REQUIRE(OptionSupportedSGSN_CAMEL_Phases());
        return static_cast<const SupportedSGSN_CAMEL_Phases&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetAdditionalRequestedCAMEL_SubscriptionInfo(AdditionalRequestedCAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(6, element);
    }

    void SetAdditionalRequestedCAMEL_SubscriptionInfo(const AdditionalRequestedCAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalRequestedCAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(6, element);
    }

    bool OptionAdditionalRequestedCAMEL_SubscriptionInfo() const
    {
        return Contains(6);
    }

    const AdditionalRequestedCAMEL_SubscriptionInfo& GetAdditionalRequestedCAMEL_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionAdditionalRequestedCAMEL_SubscriptionInfo());
        return static_cast<const AdditionalRequestedCAMEL_SubscriptionInfo&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_REQUESTED_SUBSCRIPTION_INFO_H_)

