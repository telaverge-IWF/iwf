//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SS_DATA_H_)
#define _MAP_V13_SS_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>

#include <map_v13_ss_code.h>
#include <map_v13_ss_status.h>
#include <map_v13_ss_subscription_option.h>
#include <map_v13_basic_service_group_list.h>
#include <map_v13_emlpp_priority.h>
#include <map_v13_mc_bearers.h>



namespace map_v13 {



class SS_Data : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::SS_Code SS_Code;


        typedef map_v13::SS_Status SS_Status;


        typedef map_v13::SS_SubscriptionOption SS_SubscriptionOption;


        typedef map_v13::BasicServiceGroupList BasicServiceGroupList;


        typedef map_v13::EMLPP_Priority EMLPP_Priority;


        typedef map_v13::MC_Bearers MC_Bearers;


////////// End Nested Class(es) //////////

    SS_Data() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    SS_Data(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    SS_Data(const SS_Data& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SS_Data(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetSs_StatusStaticDescription();
    static its::AsnDescObject* GetSs_SubscriptionOptionStaticDescription();
    static its::AsnDescObject* GetBasicServiceGroupListStaticDescription();
    static its::AsnDescObject* GetDefaultPriorityStaticDescription();
    static its::AsnDescObject* GetNbrUserStaticDescription();

public:

    virtual ~SS_Data()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SS_Data(*this);
    }

    virtual std::string GetName() const
    { return "SS_Data"; }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    bool OptionSs_Code() const
    {
        return Contains(0);
    }

    const SS_Code& GetSs_Code() const
    {
        ITS_REQUIRE(OptionSs_Code());
        return static_cast<const SS_Code&> (ElementAt(0));
    }

    void SetSs_Status(SS_Status* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    void SetSs_Status(const SS_Status& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Status&>(element);
        asnObject.SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    bool OptionSs_Status() const
    {
        return Contains(1);
    }

    const SS_Status& GetSs_Status() const
    {
        ITS_REQUIRE(OptionSs_Status());
        return static_cast<const SS_Status&> (ElementAt(1));
    }

    void SetSs_SubscriptionOption(SS_SubscriptionOption* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_SubscriptionOptionStaticDescription());
        AddElement(2, element);
    }

    void SetSs_SubscriptionOption(const SS_SubscriptionOption& element)
    {
        its::AsnObject& asnObject = const_cast<SS_SubscriptionOption&>(element);
        asnObject.SetDescription(GetSs_SubscriptionOptionStaticDescription());
        AddElement(2, element);
    }

    bool OptionSs_SubscriptionOption() const
    {
        return Contains(2);
    }

    const SS_SubscriptionOption& GetSs_SubscriptionOption() const
    {
        ITS_REQUIRE(OptionSs_SubscriptionOption());
        return static_cast<const SS_SubscriptionOption&> (ElementAt(2));
    }

    void SetBasicServiceGroupList(BasicServiceGroupList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceGroupListStaticDescription());
        AddElement(3, element);
    }

    void SetBasicServiceGroupList(const BasicServiceGroupList& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceGroupList&>(element);
        asnObject.SetDescription(GetBasicServiceGroupListStaticDescription());
        AddElement(3, element);
    }

    bool OptionBasicServiceGroupList() const
    {
        return Contains(3);
    }

    const BasicServiceGroupList& GetBasicServiceGroupList() const
    {
        ITS_REQUIRE(OptionBasicServiceGroupList());
        return static_cast<const BasicServiceGroupList&> (ElementAt(3));
    }

    void SetDefaultPriority(EMLPP_Priority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDefaultPriorityStaticDescription());
        AddElement(4, element);
    }

    void SetDefaultPriority(const EMLPP_Priority& element)
    {
        its::AsnObject& asnObject = const_cast<EMLPP_Priority&>(element);
        asnObject.SetDescription(GetDefaultPriorityStaticDescription());
        AddElement(4, element);
    }

    bool OptionDefaultPriority() const
    {
        return Contains(4);
    }

    const EMLPP_Priority& GetDefaultPriority() const
    {
        ITS_REQUIRE(OptionDefaultPriority());
        return static_cast<const EMLPP_Priority&> (ElementAt(4));
    }

    void SetNbrUser(MC_Bearers* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNbrUserStaticDescription());
        AddElement(5, element);
    }

    void SetNbrUser(const MC_Bearers& element)
    {
        its::AsnObject& asnObject = const_cast<MC_Bearers&>(element);
        asnObject.SetDescription(GetNbrUserStaticDescription());
        AddElement(5, element);
    }

    bool OptionNbrUser() const
    {
        return Contains(5);
    }

    const MC_Bearers& GetNbrUser() const
    {
        ITS_REQUIRE(OptionNbrUser());
        return static_cast<const MC_Bearers&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SS_DATA_H_)

