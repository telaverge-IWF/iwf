//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_AUTHENTICATION_SET_H_)
#define _MAP_V1_AUTHENTICATION_SET_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v1_rand.h>
#include <map_v1_sres.h>
#include <map_v1_kc.h>



namespace map_v1 {



class AuthenticationSet : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::Rand Rand;


        typedef map_v1::Sres Sres;


        typedef map_v1::Kc Kc;


////////// End Nested Class(es) //////////

    AuthenticationSet() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    AuthenticationSet(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    AuthenticationSet(const AuthenticationSet& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AuthenticationSet(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRandStaticDescription();
    static its::AsnDescObject* GetSresStaticDescription();
    static its::AsnDescObject* GetKcStaticDescription();

public:

    virtual ~AuthenticationSet()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AuthenticationSet(*this);
    }

    virtual std::string GetName() const
    { return "AuthenticationSet"; }

    void SetRand(Rand* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRandStaticDescription());
        AddElement(0, element);
    }

    void SetRand(const Rand& element)
    {
        its::AsnObject& asnObject = const_cast<Rand&>(element);
        asnObject.SetDescription(GetRandStaticDescription());
        AddElement(0, element);
    }

    const Rand& GetRand() const
    {
        return static_cast<const Rand&> (ElementAt(0));
    }

    void SetSres(Sres* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSresStaticDescription());
        AddElement(1, element);
    }

    void SetSres(const Sres& element)
    {
        its::AsnObject& asnObject = const_cast<Sres&>(element);
        asnObject.SetDescription(GetSresStaticDescription());
        AddElement(1, element);
    }

    const Sres& GetSres() const
    {
        return static_cast<const Sres&> (ElementAt(1));
    }

    void SetKc(Kc* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetKcStaticDescription());
        AddElement(2, element);
    }

    void SetKc(const Kc& element)
    {
        its::AsnObject& asnObject = const_cast<Kc&>(element);
        asnObject.SetDescription(GetKcStaticDescription());
        AddElement(2, element);
    }

    const Kc& GetKc() const
    {
        return static_cast<const Kc&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_AUTHENTICATION_SET_H_)

