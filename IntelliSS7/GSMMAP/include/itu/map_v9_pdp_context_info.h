//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_PDP_CONTEXT_INFO_H_)
#define _MAP_V9_PDP_CONTEXT_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <map_v9_context_id.h>
#include <map_v9_pdp_type.h>
#include <map_v9_pdp_address.h>
#include <map_v9_apn.h>
#include <map_v9_nsapi.h>
#include <map_v9_transaction_id.h>
#include <map_v9_teid.h>
#include <map_v9_gsn_address.h>
#include <map_v9_ext_qo_s_subscribed.h>
#include <map_v9_gprs_charging_id.h>
#include <map_v9_charging_characteristics.h>
#include <map_v9_extension_container.h>
#include <map_v9_ext2_qo_s_subscribed.h>



namespace map_v9 {



class PDP_ContextInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Pdp_ContextActive : public its::AsnNull
    {
    public:

        Pdp_ContextActive() : its::AsnNull(false)
        {
            Initialize();
        }

        Pdp_ContextActive(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Pdp_ContextActive(const Pdp_ContextActive& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Pdp_ContextActive(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Pdp_ContextActive()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Pdp_ContextActive(*this);
        }

        virtual std::string GetName() const
        { return "Pdp_ContextActive"; }

    };


        typedef map_v9::ContextId ContextId;


        typedef map_v9::PDP_Type PDP_Type;


        typedef map_v9::PDP_Address PDP_Address;


        typedef map_v9::APN APN;


        typedef map_v9::NSAPI NSAPI;


        typedef map_v9::TransactionId TransactionId;


        typedef map_v9::TEID TEID;


        typedef map_v9::GSN_Address GSN_Address;


        typedef map_v9::Ext_QoS_Subscribed Ext_QoS_Subscribed;


        typedef map_v9::GPRSChargingID GPRSChargingID;


        typedef map_v9::ChargingCharacteristics ChargingCharacteristics;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::Ext2_QoS_Subscribed Ext2_QoS_Subscribed;


////////// End Nested Class(es) //////////

    PDP_ContextInfo() : its::AsnSequence(21, false)
    {
        Initialize();
    }

    PDP_ContextInfo(its::Octets& octets) : its::AsnSequence(21, false)
    {
        Initialize();
        Decode(octets);
    }

    PDP_ContextInfo(const PDP_ContextInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PDP_ContextInfo(its::AsnDescObject* description) : its::AsnSequence(21, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPdp_ContextIdentifierStaticDescription();
    static its::AsnDescObject* GetPdp_ContextActiveStaticDescription();
    static its::AsnDescObject* GetPdp_TypeStaticDescription();
    static its::AsnDescObject* GetPdp_AddressStaticDescription();
    static its::AsnDescObject* GetApn_SubscribedStaticDescription();
    static its::AsnDescObject* GetApn_InUseStaticDescription();
    static its::AsnDescObject* GetNsapiStaticDescription();
    static its::AsnDescObject* GetTransactionIdStaticDescription();
    static its::AsnDescObject* GetTeid_ForGnAndGpStaticDescription();
    static its::AsnDescObject* GetTeid_ForIuStaticDescription();
    static its::AsnDescObject* GetGgsn_AddressStaticDescription();
    static its::AsnDescObject* GetQos_SubscribedStaticDescription();
    static its::AsnDescObject* GetQos_RequestedStaticDescription();
    static its::AsnDescObject* GetQos_NegotiatedStaticDescription();
    static its::AsnDescObject* GetChargingIdStaticDescription();
    static its::AsnDescObject* GetChargingCharacteristicsStaticDescription();
    static its::AsnDescObject* GetRnc_AddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetQos2_SubscribedStaticDescription();
    static its::AsnDescObject* GetQos2_RequestedStaticDescription();
    static its::AsnDescObject* GetQos2_NegotiatedStaticDescription();

public:

    virtual ~PDP_ContextInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PDP_ContextInfo(*this);
    }

    virtual std::string GetName() const
    { return "PDP_ContextInfo"; }

    void SetPdp_ContextIdentifier(ContextId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_ContextIdentifierStaticDescription());
        AddElement(0, element);
    }

    void SetPdp_ContextIdentifier(const ContextId& element)
    {
        its::AsnObject& asnObject = const_cast<ContextId&>(element);
        asnObject.SetDescription(GetPdp_ContextIdentifierStaticDescription());
        AddElement(0, element);
    }

    const ContextId& GetPdp_ContextIdentifier() const
    {
        return static_cast<const ContextId&> (ElementAt(0));
    }

    void SetPdp_ContextActive(Pdp_ContextActive* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_ContextActiveStaticDescription());
        AddElement(1, element);
    }

    void SetPdp_ContextActive(const Pdp_ContextActive& element)
    {
        its::AsnObject& asnObject = const_cast<Pdp_ContextActive&>(element);
        asnObject.SetDescription(GetPdp_ContextActiveStaticDescription());
        AddElement(1, element);
    }

    bool OptionPdp_ContextActive() const
    {
        return Contains(1);
    }

    const Pdp_ContextActive& GetPdp_ContextActive() const
    {
        ITS_REQUIRE(OptionPdp_ContextActive());
        return static_cast<const Pdp_ContextActive&> (ElementAt(1));
    }

    void SetPdp_Type(PDP_Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_TypeStaticDescription());
        AddElement(2, element);
    }

    void SetPdp_Type(const PDP_Type& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Type&>(element);
        asnObject.SetDescription(GetPdp_TypeStaticDescription());
        AddElement(2, element);
    }

    const PDP_Type& GetPdp_Type() const
    {
        return static_cast<const PDP_Type&> (ElementAt(2));
    }

    void SetPdp_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdp_AddressStaticDescription());
        AddElement(3, element);
    }

    void SetPdp_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetPdp_AddressStaticDescription());
        AddElement(3, element);
    }

    bool OptionPdp_Address() const
    {
        return Contains(3);
    }

    const PDP_Address& GetPdp_Address() const
    {
        ITS_REQUIRE(OptionPdp_Address());
        return static_cast<const PDP_Address&> (ElementAt(3));
    }

    void SetApn_Subscribed(APN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApn_SubscribedStaticDescription());
        AddElement(4, element);
    }

    void SetApn_Subscribed(const APN& element)
    {
        its::AsnObject& asnObject = const_cast<APN&>(element);
        asnObject.SetDescription(GetApn_SubscribedStaticDescription());
        AddElement(4, element);
    }

    bool OptionApn_Subscribed() const
    {
        return Contains(4);
    }

    const APN& GetApn_Subscribed() const
    {
        ITS_REQUIRE(OptionApn_Subscribed());
        return static_cast<const APN&> (ElementAt(4));
    }

    void SetApn_InUse(APN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApn_InUseStaticDescription());
        AddElement(5, element);
    }

    void SetApn_InUse(const APN& element)
    {
        its::AsnObject& asnObject = const_cast<APN&>(element);
        asnObject.SetDescription(GetApn_InUseStaticDescription());
        AddElement(5, element);
    }

    bool OptionApn_InUse() const
    {
        return Contains(5);
    }

    const APN& GetApn_InUse() const
    {
        ITS_REQUIRE(OptionApn_InUse());
        return static_cast<const APN&> (ElementAt(5));
    }

    void SetNsapi(NSAPI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNsapiStaticDescription());
        AddElement(6, element);
    }

    void SetNsapi(const NSAPI& element)
    {
        its::AsnObject& asnObject = const_cast<NSAPI&>(element);
        asnObject.SetDescription(GetNsapiStaticDescription());
        AddElement(6, element);
    }

    bool OptionNsapi() const
    {
        return Contains(6);
    }

    const NSAPI& GetNsapi() const
    {
        ITS_REQUIRE(OptionNsapi());
        return static_cast<const NSAPI&> (ElementAt(6));
    }

    void SetTransactionId(TransactionId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTransactionIdStaticDescription());
        AddElement(7, element);
    }

    void SetTransactionId(const TransactionId& element)
    {
        its::AsnObject& asnObject = const_cast<TransactionId&>(element);
        asnObject.SetDescription(GetTransactionIdStaticDescription());
        AddElement(7, element);
    }

    bool OptionTransactionId() const
    {
        return Contains(7);
    }

    const TransactionId& GetTransactionId() const
    {
        ITS_REQUIRE(OptionTransactionId());
        return static_cast<const TransactionId&> (ElementAt(7));
    }

    void SetTeid_ForGnAndGp(TEID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeid_ForGnAndGpStaticDescription());
        AddElement(8, element);
    }

    void SetTeid_ForGnAndGp(const TEID& element)
    {
        its::AsnObject& asnObject = const_cast<TEID&>(element);
        asnObject.SetDescription(GetTeid_ForGnAndGpStaticDescription());
        AddElement(8, element);
    }

    bool OptionTeid_ForGnAndGp() const
    {
        return Contains(8);
    }

    const TEID& GetTeid_ForGnAndGp() const
    {
        ITS_REQUIRE(OptionTeid_ForGnAndGp());
        return static_cast<const TEID&> (ElementAt(8));
    }

    void SetTeid_ForIu(TEID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeid_ForIuStaticDescription());
        AddElement(9, element);
    }

    void SetTeid_ForIu(const TEID& element)
    {
        its::AsnObject& asnObject = const_cast<TEID&>(element);
        asnObject.SetDescription(GetTeid_ForIuStaticDescription());
        AddElement(9, element);
    }

    bool OptionTeid_ForIu() const
    {
        return Contains(9);
    }

    const TEID& GetTeid_ForIu() const
    {
        ITS_REQUIRE(OptionTeid_ForIu());
        return static_cast<const TEID&> (ElementAt(9));
    }

    void SetGgsn_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGgsn_AddressStaticDescription());
        AddElement(10, element);
    }

    void SetGgsn_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetGgsn_AddressStaticDescription());
        AddElement(10, element);
    }

    bool OptionGgsn_Address() const
    {
        return Contains(10);
    }

    const GSN_Address& GetGgsn_Address() const
    {
        ITS_REQUIRE(OptionGgsn_Address());
        return static_cast<const GSN_Address&> (ElementAt(10));
    }

    void SetQos_Subscribed(Ext_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos_SubscribedStaticDescription());
        AddElement(11, element);
    }

    void SetQos_Subscribed(const Ext_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos_SubscribedStaticDescription());
        AddElement(11, element);
    }

    bool OptionQos_Subscribed() const
    {
        return Contains(11);
    }

    const Ext_QoS_Subscribed& GetQos_Subscribed() const
    {
        ITS_REQUIRE(OptionQos_Subscribed());
        return static_cast<const Ext_QoS_Subscribed&> (ElementAt(11));
    }

    void SetQos_Requested(Ext_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos_RequestedStaticDescription());
        AddElement(12, element);
    }

    void SetQos_Requested(const Ext_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos_RequestedStaticDescription());
        AddElement(12, element);
    }

    bool OptionQos_Requested() const
    {
        return Contains(12);
    }

    const Ext_QoS_Subscribed& GetQos_Requested() const
    {
        ITS_REQUIRE(OptionQos_Requested());
        return static_cast<const Ext_QoS_Subscribed&> (ElementAt(12));
    }

    void SetQos_Negotiated(Ext_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos_NegotiatedStaticDescription());
        AddElement(13, element);
    }

    void SetQos_Negotiated(const Ext_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos_NegotiatedStaticDescription());
        AddElement(13, element);
    }

    bool OptionQos_Negotiated() const
    {
        return Contains(13);
    }

    const Ext_QoS_Subscribed& GetQos_Negotiated() const
    {
        ITS_REQUIRE(OptionQos_Negotiated());
        return static_cast<const Ext_QoS_Subscribed&> (ElementAt(13));
    }

    void SetChargingId(GPRSChargingID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingIdStaticDescription());
        AddElement(14, element);
    }

    void SetChargingId(const GPRSChargingID& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSChargingID&>(element);
        asnObject.SetDescription(GetChargingIdStaticDescription());
        AddElement(14, element);
    }

    bool OptionChargingId() const
    {
        return Contains(14);
    }

    const GPRSChargingID& GetChargingId() const
    {
        ITS_REQUIRE(OptionChargingId());
        return static_cast<const GPRSChargingID&> (ElementAt(14));
    }

    void SetChargingCharacteristics(ChargingCharacteristics* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingCharacteristicsStaticDescription());
        AddElement(15, element);
    }

    void SetChargingCharacteristics(const ChargingCharacteristics& element)
    {
        its::AsnObject& asnObject = const_cast<ChargingCharacteristics&>(element);
        asnObject.SetDescription(GetChargingCharacteristicsStaticDescription());
        AddElement(15, element);
    }

    bool OptionChargingCharacteristics() const
    {
        return Contains(15);
    }

    const ChargingCharacteristics& GetChargingCharacteristics() const
    {
        ITS_REQUIRE(OptionChargingCharacteristics());
        return static_cast<const ChargingCharacteristics&> (ElementAt(15));
    }

    void SetRnc_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRnc_AddressStaticDescription());
        AddElement(16, element);
    }

    void SetRnc_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetRnc_AddressStaticDescription());
        AddElement(16, element);
    }

    bool OptionRnc_Address() const
    {
        return Contains(16);
    }

    const GSN_Address& GetRnc_Address() const
    {
        ITS_REQUIRE(OptionRnc_Address());
        return static_cast<const GSN_Address&> (ElementAt(16));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(17, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(17, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(17);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(17));
    }

    void SetQos2_Subscribed(Ext2_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos2_SubscribedStaticDescription());
        AddElement(18, element);
    }

    void SetQos2_Subscribed(const Ext2_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext2_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos2_SubscribedStaticDescription());
        AddElement(18, element);
    }

    bool OptionQos2_Subscribed() const
    {
        return Contains(18);
    }

    const Ext2_QoS_Subscribed& GetQos2_Subscribed() const
    {
        ITS_REQUIRE(OptionQos2_Subscribed());
        return static_cast<const Ext2_QoS_Subscribed&> (ElementAt(18));
    }

    void SetQos2_Requested(Ext2_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos2_RequestedStaticDescription());
        AddElement(19, element);
    }

    void SetQos2_Requested(const Ext2_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext2_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos2_RequestedStaticDescription());
        AddElement(19, element);
    }

    bool OptionQos2_Requested() const
    {
        return Contains(19);
    }

    const Ext2_QoS_Subscribed& GetQos2_Requested() const
    {
        ITS_REQUIRE(OptionQos2_Requested());
        return static_cast<const Ext2_QoS_Subscribed&> (ElementAt(19));
    }

    void SetQos2_Negotiated(Ext2_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQos2_NegotiatedStaticDescription());
        AddElement(20, element);
    }

    void SetQos2_Negotiated(const Ext2_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<Ext2_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetQos2_NegotiatedStaticDescription());
        AddElement(20, element);
    }

    bool OptionQos2_Negotiated() const
    {
        return Contains(20);
    }

    const Ext2_QoS_Subscribed& GetQos2_Negotiated() const
    {
        ITS_REQUIRE(OptionQos2_Negotiated());
        return static_cast<const Ext2_QoS_Subscribed&> (ElementAt(20));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_PDP_CONTEXT_INFO_H_)

