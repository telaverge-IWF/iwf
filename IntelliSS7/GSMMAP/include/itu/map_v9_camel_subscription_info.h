//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_CAMEL_SUBSCRIPTION_INFO_H_)
#define _MAP_V9_CAMEL_SUBSCRIPTION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>
#include <AsnBitString.h>

#include <map_v9_o_csi.h>
#include <map_v9_o_bcsm_camel_tdp_criteria_list.h>
#include <map_v9_d_csi.h>
#include <map_v9_t_csi.h>
#include <map_v9_t_bcsm_camel_tdp_criteria_list.h>
#include <map_v9_gprs_csi.h>
#include <map_v9_sms_csi.h>
#include <map_v9_ss_csi.h>
#include <map_v9_m_csi.h>
#include <map_v9_extension_container.h>
#include <map_v9_specific_csi_withdraw.h>
#include <map_v9_mt_sms_cameltdp_criteria_list.h>
#include <map_v9_mg_csi.h>



namespace map_v9 {



class CAMEL_SubscriptionInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Tif_CSI : public its::AsnNull
    {
    public:

        Tif_CSI() : its::AsnNull(false)
        {
            Initialize();
        }

        Tif_CSI(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Tif_CSI(const Tif_CSI& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Tif_CSI(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Tif_CSI()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Tif_CSI(*this);
        }

        virtual std::string GetName() const
        { return "Tif_CSI"; }

    };



    class Tif_CSI_NotificationToCSE : public its::AsnNull
    {
    public:

        Tif_CSI_NotificationToCSE() : its::AsnNull(false)
        {
            Initialize();
        }

        Tif_CSI_NotificationToCSE(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Tif_CSI_NotificationToCSE(const Tif_CSI_NotificationToCSE& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Tif_CSI_NotificationToCSE(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Tif_CSI_NotificationToCSE()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Tif_CSI_NotificationToCSE(*this);
        }

        virtual std::string GetName() const
        { return "Tif_CSI_NotificationToCSE"; }

    };


        typedef map_v9::O_CSI O_CSI;


        typedef map_v9::O_BcsmCamelTDPCriteriaList O_BcsmCamelTDPCriteriaList;


        typedef map_v9::D_CSI D_CSI;


        typedef map_v9::T_CSI T_CSI;


        typedef map_v9::T_BCSM_CAMEL_TDP_CriteriaList T_BCSM_CAMEL_TDP_CriteriaList;


        typedef map_v9::GPRS_CSI GPRS_CSI;


        typedef map_v9::SMS_CSI SMS_CSI;


        typedef map_v9::SS_CSI SS_CSI;


        typedef map_v9::M_CSI M_CSI;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::SpecificCSI_Withdraw SpecificCSI_Withdraw;


        typedef map_v9::MT_smsCAMELTDP_CriteriaList MT_smsCAMELTDP_CriteriaList;


        typedef map_v9::MG_CSI MG_CSI;


////////// End Nested Class(es) //////////

    CAMEL_SubscriptionInfo() : its::AsnSequence(23, false)
    {
        Initialize();
    }

    CAMEL_SubscriptionInfo(its::Octets& octets) : its::AsnSequence(23, false)
    {
        Initialize();
        Decode(octets);
    }

    CAMEL_SubscriptionInfo(const CAMEL_SubscriptionInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CAMEL_SubscriptionInfo(its::AsnDescObject* description) : its::AsnSequence(23, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetO_CSIStaticDescription();
    static its::AsnDescObject* GetO_BcsmCamelTDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetD_CSIStaticDescription();
    static its::AsnDescObject* GetT_CSIStaticDescription();
    static its::AsnDescObject* GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetVt_CSIStaticDescription();
    static its::AsnDescObject* GetVt_BCSM_CAMEL_TDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetTif_CSIStaticDescription();
    static its::AsnDescObject* GetTif_CSI_NotificationToCSEStaticDescription();
    static its::AsnDescObject* GetGprs_CSIStaticDescription();
    static its::AsnDescObject* GetMo_sms_CSIStaticDescription();
    static its::AsnDescObject* GetSs_CSIStaticDescription();
    static its::AsnDescObject* GetM_CSIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetSpecificCSIDeletedListStaticDescription();
    static its::AsnDescObject* GetMt_sms_CSIStaticDescription();
    static its::AsnDescObject* GetMt_smsCAMELTDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetMg_csiStaticDescription();
    static its::AsnDescObject* GetO_IM_CSIStaticDescription();
    static its::AsnDescObject* GetO_IM_BcsmCamelTDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetD_IM_CSIStaticDescription();
    static its::AsnDescObject* GetVt_IM_CSIStaticDescription();
    static its::AsnDescObject* GetVt_IM_BCSM_CAMEL_TDP_CriteriaListStaticDescription();

public:

    virtual ~CAMEL_SubscriptionInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CAMEL_SubscriptionInfo(*this);
    }

    virtual std::string GetName() const
    { return "CAMEL_SubscriptionInfo"; }

    void SetO_CSI(O_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_CSIStaticDescription());
        AddElement(0, element);
    }

    void SetO_CSI(const O_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<O_CSI&>(element);
        asnObject.SetDescription(GetO_CSIStaticDescription());
        AddElement(0, element);
    }

    bool OptionO_CSI() const
    {
        return Contains(0);
    }

    const O_CSI& GetO_CSI() const
    {
        ITS_REQUIRE(OptionO_CSI());
        return static_cast<const O_CSI&> (ElementAt(0));
    }

    void SetO_BcsmCamelTDP_CriteriaList(O_BcsmCamelTDPCriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(1, element);
    }

    void SetO_BcsmCamelTDP_CriteriaList(const O_BcsmCamelTDPCriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<O_BcsmCamelTDPCriteriaList&>(element);
        asnObject.SetDescription(GetO_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(1, element);
    }

    bool OptionO_BcsmCamelTDP_CriteriaList() const
    {
        return Contains(1);
    }

    const O_BcsmCamelTDPCriteriaList& GetO_BcsmCamelTDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionO_BcsmCamelTDP_CriteriaList());
        return static_cast<const O_BcsmCamelTDPCriteriaList&> (ElementAt(1));
    }

    void SetD_CSI(D_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetD_CSIStaticDescription());
        AddElement(2, element);
    }

    void SetD_CSI(const D_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<D_CSI&>(element);
        asnObject.SetDescription(GetD_CSIStaticDescription());
        AddElement(2, element);
    }

    bool OptionD_CSI() const
    {
        return Contains(2);
    }

    const D_CSI& GetD_CSI() const
    {
        ITS_REQUIRE(OptionD_CSI());
        return static_cast<const D_CSI&> (ElementAt(2));
    }

    void SetT_CSI(T_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetT_CSIStaticDescription());
        AddElement(3, element);
    }

    void SetT_CSI(const T_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<T_CSI&>(element);
        asnObject.SetDescription(GetT_CSIStaticDescription());
        AddElement(3, element);
    }

    bool OptionT_CSI() const
    {
        return Contains(3);
    }

    const T_CSI& GetT_CSI() const
    {
        ITS_REQUIRE(OptionT_CSI());
        return static_cast<const T_CSI&> (ElementAt(3));
    }

    void SetT_BCSM_CAMEL_TDP_CriteriaList(T_BCSM_CAMEL_TDP_CriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(4, element);
    }

    void SetT_BCSM_CAMEL_TDP_CriteriaList(const T_BCSM_CAMEL_TDP_CriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<T_BCSM_CAMEL_TDP_CriteriaList&>(element);
        asnObject.SetDescription(GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(4, element);
    }

    bool OptionT_BCSM_CAMEL_TDP_CriteriaList() const
    {
        return Contains(4);
    }

    const T_BCSM_CAMEL_TDP_CriteriaList& GetT_BCSM_CAMEL_TDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionT_BCSM_CAMEL_TDP_CriteriaList());
        return static_cast<const T_BCSM_CAMEL_TDP_CriteriaList&> (ElementAt(4));
    }

    void SetVt_CSI(T_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVt_CSIStaticDescription());
        AddElement(5, element);
    }

    void SetVt_CSI(const T_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<T_CSI&>(element);
        asnObject.SetDescription(GetVt_CSIStaticDescription());
        AddElement(5, element);
    }

    bool OptionVt_CSI() const
    {
        return Contains(5);
    }

    const T_CSI& GetVt_CSI() const
    {
        ITS_REQUIRE(OptionVt_CSI());
        return static_cast<const T_CSI&> (ElementAt(5));
    }

    void SetVt_BCSM_CAMEL_TDP_CriteriaList(T_BCSM_CAMEL_TDP_CriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVt_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(6, element);
    }

    void SetVt_BCSM_CAMEL_TDP_CriteriaList(const T_BCSM_CAMEL_TDP_CriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<T_BCSM_CAMEL_TDP_CriteriaList&>(element);
        asnObject.SetDescription(GetVt_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(6, element);
    }

    bool OptionVt_BCSM_CAMEL_TDP_CriteriaList() const
    {
        return Contains(6);
    }

    const T_BCSM_CAMEL_TDP_CriteriaList& GetVt_BCSM_CAMEL_TDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionVt_BCSM_CAMEL_TDP_CriteriaList());
        return static_cast<const T_BCSM_CAMEL_TDP_CriteriaList&> (ElementAt(6));
    }

    void SetTif_CSI(Tif_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTif_CSIStaticDescription());
        AddElement(7, element);
    }

    void SetTif_CSI(const Tif_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<Tif_CSI&>(element);
        asnObject.SetDescription(GetTif_CSIStaticDescription());
        AddElement(7, element);
    }

    bool OptionTif_CSI() const
    {
        return Contains(7);
    }

    const Tif_CSI& GetTif_CSI() const
    {
        ITS_REQUIRE(OptionTif_CSI());
        return static_cast<const Tif_CSI&> (ElementAt(7));
    }

    void SetTif_CSI_NotificationToCSE(Tif_CSI_NotificationToCSE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTif_CSI_NotificationToCSEStaticDescription());
        AddElement(8, element);
    }

    void SetTif_CSI_NotificationToCSE(const Tif_CSI_NotificationToCSE& element)
    {
        its::AsnObject& asnObject = const_cast<Tif_CSI_NotificationToCSE&>(element);
        asnObject.SetDescription(GetTif_CSI_NotificationToCSEStaticDescription());
        AddElement(8, element);
    }

    bool OptionTif_CSI_NotificationToCSE() const
    {
        return Contains(8);
    }

    const Tif_CSI_NotificationToCSE& GetTif_CSI_NotificationToCSE() const
    {
        ITS_REQUIRE(OptionTif_CSI_NotificationToCSE());
        return static_cast<const Tif_CSI_NotificationToCSE&> (ElementAt(8));
    }

    void SetGprs_CSI(GPRS_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGprs_CSIStaticDescription());
        AddElement(9, element);
    }

    void SetGprs_CSI(const GPRS_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<GPRS_CSI&>(element);
        asnObject.SetDescription(GetGprs_CSIStaticDescription());
        AddElement(9, element);
    }

    bool OptionGprs_CSI() const
    {
        return Contains(9);
    }

    const GPRS_CSI& GetGprs_CSI() const
    {
        ITS_REQUIRE(OptionGprs_CSI());
        return static_cast<const GPRS_CSI&> (ElementAt(9));
    }

    void SetMo_sms_CSI(SMS_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMo_sms_CSIStaticDescription());
        AddElement(10, element);
    }

    void SetMo_sms_CSI(const SMS_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<SMS_CSI&>(element);
        asnObject.SetDescription(GetMo_sms_CSIStaticDescription());
        AddElement(10, element);
    }

    bool OptionMo_sms_CSI() const
    {
        return Contains(10);
    }

    const SMS_CSI& GetMo_sms_CSI() const
    {
        ITS_REQUIRE(OptionMo_sms_CSI());
        return static_cast<const SMS_CSI&> (ElementAt(10));
    }

    void SetSs_CSI(SS_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CSIStaticDescription());
        AddElement(11, element);
    }

    void SetSs_CSI(const SS_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<SS_CSI&>(element);
        asnObject.SetDescription(GetSs_CSIStaticDescription());
        AddElement(11, element);
    }

    bool OptionSs_CSI() const
    {
        return Contains(11);
    }

    const SS_CSI& GetSs_CSI() const
    {
        ITS_REQUIRE(OptionSs_CSI());
        return static_cast<const SS_CSI&> (ElementAt(11));
    }

    void SetM_CSI(M_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetM_CSIStaticDescription());
        AddElement(12, element);
    }

    void SetM_CSI(const M_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<M_CSI&>(element);
        asnObject.SetDescription(GetM_CSIStaticDescription());
        AddElement(12, element);
    }

    bool OptionM_CSI() const
    {
        return Contains(12);
    }

    const M_CSI& GetM_CSI() const
    {
        ITS_REQUIRE(OptionM_CSI());
        return static_cast<const M_CSI&> (ElementAt(12));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(13, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(13, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(13);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(13));
    }

    void SetSpecificCSIDeletedList(SpecificCSI_Withdraw* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSpecificCSIDeletedListStaticDescription());
        AddElement(14, element);
    }

    void SetSpecificCSIDeletedList(const SpecificCSI_Withdraw& element)
    {
        its::AsnObject& asnObject = const_cast<SpecificCSI_Withdraw&>(element);
        asnObject.SetDescription(GetSpecificCSIDeletedListStaticDescription());
        AddElement(14, element);
    }

    bool OptionSpecificCSIDeletedList() const
    {
        return Contains(14);
    }

    const SpecificCSI_Withdraw& GetSpecificCSIDeletedList() const
    {
        ITS_REQUIRE(OptionSpecificCSIDeletedList());
        return static_cast<const SpecificCSI_Withdraw&> (ElementAt(14));
    }

    void SetMt_sms_CSI(SMS_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMt_sms_CSIStaticDescription());
        AddElement(15, element);
    }

    void SetMt_sms_CSI(const SMS_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<SMS_CSI&>(element);
        asnObject.SetDescription(GetMt_sms_CSIStaticDescription());
        AddElement(15, element);
    }

    bool OptionMt_sms_CSI() const
    {
        return Contains(15);
    }

    const SMS_CSI& GetMt_sms_CSI() const
    {
        ITS_REQUIRE(OptionMt_sms_CSI());
        return static_cast<const SMS_CSI&> (ElementAt(15));
    }

    void SetMt_smsCAMELTDP_CriteriaList(MT_smsCAMELTDP_CriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMt_smsCAMELTDP_CriteriaListStaticDescription());
        AddElement(16, element);
    }

    void SetMt_smsCAMELTDP_CriteriaList(const MT_smsCAMELTDP_CriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<MT_smsCAMELTDP_CriteriaList&>(element);
        asnObject.SetDescription(GetMt_smsCAMELTDP_CriteriaListStaticDescription());
        AddElement(16, element);
    }

    bool OptionMt_smsCAMELTDP_CriteriaList() const
    {
        return Contains(16);
    }

    const MT_smsCAMELTDP_CriteriaList& GetMt_smsCAMELTDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionMt_smsCAMELTDP_CriteriaList());
        return static_cast<const MT_smsCAMELTDP_CriteriaList&> (ElementAt(16));
    }

    void SetMg_csi(MG_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMg_csiStaticDescription());
        AddElement(17, element);
    }

    void SetMg_csi(const MG_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<MG_CSI&>(element);
        asnObject.SetDescription(GetMg_csiStaticDescription());
        AddElement(17, element);
    }

    bool OptionMg_csi() const
    {
        return Contains(17);
    }

    const MG_CSI& GetMg_csi() const
    {
        ITS_REQUIRE(OptionMg_csi());
        return static_cast<const MG_CSI&> (ElementAt(17));
    }

    void SetO_IM_CSI(O_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_IM_CSIStaticDescription());
        AddElement(18, element);
    }

    void SetO_IM_CSI(const O_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<O_CSI&>(element);
        asnObject.SetDescription(GetO_IM_CSIStaticDescription());
        AddElement(18, element);
    }

    bool OptionO_IM_CSI() const
    {
        return Contains(18);
    }

    const O_CSI& GetO_IM_CSI() const
    {
        ITS_REQUIRE(OptionO_IM_CSI());
        return static_cast<const O_CSI&> (ElementAt(18));
    }

    void SetO_IM_BcsmCamelTDP_CriteriaList(O_BcsmCamelTDPCriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_IM_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(19, element);
    }

    void SetO_IM_BcsmCamelTDP_CriteriaList(const O_BcsmCamelTDPCriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<O_BcsmCamelTDPCriteriaList&>(element);
        asnObject.SetDescription(GetO_IM_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(19, element);
    }

    bool OptionO_IM_BcsmCamelTDP_CriteriaList() const
    {
        return Contains(19);
    }

    const O_BcsmCamelTDPCriteriaList& GetO_IM_BcsmCamelTDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionO_IM_BcsmCamelTDP_CriteriaList());
        return static_cast<const O_BcsmCamelTDPCriteriaList&> (ElementAt(19));
    }

    void SetD_IM_CSI(D_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetD_IM_CSIStaticDescription());
        AddElement(20, element);
    }

    void SetD_IM_CSI(const D_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<D_CSI&>(element);
        asnObject.SetDescription(GetD_IM_CSIStaticDescription());
        AddElement(20, element);
    }

    bool OptionD_IM_CSI() const
    {
        return Contains(20);
    }

    const D_CSI& GetD_IM_CSI() const
    {
        ITS_REQUIRE(OptionD_IM_CSI());
        return static_cast<const D_CSI&> (ElementAt(20));
    }

    void SetVt_IM_CSI(T_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVt_IM_CSIStaticDescription());
        AddElement(21, element);
    }

    void SetVt_IM_CSI(const T_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<T_CSI&>(element);
        asnObject.SetDescription(GetVt_IM_CSIStaticDescription());
        AddElement(21, element);
    }

    bool OptionVt_IM_CSI() const
    {
        return Contains(21);
    }

    const T_CSI& GetVt_IM_CSI() const
    {
        ITS_REQUIRE(OptionVt_IM_CSI());
        return static_cast<const T_CSI&> (ElementAt(21));
    }

    void SetVt_IM_BCSM_CAMEL_TDP_CriteriaList(T_BCSM_CAMEL_TDP_CriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVt_IM_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(22, element);
    }

    void SetVt_IM_BCSM_CAMEL_TDP_CriteriaList(const T_BCSM_CAMEL_TDP_CriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<T_BCSM_CAMEL_TDP_CriteriaList&>(element);
        asnObject.SetDescription(GetVt_IM_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(22, element);
    }

    bool OptionVt_IM_BCSM_CAMEL_TDP_CriteriaList() const
    {
        return Contains(22);
    }

    const T_BCSM_CAMEL_TDP_CriteriaList& GetVt_IM_BCSM_CAMEL_TDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionVt_IM_BCSM_CAMEL_TDP_CriteriaList());
        return static_cast<const T_BCSM_CAMEL_TDP_CriteriaList&> (ElementAt(22));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_CAMEL_SUBSCRIPTION_INFO_H_)

