//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PDN_GW_IDENTITY_H_)
#define _MAP_V13_PDN_GW_IDENTITY_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v13_pdp_address.h>
#include <map_v13_fqdn.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class PDN_GW_Identity : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::PDP_Address PDP_Address;


        typedef map_v13::FQDN FQDN;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    PDN_GW_Identity() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    PDN_GW_Identity(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    PDN_GW_Identity(const PDN_GW_Identity& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PDN_GW_Identity(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPdn_gw_ipv4_AddressStaticDescription();
    static its::AsnDescObject* GetPdn_gw_ipv6_AddressStaticDescription();
    static its::AsnDescObject* GetPdn_gw_nameStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~PDN_GW_Identity()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PDN_GW_Identity(*this);
    }

    virtual std::string GetName() const
    { return "PDN_GW_Identity"; }

    void SetPdn_gw_ipv4_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_gw_ipv4_AddressStaticDescription());
        AddElement(0, element);
    }

    void SetPdn_gw_ipv4_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetPdn_gw_ipv4_AddressStaticDescription());
        AddElement(0, element);
    }

    bool OptionPdn_gw_ipv4_Address() const
    {
        return Contains(0);
    }

    const PDP_Address& GetPdn_gw_ipv4_Address() const
    {
        ITS_REQUIRE(OptionPdn_gw_ipv4_Address());
        return static_cast<const PDP_Address&> (ElementAt(0));
    }

    void SetPdn_gw_ipv6_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_gw_ipv6_AddressStaticDescription());
        AddElement(1, element);
    }

    void SetPdn_gw_ipv6_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetPdn_gw_ipv6_AddressStaticDescription());
        AddElement(1, element);
    }

    bool OptionPdn_gw_ipv6_Address() const
    {
        return Contains(1);
    }

    const PDP_Address& GetPdn_gw_ipv6_Address() const
    {
        ITS_REQUIRE(OptionPdn_gw_ipv6_Address());
        return static_cast<const PDP_Address&> (ElementAt(1));
    }

    void SetPdn_gw_name(FQDN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_gw_nameStaticDescription());
        AddElement(2, element);
    }

    void SetPdn_gw_name(const FQDN& element)
    {
        its::AsnObject& asnObject = const_cast<FQDN&>(element);
        asnObject.SetDescription(GetPdn_gw_nameStaticDescription());
        AddElement(2, element);
    }

    bool OptionPdn_gw_name() const
    {
        return Contains(2);
    }

    const FQDN& GetPdn_gw_name() const
    {
        ITS_REQUIRE(OptionPdn_gw_name());
        return static_cast<const FQDN&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PDN_GW_IDENTITY_H_)

