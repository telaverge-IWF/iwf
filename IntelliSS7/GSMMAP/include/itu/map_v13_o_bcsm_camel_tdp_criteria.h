//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_O_BCSM_CAMEL_TDP_CRITERIA_H_)
#define _MAP_V13_O_BCSM_CAMEL_TDP_CRITERIA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v13_o_bcsm_trigger_detection_point.h>
#include <map_v13_destination_number_criteria.h>
#include <map_v13_basic_service_criteria.h>
#include <map_v13_call_type_criteria.h>
#include <map_v13_o_cause_value_criteria.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class O_BcsmCamelTDP_Criteria : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::O_BcsmTriggerDetectionPoint O_BcsmTriggerDetectionPoint;


        typedef map_v13::DestinationNumberCriteria DestinationNumberCriteria;


        typedef map_v13::BasicServiceCriteria BasicServiceCriteria;


        typedef map_v13::CallTypeCriteria CallTypeCriteria;


        typedef map_v13::O_CauseValueCriteria O_CauseValueCriteria;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    O_BcsmCamelTDP_Criteria() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    O_BcsmCamelTDP_Criteria(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    O_BcsmCamelTDP_Criteria(const O_BcsmCamelTDP_Criteria& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    O_BcsmCamelTDP_Criteria(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetO_BcsmTriggerDetectionPointStaticDescription();
    static its::AsnDescObject* GetDestinationNumberCriteriaStaticDescription();
    static its::AsnDescObject* GetBasicServiceCriteriaStaticDescription();
    static its::AsnDescObject* GetCallTypeCriteriaStaticDescription();
    static its::AsnDescObject* GetO_CauseValueCriteriaStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~O_BcsmCamelTDP_Criteria()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new O_BcsmCamelTDP_Criteria(*this);
    }

    virtual std::string GetName() const
    { return "O_BcsmCamelTDP_Criteria"; }

    void SetO_BcsmTriggerDetectionPoint(O_BcsmTriggerDetectionPoint* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_BcsmTriggerDetectionPointStaticDescription());
        AddElement(0, element);
    }

    void SetO_BcsmTriggerDetectionPoint(const O_BcsmTriggerDetectionPoint& element)
    {
        its::AsnObject& asnObject = const_cast<O_BcsmTriggerDetectionPoint&>(element);
        asnObject.SetDescription(GetO_BcsmTriggerDetectionPointStaticDescription());
        AddElement(0, element);
    }

    const O_BcsmTriggerDetectionPoint& GetO_BcsmTriggerDetectionPoint() const
    {
        return static_cast<const O_BcsmTriggerDetectionPoint&> (ElementAt(0));
    }

    void SetDestinationNumberCriteria(DestinationNumberCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDestinationNumberCriteriaStaticDescription());
        AddElement(1, element);
    }

    void SetDestinationNumberCriteria(const DestinationNumberCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<DestinationNumberCriteria&>(element);
        asnObject.SetDescription(GetDestinationNumberCriteriaStaticDescription());
        AddElement(1, element);
    }

    bool OptionDestinationNumberCriteria() const
    {
        return Contains(1);
    }

    const DestinationNumberCriteria& GetDestinationNumberCriteria() const
    {
        ITS_REQUIRE(OptionDestinationNumberCriteria());
        return static_cast<const DestinationNumberCriteria&> (ElementAt(1));
    }

    void SetBasicServiceCriteria(BasicServiceCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceCriteriaStaticDescription());
        AddElement(2, element);
    }

    void SetBasicServiceCriteria(const BasicServiceCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCriteria&>(element);
        asnObject.SetDescription(GetBasicServiceCriteriaStaticDescription());
        AddElement(2, element);
    }

    bool OptionBasicServiceCriteria() const
    {
        return Contains(2);
    }

    const BasicServiceCriteria& GetBasicServiceCriteria() const
    {
        ITS_REQUIRE(OptionBasicServiceCriteria());
        return static_cast<const BasicServiceCriteria&> (ElementAt(2));
    }

    void SetCallTypeCriteria(CallTypeCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallTypeCriteriaStaticDescription());
        AddElement(3, element);
    }

    void SetCallTypeCriteria(const CallTypeCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<CallTypeCriteria&>(element);
        asnObject.SetDescription(GetCallTypeCriteriaStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallTypeCriteria() const
    {
        return Contains(3);
    }

    const CallTypeCriteria& GetCallTypeCriteria() const
    {
        ITS_REQUIRE(OptionCallTypeCriteria());
        return static_cast<const CallTypeCriteria&> (ElementAt(3));
    }

    void SetO_CauseValueCriteria(O_CauseValueCriteria* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_CauseValueCriteriaStaticDescription());
        AddElement(4, element);
    }

    void SetO_CauseValueCriteria(const O_CauseValueCriteria& element)
    {
        its::AsnObject& asnObject = const_cast<O_CauseValueCriteria&>(element);
        asnObject.SetDescription(GetO_CauseValueCriteriaStaticDescription());
        AddElement(4, element);
    }

    bool OptionO_CauseValueCriteria() const
    {
        return Contains(4);
    }

    const O_CauseValueCriteria& GetO_CauseValueCriteria() const
    {
        ITS_REQUIRE(OptionO_CauseValueCriteria());
        return static_cast<const O_CauseValueCriteria&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_O_BCSM_CAMEL_TDP_CRITERIA_H_)

