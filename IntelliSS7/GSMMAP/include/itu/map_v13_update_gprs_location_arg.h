//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_UPDATE_GPRS_LOCATION_ARG_H_)
#define _MAP_V13_UPDATE_GPRS_LOCATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnEnumerated.h>

#include <map_v13_imsi.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_gsn_address.h>
#include <map_v13_extension_container.h>
#include <map_v13_sgsn_capability.h>
#include <map_v13_add_info.h>
#include <map_v13_eps_info.h>
#include <map_v13_used_rat_type.h>
#include <map_v13_ue_srvcc_capability.h>



namespace map_v13 {



class UpdateGprsLocationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class InformPreviousNetworkEntity : public its::AsnNull
    {
    public:

        InformPreviousNetworkEntity() : its::AsnNull(false)
        {
            Initialize();
        }

        InformPreviousNetworkEntity(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        InformPreviousNetworkEntity(const InformPreviousNetworkEntity& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        InformPreviousNetworkEntity(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InformPreviousNetworkEntity()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InformPreviousNetworkEntity(*this);
        }

        virtual std::string GetName() const
        { return "InformPreviousNetworkEntity"; }

    };



    class Ps_LCS_NotSupportedByUE : public its::AsnNull
    {
    public:

        Ps_LCS_NotSupportedByUE() : its::AsnNull(false)
        {
            Initialize();
        }

        Ps_LCS_NotSupportedByUE(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ps_LCS_NotSupportedByUE(const Ps_LCS_NotSupportedByUE& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ps_LCS_NotSupportedByUE(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ps_LCS_NotSupportedByUE()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ps_LCS_NotSupportedByUE(*this);
        }

        virtual std::string GetName() const
        { return "Ps_LCS_NotSupportedByUE"; }

    };



    class ServingNodeTypeIndicator : public its::AsnNull
    {
    public:

        ServingNodeTypeIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        ServingNodeTypeIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ServingNodeTypeIndicator(const ServingNodeTypeIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ServingNodeTypeIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ServingNodeTypeIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ServingNodeTypeIndicator(*this);
        }

        virtual std::string GetName() const
        { return "ServingNodeTypeIndicator"; }

    };



    class SkipSubscriberDataUpdate : public its::AsnNull
    {
    public:

        SkipSubscriberDataUpdate() : its::AsnNull(false)
        {
            Initialize();
        }

        SkipSubscriberDataUpdate(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SkipSubscriberDataUpdate(const SkipSubscriberDataUpdate& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SkipSubscriberDataUpdate(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SkipSubscriberDataUpdate()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SkipSubscriberDataUpdate(*this);
        }

        virtual std::string GetName() const
        { return "SkipSubscriberDataUpdate"; }

    };



    class GprsSubscriptionDataNotNeeded : public its::AsnNull
    {
    public:

        GprsSubscriptionDataNotNeeded() : its::AsnNull(false)
        {
            Initialize();
        }

        GprsSubscriptionDataNotNeeded(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        GprsSubscriptionDataNotNeeded(const GprsSubscriptionDataNotNeeded& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        GprsSubscriptionDataNotNeeded(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~GprsSubscriptionDataNotNeeded()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new GprsSubscriptionDataNotNeeded(*this);
        }

        virtual std::string GetName() const
        { return "GprsSubscriptionDataNotNeeded"; }

    };



    class NodeTypeIndicator : public its::AsnNull
    {
    public:

        NodeTypeIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        NodeTypeIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        NodeTypeIndicator(const NodeTypeIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        NodeTypeIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NodeTypeIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NodeTypeIndicator(*this);
        }

        virtual std::string GetName() const
        { return "NodeTypeIndicator"; }

    };



    class AreaRestricted : public its::AsnNull
    {
    public:

        AreaRestricted() : its::AsnNull(false)
        {
            Initialize();
        }

        AreaRestricted(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AreaRestricted(const AreaRestricted& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AreaRestricted(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AreaRestricted()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AreaRestricted(*this);
        }

        virtual std::string GetName() const
        { return "AreaRestricted"; }

    };



    class Ue_reachableIndicator : public its::AsnNull
    {
    public:

        Ue_reachableIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        Ue_reachableIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ue_reachableIndicator(const Ue_reachableIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ue_reachableIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ue_reachableIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ue_reachableIndicator(*this);
        }

        virtual std::string GetName() const
        { return "Ue_reachableIndicator"; }

    };



    class EpsSubscriptionDataNotNeeded : public its::AsnNull
    {
    public:

        EpsSubscriptionDataNotNeeded() : its::AsnNull(false)
        {
            Initialize();
        }

        EpsSubscriptionDataNotNeeded(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        EpsSubscriptionDataNotNeeded(const EpsSubscriptionDataNotNeeded& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        EpsSubscriptionDataNotNeeded(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~EpsSubscriptionDataNotNeeded()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new EpsSubscriptionDataNotNeeded(*this);
        }

        virtual std::string GetName() const
        { return "EpsSubscriptionDataNotNeeded"; }

    };


        typedef map_v13::IMSI IMSI;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::GSN_Address GSN_Address;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::SGSN_Capability SGSN_Capability;


        typedef map_v13::ADD_Info ADD_Info;


        typedef map_v13::EPS_Info EPS_Info;


        typedef map_v13::Used_RAT_Type Used_RAT_Type;


        typedef map_v13::UE_SRVCC_Capability UE_SRVCC_Capability;


////////// End Nested Class(es) //////////

    UpdateGprsLocationArg() : its::AsnSequence(19, false)
    {
        Initialize();
    }

    UpdateGprsLocationArg(its::Octets& octets) : its::AsnSequence(19, false)
    {
        Initialize();
        Decode(octets);
    }

    UpdateGprsLocationArg(const UpdateGprsLocationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UpdateGprsLocationArg(its::AsnDescObject* description) : its::AsnSequence(19, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetSgsn_NumberStaticDescription();
    static its::AsnDescObject* GetSgsn_AddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetSgsn_CapabilityStaticDescription();
    static its::AsnDescObject* GetInformPreviousNetworkEntityStaticDescription();
    static its::AsnDescObject* GetPs_LCS_NotSupportedByUEStaticDescription();
    static its::AsnDescObject* GetV_gmlc_AddressStaticDescription();
    static its::AsnDescObject* GetAdd_infoStaticDescription();
    static its::AsnDescObject* GetEps_infoStaticDescription();
    static its::AsnDescObject* GetServingNodeTypeIndicatorStaticDescription();
    static its::AsnDescObject* GetSkipSubscriberDataUpdateStaticDescription();
    static its::AsnDescObject* GetUsedRAT_TypeStaticDescription();
    static its::AsnDescObject* GetGprsSubscriptionDataNotNeededStaticDescription();
    static its::AsnDescObject* GetNodeTypeIndicatorStaticDescription();
    static its::AsnDescObject* GetAreaRestrictedStaticDescription();
    static its::AsnDescObject* GetUe_reachableIndicatorStaticDescription();
    static its::AsnDescObject* GetEpsSubscriptionDataNotNeededStaticDescription();
    static its::AsnDescObject* GetUe_srvcc_CapabilityStaticDescription();

public:

    virtual ~UpdateGprsLocationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UpdateGprsLocationArg(*this);
    }

    virtual std::string GetName() const
    { return "UpdateGprsLocationArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetSgsn_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetSgsn_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetSgsn_NumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetSgsn_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetSgsn_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_AddressStaticDescription());
        AddElement(2, element);
    }

    void SetSgsn_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetSgsn_AddressStaticDescription());
        AddElement(2, element);
    }

    const GSN_Address& GetSgsn_Address() const
    {
        return static_cast<const GSN_Address&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

    void SetSgsn_Capability(SGSN_Capability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_CapabilityStaticDescription());
        AddElement(4, element);
    }

    void SetSgsn_Capability(const SGSN_Capability& element)
    {
        its::AsnObject& asnObject = const_cast<SGSN_Capability&>(element);
        asnObject.SetDescription(GetSgsn_CapabilityStaticDescription());
        AddElement(4, element);
    }

    bool OptionSgsn_Capability() const
    {
        return Contains(4);
    }

    const SGSN_Capability& GetSgsn_Capability() const
    {
        ITS_REQUIRE(OptionSgsn_Capability());
        return static_cast<const SGSN_Capability&> (ElementAt(4));
    }

    void SetInformPreviousNetworkEntity(InformPreviousNetworkEntity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInformPreviousNetworkEntityStaticDescription());
        AddElement(5, element);
    }

    void SetInformPreviousNetworkEntity(const InformPreviousNetworkEntity& element)
    {
        its::AsnObject& asnObject = const_cast<InformPreviousNetworkEntity&>(element);
        asnObject.SetDescription(GetInformPreviousNetworkEntityStaticDescription());
        AddElement(5, element);
    }

    bool OptionInformPreviousNetworkEntity() const
    {
        return Contains(5);
    }

    const InformPreviousNetworkEntity& GetInformPreviousNetworkEntity() const
    {
        ITS_REQUIRE(OptionInformPreviousNetworkEntity());
        return static_cast<const InformPreviousNetworkEntity&> (ElementAt(5));
    }

    void SetPs_LCS_NotSupportedByUE(Ps_LCS_NotSupportedByUE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPs_LCS_NotSupportedByUEStaticDescription());
        AddElement(6, element);
    }

    void SetPs_LCS_NotSupportedByUE(const Ps_LCS_NotSupportedByUE& element)
    {
        its::AsnObject& asnObject = const_cast<Ps_LCS_NotSupportedByUE&>(element);
        asnObject.SetDescription(GetPs_LCS_NotSupportedByUEStaticDescription());
        AddElement(6, element);
    }

    bool OptionPs_LCS_NotSupportedByUE() const
    {
        return Contains(6);
    }

    const Ps_LCS_NotSupportedByUE& GetPs_LCS_NotSupportedByUE() const
    {
        ITS_REQUIRE(OptionPs_LCS_NotSupportedByUE());
        return static_cast<const Ps_LCS_NotSupportedByUE&> (ElementAt(6));
    }

    void SetV_gmlc_Address(GSN_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetV_gmlc_AddressStaticDescription());
        AddElement(7, element);
    }

    void SetV_gmlc_Address(const GSN_Address& element)
    {
        its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
        asnObject.SetDescription(GetV_gmlc_AddressStaticDescription());
        AddElement(7, element);
    }

    bool OptionV_gmlc_Address() const
    {
        return Contains(7);
    }

    const GSN_Address& GetV_gmlc_Address() const
    {
        ITS_REQUIRE(OptionV_gmlc_Address());
        return static_cast<const GSN_Address&> (ElementAt(7));
    }

    void SetAdd_info(ADD_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdd_infoStaticDescription());
        AddElement(8, element);
    }

    void SetAdd_info(const ADD_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ADD_Info&>(element);
        asnObject.SetDescription(GetAdd_infoStaticDescription());
        AddElement(8, element);
    }

    bool OptionAdd_info() const
    {
        return Contains(8);
    }

    const ADD_Info& GetAdd_info() const
    {
        ITS_REQUIRE(OptionAdd_info());
        return static_cast<const ADD_Info&> (ElementAt(8));
    }

    void SetEps_info(EPS_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEps_infoStaticDescription());
        AddElement(9, element);
    }

    void SetEps_info(const EPS_Info& element)
    {
        its::AsnObject& asnObject = const_cast<EPS_Info&>(element);
        asnObject.SetDescription(GetEps_infoStaticDescription());
        AddElement(9, element);
    }

    bool OptionEps_info() const
    {
        return Contains(9);
    }

    const EPS_Info& GetEps_info() const
    {
        ITS_REQUIRE(OptionEps_info());
        return static_cast<const EPS_Info&> (ElementAt(9));
    }

    void SetServingNodeTypeIndicator(ServingNodeTypeIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServingNodeTypeIndicatorStaticDescription());
        AddElement(10, element);
    }

    void SetServingNodeTypeIndicator(const ServingNodeTypeIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<ServingNodeTypeIndicator&>(element);
        asnObject.SetDescription(GetServingNodeTypeIndicatorStaticDescription());
        AddElement(10, element);
    }

    bool OptionServingNodeTypeIndicator() const
    {
        return Contains(10);
    }

    const ServingNodeTypeIndicator& GetServingNodeTypeIndicator() const
    {
        ITS_REQUIRE(OptionServingNodeTypeIndicator());
        return static_cast<const ServingNodeTypeIndicator&> (ElementAt(10));
    }

    void SetSkipSubscriberDataUpdate(SkipSubscriberDataUpdate* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSkipSubscriberDataUpdateStaticDescription());
        AddElement(11, element);
    }

    void SetSkipSubscriberDataUpdate(const SkipSubscriberDataUpdate& element)
    {
        its::AsnObject& asnObject = const_cast<SkipSubscriberDataUpdate&>(element);
        asnObject.SetDescription(GetSkipSubscriberDataUpdateStaticDescription());
        AddElement(11, element);
    }

    bool OptionSkipSubscriberDataUpdate() const
    {
        return Contains(11);
    }

    const SkipSubscriberDataUpdate& GetSkipSubscriberDataUpdate() const
    {
        ITS_REQUIRE(OptionSkipSubscriberDataUpdate());
        return static_cast<const SkipSubscriberDataUpdate&> (ElementAt(11));
    }

    void SetUsedRAT_Type(Used_RAT_Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUsedRAT_TypeStaticDescription());
        AddElement(12, element);
    }

    void SetUsedRAT_Type(const Used_RAT_Type& element)
    {
        its::AsnObject& asnObject = const_cast<Used_RAT_Type&>(element);
        asnObject.SetDescription(GetUsedRAT_TypeStaticDescription());
        AddElement(12, element);
    }

    bool OptionUsedRAT_Type() const
    {
        return Contains(12);
    }

    const Used_RAT_Type& GetUsedRAT_Type() const
    {
        ITS_REQUIRE(OptionUsedRAT_Type());
        return static_cast<const Used_RAT_Type&> (ElementAt(12));
    }

    void SetGprsSubscriptionDataNotNeeded(GprsSubscriptionDataNotNeeded* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGprsSubscriptionDataNotNeededStaticDescription());
        AddElement(13, element);
    }

    void SetGprsSubscriptionDataNotNeeded(const GprsSubscriptionDataNotNeeded& element)
    {
        its::AsnObject& asnObject = const_cast<GprsSubscriptionDataNotNeeded&>(element);
        asnObject.SetDescription(GetGprsSubscriptionDataNotNeededStaticDescription());
        AddElement(13, element);
    }

    bool OptionGprsSubscriptionDataNotNeeded() const
    {
        return Contains(13);
    }

    const GprsSubscriptionDataNotNeeded& GetGprsSubscriptionDataNotNeeded() const
    {
        ITS_REQUIRE(OptionGprsSubscriptionDataNotNeeded());
        return static_cast<const GprsSubscriptionDataNotNeeded&> (ElementAt(13));
    }

    void SetNodeTypeIndicator(NodeTypeIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNodeTypeIndicatorStaticDescription());
        AddElement(14, element);
    }

    void SetNodeTypeIndicator(const NodeTypeIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<NodeTypeIndicator&>(element);
        asnObject.SetDescription(GetNodeTypeIndicatorStaticDescription());
        AddElement(14, element);
    }

    bool OptionNodeTypeIndicator() const
    {
        return Contains(14);
    }

    const NodeTypeIndicator& GetNodeTypeIndicator() const
    {
        ITS_REQUIRE(OptionNodeTypeIndicator());
        return static_cast<const NodeTypeIndicator&> (ElementAt(14));
    }

    void SetAreaRestricted(AreaRestricted* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAreaRestrictedStaticDescription());
        AddElement(15, element);
    }

    void SetAreaRestricted(const AreaRestricted& element)
    {
        its::AsnObject& asnObject = const_cast<AreaRestricted&>(element);
        asnObject.SetDescription(GetAreaRestrictedStaticDescription());
        AddElement(15, element);
    }

    bool OptionAreaRestricted() const
    {
        return Contains(15);
    }

    const AreaRestricted& GetAreaRestricted() const
    {
        ITS_REQUIRE(OptionAreaRestricted());
        return static_cast<const AreaRestricted&> (ElementAt(15));
    }

    void SetUe_reachableIndicator(Ue_reachableIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUe_reachableIndicatorStaticDescription());
        AddElement(16, element);
    }

    void SetUe_reachableIndicator(const Ue_reachableIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<Ue_reachableIndicator&>(element);
        asnObject.SetDescription(GetUe_reachableIndicatorStaticDescription());
        AddElement(16, element);
    }

    bool OptionUe_reachableIndicator() const
    {
        return Contains(16);
    }

    const Ue_reachableIndicator& GetUe_reachableIndicator() const
    {
        ITS_REQUIRE(OptionUe_reachableIndicator());
        return static_cast<const Ue_reachableIndicator&> (ElementAt(16));
    }

    void SetEpsSubscriptionDataNotNeeded(EpsSubscriptionDataNotNeeded* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEpsSubscriptionDataNotNeededStaticDescription());
        AddElement(17, element);
    }

    void SetEpsSubscriptionDataNotNeeded(const EpsSubscriptionDataNotNeeded& element)
    {
        its::AsnObject& asnObject = const_cast<EpsSubscriptionDataNotNeeded&>(element);
        asnObject.SetDescription(GetEpsSubscriptionDataNotNeededStaticDescription());
        AddElement(17, element);
    }

    bool OptionEpsSubscriptionDataNotNeeded() const
    {
        return Contains(17);
    }

    const EpsSubscriptionDataNotNeeded& GetEpsSubscriptionDataNotNeeded() const
    {
        ITS_REQUIRE(OptionEpsSubscriptionDataNotNeeded());
        return static_cast<const EpsSubscriptionDataNotNeeded&> (ElementAt(17));
    }

    void SetUe_srvcc_Capability(UE_SRVCC_Capability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUe_srvcc_CapabilityStaticDescription());
        AddElement(18, element);
    }

    void SetUe_srvcc_Capability(const UE_SRVCC_Capability& element)
    {
        its::AsnObject& asnObject = const_cast<UE_SRVCC_Capability&>(element);
        asnObject.SetDescription(GetUe_srvcc_CapabilityStaticDescription());
        AddElement(18, element);
    }

    bool OptionUe_srvcc_Capability() const
    {
        return Contains(18);
    }

    const UE_SRVCC_Capability& GetUe_srvcc_Capability() const
    {
        ITS_REQUIRE(OptionUe_srvcc_Capability());
        return static_cast<const UE_SRVCC_Capability&> (ElementAt(18));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_UPDATE_GPRS_LOCATION_ARG_H_)

