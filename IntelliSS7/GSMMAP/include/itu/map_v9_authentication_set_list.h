//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_AUTHENTICATION_SET_LIST_H_)
#define _MAP_V9_AUTHENTICATION_SET_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequenceOf.h>

#include <map_v9_triplet_list.h>
#include <map_v9_quintuplet_list.h>



namespace map_v9 {



class AuthenticationSetList : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::TripletList TripletList;


        typedef map_v9::QuintupletList QuintupletList;


////////// End Nested Class(es) //////////

    AuthenticationSetList() : its::AsnChoice(false)
    {
        Initialize();
    }

    AuthenticationSetList(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    AuthenticationSetList(const AuthenticationSetList& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    AuthenticationSetList(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    AuthenticationSetList(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTripletListStaticDescription();
    static its::AsnDescObject* GetQuintupletListStaticDescription();

public:

    virtual ~AuthenticationSetList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AuthenticationSetList(*this);
    }

    virtual std::string GetName() const
    { return "AuthenticationSetList"; }

    void SetChoiceTripletList(TripletList* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTripletListStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTripletList(const TripletList& choice)
    {
        its::AsnObject& asnObject = const_cast<TripletList&>(choice);
        asnObject.SetDescription(GetTripletListStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTripletList() const
    {
        return Contains(GetTripletListStaticDescription()->TagIdentity());
    }

    const TripletList& GetChoiceTripletList() const
    {
        ITS_REQUIRE(ChoiceTripletList());
        return static_cast<const TripletList&> (GetChoice());
    }

    void SetChoiceQuintupletList(QuintupletList* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetQuintupletListStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceQuintupletList(const QuintupletList& choice)
    {
        its::AsnObject& asnObject = const_cast<QuintupletList&>(choice);
        asnObject.SetDescription(GetQuintupletListStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceQuintupletList() const
    {
        return Contains(GetQuintupletListStaticDescription()->TagIdentity());
    }

    const QuintupletList& GetChoiceQuintupletList() const
    {
        ITS_REQUIRE(ChoiceQuintupletList());
        return static_cast<const QuintupletList&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_AUTHENTICATION_SET_LIST_H_)

