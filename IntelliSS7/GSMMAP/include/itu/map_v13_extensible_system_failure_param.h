//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_EXTENSIBLE_SYSTEM_FAILURE_PARAM_H_)
#define _MAP_V13_EXTENSIBLE_SYSTEM_FAILURE_PARAM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>

#include <map_v13_network_resource.h>
#include <map_v13_extension_container.h>
#include <map_v13_additional_network_resource.h>
#include <map_v13_failure_cause_param.h>



namespace map_v13 {



class ExtensibleSystemFailureParam : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::NetworkResource NetworkResource;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::AdditionalNetworkResource AdditionalNetworkResource;


        typedef map_v13::FailureCauseParam FailureCauseParam;


////////// End Nested Class(es) //////////

    ExtensibleSystemFailureParam() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    ExtensibleSystemFailureParam(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    ExtensibleSystemFailureParam(const ExtensibleSystemFailureParam& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ExtensibleSystemFailureParam(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNetworkResourceStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetAdditionalNetworkResourceStaticDescription();
    static its::AsnDescObject* GetFailureCauseParamStaticDescription();

public:

    virtual ~ExtensibleSystemFailureParam()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ExtensibleSystemFailureParam(*this);
    }

    virtual std::string GetName() const
    { return "ExtensibleSystemFailureParam"; }

    void SetNetworkResource(NetworkResource* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkResourceStaticDescription());
        AddElement(0, element);
    }

    void SetNetworkResource(const NetworkResource& element)
    {
        its::AsnObject& asnObject = const_cast<NetworkResource&>(element);
        asnObject.SetDescription(GetNetworkResourceStaticDescription());
        AddElement(0, element);
    }

    bool OptionNetworkResource() const
    {
        return Contains(0);
    }

    const NetworkResource& GetNetworkResource() const
    {
        ITS_REQUIRE(OptionNetworkResource());
        return static_cast<const NetworkResource&> (ElementAt(0));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(1);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(1));
    }

    void SetAdditionalNetworkResource(AdditionalNetworkResource* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalNetworkResourceStaticDescription());
        AddElement(2, element);
    }

    void SetAdditionalNetworkResource(const AdditionalNetworkResource& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalNetworkResource&>(element);
        asnObject.SetDescription(GetAdditionalNetworkResourceStaticDescription());
        AddElement(2, element);
    }

    bool OptionAdditionalNetworkResource() const
    {
        return Contains(2);
    }

    const AdditionalNetworkResource& GetAdditionalNetworkResource() const
    {
        ITS_REQUIRE(OptionAdditionalNetworkResource());
        return static_cast<const AdditionalNetworkResource&> (ElementAt(2));
    }

    void SetFailureCauseParam(FailureCauseParam* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFailureCauseParamStaticDescription());
        AddElement(3, element);
    }

    void SetFailureCauseParam(const FailureCauseParam& element)
    {
        its::AsnObject& asnObject = const_cast<FailureCauseParam&>(element);
        asnObject.SetDescription(GetFailureCauseParamStaticDescription());
        AddElement(3, element);
    }

    bool OptionFailureCauseParam() const
    {
        return Contains(3);
    }

    const FailureCauseParam& GetFailureCauseParam() const
    {
        ITS_REQUIRE(OptionFailureCauseParam());
        return static_cast<const FailureCauseParam&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_EXTENSIBLE_SYSTEM_FAILURE_PARAM_H_)

