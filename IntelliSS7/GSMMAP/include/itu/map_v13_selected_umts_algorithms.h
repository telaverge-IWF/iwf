//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SELECTED_UMTS_ALGORITHMS_H_)
#define _MAP_V13_SELECTED_UMTS_ALGORITHMS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v13_chosen_integrity_protection_algorithm.h>
#include <map_v13_chosen_encryption_algorithm.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class SelectedUMTS_Algorithms : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::ChosenIntegrityProtectionAlgorithm ChosenIntegrityProtectionAlgorithm;


        typedef map_v13::ChosenEncryptionAlgorithm ChosenEncryptionAlgorithm;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    SelectedUMTS_Algorithms() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    SelectedUMTS_Algorithms(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    SelectedUMTS_Algorithms(const SelectedUMTS_Algorithms& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SelectedUMTS_Algorithms(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetIntegrityProtectionAlgorithmStaticDescription();
    static its::AsnDescObject* GetEncryptionAlgorithmStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~SelectedUMTS_Algorithms()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SelectedUMTS_Algorithms(*this);
    }

    virtual std::string GetName() const
    { return "SelectedUMTS_Algorithms"; }

    void SetIntegrityProtectionAlgorithm(ChosenIntegrityProtectionAlgorithm* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIntegrityProtectionAlgorithmStaticDescription());
        AddElement(0, element);
    }

    void SetIntegrityProtectionAlgorithm(const ChosenIntegrityProtectionAlgorithm& element)
    {
        its::AsnObject& asnObject = const_cast<ChosenIntegrityProtectionAlgorithm&>(element);
        asnObject.SetDescription(GetIntegrityProtectionAlgorithmStaticDescription());
        AddElement(0, element);
    }

    bool OptionIntegrityProtectionAlgorithm() const
    {
        return Contains(0);
    }

    const ChosenIntegrityProtectionAlgorithm& GetIntegrityProtectionAlgorithm() const
    {
        ITS_REQUIRE(OptionIntegrityProtectionAlgorithm());
        return static_cast<const ChosenIntegrityProtectionAlgorithm&> (ElementAt(0));
    }

    void SetEncryptionAlgorithm(ChosenEncryptionAlgorithm* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEncryptionAlgorithmStaticDescription());
        AddElement(1, element);
    }

    void SetEncryptionAlgorithm(const ChosenEncryptionAlgorithm& element)
    {
        its::AsnObject& asnObject = const_cast<ChosenEncryptionAlgorithm&>(element);
        asnObject.SetDescription(GetEncryptionAlgorithmStaticDescription());
        AddElement(1, element);
    }

    bool OptionEncryptionAlgorithm() const
    {
        return Contains(1);
    }

    const ChosenEncryptionAlgorithm& GetEncryptionAlgorithm() const
    {
        ITS_REQUIRE(OptionEncryptionAlgorithm());
        return static_cast<const ChosenEncryptionAlgorithm&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_SELECTED_UMTS_ALGORITHMS_H_)

