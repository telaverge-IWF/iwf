//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LSA_DATA_H_)
#define _MAP_V13_LSA_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v13_lsa_identity.h>
#include <map_v13_lsa_attributes.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class LSAData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LsaActiveModeIndicator : public its::AsnNull
    {
    public:

        LsaActiveModeIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        LsaActiveModeIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LsaActiveModeIndicator(const LsaActiveModeIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LsaActiveModeIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LsaActiveModeIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LsaActiveModeIndicator(*this);
        }

        virtual std::string GetName() const
        { return "LsaActiveModeIndicator"; }

    };


        typedef map_v13::LSAIdentity LSAIdentity;


        typedef map_v13::LSAAttributes LSAAttributes;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    LSAData() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    LSAData(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    LSAData(const LSAData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LSAData(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLsaIdentityStaticDescription();
    static its::AsnDescObject* GetLsaAttributesStaticDescription();
    static its::AsnDescObject* GetLsaActiveModeIndicatorStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~LSAData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LSAData(*this);
    }

    virtual std::string GetName() const
    { return "LSAData"; }

    void SetLsaIdentity(LSAIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLsaIdentityStaticDescription());
        AddElement(0, element);
    }

    void SetLsaIdentity(const LSAIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<LSAIdentity&>(element);
        asnObject.SetDescription(GetLsaIdentityStaticDescription());
        AddElement(0, element);
    }

    const LSAIdentity& GetLsaIdentity() const
    {
        return static_cast<const LSAIdentity&> (ElementAt(0));
    }

    void SetLsaAttributes(LSAAttributes* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLsaAttributesStaticDescription());
        AddElement(1, element);
    }

    void SetLsaAttributes(const LSAAttributes& element)
    {
        its::AsnObject& asnObject = const_cast<LSAAttributes&>(element);
        asnObject.SetDescription(GetLsaAttributesStaticDescription());
        AddElement(1, element);
    }

    const LSAAttributes& GetLsaAttributes() const
    {
        return static_cast<const LSAAttributes&> (ElementAt(1));
    }

    void SetLsaActiveModeIndicator(LsaActiveModeIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLsaActiveModeIndicatorStaticDescription());
        AddElement(2, element);
    }

    void SetLsaActiveModeIndicator(const LsaActiveModeIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<LsaActiveModeIndicator&>(element);
        asnObject.SetDescription(GetLsaActiveModeIndicatorStaticDescription());
        AddElement(2, element);
    }

    bool OptionLsaActiveModeIndicator() const
    {
        return Contains(2);
    }

    const LsaActiveModeIndicator& GetLsaActiveModeIndicator() const
    {
        ITS_REQUIRE(OptionLsaActiveModeIndicator());
        return static_cast<const LsaActiveModeIndicator&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LSA_DATA_H_)

