//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_ANY_TIME_MODIFICATION_ARG_H_)
#define _MAP_V13_ANY_TIME_MODIFICATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnBitString.h>

#include <map_v13_subscriber_identity.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_modification_request_for_cf_info.h>
#include <map_v13_modification_request_for_cb_info.h>
#include <map_v13_modification_request_for_csi.h>
#include <map_v13_extension_container.h>
#include <map_v13_modification_request_for_odb_data.h>
#include <map_v13_modification_request_for_ip_sm_gw_data.h>
#include <map_v13_requested_serving_node.h>
#include <map_v13_modification_request_for_csg.h>
#include <map_v13_modification_request_for_cw_info.h>
#include <map_v13_modification_request_for_clip_info.h>
#include <map_v13_modification_request_for_clir_info.h>
#include <map_v13_modification_request_for_ch_info.h>
#include <map_v13_modification_request_for_ect_info.h>



namespace map_v13 {



class AnyTimeModificationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class LongFTN_Supported : public its::AsnNull
    {
    public:

        LongFTN_Supported() : its::AsnNull(false)
        {
            Initialize();
        }

        LongFTN_Supported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        LongFTN_Supported(const LongFTN_Supported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        LongFTN_Supported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~LongFTN_Supported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new LongFTN_Supported(*this);
        }

        virtual std::string GetName() const
        { return "LongFTN_Supported"; }

    };


        typedef map_v13::SubscriberIdentity SubscriberIdentity;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::ModificationRequestFor_CF_Info ModificationRequestFor_CF_Info;


        typedef map_v13::ModificationRequestFor_CB_Info ModificationRequestFor_CB_Info;


        typedef map_v13::ModificationRequestFor_CSI ModificationRequestFor_CSI;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::ModificationRequestFor_ODB_data ModificationRequestFor_ODB_data;


        typedef map_v13::ModificationRequestFor_IP_SM_GW_Data ModificationRequestFor_IP_SM_GW_Data;


        typedef map_v13::RequestedServingNode RequestedServingNode;


        typedef map_v13::ModificationRequestFor_CSG ModificationRequestFor_CSG;


        typedef map_v13::ModificationRequestFor_CW_Info ModificationRequestFor_CW_Info;


        typedef map_v13::ModificationRequestFor_CLIP_Info ModificationRequestFor_CLIP_Info;


        typedef map_v13::ModificationRequestFor_CLIR_Info ModificationRequestFor_CLIR_Info;


        typedef map_v13::ModificationRequestFor_CH_Info ModificationRequestFor_CH_Info;


        typedef map_v13::ModificationRequestFor_ECT_Info ModificationRequestFor_ECT_Info;


////////// End Nested Class(es) //////////

    AnyTimeModificationArg() : its::AsnSequence(16, false)
    {
        Initialize();
    }

    AnyTimeModificationArg(its::Octets& octets) : its::AsnSequence(16, false)
    {
        Initialize();
        Decode(octets);
    }

    AnyTimeModificationArg(const AnyTimeModificationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AnyTimeModificationArg(its::AsnDescObject* description) : its::AsnSequence(16, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSubscriberIdentityStaticDescription();
    static its::AsnDescObject* GetGsmSCF_AddressStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CF_InfoStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CB_InfoStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CSIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetLongFTN_SupportedStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_ODB_dataStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_IP_SM_GW_DataStaticDescription();
    static its::AsnDescObject* GetActivationRequestForUE_reachabilityStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CSGStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CW_DataStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CLIP_DataStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_CLIR_DataStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_HOLD_DataStaticDescription();
    static its::AsnDescObject* GetModificationRequestFor_ECT_DataStaticDescription();

public:

    virtual ~AnyTimeModificationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AnyTimeModificationArg(*this);
    }

    virtual std::string GetName() const
    { return "AnyTimeModificationArg"; }

    void SetSubscriberIdentity(SubscriberIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberIdentityStaticDescription());
        AddElement(0, element);
    }

    void SetSubscriberIdentity(const SubscriberIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberIdentity&>(element);
        asnObject.SetDescription(GetSubscriberIdentityStaticDescription());
        AddElement(0, element);
    }

    const SubscriberIdentity& GetSubscriberIdentity() const
    {
        return static_cast<const SubscriberIdentity&> (ElementAt(0));
    }

    void SetGsmSCF_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGsmSCF_AddressStaticDescription());
        AddElement(1, element);
    }

    void SetGsmSCF_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetGsmSCF_AddressStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetGsmSCF_Address() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetModificationRequestFor_CF_Info(ModificationRequestFor_CF_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CF_InfoStaticDescription());
        AddElement(2, element);
    }

    void SetModificationRequestFor_CF_Info(const ModificationRequestFor_CF_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CF_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CF_InfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionModificationRequestFor_CF_Info() const
    {
        return Contains(2);
    }

    const ModificationRequestFor_CF_Info& GetModificationRequestFor_CF_Info() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CF_Info());
        return static_cast<const ModificationRequestFor_CF_Info&> (ElementAt(2));
    }

    void SetModificationRequestFor_CB_Info(ModificationRequestFor_CB_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CB_InfoStaticDescription());
        AddElement(3, element);
    }

    void SetModificationRequestFor_CB_Info(const ModificationRequestFor_CB_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CB_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CB_InfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionModificationRequestFor_CB_Info() const
    {
        return Contains(3);
    }

    const ModificationRequestFor_CB_Info& GetModificationRequestFor_CB_Info() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CB_Info());
        return static_cast<const ModificationRequestFor_CB_Info&> (ElementAt(3));
    }

    void SetModificationRequestFor_CSI(ModificationRequestFor_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CSIStaticDescription());
        AddElement(4, element);
    }

    void SetModificationRequestFor_CSI(const ModificationRequestFor_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CSI&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CSIStaticDescription());
        AddElement(4, element);
    }

    bool OptionModificationRequestFor_CSI() const
    {
        return Contains(4);
    }

    const ModificationRequestFor_CSI& GetModificationRequestFor_CSI() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CSI());
        return static_cast<const ModificationRequestFor_CSI&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetLongFTN_Supported(LongFTN_Supported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLongFTN_SupportedStaticDescription());
        AddElement(6, element);
    }

    void SetLongFTN_Supported(const LongFTN_Supported& element)
    {
        its::AsnObject& asnObject = const_cast<LongFTN_Supported&>(element);
        asnObject.SetDescription(GetLongFTN_SupportedStaticDescription());
        AddElement(6, element);
    }

    bool OptionLongFTN_Supported() const
    {
        return Contains(6);
    }

    const LongFTN_Supported& GetLongFTN_Supported() const
    {
        ITS_REQUIRE(OptionLongFTN_Supported());
        return static_cast<const LongFTN_Supported&> (ElementAt(6));
    }

    void SetModificationRequestFor_ODB_data(ModificationRequestFor_ODB_data* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_ODB_dataStaticDescription());
        AddElement(7, element);
    }

    void SetModificationRequestFor_ODB_data(const ModificationRequestFor_ODB_data& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_ODB_data&>(element);
        asnObject.SetDescription(GetModificationRequestFor_ODB_dataStaticDescription());
        AddElement(7, element);
    }

    bool OptionModificationRequestFor_ODB_data() const
    {
        return Contains(7);
    }

    const ModificationRequestFor_ODB_data& GetModificationRequestFor_ODB_data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_ODB_data());
        return static_cast<const ModificationRequestFor_ODB_data&> (ElementAt(7));
    }

    void SetModificationRequestFor_IP_SM_GW_Data(ModificationRequestFor_IP_SM_GW_Data* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_IP_SM_GW_DataStaticDescription());
        AddElement(8, element);
    }

    void SetModificationRequestFor_IP_SM_GW_Data(const ModificationRequestFor_IP_SM_GW_Data& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_IP_SM_GW_Data&>(element);
        asnObject.SetDescription(GetModificationRequestFor_IP_SM_GW_DataStaticDescription());
        AddElement(8, element);
    }

    bool OptionModificationRequestFor_IP_SM_GW_Data() const
    {
        return Contains(8);
    }

    const ModificationRequestFor_IP_SM_GW_Data& GetModificationRequestFor_IP_SM_GW_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_IP_SM_GW_Data());
        return static_cast<const ModificationRequestFor_IP_SM_GW_Data&> (ElementAt(8));
    }

    void SetActivationRequestForUE_reachability(RequestedServingNode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetActivationRequestForUE_reachabilityStaticDescription());
        AddElement(9, element);
    }

    void SetActivationRequestForUE_reachability(const RequestedServingNode& element)
    {
        its::AsnObject& asnObject = const_cast<RequestedServingNode&>(element);
        asnObject.SetDescription(GetActivationRequestForUE_reachabilityStaticDescription());
        AddElement(9, element);
    }

    bool OptionActivationRequestForUE_reachability() const
    {
        return Contains(9);
    }

    const RequestedServingNode& GetActivationRequestForUE_reachability() const
    {
        ITS_REQUIRE(OptionActivationRequestForUE_reachability());
        return static_cast<const RequestedServingNode&> (ElementAt(9));
    }

    void SetModificationRequestFor_CSG(ModificationRequestFor_CSG* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CSGStaticDescription());
        AddElement(10, element);
    }

    void SetModificationRequestFor_CSG(const ModificationRequestFor_CSG& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CSG&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CSGStaticDescription());
        AddElement(10, element);
    }

    bool OptionModificationRequestFor_CSG() const
    {
        return Contains(10);
    }

    const ModificationRequestFor_CSG& GetModificationRequestFor_CSG() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CSG());
        return static_cast<const ModificationRequestFor_CSG&> (ElementAt(10));
    }

    void SetModificationRequestFor_CW_Data(ModificationRequestFor_CW_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CW_DataStaticDescription());
        AddElement(11, element);
    }

    void SetModificationRequestFor_CW_Data(const ModificationRequestFor_CW_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CW_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CW_DataStaticDescription());
        AddElement(11, element);
    }

    bool OptionModificationRequestFor_CW_Data() const
    {
        return Contains(11);
    }

    const ModificationRequestFor_CW_Info& GetModificationRequestFor_CW_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CW_Data());
        return static_cast<const ModificationRequestFor_CW_Info&> (ElementAt(11));
    }

    void SetModificationRequestFor_CLIP_Data(ModificationRequestFor_CLIP_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CLIP_DataStaticDescription());
        AddElement(12, element);
    }

    void SetModificationRequestFor_CLIP_Data(const ModificationRequestFor_CLIP_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CLIP_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CLIP_DataStaticDescription());
        AddElement(12, element);
    }

    bool OptionModificationRequestFor_CLIP_Data() const
    {
        return Contains(12);
    }

    const ModificationRequestFor_CLIP_Info& GetModificationRequestFor_CLIP_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CLIP_Data());
        return static_cast<const ModificationRequestFor_CLIP_Info&> (ElementAt(12));
    }

    void SetModificationRequestFor_CLIR_Data(ModificationRequestFor_CLIR_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_CLIR_DataStaticDescription());
        AddElement(13, element);
    }

    void SetModificationRequestFor_CLIR_Data(const ModificationRequestFor_CLIR_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CLIR_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_CLIR_DataStaticDescription());
        AddElement(13, element);
    }

    bool OptionModificationRequestFor_CLIR_Data() const
    {
        return Contains(13);
    }

    const ModificationRequestFor_CLIR_Info& GetModificationRequestFor_CLIR_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_CLIR_Data());
        return static_cast<const ModificationRequestFor_CLIR_Info&> (ElementAt(13));
    }

    void SetModificationRequestFor_HOLD_Data(ModificationRequestFor_CH_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_HOLD_DataStaticDescription());
        AddElement(14, element);
    }

    void SetModificationRequestFor_HOLD_Data(const ModificationRequestFor_CH_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_CH_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_HOLD_DataStaticDescription());
        AddElement(14, element);
    }

    bool OptionModificationRequestFor_HOLD_Data() const
    {
        return Contains(14);
    }

    const ModificationRequestFor_CH_Info& GetModificationRequestFor_HOLD_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_HOLD_Data());
        return static_cast<const ModificationRequestFor_CH_Info&> (ElementAt(14));
    }

    void SetModificationRequestFor_ECT_Data(ModificationRequestFor_ECT_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetModificationRequestFor_ECT_DataStaticDescription());
        AddElement(15, element);
    }

    void SetModificationRequestFor_ECT_Data(const ModificationRequestFor_ECT_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ModificationRequestFor_ECT_Info&>(element);
        asnObject.SetDescription(GetModificationRequestFor_ECT_DataStaticDescription());
        AddElement(15, element);
    }

    bool OptionModificationRequestFor_ECT_Data() const
    {
        return Contains(15);
    }

    const ModificationRequestFor_ECT_Info& GetModificationRequestFor_ECT_Data() const
    {
        ITS_REQUIRE(OptionModificationRequestFor_ECT_Data());
        return static_cast<const ModificationRequestFor_ECT_Info&> (ElementAt(15));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_ANY_TIME_MODIFICATION_ARG_H_)

