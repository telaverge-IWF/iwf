//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_EXT_SS_INFO_FOR_CSE_H_)
#define _MAP_V9_EXT_SS_INFO_FOR_CSE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>

#include <map_v9_ext_forwarding_info_for_cse.h>
#include <map_v9_ext_call_barring_info_for_cse.h>



namespace map_v9 {



class Ext_SS_InfoFor_CSE : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::Ext_ForwardingInfoFor_CSE Ext_ForwardingInfoFor_CSE;


        typedef map_v9::Ext_CallBarringInfoFor_CSE Ext_CallBarringInfoFor_CSE;


////////// End Nested Class(es) //////////

    Ext_SS_InfoFor_CSE() : its::AsnChoice(false)
    {
        Initialize();
    }

    Ext_SS_InfoFor_CSE(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    Ext_SS_InfoFor_CSE(const Ext_SS_InfoFor_CSE& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    Ext_SS_InfoFor_CSE(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    Ext_SS_InfoFor_CSE(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetForwardingInfoFor_CSEStaticDescription();
    static its::AsnDescObject* GetCallBarringInfoFor_CSEStaticDescription();

public:

    virtual ~Ext_SS_InfoFor_CSE()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Ext_SS_InfoFor_CSE(*this);
    }

    virtual std::string GetName() const
    { return "Ext_SS_InfoFor_CSE"; }

    void SetChoiceForwardingInfoFor_CSE(Ext_ForwardingInfoFor_CSE* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetForwardingInfoFor_CSEStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceForwardingInfoFor_CSE(const Ext_ForwardingInfoFor_CSE& choice)
    {
        its::AsnObject& asnObject = const_cast<Ext_ForwardingInfoFor_CSE&>(choice);
        asnObject.SetDescription(GetForwardingInfoFor_CSEStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceForwardingInfoFor_CSE() const
    {
        return Contains(GetForwardingInfoFor_CSEStaticDescription()->TagIdentity());
    }

    const Ext_ForwardingInfoFor_CSE& GetChoiceForwardingInfoFor_CSE() const
    {
        ITS_REQUIRE(ChoiceForwardingInfoFor_CSE());
        return static_cast<const Ext_ForwardingInfoFor_CSE&> (GetChoice());
    }

    void SetChoiceCallBarringInfoFor_CSE(Ext_CallBarringInfoFor_CSE* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallBarringInfoFor_CSEStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallBarringInfoFor_CSE(const Ext_CallBarringInfoFor_CSE& choice)
    {
        its::AsnObject& asnObject = const_cast<Ext_CallBarringInfoFor_CSE&>(choice);
        asnObject.SetDescription(GetCallBarringInfoFor_CSEStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallBarringInfoFor_CSE() const
    {
        return Contains(GetCallBarringInfoFor_CSEStaticDescription()->TagIdentity());
    }

    const Ext_CallBarringInfoFor_CSE& GetChoiceCallBarringInfoFor_CSE() const
    {
        ITS_REQUIRE(ChoiceCallBarringInfoFor_CSE());
        return static_cast<const Ext_CallBarringInfoFor_CSE&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_EXT_SS_INFO_FOR_CSE_H_)

