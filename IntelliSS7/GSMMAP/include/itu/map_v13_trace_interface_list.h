//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_TRACE_INTERFACE_LIST_H_)
#define _MAP_V13_TRACE_INTERFACE_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>

#include <map_v13_msc_s_interface_list.h>
#include <map_v13_mgw_interface_list.h>
#include <map_v13_sgsn_interface_list.h>
#include <map_v13_ggsn_interface_list.h>
#include <map_v13_rnc_interface_list.h>
#include <map_v13_bmsc_interface_list.h>
#include <map_v13_mme_interface_list.h>
#include <map_v13_sgw_interface_list.h>
#include <map_v13_pgw_interface_list.h>
#include <map_v13_enb_interface_list.h>



namespace map_v13 {



class TraceInterfaceList : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::MSC_S_InterfaceList MSC_S_InterfaceList;


        typedef map_v13::MGW_InterfaceList MGW_InterfaceList;


        typedef map_v13::SGSN_InterfaceList SGSN_InterfaceList;


        typedef map_v13::GGSN_InterfaceList GGSN_InterfaceList;


        typedef map_v13::RNC_InterfaceList RNC_InterfaceList;


        typedef map_v13::BMSC_InterfaceList BMSC_InterfaceList;


        typedef map_v13::MME_InterfaceList MME_InterfaceList;


        typedef map_v13::SGW_InterfaceList SGW_InterfaceList;


        typedef map_v13::PGW_InterfaceList PGW_InterfaceList;


        typedef map_v13::ENB_InterfaceList ENB_InterfaceList;


////////// End Nested Class(es) //////////

    TraceInterfaceList() : its::AsnSequence(10, false)
    {
        Initialize();
    }

    TraceInterfaceList(its::Octets& octets) : its::AsnSequence(10, false)
    {
        Initialize();
        Decode(octets);
    }

    TraceInterfaceList(const TraceInterfaceList& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    TraceInterfaceList(its::AsnDescObject* description) : its::AsnSequence(10, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsc_s_ListStaticDescription();
    static its::AsnDescObject* GetMgw_ListStaticDescription();
    static its::AsnDescObject* GetSgsn_ListStaticDescription();
    static its::AsnDescObject* GetGgsn_ListStaticDescription();
    static its::AsnDescObject* GetRnc_ListStaticDescription();
    static its::AsnDescObject* GetBmsc_ListStaticDescription();
    static its::AsnDescObject* GetMme_ListStaticDescription();
    static its::AsnDescObject* GetSgw_ListStaticDescription();
    static its::AsnDescObject* GetPgw_ListStaticDescription();
    static its::AsnDescObject* GetENB_ListStaticDescription();

public:

    virtual ~TraceInterfaceList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TraceInterfaceList(*this);
    }

    virtual std::string GetName() const
    { return "TraceInterfaceList"; }

    void SetMsc_s_List(MSC_S_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsc_s_ListStaticDescription());
        AddElement(0, element);
    }

    void SetMsc_s_List(const MSC_S_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<MSC_S_InterfaceList&>(element);
        asnObject.SetDescription(GetMsc_s_ListStaticDescription());
        AddElement(0, element);
    }

    bool OptionMsc_s_List() const
    {
        return Contains(0);
    }

    const MSC_S_InterfaceList& GetMsc_s_List() const
    {
        ITS_REQUIRE(OptionMsc_s_List());
        return static_cast<const MSC_S_InterfaceList&> (ElementAt(0));
    }

    void SetMgw_List(MGW_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMgw_ListStaticDescription());
        AddElement(1, element);
    }

    void SetMgw_List(const MGW_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<MGW_InterfaceList&>(element);
        asnObject.SetDescription(GetMgw_ListStaticDescription());
        AddElement(1, element);
    }

    bool OptionMgw_List() const
    {
        return Contains(1);
    }

    const MGW_InterfaceList& GetMgw_List() const
    {
        ITS_REQUIRE(OptionMgw_List());
        return static_cast<const MGW_InterfaceList&> (ElementAt(1));
    }

    void SetSgsn_List(SGSN_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgsn_ListStaticDescription());
        AddElement(2, element);
    }

    void SetSgsn_List(const SGSN_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<SGSN_InterfaceList&>(element);
        asnObject.SetDescription(GetSgsn_ListStaticDescription());
        AddElement(2, element);
    }

    bool OptionSgsn_List() const
    {
        return Contains(2);
    }

    const SGSN_InterfaceList& GetSgsn_List() const
    {
        ITS_REQUIRE(OptionSgsn_List());
        return static_cast<const SGSN_InterfaceList&> (ElementAt(2));
    }

    void SetGgsn_List(GGSN_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGgsn_ListStaticDescription());
        AddElement(3, element);
    }

    void SetGgsn_List(const GGSN_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<GGSN_InterfaceList&>(element);
        asnObject.SetDescription(GetGgsn_ListStaticDescription());
        AddElement(3, element);
    }

    bool OptionGgsn_List() const
    {
        return Contains(3);
    }

    const GGSN_InterfaceList& GetGgsn_List() const
    {
        ITS_REQUIRE(OptionGgsn_List());
        return static_cast<const GGSN_InterfaceList&> (ElementAt(3));
    }

    void SetRnc_List(RNC_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRnc_ListStaticDescription());
        AddElement(4, element);
    }

    void SetRnc_List(const RNC_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<RNC_InterfaceList&>(element);
        asnObject.SetDescription(GetRnc_ListStaticDescription());
        AddElement(4, element);
    }

    bool OptionRnc_List() const
    {
        return Contains(4);
    }

    const RNC_InterfaceList& GetRnc_List() const
    {
        ITS_REQUIRE(OptionRnc_List());
        return static_cast<const RNC_InterfaceList&> (ElementAt(4));
    }

    void SetBmsc_List(BMSC_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBmsc_ListStaticDescription());
        AddElement(5, element);
    }

    void SetBmsc_List(const BMSC_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<BMSC_InterfaceList&>(element);
        asnObject.SetDescription(GetBmsc_ListStaticDescription());
        AddElement(5, element);
    }

    bool OptionBmsc_List() const
    {
        return Contains(5);
    }

    const BMSC_InterfaceList& GetBmsc_List() const
    {
        ITS_REQUIRE(OptionBmsc_List());
        return static_cast<const BMSC_InterfaceList&> (ElementAt(5));
    }

    void SetMme_List(MME_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMme_ListStaticDescription());
        AddElement(6, element);
    }

    void SetMme_List(const MME_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<MME_InterfaceList&>(element);
        asnObject.SetDescription(GetMme_ListStaticDescription());
        AddElement(6, element);
    }

    bool OptionMme_List() const
    {
        return Contains(6);
    }

    const MME_InterfaceList& GetMme_List() const
    {
        ITS_REQUIRE(OptionMme_List());
        return static_cast<const MME_InterfaceList&> (ElementAt(6));
    }

    void SetSgw_List(SGW_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSgw_ListStaticDescription());
        AddElement(7, element);
    }

    void SetSgw_List(const SGW_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<SGW_InterfaceList&>(element);
        asnObject.SetDescription(GetSgw_ListStaticDescription());
        AddElement(7, element);
    }

    bool OptionSgw_List() const
    {
        return Contains(7);
    }

    const SGW_InterfaceList& GetSgw_List() const
    {
        ITS_REQUIRE(OptionSgw_List());
        return static_cast<const SGW_InterfaceList&> (ElementAt(7));
    }

    void SetPgw_List(PGW_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPgw_ListStaticDescription());
        AddElement(8, element);
    }

    void SetPgw_List(const PGW_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<PGW_InterfaceList&>(element);
        asnObject.SetDescription(GetPgw_ListStaticDescription());
        AddElement(8, element);
    }

    bool OptionPgw_List() const
    {
        return Contains(8);
    }

    const PGW_InterfaceList& GetPgw_List() const
    {
        ITS_REQUIRE(OptionPgw_List());
        return static_cast<const PGW_InterfaceList&> (ElementAt(8));
    }

    void SetENB_List(ENB_InterfaceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetENB_ListStaticDescription());
        AddElement(9, element);
    }

    void SetENB_List(const ENB_InterfaceList& element)
    {
        its::AsnObject& asnObject = const_cast<ENB_InterfaceList&>(element);
        asnObject.SetDescription(GetENB_ListStaticDescription());
        AddElement(9, element);
    }

    bool OptionENB_List() const
    {
        return Contains(9);
    }

    const ENB_InterfaceList& GetENB_List() const
    {
        ITS_REQUIRE(OptionENB_List());
        return static_cast<const ENB_InterfaceList&> (ElementAt(9));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_TRACE_INTERFACE_LIST_H_)

