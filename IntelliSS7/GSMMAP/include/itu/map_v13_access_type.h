//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_ACCESS_TYPE_H_)
#define _MAP_V13_ACCESS_TYPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class AccessType : public its::AsnEnumerated
{
public:

    AccessType() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    AccessType(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    AccessType(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    AccessType(const AccessType& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    AccessType(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    AccessType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~AccessType()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AccessType(*this);
    }

    virtual std::string GetName() const
    { return "AccessType"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        ACCESS_TYPE_CALL = 0,
        ACCESS_TYPE_EMERGENCY_CALL = 1,
        ACCESS_TYPE_LOCATION_UPDATING = 2,
        ACCESS_TYPE_SUPPLEMENTARY_SERVICE = 3,
        ACCESS_TYPE_SHORT_MESSAGE = 4,
        ACCESS_TYPE_GPRS_ATTACH = 5,
        ACCESS_TYPE_ROUTING_AREA_UPDATING = 6,
        ACCESS_TYPE_SERVICE_REQUEST = 7,
        ACCESS_TYPE_PDP_CONTEXT_ACTIVATION = 8,
        ACCESS_TYPE_PDP_CONTEXT_DEACTIVATION = 9
,
        ACCESS_TYPE_GPRS_DETACH = 10
    };

    void SetCall()
    { _value = 0; }

    bool IsCall() const
    { return _value == 0; }

    void SetEmergencyCall()
    { _value = 1; }

    bool IsEmergencyCall() const
    { return _value == 1; }

    void SetLocationUpdating()
    { _value = 2; }

    bool IsLocationUpdating() const
    { return _value == 2; }

    void SetSupplementaryService()
    { _value = 3; }

    bool IsSupplementaryService() const
    { return _value == 3; }

    void SetShortMessage()
    { _value = 4; }

    bool IsShortMessage() const
    { return _value == 4; }

    void SetGprsAttach()
    { _value = 5; }

    bool IsGprsAttach() const
    { return _value == 5; }

    void SetRoutingAreaUpdating()
    { _value = 6; }

    bool IsRoutingAreaUpdating() const
    { return _value == 6; }

    void SetServiceRequest()
    { _value = 7; }

    bool IsServiceRequest() const
    { return _value == 7; }

    void SetPdpContextActivation()
    { _value = 8; }

    bool IsPdpContextActivation() const
    { return _value == 8; }

    void SetPdpContextDeactivation()
    { _value = 9; }

    bool IsPdpContextDeactivation() const
    { return _value == 9; }

    void SetGprsDetach()
    { _value = 10; SetExtension(true); }

    bool IsGprsDetach()
    { return (IsExtension() && (_value == 10)); }

};



} // namespace.

#endif    // !defined(_MAP_V13_ACCESS_TYPE_H_)

