//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_M_CSI_H_)
#define _MAP_V9_M_CSI_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>

#include <map_v9_mobility_triggers.h>
#include <map_v9_service_key.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class M_CSI : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class NotificationToCSE : public its::AsnNull
    {
    public:

        NotificationToCSE() : its::AsnNull(false)
        {
            Initialize();
        }

        NotificationToCSE(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        NotificationToCSE(const NotificationToCSE& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        NotificationToCSE(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NotificationToCSE()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NotificationToCSE(*this);
        }

        virtual std::string GetName() const
        { return "NotificationToCSE"; }

    };



    class Csi_Active : public its::AsnNull
    {
    public:

        Csi_Active() : its::AsnNull(false)
        {
            Initialize();
        }

        Csi_Active(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Csi_Active(const Csi_Active& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Csi_Active(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Csi_Active()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Csi_Active(*this);
        }

        virtual std::string GetName() const
        { return "Csi_Active"; }

    };


        typedef map_v9::MobilityTriggers MobilityTriggers;


        typedef map_v9::ServiceKey ServiceKey;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    M_CSI() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    M_CSI(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    M_CSI(const M_CSI& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    M_CSI(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMobilityTriggersStaticDescription();
    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetGsmSCF_AddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetNotificationToCSEStaticDescription();
    static its::AsnDescObject* GetCsi_ActiveStaticDescription();

public:

    virtual ~M_CSI()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new M_CSI(*this);
    }

    virtual std::string GetName() const
    { return "M_CSI"; }

    void SetMobilityTriggers(MobilityTriggers* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMobilityTriggersStaticDescription());
        AddElement(0, element);
    }

    void SetMobilityTriggers(const MobilityTriggers& element)
    {
        its::AsnObject& asnObject = const_cast<MobilityTriggers&>(element);
        asnObject.SetDescription(GetMobilityTriggersStaticDescription());
        AddElement(0, element);
    }

    const MobilityTriggers& GetMobilityTriggers() const
    {
        return static_cast<const MobilityTriggers&> (ElementAt(0));
    }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(1, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(1, element);
    }

    const ServiceKey& GetServiceKey() const
    {
        return static_cast<const ServiceKey&> (ElementAt(1));
    }

    void SetGsmSCF_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGsmSCF_AddressStaticDescription());
        AddElement(2, element);
    }

    void SetGsmSCF_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetGsmSCF_AddressStaticDescription());
        AddElement(2, element);
    }

    const ISDN_AddressString& GetGsmSCF_Address() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

    void SetNotificationToCSE(NotificationToCSE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNotificationToCSEStaticDescription());
        AddElement(4, element);
    }

    void SetNotificationToCSE(const NotificationToCSE& element)
    {
        its::AsnObject& asnObject = const_cast<NotificationToCSE&>(element);
        asnObject.SetDescription(GetNotificationToCSEStaticDescription());
        AddElement(4, element);
    }

    bool OptionNotificationToCSE() const
    {
        return Contains(4);
    }

    const NotificationToCSE& GetNotificationToCSE() const
    {
        ITS_REQUIRE(OptionNotificationToCSE());
        return static_cast<const NotificationToCSE&> (ElementAt(4));
    }

    void SetCsi_Active(Csi_Active* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCsi_ActiveStaticDescription());
        AddElement(5, element);
    }

    void SetCsi_Active(const Csi_Active& element)
    {
        its::AsnObject& asnObject = const_cast<Csi_Active&>(element);
        asnObject.SetDescription(GetCsi_ActiveStaticDescription());
        AddElement(5, element);
    }

    bool OptionCsi_Active() const
    {
        return Contains(5);
    }

    const Csi_Active& GetCsi_Active() const
    {
        ITS_REQUIRE(OptionCsi_Active());
        return static_cast<const Csi_Active&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_M_CSI_H_)

