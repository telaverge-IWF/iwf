//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_H_)
#define _MAP_V9_SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v9 {



class SM_EnumeratedDeliveryFailureCause : public its::AsnEnumerated
{
public:

    SM_EnumeratedDeliveryFailureCause() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    SM_EnumeratedDeliveryFailureCause(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    SM_EnumeratedDeliveryFailureCause(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    SM_EnumeratedDeliveryFailureCause(const SM_EnumeratedDeliveryFailureCause& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    SM_EnumeratedDeliveryFailureCause(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    SM_EnumeratedDeliveryFailureCause(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SM_EnumeratedDeliveryFailureCause()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SM_EnumeratedDeliveryFailureCause(*this);
    }

    virtual std::string GetName() const
    { return "SM_EnumeratedDeliveryFailureCause"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_MEMORY_CAPACITY_EXCEEDED = 0,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_EQUIPMENT_PROTOCOL_ERROR = 1,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_EQUIPMENT_NOT_SM_EQUIPPED = 2,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_UNKNOWN_SERVICE_CENTRE = 3,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_SC_CONGESTION = 4,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_INVALID_SME_ADDRESS = 5,
        SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_SUBSCRIBER_NOT_SC_SUBSCRIBER = 6

    };

    void SetMemoryCapacityExceeded()
    { _value = 0; }

    bool IsMemoryCapacityExceeded() const
    { return _value == 0; }

    void SetEquipmentProtocolError()
    { _value = 1; }

    bool IsEquipmentProtocolError() const
    { return _value == 1; }

    void SetEquipmentNotSM_Equipped()
    { _value = 2; }

    bool IsEquipmentNotSM_Equipped() const
    { return _value == 2; }

    void SetUnknownServiceCentre()
    { _value = 3; }

    bool IsUnknownServiceCentre() const
    { return _value == 3; }

    void SetSc_Congestion()
    { _value = 4; }

    bool IsSc_Congestion() const
    { return _value == 4; }

    void SetInvalidSME_Address()
    { _value = 5; }

    bool IsInvalidSME_Address() const
    { return _value == 5; }

    void SetSubscriberNotSC_Subscriber()
    { _value = 6; }

    bool IsSubscriberNotSC_Subscriber() const
    { return _value == 6; }

};



} // namespace.

#endif    // !defined(_MAP_V9_SM_ENUMERATED_DELIVERY_FAILURE_CAUSE_H_)

