//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SS_CHARGING_DATA_H_)
#define _MAP_V1_SS_CHARGING_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnInteger.h>

#include <map_v1_ss_code.h>
#include <map_v1_ss_request.h>
#include <map_v1_charge.h>



namespace map_v1 {



class SS_ChargingData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::SS_Code SS_Code;


        typedef map_v1::SS_Request SS_Request;


        typedef map_v1::Charge Charge;


////////// End Nested Class(es) //////////

    SS_ChargingData() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    SS_ChargingData(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    SS_ChargingData(const SS_ChargingData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SS_ChargingData(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetSs_RequestStaticDescription();
    static its::AsnDescObject* GetChargeStaticDescription();

public:

    virtual ~SS_ChargingData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SS_ChargingData(*this);
    }

    virtual std::string GetName() const
    { return "SS_ChargingData"; }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    const SS_Code& GetSs_Code() const
    {
        return static_cast<const SS_Code&> (ElementAt(0));
    }

    void SetSs_Request(SS_Request* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_RequestStaticDescription());
        AddElement(1, element);
    }

    void SetSs_Request(const SS_Request& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Request&>(element);
        asnObject.SetDescription(GetSs_RequestStaticDescription());
        AddElement(1, element);
    }

    const SS_Request& GetSs_Request() const
    {
        return static_cast<const SS_Request&> (ElementAt(1));
    }

    void SetCharge(Charge* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargeStaticDescription());
        AddElement(2, element);
    }

    void SetCharge(const Charge& element)
    {
        its::AsnObject& asnObject = const_cast<Charge&>(element);
        asnObject.SetDescription(GetChargeStaticDescription());
        AddElement(2, element);
    }

    bool OptionCharge() const
    {
        return Contains(2);
    }

    const Charge& GetCharge() const
    {
        ITS_REQUIRE(OptionCharge());
        return static_cast<const Charge&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SS_CHARGING_DATA_H_)

