//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SEARCH_FOR_MOBILE_SUBSCRIBER_ARG_H_)
#define _MAP_V1_SEARCH_FOR_MOBILE_SUBSCRIBER_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v1_imsi.h>
#include <map_v1_loc_area_id.h>



namespace map_v1 {



class SearchForMobileSubscriberArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class StoredLocationArea : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class Null : public its::AsnNull
        {
        public:

            Null() : its::AsnNull(false)
            {
                Initialize();
            }

            Null(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            Null(const Null& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            Null(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~Null()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Null(*this);
            }

            virtual std::string GetName() const
            { return "Null"; }

        };


            typedef map_v1::LocAreaId LocAreaId;


    ////////// End Nested Class(es) //////////

        StoredLocationArea() : its::AsnChoice(false)
        {
            Initialize();
        }

        StoredLocationArea(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        StoredLocationArea(const StoredLocationArea& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        StoredLocationArea(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        StoredLocationArea(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetLocAreaIdStaticDescription();
        static its::AsnDescObject* GetNullStaticDescription();

    public:

        virtual ~StoredLocationArea()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new StoredLocationArea(*this);
        }

        virtual std::string GetName() const
        { return "StoredLocationArea"; }

        void SetChoiceLocAreaId(LocAreaId* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetLocAreaIdStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceLocAreaId(const LocAreaId& choice)
        {
            its::AsnObject& asnObject = const_cast<LocAreaId&>(choice);
            asnObject.SetDescription(GetLocAreaIdStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceLocAreaId() const
        {
            return Contains(GetLocAreaIdStaticDescription()->TagIdentity());
        }

        const LocAreaId& GetChoiceLocAreaId() const
        {
            ITS_REQUIRE(ChoiceLocAreaId());
            return static_cast<const LocAreaId&> (GetChoice());
        }

        void SetChoiceNull(Null* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetNullStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceNull(const Null& choice)
        {
            its::AsnObject& asnObject = const_cast<Null&>(choice);
            asnObject.SetDescription(GetNullStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceNull() const
        {
            return Contains(GetNullStaticDescription()->TagIdentity());
        }

        const Null& GetChoiceNull() const
        {
            ITS_REQUIRE(ChoiceNull());
            return static_cast<const Null&> (GetChoice());
        }

    };


        typedef map_v1::IMSI IMSI;


////////// End Nested Class(es) //////////

    SearchForMobileSubscriberArg() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    SearchForMobileSubscriberArg(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    SearchForMobileSubscriberArg(const SearchForMobileSubscriberArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SearchForMobileSubscriberArg(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetStoredLocationAreaStaticDescription();

public:

    virtual ~SearchForMobileSubscriberArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SearchForMobileSubscriberArg(*this);
    }

    virtual std::string GetName() const
    { return "SearchForMobileSubscriberArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetStoredLocationArea(StoredLocationArea* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetStoredLocationAreaStaticDescription());
        AddElement(1, element);
    }

    void SetStoredLocationArea(const StoredLocationArea& element)
    {
        its::AsnObject& asnObject = const_cast<StoredLocationArea&>(element);
        asnObject.SetDescription(GetStoredLocationAreaStaticDescription());
        AddElement(1, element);
    }

    const StoredLocationArea& GetStoredLocationArea() const
    {
        return static_cast<const StoredLocationArea&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SEARCH_FOR_MOBILE_SUBSCRIBER_ARG_H_)

