//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_LCS_QO_S_H_)
#define _MAP_V9_LCS_QO_S_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_horizontal_accuracy.h>
#include <map_v9_vertical_accuracy.h>
#include <map_v9_response_time.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class LCS_QoS : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class VerticalCoordinateRequest : public its::AsnNull
    {
    public:

        VerticalCoordinateRequest() : its::AsnNull(false)
        {
            Initialize();
        }

        VerticalCoordinateRequest(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        VerticalCoordinateRequest(const VerticalCoordinateRequest& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        VerticalCoordinateRequest(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VerticalCoordinateRequest()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VerticalCoordinateRequest(*this);
        }

        virtual std::string GetName() const
        { return "VerticalCoordinateRequest"; }

    };


        typedef map_v9::Horizontal_Accuracy Horizontal_Accuracy;


        typedef map_v9::Vertical_Accuracy Vertical_Accuracy;


        typedef map_v9::ResponseTime ResponseTime;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    LCS_QoS() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    LCS_QoS(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    LCS_QoS(const LCS_QoS& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LCS_QoS(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetHorizontal_accuracyStaticDescription();
    static its::AsnDescObject* GetVerticalCoordinateRequestStaticDescription();
    static its::AsnDescObject* GetVertical_accuracyStaticDescription();
    static its::AsnDescObject* GetResponseTimeStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~LCS_QoS()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCS_QoS(*this);
    }

    virtual std::string GetName() const
    { return "LCS_QoS"; }

    void SetHorizontal_accuracy(Horizontal_Accuracy* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHorizontal_accuracyStaticDescription());
        AddElement(0, element);
    }

    void SetHorizontal_accuracy(const Horizontal_Accuracy& element)
    {
        its::AsnObject& asnObject = const_cast<Horizontal_Accuracy&>(element);
        asnObject.SetDescription(GetHorizontal_accuracyStaticDescription());
        AddElement(0, element);
    }

    bool OptionHorizontal_accuracy() const
    {
        return Contains(0);
    }

    const Horizontal_Accuracy& GetHorizontal_accuracy() const
    {
        ITS_REQUIRE(OptionHorizontal_accuracy());
        return static_cast<const Horizontal_Accuracy&> (ElementAt(0));
    }

    void SetVerticalCoordinateRequest(VerticalCoordinateRequest* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVerticalCoordinateRequestStaticDescription());
        AddElement(1, element);
    }

    void SetVerticalCoordinateRequest(const VerticalCoordinateRequest& element)
    {
        its::AsnObject& asnObject = const_cast<VerticalCoordinateRequest&>(element);
        asnObject.SetDescription(GetVerticalCoordinateRequestStaticDescription());
        AddElement(1, element);
    }

    bool OptionVerticalCoordinateRequest() const
    {
        return Contains(1);
    }

    const VerticalCoordinateRequest& GetVerticalCoordinateRequest() const
    {
        ITS_REQUIRE(OptionVerticalCoordinateRequest());
        return static_cast<const VerticalCoordinateRequest&> (ElementAt(1));
    }

    void SetVertical_accuracy(Vertical_Accuracy* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVertical_accuracyStaticDescription());
        AddElement(2, element);
    }

    void SetVertical_accuracy(const Vertical_Accuracy& element)
    {
        its::AsnObject& asnObject = const_cast<Vertical_Accuracy&>(element);
        asnObject.SetDescription(GetVertical_accuracyStaticDescription());
        AddElement(2, element);
    }

    bool OptionVertical_accuracy() const
    {
        return Contains(2);
    }

    const Vertical_Accuracy& GetVertical_accuracy() const
    {
        ITS_REQUIRE(OptionVertical_accuracy());
        return static_cast<const Vertical_Accuracy&> (ElementAt(2));
    }

    void SetResponseTime(ResponseTime* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetResponseTimeStaticDescription());
        AddElement(3, element);
    }

    void SetResponseTime(const ResponseTime& element)
    {
        its::AsnObject& asnObject = const_cast<ResponseTime&>(element);
        asnObject.SetDescription(GetResponseTimeStaticDescription());
        AddElement(3, element);
    }

    bool OptionResponseTime() const
    {
        return Contains(3);
    }

    const ResponseTime& GetResponseTime() const
    {
        ITS_REQUIRE(OptionResponseTime());
        return static_cast<const ResponseTime&> (ElementAt(3));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(4);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_LCS_QO_S_H_)

