//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_SGSN_INTERFACE_LIST_H_)
#define _MAP_V13_SGSN_INTERFACE_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class SGSN_InterfaceList : public its::AsnBitString
{
public:

    SGSN_InterfaceList() : its::AsnBitString(false)
    {
        Initialize();
    }

    SGSN_InterfaceList(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    SGSN_InterfaceList(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    SGSN_InterfaceList(const SGSN_InterfaceList& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    SGSN_InterfaceList(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    SGSN_InterfaceList(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~SGSN_InterfaceList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SGSN_InterfaceList(*this);
    }

    virtual std::string GetName() const
    { return "SGSN_InterfaceList"; }

    void SetS6d()
    { Set(10); }

    void ResetS6d()
    { Reset(10); }

    bool IsS6dSet() const
    { return IsSet(10); }

    bool IsS6dDefined() const
    { return 10 < GetSize(); }

    void SetS4()
    { Set(9); }

    void ResetS4()
    { Reset(9); }

    bool IsS4Set() const
    { return IsSet(9); }

    bool IsS4Defined() const
    { return 9 < GetSize(); }

    void SetS3()
    { Set(8); }

    void ResetS3()
    { Reset(8); }

    bool IsS3Set() const
    { return IsSet(8); }

    bool IsS3Defined() const
    { return 8 < GetSize(); }

    void SetGe()
    { Set(7); }

    void ResetGe()
    { Reset(7); }

    bool IsGeSet() const
    { return IsSet(7); }

    bool IsGeDefined() const
    { return 7 < GetSize(); }

    void SetGs()
    { Set(6); }

    void ResetGs()
    { Reset(6); }

    bool IsGsSet() const
    { return IsSet(6); }

    bool IsGsDefined() const
    { return 6 < GetSize(); }

    void SetMap_gf()
    { Set(5); }

    void ResetMap_gf()
    { Reset(5); }

    bool IsMap_gfSet() const
    { return IsSet(5); }

    bool IsMap_gfDefined() const
    { return 5 < GetSize(); }

    void SetMap_gd()
    { Set(4); }

    void ResetMap_gd()
    { Reset(4); }

    bool IsMap_gdSet() const
    { return IsSet(4); }

    bool IsMap_gdDefined() const
    { return 4 < GetSize(); }

    void SetMap_gr()
    { Set(3); }

    void ResetMap_gr()
    { Reset(3); }

    bool IsMap_grSet() const
    { return IsSet(3); }

    bool IsMap_grDefined() const
    { return 3 < GetSize(); }

    void SetGn()
    { Set(2); }

    void ResetGn()
    { Reset(2); }

    bool IsGnSet() const
    { return IsSet(2); }

    bool IsGnDefined() const
    { return 2 < GetSize(); }

    void SetIu()
    { Set(1); }

    void ResetIu()
    { Reset(1); }

    bool IsIuSet() const
    { return IsSet(1); }

    bool IsIuDefined() const
    { return 1 < GetSize(); }

    void SetGb()
    { Set(0); }

    void ResetGb()
    { Reset(0); }

    bool IsGbSet() const
    { return IsSet(0); }

    bool IsGbDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_SGSN_INTERFACE_LIST_H_)

