//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_LCS_CLIENT_ID_H_)
#define _MAP_V9_LCS_CLIENT_ID_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <map_v9_lcs_client_type.h>
#include <map_v9_lcs_client_external_id.h>
#include <map_v9_address_string.h>
#include <map_v9_lcs_client_internal_id.h>
#include <map_v9_lcs_client_name.h>
#include <map_v9_apn.h>
#include <map_v9_lcs_requestor_id.h>



namespace map_v9 {



class LCS_ClientID : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::LCSClientType LCSClientType;


        typedef map_v9::LCSClientExternalID LCSClientExternalID;


        typedef map_v9::AddressString AddressString;


        typedef map_v9::LCSClientInternalID LCSClientInternalID;


        typedef map_v9::LCSClientName LCSClientName;


        typedef map_v9::APN APN;


        typedef map_v9::LCSRequestorID LCSRequestorID;


////////// End Nested Class(es) //////////

    LCS_ClientID() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    LCS_ClientID(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    LCS_ClientID(const LCS_ClientID& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LCS_ClientID(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetLcsClientTypeStaticDescription();
    static its::AsnDescObject* GetLcsClientExternalIDStaticDescription();
    static its::AsnDescObject* GetLcsClientDialedByMSStaticDescription();
    static its::AsnDescObject* GetLcsClientInternalIDStaticDescription();
    static its::AsnDescObject* GetLcsClientNameStaticDescription();
    static its::AsnDescObject* GetLcsAPNStaticDescription();
    static its::AsnDescObject* GetLcsRequestorIDStaticDescription();

public:

    virtual ~LCS_ClientID()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCS_ClientID(*this);
    }

    virtual std::string GetName() const
    { return "LCS_ClientID"; }

    void SetLcsClientType(LCSClientType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsClientTypeStaticDescription());
        AddElement(0, element);
    }

    void SetLcsClientType(const LCSClientType& element)
    {
        its::AsnObject& asnObject = const_cast<LCSClientType&>(element);
        asnObject.SetDescription(GetLcsClientTypeStaticDescription());
        AddElement(0, element);
    }

    const LCSClientType& GetLcsClientType() const
    {
        return static_cast<const LCSClientType&> (ElementAt(0));
    }

    void SetLcsClientExternalID(LCSClientExternalID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsClientExternalIDStaticDescription());
        AddElement(1, element);
    }

    void SetLcsClientExternalID(const LCSClientExternalID& element)
    {
        its::AsnObject& asnObject = const_cast<LCSClientExternalID&>(element);
        asnObject.SetDescription(GetLcsClientExternalIDStaticDescription());
        AddElement(1, element);
    }

    bool OptionLcsClientExternalID() const
    {
        return Contains(1);
    }

    const LCSClientExternalID& GetLcsClientExternalID() const
    {
        ITS_REQUIRE(OptionLcsClientExternalID());
        return static_cast<const LCSClientExternalID&> (ElementAt(1));
    }

    void SetLcsClientDialedByMS(AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsClientDialedByMSStaticDescription());
        AddElement(2, element);
    }

    void SetLcsClientDialedByMS(const AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(element);
        asnObject.SetDescription(GetLcsClientDialedByMSStaticDescription());
        AddElement(2, element);
    }

    bool OptionLcsClientDialedByMS() const
    {
        return Contains(2);
    }

    const AddressString& GetLcsClientDialedByMS() const
    {
        ITS_REQUIRE(OptionLcsClientDialedByMS());
        return static_cast<const AddressString&> (ElementAt(2));
    }

    void SetLcsClientInternalID(LCSClientInternalID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsClientInternalIDStaticDescription());
        AddElement(3, element);
    }

    void SetLcsClientInternalID(const LCSClientInternalID& element)
    {
        its::AsnObject& asnObject = const_cast<LCSClientInternalID&>(element);
        asnObject.SetDescription(GetLcsClientInternalIDStaticDescription());
        AddElement(3, element);
    }

    bool OptionLcsClientInternalID() const
    {
        return Contains(3);
    }

    const LCSClientInternalID& GetLcsClientInternalID() const
    {
        ITS_REQUIRE(OptionLcsClientInternalID());
        return static_cast<const LCSClientInternalID&> (ElementAt(3));
    }

    void SetLcsClientName(LCSClientName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsClientNameStaticDescription());
        AddElement(4, element);
    }

    void SetLcsClientName(const LCSClientName& element)
    {
        its::AsnObject& asnObject = const_cast<LCSClientName&>(element);
        asnObject.SetDescription(GetLcsClientNameStaticDescription());
        AddElement(4, element);
    }

    bool OptionLcsClientName() const
    {
        return Contains(4);
    }

    const LCSClientName& GetLcsClientName() const
    {
        ITS_REQUIRE(OptionLcsClientName());
        return static_cast<const LCSClientName&> (ElementAt(4));
    }

    void SetLcsAPN(APN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsAPNStaticDescription());
        AddElement(5, element);
    }

    void SetLcsAPN(const APN& element)
    {
        its::AsnObject& asnObject = const_cast<APN&>(element);
        asnObject.SetDescription(GetLcsAPNStaticDescription());
        AddElement(5, element);
    }

    bool OptionLcsAPN() const
    {
        return Contains(5);
    }

    const APN& GetLcsAPN() const
    {
        ITS_REQUIRE(OptionLcsAPN());
        return static_cast<const APN&> (ElementAt(5));
    }

    void SetLcsRequestorID(LCSRequestorID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsRequestorIDStaticDescription());
        AddElement(6, element);
    }

    void SetLcsRequestorID(const LCSRequestorID& element)
    {
        its::AsnObject& asnObject = const_cast<LCSRequestorID&>(element);
        asnObject.SetDescription(GetLcsRequestorIDStaticDescription());
        AddElement(6, element);
    }

    bool OptionLcsRequestorID() const
    {
        return Contains(6);
    }

    const LCSRequestorID& GetLcsRequestorID() const
    {
        ITS_REQUIRE(OptionLcsRequestorID());
        return static_cast<const LCSRequestorID&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_LCS_CLIENT_ID_H_)

