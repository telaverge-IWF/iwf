//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_TRACE_NE_TYPE_LIST_H_)
#define _MAP_V13_TRACE_NE_TYPE_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class TraceNE_TypeList : public its::AsnBitString
{
public:

    TraceNE_TypeList() : its::AsnBitString(false)
    {
        Initialize();
    }

    TraceNE_TypeList(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    TraceNE_TypeList(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    TraceNE_TypeList(const TraceNE_TypeList& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    TraceNE_TypeList(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    TraceNE_TypeList(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~TraceNE_TypeList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TraceNE_TypeList(*this);
    }

    virtual std::string GetName() const
    { return "TraceNE_TypeList"; }

    void SetENB()
    { Set(9); }

    void ResetENB()
    { Reset(9); }

    bool IsENBSet() const
    { return IsSet(9); }

    bool IsENBDefined() const
    { return 9 < GetSize(); }

    void SetPgw()
    { Set(8); }

    void ResetPgw()
    { Reset(8); }

    bool IsPgwSet() const
    { return IsSet(8); }

    bool IsPgwDefined() const
    { return 8 < GetSize(); }

    void SetSgw()
    { Set(7); }

    void ResetSgw()
    { Reset(7); }

    bool IsSgwSet() const
    { return IsSet(7); }

    bool IsSgwDefined() const
    { return 7 < GetSize(); }

    void SetMme()
    { Set(6); }

    void ResetMme()
    { Reset(6); }

    bool IsMmeSet() const
    { return IsSet(6); }

    bool IsMmeDefined() const
    { return 6 < GetSize(); }

    void SetBm_sc()
    { Set(5); }

    void ResetBm_sc()
    { Reset(5); }

    bool IsBm_scSet() const
    { return IsSet(5); }

    bool IsBm_scDefined() const
    { return 5 < GetSize(); }

    void SetRnc()
    { Set(4); }

    void ResetRnc()
    { Reset(4); }

    bool IsRncSet() const
    { return IsSet(4); }

    bool IsRncDefined() const
    { return 4 < GetSize(); }

    void SetGgsn()
    { Set(3); }

    void ResetGgsn()
    { Reset(3); }

    bool IsGgsnSet() const
    { return IsSet(3); }

    bool IsGgsnDefined() const
    { return 3 < GetSize(); }

    void SetSgsn()
    { Set(2); }

    void ResetSgsn()
    { Reset(2); }

    bool IsSgsnSet() const
    { return IsSet(2); }

    bool IsSgsnDefined() const
    { return 2 < GetSize(); }

    void SetMgw()
    { Set(1); }

    void ResetMgw()
    { Reset(1); }

    bool IsMgwSet() const
    { return IsSet(1); }

    bool IsMgwDefined() const
    { return 1 < GetSize(); }

    void SetMsc_s()
    { Set(0); }

    void ResetMsc_s()
    { Reset(0); }

    bool IsMsc_sSet() const
    { return IsSet(0); }

    bool IsMsc_sDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_TRACE_NE_TYPE_LIST_H_)

