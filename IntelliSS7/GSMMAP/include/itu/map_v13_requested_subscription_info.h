//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REQUESTED_SUBSCRIPTION_INFO_H_)
#define _MAP_V13_REQUESTED_SUBSCRIPTION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>

#include <map_v13_ss_for_bs_code.h>
#include <map_v13_requested_camel_subscription_info.h>
#include <map_v13_extension_container.h>
#include <map_v13_additional_requested_camel_subscription_info.h>



namespace map_v13 {



class RequestedSubscriptionInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Odb : public its::AsnNull
    {
    public:

        Odb() : its::AsnNull(false)
        {
            Initialize();
        }

        Odb(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Odb(const Odb& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Odb(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Odb()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Odb(*this);
        }

        virtual std::string GetName() const
        { return "Odb"; }

    };



    class SupportedVLR_CAMEL_Phases : public its::AsnNull
    {
    public:

        SupportedVLR_CAMEL_Phases() : its::AsnNull(false)
        {
            Initialize();
        }

        SupportedVLR_CAMEL_Phases(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SupportedVLR_CAMEL_Phases(const SupportedVLR_CAMEL_Phases& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SupportedVLR_CAMEL_Phases(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SupportedVLR_CAMEL_Phases()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SupportedVLR_CAMEL_Phases(*this);
        }

        virtual std::string GetName() const
        { return "SupportedVLR_CAMEL_Phases"; }

    };



    class SupportedSGSN_CAMEL_Phases : public its::AsnNull
    {
    public:

        SupportedSGSN_CAMEL_Phases() : its::AsnNull(false)
        {
            Initialize();
        }

        SupportedSGSN_CAMEL_Phases(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        SupportedSGSN_CAMEL_Phases(const SupportedSGSN_CAMEL_Phases& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        SupportedSGSN_CAMEL_Phases(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~SupportedSGSN_CAMEL_Phases()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new SupportedSGSN_CAMEL_Phases(*this);
        }

        virtual std::string GetName() const
        { return "SupportedSGSN_CAMEL_Phases"; }

    };



    class Msisdn_BS_List : public its::AsnNull
    {
    public:

        Msisdn_BS_List() : its::AsnNull(false)
        {
            Initialize();
        }

        Msisdn_BS_List(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Msisdn_BS_List(const Msisdn_BS_List& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Msisdn_BS_List(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Msisdn_BS_List()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Msisdn_BS_List(*this);
        }

        virtual std::string GetName() const
        { return "Msisdn_BS_List"; }

    };



    class Csg_SubscriptionDataRequested : public its::AsnNull
    {
    public:

        Csg_SubscriptionDataRequested() : its::AsnNull(false)
        {
            Initialize();
        }

        Csg_SubscriptionDataRequested(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Csg_SubscriptionDataRequested(const Csg_SubscriptionDataRequested& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Csg_SubscriptionDataRequested(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Csg_SubscriptionDataRequested()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Csg_SubscriptionDataRequested(*this);
        }

        virtual std::string GetName() const
        { return "Csg_SubscriptionDataRequested"; }

    };



    class Cw_Info : public its::AsnNull
    {
    public:

        Cw_Info() : its::AsnNull(false)
        {
            Initialize();
        }

        Cw_Info(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Cw_Info(const Cw_Info& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Cw_Info(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Cw_Info()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Cw_Info(*this);
        }

        virtual std::string GetName() const
        { return "Cw_Info"; }

    };



    class Clip_Info : public its::AsnNull
    {
    public:

        Clip_Info() : its::AsnNull(false)
        {
            Initialize();
        }

        Clip_Info(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Clip_Info(const Clip_Info& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Clip_Info(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Clip_Info()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Clip_Info(*this);
        }

        virtual std::string GetName() const
        { return "Clip_Info"; }

    };



    class Clir_Info : public its::AsnNull
    {
    public:

        Clir_Info() : its::AsnNull(false)
        {
            Initialize();
        }

        Clir_Info(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Clir_Info(const Clir_Info& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Clir_Info(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Clir_Info()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Clir_Info(*this);
        }

        virtual std::string GetName() const
        { return "Clir_Info"; }

    };



    class Hold_Info : public its::AsnNull
    {
    public:

        Hold_Info() : its::AsnNull(false)
        {
            Initialize();
        }

        Hold_Info(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Hold_Info(const Hold_Info& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Hold_Info(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Hold_Info()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Hold_Info(*this);
        }

        virtual std::string GetName() const
        { return "Hold_Info"; }

    };



    class Ect_Info : public its::AsnNull
    {
    public:

        Ect_Info() : its::AsnNull(false)
        {
            Initialize();
        }

        Ect_Info(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ect_Info(const Ect_Info& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ect_Info(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ect_Info()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ect_Info(*this);
        }

        virtual std::string GetName() const
        { return "Ect_Info"; }

    };


        typedef map_v13::SS_ForBS_Code SS_ForBS_Code;


        typedef map_v13::RequestedCAMEL_SubscriptionInfo RequestedCAMEL_SubscriptionInfo;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::AdditionalRequestedCAMEL_SubscriptionInfo AdditionalRequestedCAMEL_SubscriptionInfo;


////////// End Nested Class(es) //////////

    RequestedSubscriptionInfo() : its::AsnSequence(14, false)
    {
        Initialize();
    }

    RequestedSubscriptionInfo(its::Octets& octets) : its::AsnSequence(14, false)
    {
        Initialize();
        Decode(octets);
    }

    RequestedSubscriptionInfo(const RequestedSubscriptionInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RequestedSubscriptionInfo(its::AsnDescObject* description) : its::AsnSequence(14, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRequestedSS_InfoStaticDescription();
    static its::AsnDescObject* GetOdbStaticDescription();
    static its::AsnDescObject* GetRequestedCAMEL_SubscriptionInfoStaticDescription();
    static its::AsnDescObject* GetSupportedVLR_CAMEL_PhasesStaticDescription();
    static its::AsnDescObject* GetSupportedSGSN_CAMEL_PhasesStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription();
    static its::AsnDescObject* GetMsisdn_BS_ListStaticDescription();
    static its::AsnDescObject* GetCsg_SubscriptionDataRequestedStaticDescription();
    static its::AsnDescObject* GetCw_InfoStaticDescription();
    static its::AsnDescObject* GetClip_InfoStaticDescription();
    static its::AsnDescObject* GetClir_InfoStaticDescription();
    static its::AsnDescObject* GetHold_InfoStaticDescription();
    static its::AsnDescObject* GetEct_InfoStaticDescription();

public:

    virtual ~RequestedSubscriptionInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestedSubscriptionInfo(*this);
    }

    virtual std::string GetName() const
    { return "RequestedSubscriptionInfo"; }

    void SetRequestedSS_Info(SS_ForBS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedSS_InfoStaticDescription());
        AddElement(0, element);
    }

    void SetRequestedSS_Info(const SS_ForBS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_ForBS_Code&>(element);
        asnObject.SetDescription(GetRequestedSS_InfoStaticDescription());
        AddElement(0, element);
    }

    bool OptionRequestedSS_Info() const
    {
        return Contains(0);
    }

    const SS_ForBS_Code& GetRequestedSS_Info() const
    {
        ITS_REQUIRE(OptionRequestedSS_Info());
        return static_cast<const SS_ForBS_Code&> (ElementAt(0));
    }

    void SetOdb(Odb* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOdbStaticDescription());
        AddElement(1, element);
    }

    void SetOdb(const Odb& element)
    {
        its::AsnObject& asnObject = const_cast<Odb&>(element);
        asnObject.SetDescription(GetOdbStaticDescription());
        AddElement(1, element);
    }

    bool OptionOdb() const
    {
        return Contains(1);
    }

    const Odb& GetOdb() const
    {
        ITS_REQUIRE(OptionOdb());
        return static_cast<const Odb&> (ElementAt(1));
    }

    void SetRequestedCAMEL_SubscriptionInfo(RequestedCAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(2, element);
    }

    void SetRequestedCAMEL_SubscriptionInfo(const RequestedCAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<RequestedCAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionRequestedCAMEL_SubscriptionInfo() const
    {
        return Contains(2);
    }

    const RequestedCAMEL_SubscriptionInfo& GetRequestedCAMEL_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionRequestedCAMEL_SubscriptionInfo());
        return static_cast<const RequestedCAMEL_SubscriptionInfo&> (ElementAt(2));
    }

    void SetSupportedVLR_CAMEL_Phases(SupportedVLR_CAMEL_Phases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedVLR_CAMEL_PhasesStaticDescription());
        AddElement(3, element);
    }

    void SetSupportedVLR_CAMEL_Phases(const SupportedVLR_CAMEL_Phases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedVLR_CAMEL_Phases&>(element);
        asnObject.SetDescription(GetSupportedVLR_CAMEL_PhasesStaticDescription());
        AddElement(3, element);
    }

    bool OptionSupportedVLR_CAMEL_Phases() const
    {
        return Contains(3);
    }

    const SupportedVLR_CAMEL_Phases& GetSupportedVLR_CAMEL_Phases() const
    {
        ITS_REQUIRE(OptionSupportedVLR_CAMEL_Phases());
        return static_cast<const SupportedVLR_CAMEL_Phases&> (ElementAt(3));
    }

    void SetSupportedSGSN_CAMEL_Phases(SupportedSGSN_CAMEL_Phases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedSGSN_CAMEL_PhasesStaticDescription());
        AddElement(4, element);
    }

    void SetSupportedSGSN_CAMEL_Phases(const SupportedSGSN_CAMEL_Phases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedSGSN_CAMEL_Phases&>(element);
        asnObject.SetDescription(GetSupportedSGSN_CAMEL_PhasesStaticDescription());
        AddElement(4, element);
    }

    bool OptionSupportedSGSN_CAMEL_Phases() const
    {
        return Contains(4);
    }

    const SupportedSGSN_CAMEL_Phases& GetSupportedSGSN_CAMEL_Phases() const
    {
        ITS_REQUIRE(OptionSupportedSGSN_CAMEL_Phases());
        return static_cast<const SupportedSGSN_CAMEL_Phases&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetAdditionalRequestedCAMEL_SubscriptionInfo(AdditionalRequestedCAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(6, element);
    }

    void SetAdditionalRequestedCAMEL_SubscriptionInfo(const AdditionalRequestedCAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalRequestedCAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetAdditionalRequestedCAMEL_SubscriptionInfoStaticDescription());
        AddElement(6, element);
    }

    bool OptionAdditionalRequestedCAMEL_SubscriptionInfo() const
    {
        return Contains(6);
    }

    const AdditionalRequestedCAMEL_SubscriptionInfo& GetAdditionalRequestedCAMEL_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionAdditionalRequestedCAMEL_SubscriptionInfo());
        return static_cast<const AdditionalRequestedCAMEL_SubscriptionInfo&> (ElementAt(6));
    }

    void SetMsisdn_BS_List(Msisdn_BS_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdn_BS_ListStaticDescription());
        AddElement(7, element);
    }

    void SetMsisdn_BS_List(const Msisdn_BS_List& element)
    {
        its::AsnObject& asnObject = const_cast<Msisdn_BS_List&>(element);
        asnObject.SetDescription(GetMsisdn_BS_ListStaticDescription());
        AddElement(7, element);
    }

    bool OptionMsisdn_BS_List() const
    {
        return Contains(7);
    }

    const Msisdn_BS_List& GetMsisdn_BS_List() const
    {
        ITS_REQUIRE(OptionMsisdn_BS_List());
        return static_cast<const Msisdn_BS_List&> (ElementAt(7));
    }

    void SetCsg_SubscriptionDataRequested(Csg_SubscriptionDataRequested* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCsg_SubscriptionDataRequestedStaticDescription());
        AddElement(8, element);
    }

    void SetCsg_SubscriptionDataRequested(const Csg_SubscriptionDataRequested& element)
    {
        its::AsnObject& asnObject = const_cast<Csg_SubscriptionDataRequested&>(element);
        asnObject.SetDescription(GetCsg_SubscriptionDataRequestedStaticDescription());
        AddElement(8, element);
    }

    bool OptionCsg_SubscriptionDataRequested() const
    {
        return Contains(8);
    }

    const Csg_SubscriptionDataRequested& GetCsg_SubscriptionDataRequested() const
    {
        ITS_REQUIRE(OptionCsg_SubscriptionDataRequested());
        return static_cast<const Csg_SubscriptionDataRequested&> (ElementAt(8));
    }

    void SetCw_Info(Cw_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCw_InfoStaticDescription());
        AddElement(9, element);
    }

    void SetCw_Info(const Cw_Info& element)
    {
        its::AsnObject& asnObject = const_cast<Cw_Info&>(element);
        asnObject.SetDescription(GetCw_InfoStaticDescription());
        AddElement(9, element);
    }

    bool OptionCw_Info() const
    {
        return Contains(9);
    }

    const Cw_Info& GetCw_Info() const
    {
        ITS_REQUIRE(OptionCw_Info());
        return static_cast<const Cw_Info&> (ElementAt(9));
    }

    void SetClip_Info(Clip_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetClip_InfoStaticDescription());
        AddElement(10, element);
    }

    void SetClip_Info(const Clip_Info& element)
    {
        its::AsnObject& asnObject = const_cast<Clip_Info&>(element);
        asnObject.SetDescription(GetClip_InfoStaticDescription());
        AddElement(10, element);
    }

    bool OptionClip_Info() const
    {
        return Contains(10);
    }

    const Clip_Info& GetClip_Info() const
    {
        ITS_REQUIRE(OptionClip_Info());
        return static_cast<const Clip_Info&> (ElementAt(10));
    }

    void SetClir_Info(Clir_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetClir_InfoStaticDescription());
        AddElement(11, element);
    }

    void SetClir_Info(const Clir_Info& element)
    {
        its::AsnObject& asnObject = const_cast<Clir_Info&>(element);
        asnObject.SetDescription(GetClir_InfoStaticDescription());
        AddElement(11, element);
    }

    bool OptionClir_Info() const
    {
        return Contains(11);
    }

    const Clir_Info& GetClir_Info() const
    {
        ITS_REQUIRE(OptionClir_Info());
        return static_cast<const Clir_Info&> (ElementAt(11));
    }

    void SetHold_Info(Hold_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHold_InfoStaticDescription());
        AddElement(12, element);
    }

    void SetHold_Info(const Hold_Info& element)
    {
        its::AsnObject& asnObject = const_cast<Hold_Info&>(element);
        asnObject.SetDescription(GetHold_InfoStaticDescription());
        AddElement(12, element);
    }

    bool OptionHold_Info() const
    {
        return Contains(12);
    }

    const Hold_Info& GetHold_Info() const
    {
        ITS_REQUIRE(OptionHold_Info());
        return static_cast<const Hold_Info&> (ElementAt(12));
    }

    void SetEct_Info(Ect_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEct_InfoStaticDescription());
        AddElement(13, element);
    }

    void SetEct_Info(const Ect_Info& element)
    {
        its::AsnObject& asnObject = const_cast<Ect_Info&>(element);
        asnObject.SetDescription(GetEct_InfoStaticDescription());
        AddElement(13, element);
    }

    bool OptionEct_Info() const
    {
        return Contains(13);
    }

    const Ect_Info& GetEct_Info() const
    {
        ITS_REQUIRE(OptionEct_Info());
        return static_cast<const Ect_Info&> (ElementAt(13));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_REQUESTED_SUBSCRIPTION_INFO_H_)

