//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_CUG_INFORMATION_H_)
#define _MAP_V1_CUG_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnSequenceOf.h>
#include <AsnOctetString.h>

#include <map_v1_cug_facilities.h>
#include <map_v1_cug_feature.h>
#include <map_v1_cug_feature_list.h>



namespace map_v1 {



class CUG_Information : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Cug_FeatureOrList : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef map_v1::CUG_Feature CUG_Feature;


            typedef map_v1::CUG_FeatureList CUG_FeatureList;


    ////////// End Nested Class(es) //////////

        Cug_FeatureOrList() : its::AsnChoice(false)
        {
            Initialize();
        }

        Cug_FeatureOrList(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        Cug_FeatureOrList(const Cug_FeatureOrList& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        Cug_FeatureOrList(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        Cug_FeatureOrList(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCug_FeatureStaticDescription();
        static its::AsnDescObject* GetCug_FeatureListStaticDescription();

    public:

        virtual ~Cug_FeatureOrList()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Cug_FeatureOrList(*this);
        }

        virtual std::string GetName() const
        { return "Cug_FeatureOrList"; }

        void SetChoiceCug_Feature(CUG_Feature* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetCug_FeatureStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceCug_Feature(const CUG_Feature& choice)
        {
            its::AsnObject& asnObject = const_cast<CUG_Feature&>(choice);
            asnObject.SetDescription(GetCug_FeatureStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceCug_Feature() const
        {
            return Contains(GetCug_FeatureStaticDescription()->TagIdentity());
        }

        const CUG_Feature& GetChoiceCug_Feature() const
        {
            ITS_REQUIRE(ChoiceCug_Feature());
            return static_cast<const CUG_Feature&> (GetChoice());
        }

        void SetChoiceCug_FeatureList(CUG_FeatureList* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetCug_FeatureListStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceCug_FeatureList(const CUG_FeatureList& choice)
        {
            its::AsnObject& asnObject = const_cast<CUG_FeatureList&>(choice);
            asnObject.SetDescription(GetCug_FeatureListStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceCug_FeatureList() const
        {
            return Contains(GetCug_FeatureListStaticDescription()->TagIdentity());
        }

        const CUG_FeatureList& GetChoiceCug_FeatureList() const
        {
            ITS_REQUIRE(ChoiceCug_FeatureList());
            return static_cast<const CUG_FeatureList&> (GetChoice());
        }

    };


        typedef map_v1::CUG_Facilities CUG_Facilities;


////////// End Nested Class(es) //////////

    CUG_Information() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CUG_Information(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CUG_Information(const CUG_Information& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CUG_Information(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCug_FacilitiesStaticDescription();
    static its::AsnDescObject* GetCug_FeatureOrListStaticDescription();

public:

    virtual ~CUG_Information()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CUG_Information(*this);
    }

    virtual std::string GetName() const
    { return "CUG_Information"; }

    void SetCug_Facilities(CUG_Facilities* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_FacilitiesStaticDescription());
        AddElement(0, element);
    }

    void SetCug_Facilities(const CUG_Facilities& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Facilities&>(element);
        asnObject.SetDescription(GetCug_FacilitiesStaticDescription());
        AddElement(0, element);
    }

    const CUG_Facilities& GetCug_Facilities() const
    {
        return static_cast<const CUG_Facilities&> (ElementAt(0));
    }

    void SetCug_FeatureOrList(Cug_FeatureOrList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_FeatureOrListStaticDescription());
        AddElement(1, element);
    }

    void SetCug_FeatureOrList(const Cug_FeatureOrList& element)
    {
        its::AsnObject& asnObject = const_cast<Cug_FeatureOrList&>(element);
        asnObject.SetDescription(GetCug_FeatureOrListStaticDescription());
        AddElement(1, element);
    }

    const Cug_FeatureOrList& GetCug_FeatureOrList() const
    {
        return static_cast<const Cug_FeatureOrList&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_CUG_INFORMATION_H_)

