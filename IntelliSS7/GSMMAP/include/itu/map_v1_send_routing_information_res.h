//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SEND_ROUTING_INFORMATION_RES_H_)
#define _MAP_V1_SEND_ROUTING_INFORMATION_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v1_imsi.h>
#include <map_v1_isdn_address_string.h>
#include <map_v1_forwarding_data.h>



namespace map_v1 {



class SendRoutingInformationRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class RoutingInfo : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef map_v1::ISDN_AddressString ISDN_AddressString;


            typedef map_v1::ForwardingData ForwardingData;


    ////////// End Nested Class(es) //////////

        RoutingInfo() : its::AsnChoice(false)
        {
            Initialize();
        }

        RoutingInfo(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        RoutingInfo(const RoutingInfo& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        RoutingInfo(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        RoutingInfo(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetRoamingNumberStaticDescription();
        static its::AsnDescObject* GetForwardingDataStaticDescription();

    public:

        virtual ~RoutingInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RoutingInfo(*this);
        }

        virtual std::string GetName() const
        { return "RoutingInfo"; }

        void SetChoiceRoamingNumber(ISDN_AddressString* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetRoamingNumberStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceRoamingNumber(const ISDN_AddressString& choice)
        {
            its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(choice);
            asnObject.SetDescription(GetRoamingNumberStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceRoamingNumber() const
        {
            return Contains(GetRoamingNumberStaticDescription()->TagIdentity());
        }

        const ISDN_AddressString& GetChoiceRoamingNumber() const
        {
            ITS_REQUIRE(ChoiceRoamingNumber());
            return static_cast<const ISDN_AddressString&> (GetChoice());
        }

        void SetChoiceForwardingData(ForwardingData* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetForwardingDataStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceForwardingData(const ForwardingData& choice)
        {
            its::AsnObject& asnObject = const_cast<ForwardingData&>(choice);
            asnObject.SetDescription(GetForwardingDataStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceForwardingData() const
        {
            return Contains(GetForwardingDataStaticDescription()->TagIdentity());
        }

        const ForwardingData& GetChoiceForwardingData() const
        {
            ITS_REQUIRE(ChoiceForwardingData());
            return static_cast<const ForwardingData&> (GetChoice());
        }

    };


        typedef map_v1::IMSI IMSI;


////////// End Nested Class(es) //////////

    SendRoutingInformationRes() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    SendRoutingInformationRes(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInformationRes(const SendRoutingInformationRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInformationRes(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetRoutingInfoStaticDescription();

public:

    virtual ~SendRoutingInformationRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInformationRes(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInformationRes"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetRoutingInfo(RoutingInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    void SetRoutingInfo(const RoutingInfo& element)
    {
        its::AsnObject& asnObject = const_cast<RoutingInfo&>(element);
        asnObject.SetDescription(GetRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    const RoutingInfo& GetRoutingInfo() const
    {
        return static_cast<const RoutingInfo&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SEND_ROUTING_INFORMATION_RES_H_)

