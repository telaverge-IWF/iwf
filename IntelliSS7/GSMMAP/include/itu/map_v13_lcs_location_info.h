//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LCS_LOCATION_INFO_H_)
#define _MAP_V13_LCS_LOCATION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnBitString.h>

#include <map_v13_isdn_address_string.h>
#include <map_v13_lmsi.h>
#include <map_v13_extension_container.h>
#include <map_v13_additional_number.h>
#include <map_v13_supported_lcs_capability_sets.h>
#include <map_v13_diameter_identity.h>



namespace map_v13 {



class LCSLocationInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class GprsNodeIndicator : public its::AsnNull
    {
    public:

        GprsNodeIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        GprsNodeIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        GprsNodeIndicator(const GprsNodeIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        GprsNodeIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~GprsNodeIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new GprsNodeIndicator(*this);
        }

        virtual std::string GetName() const
        { return "GprsNodeIndicator"; }

    };


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::LMSI LMSI;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::Additional_Number Additional_Number;


        typedef map_v13::SupportedLCS_CapabilitySets SupportedLCS_CapabilitySets;


        typedef map_v13::DiameterIdentity DiameterIdentity;


////////// End Nested Class(es) //////////

    LCSLocationInfo() : its::AsnSequence(9, false)
    {
        Initialize();
    }

    LCSLocationInfo(its::Octets& octets) : its::AsnSequence(9, false)
    {
        Initialize();
        Decode(octets);
    }

    LCSLocationInfo(const LCSLocationInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LCSLocationInfo(its::AsnDescObject* description) : its::AsnSequence(9, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNetworkNode_NumberStaticDescription();
    static its::AsnDescObject* GetLmsiStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetGprsNodeIndicatorStaticDescription();
    static its::AsnDescObject* GetAdditional_NumberStaticDescription();
    static its::AsnDescObject* GetSupportedLCS_CapabilitySetsStaticDescription();
    static its::AsnDescObject* GetAdditional_LCS_CapabilitySetsStaticDescription();
    static its::AsnDescObject* GetMme_NameStaticDescription();
    static its::AsnDescObject* GetAaa_Server_NameStaticDescription();

public:

    virtual ~LCSLocationInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCSLocationInfo(*this);
    }

    virtual std::string GetName() const
    { return "LCSLocationInfo"; }

    void SetNetworkNode_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkNode_NumberStaticDescription());
        AddElement(0, element);
    }

    void SetNetworkNode_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetNetworkNode_NumberStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetNetworkNode_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetLmsi(LMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLmsiStaticDescription());
        AddElement(1, element);
    }

    void SetLmsi(const LMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LMSI&>(element);
        asnObject.SetDescription(GetLmsiStaticDescription());
        AddElement(1, element);
    }

    bool OptionLmsi() const
    {
        return Contains(1);
    }

    const LMSI& GetLmsi() const
    {
        ITS_REQUIRE(OptionLmsi());
        return static_cast<const LMSI&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetGprsNodeIndicator(GprsNodeIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGprsNodeIndicatorStaticDescription());
        AddElement(3, element);
    }

    void SetGprsNodeIndicator(const GprsNodeIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<GprsNodeIndicator&>(element);
        asnObject.SetDescription(GetGprsNodeIndicatorStaticDescription());
        AddElement(3, element);
    }

    bool OptionGprsNodeIndicator() const
    {
        return Contains(3);
    }

    const GprsNodeIndicator& GetGprsNodeIndicator() const
    {
        ITS_REQUIRE(OptionGprsNodeIndicator());
        return static_cast<const GprsNodeIndicator&> (ElementAt(3));
    }

    void SetAdditional_Number(Additional_Number* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditional_NumberStaticDescription());
        AddElement(4, element);
    }

    void SetAdditional_Number(const Additional_Number& element)
    {
        its::AsnObject& asnObject = const_cast<Additional_Number&>(element);
        asnObject.SetDescription(GetAdditional_NumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionAdditional_Number() const
    {
        return Contains(4);
    }

    const Additional_Number& GetAdditional_Number() const
    {
        ITS_REQUIRE(OptionAdditional_Number());
        return static_cast<const Additional_Number&> (ElementAt(4));
    }

    void SetSupportedLCS_CapabilitySets(SupportedLCS_CapabilitySets* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedLCS_CapabilitySetsStaticDescription());
        AddElement(5, element);
    }

    void SetSupportedLCS_CapabilitySets(const SupportedLCS_CapabilitySets& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedLCS_CapabilitySets&>(element);
        asnObject.SetDescription(GetSupportedLCS_CapabilitySetsStaticDescription());
        AddElement(5, element);
    }

    bool OptionSupportedLCS_CapabilitySets() const
    {
        return Contains(5);
    }

    const SupportedLCS_CapabilitySets& GetSupportedLCS_CapabilitySets() const
    {
        ITS_REQUIRE(OptionSupportedLCS_CapabilitySets());
        return static_cast<const SupportedLCS_CapabilitySets&> (ElementAt(5));
    }

    void SetAdditional_LCS_CapabilitySets(SupportedLCS_CapabilitySets* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditional_LCS_CapabilitySetsStaticDescription());
        AddElement(6, element);
    }

    void SetAdditional_LCS_CapabilitySets(const SupportedLCS_CapabilitySets& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedLCS_CapabilitySets&>(element);
        asnObject.SetDescription(GetAdditional_LCS_CapabilitySetsStaticDescription());
        AddElement(6, element);
    }

    bool OptionAdditional_LCS_CapabilitySets() const
    {
        return Contains(6);
    }

    const SupportedLCS_CapabilitySets& GetAdditional_LCS_CapabilitySets() const
    {
        ITS_REQUIRE(OptionAdditional_LCS_CapabilitySets());
        return static_cast<const SupportedLCS_CapabilitySets&> (ElementAt(6));
    }

    void SetMme_Name(DiameterIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMme_NameStaticDescription());
        AddElement(7, element);
    }

    void SetMme_Name(const DiameterIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<DiameterIdentity&>(element);
        asnObject.SetDescription(GetMme_NameStaticDescription());
        AddElement(7, element);
    }

    bool OptionMme_Name() const
    {
        return Contains(7);
    }

    const DiameterIdentity& GetMme_Name() const
    {
        ITS_REQUIRE(OptionMme_Name());
        return static_cast<const DiameterIdentity&> (ElementAt(7));
    }

    void SetAaa_Server_Name(DiameterIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAaa_Server_NameStaticDescription());
        AddElement(8, element);
    }

    void SetAaa_Server_Name(const DiameterIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<DiameterIdentity&>(element);
        asnObject.SetDescription(GetAaa_Server_NameStaticDescription());
        AddElement(8, element);
    }

    bool OptionAaa_Server_Name() const
    {
        return Contains(8);
    }

    const DiameterIdentity& GetAaa_Server_Name() const
    {
        ITS_REQUIRE(OptionAaa_Server_Name());
        return static_cast<const DiameterIdentity&> (ElementAt(8));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LCS_LOCATION_INFO_H_)

