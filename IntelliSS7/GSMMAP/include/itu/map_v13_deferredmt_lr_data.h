//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_DEFERREDMT_LR_DATA_H_)
#define _MAP_V13_DEFERREDMT_LR_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>
#include <AsnEnumerated.h>

#include <map_v13_deferred_location_event_type.h>
#include <map_v13_termination_cause.h>
#include <map_v13_lcs_location_info.h>



namespace map_v13 {



class Deferredmt_lrData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::DeferredLocationEventType DeferredLocationEventType;


        typedef map_v13::TerminationCause TerminationCause;


        typedef map_v13::LCSLocationInfo LCSLocationInfo;


////////// End Nested Class(es) //////////

    Deferredmt_lrData() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    Deferredmt_lrData(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    Deferredmt_lrData(const Deferredmt_lrData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    Deferredmt_lrData(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetDeferredLocationEventTypeStaticDescription();
    static its::AsnDescObject* GetTerminationCauseStaticDescription();
    static its::AsnDescObject* GetLcsLocationInfoStaticDescription();

public:

    virtual ~Deferredmt_lrData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new Deferredmt_lrData(*this);
    }

    virtual std::string GetName() const
    { return "Deferredmt_lrData"; }

    void SetDeferredLocationEventType(DeferredLocationEventType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDeferredLocationEventTypeStaticDescription());
        AddElement(0, element);
    }

    void SetDeferredLocationEventType(const DeferredLocationEventType& element)
    {
        its::AsnObject& asnObject = const_cast<DeferredLocationEventType&>(element);
        asnObject.SetDescription(GetDeferredLocationEventTypeStaticDescription());
        AddElement(0, element);
    }

    const DeferredLocationEventType& GetDeferredLocationEventType() const
    {
        return static_cast<const DeferredLocationEventType&> (ElementAt(0));
    }

    void SetTerminationCause(TerminationCause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTerminationCauseStaticDescription());
        AddElement(1, element);
    }

    void SetTerminationCause(const TerminationCause& element)
    {
        its::AsnObject& asnObject = const_cast<TerminationCause&>(element);
        asnObject.SetDescription(GetTerminationCauseStaticDescription());
        AddElement(1, element);
    }

    bool OptionTerminationCause() const
    {
        return Contains(1);
    }

    const TerminationCause& GetTerminationCause() const
    {
        ITS_REQUIRE(OptionTerminationCause());
        return static_cast<const TerminationCause&> (ElementAt(1));
    }

    void SetLcsLocationInfo(LCSLocationInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLcsLocationInfoStaticDescription());
        AddElement(2, element);
    }

    void SetLcsLocationInfo(const LCSLocationInfo& element)
    {
        its::AsnObject& asnObject = const_cast<LCSLocationInfo&>(element);
        asnObject.SetDescription(GetLcsLocationInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionLcsLocationInfo() const
    {
        return Contains(2);
    }

    const LCSLocationInfo& GetLcsLocationInfo() const
    {
        ITS_REQUIRE(OptionLcsLocationInfo());
        return static_cast<const LCSLocationInfo&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_DEFERREDMT_LR_DATA_H_)

