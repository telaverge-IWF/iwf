//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REPORTING_PLMN_H_)
#define _MAP_V13_REPORTING_PLMN_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <map_v13_plmn_id.h>
#include <map_v13_ran_technology.h>



namespace map_v13 {



class ReportingPLMN : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Ran_PeriodicLocationSupport : public its::AsnNull
    {
    public:

        Ran_PeriodicLocationSupport() : its::AsnNull(false)
        {
            Initialize();
        }

        Ran_PeriodicLocationSupport(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Ran_PeriodicLocationSupport(const Ran_PeriodicLocationSupport& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Ran_PeriodicLocationSupport(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Ran_PeriodicLocationSupport()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Ran_PeriodicLocationSupport(*this);
        }

        virtual std::string GetName() const
        { return "Ran_PeriodicLocationSupport"; }

    };


        typedef map_v13::PLMN_Id PLMN_Id;


        typedef map_v13::RAN_Technology RAN_Technology;


////////// End Nested Class(es) //////////

    ReportingPLMN() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    ReportingPLMN(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    ReportingPLMN(const ReportingPLMN& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ReportingPLMN(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPlmn_IdStaticDescription();
    static its::AsnDescObject* GetRan_TechnologyStaticDescription();
    static its::AsnDescObject* GetRan_PeriodicLocationSupportStaticDescription();

public:

    virtual ~ReportingPLMN()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ReportingPLMN(*this);
    }

    virtual std::string GetName() const
    { return "ReportingPLMN"; }

    void SetPlmn_Id(PLMN_Id* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPlmn_IdStaticDescription());
        AddElement(0, element);
    }

    void SetPlmn_Id(const PLMN_Id& element)
    {
        its::AsnObject& asnObject = const_cast<PLMN_Id&>(element);
        asnObject.SetDescription(GetPlmn_IdStaticDescription());
        AddElement(0, element);
    }

    const PLMN_Id& GetPlmn_Id() const
    {
        return static_cast<const PLMN_Id&> (ElementAt(0));
    }

    void SetRan_Technology(RAN_Technology* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRan_TechnologyStaticDescription());
        AddElement(1, element);
    }

    void SetRan_Technology(const RAN_Technology& element)
    {
        its::AsnObject& asnObject = const_cast<RAN_Technology&>(element);
        asnObject.SetDescription(GetRan_TechnologyStaticDescription());
        AddElement(1, element);
    }

    bool OptionRan_Technology() const
    {
        return Contains(1);
    }

    const RAN_Technology& GetRan_Technology() const
    {
        ITS_REQUIRE(OptionRan_Technology());
        return static_cast<const RAN_Technology&> (ElementAt(1));
    }

    void SetRan_PeriodicLocationSupport(Ran_PeriodicLocationSupport* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRan_PeriodicLocationSupportStaticDescription());
        AddElement(2, element);
    }

    void SetRan_PeriodicLocationSupport(const Ran_PeriodicLocationSupport& element)
    {
        its::AsnObject& asnObject = const_cast<Ran_PeriodicLocationSupport&>(element);
        asnObject.SetDescription(GetRan_PeriodicLocationSupportStaticDescription());
        AddElement(2, element);
    }

    bool OptionRan_PeriodicLocationSupport() const
    {
        return Contains(2);
    }

    const Ran_PeriodicLocationSupport& GetRan_PeriodicLocationSupport() const
    {
        ITS_REQUIRE(OptionRan_PeriodicLocationSupport());
        return static_cast<const Ran_PeriodicLocationSupport&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_REPORTING_PLMN_H_)

