//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_EPS_SUBSCRIPTION_DATA_H_)
#define _MAP_V13_EPS_SUBSCRIPTION_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v13_apn_oi_replacement.h>
#include <map_v13_rfsp_id.h>
#include <map_v13_ambr.h>
#include <map_v13_apn_configuration_profile.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class EPS_SubscriptionData : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Mps_CSPriority : public its::AsnNull
    {
    public:

        Mps_CSPriority() : its::AsnNull(false)
        {
            Initialize();
        }

        Mps_CSPriority(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Mps_CSPriority(const Mps_CSPriority& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Mps_CSPriority(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mps_CSPriority()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mps_CSPriority(*this);
        }

        virtual std::string GetName() const
        { return "Mps_CSPriority"; }

    };



    class Mps_EPSPriority : public its::AsnNull
    {
    public:

        Mps_EPSPriority() : its::AsnNull(false)
        {
            Initialize();
        }

        Mps_EPSPriority(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Mps_EPSPriority(const Mps_EPSPriority& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Mps_EPSPriority(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mps_EPSPriority()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mps_EPSPriority(*this);
        }

        virtual std::string GetName() const
        { return "Mps_EPSPriority"; }

    };


        typedef map_v13::APN_OI_Replacement APN_OI_Replacement;


        typedef map_v13::RFSP_ID RFSP_ID;


        typedef map_v13::AMBR AMBR;


        typedef map_v13::APN_ConfigurationProfile APN_ConfigurationProfile;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    EPS_SubscriptionData() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    EPS_SubscriptionData(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    EPS_SubscriptionData(const EPS_SubscriptionData& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    EPS_SubscriptionData(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetApn_oi_ReplacementStaticDescription();
    static its::AsnDescObject* GetRfsp_idStaticDescription();
    static its::AsnDescObject* GetAmbrStaticDescription();
    static its::AsnDescObject* GetApn_ConfigurationProfileStaticDescription();
    static its::AsnDescObject* GetStn_srStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetMps_CSPriorityStaticDescription();
    static its::AsnDescObject* GetMps_EPSPriorityStaticDescription();

public:

    virtual ~EPS_SubscriptionData()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EPS_SubscriptionData(*this);
    }

    virtual std::string GetName() const
    { return "EPS_SubscriptionData"; }

    void SetApn_oi_Replacement(APN_OI_Replacement* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApn_oi_ReplacementStaticDescription());
        AddElement(0, element);
    }

    void SetApn_oi_Replacement(const APN_OI_Replacement& element)
    {
        its::AsnObject& asnObject = const_cast<APN_OI_Replacement&>(element);
        asnObject.SetDescription(GetApn_oi_ReplacementStaticDescription());
        AddElement(0, element);
    }

    bool OptionApn_oi_Replacement() const
    {
        return Contains(0);
    }

    const APN_OI_Replacement& GetApn_oi_Replacement() const
    {
        ITS_REQUIRE(OptionApn_oi_Replacement());
        return static_cast<const APN_OI_Replacement&> (ElementAt(0));
    }

    void SetRfsp_id(RFSP_ID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRfsp_idStaticDescription());
        AddElement(1, element);
    }

    void SetRfsp_id(const RFSP_ID& element)
    {
        its::AsnObject& asnObject = const_cast<RFSP_ID&>(element);
        asnObject.SetDescription(GetRfsp_idStaticDescription());
        AddElement(1, element);
    }

    bool OptionRfsp_id() const
    {
        return Contains(1);
    }

    const RFSP_ID& GetRfsp_id() const
    {
        ITS_REQUIRE(OptionRfsp_id());
        return static_cast<const RFSP_ID&> (ElementAt(1));
    }

    void SetAmbr(AMBR* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAmbrStaticDescription());
        AddElement(2, element);
    }

    void SetAmbr(const AMBR& element)
    {
        its::AsnObject& asnObject = const_cast<AMBR&>(element);
        asnObject.SetDescription(GetAmbrStaticDescription());
        AddElement(2, element);
    }

    bool OptionAmbr() const
    {
        return Contains(2);
    }

    const AMBR& GetAmbr() const
    {
        ITS_REQUIRE(OptionAmbr());
        return static_cast<const AMBR&> (ElementAt(2));
    }

    void SetApn_ConfigurationProfile(APN_ConfigurationProfile* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApn_ConfigurationProfileStaticDescription());
        AddElement(3, element);
    }

    void SetApn_ConfigurationProfile(const APN_ConfigurationProfile& element)
    {
        its::AsnObject& asnObject = const_cast<APN_ConfigurationProfile&>(element);
        asnObject.SetDescription(GetApn_ConfigurationProfileStaticDescription());
        AddElement(3, element);
    }

    bool OptionApn_ConfigurationProfile() const
    {
        return Contains(3);
    }

    const APN_ConfigurationProfile& GetApn_ConfigurationProfile() const
    {
        ITS_REQUIRE(OptionApn_ConfigurationProfile());
        return static_cast<const APN_ConfigurationProfile&> (ElementAt(3));
    }

    void SetStn_sr(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetStn_srStaticDescription());
        AddElement(4, element);
    }

    void SetStn_sr(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetStn_srStaticDescription());
        AddElement(4, element);
    }

    bool OptionStn_sr() const
    {
        return Contains(4);
    }

    const ISDN_AddressString& GetStn_sr() const
    {
        ITS_REQUIRE(OptionStn_sr());
        return static_cast<const ISDN_AddressString&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetMps_CSPriority(Mps_CSPriority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMps_CSPriorityStaticDescription());
        AddElement(6, element);
    }

    void SetMps_CSPriority(const Mps_CSPriority& element)
    {
        its::AsnObject& asnObject = const_cast<Mps_CSPriority&>(element);
        asnObject.SetDescription(GetMps_CSPriorityStaticDescription());
        AddElement(6, element);
    }

    bool OptionMps_CSPriority() const
    {
        return Contains(6);
    }

    const Mps_CSPriority& GetMps_CSPriority() const
    {
        ITS_REQUIRE(OptionMps_CSPriority());
        return static_cast<const Mps_CSPriority&> (ElementAt(6));
    }

    void SetMps_EPSPriority(Mps_EPSPriority* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMps_EPSPriorityStaticDescription());
        AddElement(7, element);
    }

    void SetMps_EPSPriority(const Mps_EPSPriority& element)
    {
        its::AsnObject& asnObject = const_cast<Mps_EPSPriority&>(element);
        asnObject.SetDescription(GetMps_EPSPriorityStaticDescription());
        AddElement(7, element);
    }

    bool OptionMps_EPSPriority() const
    {
        return Contains(7);
    }

    const Mps_EPSPriority& GetMps_EPSPriority() const
    {
        ITS_REQUIRE(OptionMps_EPSPriority());
        return static_cast<const Mps_EPSPriority&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_EPS_SUBSCRIPTION_DATA_H_)

