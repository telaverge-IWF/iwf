//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_MME_EVENT_LIST_H_)
#define _MAP_V13_MME_EVENT_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v13 {



class MME_EventList : public its::AsnBitString
{
public:

    MME_EventList() : its::AsnBitString(false)
    {
        Initialize();
    }

    MME_EventList(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    MME_EventList(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    MME_EventList(const MME_EventList& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    MME_EventList(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    MME_EventList(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~MME_EventList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MME_EventList(*this);
    }

    virtual std::string GetName() const
    { return "MME_EventList"; }

    void SetHandover()
    { Set(5); }

    void ResetHandover()
    { Reset(5); }

    bool IsHandoverSet() const
    { return IsSet(5); }

    bool IsHandoverDefined() const
    { return 5 < GetSize(); }

    void SetBearerActivationModificationDeletion()
    { Set(4); }

    void ResetBearerActivationModificationDeletion()
    { Reset(4); }

    bool IsBearerActivationModificationDeletionSet() const
    { return IsSet(4); }

    bool IsBearerActivationModificationDeletionDefined() const
    { return 4 < GetSize(); }

    void SetUe_initiatedPDNdisconnection()
    { Set(3); }

    void ResetUe_initiatedPDNdisconnection()
    { Reset(3); }

    bool IsUe_initiatedPDNdisconnectionSet() const
    { return IsSet(3); }

    bool IsUe_initiatedPDNdisconnectionDefined() const
    { return 3 < GetSize(); }

    void SetInitialAttachTrackingAreaUpdateDetach()
    { Set(2); }

    void ResetInitialAttachTrackingAreaUpdateDetach()
    { Reset(2); }

    bool IsInitialAttachTrackingAreaUpdateDetachSet() const
    { return IsSet(2); }

    bool IsInitialAttachTrackingAreaUpdateDetachDefined() const
    { return 2 < GetSize(); }

    void SetServiceRequestts()
    { Set(1); }

    void ResetServiceRequestts()
    { Reset(1); }

    bool IsServiceRequesttsSet() const
    { return IsSet(1); }

    bool IsServiceRequesttsDefined() const
    { return 1 < GetSize(); }

    void SetUe_initiatedPDNconectivityRequest()
    { Set(0); }

    void ResetUe_initiatedPDNconectivityRequest()
    { Reset(0); }

    bool IsUe_initiatedPDNconectivityRequestSet() const
    { return IsSet(0); }

    bool IsUe_initiatedPDNconectivityRequestDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V13_MME_EVENT_LIST_H_)

