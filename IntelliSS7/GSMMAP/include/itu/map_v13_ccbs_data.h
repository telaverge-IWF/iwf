//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CCBS_DATA_H_)
#define _MAP_V13_CCBS_DATA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnBitString.h>

#include <map_v13_ccbs_feature.h>
#include <map_v13_isdn_address_string.h>
#include <map_v13_service_indicator.h>
#include <map_v13_external_signal_info.h>



namespace map_v13 {



class CCBS_Data : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::CCBS_Feature CCBS_Feature;


        typedef map_v13::ISDN_AddressString ISDN_AddressString;


        typedef map_v13::ServiceIndicator ServiceIndicator;


        typedef map_v13::ExternalSignalInfo ExternalSignalInfo;


////////// End Nested Class(es) //////////

    CCBS_Data() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    CCBS_Data(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    CCBS_Data(const CCBS_Data& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CCBS_Data(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCcbs_FeatureStaticDescription();
    static its::AsnDescObject* GetTranslatedB_NumberStaticDescription();
    static its::AsnDescObject* GetServiceIndicatorStaticDescription();
    static its::AsnDescObject* GetCallInfoStaticDescription();
    static its::AsnDescObject* GetNetworkSignalInfoStaticDescription();

public:

    virtual ~CCBS_Data()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CCBS_Data(*this);
    }

    virtual std::string GetName() const
    { return "CCBS_Data"; }

    void SetCcbs_Feature(CCBS_Feature* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_FeatureStaticDescription());
        AddElement(0, element);
    }

    void SetCcbs_Feature(const CCBS_Feature& element)
    {
        its::AsnObject& asnObject = const_cast<CCBS_Feature&>(element);
        asnObject.SetDescription(GetCcbs_FeatureStaticDescription());
        AddElement(0, element);
    }

    const CCBS_Feature& GetCcbs_Feature() const
    {
        return static_cast<const CCBS_Feature&> (ElementAt(0));
    }

    void SetTranslatedB_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTranslatedB_NumberStaticDescription());
        AddElement(1, element);
    }

    void SetTranslatedB_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetTranslatedB_NumberStaticDescription());
        AddElement(1, element);
    }

    const ISDN_AddressString& GetTranslatedB_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetServiceIndicator(ServiceIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceIndicatorStaticDescription());
        AddElement(2, element);
    }

    void SetServiceIndicator(const ServiceIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceIndicator&>(element);
        asnObject.SetDescription(GetServiceIndicatorStaticDescription());
        AddElement(2, element);
    }

    bool OptionServiceIndicator() const
    {
        return Contains(2);
    }

    const ServiceIndicator& GetServiceIndicator() const
    {
        ITS_REQUIRE(OptionServiceIndicator());
        return static_cast<const ServiceIndicator&> (ElementAt(2));
    }

    void SetCallInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallInfoStaticDescription());
        AddElement(3, element);
    }

    void SetCallInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetCallInfoStaticDescription());
        AddElement(3, element);
    }

    const ExternalSignalInfo& GetCallInfo() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(3));
    }

    void SetNetworkSignalInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(4, element);
    }

    void SetNetworkSignalInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(4, element);
    }

    const ExternalSignalInfo& GetNetworkSignalInfo() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CCBS_DATA_H_)

