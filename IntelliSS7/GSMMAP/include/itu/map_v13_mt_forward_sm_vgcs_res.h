//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_MT_FORWARD_SM_VGCS_RES_H_)
#define _MAP_V13_MT_FORWARD_SM_VGCS_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnSequenceOf.h>

#include <map_v13_signal_info.h>
#include <map_v13_dispatcher_list.h>
#include <map_v13_extension_container.h>



namespace map_v13 {



class MT_ForwardSM_VGCS_Res : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class OngoingCall : public its::AsnNull
    {
    public:

        OngoingCall() : its::AsnNull(false)
        {
            Initialize();
        }

        OngoingCall(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        OngoingCall(const OngoingCall& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        OngoingCall(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~OngoingCall()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OngoingCall(*this);
        }

        virtual std::string GetName() const
        { return "OngoingCall"; }

    };


        typedef map_v13::SignalInfo SignalInfo;


        typedef map_v13::DispatcherList DispatcherList;


        typedef map_v13::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    MT_ForwardSM_VGCS_Res() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    MT_ForwardSM_VGCS_Res(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    MT_ForwardSM_VGCS_Res(const MT_ForwardSM_VGCS_Res& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MT_ForwardSM_VGCS_Res(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSm_RP_UIStaticDescription();
    static its::AsnDescObject* GetDispatcherListStaticDescription();
    static its::AsnDescObject* GetOngoingCallStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~MT_ForwardSM_VGCS_Res()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MT_ForwardSM_VGCS_Res(*this);
    }

    virtual std::string GetName() const
    { return "MT_ForwardSM_VGCS_Res"; }

    void SetSm_RP_UI(SignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(0, element);
    }

    void SetSm_RP_UI(const SignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SignalInfo&>(element);
        asnObject.SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(0, element);
    }

    bool OptionSm_RP_UI() const
    {
        return Contains(0);
    }

    const SignalInfo& GetSm_RP_UI() const
    {
        ITS_REQUIRE(OptionSm_RP_UI());
        return static_cast<const SignalInfo&> (ElementAt(0));
    }

    void SetDispatcherList(DispatcherList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDispatcherListStaticDescription());
        AddElement(1, element);
    }

    void SetDispatcherList(const DispatcherList& element)
    {
        its::AsnObject& asnObject = const_cast<DispatcherList&>(element);
        asnObject.SetDescription(GetDispatcherListStaticDescription());
        AddElement(1, element);
    }

    bool OptionDispatcherList() const
    {
        return Contains(1);
    }

    const DispatcherList& GetDispatcherList() const
    {
        ITS_REQUIRE(OptionDispatcherList());
        return static_cast<const DispatcherList&> (ElementAt(1));
    }

    void SetOngoingCall(OngoingCall* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOngoingCallStaticDescription());
        AddElement(2, element);
    }

    void SetOngoingCall(const OngoingCall& element)
    {
        its::AsnObject& asnObject = const_cast<OngoingCall&>(element);
        asnObject.SetDescription(GetOngoingCallStaticDescription());
        AddElement(2, element);
    }

    bool OptionOngoingCall() const
    {
        return Contains(2);
    }

    const OngoingCall& GetOngoingCall() const
    {
        ITS_REQUIRE(OptionOngoingCall());
        return static_cast<const OngoingCall&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_MT_FORWARD_SM_VGCS_RES_H_)

