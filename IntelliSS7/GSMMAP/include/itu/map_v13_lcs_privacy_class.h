//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LCS_PRIVACY_CLASS_H_)
#define _MAP_V13_LCS_PRIVACY_CLASS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v13_ss_code.h>
#include <map_v13_ext_ss_status.h>
#include <map_v13_notification_to_ms_user.h>
#include <map_v13_external_client_list.h>
#include <map_v13_plmn_client_list.h>
#include <map_v13_extension_container.h>
#include <map_v13_ext_external_client_list.h>
#include <map_v13_service_type_list.h>



namespace map_v13 {



class LCS_PrivacyClass : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::SS_Code SS_Code;


        typedef map_v13::Ext_SS_Status Ext_SS_Status;


        typedef map_v13::NotificationToMSUser NotificationToMSUser;


        typedef map_v13::ExternalClientList ExternalClientList;


        typedef map_v13::PLMNClientList PLMNClientList;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::Ext_ExternalClientList Ext_ExternalClientList;


        typedef map_v13::ServiceTypeList ServiceTypeList;


////////// End Nested Class(es) //////////

    LCS_PrivacyClass() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    LCS_PrivacyClass(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    LCS_PrivacyClass(const LCS_PrivacyClass& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LCS_PrivacyClass(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_CodeStaticDescription();
    static its::AsnDescObject* GetSs_StatusStaticDescription();
    static its::AsnDescObject* GetNotificationToMSUserStaticDescription();
    static its::AsnDescObject* GetExternalClientListStaticDescription();
    static its::AsnDescObject* GetPlmnClientListStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetExt_externalClientListStaticDescription();
    static its::AsnDescObject* GetServiceTypeListStaticDescription();

public:

    virtual ~LCS_PrivacyClass()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LCS_PrivacyClass(*this);
    }

    virtual std::string GetName() const
    { return "LCS_PrivacyClass"; }

    void SetSs_Code(SS_Code* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    void SetSs_Code(const SS_Code& element)
    {
        its::AsnObject& asnObject = const_cast<SS_Code&>(element);
        asnObject.SetDescription(GetSs_CodeStaticDescription());
        AddElement(0, element);
    }

    const SS_Code& GetSs_Code() const
    {
        return static_cast<const SS_Code&> (ElementAt(0));
    }

    void SetSs_Status(Ext_SS_Status* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    void SetSs_Status(const Ext_SS_Status& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_SS_Status&>(element);
        asnObject.SetDescription(GetSs_StatusStaticDescription());
        AddElement(1, element);
    }

    const Ext_SS_Status& GetSs_Status() const
    {
        return static_cast<const Ext_SS_Status&> (ElementAt(1));
    }

    void SetNotificationToMSUser(NotificationToMSUser* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNotificationToMSUserStaticDescription());
        AddElement(2, element);
    }

    void SetNotificationToMSUser(const NotificationToMSUser& element)
    {
        its::AsnObject& asnObject = const_cast<NotificationToMSUser&>(element);
        asnObject.SetDescription(GetNotificationToMSUserStaticDescription());
        AddElement(2, element);
    }

    bool OptionNotificationToMSUser() const
    {
        return Contains(2);
    }

    const NotificationToMSUser& GetNotificationToMSUser() const
    {
        ITS_REQUIRE(OptionNotificationToMSUser());
        return static_cast<const NotificationToMSUser&> (ElementAt(2));
    }

    void SetExternalClientList(ExternalClientList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExternalClientListStaticDescription());
        AddElement(3, element);
    }

    void SetExternalClientList(const ExternalClientList& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalClientList&>(element);
        asnObject.SetDescription(GetExternalClientListStaticDescription());
        AddElement(3, element);
    }

    bool OptionExternalClientList() const
    {
        return Contains(3);
    }

    const ExternalClientList& GetExternalClientList() const
    {
        ITS_REQUIRE(OptionExternalClientList());
        return static_cast<const ExternalClientList&> (ElementAt(3));
    }

    void SetPlmnClientList(PLMNClientList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPlmnClientListStaticDescription());
        AddElement(4, element);
    }

    void SetPlmnClientList(const PLMNClientList& element)
    {
        its::AsnObject& asnObject = const_cast<PLMNClientList&>(element);
        asnObject.SetDescription(GetPlmnClientListStaticDescription());
        AddElement(4, element);
    }

    bool OptionPlmnClientList() const
    {
        return Contains(4);
    }

    const PLMNClientList& GetPlmnClientList() const
    {
        ITS_REQUIRE(OptionPlmnClientList());
        return static_cast<const PLMNClientList&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

    void SetExt_externalClientList(Ext_ExternalClientList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExt_externalClientListStaticDescription());
        AddElement(6, element);
    }

    void SetExt_externalClientList(const Ext_ExternalClientList& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_ExternalClientList&>(element);
        asnObject.SetDescription(GetExt_externalClientListStaticDescription());
        AddElement(6, element);
    }

    bool OptionExt_externalClientList() const
    {
        return Contains(6);
    }

    const Ext_ExternalClientList& GetExt_externalClientList() const
    {
        ITS_REQUIRE(OptionExt_externalClientList());
        return static_cast<const Ext_ExternalClientList&> (ElementAt(6));
    }

    void SetServiceTypeList(ServiceTypeList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceTypeListStaticDescription());
        AddElement(7, element);
    }

    void SetServiceTypeList(const ServiceTypeList& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceTypeList&>(element);
        asnObject.SetDescription(GetServiceTypeListStaticDescription());
        AddElement(7, element);
    }

    bool OptionServiceTypeList() const
    {
        return Contains(7);
    }

    const ServiceTypeList& GetServiceTypeList() const
    {
        ITS_REQUIRE(OptionServiceTypeList());
        return static_cast<const ServiceTypeList&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LCS_PRIVACY_CLASS_H_)

