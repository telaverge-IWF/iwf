//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REPORTING_PLMN_LIST_H_)
#define _MAP_V13_REPORTING_PLMN_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>

#include <map_v13_plmn_list.h>



namespace map_v13 {



class ReportingPLMNList : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Plmn_ListPrioritized : public its::AsnNull
    {
    public:

        Plmn_ListPrioritized() : its::AsnNull(false)
        {
            Initialize();
        }

        Plmn_ListPrioritized(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Plmn_ListPrioritized(const Plmn_ListPrioritized& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Plmn_ListPrioritized(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Plmn_ListPrioritized()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Plmn_ListPrioritized(*this);
        }

        virtual std::string GetName() const
        { return "Plmn_ListPrioritized"; }

    };


        typedef map_v13::PLMNList PLMNList;


////////// End Nested Class(es) //////////

    ReportingPLMNList() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    ReportingPLMNList(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    ReportingPLMNList(const ReportingPLMNList& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ReportingPLMNList(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPlmn_ListPrioritizedStaticDescription();
    static its::AsnDescObject* GetPlmn_ListStaticDescription();

public:

    virtual ~ReportingPLMNList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ReportingPLMNList(*this);
    }

    virtual std::string GetName() const
    { return "ReportingPLMNList"; }

    void SetPlmn_ListPrioritized(Plmn_ListPrioritized* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPlmn_ListPrioritizedStaticDescription());
        AddElement(0, element);
    }

    void SetPlmn_ListPrioritized(const Plmn_ListPrioritized& element)
    {
        its::AsnObject& asnObject = const_cast<Plmn_ListPrioritized&>(element);
        asnObject.SetDescription(GetPlmn_ListPrioritizedStaticDescription());
        AddElement(0, element);
    }

    bool OptionPlmn_ListPrioritized() const
    {
        return Contains(0);
    }

    const Plmn_ListPrioritized& GetPlmn_ListPrioritized() const
    {
        ITS_REQUIRE(OptionPlmn_ListPrioritized());
        return static_cast<const Plmn_ListPrioritized&> (ElementAt(0));
    }

    void SetPlmn_List(PLMNList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPlmn_ListStaticDescription());
        AddElement(1, element);
    }

    void SetPlmn_List(const PLMNList& element)
    {
        its::AsnObject& asnObject = const_cast<PLMNList&>(element);
        asnObject.SetDescription(GetPlmn_ListStaticDescription());
        AddElement(1, element);
    }

    const PLMNList& GetPlmn_List() const
    {
        return static_cast<const PLMNList&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_REPORTING_PLMN_LIST_H_)

