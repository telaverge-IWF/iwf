//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_TERMINATION_CAUSE_H_)
#define _MAP_V13_TERMINATION_CAUSE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class TerminationCause : public its::AsnEnumerated
{
public:

    TerminationCause() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    TerminationCause(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    TerminationCause(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    TerminationCause(const TerminationCause& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    TerminationCause(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    TerminationCause(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~TerminationCause()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TerminationCause(*this);
    }

    virtual std::string GetName() const
    { return "TerminationCause"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        TERMINATION_CAUSE_NORMAL = 0,
        TERMINATION_CAUSE_ERRORUNDEFINED = 1,
        TERMINATION_CAUSE_INTERNAL_TIMEOUT = 2,
        TERMINATION_CAUSE_CONGESTION = 3,
        TERMINATION_CAUSE_MT_LR_RESTART = 4,
        TERMINATION_CAUSE_PRIVACY_VIOLATION = 5
,
        TERMINATION_CAUSE_SHAPE_OF_LOCATION_ESTIMATE_NOT_SUPPORTED = 6,
        TERMINATION_CAUSE_SUBSCRIBER_TERMINATION = 7,
        TERMINATION_CAUSE_UE_TERMINATION = 8,
        TERMINATION_CAUSE_NETWORK_TERMINATION = 9
    };

    void SetNormal()
    { _value = 0; }

    bool IsNormal() const
    { return _value == 0; }

    void SetErrorundefined()
    { _value = 1; }

    bool IsErrorundefined() const
    { return _value == 1; }

    void SetInternalTimeout()
    { _value = 2; }

    bool IsInternalTimeout() const
    { return _value == 2; }

    void SetCongestion()
    { _value = 3; }

    bool IsCongestion() const
    { return _value == 3; }

    void SetMt_lrRestart()
    { _value = 4; }

    bool IsMt_lrRestart() const
    { return _value == 4; }

    void SetPrivacyViolation()
    { _value = 5; }

    bool IsPrivacyViolation() const
    { return _value == 5; }

    void SetShapeOfLocationEstimateNotSupported()
    { _value = 6; SetExtension(true); }

    bool IsShapeOfLocationEstimateNotSupported()
    { return (IsExtension() && (_value == 6)); }

    void SetSubscriberTermination()
    { _value = 7; SetExtension(true); }

    bool IsSubscriberTermination()
    { return (IsExtension() && (_value == 7)); }

    void SetUETermination()
    { _value = 8; SetExtension(true); }

    bool IsUETermination()
    { return (IsExtension() && (_value == 8)); }

    void SetNetworkTermination()
    { _value = 9; SetExtension(true); }

    bool IsNetworkTermination()
    { return (IsExtension() && (_value == 9)); }

};



} // namespace.

#endif    // !defined(_MAP_V13_TERMINATION_CAUSE_H_)

