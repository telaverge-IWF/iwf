//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CAMEL_INFO_H_)
#define _MAP_V13_CAMEL_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnBitString.h>

#include <map_v13_supported_camel_phases.h>
#include <map_v13_extension_container.h>
#include <map_v13_offered_camel4cs_is.h>



namespace map_v13 {



class CamelInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Suppress_T_CSI : public its::AsnNull
    {
    public:

        Suppress_T_CSI() : its::AsnNull(false)
        {
            Initialize();
        }

        Suppress_T_CSI(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Suppress_T_CSI(const Suppress_T_CSI& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Suppress_T_CSI(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Suppress_T_CSI()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Suppress_T_CSI(*this);
        }

        virtual std::string GetName() const
        { return "Suppress_T_CSI"; }

    };


        typedef map_v13::SupportedCamelPhases SupportedCamelPhases;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::OfferedCamel4CSIs OfferedCamel4CSIs;


////////// End Nested Class(es) //////////

    CamelInfo() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    CamelInfo(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    CamelInfo(const CamelInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CamelInfo(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSupportedCamelPhasesStaticDescription();
    static its::AsnDescObject* GetSuppress_T_CSIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetOfferedCamel4CSIsStaticDescription();

public:

    virtual ~CamelInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CamelInfo(*this);
    }

    virtual std::string GetName() const
    { return "CamelInfo"; }

    void SetSupportedCamelPhases(SupportedCamelPhases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedCamelPhasesStaticDescription());
        AddElement(0, element);
    }

    void SetSupportedCamelPhases(const SupportedCamelPhases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedCamelPhases&>(element);
        asnObject.SetDescription(GetSupportedCamelPhasesStaticDescription());
        AddElement(0, element);
    }

    const SupportedCamelPhases& GetSupportedCamelPhases() const
    {
        return static_cast<const SupportedCamelPhases&> (ElementAt(0));
    }

    void SetSuppress_T_CSI(Suppress_T_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSuppress_T_CSIStaticDescription());
        AddElement(1, element);
    }

    void SetSuppress_T_CSI(const Suppress_T_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<Suppress_T_CSI&>(element);
        asnObject.SetDescription(GetSuppress_T_CSIStaticDescription());
        AddElement(1, element);
    }

    bool OptionSuppress_T_CSI() const
    {
        return Contains(1);
    }

    const Suppress_T_CSI& GetSuppress_T_CSI() const
    {
        ITS_REQUIRE(OptionSuppress_T_CSI());
        return static_cast<const Suppress_T_CSI&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetOfferedCamel4CSIs(OfferedCamel4CSIs* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOfferedCamel4CSIsStaticDescription());
        AddElement(3, element);
    }

    void SetOfferedCamel4CSIs(const OfferedCamel4CSIs& element)
    {
        its::AsnObject& asnObject = const_cast<OfferedCamel4CSIs&>(element);
        asnObject.SetDescription(GetOfferedCamel4CSIsStaticDescription());
        AddElement(3, element);
    }

    bool OptionOfferedCamel4CSIs() const
    {
        return Contains(3);
    }

    const OfferedCamel4CSIs& GetOfferedCamel4CSIs() const
    {
        ITS_REQUIRE(OptionOfferedCamel4CSIs());
        return static_cast<const OfferedCamel4CSIs&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CAMEL_INFO_H_)

