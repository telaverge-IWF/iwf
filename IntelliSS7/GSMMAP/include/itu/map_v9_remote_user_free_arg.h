//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_REMOTE_USER_FREE_ARG_H_)
#define _MAP_V9_REMOTE_USER_FREE_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>

#include <map_v9_imsi.h>
#include <map_v9_external_signal_info.h>
#include <map_v9_ccbs_feature.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_alerting_pattern.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class RemoteUserFreeArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class ReplaceB_Number : public its::AsnNull
    {
    public:

        ReplaceB_Number() : its::AsnNull(false)
        {
            Initialize();
        }

        ReplaceB_Number(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ReplaceB_Number(const ReplaceB_Number& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ReplaceB_Number(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ReplaceB_Number()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ReplaceB_Number(*this);
        }

        virtual std::string GetName() const
        { return "ReplaceB_Number"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::ExternalSignalInfo ExternalSignalInfo;


        typedef map_v9::CCBS_Feature CCBS_Feature;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::AlertingPattern AlertingPattern;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    RemoteUserFreeArg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    RemoteUserFreeArg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    RemoteUserFreeArg(const RemoteUserFreeArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RemoteUserFreeArg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetCallInfoStaticDescription();
    static its::AsnDescObject* GetCcbs_FeatureStaticDescription();
    static its::AsnDescObject* GetTranslatedB_NumberStaticDescription();
    static its::AsnDescObject* GetReplaceB_NumberStaticDescription();
    static its::AsnDescObject* GetAlertingPatternStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~RemoteUserFreeArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RemoteUserFreeArg(*this);
    }

    virtual std::string GetName() const
    { return "RemoteUserFreeArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetCallInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallInfoStaticDescription());
        AddElement(1, element);
    }

    void SetCallInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetCallInfoStaticDescription());
        AddElement(1, element);
    }

    const ExternalSignalInfo& GetCallInfo() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(1));
    }

    void SetCcbs_Feature(CCBS_Feature* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_FeatureStaticDescription());
        AddElement(2, element);
    }

    void SetCcbs_Feature(const CCBS_Feature& element)
    {
        its::AsnObject& asnObject = const_cast<CCBS_Feature&>(element);
        asnObject.SetDescription(GetCcbs_FeatureStaticDescription());
        AddElement(2, element);
    }

    const CCBS_Feature& GetCcbs_Feature() const
    {
        return static_cast<const CCBS_Feature&> (ElementAt(2));
    }

    void SetTranslatedB_Number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTranslatedB_NumberStaticDescription());
        AddElement(3, element);
    }

    void SetTranslatedB_Number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetTranslatedB_NumberStaticDescription());
        AddElement(3, element);
    }

    const ISDN_AddressString& GetTranslatedB_Number() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(3));
    }

    void SetReplaceB_Number(ReplaceB_Number* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReplaceB_NumberStaticDescription());
        AddElement(4, element);
    }

    void SetReplaceB_Number(const ReplaceB_Number& element)
    {
        its::AsnObject& asnObject = const_cast<ReplaceB_Number&>(element);
        asnObject.SetDescription(GetReplaceB_NumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionReplaceB_Number() const
    {
        return Contains(4);
    }

    const ReplaceB_Number& GetReplaceB_Number() const
    {
        ITS_REQUIRE(OptionReplaceB_Number());
        return static_cast<const ReplaceB_Number&> (ElementAt(4));
    }

    void SetAlertingPattern(AlertingPattern* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAlertingPatternStaticDescription());
        AddElement(5, element);
    }

    void SetAlertingPattern(const AlertingPattern& element)
    {
        its::AsnObject& asnObject = const_cast<AlertingPattern&>(element);
        asnObject.SetDescription(GetAlertingPatternStaticDescription());
        AddElement(5, element);
    }

    bool OptionAlertingPattern() const
    {
        return Contains(5);
    }

    const AlertingPattern& GetAlertingPattern() const
    {
        ITS_REQUIRE(OptionAlertingPattern());
        return static_cast<const AlertingPattern&> (ElementAt(5));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(6, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(6);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_REMOTE_USER_FREE_ARG_H_)

