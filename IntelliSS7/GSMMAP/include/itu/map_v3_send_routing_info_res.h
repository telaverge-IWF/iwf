//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_SEND_ROUTING_INFO_RES_H_)
#define _MAP_V3_SEND_ROUTING_INFO_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnSequenceOf.h>

#include <map_v3_imsi.h>
#include <map_v3_extended_routing_info.h>
#include <map_v3_cug_check_info.h>
#include <map_v3_subscriber_info.h>
#include <map_v3_ss_list.h>
#include <map_v3_ext_basic_service_code.h>
#include <map_v3_isdn_address_string.h>
#include <map_v3_extension_container.h>



namespace map_v3 {



class SendRoutingInfoRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class CugSubscriptionFlag : public its::AsnNull
    {
    public:

        CugSubscriptionFlag() : its::AsnNull(false)
        {
            Initialize();
        }

        CugSubscriptionFlag(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CugSubscriptionFlag(const CugSubscriptionFlag& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CugSubscriptionFlag(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CugSubscriptionFlag()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CugSubscriptionFlag(*this);
        }

        virtual std::string GetName() const
        { return "CugSubscriptionFlag"; }

    };



    class ForwardingInterrogationRequired : public its::AsnNull
    {
    public:

        ForwardingInterrogationRequired() : its::AsnNull(false)
        {
            Initialize();
        }

        ForwardingInterrogationRequired(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ForwardingInterrogationRequired(const ForwardingInterrogationRequired& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ForwardingInterrogationRequired(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ForwardingInterrogationRequired()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ForwardingInterrogationRequired(*this);
        }

        virtual std::string GetName() const
        { return "ForwardingInterrogationRequired"; }

    };


        typedef map_v3::IMSI IMSI;


        typedef map_v3::ExtendedRoutingInfo ExtendedRoutingInfo;


        typedef map_v3::CUG_CheckInfo CUG_CheckInfo;


        typedef map_v3::SubscriberInfo SubscriberInfo;


        typedef map_v3::SS_List SS_List;


        typedef map_v3::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef map_v3::ISDN_AddressString ISDN_AddressString;


        typedef map_v3::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    SendRoutingInfoRes() : its::AsnSequence(10, false)
    {
        Initialize();
    }

    SendRoutingInfoRes(its::Octets& octets) : its::AsnSequence(10, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInfoRes(const SendRoutingInfoRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInfoRes(its::AsnDescObject* description) : its::AsnSequence(10, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetExtendedRoutingInfoStaticDescription();
    static its::AsnDescObject* GetCug_CheckInfoStaticDescription();
    static its::AsnDescObject* GetCugSubscriptionFlagStaticDescription();
    static its::AsnDescObject* GetSubscriberInfoStaticDescription();
    static its::AsnDescObject* GetSs_ListStaticDescription();
    static its::AsnDescObject* GetBasicServiceStaticDescription();
    static its::AsnDescObject* GetForwardingInterrogationRequiredStaticDescription();
    static its::AsnDescObject* GetVmsc_AddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~SendRoutingInfoRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInfoRes(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInfoRes"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    bool OptionImsi() const
    {
        return Contains(0);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetExtendedRoutingInfo(ExtendedRoutingInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtendedRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    void SetExtendedRoutingInfo(const ExtendedRoutingInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExtendedRoutingInfo&>(element);
        asnObject.SetDescription(GetExtendedRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtendedRoutingInfo() const
    {
        return Contains(1);
    }

    const ExtendedRoutingInfo& GetExtendedRoutingInfo() const
    {
        ITS_REQUIRE(OptionExtendedRoutingInfo());
        return static_cast<const ExtendedRoutingInfo&> (ElementAt(1));
    }

    void SetCug_CheckInfo(CUG_CheckInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(2, element);
    }

    void SetCug_CheckInfo(const CUG_CheckInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_CheckInfo&>(element);
        asnObject.SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionCug_CheckInfo() const
    {
        return Contains(2);
    }

    const CUG_CheckInfo& GetCug_CheckInfo() const
    {
        ITS_REQUIRE(OptionCug_CheckInfo());
        return static_cast<const CUG_CheckInfo&> (ElementAt(2));
    }

    void SetCugSubscriptionFlag(CugSubscriptionFlag* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCugSubscriptionFlagStaticDescription());
        AddElement(3, element);
    }

    void SetCugSubscriptionFlag(const CugSubscriptionFlag& element)
    {
        its::AsnObject& asnObject = const_cast<CugSubscriptionFlag&>(element);
        asnObject.SetDescription(GetCugSubscriptionFlagStaticDescription());
        AddElement(3, element);
    }

    bool OptionCugSubscriptionFlag() const
    {
        return Contains(3);
    }

    const CugSubscriptionFlag& GetCugSubscriptionFlag() const
    {
        ITS_REQUIRE(OptionCugSubscriptionFlag());
        return static_cast<const CugSubscriptionFlag&> (ElementAt(3));
    }

    void SetSubscriberInfo(SubscriberInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberInfoStaticDescription());
        AddElement(4, element);
    }

    void SetSubscriberInfo(const SubscriberInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberInfo&>(element);
        asnObject.SetDescription(GetSubscriberInfoStaticDescription());
        AddElement(4, element);
    }

    bool OptionSubscriberInfo() const
    {
        return Contains(4);
    }

    const SubscriberInfo& GetSubscriberInfo() const
    {
        ITS_REQUIRE(OptionSubscriberInfo());
        return static_cast<const SubscriberInfo&> (ElementAt(4));
    }

    void SetSs_List(SS_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_ListStaticDescription());
        AddElement(5, element);
    }

    void SetSs_List(const SS_List& element)
    {
        its::AsnObject& asnObject = const_cast<SS_List&>(element);
        asnObject.SetDescription(GetSs_ListStaticDescription());
        AddElement(5, element);
    }

    bool OptionSs_List() const
    {
        return Contains(5);
    }

    const SS_List& GetSs_List() const
    {
        ITS_REQUIRE(OptionSs_List());
        return static_cast<const SS_List&> (ElementAt(5));
    }

    void SetBasicService(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceStaticDescription());
        AddElement(6, element);
    }

    void SetBasicService(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceStaticDescription());
        AddElement(6, element);
    }

    bool OptionBasicService() const
    {
        return Contains(6);
    }

    const Ext_BasicServiceCode& GetBasicService() const
    {
        ITS_REQUIRE(OptionBasicService());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(6));
    }

    void SetForwardingInterrogationRequired(ForwardingInterrogationRequired* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardingInterrogationRequiredStaticDescription());
        AddElement(7, element);
    }

    void SetForwardingInterrogationRequired(const ForwardingInterrogationRequired& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardingInterrogationRequired&>(element);
        asnObject.SetDescription(GetForwardingInterrogationRequiredStaticDescription());
        AddElement(7, element);
    }

    bool OptionForwardingInterrogationRequired() const
    {
        return Contains(7);
    }

    const ForwardingInterrogationRequired& GetForwardingInterrogationRequired() const
    {
        ITS_REQUIRE(OptionForwardingInterrogationRequired());
        return static_cast<const ForwardingInterrogationRequired&> (ElementAt(7));
    }

    void SetVmsc_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVmsc_AddressStaticDescription());
        AddElement(8, element);
    }

    void SetVmsc_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetVmsc_AddressStaticDescription());
        AddElement(8, element);
    }

    bool OptionVmsc_Address() const
    {
        return Contains(8);
    }

    const ISDN_AddressString& GetVmsc_Address() const
    {
        ITS_REQUIRE(OptionVmsc_Address());
        return static_cast<const ISDN_AddressString&> (ElementAt(8));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(9, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(9, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(9);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(9));
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_SEND_ROUTING_INFO_RES_H_)

