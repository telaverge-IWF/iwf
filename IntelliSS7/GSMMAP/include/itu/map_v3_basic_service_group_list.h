//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_BASIC_SERVICE_GROUP_LIST_H_)
#define _MAP_V3_BASIC_SERVICE_GROUP_LIST_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequenceOf.h>
#include <AsnChoice.h>

#include <map_v3_basic_service_code.h>



namespace map_v3 {



class BasicServiceGroupList : public its::AsnSequenceOf
{
public:


////////// Begin Nested Class //////////


        typedef map_v3::BasicServiceCode BasicServiceCode;


////////// End Nested Class //////////

    BasicServiceGroupList() : its::AsnSequenceOf(false)
    {
        Initialize();
    }

    BasicServiceGroupList(its::Octets& octets) : its::AsnSequenceOf(false)
    {
        Initialize();
        Decode(octets);
    }

    BasicServiceGroupList(const BasicServiceGroupList& rhs) : its::AsnSequenceOf(rhs)
    {
        // Nothing to do.
    }

    BasicServiceGroupList(its::AsnDescObject* description) : its::AsnSequenceOf(description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetBasicServiceCodeStaticDescription();

public:

    virtual ~BasicServiceGroupList()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new BasicServiceGroupList(*this);
    }

    virtual std::string GetName() const
    { return "BasicServiceGroupList"; }

    void AddElement(BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceCodeStaticDescription());
        AsnSequenceOf::AddElement(element);
    }

    void AddElement(const BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceCodeStaticDescription());
        AsnSequenceOf::AddElement(element);
    }

    const BasicServiceCode& ElementAt(int index) const
    {
        return static_cast<const BasicServiceCode&> (AsnSequenceOf::ElementAt(index));
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_BASIC_SERVICE_GROUP_LIST_H_)

