//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_UESBI_IU_H_)
#define _MAP_V9_UESBI_IU_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBitString.h>

#include <map_v9_uesbi_iu_a.h>
#include <map_v9_uesbi_iu_b.h>



namespace map_v9 {



class UESBI_Iu : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::UESBI_IuA UESBI_IuA;


        typedef map_v9::UESBI_IuB UESBI_IuB;


////////// End Nested Class(es) //////////

    UESBI_Iu() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    UESBI_Iu(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    UESBI_Iu(const UESBI_Iu& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    UESBI_Iu(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetUesbi_IuAStaticDescription();
    static its::AsnDescObject* GetUesbi_IuBStaticDescription();

public:

    virtual ~UESBI_Iu()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new UESBI_Iu(*this);
    }

    virtual std::string GetName() const
    { return "UESBI_Iu"; }

    void SetUesbi_IuA(UESBI_IuA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUesbi_IuAStaticDescription());
        AddElement(0, element);
    }

    void SetUesbi_IuA(const UESBI_IuA& element)
    {
        its::AsnObject& asnObject = const_cast<UESBI_IuA&>(element);
        asnObject.SetDescription(GetUesbi_IuAStaticDescription());
        AddElement(0, element);
    }

    bool OptionUesbi_IuA() const
    {
        return Contains(0);
    }

    const UESBI_IuA& GetUesbi_IuA() const
    {
        ITS_REQUIRE(OptionUesbi_IuA());
        return static_cast<const UESBI_IuA&> (ElementAt(0));
    }

    void SetUesbi_IuB(UESBI_IuB* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUesbi_IuBStaticDescription());
        AddElement(1, element);
    }

    void SetUesbi_IuB(const UESBI_IuB& element)
    {
        its::AsnObject& asnObject = const_cast<UESBI_IuB&>(element);
        asnObject.SetDescription(GetUesbi_IuBStaticDescription());
        AddElement(1, element);
    }

    bool OptionUesbi_IuB() const
    {
        return Contains(1);
    }

    const UESBI_IuB& GetUesbi_IuB() const
    {
        ITS_REQUIRE(OptionUesbi_IuB());
        return static_cast<const UESBI_IuB&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_UESBI_IU_H_)

