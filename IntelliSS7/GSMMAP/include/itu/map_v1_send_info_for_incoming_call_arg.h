//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SEND_INFO_FOR_INCOMING_CALL_ARG_H_)
#define _MAP_V1_SEND_INFO_FOR_INCOMING_CALL_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v1_isdn_address_string.h>
#include <map_v1_imsi.h>
#include <map_v1_bearer_service_code.h>
#include <map_v1_teleservice_code.h>
#include <map_v1_l_ms_id.h>
#include <map_v1_cug_interlock.h>
#include <map_v1_number_of_forwarding.h>



namespace map_v1 {



class SendInfoForIncomingCallArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class IncomingId : public its::AsnChoice
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef map_v1::ISDN_AddressString ISDN_AddressString;


            typedef map_v1::IMSI IMSI;


    ////////// End Nested Class(es) //////////

        IncomingId() : its::AsnChoice(false)
        {
            Initialize();
        }

        IncomingId(its::Octets& octets) : its::AsnChoice(false)
        {
            Initialize();
            Decode(octets);
        }

        IncomingId(const IncomingId& rhs) : its::AsnChoice(rhs)
        {
            // Nothing to do.
        }

        IncomingId(its::AsnDescObject* description) : its::AsnChoice(description)
        {
            // Nothing to do.
        }

        IncomingId(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetRoamingNumberStaticDescription();
        static its::AsnDescObject* GetImsiStaticDescription();

    public:

        virtual ~IncomingId()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new IncomingId(*this);
        }

        virtual std::string GetName() const
        { return "IncomingId"; }

        void SetChoiceRoamingNumber(ISDN_AddressString* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetRoamingNumberStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceRoamingNumber(const ISDN_AddressString& choice)
        {
            its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(choice);
            asnObject.SetDescription(GetRoamingNumberStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceRoamingNumber() const
        {
            return Contains(GetRoamingNumberStaticDescription()->TagIdentity());
        }

        const ISDN_AddressString& GetChoiceRoamingNumber() const
        {
            ITS_REQUIRE(ChoiceRoamingNumber());
            return static_cast<const ISDN_AddressString&> (GetChoice());
        }

        void SetChoiceImsi(IMSI* choice)
        {
            ITS_REQUIRE(choice != NULL);
            choice->AsnObject::SetDescription(GetImsiStaticDescription());
            SetChoice(choice);
        }

        void SetChoiceImsi(const IMSI& choice)
        {
            its::AsnObject& asnObject = const_cast<IMSI&>(choice);
            asnObject.SetDescription(GetImsiStaticDescription());
            SetChoice(choice);
        }

        bool ChoiceImsi() const
        {
            return Contains(GetImsiStaticDescription()->TagIdentity());
        }

        const IMSI& GetChoiceImsi() const
        {
            ITS_REQUIRE(ChoiceImsi());
            return static_cast<const IMSI&> (GetChoice());
        }

    };


        typedef map_v1::BearerServiceCode BearerServiceCode;


        typedef map_v1::TeleserviceCode TeleserviceCode;


        typedef map_v1::LMsId LMsId;


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::CUG_Interlock CUG_Interlock;


        typedef map_v1::NumberOfForwarding NumberOfForwarding;


////////// End Nested Class(es) //////////

    SendInfoForIncomingCallArg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    SendInfoForIncomingCallArg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    SendInfoForIncomingCallArg(const SendInfoForIncomingCallArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendInfoForIncomingCallArg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetIncomingIdStaticDescription();
    static its::AsnDescObject* GetBearerServiceStaticDescription();
    static its::AsnDescObject* GetTeleserviceStaticDescription();
    static its::AsnDescObject* GetLMsIdStaticDescription();
    static its::AsnDescObject* GetDialledNumberStaticDescription();
    static its::AsnDescObject* GetCug_InterlockStaticDescription();
    static its::AsnDescObject* GetNumberOfForwardingStaticDescription();

public:

    virtual ~SendInfoForIncomingCallArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendInfoForIncomingCallArg(*this);
    }

    virtual std::string GetName() const
    { return "SendInfoForIncomingCallArg"; }

    void SetIncomingId(IncomingId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIncomingIdStaticDescription());
        AddElement(0, element);
    }

    void SetIncomingId(const IncomingId& element)
    {
        its::AsnObject& asnObject = const_cast<IncomingId&>(element);
        asnObject.SetDescription(GetIncomingIdStaticDescription());
        AddElement(0, element);
    }

    const IncomingId& GetIncomingId() const
    {
        return static_cast<const IncomingId&> (ElementAt(0));
    }

    void SetBearerService(BearerServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerServiceStaticDescription());
        AddElement(1, element);
    }

    void SetBearerService(const BearerServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<BearerServiceCode&>(element);
        asnObject.SetDescription(GetBearerServiceStaticDescription());
        AddElement(1, element);
    }

    bool OptionBearerService() const
    {
        return Contains(1);
    }

    const BearerServiceCode& GetBearerService() const
    {
        ITS_REQUIRE(OptionBearerService());
        return static_cast<const BearerServiceCode&> (ElementAt(1));
    }

    void SetTeleservice(TeleserviceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeleserviceStaticDescription());
        AddElement(2, element);
    }

    void SetTeleservice(const TeleserviceCode& element)
    {
        its::AsnObject& asnObject = const_cast<TeleserviceCode&>(element);
        asnObject.SetDescription(GetTeleserviceStaticDescription());
        AddElement(2, element);
    }

    bool OptionTeleservice() const
    {
        return Contains(2);
    }

    const TeleserviceCode& GetTeleservice() const
    {
        ITS_REQUIRE(OptionTeleservice());
        return static_cast<const TeleserviceCode&> (ElementAt(2));
    }

    void SetLMsId(LMsId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLMsIdStaticDescription());
        AddElement(3, element);
    }

    void SetLMsId(const LMsId& element)
    {
        its::AsnObject& asnObject = const_cast<LMsId&>(element);
        asnObject.SetDescription(GetLMsIdStaticDescription());
        AddElement(3, element);
    }

    bool OptionLMsId() const
    {
        return Contains(3);
    }

    const LMsId& GetLMsId() const
    {
        ITS_REQUIRE(OptionLMsId());
        return static_cast<const LMsId&> (ElementAt(3));
    }

    void SetDialledNumber(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetDialledNumberStaticDescription());
        AddElement(4, element);
    }

    void SetDialledNumber(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetDialledNumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionDialledNumber() const
    {
        return Contains(4);
    }

    const ISDN_AddressString& GetDialledNumber() const
    {
        ITS_REQUIRE(OptionDialledNumber());
        return static_cast<const ISDN_AddressString&> (ElementAt(4));
    }

    void SetCug_Interlock(CUG_Interlock* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_InterlockStaticDescription());
        AddElement(5, element);
    }

    void SetCug_Interlock(const CUG_Interlock& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Interlock&>(element);
        asnObject.SetDescription(GetCug_InterlockStaticDescription());
        AddElement(5, element);
    }

    bool OptionCug_Interlock() const
    {
        return Contains(5);
    }

    const CUG_Interlock& GetCug_Interlock() const
    {
        ITS_REQUIRE(OptionCug_Interlock());
        return static_cast<const CUG_Interlock&> (ElementAt(5));
    }

    void SetNumberOfForwarding(NumberOfForwarding* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(6, element);
    }

    void SetNumberOfForwarding(const NumberOfForwarding& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfForwarding&>(element);
        asnObject.SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(6, element);
    }

    bool OptionNumberOfForwarding() const
    {
        return Contains(6);
    }

    const NumberOfForwarding& GetNumberOfForwarding() const
    {
        ITS_REQUIRE(OptionNumberOfForwarding());
        return static_cast<const NumberOfForwarding&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SEND_INFO_FOR_INCOMING_CALL_ARG_H_)

