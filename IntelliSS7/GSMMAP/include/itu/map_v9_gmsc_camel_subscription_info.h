//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_GMSC_CAMEL_SUBSCRIPTION_INFO_H_)
#define _MAP_V9_GMSC_CAMEL_SUBSCRIPTION_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>

#include <map_v9_t_csi.h>
#include <map_v9_o_csi.h>
#include <map_v9_extension_container.h>
#include <map_v9_o_bcsm_camel_tdp_criteria_list.h>
#include <map_v9_t_bcsm_camel_tdp_criteria_list.h>
#include <map_v9_d_csi.h>



namespace map_v9 {



class GmscCamelSubscriptionInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::T_CSI T_CSI;


        typedef map_v9::O_CSI O_CSI;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::O_BcsmCamelTDPCriteriaList O_BcsmCamelTDPCriteriaList;


        typedef map_v9::T_BCSM_CAMEL_TDP_CriteriaList T_BCSM_CAMEL_TDP_CriteriaList;


        typedef map_v9::D_CSI D_CSI;


////////// End Nested Class(es) //////////

    GmscCamelSubscriptionInfo() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    GmscCamelSubscriptionInfo(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    GmscCamelSubscriptionInfo(const GmscCamelSubscriptionInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    GmscCamelSubscriptionInfo(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetT_CSIStaticDescription();
    static its::AsnDescObject* GetO_CSIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetO_BcsmCamelTDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription();
    static its::AsnDescObject* GetD_csiStaticDescription();

public:

    virtual ~GmscCamelSubscriptionInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GmscCamelSubscriptionInfo(*this);
    }

    virtual std::string GetName() const
    { return "GmscCamelSubscriptionInfo"; }

    void SetT_CSI(T_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetT_CSIStaticDescription());
        AddElement(0, element);
    }

    void SetT_CSI(const T_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<T_CSI&>(element);
        asnObject.SetDescription(GetT_CSIStaticDescription());
        AddElement(0, element);
    }

    bool OptionT_CSI() const
    {
        return Contains(0);
    }

    const T_CSI& GetT_CSI() const
    {
        ITS_REQUIRE(OptionT_CSI());
        return static_cast<const T_CSI&> (ElementAt(0));
    }

    void SetO_CSI(O_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_CSIStaticDescription());
        AddElement(1, element);
    }

    void SetO_CSI(const O_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<O_CSI&>(element);
        asnObject.SetDescription(GetO_CSIStaticDescription());
        AddElement(1, element);
    }

    bool OptionO_CSI() const
    {
        return Contains(1);
    }

    const O_CSI& GetO_CSI() const
    {
        ITS_REQUIRE(OptionO_CSI());
        return static_cast<const O_CSI&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetO_BcsmCamelTDP_CriteriaList(O_BcsmCamelTDPCriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetO_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(3, element);
    }

    void SetO_BcsmCamelTDP_CriteriaList(const O_BcsmCamelTDPCriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<O_BcsmCamelTDPCriteriaList&>(element);
        asnObject.SetDescription(GetO_BcsmCamelTDP_CriteriaListStaticDescription());
        AddElement(3, element);
    }

    bool OptionO_BcsmCamelTDP_CriteriaList() const
    {
        return Contains(3);
    }

    const O_BcsmCamelTDPCriteriaList& GetO_BcsmCamelTDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionO_BcsmCamelTDP_CriteriaList());
        return static_cast<const O_BcsmCamelTDPCriteriaList&> (ElementAt(3));
    }

    void SetT_BCSM_CAMEL_TDP_CriteriaList(T_BCSM_CAMEL_TDP_CriteriaList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(4, element);
    }

    void SetT_BCSM_CAMEL_TDP_CriteriaList(const T_BCSM_CAMEL_TDP_CriteriaList& element)
    {
        its::AsnObject& asnObject = const_cast<T_BCSM_CAMEL_TDP_CriteriaList&>(element);
        asnObject.SetDescription(GetT_BCSM_CAMEL_TDP_CriteriaListStaticDescription());
        AddElement(4, element);
    }

    bool OptionT_BCSM_CAMEL_TDP_CriteriaList() const
    {
        return Contains(4);
    }

    const T_BCSM_CAMEL_TDP_CriteriaList& GetT_BCSM_CAMEL_TDP_CriteriaList() const
    {
        ITS_REQUIRE(OptionT_BCSM_CAMEL_TDP_CriteriaList());
        return static_cast<const T_BCSM_CAMEL_TDP_CriteriaList&> (ElementAt(4));
    }

    void SetD_csi(D_CSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetD_csiStaticDescription());
        AddElement(5, element);
    }

    void SetD_csi(const D_CSI& element)
    {
        its::AsnObject& asnObject = const_cast<D_CSI&>(element);
        asnObject.SetDescription(GetD_csiStaticDescription());
        AddElement(5, element);
    }

    bool OptionD_csi() const
    {
        return Contains(5);
    }

    const D_CSI& GetD_csi() const
    {
        ITS_REQUIRE(OptionD_csi());
        return static_cast<const D_CSI&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_GMSC_CAMEL_SUBSCRIPTION_INFO_H_)

