//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_INSERT_SUBSCRIBER_DATA_ARG_H_)
#define _MAP_V1_INSERT_SUBSCRIBER_DATA_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v1_imsi.h>
#include <map_v1_isdn_address_string.h>
#include <map_v1_category.h>
#include <map_v1_subscriber_status.h>
#include <map_v1_bearer_service_list.h>
#include <map_v1_teleservice_list.h>
#include <map_v1_ss_info_list.h>



namespace map_v1 {



class InsertSubscriberDataArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::IMSI IMSI;


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::Category Category;


        typedef map_v1::SubscriberStatus SubscriberStatus;


        typedef map_v1::BearerServiceList BearerServiceList;


        typedef map_v1::TeleserviceList TeleserviceList;


        typedef map_v1::SS_InfoList SS_InfoList;


////////// End Nested Class(es) //////////

    InsertSubscriberDataArg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    InsertSubscriberDataArg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    InsertSubscriberDataArg(const InsertSubscriberDataArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InsertSubscriberDataArg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetMsIsdnStaticDescription();
    static its::AsnDescObject* GetCategoryStaticDescription();
    static its::AsnDescObject* GetSubscriberStatusStaticDescription();
    static its::AsnDescObject* GetBearerServiceListStaticDescription();
    static its::AsnDescObject* GetTeleserviceListStaticDescription();
    static its::AsnDescObject* GetProvisionedSupplServicesStaticDescription();

public:

    virtual ~InsertSubscriberDataArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InsertSubscriberDataArg(*this);
    }

    virtual std::string GetName() const
    { return "InsertSubscriberDataArg"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    bool OptionImsi() const
    {
        return Contains(0);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetMsIsdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsIsdnStaticDescription());
        AddElement(1, element);
    }

    void SetMsIsdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsIsdnStaticDescription());
        AddElement(1, element);
    }

    bool OptionMsIsdn() const
    {
        return Contains(1);
    }

    const ISDN_AddressString& GetMsIsdn() const
    {
        ITS_REQUIRE(OptionMsIsdn());
        return static_cast<const ISDN_AddressString&> (ElementAt(1));
    }

    void SetCategory(Category* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCategoryStaticDescription());
        AddElement(2, element);
    }

    void SetCategory(const Category& element)
    {
        its::AsnObject& asnObject = const_cast<Category&>(element);
        asnObject.SetDescription(GetCategoryStaticDescription());
        AddElement(2, element);
    }

    bool OptionCategory() const
    {
        return Contains(2);
    }

    const Category& GetCategory() const
    {
        ITS_REQUIRE(OptionCategory());
        return static_cast<const Category&> (ElementAt(2));
    }

    void SetSubscriberStatus(SubscriberStatus* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStatusStaticDescription());
        AddElement(3, element);
    }

    void SetSubscriberStatus(const SubscriberStatus& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberStatus&>(element);
        asnObject.SetDescription(GetSubscriberStatusStaticDescription());
        AddElement(3, element);
    }

    bool OptionSubscriberStatus() const
    {
        return Contains(3);
    }

    const SubscriberStatus& GetSubscriberStatus() const
    {
        ITS_REQUIRE(OptionSubscriberStatus());
        return static_cast<const SubscriberStatus&> (ElementAt(3));
    }

    void SetBearerServiceList(BearerServiceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerServiceListStaticDescription());
        AddElement(4, element);
    }

    void SetBearerServiceList(const BearerServiceList& element)
    {
        its::AsnObject& asnObject = const_cast<BearerServiceList&>(element);
        asnObject.SetDescription(GetBearerServiceListStaticDescription());
        AddElement(4, element);
    }

    bool OptionBearerServiceList() const
    {
        return Contains(4);
    }

    const BearerServiceList& GetBearerServiceList() const
    {
        ITS_REQUIRE(OptionBearerServiceList());
        return static_cast<const BearerServiceList&> (ElementAt(4));
    }

    void SetTeleserviceList(TeleserviceList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTeleserviceListStaticDescription());
        AddElement(5, element);
    }

    void SetTeleserviceList(const TeleserviceList& element)
    {
        its::AsnObject& asnObject = const_cast<TeleserviceList&>(element);
        asnObject.SetDescription(GetTeleserviceListStaticDescription());
        AddElement(5, element);
    }

    bool OptionTeleserviceList() const
    {
        return Contains(5);
    }

    const TeleserviceList& GetTeleserviceList() const
    {
        ITS_REQUIRE(OptionTeleserviceList());
        return static_cast<const TeleserviceList&> (ElementAt(5));
    }

    void SetProvisionedSupplServices(SS_InfoList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetProvisionedSupplServicesStaticDescription());
        AddElement(6, element);
    }

    void SetProvisionedSupplServices(const SS_InfoList& element)
    {
        its::AsnObject& asnObject = const_cast<SS_InfoList&>(element);
        asnObject.SetDescription(GetProvisionedSupplServicesStaticDescription());
        AddElement(6, element);
    }

    bool OptionProvisionedSupplServices() const
    {
        return Contains(6);
    }

    const SS_InfoList& GetProvisionedSupplServices() const
    {
        ITS_REQUIRE(OptionProvisionedSupplServices());
        return static_cast<const SS_InfoList&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_INSERT_SUBSCRIBER_DATA_ARG_H_)

