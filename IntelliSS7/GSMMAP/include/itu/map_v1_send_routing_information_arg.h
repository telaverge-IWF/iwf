//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SEND_ROUTING_INFORMATION_ARG_H_)
#define _MAP_V1_SEND_ROUTING_INFORMATION_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v1_isdn_address_string.h>
#include <map_v1_cug_interlock.h>
#include <map_v1_number_of_forwarding.h>
#include <map_v1_external_signal_info.h>



namespace map_v1 {



class SendRoutingInformationArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::CUG_Interlock CUG_Interlock;


        typedef map_v1::NumberOfForwarding NumberOfForwarding;


        typedef map_v1::ExternalSignalInfo ExternalSignalInfo;


////////// End Nested Class(es) //////////

    SendRoutingInformationArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    SendRoutingInformationArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInformationArg(const SendRoutingInformationArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInformationArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsIsdnStaticDescription();
    static its::AsnDescObject* GetCug_InterlockStaticDescription();
    static its::AsnDescObject* GetNumberOfForwardingStaticDescription();
    static its::AsnDescObject* GetNetworkSignalInfoStaticDescription();

public:

    virtual ~SendRoutingInformationArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInformationArg(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInformationArg"; }

    void SetMsIsdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    void SetMsIsdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsIsdnStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetMsIsdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetCug_Interlock(CUG_Interlock* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_InterlockStaticDescription());
        AddElement(1, element);
    }

    void SetCug_Interlock(const CUG_Interlock& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Interlock&>(element);
        asnObject.SetDescription(GetCug_InterlockStaticDescription());
        AddElement(1, element);
    }

    bool OptionCug_Interlock() const
    {
        return Contains(1);
    }

    const CUG_Interlock& GetCug_Interlock() const
    {
        ITS_REQUIRE(OptionCug_Interlock());
        return static_cast<const CUG_Interlock&> (ElementAt(1));
    }

    void SetNumberOfForwarding(NumberOfForwarding* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(2, element);
    }

    void SetNumberOfForwarding(const NumberOfForwarding& element)
    {
        its::AsnObject& asnObject = const_cast<NumberOfForwarding&>(element);
        asnObject.SetDescription(GetNumberOfForwardingStaticDescription());
        AddElement(2, element);
    }

    bool OptionNumberOfForwarding() const
    {
        return Contains(2);
    }

    const NumberOfForwarding& GetNumberOfForwarding() const
    {
        ITS_REQUIRE(OptionNumberOfForwarding());
        return static_cast<const NumberOfForwarding&> (ElementAt(2));
    }

    void SetNetworkSignalInfo(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(3, element);
    }

    void SetNetworkSignalInfo(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetNetworkSignalInfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionNetworkSignalInfo() const
    {
        return Contains(3);
    }

    const ExternalSignalInfo& GetNetworkSignalInfo() const
    {
        ITS_REQUIRE(OptionNetworkSignalInfo());
        return static_cast<const ExternalSignalInfo&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SEND_ROUTING_INFORMATION_ARG_H_)

