//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V2_ROUTING_INFO_FOR_SM_RES_H_)
#define _MAP_V2_ROUTING_INFO_FOR_SM_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBoolean.h>
#include <AsnOctetString.h>

#include <map_v2_imsi.h>
#include <map_v2_location_info_with_lmsi.h>



namespace map_v2 {



class RoutingInfoForSM_Res : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Mwd_Set : public its::AsnBoolean
    {
    public:

        Mwd_Set(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Mwd_Set(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Mwd_Set(const Mwd_Set& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Mwd_Set(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Mwd_Set(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Mwd_Set()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Mwd_Set(*this);
        }

        virtual std::string GetName() const
        { return "Mwd_Set"; }

    };


        typedef map_v2::IMSI IMSI;


        typedef map_v2::LocationInfoWithLMSI LocationInfoWithLMSI;


////////// End Nested Class(es) //////////

    RoutingInfoForSM_Res() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    RoutingInfoForSM_Res(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    RoutingInfoForSM_Res(const RoutingInfoForSM_Res& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RoutingInfoForSM_Res(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetLocationInfoWithLMSIStaticDescription();
    static its::AsnDescObject* GetMwd_SetStaticDescription();

public:

    virtual ~RoutingInfoForSM_Res()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RoutingInfoForSM_Res(*this);
    }

    virtual std::string GetName() const
    { return "RoutingInfoForSM_Res"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    const IMSI& GetImsi() const
    {
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetLocationInfoWithLMSI(LocationInfoWithLMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInfoWithLMSIStaticDescription());
        AddElement(1, element);
    }

    void SetLocationInfoWithLMSI(const LocationInfoWithLMSI& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInfoWithLMSI&>(element);
        asnObject.SetDescription(GetLocationInfoWithLMSIStaticDescription());
        AddElement(1, element);
    }

    const LocationInfoWithLMSI& GetLocationInfoWithLMSI() const
    {
        return static_cast<const LocationInfoWithLMSI&> (ElementAt(1));
    }

    void SetMwd_Set(Mwd_Set* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMwd_SetStaticDescription());
        AddElement(2, element);
    }

    void SetMwd_Set(const Mwd_Set& element)
    {
        its::AsnObject& asnObject = const_cast<Mwd_Set&>(element);
        asnObject.SetDescription(GetMwd_SetStaticDescription());
        AddElement(2, element);
    }

    bool OptionMwd_Set() const
    {
        return Contains(2);
    }

    const Mwd_Set& GetMwd_Set() const
    {
        ITS_REQUIRE(OptionMwd_Set());
        return static_cast<const Mwd_Set&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V2_ROUTING_INFO_FOR_SM_RES_H_)

