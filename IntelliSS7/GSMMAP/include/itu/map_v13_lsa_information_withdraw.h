//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_LSA_INFORMATION_WITHDRAW_H_)
#define _MAP_V13_LSA_INFORMATION_WITHDRAW_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>

#include <map_v13_lsa_identity_list.h>



namespace map_v13 {



class LSAInformationWithdraw : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AllLSAData : public its::AsnNull
    {
    public:

        AllLSAData() : its::AsnNull(false)
        {
            Initialize();
        }

        AllLSAData(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AllLSAData(const AllLSAData& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AllLSAData(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AllLSAData()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AllLSAData(*this);
        }

        virtual std::string GetName() const
        { return "AllLSAData"; }

    };


        typedef map_v13::LSAIdentityList LSAIdentityList;


////////// End Nested Class(es) //////////

    LSAInformationWithdraw() : its::AsnChoice(false)
    {
        Initialize();
    }

    LSAInformationWithdraw(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    LSAInformationWithdraw(const LSAInformationWithdraw& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    LSAInformationWithdraw(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    LSAInformationWithdraw(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAllLSADataStaticDescription();
    static its::AsnDescObject* GetLsaIdentityListStaticDescription();

public:

    virtual ~LSAInformationWithdraw()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LSAInformationWithdraw(*this);
    }

    virtual std::string GetName() const
    { return "LSAInformationWithdraw"; }

    void SetChoiceAllLSAData(AllLSAData* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAllLSADataStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAllLSAData(const AllLSAData& choice)
    {
        its::AsnObject& asnObject = const_cast<AllLSAData&>(choice);
        asnObject.SetDescription(GetAllLSADataStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAllLSAData() const
    {
        return Contains(GetAllLSADataStaticDescription()->TagIdentity());
    }

    const AllLSAData& GetChoiceAllLSAData() const
    {
        ITS_REQUIRE(ChoiceAllLSAData());
        return static_cast<const AllLSAData&> (GetChoice());
    }

    void SetChoiceLsaIdentityList(LSAIdentityList* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLsaIdentityListStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLsaIdentityList(const LSAIdentityList& choice)
    {
        its::AsnObject& asnObject = const_cast<LSAIdentityList&>(choice);
        asnObject.SetDescription(GetLsaIdentityListStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLsaIdentityList() const
    {
        return Contains(GetLsaIdentityListStaticDescription()->TagIdentity());
    }

    const LSAIdentityList& GetChoiceLsaIdentityList() const
    {
        ITS_REQUIRE(ChoiceLsaIdentityList());
        return static_cast<const LSAIdentityList&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_LSA_INFORMATION_WITHDRAW_H_)

