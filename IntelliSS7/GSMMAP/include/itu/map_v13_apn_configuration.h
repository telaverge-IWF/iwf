//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_APN_CONFIGURATION_H_)
#define _MAP_V13_APN_CONFIGURATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnSequenceOf.h>

#include <map_v13_context_id.h>
#include <map_v13_pdn_type.h>
#include <map_v13_pdp_address.h>
#include <map_v13_apn.h>
#include <map_v13_eps_qo_s_subscribed.h>
#include <map_v13_pdn_gw_identity.h>
#include <map_v13_pdn_gw_allocation_type.h>
#include <map_v13_charging_characteristics.h>
#include <map_v13_ambr.h>
#include <map_v13_specific_apn_info_list.h>
#include <map_v13_extension_container.h>
#include <map_v13_apn_oi_replacement.h>
#include <map_v13_sipto_permission.h>
#include <map_v13_lipa_permission.h>



namespace map_v13 {



class APN_Configuration : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class VplmnAddressAllowed : public its::AsnNull
    {
    public:

        VplmnAddressAllowed() : its::AsnNull(false)
        {
            Initialize();
        }

        VplmnAddressAllowed(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        VplmnAddressAllowed(const VplmnAddressAllowed& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        VplmnAddressAllowed(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VplmnAddressAllowed()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VplmnAddressAllowed(*this);
        }

        virtual std::string GetName() const
        { return "VplmnAddressAllowed"; }

    };


        typedef map_v13::ContextId ContextId;


        typedef map_v13::PDN_Type PDN_Type;


        typedef map_v13::PDP_Address PDP_Address;


        typedef map_v13::APN APN;


        typedef map_v13::EPS_QoS_Subscribed EPS_QoS_Subscribed;


        typedef map_v13::PDN_GW_Identity PDN_GW_Identity;


        typedef map_v13::PDN_GW_AllocationType PDN_GW_AllocationType;


        typedef map_v13::ChargingCharacteristics ChargingCharacteristics;


        typedef map_v13::AMBR AMBR;


        typedef map_v13::SpecificAPNInfoList SpecificAPNInfoList;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::APN_OI_Replacement APN_OI_Replacement;


        typedef map_v13::SIPTO_Permission SIPTO_Permission;


        typedef map_v13::LIPA_Permission LIPA_Permission;


////////// End Nested Class(es) //////////

    APN_Configuration() : its::AsnSequence(16, false)
    {
        Initialize();
    }

    APN_Configuration(its::Octets& octets) : its::AsnSequence(16, false)
    {
        Initialize();
        Decode(octets);
    }

    APN_Configuration(const APN_Configuration& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    APN_Configuration(its::AsnDescObject* description) : its::AsnSequence(16, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetContextIdStaticDescription();
    static its::AsnDescObject* GetPdn_TypeStaticDescription();
    static its::AsnDescObject* GetServedPartyIP_IPv4_AddressStaticDescription();
    static its::AsnDescObject* GetApnStaticDescription();
    static its::AsnDescObject* GetEps_qos_SubscribedStaticDescription();
    static its::AsnDescObject* GetPdn_gw_IdentityStaticDescription();
    static its::AsnDescObject* GetPdn_gw_AllocationTypeStaticDescription();
    static its::AsnDescObject* GetVplmnAddressAllowedStaticDescription();
    static its::AsnDescObject* GetChargingCharacteristicsStaticDescription();
    static its::AsnDescObject* GetAmbrStaticDescription();
    static its::AsnDescObject* GetSpecificAPNInfoListStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetServedPartyIP_IPv6_AddressStaticDescription();
    static its::AsnDescObject* GetApn_oi_ReplacementStaticDescription();
    static its::AsnDescObject* GetSipto_PermissionStaticDescription();
    static its::AsnDescObject* GetLipa_PermissionStaticDescription();

public:

    virtual ~APN_Configuration()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new APN_Configuration(*this);
    }

    virtual std::string GetName() const
    { return "APN_Configuration"; }

    void SetContextId(ContextId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetContextIdStaticDescription());
        AddElement(0, element);
    }

    void SetContextId(const ContextId& element)
    {
        its::AsnObject& asnObject = const_cast<ContextId&>(element);
        asnObject.SetDescription(GetContextIdStaticDescription());
        AddElement(0, element);
    }

    const ContextId& GetContextId() const
    {
        return static_cast<const ContextId&> (ElementAt(0));
    }

    void SetPdn_Type(PDN_Type* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_TypeStaticDescription());
        AddElement(1, element);
    }

    void SetPdn_Type(const PDN_Type& element)
    {
        its::AsnObject& asnObject = const_cast<PDN_Type&>(element);
        asnObject.SetDescription(GetPdn_TypeStaticDescription());
        AddElement(1, element);
    }

    const PDN_Type& GetPdn_Type() const
    {
        return static_cast<const PDN_Type&> (ElementAt(1));
    }

    void SetServedPartyIP_IPv4_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServedPartyIP_IPv4_AddressStaticDescription());
        AddElement(2, element);
    }

    void SetServedPartyIP_IPv4_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetServedPartyIP_IPv4_AddressStaticDescription());
        AddElement(2, element);
    }

    bool OptionServedPartyIP_IPv4_Address() const
    {
        return Contains(2);
    }

    const PDP_Address& GetServedPartyIP_IPv4_Address() const
    {
        ITS_REQUIRE(OptionServedPartyIP_IPv4_Address());
        return static_cast<const PDP_Address&> (ElementAt(2));
    }

    void SetApn(APN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApnStaticDescription());
        AddElement(3, element);
    }

    void SetApn(const APN& element)
    {
        its::AsnObject& asnObject = const_cast<APN&>(element);
        asnObject.SetDescription(GetApnStaticDescription());
        AddElement(3, element);
    }

    const APN& GetApn() const
    {
        return static_cast<const APN&> (ElementAt(3));
    }

    void SetEps_qos_Subscribed(EPS_QoS_Subscribed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEps_qos_SubscribedStaticDescription());
        AddElement(4, element);
    }

    void SetEps_qos_Subscribed(const EPS_QoS_Subscribed& element)
    {
        its::AsnObject& asnObject = const_cast<EPS_QoS_Subscribed&>(element);
        asnObject.SetDescription(GetEps_qos_SubscribedStaticDescription());
        AddElement(4, element);
    }

    const EPS_QoS_Subscribed& GetEps_qos_Subscribed() const
    {
        return static_cast<const EPS_QoS_Subscribed&> (ElementAt(4));
    }

    void SetPdn_gw_Identity(PDN_GW_Identity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_gw_IdentityStaticDescription());
        AddElement(5, element);
    }

    void SetPdn_gw_Identity(const PDN_GW_Identity& element)
    {
        its::AsnObject& asnObject = const_cast<PDN_GW_Identity&>(element);
        asnObject.SetDescription(GetPdn_gw_IdentityStaticDescription());
        AddElement(5, element);
    }

    bool OptionPdn_gw_Identity() const
    {
        return Contains(5);
    }

    const PDN_GW_Identity& GetPdn_gw_Identity() const
    {
        ITS_REQUIRE(OptionPdn_gw_Identity());
        return static_cast<const PDN_GW_Identity&> (ElementAt(5));
    }

    void SetPdn_gw_AllocationType(PDN_GW_AllocationType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPdn_gw_AllocationTypeStaticDescription());
        AddElement(6, element);
    }

    void SetPdn_gw_AllocationType(const PDN_GW_AllocationType& element)
    {
        its::AsnObject& asnObject = const_cast<PDN_GW_AllocationType&>(element);
        asnObject.SetDescription(GetPdn_gw_AllocationTypeStaticDescription());
        AddElement(6, element);
    }

    bool OptionPdn_gw_AllocationType() const
    {
        return Contains(6);
    }

    const PDN_GW_AllocationType& GetPdn_gw_AllocationType() const
    {
        ITS_REQUIRE(OptionPdn_gw_AllocationType());
        return static_cast<const PDN_GW_AllocationType&> (ElementAt(6));
    }

    void SetVplmnAddressAllowed(VplmnAddressAllowed* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVplmnAddressAllowedStaticDescription());
        AddElement(7, element);
    }

    void SetVplmnAddressAllowed(const VplmnAddressAllowed& element)
    {
        its::AsnObject& asnObject = const_cast<VplmnAddressAllowed&>(element);
        asnObject.SetDescription(GetVplmnAddressAllowedStaticDescription());
        AddElement(7, element);
    }

    bool OptionVplmnAddressAllowed() const
    {
        return Contains(7);
    }

    const VplmnAddressAllowed& GetVplmnAddressAllowed() const
    {
        ITS_REQUIRE(OptionVplmnAddressAllowed());
        return static_cast<const VplmnAddressAllowed&> (ElementAt(7));
    }

    void SetChargingCharacteristics(ChargingCharacteristics* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingCharacteristicsStaticDescription());
        AddElement(8, element);
    }

    void SetChargingCharacteristics(const ChargingCharacteristics& element)
    {
        its::AsnObject& asnObject = const_cast<ChargingCharacteristics&>(element);
        asnObject.SetDescription(GetChargingCharacteristicsStaticDescription());
        AddElement(8, element);
    }

    bool OptionChargingCharacteristics() const
    {
        return Contains(8);
    }

    const ChargingCharacteristics& GetChargingCharacteristics() const
    {
        ITS_REQUIRE(OptionChargingCharacteristics());
        return static_cast<const ChargingCharacteristics&> (ElementAt(8));
    }

    void SetAmbr(AMBR* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAmbrStaticDescription());
        AddElement(9, element);
    }

    void SetAmbr(const AMBR& element)
    {
        its::AsnObject& asnObject = const_cast<AMBR&>(element);
        asnObject.SetDescription(GetAmbrStaticDescription());
        AddElement(9, element);
    }

    bool OptionAmbr() const
    {
        return Contains(9);
    }

    const AMBR& GetAmbr() const
    {
        ITS_REQUIRE(OptionAmbr());
        return static_cast<const AMBR&> (ElementAt(9));
    }

    void SetSpecificAPNInfoList(SpecificAPNInfoList* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSpecificAPNInfoListStaticDescription());
        AddElement(10, element);
    }

    void SetSpecificAPNInfoList(const SpecificAPNInfoList& element)
    {
        its::AsnObject& asnObject = const_cast<SpecificAPNInfoList&>(element);
        asnObject.SetDescription(GetSpecificAPNInfoListStaticDescription());
        AddElement(10, element);
    }

    bool OptionSpecificAPNInfoList() const
    {
        return Contains(10);
    }

    const SpecificAPNInfoList& GetSpecificAPNInfoList() const
    {
        ITS_REQUIRE(OptionSpecificAPNInfoList());
        return static_cast<const SpecificAPNInfoList&> (ElementAt(10));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(11, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(11, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(11);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(11));
    }

    void SetServedPartyIP_IPv6_Address(PDP_Address* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServedPartyIP_IPv6_AddressStaticDescription());
        AddElement(12, element);
    }

    void SetServedPartyIP_IPv6_Address(const PDP_Address& element)
    {
        its::AsnObject& asnObject = const_cast<PDP_Address&>(element);
        asnObject.SetDescription(GetServedPartyIP_IPv6_AddressStaticDescription());
        AddElement(12, element);
    }

    bool OptionServedPartyIP_IPv6_Address() const
    {
        return Contains(12);
    }

    const PDP_Address& GetServedPartyIP_IPv6_Address() const
    {
        ITS_REQUIRE(OptionServedPartyIP_IPv6_Address());
        return static_cast<const PDP_Address&> (ElementAt(12));
    }

    void SetApn_oi_Replacement(APN_OI_Replacement* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetApn_oi_ReplacementStaticDescription());
        AddElement(13, element);
    }

    void SetApn_oi_Replacement(const APN_OI_Replacement& element)
    {
        its::AsnObject& asnObject = const_cast<APN_OI_Replacement&>(element);
        asnObject.SetDescription(GetApn_oi_ReplacementStaticDescription());
        AddElement(13, element);
    }

    bool OptionApn_oi_Replacement() const
    {
        return Contains(13);
    }

    const APN_OI_Replacement& GetApn_oi_Replacement() const
    {
        ITS_REQUIRE(OptionApn_oi_Replacement());
        return static_cast<const APN_OI_Replacement&> (ElementAt(13));
    }

    void SetSipto_Permission(SIPTO_Permission* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSipto_PermissionStaticDescription());
        AddElement(14, element);
    }

    void SetSipto_Permission(const SIPTO_Permission& element)
    {
        its::AsnObject& asnObject = const_cast<SIPTO_Permission&>(element);
        asnObject.SetDescription(GetSipto_PermissionStaticDescription());
        AddElement(14, element);
    }

    bool OptionSipto_Permission() const
    {
        return Contains(14);
    }

    const SIPTO_Permission& GetSipto_Permission() const
    {
        ITS_REQUIRE(OptionSipto_Permission());
        return static_cast<const SIPTO_Permission&> (ElementAt(14));
    }

    void SetLipa_Permission(LIPA_Permission* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLipa_PermissionStaticDescription());
        AddElement(15, element);
    }

    void SetLipa_Permission(const LIPA_Permission& element)
    {
        its::AsnObject& asnObject = const_cast<LIPA_Permission&>(element);
        asnObject.SetDescription(GetLipa_PermissionStaticDescription());
        AddElement(15, element);
    }

    bool OptionLipa_Permission() const
    {
        return Contains(15);
    }

    const LIPA_Permission& GetLipa_Permission() const
    {
        ITS_REQUIRE(OptionLipa_Permission());
        return static_cast<const LIPA_Permission&> (ElementAt(15));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_APN_CONFIGURATION_H_)

