//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_MT_FORWARD_SM_ARG_H_)
#define _MAP_V13_MT_FORWARD_SM_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v13_sm_rp_da.h>
#include <map_v13_sm_rp_oa.h>
#include <map_v13_signal_info.h>
#include <map_v13_extension_container.h>
#include <map_v13_sm_delivery_timer_value.h>
#include <map_v13_time.h>



namespace map_v13 {



class MT_ForwardSM_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class MoreMessagesToSend : public its::AsnNull
    {
    public:

        MoreMessagesToSend() : its::AsnNull(false)
        {
            Initialize();
        }

        MoreMessagesToSend(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        MoreMessagesToSend(const MoreMessagesToSend& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        MoreMessagesToSend(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MoreMessagesToSend()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MoreMessagesToSend(*this);
        }

        virtual std::string GetName() const
        { return "MoreMessagesToSend"; }

    };


        typedef map_v13::SM_RP_DA SM_RP_DA;


        typedef map_v13::SM_RP_OA SM_RP_OA;


        typedef map_v13::SignalInfo SignalInfo;


        typedef map_v13::ExtensionContainer ExtensionContainer;


        typedef map_v13::SM_DeliveryTimerValue SM_DeliveryTimerValue;


        typedef map_v13::Time Time;


////////// End Nested Class(es) //////////

    MT_ForwardSM_Arg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    MT_ForwardSM_Arg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    MT_ForwardSM_Arg(const MT_ForwardSM_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MT_ForwardSM_Arg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSm_RP_DAStaticDescription();
    static its::AsnDescObject* GetSm_RP_OAStaticDescription();
    static its::AsnDescObject* GetSm_RP_UIStaticDescription();
    static its::AsnDescObject* GetMoreMessagesToSendStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetSmDeliveryTimerStaticDescription();
    static its::AsnDescObject* GetSmDeliveryStartTimeStaticDescription();

public:

    virtual ~MT_ForwardSM_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MT_ForwardSM_Arg(*this);
    }

    virtual std::string GetName() const
    { return "MT_ForwardSM_Arg"; }

    void SetSm_RP_DA(SM_RP_DA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_DAStaticDescription());
        AddElement(0, element);
    }

    void SetSm_RP_DA(const SM_RP_DA& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_DA&>(element);
        asnObject.SetDescription(GetSm_RP_DAStaticDescription());
        AddElement(0, element);
    }

    const SM_RP_DA& GetSm_RP_DA() const
    {
        return static_cast<const SM_RP_DA&> (ElementAt(0));
    }

    void SetSm_RP_OA(SM_RP_OA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_OAStaticDescription());
        AddElement(1, element);
    }

    void SetSm_RP_OA(const SM_RP_OA& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_OA&>(element);
        asnObject.SetDescription(GetSm_RP_OAStaticDescription());
        AddElement(1, element);
    }

    const SM_RP_OA& GetSm_RP_OA() const
    {
        return static_cast<const SM_RP_OA&> (ElementAt(1));
    }

    void SetSm_RP_UI(SignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(2, element);
    }

    void SetSm_RP_UI(const SignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SignalInfo&>(element);
        asnObject.SetDescription(GetSm_RP_UIStaticDescription());
        AddElement(2, element);
    }

    const SignalInfo& GetSm_RP_UI() const
    {
        return static_cast<const SignalInfo&> (ElementAt(2));
    }

    void SetMoreMessagesToSend(MoreMessagesToSend* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMoreMessagesToSendStaticDescription());
        AddElement(3, element);
    }

    void SetMoreMessagesToSend(const MoreMessagesToSend& element)
    {
        its::AsnObject& asnObject = const_cast<MoreMessagesToSend&>(element);
        asnObject.SetDescription(GetMoreMessagesToSendStaticDescription());
        AddElement(3, element);
    }

    bool OptionMoreMessagesToSend() const
    {
        return Contains(3);
    }

    const MoreMessagesToSend& GetMoreMessagesToSend() const
    {
        ITS_REQUIRE(OptionMoreMessagesToSend());
        return static_cast<const MoreMessagesToSend&> (ElementAt(3));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(4, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(4);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(4));
    }

    void SetSmDeliveryTimer(SM_DeliveryTimerValue* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSmDeliveryTimerStaticDescription());
        AddElement(5, element);
    }

    void SetSmDeliveryTimer(const SM_DeliveryTimerValue& element)
    {
        its::AsnObject& asnObject = const_cast<SM_DeliveryTimerValue&>(element);
        asnObject.SetDescription(GetSmDeliveryTimerStaticDescription());
        AddElement(5, element);
    }

    bool OptionSmDeliveryTimer() const
    {
        return Contains(5);
    }

    const SM_DeliveryTimerValue& GetSmDeliveryTimer() const
    {
        ITS_REQUIRE(OptionSmDeliveryTimer());
        return static_cast<const SM_DeliveryTimerValue&> (ElementAt(5));
    }

    void SetSmDeliveryStartTime(Time* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSmDeliveryStartTimeStaticDescription());
        AddElement(6, element);
    }

    void SetSmDeliveryStartTime(const Time& element)
    {
        its::AsnObject& asnObject = const_cast<Time&>(element);
        asnObject.SetDescription(GetSmDeliveryStartTimeStaticDescription());
        AddElement(6, element);
    }

    bool OptionSmDeliveryStartTime() const
    {
        return Contains(6);
    }

    const Time& GetSmDeliveryStartTime() const
    {
        ITS_REQUIRE(OptionSmDeliveryStartTime());
        return static_cast<const Time&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_MT_FORWARD_SM_ARG_H_)

