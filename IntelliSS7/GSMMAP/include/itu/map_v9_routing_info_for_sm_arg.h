//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_ROUTING_INFO_FOR_SM_ARG_H_)
#define _MAP_V9_ROUTING_INFO_FOR_SM_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBoolean.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnInteger.h>

#include <map_v9_isdn_address_string.h>
#include <map_v9_address_string.h>
#include <map_v9_extension_container.h>
#include <map_v9_sm_rp_mti.h>
#include <map_v9_sm_rp_smea.h>



namespace map_v9 {



class RoutingInfoForSM_Arg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Sm_RP_PRI : public its::AsnBoolean
    {
    public:

        Sm_RP_PRI(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Sm_RP_PRI(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Sm_RP_PRI(const Sm_RP_PRI& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Sm_RP_PRI(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Sm_RP_PRI(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Sm_RP_PRI()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Sm_RP_PRI(*this);
        }

        virtual std::string GetName() const
        { return "Sm_RP_PRI"; }

    };



    class GprsSupportIndicator : public its::AsnNull
    {
    public:

        GprsSupportIndicator() : its::AsnNull(false)
        {
            Initialize();
        }

        GprsSupportIndicator(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        GprsSupportIndicator(const GprsSupportIndicator& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        GprsSupportIndicator(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~GprsSupportIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new GprsSupportIndicator(*this);
        }

        virtual std::string GetName() const
        { return "GprsSupportIndicator"; }

    };


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::AddressString AddressString;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::SM_RP_MTI SM_RP_MTI;


        typedef map_v9::SM_RP_SMEA SM_RP_SMEA;


////////// End Nested Class(es) //////////

    RoutingInfoForSM_Arg() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    RoutingInfoForSM_Arg(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    RoutingInfoForSM_Arg(const RoutingInfoForSM_Arg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    RoutingInfoForSM_Arg(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetSm_RP_PRIStaticDescription();
    static its::AsnDescObject* GetServiceCentreAddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetGprsSupportIndicatorStaticDescription();
    static its::AsnDescObject* GetSm_RP_MTIStaticDescription();
    static its::AsnDescObject* GetSm_RP_SMEAStaticDescription();

public:

    virtual ~RoutingInfoForSM_Arg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RoutingInfoForSM_Arg(*this);
    }

    virtual std::string GetName() const
    { return "RoutingInfoForSM_Arg"; }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(0, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(0, element);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(0));
    }

    void SetSm_RP_PRI(Sm_RP_PRI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_PRIStaticDescription());
        AddElement(1, element);
    }

    void SetSm_RP_PRI(const Sm_RP_PRI& element)
    {
        its::AsnObject& asnObject = const_cast<Sm_RP_PRI&>(element);
        asnObject.SetDescription(GetSm_RP_PRIStaticDescription());
        AddElement(1, element);
    }

    const Sm_RP_PRI& GetSm_RP_PRI() const
    {
        return static_cast<const Sm_RP_PRI&> (ElementAt(1));
    }

    void SetServiceCentreAddress(AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceCentreAddressStaticDescription());
        AddElement(2, element);
    }

    void SetServiceCentreAddress(const AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(element);
        asnObject.SetDescription(GetServiceCentreAddressStaticDescription());
        AddElement(2, element);
    }

    const AddressString& GetServiceCentreAddress() const
    {
        return static_cast<const AddressString&> (ElementAt(2));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(3, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(3);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(3));
    }

    void SetGprsSupportIndicator(GprsSupportIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGprsSupportIndicatorStaticDescription());
        AddElement(4, element);
    }

    void SetGprsSupportIndicator(const GprsSupportIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<GprsSupportIndicator&>(element);
        asnObject.SetDescription(GetGprsSupportIndicatorStaticDescription());
        AddElement(4, element);
    }

    bool OptionGprsSupportIndicator() const
    {
        return Contains(4);
    }

    const GprsSupportIndicator& GetGprsSupportIndicator() const
    {
        ITS_REQUIRE(OptionGprsSupportIndicator());
        return static_cast<const GprsSupportIndicator&> (ElementAt(4));
    }

    void SetSm_RP_MTI(SM_RP_MTI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_MTIStaticDescription());
        AddElement(5, element);
    }

    void SetSm_RP_MTI(const SM_RP_MTI& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_MTI&>(element);
        asnObject.SetDescription(GetSm_RP_MTIStaticDescription());
        AddElement(5, element);
    }

    bool OptionSm_RP_MTI() const
    {
        return Contains(5);
    }

    const SM_RP_MTI& GetSm_RP_MTI() const
    {
        ITS_REQUIRE(OptionSm_RP_MTI());
        return static_cast<const SM_RP_MTI&> (ElementAt(5));
    }

    void SetSm_RP_SMEA(SM_RP_SMEA* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSm_RP_SMEAStaticDescription());
        AddElement(6, element);
    }

    void SetSm_RP_SMEA(const SM_RP_SMEA& element)
    {
        its::AsnObject& asnObject = const_cast<SM_RP_SMEA&>(element);
        asnObject.SetDescription(GetSm_RP_SMEAStaticDescription());
        AddElement(6, element);
    }

    bool OptionSm_RP_SMEA() const
    {
        return Contains(6);
    }

    const SM_RP_SMEA& GetSm_RP_SMEA() const
    {
        ITS_REQUIRE(OptionSm_RP_SMEA());
        return static_cast<const SM_RP_SMEA&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_ROUTING_INFO_FOR_SM_ARG_H_)

