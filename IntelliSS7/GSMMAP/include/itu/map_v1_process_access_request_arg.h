//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_PROCESS_ACCESS_REQUEST_ARG_H_)
#define _MAP_V1_PROCESS_ACCESS_REQUEST_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <map_v1_subscriber_id.h>
#include <map_v1_cm_service_type.h>
#include <map_v1_access_connection_status.h>
#include <map_v1_cksn.h>



namespace map_v1 {



class ProcessAccessRequestArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::SubscriberId SubscriberId;


        typedef map_v1::CmServiceType CmServiceType;


        typedef map_v1::AccessConnectionStatus AccessConnectionStatus;


        typedef map_v1::CKSN CKSN;


////////// End Nested Class(es) //////////

    ProcessAccessRequestArg() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    ProcessAccessRequestArg(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    ProcessAccessRequestArg(const ProcessAccessRequestArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ProcessAccessRequestArg(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSubscriberIdStaticDescription();
    static its::AsnDescObject* GetCmServiceTypeStaticDescription();
    static its::AsnDescObject* GetAccessConnectionStatusStaticDescription();
    static its::AsnDescObject* GetCksnStaticDescription();

public:

    virtual ~ProcessAccessRequestArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ProcessAccessRequestArg(*this);
    }

    virtual std::string GetName() const
    { return "ProcessAccessRequestArg"; }

    void SetSubscriberId(SubscriberId* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberIdStaticDescription());
        AddElement(0, element);
    }

    void SetSubscriberId(const SubscriberId& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberId&>(element);
        asnObject.SetDescription(GetSubscriberIdStaticDescription());
        AddElement(0, element);
    }

    const SubscriberId& GetSubscriberId() const
    {
        return static_cast<const SubscriberId&> (ElementAt(0));
    }

    void SetCmServiceType(CmServiceType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCmServiceTypeStaticDescription());
        AddElement(1, element);
    }

    void SetCmServiceType(const CmServiceType& element)
    {
        its::AsnObject& asnObject = const_cast<CmServiceType&>(element);
        asnObject.SetDescription(GetCmServiceTypeStaticDescription());
        AddElement(1, element);
    }

    const CmServiceType& GetCmServiceType() const
    {
        return static_cast<const CmServiceType&> (ElementAt(1));
    }

    void SetAccessConnectionStatus(AccessConnectionStatus* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAccessConnectionStatusStaticDescription());
        AddElement(2, element);
    }

    void SetAccessConnectionStatus(const AccessConnectionStatus& element)
    {
        its::AsnObject& asnObject = const_cast<AccessConnectionStatus&>(element);
        asnObject.SetDescription(GetAccessConnectionStatusStaticDescription());
        AddElement(2, element);
    }

    const AccessConnectionStatus& GetAccessConnectionStatus() const
    {
        return static_cast<const AccessConnectionStatus&> (ElementAt(2));
    }

    void SetCksn(CKSN* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCksnStaticDescription());
        AddElement(3, element);
    }

    void SetCksn(const CKSN& element)
    {
        its::AsnObject& asnObject = const_cast<CKSN&>(element);
        asnObject.SetDescription(GetCksnStaticDescription());
        AddElement(3, element);
    }

    const CKSN& GetCksn() const
    {
        return static_cast<const CKSN&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_PROCESS_ACCESS_REQUEST_ARG_H_)

