//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_ANY_TIME_MODIFICATION_RES_H_)
#define _MAP_V9_ANY_TIME_MODIFICATION_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnChoice.h>

#include <map_v9_ext_ss_info_for_cse.h>
#include <map_v9_camel_subscription_info.h>
#include <map_v9_extension_container.h>
#include <map_v9_odb_info.h>



namespace map_v9 {



class AnyTimeModificationRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::Ext_SS_InfoFor_CSE Ext_SS_InfoFor_CSE;


        typedef map_v9::CAMEL_SubscriptionInfo CAMEL_SubscriptionInfo;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::ODB_Info ODB_Info;


////////// End Nested Class(es) //////////

    AnyTimeModificationRes() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    AnyTimeModificationRes(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    AnyTimeModificationRes(const AnyTimeModificationRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    AnyTimeModificationRes(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetSs_InfoFor_CSEStaticDescription();
    static its::AsnDescObject* GetCamel_SubscriptionInfoStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetOdb_InfoStaticDescription();

public:

    virtual ~AnyTimeModificationRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new AnyTimeModificationRes(*this);
    }

    virtual std::string GetName() const
    { return "AnyTimeModificationRes"; }

    void SetSs_InfoFor_CSE(Ext_SS_InfoFor_CSE* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_InfoFor_CSEStaticDescription());
        AddElement(0, element);
    }

    void SetSs_InfoFor_CSE(const Ext_SS_InfoFor_CSE& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_SS_InfoFor_CSE&>(element);
        asnObject.SetDescription(GetSs_InfoFor_CSEStaticDescription());
        AddElement(0, element);
    }

    bool OptionSs_InfoFor_CSE() const
    {
        return Contains(0);
    }

    const Ext_SS_InfoFor_CSE& GetSs_InfoFor_CSE() const
    {
        ITS_REQUIRE(OptionSs_InfoFor_CSE());
        return static_cast<const Ext_SS_InfoFor_CSE&> (ElementAt(0));
    }

    void SetCamel_SubscriptionInfo(CAMEL_SubscriptionInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCamel_SubscriptionInfoStaticDescription());
        AddElement(1, element);
    }

    void SetCamel_SubscriptionInfo(const CAMEL_SubscriptionInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CAMEL_SubscriptionInfo&>(element);
        asnObject.SetDescription(GetCamel_SubscriptionInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionCamel_SubscriptionInfo() const
    {
        return Contains(1);
    }

    const CAMEL_SubscriptionInfo& GetCamel_SubscriptionInfo() const
    {
        ITS_REQUIRE(OptionCamel_SubscriptionInfo());
        return static_cast<const CAMEL_SubscriptionInfo&> (ElementAt(1));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(2, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(2);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(2));
    }

    void SetOdb_Info(ODB_Info* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOdb_InfoStaticDescription());
        AddElement(3, element);
    }

    void SetOdb_Info(const ODB_Info& element)
    {
        its::AsnObject& asnObject = const_cast<ODB_Info&>(element);
        asnObject.SetDescription(GetOdb_InfoStaticDescription());
        AddElement(3, element);
    }

    bool OptionOdb_Info() const
    {
        return Contains(3);
    }

    const ODB_Info& GetOdb_Info() const
    {
        ITS_REQUIRE(OptionOdb_Info());
        return static_cast<const ODB_Info&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_ANY_TIME_MODIFICATION_RES_H_)

