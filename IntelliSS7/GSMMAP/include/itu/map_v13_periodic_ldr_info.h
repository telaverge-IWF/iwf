//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_PERIODIC_LDR_INFO_H_)
#define _MAP_V13_PERIODIC_LDR_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>

#include <map_v13_reporting_amount.h>
#include <map_v13_reporting_interval.h>



namespace map_v13 {



class PeriodicLDRInfo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::ReportingAmount ReportingAmount;


        typedef map_v13::ReportingInterval ReportingInterval;


////////// End Nested Class(es) //////////

    PeriodicLDRInfo() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    PeriodicLDRInfo(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    PeriodicLDRInfo(const PeriodicLDRInfo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    PeriodicLDRInfo(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetReportingAmountStaticDescription();
    static its::AsnDescObject* GetReportingIntervalStaticDescription();

public:

    virtual ~PeriodicLDRInfo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new PeriodicLDRInfo(*this);
    }

    virtual std::string GetName() const
    { return "PeriodicLDRInfo"; }

    void SetReportingAmount(ReportingAmount* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReportingAmountStaticDescription());
        AddElement(0, element);
    }

    void SetReportingAmount(const ReportingAmount& element)
    {
        its::AsnObject& asnObject = const_cast<ReportingAmount&>(element);
        asnObject.SetDescription(GetReportingAmountStaticDescription());
        AddElement(0, element);
    }

    const ReportingAmount& GetReportingAmount() const
    {
        return static_cast<const ReportingAmount&> (ElementAt(0));
    }

    void SetReportingInterval(ReportingInterval* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReportingIntervalStaticDescription());
        AddElement(1, element);
    }

    void SetReportingInterval(const ReportingInterval& element)
    {
        its::AsnObject& asnObject = const_cast<ReportingInterval&>(element);
        asnObject.SetDescription(GetReportingIntervalStaticDescription());
        AddElement(1, element);
    }

    const ReportingInterval& GetReportingInterval() const
    {
        return static_cast<const ReportingInterval&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_PERIODIC_LDR_INFO_H_)

