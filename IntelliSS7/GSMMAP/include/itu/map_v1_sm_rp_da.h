//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V1_SM_RP_DA_H_)
#define _MAP_V1_SM_RP_DA_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <map_v1_imsi.h>
#include <map_v1_l_ms_id.h>
#include <map_v1_isdn_address_string.h>
#include <map_v1_address_string.h>



namespace map_v1 {



class SM_RP_DA : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v1::IMSI IMSI;


        typedef map_v1::LMsId LMsId;


        typedef map_v1::ISDN_AddressString ISDN_AddressString;


        typedef map_v1::AddressString AddressString;


////////// End Nested Class(es) //////////

    SM_RP_DA() : its::AsnChoice(false)
    {
        Initialize();
    }

    SM_RP_DA(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    SM_RP_DA(const SM_RP_DA& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    SM_RP_DA(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    SM_RP_DA(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetLMsIdStaticDescription();
    static its::AsnDescObject* GetRoamingNumberStaticDescription();
    static its::AsnDescObject* GetServiceCenterAddressStaticDescription();

public:

    virtual ~SM_RP_DA()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SM_RP_DA(*this);
    }

    virtual std::string GetName() const
    { return "SM_RP_DA"; }

    void SetChoiceImsi(IMSI* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceImsi(const IMSI& choice)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(choice);
        asnObject.SetDescription(GetImsiStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceImsi() const
    {
        return Contains(GetImsiStaticDescription()->TagIdentity());
    }

    const IMSI& GetChoiceImsi() const
    {
        ITS_REQUIRE(ChoiceImsi());
        return static_cast<const IMSI&> (GetChoice());
    }

    void SetChoiceLMsId(LMsId* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLMsIdStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLMsId(const LMsId& choice)
    {
        its::AsnObject& asnObject = const_cast<LMsId&>(choice);
        asnObject.SetDescription(GetLMsIdStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLMsId() const
    {
        return Contains(GetLMsIdStaticDescription()->TagIdentity());
    }

    const LMsId& GetChoiceLMsId() const
    {
        ITS_REQUIRE(ChoiceLMsId());
        return static_cast<const LMsId&> (GetChoice());
    }

    void SetChoiceRoamingNumber(ISDN_AddressString* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRoamingNumberStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRoamingNumber(const ISDN_AddressString& choice)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(choice);
        asnObject.SetDescription(GetRoamingNumberStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRoamingNumber() const
    {
        return Contains(GetRoamingNumberStaticDescription()->TagIdentity());
    }

    const ISDN_AddressString& GetChoiceRoamingNumber() const
    {
        ITS_REQUIRE(ChoiceRoamingNumber());
        return static_cast<const ISDN_AddressString&> (GetChoice());
    }

    void SetChoiceServiceCenterAddress(AddressString* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetServiceCenterAddressStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceServiceCenterAddress(const AddressString& choice)
    {
        its::AsnObject& asnObject = const_cast<AddressString&>(choice);
        asnObject.SetDescription(GetServiceCenterAddressStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceServiceCenterAddress() const
    {
        return Contains(GetServiceCenterAddressStaticDescription()->TagIdentity());
    }

    const AddressString& GetChoiceServiceCenterAddress() const
    {
        ITS_REQUIRE(ChoiceServiceCenterAddress());
        return static_cast<const AddressString&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V1_SM_RP_DA_H_)

