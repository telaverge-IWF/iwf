//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_MAP_PROTECTED_DIALOGUE_PDU_H_)
#define _MAP_V9_MAP_PROTECTED_DIALOGUE_PDU_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnObjectIdentifier.h>
#include <AsnOctetString.h>

#include <map_v9_security_header.h>
#include <map_v9_protected_payload.h>



namespace map_v9 {



class MAP_ProtectedDialoguePDU : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class EncapsulatedAC : public its::AsnObjectIdentifier
    {
    public:

        EncapsulatedAC() : its::AsnObjectIdentifier(false)
        {
            Initialize();
        }

        EncapsulatedAC(const std::vector<long>& array) : its::AsnObjectIdentifier(array, false)
        {
            Initialize();
        }

        EncapsulatedAC(its::Octets& octets) : its::AsnObjectIdentifier(false)
        {
            Initialize();
            Decode(octets);
        }

        EncapsulatedAC(const EncapsulatedAC& rhs) : its::AsnObjectIdentifier(rhs)
        {
            // Nothing to do.
        }

        EncapsulatedAC(its::AsnDescObject* description) : its::AsnObjectIdentifier(description)
        {
            // Nothing to do.
        }

        EncapsulatedAC(its::AsnDescObject* description, const std::vector<long>& array) : its::AsnObjectIdentifier(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~EncapsulatedAC()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new EncapsulatedAC(*this);
        }

        virtual std::string GetName() const
        { return "EncapsulatedAC"; }

    };


        typedef map_v9::SecurityHeader SecurityHeader;


        typedef map_v9::ProtectedPayload ProtectedPayload;


////////// End Nested Class(es) //////////

    MAP_ProtectedDialoguePDU() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    MAP_ProtectedDialoguePDU(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    MAP_ProtectedDialoguePDU(const MAP_ProtectedDialoguePDU& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    MAP_ProtectedDialoguePDU(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetEncapsulatedACStaticDescription();
    static its::AsnDescObject* GetSecurityHeaderStaticDescription();
    static its::AsnDescObject* GetProtectedPayloadStaticDescription();

public:

    virtual ~MAP_ProtectedDialoguePDU()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MAP_ProtectedDialoguePDU(*this);
    }

    virtual std::string GetName() const
    { return "MAP_ProtectedDialoguePDU"; }

    void SetEncapsulatedAC(EncapsulatedAC* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEncapsulatedACStaticDescription());
        AddElement(0, element);
    }

    void SetEncapsulatedAC(const EncapsulatedAC& element)
    {
        its::AsnObject& asnObject = const_cast<EncapsulatedAC&>(element);
        asnObject.SetDescription(GetEncapsulatedACStaticDescription());
        AddElement(0, element);
    }

    const EncapsulatedAC& GetEncapsulatedAC() const
    {
        return static_cast<const EncapsulatedAC&> (ElementAt(0));
    }

    void SetSecurityHeader(SecurityHeader* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSecurityHeaderStaticDescription());
        AddElement(1, element);
    }

    void SetSecurityHeader(const SecurityHeader& element)
    {
        its::AsnObject& asnObject = const_cast<SecurityHeader&>(element);
        asnObject.SetDescription(GetSecurityHeaderStaticDescription());
        AddElement(1, element);
    }

    bool OptionSecurityHeader() const
    {
        return Contains(1);
    }

    const SecurityHeader& GetSecurityHeader() const
    {
        ITS_REQUIRE(OptionSecurityHeader());
        return static_cast<const SecurityHeader&> (ElementAt(1));
    }

    void SetProtectedPayload(ProtectedPayload* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetProtectedPayloadStaticDescription());
        AddElement(2, element);
    }

    void SetProtectedPayload(const ProtectedPayload& element)
    {
        its::AsnObject& asnObject = const_cast<ProtectedPayload&>(element);
        asnObject.SetDescription(GetProtectedPayloadStaticDescription());
        AddElement(2, element);
    }

    bool OptionProtectedPayload() const
    {
        return Contains(2);
    }

    const ProtectedPayload& GetProtectedPayload() const
    {
        ITS_REQUIRE(OptionProtectedPayload());
        return static_cast<const ProtectedPayload&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_MAP_PROTECTED_DIALOGUE_PDU_H_)

