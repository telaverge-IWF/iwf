//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_OFFERED_CAMEL4CS_IS_H_)
#define _MAP_V9_OFFERED_CAMEL4CS_IS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnBitString.h>



namespace map_v9 {



class OfferedCamel4CSIs : public its::AsnBitString
{
public:

    OfferedCamel4CSIs() : its::AsnBitString(false)
    {
        Initialize();
    }

    OfferedCamel4CSIs(const std::vector<bool>& array) : its::AsnBitString(array, false)
    {
        Initialize();
    }

    OfferedCamel4CSIs(its::Octets& octets) : its::AsnBitString(false)
    {
        Initialize();
        Decode(octets);
    }

    OfferedCamel4CSIs(const OfferedCamel4CSIs& rhs) : its::AsnBitString(rhs)
    {
        // Nothing to do.
    }

    OfferedCamel4CSIs(its::AsnDescObject* description) : its::AsnBitString(description)
    {
        // Nothing to do.
    }

    OfferedCamel4CSIs(its::AsnDescObject* description, const std::vector<bool>& array) : its::AsnBitString(description, array)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~OfferedCamel4CSIs()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new OfferedCamel4CSIs(*this);
    }

    virtual std::string GetName() const
    { return "OfferedCamel4CSIs"; }

    void SetPsi_enhancements()
    { Set(6); }

    void ResetPsi_enhancements()
    { Reset(6); }

    bool IsPsi_enhancementsSet() const
    { return IsSet(6); }

    bool IsPsi_enhancementsDefined() const
    { return 6 < GetSize(); }

    void SetMg_csi()
    { Set(5); }

    void ResetMg_csi()
    { Reset(5); }

    bool IsMg_csiSet() const
    { return IsSet(5); }

    bool IsMg_csiDefined() const
    { return 5 < GetSize(); }

    void SetMt_sms_csi()
    { Set(4); }

    void ResetMt_sms_csi()
    { Reset(4); }

    bool IsMt_sms_csiSet() const
    { return IsSet(4); }

    bool IsMt_sms_csiDefined() const
    { return 4 < GetSize(); }

    void SetT_csi()
    { Set(3); }

    void ResetT_csi()
    { Reset(3); }

    bool IsT_csiSet() const
    { return IsSet(3); }

    bool IsT_csiDefined() const
    { return 3 < GetSize(); }

    void SetVt_csi()
    { Set(2); }

    void ResetVt_csi()
    { Reset(2); }

    bool IsVt_csiSet() const
    { return IsSet(2); }

    bool IsVt_csiDefined() const
    { return 2 < GetSize(); }

    void SetD_csi()
    { Set(1); }

    void ResetD_csi()
    { Reset(1); }

    bool IsD_csiSet() const
    { return IsSet(1); }

    bool IsD_csiDefined() const
    { return 1 < GetSize(); }

    void SetO_csi()
    { Set(0); }

    void ResetO_csi()
    { Reset(0); }

    bool IsO_csiSet() const
    { return IsSet(0); }

    bool IsO_csiDefined() const
    { return 0 < GetSize(); }

};



} // namespace.

#endif    // !defined(_MAP_V9_OFFERED_CAMEL4CS_IS_H_)

