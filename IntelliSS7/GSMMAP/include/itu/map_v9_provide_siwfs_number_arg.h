//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_PROVIDE_SIWFS_NUMBER_ARG_H_)
#define _MAP_V9_PROVIDE_SIWFS_NUMBER_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <map_v9_external_signal_info.h>
#include <map_v9_call_direction.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_extension_container.h>



namespace map_v9 {



class ProvideSIWFSNumberArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v9::ExternalSignalInfo ExternalSignalInfo;


        typedef map_v9::CallDirection CallDirection;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    ProvideSIWFSNumberArg() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    ProvideSIWFSNumberArg(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    ProvideSIWFSNumberArg(const ProvideSIWFSNumberArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ProvideSIWFSNumberArg(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGsm_BearerCapabilityStaticDescription();
    static its::AsnDescObject* GetIsdn_BearerCapabilityStaticDescription();
    static its::AsnDescObject* GetCall_DirectionStaticDescription();
    static its::AsnDescObject* GetB_Subscriber_AddressStaticDescription();
    static its::AsnDescObject* GetChosenChannelStaticDescription();
    static its::AsnDescObject* GetLowerLayerCompatibilityStaticDescription();
    static its::AsnDescObject* GetHighLayerCompatibilityStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~ProvideSIWFSNumberArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ProvideSIWFSNumberArg(*this);
    }

    virtual std::string GetName() const
    { return "ProvideSIWFSNumberArg"; }

    void SetGsm_BearerCapability(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGsm_BearerCapabilityStaticDescription());
        AddElement(0, element);
    }

    void SetGsm_BearerCapability(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetGsm_BearerCapabilityStaticDescription());
        AddElement(0, element);
    }

    const ExternalSignalInfo& GetGsm_BearerCapability() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(0));
    }

    void SetIsdn_BearerCapability(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIsdn_BearerCapabilityStaticDescription());
        AddElement(1, element);
    }

    void SetIsdn_BearerCapability(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetIsdn_BearerCapabilityStaticDescription());
        AddElement(1, element);
    }

    const ExternalSignalInfo& GetIsdn_BearerCapability() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(1));
    }

    void SetCall_Direction(CallDirection* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCall_DirectionStaticDescription());
        AddElement(2, element);
    }

    void SetCall_Direction(const CallDirection& element)
    {
        its::AsnObject& asnObject = const_cast<CallDirection&>(element);
        asnObject.SetDescription(GetCall_DirectionStaticDescription());
        AddElement(2, element);
    }

    const CallDirection& GetCall_Direction() const
    {
        return static_cast<const CallDirection&> (ElementAt(2));
    }

    void SetB_Subscriber_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetB_Subscriber_AddressStaticDescription());
        AddElement(3, element);
    }

    void SetB_Subscriber_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetB_Subscriber_AddressStaticDescription());
        AddElement(3, element);
    }

    const ISDN_AddressString& GetB_Subscriber_Address() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(3));
    }

    void SetChosenChannel(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChosenChannelStaticDescription());
        AddElement(4, element);
    }

    void SetChosenChannel(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetChosenChannelStaticDescription());
        AddElement(4, element);
    }

    const ExternalSignalInfo& GetChosenChannel() const
    {
        return static_cast<const ExternalSignalInfo&> (ElementAt(4));
    }

    void SetLowerLayerCompatibility(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLowerLayerCompatibilityStaticDescription());
        AddElement(5, element);
    }

    void SetLowerLayerCompatibility(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetLowerLayerCompatibilityStaticDescription());
        AddElement(5, element);
    }

    bool OptionLowerLayerCompatibility() const
    {
        return Contains(5);
    }

    const ExternalSignalInfo& GetLowerLayerCompatibility() const
    {
        ITS_REQUIRE(OptionLowerLayerCompatibility());
        return static_cast<const ExternalSignalInfo&> (ElementAt(5));
    }

    void SetHighLayerCompatibility(ExternalSignalInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(6, element);
    }

    void SetHighLayerCompatibility(const ExternalSignalInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExternalSignalInfo&>(element);
        asnObject.SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(6, element);
    }

    bool OptionHighLayerCompatibility() const
    {
        return Contains(6);
    }

    const ExternalSignalInfo& GetHighLayerCompatibility() const
    {
        ITS_REQUIRE(OptionHighLayerCompatibility());
        return static_cast<const ExternalSignalInfo&> (ElementAt(6));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(7, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(7);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_PROVIDE_SIWFS_NUMBER_ARG_H_)

