//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V9_SEND_ROUTING_INFO_RES_H_)
#define _MAP_V9_SEND_ROUTING_INFO_RES_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnSequenceOf.h>
#include <AsnEnumerated.h>
#include <AsnInteger.h>
#include <AsnBitString.h>

#include <map_v9_imsi.h>
#include <map_v9_extended_routing_info.h>
#include <map_v9_cug_check_info.h>
#include <map_v9_subscriber_info.h>
#include <map_v9_ss_list.h>
#include <map_v9_ext_basic_service_code.h>
#include <map_v9_isdn_address_string.h>
#include <map_v9_extension_container.h>
#include <map_v9_naea_preferred_ci.h>
#include <map_v9_ccbs_indicators.h>
#include <map_v9_number_portability_status.h>
#include <map_v9_ist_alert_timer_value.h>
#include <map_v9_supported_camel_phases.h>
#include <map_v9_offered_camel4cs_is.h>
#include <map_v9_routing_info.h>
#include <map_v9_allowed_services.h>
#include <map_v9_unavailability_cause.h>



namespace map_v9 {



class SendRoutingInfoRes : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class CugSubscriptionFlag : public its::AsnNull
    {
    public:

        CugSubscriptionFlag() : its::AsnNull(false)
        {
            Initialize();
        }

        CugSubscriptionFlag(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CugSubscriptionFlag(const CugSubscriptionFlag& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CugSubscriptionFlag(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CugSubscriptionFlag()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CugSubscriptionFlag(*this);
        }

        virtual std::string GetName() const
        { return "CugSubscriptionFlag"; }

    };



    class ForwardingInterrogationRequired : public its::AsnNull
    {
    public:

        ForwardingInterrogationRequired() : its::AsnNull(false)
        {
            Initialize();
        }

        ForwardingInterrogationRequired(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ForwardingInterrogationRequired(const ForwardingInterrogationRequired& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ForwardingInterrogationRequired(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ForwardingInterrogationRequired()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ForwardingInterrogationRequired(*this);
        }

        virtual std::string GetName() const
        { return "ForwardingInterrogationRequired"; }

    };



    class ReleaseResourcesSupported : public its::AsnNull
    {
    public:

        ReleaseResourcesSupported() : its::AsnNull(false)
        {
            Initialize();
        }

        ReleaseResourcesSupported(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        ReleaseResourcesSupported(const ReleaseResourcesSupported& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        ReleaseResourcesSupported(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ReleaseResourcesSupported()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ReleaseResourcesSupported(*this);
        }

        virtual std::string GetName() const
        { return "ReleaseResourcesSupported"; }

    };


        typedef map_v9::IMSI IMSI;


        typedef map_v9::ExtendedRoutingInfo ExtendedRoutingInfo;


        typedef map_v9::CUG_CheckInfo CUG_CheckInfo;


        typedef map_v9::SubscriberInfo SubscriberInfo;


        typedef map_v9::SS_List SS_List;


        typedef map_v9::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef map_v9::ISDN_AddressString ISDN_AddressString;


        typedef map_v9::ExtensionContainer ExtensionContainer;


        typedef map_v9::NAEA_PreferredCI NAEA_PreferredCI;


        typedef map_v9::CCBS_Indicators CCBS_Indicators;


        typedef map_v9::NumberPortabilityStatus NumberPortabilityStatus;


        typedef map_v9::IST_AlertTimerValue IST_AlertTimerValue;


        typedef map_v9::SupportedCamelPhases SupportedCamelPhases;


        typedef map_v9::OfferedCamel4CSIs OfferedCamel4CSIs;


        typedef map_v9::RoutingInfo RoutingInfo;


        typedef map_v9::AllowedServices AllowedServices;


        typedef map_v9::UnavailabilityCause UnavailabilityCause;


////////// End Nested Class(es) //////////

    SendRoutingInfoRes() : its::AsnSequence(23, false)
    {
        Initialize();
    }

    SendRoutingInfoRes(its::Octets& octets) : its::AsnSequence(23, false)
    {
        Initialize();
        Decode(octets);
    }

    SendRoutingInfoRes(const SendRoutingInfoRes& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    SendRoutingInfoRes(its::AsnDescObject* description) : its::AsnSequence(23, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetImsiStaticDescription();
    static its::AsnDescObject* GetExtendedRoutingInfoStaticDescription();
    static its::AsnDescObject* GetCug_CheckInfoStaticDescription();
    static its::AsnDescObject* GetCugSubscriptionFlagStaticDescription();
    static its::AsnDescObject* GetSubscriberInfoStaticDescription();
    static its::AsnDescObject* GetSs_ListStaticDescription();
    static its::AsnDescObject* GetBasicServiceStaticDescription();
    static its::AsnDescObject* GetForwardingInterrogationRequiredStaticDescription();
    static its::AsnDescObject* GetVmsc_AddressStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();
    static its::AsnDescObject* GetNaea_PreferredCIStaticDescription();
    static its::AsnDescObject* GetCcbs_IndicatorsStaticDescription();
    static its::AsnDescObject* GetMsisdnStaticDescription();
    static its::AsnDescObject* GetNumberPortabilityStatusStaticDescription();
    static its::AsnDescObject* GetIstAlertTimerStaticDescription();
    static its::AsnDescObject* GetSupportedCamelPhasesInVMSCStaticDescription();
    static its::AsnDescObject* GetOfferedCamel4CSIsInVMSCStaticDescription();
    static its::AsnDescObject* GetRoutingInfo2StaticDescription();
    static its::AsnDescObject* GetSs_List2StaticDescription();
    static its::AsnDescObject* GetBasicService2StaticDescription();
    static its::AsnDescObject* GetAllowedServicesStaticDescription();
    static its::AsnDescObject* GetUnavailabilityCauseStaticDescription();
    static its::AsnDescObject* GetReleaseResourcesSupportedStaticDescription();

public:

    virtual ~SendRoutingInfoRes()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SendRoutingInfoRes(*this);
    }

    virtual std::string GetName() const
    { return "SendRoutingInfoRes"; }

    void SetImsi(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    void SetImsi(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetImsiStaticDescription());
        AddElement(0, element);
    }

    bool OptionImsi() const
    {
        return Contains(0);
    }

    const IMSI& GetImsi() const
    {
        ITS_REQUIRE(OptionImsi());
        return static_cast<const IMSI&> (ElementAt(0));
    }

    void SetExtendedRoutingInfo(ExtendedRoutingInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtendedRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    void SetExtendedRoutingInfo(const ExtendedRoutingInfo& element)
    {
        its::AsnObject& asnObject = const_cast<ExtendedRoutingInfo&>(element);
        asnObject.SetDescription(GetExtendedRoutingInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionExtendedRoutingInfo() const
    {
        return Contains(1);
    }

    const ExtendedRoutingInfo& GetExtendedRoutingInfo() const
    {
        ITS_REQUIRE(OptionExtendedRoutingInfo());
        return static_cast<const ExtendedRoutingInfo&> (ElementAt(1));
    }

    void SetCug_CheckInfo(CUG_CheckInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(2, element);
    }

    void SetCug_CheckInfo(const CUG_CheckInfo& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_CheckInfo&>(element);
        asnObject.SetDescription(GetCug_CheckInfoStaticDescription());
        AddElement(2, element);
    }

    bool OptionCug_CheckInfo() const
    {
        return Contains(2);
    }

    const CUG_CheckInfo& GetCug_CheckInfo() const
    {
        ITS_REQUIRE(OptionCug_CheckInfo());
        return static_cast<const CUG_CheckInfo&> (ElementAt(2));
    }

    void SetCugSubscriptionFlag(CugSubscriptionFlag* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCugSubscriptionFlagStaticDescription());
        AddElement(3, element);
    }

    void SetCugSubscriptionFlag(const CugSubscriptionFlag& element)
    {
        its::AsnObject& asnObject = const_cast<CugSubscriptionFlag&>(element);
        asnObject.SetDescription(GetCugSubscriptionFlagStaticDescription());
        AddElement(3, element);
    }

    bool OptionCugSubscriptionFlag() const
    {
        return Contains(3);
    }

    const CugSubscriptionFlag& GetCugSubscriptionFlag() const
    {
        ITS_REQUIRE(OptionCugSubscriptionFlag());
        return static_cast<const CugSubscriptionFlag&> (ElementAt(3));
    }

    void SetSubscriberInfo(SubscriberInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberInfoStaticDescription());
        AddElement(4, element);
    }

    void SetSubscriberInfo(const SubscriberInfo& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberInfo&>(element);
        asnObject.SetDescription(GetSubscriberInfoStaticDescription());
        AddElement(4, element);
    }

    bool OptionSubscriberInfo() const
    {
        return Contains(4);
    }

    const SubscriberInfo& GetSubscriberInfo() const
    {
        ITS_REQUIRE(OptionSubscriberInfo());
        return static_cast<const SubscriberInfo&> (ElementAt(4));
    }

    void SetSs_List(SS_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_ListStaticDescription());
        AddElement(5, element);
    }

    void SetSs_List(const SS_List& element)
    {
        its::AsnObject& asnObject = const_cast<SS_List&>(element);
        asnObject.SetDescription(GetSs_ListStaticDescription());
        AddElement(5, element);
    }

    bool OptionSs_List() const
    {
        return Contains(5);
    }

    const SS_List& GetSs_List() const
    {
        ITS_REQUIRE(OptionSs_List());
        return static_cast<const SS_List&> (ElementAt(5));
    }

    void SetBasicService(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicServiceStaticDescription());
        AddElement(6, element);
    }

    void SetBasicService(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicServiceStaticDescription());
        AddElement(6, element);
    }

    bool OptionBasicService() const
    {
        return Contains(6);
    }

    const Ext_BasicServiceCode& GetBasicService() const
    {
        ITS_REQUIRE(OptionBasicService());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(6));
    }

    void SetForwardingInterrogationRequired(ForwardingInterrogationRequired* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardingInterrogationRequiredStaticDescription());
        AddElement(7, element);
    }

    void SetForwardingInterrogationRequired(const ForwardingInterrogationRequired& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardingInterrogationRequired&>(element);
        asnObject.SetDescription(GetForwardingInterrogationRequiredStaticDescription());
        AddElement(7, element);
    }

    bool OptionForwardingInterrogationRequired() const
    {
        return Contains(7);
    }

    const ForwardingInterrogationRequired& GetForwardingInterrogationRequired() const
    {
        ITS_REQUIRE(OptionForwardingInterrogationRequired());
        return static_cast<const ForwardingInterrogationRequired&> (ElementAt(7));
    }

    void SetVmsc_Address(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVmsc_AddressStaticDescription());
        AddElement(8, element);
    }

    void SetVmsc_Address(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetVmsc_AddressStaticDescription());
        AddElement(8, element);
    }

    bool OptionVmsc_Address() const
    {
        return Contains(8);
    }

    const ISDN_AddressString& GetVmsc_Address() const
    {
        ITS_REQUIRE(OptionVmsc_Address());
        return static_cast<const ISDN_AddressString&> (ElementAt(8));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(9, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(9, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(9);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(9));
    }

    void SetNaea_PreferredCI(NAEA_PreferredCI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNaea_PreferredCIStaticDescription());
        AddElement(10, element);
    }

    void SetNaea_PreferredCI(const NAEA_PreferredCI& element)
    {
        its::AsnObject& asnObject = const_cast<NAEA_PreferredCI&>(element);
        asnObject.SetDescription(GetNaea_PreferredCIStaticDescription());
        AddElement(10, element);
    }

    bool OptionNaea_PreferredCI() const
    {
        return Contains(10);
    }

    const NAEA_PreferredCI& GetNaea_PreferredCI() const
    {
        ITS_REQUIRE(OptionNaea_PreferredCI());
        return static_cast<const NAEA_PreferredCI&> (ElementAt(10));
    }

    void SetCcbs_Indicators(CCBS_Indicators* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCcbs_IndicatorsStaticDescription());
        AddElement(11, element);
    }

    void SetCcbs_Indicators(const CCBS_Indicators& element)
    {
        its::AsnObject& asnObject = const_cast<CCBS_Indicators&>(element);
        asnObject.SetDescription(GetCcbs_IndicatorsStaticDescription());
        AddElement(11, element);
    }

    bool OptionCcbs_Indicators() const
    {
        return Contains(11);
    }

    const CCBS_Indicators& GetCcbs_Indicators() const
    {
        ITS_REQUIRE(OptionCcbs_Indicators());
        return static_cast<const CCBS_Indicators&> (ElementAt(11));
    }

    void SetMsisdn(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMsisdnStaticDescription());
        AddElement(12, element);
    }

    void SetMsisdn(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMsisdnStaticDescription());
        AddElement(12, element);
    }

    bool OptionMsisdn() const
    {
        return Contains(12);
    }

    const ISDN_AddressString& GetMsisdn() const
    {
        ITS_REQUIRE(OptionMsisdn());
        return static_cast<const ISDN_AddressString&> (ElementAt(12));
    }

    void SetNumberPortabilityStatus(NumberPortabilityStatus* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNumberPortabilityStatusStaticDescription());
        AddElement(13, element);
    }

    void SetNumberPortabilityStatus(const NumberPortabilityStatus& element)
    {
        its::AsnObject& asnObject = const_cast<NumberPortabilityStatus&>(element);
        asnObject.SetDescription(GetNumberPortabilityStatusStaticDescription());
        AddElement(13, element);
    }

    bool OptionNumberPortabilityStatus() const
    {
        return Contains(13);
    }

    const NumberPortabilityStatus& GetNumberPortabilityStatus() const
    {
        ITS_REQUIRE(OptionNumberPortabilityStatus());
        return static_cast<const NumberPortabilityStatus&> (ElementAt(13));
    }

    void SetIstAlertTimer(IST_AlertTimerValue* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIstAlertTimerStaticDescription());
        AddElement(14, element);
    }

    void SetIstAlertTimer(const IST_AlertTimerValue& element)
    {
        its::AsnObject& asnObject = const_cast<IST_AlertTimerValue&>(element);
        asnObject.SetDescription(GetIstAlertTimerStaticDescription());
        AddElement(14, element);
    }

    bool OptionIstAlertTimer() const
    {
        return Contains(14);
    }

    const IST_AlertTimerValue& GetIstAlertTimer() const
    {
        ITS_REQUIRE(OptionIstAlertTimer());
        return static_cast<const IST_AlertTimerValue&> (ElementAt(14));
    }

    void SetSupportedCamelPhasesInVMSC(SupportedCamelPhases* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSupportedCamelPhasesInVMSCStaticDescription());
        AddElement(15, element);
    }

    void SetSupportedCamelPhasesInVMSC(const SupportedCamelPhases& element)
    {
        its::AsnObject& asnObject = const_cast<SupportedCamelPhases&>(element);
        asnObject.SetDescription(GetSupportedCamelPhasesInVMSCStaticDescription());
        AddElement(15, element);
    }

    bool OptionSupportedCamelPhasesInVMSC() const
    {
        return Contains(15);
    }

    const SupportedCamelPhases& GetSupportedCamelPhasesInVMSC() const
    {
        ITS_REQUIRE(OptionSupportedCamelPhasesInVMSC());
        return static_cast<const SupportedCamelPhases&> (ElementAt(15));
    }

    void SetOfferedCamel4CSIsInVMSC(OfferedCamel4CSIs* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOfferedCamel4CSIsInVMSCStaticDescription());
        AddElement(16, element);
    }

    void SetOfferedCamel4CSIsInVMSC(const OfferedCamel4CSIs& element)
    {
        its::AsnObject& asnObject = const_cast<OfferedCamel4CSIs&>(element);
        asnObject.SetDescription(GetOfferedCamel4CSIsInVMSCStaticDescription());
        AddElement(16, element);
    }

    bool OptionOfferedCamel4CSIsInVMSC() const
    {
        return Contains(16);
    }

    const OfferedCamel4CSIs& GetOfferedCamel4CSIsInVMSC() const
    {
        ITS_REQUIRE(OptionOfferedCamel4CSIsInVMSC());
        return static_cast<const OfferedCamel4CSIs&> (ElementAt(16));
    }

    void SetRoutingInfo2(RoutingInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRoutingInfo2StaticDescription());
        AddElement(17, element);
    }

    void SetRoutingInfo2(const RoutingInfo& element)
    {
        its::AsnObject& asnObject = const_cast<RoutingInfo&>(element);
        asnObject.SetDescription(GetRoutingInfo2StaticDescription());
        AddElement(17, element);
    }

    bool OptionRoutingInfo2() const
    {
        return Contains(17);
    }

    const RoutingInfo& GetRoutingInfo2() const
    {
        ITS_REQUIRE(OptionRoutingInfo2());
        return static_cast<const RoutingInfo&> (ElementAt(17));
    }

    void SetSs_List2(SS_List* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSs_List2StaticDescription());
        AddElement(18, element);
    }

    void SetSs_List2(const SS_List& element)
    {
        its::AsnObject& asnObject = const_cast<SS_List&>(element);
        asnObject.SetDescription(GetSs_List2StaticDescription());
        AddElement(18, element);
    }

    bool OptionSs_List2() const
    {
        return Contains(18);
    }

    const SS_List& GetSs_List2() const
    {
        ITS_REQUIRE(OptionSs_List2());
        return static_cast<const SS_List&> (ElementAt(18));
    }

    void SetBasicService2(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBasicService2StaticDescription());
        AddElement(19, element);
    }

    void SetBasicService2(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetBasicService2StaticDescription());
        AddElement(19, element);
    }

    bool OptionBasicService2() const
    {
        return Contains(19);
    }

    const Ext_BasicServiceCode& GetBasicService2() const
    {
        ITS_REQUIRE(OptionBasicService2());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(19));
    }

    void SetAllowedServices(AllowedServices* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAllowedServicesStaticDescription());
        AddElement(20, element);
    }

    void SetAllowedServices(const AllowedServices& element)
    {
        its::AsnObject& asnObject = const_cast<AllowedServices&>(element);
        asnObject.SetDescription(GetAllowedServicesStaticDescription());
        AddElement(20, element);
    }

    bool OptionAllowedServices() const
    {
        return Contains(20);
    }

    const AllowedServices& GetAllowedServices() const
    {
        ITS_REQUIRE(OptionAllowedServices());
        return static_cast<const AllowedServices&> (ElementAt(20));
    }

    void SetUnavailabilityCause(UnavailabilityCause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetUnavailabilityCauseStaticDescription());
        AddElement(21, element);
    }

    void SetUnavailabilityCause(const UnavailabilityCause& element)
    {
        its::AsnObject& asnObject = const_cast<UnavailabilityCause&>(element);
        asnObject.SetDescription(GetUnavailabilityCauseStaticDescription());
        AddElement(21, element);
    }

    bool OptionUnavailabilityCause() const
    {
        return Contains(21);
    }

    const UnavailabilityCause& GetUnavailabilityCause() const
    {
        ITS_REQUIRE(OptionUnavailabilityCause());
        return static_cast<const UnavailabilityCause&> (ElementAt(21));
    }

    void SetReleaseResourcesSupported(ReleaseResourcesSupported* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetReleaseResourcesSupportedStaticDescription());
        AddElement(22, element);
    }

    void SetReleaseResourcesSupported(const ReleaseResourcesSupported& element)
    {
        its::AsnObject& asnObject = const_cast<ReleaseResourcesSupported&>(element);
        asnObject.SetDescription(GetReleaseResourcesSupportedStaticDescription());
        AddElement(22, element);
    }

    bool OptionReleaseResourcesSupported() const
    {
        return Contains(22);
    }

    const ReleaseResourcesSupported& GetReleaseResourcesSupported() const
    {
        ITS_REQUIRE(OptionReleaseResourcesSupported());
        return static_cast<const ReleaseResourcesSupported&> (ElementAt(22));
    }

};



} // namespace.

#endif    // !defined(_MAP_V9_SEND_ROUTING_INFO_RES_H_)

