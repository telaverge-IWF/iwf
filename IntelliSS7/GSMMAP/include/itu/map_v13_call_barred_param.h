//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_CALL_BARRED_PARAM_H_)
#define _MAP_V13_CALL_BARRED_PARAM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnEnumerated.h>
#include <AsnSequence.h>

#include <map_v13_call_barring_cause.h>
#include <map_v13_extensible_call_barred_param.h>



namespace map_v13 {



class CallBarredParam : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v13::CallBarringCause CallBarringCause;


        typedef map_v13::ExtensibleCallBarredParam ExtensibleCallBarredParam;


////////// End Nested Class(es) //////////

    CallBarredParam() : its::AsnChoice(false)
    {
        Initialize();
    }

    CallBarredParam(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CallBarredParam(const CallBarredParam& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CallBarredParam(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CallBarredParam(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCallBarringCauseStaticDescription();
    static its::AsnDescObject* GetExtensibleCallBarredParamStaticDescription();

public:

    virtual ~CallBarredParam()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CallBarredParam(*this);
    }

    virtual std::string GetName() const
    { return "CallBarredParam"; }

    void SetChoiceCallBarringCause(CallBarringCause* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCallBarringCauseStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCallBarringCause(const CallBarringCause& choice)
    {
        its::AsnObject& asnObject = const_cast<CallBarringCause&>(choice);
        asnObject.SetDescription(GetCallBarringCauseStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCallBarringCause() const
    {
        return Contains(GetCallBarringCauseStaticDescription()->TagIdentity());
    }

    const CallBarringCause& GetChoiceCallBarringCause() const
    {
        ITS_REQUIRE(ChoiceCallBarringCause());
        return static_cast<const CallBarringCause&> (GetChoice());
    }

    void SetChoiceExtensibleCallBarredParam(ExtensibleCallBarredParam* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetExtensibleCallBarredParamStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceExtensibleCallBarredParam(const ExtensibleCallBarredParam& choice)
    {
        its::AsnObject& asnObject = const_cast<ExtensibleCallBarredParam&>(choice);
        asnObject.SetDescription(GetExtensibleCallBarredParamStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceExtensibleCallBarredParam() const
    {
        return Contains(GetExtensibleCallBarredParamStaticDescription()->TagIdentity());
    }

    const ExtensibleCallBarredParam& GetChoiceExtensibleCallBarredParam() const
    {
        ITS_REQUIRE(ChoiceExtensibleCallBarredParam());
        return static_cast<const ExtensibleCallBarredParam&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_MAP_V13_CALL_BARRED_PARAM_H_)

