//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V13_REQUESTING_NODE_TYPE_H_)
#define _MAP_V13_REQUESTING_NODE_TYPE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace map_v13 {



class RequestingNodeType : public its::AsnEnumerated
{
public:

    RequestingNodeType() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    RequestingNodeType(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    RequestingNodeType(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    RequestingNodeType(const RequestingNodeType& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    RequestingNodeType(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    RequestingNodeType(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~RequestingNodeType()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new RequestingNodeType(*this);
    }

    virtual std::string GetName() const
    { return "RequestingNodeType"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        REQUESTING_NODE_TYPE_VLR = 0,
        REQUESTING_NODE_TYPE_SGSN = 1,
        REQUESTING_NODE_TYPE_S_CSCF = 2,
        REQUESTING_NODE_TYPE_BSF = 3,
        REQUESTING_NODE_TYPE_GAN_AAA_SERVER = 4,
        REQUESTING_NODE_TYPE_WLAN_AAA_SERVER = 5,
        REQUESTING_NODE_TYPE_MME = 16,
        REQUESTING_NODE_TYPE_MME_SGSN = 17

    };

    void SetVlr()
    { _value = 0; }

    bool IsVlr() const
    { return _value == 0; }

    void SetSgsn()
    { _value = 1; }

    bool IsSgsn() const
    { return _value == 1; }

    void SetS_cscf()
    { _value = 2; }

    bool IsS_cscf() const
    { return _value == 2; }

    void SetBsf()
    { _value = 3; }

    bool IsBsf() const
    { return _value == 3; }

    void SetGan_aaa_server()
    { _value = 4; }

    bool IsGan_aaa_server() const
    { return _value == 4; }

    void SetWlan_aaa_server()
    { _value = 5; }

    bool IsWlan_aaa_server() const
    { return _value == 5; }

    void SetMme()
    { _value = 16; }

    bool IsMme() const
    { return _value == 16; }

    void SetMme_sgsn()
    { _value = 17; }

    bool IsMme_sgsn() const
    { return _value == 17; }

};



} // namespace.

#endif    // !defined(_MAP_V13_REQUESTING_NODE_TYPE_H_)

