//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_MAP_V3_LOCATION_INFORMATION_H_)
#define _MAP_V3_LOCATION_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>

#include <map_v3_age_of_location_information.h>
#include <map_v3_geographical_information.h>
#include <map_v3_isdn_address_string.h>
#include <map_v3_location_number.h>
#include <map_v3_cell_id_or_lai.h>
#include <map_v3_extension_container.h>



namespace map_v3 {



class LocationInformation : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef map_v3::AgeOfLocationInformation AgeOfLocationInformation;


        typedef map_v3::GeographicalInformation GeographicalInformation;


        typedef map_v3::ISDN_AddressString ISDN_AddressString;


        typedef map_v3::LocationNumber LocationNumber;


        typedef map_v3::CellIdOrLAI CellIdOrLAI;


        typedef map_v3::ExtensionContainer ExtensionContainer;


////////// End Nested Class(es) //////////

    LocationInformation() : its::AsnSequence(6, false)
    {
        Initialize();
    }

    LocationInformation(its::Octets& octets) : its::AsnSequence(6, false)
    {
        Initialize();
        Decode(octets);
    }

    LocationInformation(const LocationInformation& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    LocationInformation(its::AsnDescObject* description) : its::AsnSequence(6, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAgeOfLocationInformationStaticDescription();
    static its::AsnDescObject* GetGeographicalInformationStaticDescription();
    static its::AsnDescObject* GetVlr_numberStaticDescription();
    static its::AsnDescObject* GetLocationNumberStaticDescription();
    static its::AsnDescObject* GetCellIdOrLAIStaticDescription();
    static its::AsnDescObject* GetExtensionContainerStaticDescription();

public:

    virtual ~LocationInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new LocationInformation(*this);
    }

    virtual std::string GetName() const
    { return "LocationInformation"; }

    void SetAgeOfLocationInformation(AgeOfLocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(0, element);
    }

    void SetAgeOfLocationInformation(const AgeOfLocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<AgeOfLocationInformation&>(element);
        asnObject.SetDescription(GetAgeOfLocationInformationStaticDescription());
        AddElement(0, element);
    }

    bool OptionAgeOfLocationInformation() const
    {
        return Contains(0);
    }

    const AgeOfLocationInformation& GetAgeOfLocationInformation() const
    {
        ITS_REQUIRE(OptionAgeOfLocationInformation());
        return static_cast<const AgeOfLocationInformation&> (ElementAt(0));
    }

    void SetGeographicalInformation(GeographicalInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(1, element);
    }

    void SetGeographicalInformation(const GeographicalInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GeographicalInformation&>(element);
        asnObject.SetDescription(GetGeographicalInformationStaticDescription());
        AddElement(1, element);
    }

    bool OptionGeographicalInformation() const
    {
        return Contains(1);
    }

    const GeographicalInformation& GetGeographicalInformation() const
    {
        ITS_REQUIRE(OptionGeographicalInformation());
        return static_cast<const GeographicalInformation&> (ElementAt(1));
    }

    void SetVlr_number(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVlr_numberStaticDescription());
        AddElement(2, element);
    }

    void SetVlr_number(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetVlr_numberStaticDescription());
        AddElement(2, element);
    }

    bool OptionVlr_number() const
    {
        return Contains(2);
    }

    const ISDN_AddressString& GetVlr_number() const
    {
        ITS_REQUIRE(OptionVlr_number());
        return static_cast<const ISDN_AddressString&> (ElementAt(2));
    }

    void SetLocationNumber(LocationNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
        AddElement(3, element);
    }

    void SetLocationNumber(const LocationNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
        asnObject.SetDescription(GetLocationNumberStaticDescription());
        AddElement(3, element);
    }

    bool OptionLocationNumber() const
    {
        return Contains(3);
    }

    const LocationNumber& GetLocationNumber() const
    {
        ITS_REQUIRE(OptionLocationNumber());
        return static_cast<const LocationNumber&> (ElementAt(3));
    }

    void SetCellIdOrLAI(CellIdOrLAI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCellIdOrLAIStaticDescription());
        AddElement(4, element);
    }

    void SetCellIdOrLAI(const CellIdOrLAI& element)
    {
        its::AsnObject& asnObject = const_cast<CellIdOrLAI&>(element);
        asnObject.SetDescription(GetCellIdOrLAIStaticDescription());
        AddElement(4, element);
    }

    bool OptionCellIdOrLAI() const
    {
        return Contains(4);
    }

    const CellIdOrLAI& GetCellIdOrLAI() const
    {
        ITS_REQUIRE(OptionCellIdOrLAI());
        return static_cast<const CellIdOrLAI&> (ElementAt(4));
    }

    void SetExtensionContainer(ExtensionContainer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    void SetExtensionContainer(const ExtensionContainer& element)
    {
        its::AsnObject& asnObject = const_cast<ExtensionContainer&>(element);
        asnObject.SetDescription(GetExtensionContainerStaticDescription());
        AddElement(5, element);
    }

    bool OptionExtensionContainer() const
    {
        return Contains(5);
    }

    const ExtensionContainer& GetExtensionContainer() const
    {
        ITS_REQUIRE(OptionExtensionContainer());
        return static_cast<const ExtensionContainer&> (ElementAt(5));
    }

};



} // namespace.

#endif    // !defined(_MAP_V3_LOCATION_INFORMATION_H_)

