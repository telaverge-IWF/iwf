#
# Copyright (C) 2000-2000 IntelliNet Technologies, Inc.  All rights reserved.
#
#

{
i = 0
printf("//\n// Generated by GatorC ASN.1 tester (C, C++).\n//\n// Do not edit!\n//\n//\n//\n// (C) 2000 IntelliNet Technologies Inc. All Rights Reserved.\n//\n//\n")

######################## Generating the DEFINE for the PDU's ########################

printf("// Define for the different Pdu's \n\n")
while (getline line[i] < "functions.test")
	{
	printf("#define     ")
	#line[i] = substr(line[i],0,1)
	sub(/\n/, " ", line[i])
	print (line[i],"    ",i+1)
	linep[i] = line[i]
	i++
	}

######################## Generating the includes #####################################

printf("// Include Files \n\n")
printf("\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n#include <string.h>\n#include <numeric>\n#include <functional>\n")
printf("\n#include <its++.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n")
printf("\n#include <Asn.h>\n#include <AsnException.h>\n#include <asn_common.h>\n#include <asn_error.h>\n#include <asn_octets.h>\n#include <its.h>\n")
k = 0
getline line2 < "prefix.test"
getline line4 < "prefix.test"
i--
line5 = ("\n#include<" line4 ".h>\n")
print line5
j = i
islower = 1
isupper = 0
while (i >= 0) 
	{
	printf("#include\"")
	sub(" ", "", line2)
	sub(" ", "", line[i])
	sub("_PDU", "", line[i])
	sub("IS", "", line[i])
	sub("[0-9]","",line[i])
	sub("[0-9]","",line[i])
	sub("[0-9]","",line[i])
	lineo[i] = line[i]
	sub("RRL2", "2RRL", lineo[i])
	#sub("IL2", "2IL", lineo[i])
	#split (line[i], buf, "[A-Z]")
	sub("SIWFS", "&_", line[i])
	sub("CDMA", "&_", line[i])
	sub("MAHO", "&_", line[i])
	sub("NAMPS", "&_", line[i])
	
	sub("MS","&_",line[i])
	
	sub("[A-Z]+_[A-Z][a-z]+", "&_", line[i])
	sub("[A-Z]+_[A-Z][a-z]+_[A-Z]+[a-z]+", "&_", line[i])
	sub("[A-Z]+[a-z]+", "&_",line[i])
	sub("[A-Z]+[a-z]+_[A-Z]+[a-z]+", "&_",line[i])
	sub("[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+", "&_",line[i])
	sub("[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+", "&_",line[i])
	sub("[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+_[A-Z]+[a-z]+", "&_",line[i])
	sub("[a-z]*", "&_",line[i])
	#sub("_\n", "\n", line3)
	sub("__", "_", line[i])
	sub("_RRL2", "2rrl", line[i])
	sub("_IL2", "2il", line[i])
	line3 = (line2  line[i] ".h\"")
	sub(" ", "", line3)
	sub("_ ", "", line3)
	sub("_\.h\"", "\.h\"", line3)
	
	print line3
	i--
	}

################################## Generating defined namespaces #####################

printf("\n\n#if defined(ITS_STD_NAMESPACE)\nusing namespace std;\n#endif // defined(ITS_STD_NAMESPACE\n")
printf("#if defined(ITS_NAMESPACE)\nusing namespace its;\n\nusing namespace ")
print line2
printf (";\n")
printf ("#endif // defined(ITS_NAMESPACE)\n")


################################## Generating macros for vectors ######################

printf ("/////////////////////////////////////////////////////////////////////////////\n")
printf("//  Utilities.\n")
printf("//\n")
printf("//  Macro to get the size (count of items) of a fixed array.\n")
printf("#define FixedArraySize(array)       \\\n")
printf("    (sizeof(array) / sizeof(array[0])) \n")


printf ("//  Macro to convert fixed arrays (of bytes) to vectors.\n//\n")

printf(" #define FixedByteArrayToVector(array)   \\\n")
printf("    (vector<byte>(array, array + FixedArraySize(array)))  \n")


printf(" //  Macro to convert fixed arrays (of booleans) to vectors. \n")

printf("#define FixedBooleanArrayToVector(array)   \\\n")
printf("    (vector<bool>(array, array + FixedArraySize(array)))  \n")


printf("#include \"asn1code.h\" \n\n")

printf(" #ifdef __NETWARE_386__ \n")
printf(" extern int ossInitNetWare(OssGlobal *, void *, char *); \n")
printf(" #endif /* __NETWARE_386__ */  \n")

########################### Prototypes of functions used ######################

printf("// Prototypes \n\n")
printf(" enum what {encoder, decoder, trace};  \n")
printf("static int encodeDecodeAndPrint(OssGlobal *, int, void *, long);  \n")
printf("static char *getMessage(OssGlobal *, char *, enum what, long);  \n")
printf("#define MSG_SIZE 100   \n\n")

########################### Output files ######################################

printf("// Output Files \n\n")
printf("ofstream ofile( \"generated_asn.test\", ios::out );\n")
printf("ofstream ofile2(\"generated_ber_code_oss.test\", ios::out );\n")
printf("ofstream ofile3(\"generated_error.test\", ios::out );\n")
printf("ofstream ofile4(\"generated_ber_code_asncc.test\", ios::out );\n\n")
i = j
########################## Generating Asncc decoding functions ################

while (j >= 0)
	{
	#sub("_", "", line[j])
	#sub("_", "", line[j])
	#sub("_", "", line[j])
	#sub("_", "", line[j])
	#sub("_", "", line[j])
	#sub("_", "", line[j])
        printf("// Interpret function for %s decoding BER code\n", lineo[j])
	printf("// and coding using asncc compiler\n\n")
	line6 = ("void  " "InterpretOperation" lineo[j] "(struct ossGlobal *world, int pduNum,  Octets* octets2)")
	print line6
	printf("\n     {\n")
	
	print ("     " lineo[j] "* ")
	printf ("     asnobject = new ")
	print (lineo[j] "();\n")
	printf ("     try\n       {\n       asnobject->Decode(*octets2);")
	printf("\n       }\n")
	printf("       catch (AsnDecodeError& decodeError)\n         {\n         ofile3 << decodeError.GetDescription();\n")
	printf("         throw decodeError;\n         }\n\n")
	printf("     ofile2 << *octets2;\n")
	printf("     octets2 = asnobject->Encode();\n")
	printf("     ofile4 << *octets2;\n")
        printf("     ofile << *asnobject;\n")
	printf("     delete octets2;\n")
	printf("     delete asnobject;\n\n     }\n\n")
	j--
	}

while (getline line7 < "ossbuf1.test")
{ 
print (line7) 
}

########################## If statements testing on pdu number ##################

while (i >= 0)
	{
	printf(" if (pduNum == ")
	print  (linep[i] ")")
	printf("\n      {\n")	
    	printf("      Octets *octets3 = new Octets(encodedVect);\n")
	printf("      InterpretOperation")
	print (lineo[i] "(world, pduNum,octets3);\n")
	printf("\n      }\n")
	i--
	}

while (getline line7 < "ossbuf2.test")
{ 
print (line7) 
}

######################### End of program ##########################################

exit(0)
}