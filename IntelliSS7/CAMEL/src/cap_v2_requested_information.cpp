//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <cap_v2_requested_information.h>

#include <AsnDescSequence.h>
#include <AsnDescEnumerated.h>
#include <AsnDescChoice.h>


using namespace its;
using namespace cap_v2;




////////// Begin Nested Class(es) //////////


// Type RequestedInformationType is a reference => no code generated.

// Type RequestedInformationValue is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* RequestedInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new RequestedInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetRequestedInformationTypeStaticDescription();
        staticDesc._elementVect[1] = GetRequestedInformationValueStaticDescription();
        staticDesc.SetTypeName("RequestedInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* RequestedInformation::GetRequestedInformationTypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RequestedInformationType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(30);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"callAttemptElapsedTime", 0}, {"callStopTime", 1}, {"callConnectedElapsedTime", 2}, {"releaseCause", 30}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("requestedInformationType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* RequestedInformation::GetRequestedInformationValueStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RequestedInformationValue(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._choiceList.push_back(RequestedInformationValue::GetCallAttemptElapsedTimeValueStaticDescription());
        staticDesc._choiceList.push_back(RequestedInformationValue::GetCallStopTimeValueStaticDescription());
        staticDesc._choiceList.push_back(RequestedInformationValue::GetCallConnectedElapsedTimeValueStaticDescription());
        staticDesc._choiceList.push_back(RequestedInformationValue::GetReleaseCauseValueStaticDescription());
        staticDesc.SetNamedTypeName("requestedInformationValue");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





