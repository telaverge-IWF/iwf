//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <cap_v3_event_report_gprs_arg.h>

#include <AsnDescSequence.h>
#include <AsnDescEnumerated.h>
#include <AsnDescChoice.h>
#include <AsnDescOctetString.h>


using namespace its;
using namespace cap_v3;




////////// Begin Nested Class(es) //////////


// Type GPRS_ReferenceNumber is a reference => no code generated.

// Type GPRSEventType is a reference => no code generated.

// Type MiscCallInfo is a reference => no code generated.

// Type GPRSEventSpecificInformation is a reference => no code generated.

// Type PDPID is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* EventReportGPRSArg::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(5);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new EventReportGPRSArg(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetGPRS_ReferenceNumberStaticDescription();
        staticDesc._elementVect[1] = GetGPRSEventTypeStaticDescription();
        staticDesc._elementVect[2] = GetMiscGPRSInfoStaticDescription();
        staticDesc._elementVect[3] = GetGPRSEventSpecificInformationStaticDescription();
        staticDesc._elementVect[4] = GetPDPIDStaticDescription();
        staticDesc.SetTypeName("EventReportGPRSArg");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EventReportGPRSArg::GetGPRS_ReferenceNumberStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRS_ReferenceNumber(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = GPRS_ReferenceNumber::GetGPRS_ReferenceStaticDescription();
        staticDesc._elementVect[1] = GPRS_ReferenceNumber::GetGprsSSF_AddressStaticDescription();
        staticDesc.SetNamedTypeName("gPRS-ReferenceNumber");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EventReportGPRSArg::GetGPRSEventTypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRSEventType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        staticDesc._valueSet.insert(11);
        staticDesc._valueSet.insert(12);
        staticDesc._valueSet.insert(13);
        staticDesc._valueSet.insert(14);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"attach", 1}, {"attachChangeOfPosition", 2}, {"detached", 3}, {"pdp-ContextEstablishment", 11}, {"pdp-ContextEstablishmentAcknowledgement", 12}, {"disonnect", 13}, {"pdp-ContextChangeOfPosition", 14}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("gPRSEventType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EventReportGPRSArg::GetMiscGPRSInfoStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new MiscCallInfo(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._elementVect[0] = MiscCallInfo::GetMessageTypeStaticDescription();
        staticDesc._elementVect[1] = MiscCallInfo::GetDpAssignmentStaticDescription();
        staticDesc.SetNamedTypeName("miscGPRSInfo");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EventReportGPRSArg::GetGPRSEventSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRSEventSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetAttachChangeOfPositionSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetDetachSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetDisconnectSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetPDPContextEstablishmentSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GPRSEventSpecificInformation::GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription());
        staticDesc.SetNamedTypeName("gPRSEventSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* EventReportGPRSArg::GetPDPIDStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDPID(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 1;
        staticDesc.SetNamedTypeName("pDPID");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





