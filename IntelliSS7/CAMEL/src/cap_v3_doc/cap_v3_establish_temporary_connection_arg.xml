<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>EstablishTemporaryConnectionArg</className>
<asnTypeName>EstablishTemporaryConnectionArg</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetAssistingSSPIPRoutingAddress</name>
<signature>void SetAssistingSSPIPRoutingAddress(AssistingSSPIPRoutingAddress* element)</signature>
<elmentName>AssistingSSPIPRoutingAddress</elmentName>
<asnElementName>assistingSSPIPRoutingAddress</asnElementName>
<elementTypeName>AssistingSSPIPRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAssistingSSPIPRoutingAddress</name>
<signature>void SetAssistingSSPIPRoutingAddress(const AssistingSSPIPRoutingAddress&amp; element)</signature>
<elementName>AssistingSSPIPRoutingAddress</elementName>
<asnElementName>assistingSSPIPRoutingAddress</asnElementName>
<elementTypeName>AssistingSSPIPRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAssistingSSPIPRoutingAddress</name>
<signature>const AssistingSSPIPRoutingAddress&amp; GetAssistingSSPIPRoutingAddress() const</signature>
<elementName>AssistingSSPIPRoutingAddress</elementName>
<asnElementName>assistingSSPIPRoutingAddress</asnElementName>
<elementTypeName>AssistingSSPIPRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCorrelationID</name>
<signature>void SetCorrelationID(CorrelationID* element)</signature>
<elmentName>CorrelationID</elmentName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCorrelationID</name>
<signature>void SetCorrelationID(const CorrelationID&amp; element)</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCorrelationID</name>
<signature>const CorrelationID&amp; GetCorrelationID() const</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCorrelationID</name>
<signature>bool OptionCorrelationID() const</signature>
<elementName>CorrelationID</elementName>
<asnElementName>correlationID</asnElementName>
<elementTypeName>CorrelationID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetScfID</name>
<signature>void SetScfID(ScfID* element)</signature>
<elmentName>ScfID</elmentName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetScfID</name>
<signature>void SetScfID(const ScfID&amp; element)</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetScfID</name>
<signature>const ScfID&amp; GetScfID() const</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionScfID</name>
<signature>bool OptionScfID() const</signature>
<elementName>ScfID</elementName>
<asnElementName>scfID</asnElementName>
<elementTypeName>ScfID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCarrier</name>
<signature>void SetCarrier(Carrier* element)</signature>
<elmentName>Carrier</elmentName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCarrier</name>
<signature>void SetCarrier(const Carrier&amp; element)</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCarrier</name>
<signature>const Carrier&amp; GetCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCarrier</name>
<signature>bool OptionCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNa_Info</name>
<signature>void SetNa_Info(NA_Info* element)</signature>
<elmentName>Na_Info</elmentName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNa_Info</name>
<signature>void SetNa_Info(const NA_Info&amp; element)</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNa_Info</name>
<signature>const NA_Info&amp; GetNa_Info() const</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNa_Info</name>
<signature>bool OptionNa_Info() const</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(ChargeNumber* element)</signature>
<elmentName>ChargeNumber</elmentName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(const ChargeNumber&amp; element)</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargeNumber</name>
<signature>const ChargeNumber&amp; GetChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargeNumber</name>
<signature>bool OptionChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- EstablishTemporaryConnectionArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>EstablishTemporaryConnectionArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    assistingSSPIPRoutingAddress [0] IMPLICIT AssistingSSPIPRoutingAddress -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    correlationID [1] IMPLICIT CorrelationID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    scfID [3] IMPLICIT ScfID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [4] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    carrier [5] IMPLICIT Carrier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [6] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    na-Info [50] IMPLICIT NA-Info -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargeNumber [51] IMPLICIT ChargeNumber -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

