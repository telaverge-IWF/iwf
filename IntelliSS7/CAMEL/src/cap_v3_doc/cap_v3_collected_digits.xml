<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CollectedDigits</className>
<asnTypeName>CollectedDigits</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetMinimumNbOfDigits</name>
<signature>void SetMinimumNbOfDigits(MinimumNbOfDigits* element)</signature>
<elmentName>MinimumNbOfDigits</elmentName>
<asnElementName>minimumNbOfDigits</asnElementName>
<elementTypeName>MinimumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMinimumNbOfDigits</name>
<signature>void SetMinimumNbOfDigits(const MinimumNbOfDigits&amp; element)</signature>
<elementName>MinimumNbOfDigits</elementName>
<asnElementName>minimumNbOfDigits</asnElementName>
<elementTypeName>MinimumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMinimumNbOfDigits</name>
<signature>const MinimumNbOfDigits&amp; GetMinimumNbOfDigits() const</signature>
<elementName>MinimumNbOfDigits</elementName>
<asnElementName>minimumNbOfDigits</asnElementName>
<elementTypeName>MinimumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetMaximumNbOfDigits</name>
<signature>void SetMaximumNbOfDigits(MaximumNbOfDigits* element)</signature>
<elmentName>MaximumNbOfDigits</elmentName>
<asnElementName>maximumNbOfDigits</asnElementName>
<elementTypeName>MaximumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMaximumNbOfDigits</name>
<signature>void SetMaximumNbOfDigits(const MaximumNbOfDigits&amp; element)</signature>
<elementName>MaximumNbOfDigits</elementName>
<asnElementName>maximumNbOfDigits</asnElementName>
<elementTypeName>MaximumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMaximumNbOfDigits</name>
<signature>const MaximumNbOfDigits&amp; GetMaximumNbOfDigits() const</signature>
<elementName>MaximumNbOfDigits</elementName>
<asnElementName>maximumNbOfDigits</asnElementName>
<elementTypeName>MaximumNbOfDigits</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetEndOfReplyDigit</name>
<signature>void SetEndOfReplyDigit(EndOfReplyDigit* element)</signature>
<elmentName>EndOfReplyDigit</elmentName>
<asnElementName>endOfReplyDigit</asnElementName>
<elementTypeName>EndOfReplyDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEndOfReplyDigit</name>
<signature>void SetEndOfReplyDigit(const EndOfReplyDigit&amp; element)</signature>
<elementName>EndOfReplyDigit</elementName>
<asnElementName>endOfReplyDigit</asnElementName>
<elementTypeName>EndOfReplyDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEndOfReplyDigit</name>
<signature>const EndOfReplyDigit&amp; GetEndOfReplyDigit() const</signature>
<elementName>EndOfReplyDigit</elementName>
<asnElementName>endOfReplyDigit</asnElementName>
<elementTypeName>EndOfReplyDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEndOfReplyDigit</name>
<signature>bool OptionEndOfReplyDigit() const</signature>
<elementName>EndOfReplyDigit</elementName>
<asnElementName>endOfReplyDigit</asnElementName>
<elementTypeName>EndOfReplyDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCancelDigit</name>
<signature>void SetCancelDigit(CancelDigit* element)</signature>
<elmentName>CancelDigit</elmentName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCancelDigit</name>
<signature>void SetCancelDigit(const CancelDigit&amp; element)</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCancelDigit</name>
<signature>const CancelDigit&amp; GetCancelDigit() const</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCancelDigit</name>
<signature>bool OptionCancelDigit() const</signature>
<elementName>CancelDigit</elementName>
<asnElementName>cancelDigit</asnElementName>
<elementTypeName>CancelDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetStartDigit</name>
<signature>void SetStartDigit(StartDigit* element)</signature>
<elmentName>StartDigit</elmentName>
<asnElementName>startDigit</asnElementName>
<elementTypeName>StartDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetStartDigit</name>
<signature>void SetStartDigit(const StartDigit&amp; element)</signature>
<elementName>StartDigit</elementName>
<asnElementName>startDigit</asnElementName>
<elementTypeName>StartDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetStartDigit</name>
<signature>const StartDigit&amp; GetStartDigit() const</signature>
<elementName>StartDigit</elementName>
<asnElementName>startDigit</asnElementName>
<elementTypeName>StartDigit</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionStartDigit</name>
<signature>bool OptionStartDigit() const</signature>
<elementName>StartDigit</elementName>
<asnElementName>startDigit</asnElementName>
<elementTypeName>StartDigit</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetFirstDigitTimeOut</name>
<signature>void SetFirstDigitTimeOut(FirstDigitTimeOut* element)</signature>
<elmentName>FirstDigitTimeOut</elmentName>
<asnElementName>firstDigitTimeOut</asnElementName>
<elementTypeName>FirstDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetFirstDigitTimeOut</name>
<signature>void SetFirstDigitTimeOut(const FirstDigitTimeOut&amp; element)</signature>
<elementName>FirstDigitTimeOut</elementName>
<asnElementName>firstDigitTimeOut</asnElementName>
<elementTypeName>FirstDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetFirstDigitTimeOut</name>
<signature>const FirstDigitTimeOut&amp; GetFirstDigitTimeOut() const</signature>
<elementName>FirstDigitTimeOut</elementName>
<asnElementName>firstDigitTimeOut</asnElementName>
<elementTypeName>FirstDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionFirstDigitTimeOut</name>
<signature>bool OptionFirstDigitTimeOut() const</signature>
<elementName>FirstDigitTimeOut</elementName>
<asnElementName>firstDigitTimeOut</asnElementName>
<elementTypeName>FirstDigitTimeOut</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetInterDigitTimeOut</name>
<signature>void SetInterDigitTimeOut(InterDigitTimeOut* element)</signature>
<elmentName>InterDigitTimeOut</elmentName>
<asnElementName>interDigitTimeOut</asnElementName>
<elementTypeName>InterDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInterDigitTimeOut</name>
<signature>void SetInterDigitTimeOut(const InterDigitTimeOut&amp; element)</signature>
<elementName>InterDigitTimeOut</elementName>
<asnElementName>interDigitTimeOut</asnElementName>
<elementTypeName>InterDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInterDigitTimeOut</name>
<signature>const InterDigitTimeOut&amp; GetInterDigitTimeOut() const</signature>
<elementName>InterDigitTimeOut</elementName>
<asnElementName>interDigitTimeOut</asnElementName>
<elementTypeName>InterDigitTimeOut</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInterDigitTimeOut</name>
<signature>bool OptionInterDigitTimeOut() const</signature>
<elementName>InterDigitTimeOut</elementName>
<asnElementName>interDigitTimeOut</asnElementName>
<elementTypeName>InterDigitTimeOut</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetErrorTreatment</name>
<signature>void SetErrorTreatment(ErrorTreatment* element)</signature>
<elmentName>ErrorTreatment</elmentName>
<asnElementName>errorTreatment</asnElementName>
<elementTypeName>ErrorTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetErrorTreatment</name>
<signature>void SetErrorTreatment(const ErrorTreatment&amp; element)</signature>
<elementName>ErrorTreatment</elementName>
<asnElementName>errorTreatment</asnElementName>
<elementTypeName>ErrorTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetErrorTreatment</name>
<signature>const ErrorTreatment&amp; GetErrorTreatment() const</signature>
<elementName>ErrorTreatment</elementName>
<asnElementName>errorTreatment</asnElementName>
<elementTypeName>ErrorTreatment</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetInterruptableAnnInd</name>
<signature>void SetInterruptableAnnInd(InterruptableAnnInd* element)</signature>
<elmentName>InterruptableAnnInd</elmentName>
<asnElementName>interruptableAnnInd</asnElementName>
<elementTypeName>InterruptableAnnInd</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInterruptableAnnInd</name>
<signature>void SetInterruptableAnnInd(const InterruptableAnnInd&amp; element)</signature>
<elementName>InterruptableAnnInd</elementName>
<asnElementName>interruptableAnnInd</asnElementName>
<elementTypeName>InterruptableAnnInd</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInterruptableAnnInd</name>
<signature>const InterruptableAnnInd&amp; GetInterruptableAnnInd() const</signature>
<elementName>InterruptableAnnInd</elementName>
<asnElementName>interruptableAnnInd</asnElementName>
<elementTypeName>InterruptableAnnInd</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetVoiceInformation</name>
<signature>void SetVoiceInformation(VoiceInformation* element)</signature>
<elmentName>VoiceInformation</elmentName>
<asnElementName>voiceInformation</asnElementName>
<elementTypeName>VoiceInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetVoiceInformation</name>
<signature>void SetVoiceInformation(const VoiceInformation&amp; element)</signature>
<elementName>VoiceInformation</elementName>
<asnElementName>voiceInformation</asnElementName>
<elementTypeName>VoiceInformation</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetVoiceInformation</name>
<signature>const VoiceInformation&amp; GetVoiceInformation() const</signature>
<elementName>VoiceInformation</elementName>
<asnElementName>voiceInformation</asnElementName>
<elementTypeName>VoiceInformation</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetVoiceBack</name>
<signature>void SetVoiceBack(VoiceBack* element)</signature>
<elmentName>VoiceBack</elmentName>
<asnElementName>voiceBack</asnElementName>
<elementTypeName>VoiceBack</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetVoiceBack</name>
<signature>void SetVoiceBack(const VoiceBack&amp; element)</signature>
<elementName>VoiceBack</elementName>
<asnElementName>voiceBack</asnElementName>
<elementTypeName>VoiceBack</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetVoiceBack</name>
<signature>const VoiceBack&amp; GetVoiceBack() const</signature>
<elementName>VoiceBack</elementName>
<asnElementName>voiceBack</asnElementName>
<elementTypeName>VoiceBack</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CollectedDigits information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CollectedDigits ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    minimumNbOfDigits [0] IMPLICIT INTEGER   DEFAULT ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    maximumNbOfDigits [1] IMPLICIT INTEGER  ,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    endOfReplyDigit [2] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cancelDigit [3] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    startDigit [4] IMPLICIT OCTET STRING (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    firstDigitTimeOut [5] IMPLICIT INTEGER (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    interDigitTimeOut [6] IMPLICIT INTEGER (SIZE(1..2))  OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    errorTreatment [7] IMPLICIT ErrorTreatment -- [linked] -- DEFAULT stdErrorAndInfo -- [enum value] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    interruptableAnnInd [8] IMPLICIT BOOLEAN DEFAULT TRUE,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    voiceInformation [9] IMPLICIT BOOLEAN DEFAULT FALSE,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    voiceBack [10] IMPLICIT BOOLEAN DEFAULT FALSE</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

