<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CAI_GSM0224</className>
<asnTypeName>CAI-GSM0224</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetE1</name>
<signature>void SetE1(E1* element)</signature>
<elmentName>E1</elmentName>
<asnElementName>e1</asnElementName>
<elementTypeName>E1</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE1</name>
<signature>void SetE1(const E1&amp; element)</signature>
<elementName>E1</elementName>
<asnElementName>e1</asnElementName>
<elementTypeName>E1</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE1</name>
<signature>const E1&amp; GetE1() const</signature>
<elementName>E1</elementName>
<asnElementName>e1</asnElementName>
<elementTypeName>E1</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE1</name>
<signature>bool OptionE1() const</signature>
<elementName>E1</elementName>
<asnElementName>e1</asnElementName>
<elementTypeName>E1</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE2</name>
<signature>void SetE2(E2* element)</signature>
<elmentName>E2</elmentName>
<asnElementName>e2</asnElementName>
<elementTypeName>E2</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE2</name>
<signature>void SetE2(const E2&amp; element)</signature>
<elementName>E2</elementName>
<asnElementName>e2</asnElementName>
<elementTypeName>E2</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE2</name>
<signature>const E2&amp; GetE2() const</signature>
<elementName>E2</elementName>
<asnElementName>e2</asnElementName>
<elementTypeName>E2</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE2</name>
<signature>bool OptionE2() const</signature>
<elementName>E2</elementName>
<asnElementName>e2</asnElementName>
<elementTypeName>E2</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE3</name>
<signature>void SetE3(E3* element)</signature>
<elmentName>E3</elmentName>
<asnElementName>e3</asnElementName>
<elementTypeName>E3</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE3</name>
<signature>void SetE3(const E3&amp; element)</signature>
<elementName>E3</elementName>
<asnElementName>e3</asnElementName>
<elementTypeName>E3</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE3</name>
<signature>const E3&amp; GetE3() const</signature>
<elementName>E3</elementName>
<asnElementName>e3</asnElementName>
<elementTypeName>E3</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE3</name>
<signature>bool OptionE3() const</signature>
<elementName>E3</elementName>
<asnElementName>e3</asnElementName>
<elementTypeName>E3</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE4</name>
<signature>void SetE4(E4* element)</signature>
<elmentName>E4</elmentName>
<asnElementName>e4</asnElementName>
<elementTypeName>E4</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE4</name>
<signature>void SetE4(const E4&amp; element)</signature>
<elementName>E4</elementName>
<asnElementName>e4</asnElementName>
<elementTypeName>E4</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE4</name>
<signature>const E4&amp; GetE4() const</signature>
<elementName>E4</elementName>
<asnElementName>e4</asnElementName>
<elementTypeName>E4</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE4</name>
<signature>bool OptionE4() const</signature>
<elementName>E4</elementName>
<asnElementName>e4</asnElementName>
<elementTypeName>E4</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE5</name>
<signature>void SetE5(E5* element)</signature>
<elmentName>E5</elmentName>
<asnElementName>e5</asnElementName>
<elementTypeName>E5</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE5</name>
<signature>void SetE5(const E5&amp; element)</signature>
<elementName>E5</elementName>
<asnElementName>e5</asnElementName>
<elementTypeName>E5</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE5</name>
<signature>const E5&amp; GetE5() const</signature>
<elementName>E5</elementName>
<asnElementName>e5</asnElementName>
<elementTypeName>E5</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE5</name>
<signature>bool OptionE5() const</signature>
<elementName>E5</elementName>
<asnElementName>e5</asnElementName>
<elementTypeName>E5</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE6</name>
<signature>void SetE6(E6* element)</signature>
<elmentName>E6</elmentName>
<asnElementName>e6</asnElementName>
<elementTypeName>E6</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE6</name>
<signature>void SetE6(const E6&amp; element)</signature>
<elementName>E6</elementName>
<asnElementName>e6</asnElementName>
<elementTypeName>E6</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE6</name>
<signature>const E6&amp; GetE6() const</signature>
<elementName>E6</elementName>
<asnElementName>e6</asnElementName>
<elementTypeName>E6</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE6</name>
<signature>bool OptionE6() const</signature>
<elementName>E6</elementName>
<asnElementName>e6</asnElementName>
<elementTypeName>E6</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetE7</name>
<signature>void SetE7(E7* element)</signature>
<elmentName>E7</elmentName>
<asnElementName>e7</asnElementName>
<elementTypeName>E7</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetE7</name>
<signature>void SetE7(const E7&amp; element)</signature>
<elementName>E7</elementName>
<asnElementName>e7</asnElementName>
<elementTypeName>E7</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetE7</name>
<signature>const E7&amp; GetE7() const</signature>
<elementName>E7</elementName>
<asnElementName>e7</asnElementName>
<elementTypeName>E7</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionE7</name>
<signature>bool OptionE7() const</signature>
<elementName>E7</elementName>
<asnElementName>e7</asnElementName>
<elementTypeName>E7</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CAI-GSM0224 information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 3]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CAI-GSM0224 ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    e1 [0] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e2 [1] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e3 [2] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e4 [3] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e5 [4] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e6 [5] IMPLICIT INTEGER   OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    e7 [6] IMPLICIT INTEGER   OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

