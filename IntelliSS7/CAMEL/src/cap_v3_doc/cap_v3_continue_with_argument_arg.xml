<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ContinueWithArgumentArg</className>
<asnTypeName>ContinueWithArgumentArg</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(AlertingPattern* element)</signature>
<elmentName>AlertingPattern</elmentName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAlertingPattern</name>
<signature>void SetAlertingPattern(const AlertingPattern&amp; element)</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAlertingPattern</name>
<signature>const AlertingPattern&amp; GetAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAlertingPattern</name>
<signature>bool OptionAlertingPattern() const</signature>
<elementName>AlertingPattern</elementName>
<asnElementName>alertingPattern</asnElementName>
<elementTypeName>AlertingPattern</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)</signature>
<elmentName>ServiceInteractionIndicatorsTwo</elmentName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceInteractionIndicatorsTwo</name>
<signature>void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo&amp; element)</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceInteractionIndicatorsTwo</name>
<signature>const ServiceInteractionIndicatorsTwo&amp; GetServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionServiceInteractionIndicatorsTwo</name>
<signature>bool OptionServiceInteractionIndicatorsTwo() const</signature>
<elementName>ServiceInteractionIndicatorsTwo</elementName>
<asnElementName>serviceInteractionIndicatorsTwo</asnElementName>
<elementTypeName>ServiceInteractionIndicatorsTwo</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(GenericNumbers* element)</signature>
<elmentName>GenericNumbers</elmentName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(const GenericNumbers&amp; element)</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGenericNumbers</name>
<signature>const GenericNumbers&amp; GetGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGenericNumbers</name>
<signature>bool OptionGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCug_Interlock</name>
<signature>void SetCug_Interlock(CUG_Interlock* element)</signature>
<elmentName>Cug_Interlock</elmentName>
<asnElementName>cug-Interlock</asnElementName>
<elementTypeName>CUG_Interlock</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCug_Interlock</name>
<signature>void SetCug_Interlock(const CUG_Interlock&amp; element)</signature>
<elementName>Cug_Interlock</elementName>
<asnElementName>cug-Interlock</asnElementName>
<elementTypeName>CUG_Interlock</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCug_Interlock</name>
<signature>const CUG_Interlock&amp; GetCug_Interlock() const</signature>
<elementName>Cug_Interlock</elementName>
<asnElementName>cug-Interlock</asnElementName>
<elementTypeName>CUG_Interlock</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCug_Interlock</name>
<signature>bool OptionCug_Interlock() const</signature>
<elementName>Cug_Interlock</elementName>
<asnElementName>cug-Interlock</asnElementName>
<elementTypeName>CUG_Interlock</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCug_OutgoingAccess</name>
<signature>void SetCug_OutgoingAccess(Cug_OutgoingAccess* element)</signature>
<elmentName>Cug_OutgoingAccess</elmentName>
<asnElementName>cug-OutgoingAccess</asnElementName>
<elementTypeName>Cug_OutgoingAccess</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCug_OutgoingAccess</name>
<signature>void SetCug_OutgoingAccess(const Cug_OutgoingAccess&amp; element)</signature>
<elementName>Cug_OutgoingAccess</elementName>
<asnElementName>cug-OutgoingAccess</asnElementName>
<elementTypeName>Cug_OutgoingAccess</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCug_OutgoingAccess</name>
<signature>const Cug_OutgoingAccess&amp; GetCug_OutgoingAccess() const</signature>
<elementName>Cug_OutgoingAccess</elementName>
<asnElementName>cug-OutgoingAccess</asnElementName>
<elementTypeName>Cug_OutgoingAccess</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCug_OutgoingAccess</name>
<signature>bool OptionCug_OutgoingAccess() const</signature>
<elementName>Cug_OutgoingAccess</elementName>
<asnElementName>cug-OutgoingAccess</asnElementName>
<elementTypeName>Cug_OutgoingAccess</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(ChargeNumber* element)</signature>
<elmentName>ChargeNumber</elmentName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetChargeNumber</name>
<signature>void SetChargeNumber(const ChargeNumber&amp; element)</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetChargeNumber</name>
<signature>const ChargeNumber&amp; GetChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionChargeNumber</name>
<signature>bool OptionChargeNumber() const</signature>
<elementName>ChargeNumber</elementName>
<asnElementName>chargeNumber</asnElementName>
<elementTypeName>ChargeNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCarrier</name>
<signature>void SetCarrier(Carrier* element)</signature>
<elmentName>Carrier</elmentName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCarrier</name>
<signature>void SetCarrier(const Carrier&amp; element)</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCarrier</name>
<signature>const Carrier&amp; GetCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCarrier</name>
<signature>bool OptionCarrier() const</signature>
<elementName>Carrier</elementName>
<asnElementName>carrier</asnElementName>
<elementTypeName>Carrier</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(SuppressionOfAnnouncement* element)</signature>
<elmentName>SuppressionOfAnnouncement</elmentName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(const SuppressionOfAnnouncement&amp; element)</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSuppressionOfAnnouncement</name>
<signature>const SuppressionOfAnnouncement&amp; GetSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSuppressionOfAnnouncement</name>
<signature>bool OptionSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetNa_Info</name>
<signature>void SetNa_Info(NA_Info* element)</signature>
<elmentName>Na_Info</elmentName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetNa_Info</name>
<signature>void SetNa_Info(const NA_Info&amp; element)</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetNa_Info</name>
<signature>const NA_Info&amp; GetNa_Info() const</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionNa_Info</name>
<signature>bool OptionNa_Info() const</signature>
<elementName>Na_Info</elementName>
<asnElementName>na-Info</asnElementName>
<elementTypeName>NA_Info</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ContinueWithArgumentArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ContinueWithArgumentArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    alertingPattern [1] IMPLICIT AlertingPattern -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [6] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    serviceInteractionIndicatorsTwo [7] IMPLICIT ServiceInteractionIndicatorsTwo -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [12] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    genericNumbers [16] IMPLICIT GenericNumbers -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cug-Interlock [17] IMPLICIT CUG-Interlock -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    cug-OutgoingAccess [18] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    chargeNumber [50] IMPLICIT ChargeNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    carrier [52] IMPLICIT Carrier -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    suppressionOfAnnouncement [55] IMPLICIT SuppressionOfAnnouncement -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    na-Info [56] IMPLICIT NA-Info -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

