<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>EventSpecificInformationBCSM::TAnswerSpecificInfo</className>
<asnTypeName>EventSpecificInformationBCSM::tAnswerSpecificInfo</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDestinationAddress</name>
<signature>void SetDestinationAddress(CalledPartyNumber* element)</signature>
<elmentName>DestinationAddress</elmentName>
<asnElementName>destinationAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDestinationAddress</name>
<signature>void SetDestinationAddress(const CalledPartyNumber&amp; element)</signature>
<elementName>DestinationAddress</elementName>
<asnElementName>destinationAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDestinationAddress</name>
<signature>const CalledPartyNumber&amp; GetDestinationAddress() const</signature>
<elementName>DestinationAddress</elementName>
<asnElementName>destinationAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionDestinationAddress</name>
<signature>bool OptionDestinationAddress() const</signature>
<elementName>DestinationAddress</elementName>
<asnElementName>destinationAddress</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOr_Call</name>
<signature>void SetOr_Call(Or_Call* element)</signature>
<elmentName>Or_Call</elmentName>
<asnElementName>or-Call</asnElementName>
<elementTypeName>Or_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOr_Call</name>
<signature>void SetOr_Call(const Or_Call&amp; element)</signature>
<elementName>Or_Call</elementName>
<asnElementName>or-Call</asnElementName>
<elementTypeName>Or_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOr_Call</name>
<signature>const Or_Call&amp; GetOr_Call() const</signature>
<elementName>Or_Call</elementName>
<asnElementName>or-Call</asnElementName>
<elementTypeName>Or_Call</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOr_Call</name>
<signature>bool OptionOr_Call() const</signature>
<elementName>Or_Call</elementName>
<asnElementName>or-Call</asnElementName>
<elementTypeName>Or_Call</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetForwardedCall</name>
<signature>void SetForwardedCall(ForwardedCall* element)</signature>
<elmentName>ForwardedCall</elmentName>
<asnElementName>forwardedCall</asnElementName>
<elementTypeName>ForwardedCall</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetForwardedCall</name>
<signature>void SetForwardedCall(const ForwardedCall&amp; element)</signature>
<elementName>ForwardedCall</elementName>
<asnElementName>forwardedCall</asnElementName>
<elementTypeName>ForwardedCall</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetForwardedCall</name>
<signature>const ForwardedCall&amp; GetForwardedCall() const</signature>
<elementName>ForwardedCall</elementName>
<asnElementName>forwardedCall</asnElementName>
<elementTypeName>ForwardedCall</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionForwardedCall</name>
<signature>bool OptionForwardedCall() const</signature>
<elementName>ForwardedCall</elementName>
<asnElementName>forwardedCall</asnElementName>
<elementTypeName>ForwardedCall</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- EventSpecificInformationBCSM information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>EventSpecificInformationBCSM ::= CHOICE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    routeSelectFailureSpecificInfo [2] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        failureCause [0] IMPLICIT Cause -- [linked] -- OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oCalledPartyBusySpecificInfo [3] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        busyCause [0] IMPLICIT Cause -- [linked] -- OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oNoAnswerSpecificInfo [4] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oAnswerSpecificInfo [5] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        destinationAddress [50] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        or-Call [51] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        forwardedCall [52] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oDisconnectSpecificInfo [7] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        releaseCause [0] IMPLICIT Cause -- [linked] -- OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tBusySpecificInfo [8] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        busyCause [0] IMPLICIT Cause -- [linked] -- OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        callForwarded [50] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        routeNotPermitted [51] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tNoAnswerSpecificInfo [9] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        callForwarded [50] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tAnswerSpecificInfo [10] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        destinationAddress [50] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        or-Call [51] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        forwardedCall [52] IMPLICIT NULL OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    tDisconnectSpecificInfo [12] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        releaseCause [0] IMPLICIT Cause -- [linked] -- OPTIONAL</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    }</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

