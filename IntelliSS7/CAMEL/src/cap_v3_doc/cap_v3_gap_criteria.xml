<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnChoice>

<className>GapCriteria</className>
<asnTypeName>GapCriteria</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSetChoice>
<name>SetChoiceCalledAddressValue</name>
<signature>void SetChoiceCalledAddressValue(Digits* choice)</signature>
<choiceName>CalledAddressValue</choiceName>
<asnChoiceName>calledAddressValue</asnChoiceName>
<choiceTypeName>Digits</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceCalledAddressValue</name>
<signature>void SetChoiceCalledAddressValue(const Digits&amp; choice)</signature>
<choiceName>CalledAddressValue</choiceName>
<asnChoiceName>calledAddressValue</asnChoiceName>
<choiceTypeName>Digits</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceCalledAddressValue</name>
<signature>const Digits&amp; GetChoiceCalledAddressValue() const</signature>
<choiceName>CalledAddressValue</choiceName>
<asnChoiceName>calledAddressValue</asnChoiceName>
<choiceTypeName>Digits</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceCalledAddressValue</name>
<signature>bool ChoiceCalledAddressValue() const</signature>
<choiceName>CalledAddressValue</choiceName>
<asnChoiceName>calledAddressValue</asnChoiceName>
<choiceTypeName>Digits</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceGapOnService</name>
<signature>void SetChoiceGapOnService(GapOnService* choice)</signature>
<choiceName>GapOnService</choiceName>
<asnChoiceName>gapOnService</asnChoiceName>
<choiceTypeName>GapOnService</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceGapOnService</name>
<signature>void SetChoiceGapOnService(const GapOnService&amp; choice)</signature>
<choiceName>GapOnService</choiceName>
<asnChoiceName>gapOnService</asnChoiceName>
<choiceTypeName>GapOnService</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceGapOnService</name>
<signature>const GapOnService&amp; GetChoiceGapOnService() const</signature>
<choiceName>GapOnService</choiceName>
<asnChoiceName>gapOnService</asnChoiceName>
<choiceTypeName>GapOnService</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceGapOnService</name>
<signature>bool ChoiceGapOnService() const</signature>
<choiceName>GapOnService</choiceName>
<asnChoiceName>gapOnService</asnChoiceName>
<choiceTypeName>GapOnService</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceCalledAddressAndService</name>
<signature>void SetChoiceCalledAddressAndService(CalledAddressAndService* choice)</signature>
<choiceName>CalledAddressAndService</choiceName>
<asnChoiceName>calledAddressAndService</asnChoiceName>
<choiceTypeName>CalledAddressAndService</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceCalledAddressAndService</name>
<signature>void SetChoiceCalledAddressAndService(const CalledAddressAndService&amp; choice)</signature>
<choiceName>CalledAddressAndService</choiceName>
<asnChoiceName>calledAddressAndService</asnChoiceName>
<choiceTypeName>CalledAddressAndService</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceCalledAddressAndService</name>
<signature>const CalledAddressAndService&amp; GetChoiceCalledAddressAndService() const</signature>
<choiceName>CalledAddressAndService</choiceName>
<asnChoiceName>calledAddressAndService</asnChoiceName>
<choiceTypeName>CalledAddressAndService</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceCalledAddressAndService</name>
<signature>bool ChoiceCalledAddressAndService() const</signature>
<choiceName>CalledAddressAndService</choiceName>
<asnChoiceName>calledAddressAndService</asnChoiceName>
<choiceTypeName>CalledAddressAndService</choiceTypeName>
</memberFunctionChoice>

<memberFunctionSetChoice>
<name>SetChoiceCallingAddressAndService</name>
<signature>void SetChoiceCallingAddressAndService(CallingAddressAndService* choice)</signature>
<choiceName>CallingAddressAndService</choiceName>
<asnChoiceName>callingAddressAndService</asnChoiceName>
<choiceTypeName>CallingAddressAndService</choiceTypeName>
</memberFunctionSetChoice>

<memberFunctionSetChoiceWithRef>
<name>SetChoiceCallingAddressAndService</name>
<signature>void SetChoiceCallingAddressAndService(const CallingAddressAndService&amp; choice)</signature>
<choiceName>CallingAddressAndService</choiceName>
<asnChoiceName>callingAddressAndService</asnChoiceName>
<choiceTypeName>CallingAddressAndService</choiceTypeName>
</memberFunctionSetChoiceWithRef>

<memberFunctionGetChoice>
<name>GetChoiceCallingAddressAndService</name>
<signature>const CallingAddressAndService&amp; GetChoiceCallingAddressAndService() const</signature>
<choiceName>CallingAddressAndService</choiceName>
<asnChoiceName>callingAddressAndService</asnChoiceName>
<choiceTypeName>CallingAddressAndService</choiceTypeName>
</memberFunctionGetChoice>

<memberFunctionChoice>
<name>ChoiceCallingAddressAndService</name>
<signature>bool ChoiceCallingAddressAndService() const</signature>
<choiceName>CallingAddressAndService</choiceName>
<asnChoiceName>callingAddressAndService</asnChoiceName>
<choiceTypeName>CallingAddressAndService</choiceTypeName>
</memberFunctionChoice>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- GapCriteria information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>GapCriteria ::= CHOICE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    calledAddressValue [0] IMPLICIT Digits -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gapOnService [2] IMPLICIT GapOnService -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledAddressAndService [29] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        calledAddressValue [0] IMPLICIT Digits -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        serviceKey [1] IMPLICIT ServiceKey -- [linked] --</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    },</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingAddressAndService [30] IMPLICIT SEQUENCE</text>
<shift></shift>
</line>
<line>
<text>    {</text>
<shift></shift>
</line>
<line>
<text>        callingAddressValue [0] IMPLICIT Digits -- [linked] --,</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>        serviceKey [1] IMPLICIT ServiceKey -- [linked] --</text>
<shift></shift>
<shift></shift>
</line>
<line>
<text>    }</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnChoice>

</asnType>

