<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>CallGapArg</className>
<asnTypeName>CallGapArg</asnTypeName>
<moduleName>CAP_V3</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetGapCriteria</name>
<signature>void SetGapCriteria(GapCriteria* element)</signature>
<elmentName>GapCriteria</elmentName>
<asnElementName>gapCriteria</asnElementName>
<elementTypeName>GapCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGapCriteria</name>
<signature>void SetGapCriteria(const GapCriteria&amp; element)</signature>
<elementName>GapCriteria</elementName>
<asnElementName>gapCriteria</asnElementName>
<elementTypeName>GapCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGapCriteria</name>
<signature>const GapCriteria&amp; GetGapCriteria() const</signature>
<elementName>GapCriteria</elementName>
<asnElementName>gapCriteria</asnElementName>
<elementTypeName>GapCriteria</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetGapIndicators</name>
<signature>void SetGapIndicators(GapIndicators* element)</signature>
<elmentName>GapIndicators</elmentName>
<asnElementName>gapIndicators</asnElementName>
<elementTypeName>GapIndicators</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGapIndicators</name>
<signature>void SetGapIndicators(const GapIndicators&amp; element)</signature>
<elementName>GapIndicators</elementName>
<asnElementName>gapIndicators</asnElementName>
<elementTypeName>GapIndicators</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGapIndicators</name>
<signature>const GapIndicators&amp; GetGapIndicators() const</signature>
<elementName>GapIndicators</elementName>
<asnElementName>gapIndicators</asnElementName>
<elementTypeName>GapIndicators</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetControlType</name>
<signature>void SetControlType(ControlType* element)</signature>
<elmentName>ControlType</elmentName>
<asnElementName>controlType</asnElementName>
<elementTypeName>ControlType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetControlType</name>
<signature>void SetControlType(const ControlType&amp; element)</signature>
<elementName>ControlType</elementName>
<asnElementName>controlType</asnElementName>
<elementTypeName>ControlType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetControlType</name>
<signature>const ControlType&amp; GetControlType() const</signature>
<elementName>ControlType</elementName>
<asnElementName>controlType</asnElementName>
<elementTypeName>ControlType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionControlType</name>
<signature>bool OptionControlType() const</signature>
<elementName>ControlType</elementName>
<asnElementName>controlType</asnElementName>
<elementTypeName>ControlType</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGapTreatment</name>
<signature>void SetGapTreatment(GapTreatment* element)</signature>
<elmentName>GapTreatment</elmentName>
<asnElementName>gapTreatment</asnElementName>
<elementTypeName>GapTreatment</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGapTreatment</name>
<signature>void SetGapTreatment(const GapTreatment&amp; element)</signature>
<elementName>GapTreatment</elementName>
<asnElementName>gapTreatment</asnElementName>
<elementTypeName>GapTreatment</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGapTreatment</name>
<signature>const GapTreatment&amp; GetGapTreatment() const</signature>
<elementName>GapTreatment</elementName>
<asnElementName>gapTreatment</asnElementName>
<elementTypeName>GapTreatment</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGapTreatment</name>
<signature>bool OptionGapTreatment() const</signature>
<elementName>GapTreatment</elementName>
<asnElementName>gapTreatment</asnElementName>
<elementTypeName>GapTreatment</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- CallGapArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>CallGapArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    gapCriteria [0] IMPLICIT GapCriteria -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gapIndicators [1] IMPLICIT GapIndicators -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    controlType [2] IMPLICIT ControlType -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gapTreatment [3] IMPLICIT GapTreatment -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [4] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

