//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <cap_v3_gprs_event_specific_information.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>
#include <AsnDescOctetString.h>
#include <AsnDescNull.h>
#include <AsnDescEnumerated.h>


using namespace its;
using namespace cap_v3;




////////// Begin Nested Class(es) //////////




////////// Begin Nested Class(es) //////////


// Type LocationInformationGPRS is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::AttachChangeOfPositionSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(1);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new AttachChangeOfPositionSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetLocationInformationGPRSStaticDescription();
        staticDesc.SetNamedTypeName("attachChangeOfPositionSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::AttachChangeOfPositionSpecificInformation::GetLocationInformationGPRSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationGPRS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationGPRS::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[1] = LocationInformationGPRS::GetRouteingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationGPRS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[3] = LocationInformationGPRS::GetSgsn_NumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformationGPRS::GetSelectedLSAIdentityStaticDescription();
        staticDesc._elementVect[5] = LocationInformationGPRS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformationGPRS::GetSai_PresentStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationGPRS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class(es) //////////


// Type AccessPointName is a reference => no code generated.

// Type GPRSChargingID is a reference => no code generated.

// Type LocationInformationGPRS is a reference => no code generated.

// Type EndUserAddress is a reference => no code generated.

// Type QualityOfService is a reference => no code generated.

// Type TimeAndTimezone is a reference => no code generated.

// Type GSN_Address is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new Pdp_ContextchangeOfPositionSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = GetChargingIDStaticDescription();
        staticDesc._elementVect[2] = GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[3] = GetEndUserAddressStaticDescription();
        staticDesc._elementVect[4] = GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[5] = GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[6] = GetGGSNAddressStaticDescription();
        staticDesc.SetNamedTypeName("pdp-ContextchangeOfPositionSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetAccessPointNameStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AccessPointName(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 2;
        staticDesc._maxSize = 10;
        staticDesc.SetNamedTypeName("accessPointName");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetChargingIDStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRSChargingID(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 4;
        staticDesc._maxSize = 4;
        staticDesc.SetNamedTypeName("chargingID");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetLocationInformationGPRSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationGPRS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationGPRS::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[1] = LocationInformationGPRS::GetRouteingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationGPRS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[3] = LocationInformationGPRS::GetSgsn_NumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformationGPRS::GetSelectedLSAIdentityStaticDescription();
        staticDesc._elementVect[5] = LocationInformationGPRS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformationGPRS::GetSai_PresentStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationGPRS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetEndUserAddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EndUserAddress(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = EndUserAddress::GetPDPTypeOrganizationStaticDescription();
        staticDesc._elementVect[1] = EndUserAddress::GetPDPTypeNumberStaticDescription();
        staticDesc._elementVect[2] = EndUserAddress::GetPDPAddressStaticDescription();
        staticDesc.SetNamedTypeName("endUserAddress");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetQualityOfServiceStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new QualityOfService(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = QualityOfService::GetRequested_QoSStaticDescription();
        staticDesc._elementVect[1] = QualityOfService::GetSubscribed_QoSStaticDescription();
        staticDesc._elementVect[2] = QualityOfService::GetNegotiated_QoSStaticDescription();
        staticDesc.SetNamedTypeName("qualityOfService");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetTimeAndTimeZoneStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TimeAndTimezone(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 8;
        staticDesc._maxSize = 8;
        staticDesc.SetNamedTypeName("timeAndTimeZone");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::Pdp_ContextchangeOfPositionSpecificInformation::GetGGSNAddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GSN_Address(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 5;
        staticDesc._maxSize = 17;
        staticDesc.SetNamedTypeName("gGSNAddress");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class(es) //////////


// Type InitiatingEntity is a reference => no code generated.


AsnDescObject* GPRSEventSpecificInformation::DetachSpecificInformation::RouteingAreaUpdate::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new RouteingAreaUpdate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("routeingAreaUpdate");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::DetachSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new DetachSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetInitiatingEntityStaticDescription();
        staticDesc._elementVect[1] = GetRouteingAreaUpdateStaticDescription();
        staticDesc.SetNamedTypeName("detachSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::DetachSpecificInformation::GetInitiatingEntityStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new InitiatingEntity(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"ms", 0}, {"sgsn", 1}, {"hlr", 2}, {"ggsn", 3}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("initiatingEntity");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::DetachSpecificInformation::GetRouteingAreaUpdateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RouteingAreaUpdate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("routeingAreaUpdate");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class(es) //////////


// Type InitiatingEntity is a reference => no code generated.


AsnDescObject* GPRSEventSpecificInformation::DisconnectSpecificInformation::RouteingAreaUpdate::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new RouteingAreaUpdate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("routeingAreaUpdate");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::DisconnectSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new DisconnectSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetInitiatingEntityStaticDescription();
        staticDesc._elementVect[1] = GetRouteingAreaUpdateStaticDescription();
        staticDesc.SetNamedTypeName("disconnectSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::DisconnectSpecificInformation::GetInitiatingEntityStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new InitiatingEntity(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        staticDesc._valueSet.insert(2);
        staticDesc._valueSet.insert(3);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"ms", 0}, {"sgsn", 1}, {"hlr", 2}, {"ggsn", 3}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("initiatingEntity");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::DisconnectSpecificInformation::GetRouteingAreaUpdateStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new RouteingAreaUpdate(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("routeingAreaUpdate");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class(es) //////////


// Type AccessPointName is a reference => no code generated.

// Type EndUserAddress is a reference => no code generated.

// Type QualityOfService is a reference => no code generated.

// Type LocationInformationGPRS is a reference => no code generated.

// Type TimeAndTimezone is a reference => no code generated.

// Type PDPInitiationType is a reference => no code generated.


AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::SecondaryPDP_context::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new SecondaryPDP_context(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("secondaryPDP-context");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new PDPContextEstablishmentSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = GetEndUserAddressStaticDescription();
        staticDesc._elementVect[2] = GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[3] = GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[4] = GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[5] = GetPDPInitiationTypeStaticDescription();
        staticDesc._elementVect[6] = GetSecondaryPDP_contextStaticDescription();
        staticDesc.SetNamedTypeName("pDPContextEstablishmentSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetAccessPointNameStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AccessPointName(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 2;
        staticDesc._maxSize = 10;
        staticDesc.SetNamedTypeName("accessPointName");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetEndUserAddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EndUserAddress(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = EndUserAddress::GetPDPTypeOrganizationStaticDescription();
        staticDesc._elementVect[1] = EndUserAddress::GetPDPTypeNumberStaticDescription();
        staticDesc._elementVect[2] = EndUserAddress::GetPDPAddressStaticDescription();
        staticDesc.SetNamedTypeName("endUserAddress");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetQualityOfServiceStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new QualityOfService(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = QualityOfService::GetRequested_QoSStaticDescription();
        staticDesc._elementVect[1] = QualityOfService::GetSubscribed_QoSStaticDescription();
        staticDesc._elementVect[2] = QualityOfService::GetNegotiated_QoSStaticDescription();
        staticDesc.SetNamedTypeName("qualityOfService");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetLocationInformationGPRSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationGPRS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationGPRS::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[1] = LocationInformationGPRS::GetRouteingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationGPRS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[3] = LocationInformationGPRS::GetSgsn_NumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformationGPRS::GetSelectedLSAIdentityStaticDescription();
        staticDesc._elementVect[5] = LocationInformationGPRS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformationGPRS::GetSai_PresentStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationGPRS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetTimeAndTimeZoneStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TimeAndTimezone(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 8;
        staticDesc._maxSize = 8;
        staticDesc.SetNamedTypeName("timeAndTimeZone");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetPDPInitiationTypeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDPInitiationType(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 5));
        staticDesc._clauseOptional = true;
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"mSInitiated", 0}, {"networkInitiated", 1}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("pDPInitiationType");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentSpecificInformation::GetSecondaryPDP_contextStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescNull staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SecondaryPDP_context(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc.SetNamedTypeName("secondaryPDP-context");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}




////////// Begin Nested Class(es) //////////


// Type AccessPointName is a reference => no code generated.

// Type GPRSChargingID is a reference => no code generated.

// Type EndUserAddress is a reference => no code generated.

// Type QualityOfService is a reference => no code generated.

// Type LocationInformationGPRS is a reference => no code generated.

// Type TimeAndTimezone is a reference => no code generated.

// Type GSN_Address is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new PDPContextEstablishmentAcknowledgementSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = GetChargingIDStaticDescription();
        staticDesc._elementVect[2] = GetEndUserAddressStaticDescription();
        staticDesc._elementVect[3] = GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[4] = GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[5] = GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[6] = GetGGSNAddressStaticDescription();
        staticDesc.SetNamedTypeName("pDPContextEstablishmentAcknowledgementSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetAccessPointNameStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AccessPointName(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 2;
        staticDesc._maxSize = 10;
        staticDesc.SetNamedTypeName("accessPointName");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetChargingIDStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GPRSChargingID(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 1));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 4;
        staticDesc._maxSize = 4;
        staticDesc.SetNamedTypeName("chargingID");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetEndUserAddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new EndUserAddress(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = EndUserAddress::GetPDPTypeOrganizationStaticDescription();
        staticDesc._elementVect[1] = EndUserAddress::GetPDPTypeNumberStaticDescription();
        staticDesc._elementVect[2] = EndUserAddress::GetPDPAddressStaticDescription();
        staticDesc.SetNamedTypeName("endUserAddress");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetQualityOfServiceStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new QualityOfService(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = QualityOfService::GetRequested_QoSStaticDescription();
        staticDesc._elementVect[1] = QualityOfService::GetSubscribed_QoSStaticDescription();
        staticDesc._elementVect[2] = QualityOfService::GetNegotiated_QoSStaticDescription();
        staticDesc.SetNamedTypeName("qualityOfService");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetLocationInformationGPRSStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new LocationInformationGPRS(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseOptional = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = LocationInformationGPRS::GetCellGlobalIdOrServiceAreaIdOrLAIStaticDescription();
        staticDesc._elementVect[1] = LocationInformationGPRS::GetRouteingAreaIdentityStaticDescription();
        staticDesc._elementVect[2] = LocationInformationGPRS::GetGeographicalInformationStaticDescription();
        staticDesc._elementVect[3] = LocationInformationGPRS::GetSgsn_NumberStaticDescription();
        staticDesc._elementVect[4] = LocationInformationGPRS::GetSelectedLSAIdentityStaticDescription();
        staticDesc._elementVect[5] = LocationInformationGPRS::GetExtensionContainerStaticDescription();
        staticDesc._elementVect[6] = LocationInformationGPRS::GetSai_PresentStaticDescription();
        staticDesc.SetNamedTypeName("locationInformationGPRS");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetTimeAndTimeZoneStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new TimeAndTimezone(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 5));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 8;
        staticDesc._maxSize = 8;
        staticDesc.SetNamedTypeName("timeAndTimeZone");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::PDPContextEstablishmentAcknowledgementSpecificInformation::GetGGSNAddressStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new GSN_Address(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 6));
        staticDesc._clauseOptional = true;
        staticDesc._clauseSize = true;
        staticDesc._minSize = 5;
        staticDesc._maxSize = 17;
        staticDesc.SetNamedTypeName("gGSNAddress");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* GPRSEventSpecificInformation::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new GPRSEventSpecificInformation(&staticDesc));
        staticDesc._choiceList.push_back(GetAttachChangeOfPositionSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GetDetachSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GetDisconnectSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GetPDPContextEstablishmentSpecificInformationStaticDescription());
        staticDesc._choiceList.push_back(GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription());
        staticDesc.SetTypeName("GPRSEventSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetAttachChangeOfPositionSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(1);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AttachChangeOfPositionSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = AttachChangeOfPositionSpecificInformation::GetLocationInformationGPRSStaticDescription();
        staticDesc.SetNamedTypeName("attachChangeOfPositionSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new Pdp_ContextchangeOfPositionSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = Pdp_ContextchangeOfPositionSpecificInformation::GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = Pdp_ContextchangeOfPositionSpecificInformation::GetChargingIDStaticDescription();
        staticDesc._elementVect[2] = Pdp_ContextchangeOfPositionSpecificInformation::GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[3] = Pdp_ContextchangeOfPositionSpecificInformation::GetEndUserAddressStaticDescription();
        staticDesc._elementVect[4] = Pdp_ContextchangeOfPositionSpecificInformation::GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[5] = Pdp_ContextchangeOfPositionSpecificInformation::GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[6] = Pdp_ContextchangeOfPositionSpecificInformation::GetGGSNAddressStaticDescription();
        staticDesc.SetNamedTypeName("pdp-ContextchangeOfPositionSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetDetachSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new DetachSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 2));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = DetachSpecificInformation::GetInitiatingEntityStaticDescription();
        staticDesc._elementVect[1] = DetachSpecificInformation::GetRouteingAreaUpdateStaticDescription();
        staticDesc.SetNamedTypeName("detachSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetDisconnectSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new DisconnectSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 3));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = DisconnectSpecificInformation::GetInitiatingEntityStaticDescription();
        staticDesc._elementVect[1] = DisconnectSpecificInformation::GetRouteingAreaUpdateStaticDescription();
        staticDesc.SetNamedTypeName("disconnectSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetPDPContextEstablishmentSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDPContextEstablishmentSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 4));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = PDPContextEstablishmentSpecificInformation::GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = PDPContextEstablishmentSpecificInformation::GetEndUserAddressStaticDescription();
        staticDesc._elementVect[2] = PDPContextEstablishmentSpecificInformation::GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[3] = PDPContextEstablishmentSpecificInformation::GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[4] = PDPContextEstablishmentSpecificInformation::GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[5] = PDPContextEstablishmentSpecificInformation::GetPDPInitiationTypeStaticDescription();
        staticDesc._elementVect[6] = PDPContextEstablishmentSpecificInformation::GetSecondaryPDP_contextStaticDescription();
        staticDesc.SetNamedTypeName("pDPContextEstablishmentSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* GPRSEventSpecificInformation::GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new PDPContextEstablishmentAcknowledgementSpecificInformation(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 5));
        staticDesc._clauseExtensible = true;
        staticDesc._clauseExtensible = true;
        staticDesc._elementVect[0] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetAccessPointNameStaticDescription();
        staticDesc._elementVect[1] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetChargingIDStaticDescription();
        staticDesc._elementVect[2] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetEndUserAddressStaticDescription();
        staticDesc._elementVect[3] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetQualityOfServiceStaticDescription();
        staticDesc._elementVect[4] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetLocationInformationGPRSStaticDescription();
        staticDesc._elementVect[5] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetTimeAndTimeZoneStaticDescription();
        staticDesc._elementVect[6] = PDPContextEstablishmentAcknowledgementSpecificInformation::GetGGSNAddressStaticDescription();
        staticDesc.SetNamedTypeName("pDPContextEstablishmentAcknowledgementSpecificInformation");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





