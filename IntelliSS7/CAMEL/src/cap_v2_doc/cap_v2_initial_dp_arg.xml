<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>InitialDPArg</className>
<asnTypeName>InitialDPArg</asnTypeName>
<moduleName>CAP_V2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetServiceKey</name>
<signature>void SetServiceKey(ServiceKey* element)</signature>
<elmentName>ServiceKey</elmentName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetServiceKey</name>
<signature>void SetServiceKey(const ServiceKey&amp; element)</signature>
<elementName>ServiceKey</elementName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetServiceKey</name>
<signature>const ServiceKey&amp; GetServiceKey() const</signature>
<elementName>ServiceKey</elementName>
<asnElementName>serviceKey</asnElementName>
<elementTypeName>ServiceKey</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(CalledPartyNumber* element)</signature>
<elmentName>CalledPartyNumber</elmentName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartyNumber</name>
<signature>void SetCalledPartyNumber(const CalledPartyNumber&amp; element)</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartyNumber</name>
<signature>const CalledPartyNumber&amp; GetCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartyNumber</name>
<signature>bool OptionCalledPartyNumber() const</signature>
<elementName>CalledPartyNumber</elementName>
<asnElementName>calledPartyNumber</asnElementName>
<elementTypeName>CalledPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(IPSSPCapabilities* element)</signature>
<elmentName>IPSSPCapabilities</elmentName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIPSSPCapabilities</name>
<signature>void SetIPSSPCapabilities(const IPSSPCapabilities&amp; element)</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIPSSPCapabilities</name>
<signature>const IPSSPCapabilities&amp; GetIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIPSSPCapabilities</name>
<signature>bool OptionIPSSPCapabilities() const</signature>
<elementName>IPSSPCapabilities</elementName>
<asnElementName>iPSSPCapabilities</asnElementName>
<elementTypeName>IPSSPCapabilities</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(LocationNumber* element)</signature>
<elmentName>LocationNumber</elmentName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationNumber</name>
<signature>void SetLocationNumber(const LocationNumber&amp; element)</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationNumber</name>
<signature>const LocationNumber&amp; GetLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationNumber</name>
<signature>bool OptionLocationNumber() const</signature>
<elementName>LocationNumber</elementName>
<asnElementName>locationNumber</asnElementName>
<elementTypeName>LocationNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetHighLayerCompatibility</name>
<signature>void SetHighLayerCompatibility(HighLayerCompatibility* element)</signature>
<elmentName>HighLayerCompatibility</elmentName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetHighLayerCompatibility</name>
<signature>void SetHighLayerCompatibility(const HighLayerCompatibility&amp; element)</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetHighLayerCompatibility</name>
<signature>const HighLayerCompatibility&amp; GetHighLayerCompatibility() const</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionHighLayerCompatibility</name>
<signature>bool OptionHighLayerCompatibility() const</signature>
<elementName>HighLayerCompatibility</elementName>
<asnElementName>highLayerCompatibility</asnElementName>
<elementTypeName>HighLayerCompatibility</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetAdditionalCallingPartyNumber</name>
<signature>void SetAdditionalCallingPartyNumber(AdditionalCallingPartyNumber* element)</signature>
<elmentName>AdditionalCallingPartyNumber</elmentName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetAdditionalCallingPartyNumber</name>
<signature>void SetAdditionalCallingPartyNumber(const AdditionalCallingPartyNumber&amp; element)</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetAdditionalCallingPartyNumber</name>
<signature>const AdditionalCallingPartyNumber&amp; GetAdditionalCallingPartyNumber() const</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionAdditionalCallingPartyNumber</name>
<signature>bool OptionAdditionalCallingPartyNumber() const</signature>
<elementName>AdditionalCallingPartyNumber</elementName>
<asnElementName>additionalCallingPartyNumber</asnElementName>
<elementTypeName>AdditionalCallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(BearerCapability* element)</signature>
<elmentName>BearerCapability</elmentName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetBearerCapability</name>
<signature>void SetBearerCapability(const BearerCapability&amp; element)</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetBearerCapability</name>
<signature>const BearerCapability&amp; GetBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionBearerCapability</name>
<signature>bool OptionBearerCapability() const</signature>
<elementName>BearerCapability</elementName>
<asnElementName>bearerCapability</asnElementName>
<elementTypeName>BearerCapability</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetEventTypeBCSM</name>
<signature>void SetEventTypeBCSM(EventTypeBCSM* element)</signature>
<elmentName>EventTypeBCSM</elmentName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetEventTypeBCSM</name>
<signature>void SetEventTypeBCSM(const EventTypeBCSM&amp; element)</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetEventTypeBCSM</name>
<signature>const EventTypeBCSM&amp; GetEventTypeBCSM() const</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionEventTypeBCSM</name>
<signature>bool OptionEventTypeBCSM() const</signature>
<elementName>EventTypeBCSM</elementName>
<asnElementName>eventTypeBCSM</asnElementName>
<elementTypeName>EventTypeBCSM</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(RedirectingPartyID* element)</signature>
<elmentName>RedirectingPartyID</elmentName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(const RedirectingPartyID&amp; element)</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectingPartyID</name>
<signature>const RedirectingPartyID&amp; GetRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectingPartyID</name>
<signature>bool OptionRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(RedirectionInformation* element)</signature>
<elmentName>RedirectionInformation</elmentName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(const RedirectionInformation&amp; element)</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectionInformation</name>
<signature>const RedirectionInformation&amp; GetRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectionInformation</name>
<signature>bool OptionRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetIMSI</name>
<signature>void SetIMSI(IMSI* element)</signature>
<elmentName>IMSI</elmentName>
<asnElementName>iMSI</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetIMSI</name>
<signature>void SetIMSI(const IMSI&amp; element)</signature>
<elementName>IMSI</elementName>
<asnElementName>iMSI</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetIMSI</name>
<signature>const IMSI&amp; GetIMSI() const</signature>
<elementName>IMSI</elementName>
<asnElementName>iMSI</asnElementName>
<elementTypeName>IMSI</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionIMSI</name>
<signature>bool OptionIMSI() const</signature>
<elementName>IMSI</elementName>
<asnElementName>iMSI</asnElementName>
<elementTypeName>IMSI</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSubscriberState</name>
<signature>void SetSubscriberState(SubscriberState* element)</signature>
<elmentName>SubscriberState</elmentName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSubscriberState</name>
<signature>void SetSubscriberState(const SubscriberState&amp; element)</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSubscriberState</name>
<signature>const SubscriberState&amp; GetSubscriberState() const</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSubscriberState</name>
<signature>bool OptionSubscriberState() const</signature>
<elementName>SubscriberState</elementName>
<asnElementName>subscriberState</asnElementName>
<elementTypeName>SubscriberState</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetLocationInformation</name>
<signature>void SetLocationInformation(LocationInformation* element)</signature>
<elmentName>LocationInformation</elmentName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetLocationInformation</name>
<signature>void SetLocationInformation(const LocationInformation&amp; element)</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetLocationInformation</name>
<signature>const LocationInformation&amp; GetLocationInformation() const</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionLocationInformation</name>
<signature>bool OptionLocationInformation() const</signature>
<elementName>LocationInformation</elementName>
<asnElementName>locationInformation</asnElementName>
<elementTypeName>LocationInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExt_basicServiceCode</name>
<signature>void SetExt_basicServiceCode(Ext_BasicServiceCode* element)</signature>
<elmentName>Ext_basicServiceCode</elmentName>
<asnElementName>ext-basicServiceCode</asnElementName>
<elementTypeName>Ext_BasicServiceCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExt_basicServiceCode</name>
<signature>void SetExt_basicServiceCode(const Ext_BasicServiceCode&amp; element)</signature>
<elementName>Ext_basicServiceCode</elementName>
<asnElementName>ext-basicServiceCode</asnElementName>
<elementTypeName>Ext_BasicServiceCode</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExt_basicServiceCode</name>
<signature>const Ext_BasicServiceCode&amp; GetExt_basicServiceCode() const</signature>
<elementName>Ext_basicServiceCode</elementName>
<asnElementName>ext-basicServiceCode</asnElementName>
<elementTypeName>Ext_BasicServiceCode</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExt_basicServiceCode</name>
<signature>bool OptionExt_basicServiceCode() const</signature>
<elementName>Ext_basicServiceCode</elementName>
<asnElementName>ext-basicServiceCode</asnElementName>
<elementTypeName>Ext_BasicServiceCode</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallReferenceNumber</name>
<signature>void SetCallReferenceNumber(CallReferenceNumber* element)</signature>
<elmentName>CallReferenceNumber</elmentName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallReferenceNumber</name>
<signature>void SetCallReferenceNumber(const CallReferenceNumber&amp; element)</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallReferenceNumber</name>
<signature>const CallReferenceNumber&amp; GetCallReferenceNumber() const</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallReferenceNumber</name>
<signature>bool OptionCallReferenceNumber() const</signature>
<elementName>CallReferenceNumber</elementName>
<asnElementName>callReferenceNumber</asnElementName>
<elementTypeName>CallReferenceNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetMscAddress</name>
<signature>void SetMscAddress(ISDN_AddressString* element)</signature>
<elmentName>MscAddress</elmentName>
<asnElementName>mscAddress</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetMscAddress</name>
<signature>void SetMscAddress(const ISDN_AddressString&amp; element)</signature>
<elementName>MscAddress</elementName>
<asnElementName>mscAddress</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetMscAddress</name>
<signature>const ISDN_AddressString&amp; GetMscAddress() const</signature>
<elementName>MscAddress</elementName>
<asnElementName>mscAddress</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionMscAddress</name>
<signature>bool OptionMscAddress() const</signature>
<elementName>MscAddress</elementName>
<asnElementName>mscAddress</asnElementName>
<elementTypeName>ISDN_AddressString</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCalledPartyBCDNumber</name>
<signature>void SetCalledPartyBCDNumber(CalledPartyBCDNumber* element)</signature>
<elmentName>CalledPartyBCDNumber</elmentName>
<asnElementName>calledPartyBCDNumber</asnElementName>
<elementTypeName>CalledPartyBCDNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCalledPartyBCDNumber</name>
<signature>void SetCalledPartyBCDNumber(const CalledPartyBCDNumber&amp; element)</signature>
<elementName>CalledPartyBCDNumber</elementName>
<asnElementName>calledPartyBCDNumber</asnElementName>
<elementTypeName>CalledPartyBCDNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCalledPartyBCDNumber</name>
<signature>const CalledPartyBCDNumber&amp; GetCalledPartyBCDNumber() const</signature>
<elementName>CalledPartyBCDNumber</elementName>
<asnElementName>calledPartyBCDNumber</asnElementName>
<elementTypeName>CalledPartyBCDNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCalledPartyBCDNumber</name>
<signature>bool OptionCalledPartyBCDNumber() const</signature>
<elementName>CalledPartyBCDNumber</elementName>
<asnElementName>calledPartyBCDNumber</asnElementName>
<elementTypeName>CalledPartyBCDNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetTimeAndTimezone</name>
<signature>void SetTimeAndTimezone(TimeAndTimezone* element)</signature>
<elmentName>TimeAndTimezone</elmentName>
<asnElementName>timeAndTimezone</asnElementName>
<elementTypeName>TimeAndTimezone</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetTimeAndTimezone</name>
<signature>void SetTimeAndTimezone(const TimeAndTimezone&amp; element)</signature>
<elementName>TimeAndTimezone</elementName>
<asnElementName>timeAndTimezone</asnElementName>
<elementTypeName>TimeAndTimezone</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetTimeAndTimezone</name>
<signature>const TimeAndTimezone&amp; GetTimeAndTimezone() const</signature>
<elementName>TimeAndTimezone</elementName>
<asnElementName>timeAndTimezone</asnElementName>
<elementTypeName>TimeAndTimezone</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionTimeAndTimezone</name>
<signature>bool OptionTimeAndTimezone() const</signature>
<elementName>TimeAndTimezone</elementName>
<asnElementName>timeAndTimezone</asnElementName>
<elementTypeName>TimeAndTimezone</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGsm_ForwardingPending</name>
<signature>void SetGsm_ForwardingPending(Gsm_ForwardingPending* element)</signature>
<elmentName>Gsm_ForwardingPending</elmentName>
<asnElementName>gsm-ForwardingPending</asnElementName>
<elementTypeName>Gsm_ForwardingPending</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGsm_ForwardingPending</name>
<signature>void SetGsm_ForwardingPending(const Gsm_ForwardingPending&amp; element)</signature>
<elementName>Gsm_ForwardingPending</elementName>
<asnElementName>gsm-ForwardingPending</asnElementName>
<elementTypeName>Gsm_ForwardingPending</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGsm_ForwardingPending</name>
<signature>const Gsm_ForwardingPending&amp; GetGsm_ForwardingPending() const</signature>
<elementName>Gsm_ForwardingPending</elementName>
<asnElementName>gsm-ForwardingPending</asnElementName>
<elementTypeName>Gsm_ForwardingPending</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGsm_ForwardingPending</name>
<signature>bool OptionGsm_ForwardingPending() const</signature>
<elementName>Gsm_ForwardingPending</elementName>
<asnElementName>gsm-ForwardingPending</asnElementName>
<elementTypeName>Gsm_ForwardingPending</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetInitialDPArgExtension</name>
<signature>void SetInitialDPArgExtension(InitialDPArgExtension* element)</signature>
<elmentName>InitialDPArgExtension</elmentName>
<asnElementName>initialDPArgExtension</asnElementName>
<elementTypeName>InitialDPArgExtension</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetInitialDPArgExtension</name>
<signature>void SetInitialDPArgExtension(const InitialDPArgExtension&amp; element)</signature>
<elementName>InitialDPArgExtension</elementName>
<asnElementName>initialDPArgExtension</asnElementName>
<elementTypeName>InitialDPArgExtension</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetInitialDPArgExtension</name>
<signature>const InitialDPArgExtension&amp; GetInitialDPArgExtension() const</signature>
<elementName>InitialDPArgExtension</elementName>
<asnElementName>initialDPArgExtension</asnElementName>
<elementTypeName>InitialDPArgExtension</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionInitialDPArgExtension</name>
<signature>bool OptionInitialDPArgExtension() const</signature>
<elementName>InitialDPArgExtension</elementName>
<asnElementName>initialDPArgExtension</asnElementName>
<elementTypeName>InitialDPArgExtension</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- InitialDPArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>InitialDPArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    serviceKey [0] IMPLICIT ServiceKey -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartyNumber [2] IMPLICIT CalledPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [3] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [5] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iPSSPCapabilities [8] IMPLICIT IPSSPCapabilities -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationNumber [10] IMPLICIT LocationNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [12] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [15] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    highLayerCompatibility [23] IMPLICIT HighLayerCompatibility -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    additionalCallingPartyNumber [25] IMPLICIT AdditionalCallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    bearerCapability [27] IMPLICIT BearerCapability -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    eventTypeBCSM [28] IMPLICIT EventTypeBCSM -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectingPartyID [29] IMPLICIT RedirectingPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectionInformation [30] IMPLICIT RedirectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    iMSI [50] IMPLICIT IMSI -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    subscriberState [51] IMPLICIT SubscriberState -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    locationInformation [52] IMPLICIT LocationInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    ext-basicServiceCode [53] IMPLICIT Ext-BasicServiceCode -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callReferenceNumber [54] IMPLICIT CallReferenceNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    mscAddress [55] IMPLICIT ISDN-AddressString -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    calledPartyBCDNumber [56] IMPLICIT CalledPartyBCDNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    timeAndTimezone [57] IMPLICIT TimeAndTimezone -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    gsm-ForwardingPending [58] IMPLICIT NULL OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    initialDPArgExtension [59] IMPLICIT InitialDPArgExtension -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

