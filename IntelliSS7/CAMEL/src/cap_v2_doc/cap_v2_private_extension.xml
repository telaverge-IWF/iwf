<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>PrivateExtension</className>
<asnTypeName>PrivateExtension</asnTypeName>
<moduleName>CAP_V2</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetExtensionId</name>
<signature>void SetExtensionId(ExtensionId* element)</signature>
<elmentName>ExtensionId</elmentName>
<asnElementName>extensionId</asnElementName>
<elementTypeName>ExtensionId</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionId</name>
<signature>void SetExtensionId(const ExtensionId&amp; element)</signature>
<elementName>ExtensionId</elementName>
<asnElementName>extensionId</asnElementName>
<elementTypeName>ExtensionId</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionId</name>
<signature>const ExtensionId&amp; GetExtensionId() const</signature>
<elementName>ExtensionId</elementName>
<asnElementName>extensionId</asnElementName>
<elementTypeName>ExtensionId</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetExtensionType</name>
<signature>void SetExtensionType(ExtensionType* element)</signature>
<elmentName>ExtensionType</elmentName>
<asnElementName>extensionType</asnElementName>
<elementTypeName>ExtensionType</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensionType</name>
<signature>void SetExtensionType(const ExtensionType&amp; element)</signature>
<elementName>ExtensionType</elementName>
<asnElementName>extensionType</asnElementName>
<elementTypeName>ExtensionType</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensionType</name>
<signature>const ExtensionType&amp; GetExtensionType() const</signature>
<elementName>ExtensionType</elementName>
<asnElementName>extensionType</asnElementName>
<elementTypeName>ExtensionType</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensionType</name>
<signature>bool OptionExtensionType() const</signature>
<elementName>ExtensionType</elementName>
<asnElementName>extensionType</asnElementName>
<elementTypeName>ExtensionType</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- PrivateExtension information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 1]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>PrivateExtension ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    extensionId OBJECT IDENTIFIER,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensionType ANY OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

