//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <cap_v3_aoc_before_answer.h>

#include <AsnDescSequence.h>


using namespace its;
using namespace cap_v3;




////////// Begin Nested Class(es) //////////


// Type CAI_GSM0224 is a reference => no code generated.

// Type AOCSubsequent is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* AOCBeforeAnswer::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new AOCBeforeAnswer(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_UNIVERSAL, Tag::ASN_CONSTRUCTED, 16));
        staticDesc._elementVect[0] = GetAOCInitialStaticDescription();
        staticDesc._elementVect[1] = GetAOCSubsequentStaticDescription();
        staticDesc.SetTypeName("AOCBeforeAnswer");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AOCBeforeAnswer::GetAOCInitialStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(7);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new CAI_GSM0224(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = CAI_GSM0224::GetE1StaticDescription();
        staticDesc._elementVect[1] = CAI_GSM0224::GetE2StaticDescription();
        staticDesc._elementVect[2] = CAI_GSM0224::GetE3StaticDescription();
        staticDesc._elementVect[3] = CAI_GSM0224::GetE4StaticDescription();
        staticDesc._elementVect[4] = CAI_GSM0224::GetE5StaticDescription();
        staticDesc._elementVect[5] = CAI_GSM0224::GetE6StaticDescription();
        staticDesc._elementVect[6] = CAI_GSM0224::GetE7StaticDescription();
        staticDesc.SetNamedTypeName("aOCInitial");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* AOCBeforeAnswer::GetAOCSubsequentStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(2);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AOCSubsequent(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseOptional = true;
        staticDesc._elementVect[0] = AOCSubsequent::GetCAI_GSM0224StaticDescription();
        staticDesc._elementVect[1] = AOCSubsequent::GetTariffSwitchIntervalStaticDescription();
        staticDesc.SetNamedTypeName("aOCSubsequent");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





