<?xml version="1.0"?>


<!--                                                                         -->
<!-- Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).                -->
<!--                                                                         -->
<!-- Do not edit!                                                            -->
<!--                                                                         -->
<!--                                                                         -->
<!-- (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.        -->
<!--                                                                         -->
<!--                                                                         -->


<asnType>

<asnSequence>

<className>ConnectArg</className>
<asnTypeName>ConnectArg</asnTypeName>
<moduleName>CAP_V1</moduleName>


<memberFunctions>

<memberFunctionSet>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(DestinationRoutingAddress* element)</signature>
<elmentName>DestinationRoutingAddress</elmentName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetDestinationRoutingAddress</name>
<signature>void SetDestinationRoutingAddress(const DestinationRoutingAddress&amp; element)</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetDestinationRoutingAddress</name>
<signature>const DestinationRoutingAddress&amp; GetDestinationRoutingAddress() const</signature>
<elementName>DestinationRoutingAddress</elementName>
<asnElementName>destinationRoutingAddress</asnElementName>
<elementTypeName>DestinationRoutingAddress</elementTypeName>
<optional>no</optional>
</memberFunctionGet>

<memberFunctionSet>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(OriginalCalledPartyID* element)</signature>
<elmentName>OriginalCalledPartyID</elmentName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOriginalCalledPartyID</name>
<signature>void SetOriginalCalledPartyID(const OriginalCalledPartyID&amp; element)</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOriginalCalledPartyID</name>
<signature>const OriginalCalledPartyID&amp; GetOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOriginalCalledPartyID</name>
<signature>bool OptionOriginalCalledPartyID() const</signature>
<elementName>OriginalCalledPartyID</elementName>
<asnElementName>originalCalledPartyID</asnElementName>
<elementTypeName>OriginalCalledPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetExtensions</name>
<signature>void SetExtensions(Extensions* element)</signature>
<elmentName>Extensions</elmentName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetExtensions</name>
<signature>void SetExtensions(const Extensions&amp; element)</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetExtensions</name>
<signature>const Extensions&amp; GetExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionExtensions</name>
<signature>bool OptionExtensions() const</signature>
<elementName>Extensions</elementName>
<asnElementName>extensions</asnElementName>
<elementTypeName>Extensions</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(GenericNumbers* element)</signature>
<elmentName>GenericNumbers</elmentName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetGenericNumbers</name>
<signature>void SetGenericNumbers(const GenericNumbers&amp; element)</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetGenericNumbers</name>
<signature>const GenericNumbers&amp; GetGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionGenericNumbers</name>
<signature>bool OptionGenericNumbers() const</signature>
<elementName>GenericNumbers</elementName>
<asnElementName>genericNumbers</asnElementName>
<elementTypeName>GenericNumbers</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(CallingPartyNumber* element)</signature>
<elmentName>CallingPartyNumber</elmentName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartyNumber</name>
<signature>void SetCallingPartyNumber(const CallingPartyNumber&amp; element)</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartyNumber</name>
<signature>const CallingPartyNumber&amp; GetCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartyNumber</name>
<signature>bool OptionCallingPartyNumber() const</signature>
<elementName>CallingPartyNumber</elementName>
<asnElementName>callingPartyNumber</asnElementName>
<elementTypeName>CallingPartyNumber</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(CallingPartysCategory* element)</signature>
<elmentName>CallingPartysCategory</elmentName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetCallingPartysCategory</name>
<signature>void SetCallingPartysCategory(const CallingPartysCategory&amp; element)</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetCallingPartysCategory</name>
<signature>const CallingPartysCategory&amp; GetCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionCallingPartysCategory</name>
<signature>bool OptionCallingPartysCategory() const</signature>
<elementName>CallingPartysCategory</elementName>
<asnElementName>callingPartysCategory</asnElementName>
<elementTypeName>CallingPartysCategory</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(RedirectingPartyID* element)</signature>
<elmentName>RedirectingPartyID</elmentName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectingPartyID</name>
<signature>void SetRedirectingPartyID(const RedirectingPartyID&amp; element)</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectingPartyID</name>
<signature>const RedirectingPartyID&amp; GetRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectingPartyID</name>
<signature>bool OptionRedirectingPartyID() const</signature>
<elementName>RedirectingPartyID</elementName>
<asnElementName>redirectingPartyID</asnElementName>
<elementTypeName>RedirectingPartyID</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(RedirectionInformation* element)</signature>
<elmentName>RedirectionInformation</elmentName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetRedirectionInformation</name>
<signature>void SetRedirectionInformation(const RedirectionInformation&amp; element)</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetRedirectionInformation</name>
<signature>const RedirectionInformation&amp; GetRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionRedirectionInformation</name>
<signature>bool OptionRedirectionInformation() const</signature>
<elementName>RedirectionInformation</elementName>
<asnElementName>redirectionInformation</asnElementName>
<elementTypeName>RedirectionInformation</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(SuppressionOfAnnouncement* element)</signature>
<elmentName>SuppressionOfAnnouncement</elmentName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetSuppressionOfAnnouncement</name>
<signature>void SetSuppressionOfAnnouncement(const SuppressionOfAnnouncement&amp; element)</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetSuppressionOfAnnouncement</name>
<signature>const SuppressionOfAnnouncement&amp; GetSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionSuppressionOfAnnouncement</name>
<signature>bool OptionSuppressionOfAnnouncement() const</signature>
<elementName>SuppressionOfAnnouncement</elementName>
<asnElementName>suppressionOfAnnouncement</asnElementName>
<elementTypeName>SuppressionOfAnnouncement</elementTypeName>
</memberFunctionOption>

<memberFunctionSet>
<name>SetOCSIApplicable</name>
<signature>void SetOCSIApplicable(OCSIApplicable* element)</signature>
<elmentName>OCSIApplicable</elmentName>
<asnElementName>oCSIApplicable</asnElementName>
<elementTypeName>OCSIApplicable</elementTypeName>
<optional>yes</optional>
</memberFunctionSet>

<memberFunctionSetWithRef>
<name>SetOCSIApplicable</name>
<signature>void SetOCSIApplicable(const OCSIApplicable&amp; element)</signature>
<elementName>OCSIApplicable</elementName>
<asnElementName>oCSIApplicable</asnElementName>
<elementTypeName>OCSIApplicable</elementTypeName>
<optional>yes</optional>
</memberFunctionSetWithRef>

<memberFunctionGet>
<name>GetOCSIApplicable</name>
<signature>const OCSIApplicable&amp; GetOCSIApplicable() const</signature>
<elementName>OCSIApplicable</elementName>
<asnElementName>oCSIApplicable</asnElementName>
<elementTypeName>OCSIApplicable</elementTypeName>
<optional>yes</optional>
</memberFunctionGet>

<memberFunctionOption>
<name>OptionOCSIApplicable</name>
<signature>bool OptionOCSIApplicable() const</signature>
<elementName>OCSIApplicable</elementName>
<asnElementName>oCSIApplicable</asnElementName>
<elementTypeName>OCSIApplicable</elementTypeName>
</memberFunctionOption>

</memberFunctions>



<asnDefinition>

<line>
<text></text>
</line>
<line>
<text>-- ConnectArg information: </text>
</line>
<line>
<text>-- [not recursive]</text>
</line>
<line>
<text>-- [not exported]</text>
</line>
<line>
<text>-- [local reference counter = 0]</text>
</line>
<line>
<text>-- [import reference counter = 0]</text>
</line>
<line>
<text></text>
</line>
<line>
<text>ConnectArg ::= SEQUENCE</text>
</line>
<line>
<text>{</text>
</line>
<line>
<text>    destinationRoutingAddress [0] IMPLICIT DestinationRoutingAddress -- [linked] --,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    originalCalledPartyID [6] IMPLICIT OriginalCalledPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    extensions [10] IMPLICIT SEQUENCE (SIZE(1..numOfExtensions -- [linked] --)) OF ExtensionField -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    genericNumbers [14] IMPLICIT GenericNumbers -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartyNumber [27] IMPLICIT CallingPartyNumber -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    callingPartysCategory [28] IMPLICIT CallingPartysCategory -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectingPartyID [29] IMPLICIT RedirectingPartyID -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    redirectionInformation [30] IMPLICIT RedirectionInformation -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    suppressionOfAnnouncement [55] IMPLICIT SuppressionOfAnnouncement -- [linked] -- OPTIONAL,</text>
<shift></shift>
</line>
<line>
<text></text>
</line>
<line>
<text>    oCSIApplicable [56] IMPLICIT OCSIApplicable -- [linked] -- OPTIONAL</text>
<shift></shift>
</line>
<line>
<text>}</text>
</line>
<line>
<text></text>
</line>
<line>
<text></text>
</line>

</asnDefinition>



</asnSequence>

</asnType>

