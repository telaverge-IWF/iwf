//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#include <cap_v3_camel_fci_billing_charging_characteristics.h>

#include <AsnDescChoice.h>
#include <AsnDescSequence.h>
#include <AsnDescOctetString.h>
#include <AsnDescEnumerated.h>


using namespace its;
using namespace cap_v3;




////////// Begin Nested Class(es) //////////




////////// Begin Nested Class(es) //////////



AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::FCIBCCCAMELsequence1::FreeFormatData::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new FreeFormatData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 160;
        staticDesc.SetNamedTypeName("freeFormatData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


// Type SendingSideID is a reference => no code generated.

// Type AppendFreeFormatData is a reference => no code generated.

////////// End Nested Class(es) //////////

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::FCIBCCCAMELsequence1::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new FCIBCCCAMELsequence1(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = GetFreeFormatDataStaticDescription();
        staticDesc._elementVect[1] = GetPartyToChargeStaticDescription();
        staticDesc._elementVect[2] = GetAppendFreeFormatDataStaticDescription();
        staticDesc.SetNamedTypeName("fCIBCCCAMELsequence1");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::FCIBCCCAMELsequence1::GetFreeFormatDataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescOctetString staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FreeFormatData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 0));
        staticDesc._clauseSize = true;
        staticDesc._minSize = 1;
        staticDesc._maxSize = 160;
        staticDesc.SetNamedTypeName("freeFormatData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::FCIBCCCAMELsequence1::GetPartyToChargeStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new SendingSideID(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 1));
        staticDesc._clauseDefault = true;
        {
            SendingSideID* sendingSideID = new SendingSideID(&staticDesc);
            std::vector<byte> array;
            array.push_back(0x01U);
            LegType* legType = new LegType(array);
            sendingSideID->SetChoiceSendingSideID(legType);
            staticDesc.SetCloneForDefaultFactory(sendingSideID);
        }
        staticDesc._choiceList.push_back(SendingSideID::GetSendingSideIDStaticDescription());
        staticDesc.SetNamedTypeName("partyToCharge");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::FCIBCCCAMELsequence1::GetAppendFreeFormatDataStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescEnumerated staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new AppendFreeFormatData(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_PRIMITIVE, 2));
        staticDesc._clauseDefault = true;
        {
            AppendFreeFormatData* cloneForDefaultFactory = new AppendFreeFormatData(&staticDesc);
            cloneForDefaultFactory->SetValue((long)0);
            staticDesc.SetCloneForDefaultFactory(cloneForDefaultFactory);
        }
        staticDesc._valueSet.insert(0);
        staticDesc._valueSet.insert(1);
        static AsnDescEnumerated::NamedNumber namedNumberList[] = {{"overwrite", 0}, {"append", 1}, {NULL, 0}};
        staticDesc.SetNamedNumberList(namedNumberList);
        staticDesc.SetNamedTypeName("appendFreeFormatData");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}


////////// End Nested Class(es) //////////

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::GetStaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescChoice staticDesc;

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        if (CheckLicense(ITS_LIC_CAP_CAMEL) != ITS_TRUE)
        {
            Asn::Unlock();
            exit(0);
        }

        staticDesc.SetCloneForFactory(new CAMEL_FCIBillingChargingCharacteristics(&staticDesc));
        staticDesc._choiceList.push_back(GetFCIBCCCAMELsequence1StaticDescription());
        staticDesc.SetTypeName("CAMEL-FCIBillingChargingCharacteristics");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}

AsnDescObject* CAMEL_FCIBillingChargingCharacteristics::GetFCIBCCCAMELsequence1StaticDescription()
{
    static volatile bool initialized = false;
    static AsnDescObject* result = NULL;
    static AsnDescSequence staticDesc(3);

    if (initialized)
    {
        return result;
    }

    Asn::Lock();

    if (initialized)
    {
        Asn::Unlock();
        return result;
    }
    else
    {
        staticDesc.SetCloneForFactory(new FCIBCCCAMELsequence1(&staticDesc));
        staticDesc.TagAddLevel(new Tag(Tag::ASN_CLASS_CONTEXT_SPECIFIC, Tag::ASN_CONSTRUCTED, 0));
        staticDesc._elementVect[0] = FCIBCCCAMELsequence1::GetFreeFormatDataStaticDescription();
        staticDesc._elementVect[1] = FCIBCCCAMELsequence1::GetPartyToChargeStaticDescription();
        staticDesc._elementVect[2] = FCIBCCCAMELsequence1::GetAppendFreeFormatDataStaticDescription();
        staticDesc.SetNamedTypeName("fCIBCCCAMELsequence1");
        result = &staticDesc;
        initialized = true;
        Asn::Unlock();
        return result;
    }
}





