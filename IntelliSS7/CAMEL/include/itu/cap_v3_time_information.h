//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_TIME_INFORMATION_H_)
#define _CAP_V3_TIME_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequence.h>

#include <cap_v3_time_if_no_tariff_switch.h>
#include <cap_v3_time_if_tariff_switch.h>



namespace cap_v3 {



class TimeInformation : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::TimeIfNoTariffSwitch TimeIfNoTariffSwitch;


        typedef cap_v3::TimeIfTariffSwitch TimeIfTariffSwitch;


////////// End Nested Class(es) //////////

    TimeInformation() : its::AsnChoice(false)
    {
        Initialize();
    }

    TimeInformation(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    TimeInformation(const TimeInformation& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    TimeInformation(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    TimeInformation(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTimeIfNoTariffSwitchStaticDescription();
    static its::AsnDescObject* GetTimeIfTariffSwitchStaticDescription();

public:

    virtual ~TimeInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TimeInformation(*this);
    }

    virtual std::string GetName() const
    { return "TimeInformation"; }

    void SetChoiceTimeIfNoTariffSwitch(TimeIfNoTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTimeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTimeIfNoTariffSwitch(const TimeIfNoTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<TimeIfNoTariffSwitch&>(choice);
        asnObject.SetDescription(GetTimeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTimeIfNoTariffSwitch() const
    {
        return Contains(GetTimeIfNoTariffSwitchStaticDescription()->TagIdentity());
    }

    const TimeIfNoTariffSwitch& GetChoiceTimeIfNoTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceTimeIfNoTariffSwitch());
        return static_cast<const TimeIfNoTariffSwitch&> (GetChoice());
    }

    void SetChoiceTimeIfTariffSwitch(TimeIfTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTimeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTimeIfTariffSwitch(const TimeIfTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<TimeIfTariffSwitch&>(choice);
        asnObject.SetDescription(GetTimeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTimeIfTariffSwitch() const
    {
        return Contains(GetTimeIfTariffSwitchStaticDescription()->TagIdentity());
    }

    const TimeIfTariffSwitch& GetChoiceTimeIfTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceTimeIfTariffSwitch());
        return static_cast<const TimeIfTariffSwitch&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_TIME_INFORMATION_H_)

