//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_INITIAL_DP_ARG_H_)
#define _CAP_V3_INITIAL_DP_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnNull.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>

#include <cap_v3_service_key.h>
#include <cap_v3_called_party_number.h>
#include <cap_v3_calling_party_number.h>
#include <cap_v3_calling_partys_category.h>
#include <cap_v3_cg_encountered.h>
#include <cap_v3_ipssp_capabilities.h>
#include <cap_v3_location_number.h>
#include <cap_v3_original_called_party_id.h>
#include <cap_v3_extension_field.h>
#include <cap_v3_high_layer_compatibility.h>
#include <cap_v3_additional_calling_party_number.h>
#include <cap_v3_bearer_capability.h>
#include <cap_v3_event_type_bcsm.h>
#include <cap_v3_redirecting_party_id.h>
#include <cap_v3_redirection_information.h>
#include <cap_v3_cause.h>
#include <cap_v3_service_interaction_indicators_two.h>
#include <cap_v3_carrier.h>
#include <cap_v3_cug_index.h>
#include <cap_v3_cug_interlock.h>
#include <cap_v3_imsi.h>
#include <cap_v3_subscriber_state.h>
#include <cap_v3_location_information.h>
#include <cap_v3_ext_basic_service_code.h>
#include <cap_v3_call_reference_number.h>
#include <cap_v3_isdn_address_string.h>
#include <cap_v3_called_party_bcd_number.h>
#include <cap_v3_time_and_timezone.h>
#include <cap_v3_initial_dp_arg_extension.h>



namespace cap_v3 {



class InitialDPArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef cap_v3::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };



    class Cug_OutgoingAccess : public its::AsnNull
    {
    public:

        Cug_OutgoingAccess() : its::AsnNull(false)
        {
            Initialize();
        }

        Cug_OutgoingAccess(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Cug_OutgoingAccess(const Cug_OutgoingAccess& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Cug_OutgoingAccess(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Cug_OutgoingAccess()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Cug_OutgoingAccess(*this);
        }

        virtual std::string GetName() const
        { return "Cug_OutgoingAccess"; }

    };



    class Gsm_ForwardingPending : public its::AsnNull
    {
    public:

        Gsm_ForwardingPending() : its::AsnNull(false)
        {
            Initialize();
        }

        Gsm_ForwardingPending(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        Gsm_ForwardingPending(const Gsm_ForwardingPending& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        Gsm_ForwardingPending(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Gsm_ForwardingPending()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Gsm_ForwardingPending(*this);
        }

        virtual std::string GetName() const
        { return "Gsm_ForwardingPending"; }

    };


        typedef cap_v3::ServiceKey ServiceKey;


        typedef cap_v3::CalledPartyNumber CalledPartyNumber;


        typedef cap_v3::CallingPartyNumber CallingPartyNumber;


        typedef cap_v3::CallingPartysCategory CallingPartysCategory;


        typedef cap_v3::CGEncountered CGEncountered;


        typedef cap_v3::IPSSPCapabilities IPSSPCapabilities;


        typedef cap_v3::LocationNumber LocationNumber;


        typedef cap_v3::OriginalCalledPartyID OriginalCalledPartyID;


        typedef cap_v3::HighLayerCompatibility HighLayerCompatibility;


        typedef cap_v3::AdditionalCallingPartyNumber AdditionalCallingPartyNumber;


        typedef cap_v3::BearerCapability BearerCapability;


        typedef cap_v3::EventTypeBCSM EventTypeBCSM;


        typedef cap_v3::RedirectingPartyID RedirectingPartyID;


        typedef cap_v3::RedirectionInformation RedirectionInformation;


        typedef cap_v3::Cause Cause;


        typedef cap_v3::ServiceInteractionIndicatorsTwo ServiceInteractionIndicatorsTwo;


        typedef cap_v3::Carrier Carrier;


        typedef cap_v3::CUG_Index CUG_Index;


        typedef cap_v3::CUG_Interlock CUG_Interlock;


        typedef cap_v3::IMSI IMSI;


        typedef cap_v3::SubscriberState SubscriberState;


        typedef cap_v3::LocationInformation LocationInformation;


        typedef cap_v3::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef cap_v3::CallReferenceNumber CallReferenceNumber;


        typedef cap_v3::ISDN_AddressString ISDN_AddressString;


        typedef cap_v3::CalledPartyBCDNumber CalledPartyBCDNumber;


        typedef cap_v3::TimeAndTimezone TimeAndTimezone;


        typedef cap_v3::InitialDPArgExtension InitialDPArgExtension;


////////// End Nested Class(es) //////////

    InitialDPArg() : its::AsnSequence(31, false)
    {
        Initialize();
    }

    InitialDPArg(its::Octets& octets) : its::AsnSequence(31, false)
    {
        Initialize();
        Decode(octets);
    }

    InitialDPArg(const InitialDPArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InitialDPArg(its::AsnDescObject* description) : its::AsnSequence(31, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetCalledPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartysCategoryStaticDescription();
    static its::AsnDescObject* GetCGEncounteredStaticDescription();
    static its::AsnDescObject* GetIPSSPCapabilitiesStaticDescription();
    static its::AsnDescObject* GetLocationNumberStaticDescription();
    static its::AsnDescObject* GetOriginalCalledPartyIDStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetHighLayerCompatibilityStaticDescription();
    static its::AsnDescObject* GetAdditionalCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetBearerCapabilityStaticDescription();
    static its::AsnDescObject* GetEventTypeBCSMStaticDescription();
    static its::AsnDescObject* GetRedirectingPartyIDStaticDescription();
    static its::AsnDescObject* GetRedirectionInformationStaticDescription();
    static its::AsnDescObject* GetCauseStaticDescription();
    static its::AsnDescObject* GetServiceInteractionIndicatorsTwoStaticDescription();
    static its::AsnDescObject* GetCarrierStaticDescription();
    static its::AsnDescObject* GetCug_IndexStaticDescription();
    static its::AsnDescObject* GetCug_InterlockStaticDescription();
    static its::AsnDescObject* GetCug_OutgoingAccessStaticDescription();
    static its::AsnDescObject* GetIMSIStaticDescription();
    static its::AsnDescObject* GetSubscriberStateStaticDescription();
    static its::AsnDescObject* GetLocationInformationStaticDescription();
    static its::AsnDescObject* GetExt_basicServiceCodeStaticDescription();
    static its::AsnDescObject* GetCallReferenceNumberStaticDescription();
    static its::AsnDescObject* GetMscAddressStaticDescription();
    static its::AsnDescObject* GetCalledPartyBCDNumberStaticDescription();
    static its::AsnDescObject* GetTimeAndTimezoneStaticDescription();
    static its::AsnDescObject* GetGsm_ForwardingPendingStaticDescription();
    static its::AsnDescObject* GetInitialDPArgExtensionStaticDescription();

public:

    virtual ~InitialDPArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InitialDPArg(*this);
    }

    virtual std::string GetName() const
    { return "InitialDPArg"; }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    const ServiceKey& GetServiceKey() const
    {
        return static_cast<const ServiceKey&> (ElementAt(0));
    }

    void SetCalledPartyNumber(CalledPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(1, element);
    }

    void SetCalledPartyNumber(const CalledPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
        asnObject.SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(1, element);
    }

    bool OptionCalledPartyNumber() const
    {
        return Contains(1);
    }

    const CalledPartyNumber& GetCalledPartyNumber() const
    {
        ITS_REQUIRE(OptionCalledPartyNumber());
        return static_cast<const CalledPartyNumber&> (ElementAt(1));
    }

    void SetCallingPartyNumber(CallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(2, element);
    }

    void SetCallingPartyNumber(const CallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyNumber&>(element);
        asnObject.SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(2, element);
    }

    bool OptionCallingPartyNumber() const
    {
        return Contains(2);
    }

    const CallingPartyNumber& GetCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionCallingPartyNumber());
        return static_cast<const CallingPartyNumber&> (ElementAt(2));
    }

    void SetCallingPartysCategory(CallingPartysCategory* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(3, element);
    }

    void SetCallingPartysCategory(const CallingPartysCategory& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartysCategory&>(element);
        asnObject.SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallingPartysCategory() const
    {
        return Contains(3);
    }

    const CallingPartysCategory& GetCallingPartysCategory() const
    {
        ITS_REQUIRE(OptionCallingPartysCategory());
        return static_cast<const CallingPartysCategory&> (ElementAt(3));
    }

    void SetCGEncountered(CGEncountered* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCGEncounteredStaticDescription());
        AddElement(4, element);
    }

    void SetCGEncountered(const CGEncountered& element)
    {
        its::AsnObject& asnObject = const_cast<CGEncountered&>(element);
        asnObject.SetDescription(GetCGEncounteredStaticDescription());
        AddElement(4, element);
    }

    bool OptionCGEncountered() const
    {
        return Contains(4);
    }

    const CGEncountered& GetCGEncountered() const
    {
        ITS_REQUIRE(OptionCGEncountered());
        return static_cast<const CGEncountered&> (ElementAt(4));
    }

    void SetIPSSPCapabilities(IPSSPCapabilities* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIPSSPCapabilitiesStaticDescription());
        AddElement(5, element);
    }

    void SetIPSSPCapabilities(const IPSSPCapabilities& element)
    {
        its::AsnObject& asnObject = const_cast<IPSSPCapabilities&>(element);
        asnObject.SetDescription(GetIPSSPCapabilitiesStaticDescription());
        AddElement(5, element);
    }

    bool OptionIPSSPCapabilities() const
    {
        return Contains(5);
    }

    const IPSSPCapabilities& GetIPSSPCapabilities() const
    {
        ITS_REQUIRE(OptionIPSSPCapabilities());
        return static_cast<const IPSSPCapabilities&> (ElementAt(5));
    }

    void SetLocationNumber(LocationNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
        AddElement(6, element);
    }

    void SetLocationNumber(const LocationNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
        asnObject.SetDescription(GetLocationNumberStaticDescription());
        AddElement(6, element);
    }

    bool OptionLocationNumber() const
    {
        return Contains(6);
    }

    const LocationNumber& GetLocationNumber() const
    {
        ITS_REQUIRE(OptionLocationNumber());
        return static_cast<const LocationNumber&> (ElementAt(6));
    }

    void SetOriginalCalledPartyID(OriginalCalledPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(7, element);
    }

    void SetOriginalCalledPartyID(const OriginalCalledPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<OriginalCalledPartyID&>(element);
        asnObject.SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(7, element);
    }

    bool OptionOriginalCalledPartyID() const
    {
        return Contains(7);
    }

    const OriginalCalledPartyID& GetOriginalCalledPartyID() const
    {
        ITS_REQUIRE(OptionOriginalCalledPartyID());
        return static_cast<const OriginalCalledPartyID&> (ElementAt(7));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(8, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(8, element);
    }

    bool OptionExtensions() const
    {
        return Contains(8);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(8));
    }

    void SetHighLayerCompatibility(HighLayerCompatibility* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(9, element);
    }

    void SetHighLayerCompatibility(const HighLayerCompatibility& element)
    {
        its::AsnObject& asnObject = const_cast<HighLayerCompatibility&>(element);
        asnObject.SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(9, element);
    }

    bool OptionHighLayerCompatibility() const
    {
        return Contains(9);
    }

    const HighLayerCompatibility& GetHighLayerCompatibility() const
    {
        ITS_REQUIRE(OptionHighLayerCompatibility());
        return static_cast<const HighLayerCompatibility&> (ElementAt(9));
    }

    void SetAdditionalCallingPartyNumber(AdditionalCallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(10, element);
    }

    void SetAdditionalCallingPartyNumber(const AdditionalCallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalCallingPartyNumber&>(element);
        asnObject.SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(10, element);
    }

    bool OptionAdditionalCallingPartyNumber() const
    {
        return Contains(10);
    }

    const AdditionalCallingPartyNumber& GetAdditionalCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionAdditionalCallingPartyNumber());
        return static_cast<const AdditionalCallingPartyNumber&> (ElementAt(10));
    }

    void SetBearerCapability(BearerCapability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(11, element);
    }

    void SetBearerCapability(const BearerCapability& element)
    {
        its::AsnObject& asnObject = const_cast<BearerCapability&>(element);
        asnObject.SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(11, element);
    }

    bool OptionBearerCapability() const
    {
        return Contains(11);
    }

    const BearerCapability& GetBearerCapability() const
    {
        ITS_REQUIRE(OptionBearerCapability());
        return static_cast<const BearerCapability&> (ElementAt(11));
    }

    void SetEventTypeBCSM(EventTypeBCSM* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(12, element);
    }

    void SetEventTypeBCSM(const EventTypeBCSM& element)
    {
        its::AsnObject& asnObject = const_cast<EventTypeBCSM&>(element);
        asnObject.SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(12, element);
    }

    bool OptionEventTypeBCSM() const
    {
        return Contains(12);
    }

    const EventTypeBCSM& GetEventTypeBCSM() const
    {
        ITS_REQUIRE(OptionEventTypeBCSM());
        return static_cast<const EventTypeBCSM&> (ElementAt(12));
    }

    void SetRedirectingPartyID(RedirectingPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(13, element);
    }

    void SetRedirectingPartyID(const RedirectingPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectingPartyID&>(element);
        asnObject.SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(13, element);
    }

    bool OptionRedirectingPartyID() const
    {
        return Contains(13);
    }

    const RedirectingPartyID& GetRedirectingPartyID() const
    {
        ITS_REQUIRE(OptionRedirectingPartyID());
        return static_cast<const RedirectingPartyID&> (ElementAt(13));
    }

    void SetRedirectionInformation(RedirectionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(14, element);
    }

    void SetRedirectionInformation(const RedirectionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectionInformation&>(element);
        asnObject.SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(14, element);
    }

    bool OptionRedirectionInformation() const
    {
        return Contains(14);
    }

    const RedirectionInformation& GetRedirectionInformation() const
    {
        ITS_REQUIRE(OptionRedirectionInformation());
        return static_cast<const RedirectionInformation&> (ElementAt(14));
    }

    void SetCause(Cause* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCauseStaticDescription());
        AddElement(15, element);
    }

    void SetCause(const Cause& element)
    {
        its::AsnObject& asnObject = const_cast<Cause&>(element);
        asnObject.SetDescription(GetCauseStaticDescription());
        AddElement(15, element);
    }

    bool OptionCause() const
    {
        return Contains(15);
    }

    const Cause& GetCause() const
    {
        ITS_REQUIRE(OptionCause());
        return static_cast<const Cause&> (ElementAt(15));
    }

    void SetServiceInteractionIndicatorsTwo(ServiceInteractionIndicatorsTwo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(16, element);
    }

    void SetServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceInteractionIndicatorsTwo&>(element);
        asnObject.SetDescription(GetServiceInteractionIndicatorsTwoStaticDescription());
        AddElement(16, element);
    }

    bool OptionServiceInteractionIndicatorsTwo() const
    {
        return Contains(16);
    }

    const ServiceInteractionIndicatorsTwo& GetServiceInteractionIndicatorsTwo() const
    {
        ITS_REQUIRE(OptionServiceInteractionIndicatorsTwo());
        return static_cast<const ServiceInteractionIndicatorsTwo&> (ElementAt(16));
    }

    void SetCarrier(Carrier* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCarrierStaticDescription());
        AddElement(17, element);
    }

    void SetCarrier(const Carrier& element)
    {
        its::AsnObject& asnObject = const_cast<Carrier&>(element);
        asnObject.SetDescription(GetCarrierStaticDescription());
        AddElement(17, element);
    }

    bool OptionCarrier() const
    {
        return Contains(17);
    }

    const Carrier& GetCarrier() const
    {
        ITS_REQUIRE(OptionCarrier());
        return static_cast<const Carrier&> (ElementAt(17));
    }

    void SetCug_Index(CUG_Index* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_IndexStaticDescription());
        AddElement(18, element);
    }

    void SetCug_Index(const CUG_Index& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Index&>(element);
        asnObject.SetDescription(GetCug_IndexStaticDescription());
        AddElement(18, element);
    }

    bool OptionCug_Index() const
    {
        return Contains(18);
    }

    const CUG_Index& GetCug_Index() const
    {
        ITS_REQUIRE(OptionCug_Index());
        return static_cast<const CUG_Index&> (ElementAt(18));
    }

    void SetCug_Interlock(CUG_Interlock* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_InterlockStaticDescription());
        AddElement(19, element);
    }

    void SetCug_Interlock(const CUG_Interlock& element)
    {
        its::AsnObject& asnObject = const_cast<CUG_Interlock&>(element);
        asnObject.SetDescription(GetCug_InterlockStaticDescription());
        AddElement(19, element);
    }

    bool OptionCug_Interlock() const
    {
        return Contains(19);
    }

    const CUG_Interlock& GetCug_Interlock() const
    {
        ITS_REQUIRE(OptionCug_Interlock());
        return static_cast<const CUG_Interlock&> (ElementAt(19));
    }

    void SetCug_OutgoingAccess(Cug_OutgoingAccess* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCug_OutgoingAccessStaticDescription());
        AddElement(20, element);
    }

    void SetCug_OutgoingAccess(const Cug_OutgoingAccess& element)
    {
        its::AsnObject& asnObject = const_cast<Cug_OutgoingAccess&>(element);
        asnObject.SetDescription(GetCug_OutgoingAccessStaticDescription());
        AddElement(20, element);
    }

    bool OptionCug_OutgoingAccess() const
    {
        return Contains(20);
    }

    const Cug_OutgoingAccess& GetCug_OutgoingAccess() const
    {
        ITS_REQUIRE(OptionCug_OutgoingAccess());
        return static_cast<const Cug_OutgoingAccess&> (ElementAt(20));
    }

    void SetIMSI(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIMSIStaticDescription());
        AddElement(21, element);
    }

    void SetIMSI(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetIMSIStaticDescription());
        AddElement(21, element);
    }

    bool OptionIMSI() const
    {
        return Contains(21);
    }

    const IMSI& GetIMSI() const
    {
        ITS_REQUIRE(OptionIMSI());
        return static_cast<const IMSI&> (ElementAt(21));
    }

    void SetSubscriberState(SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStateStaticDescription());
        AddElement(22, element);
    }

    void SetSubscriberState(const SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberState&>(element);
        asnObject.SetDescription(GetSubscriberStateStaticDescription());
        AddElement(22, element);
    }

    bool OptionSubscriberState() const
    {
        return Contains(22);
    }

    const SubscriberState& GetSubscriberState() const
    {
        ITS_REQUIRE(OptionSubscriberState());
        return static_cast<const SubscriberState&> (ElementAt(22));
    }

    void SetLocationInformation(LocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationStaticDescription());
        AddElement(23, element);
    }

    void SetLocationInformation(const LocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformation&>(element);
        asnObject.SetDescription(GetLocationInformationStaticDescription());
        AddElement(23, element);
    }

    bool OptionLocationInformation() const
    {
        return Contains(23);
    }

    const LocationInformation& GetLocationInformation() const
    {
        ITS_REQUIRE(OptionLocationInformation());
        return static_cast<const LocationInformation&> (ElementAt(23));
    }

    void SetExt_basicServiceCode(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExt_basicServiceCodeStaticDescription());
        AddElement(24, element);
    }

    void SetExt_basicServiceCode(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetExt_basicServiceCodeStaticDescription());
        AddElement(24, element);
    }

    bool OptionExt_basicServiceCode() const
    {
        return Contains(24);
    }

    const Ext_BasicServiceCode& GetExt_basicServiceCode() const
    {
        ITS_REQUIRE(OptionExt_basicServiceCode());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(24));
    }

    void SetCallReferenceNumber(CallReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(25, element);
    }

    void SetCallReferenceNumber(const CallReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallReferenceNumber&>(element);
        asnObject.SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(25, element);
    }

    bool OptionCallReferenceNumber() const
    {
        return Contains(25);
    }

    const CallReferenceNumber& GetCallReferenceNumber() const
    {
        ITS_REQUIRE(OptionCallReferenceNumber());
        return static_cast<const CallReferenceNumber&> (ElementAt(25));
    }

    void SetMscAddress(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMscAddressStaticDescription());
        AddElement(26, element);
    }

    void SetMscAddress(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMscAddressStaticDescription());
        AddElement(26, element);
    }

    bool OptionMscAddress() const
    {
        return Contains(26);
    }

    const ISDN_AddressString& GetMscAddress() const
    {
        ITS_REQUIRE(OptionMscAddress());
        return static_cast<const ISDN_AddressString&> (ElementAt(26));
    }

    void SetCalledPartyBCDNumber(CalledPartyBCDNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyBCDNumberStaticDescription());
        AddElement(27, element);
    }

    void SetCalledPartyBCDNumber(const CalledPartyBCDNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyBCDNumber&>(element);
        asnObject.SetDescription(GetCalledPartyBCDNumberStaticDescription());
        AddElement(27, element);
    }

    bool OptionCalledPartyBCDNumber() const
    {
        return Contains(27);
    }

    const CalledPartyBCDNumber& GetCalledPartyBCDNumber() const
    {
        ITS_REQUIRE(OptionCalledPartyBCDNumber());
        return static_cast<const CalledPartyBCDNumber&> (ElementAt(27));
    }

    void SetTimeAndTimezone(TimeAndTimezone* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTimeAndTimezoneStaticDescription());
        AddElement(28, element);
    }

    void SetTimeAndTimezone(const TimeAndTimezone& element)
    {
        its::AsnObject& asnObject = const_cast<TimeAndTimezone&>(element);
        asnObject.SetDescription(GetTimeAndTimezoneStaticDescription());
        AddElement(28, element);
    }

    bool OptionTimeAndTimezone() const
    {
        return Contains(28);
    }

    const TimeAndTimezone& GetTimeAndTimezone() const
    {
        ITS_REQUIRE(OptionTimeAndTimezone());
        return static_cast<const TimeAndTimezone&> (ElementAt(28));
    }

    void SetGsm_ForwardingPending(Gsm_ForwardingPending* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGsm_ForwardingPendingStaticDescription());
        AddElement(29, element);
    }

    void SetGsm_ForwardingPending(const Gsm_ForwardingPending& element)
    {
        its::AsnObject& asnObject = const_cast<Gsm_ForwardingPending&>(element);
        asnObject.SetDescription(GetGsm_ForwardingPendingStaticDescription());
        AddElement(29, element);
    }

    bool OptionGsm_ForwardingPending() const
    {
        return Contains(29);
    }

    const Gsm_ForwardingPending& GetGsm_ForwardingPending() const
    {
        ITS_REQUIRE(OptionGsm_ForwardingPending());
        return static_cast<const Gsm_ForwardingPending&> (ElementAt(29));
    }

    void SetInitialDPArgExtension(InitialDPArgExtension* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInitialDPArgExtensionStaticDescription());
        AddElement(30, element);
    }

    void SetInitialDPArgExtension(const InitialDPArgExtension& element)
    {
        its::AsnObject& asnObject = const_cast<InitialDPArgExtension&>(element);
        asnObject.SetDescription(GetInitialDPArgExtensionStaticDescription());
        AddElement(30, element);
    }

    bool OptionInitialDPArgExtension() const
    {
        return Contains(30);
    }

    const InitialDPArgExtension& GetInitialDPArgExtension() const
    {
        ITS_REQUIRE(OptionInitialDPArgExtension());
        return static_cast<const InitialDPArgExtension&> (ElementAt(30));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_INITIAL_DP_ARG_H_)

