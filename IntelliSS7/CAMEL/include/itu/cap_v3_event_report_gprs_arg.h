//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_EVENT_REPORT_GPRS_ARG_H_)
#define _CAP_V3_EVENT_REPORT_GPRS_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnEnumerated.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <cap_v3_gprs_reference_number.h>
#include <cap_v3_gprs_event_type.h>
#include <cap_v3_misc_call_info.h>
#include <cap_v3_gprs_event_specific_information.h>
#include <cap_v3_pdpid.h>



namespace cap_v3 {



class EventReportGPRSArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::GPRS_ReferenceNumber GPRS_ReferenceNumber;


        typedef cap_v3::GPRSEventType GPRSEventType;


        typedef cap_v3::MiscCallInfo MiscCallInfo;


        typedef cap_v3::GPRSEventSpecificInformation GPRSEventSpecificInformation;


        typedef cap_v3::PDPID PDPID;


////////// End Nested Class(es) //////////

    EventReportGPRSArg() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    EventReportGPRSArg(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    EventReportGPRSArg(const EventReportGPRSArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    EventReportGPRSArg(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGPRS_ReferenceNumberStaticDescription();
    static its::AsnDescObject* GetGPRSEventTypeStaticDescription();
    static its::AsnDescObject* GetMiscGPRSInfoStaticDescription();
    static its::AsnDescObject* GetGPRSEventSpecificInformationStaticDescription();
    static its::AsnDescObject* GetPDPIDStaticDescription();

public:

    virtual ~EventReportGPRSArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventReportGPRSArg(*this);
    }

    virtual std::string GetName() const
    { return "EventReportGPRSArg"; }

    void SetGPRS_ReferenceNumber(GPRS_ReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    void SetGPRS_ReferenceNumber(const GPRS_ReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<GPRS_ReferenceNumber&>(element);
        asnObject.SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    const GPRS_ReferenceNumber& GetGPRS_ReferenceNumber() const
    {
        return static_cast<const GPRS_ReferenceNumber&> (ElementAt(0));
    }

    void SetGPRSEventType(GPRSEventType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRSEventTypeStaticDescription());
        AddElement(1, element);
    }

    void SetGPRSEventType(const GPRSEventType& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSEventType&>(element);
        asnObject.SetDescription(GetGPRSEventTypeStaticDescription());
        AddElement(1, element);
    }

    const GPRSEventType& GetGPRSEventType() const
    {
        return static_cast<const GPRSEventType&> (ElementAt(1));
    }

    void SetMiscGPRSInfo(MiscCallInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMiscGPRSInfoStaticDescription());
        AddElement(2, element);
    }

    void SetMiscGPRSInfo(const MiscCallInfo& element)
    {
        its::AsnObject& asnObject = const_cast<MiscCallInfo&>(element);
        asnObject.SetDescription(GetMiscGPRSInfoStaticDescription());
        AddElement(2, element);
    }

    const MiscCallInfo& GetMiscGPRSInfo() const
    {
        return static_cast<const MiscCallInfo&> (ElementAt(2));
    }

    void SetGPRSEventSpecificInformation(GPRSEventSpecificInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRSEventSpecificInformationStaticDescription());
        AddElement(3, element);
    }

    void SetGPRSEventSpecificInformation(const GPRSEventSpecificInformation& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSEventSpecificInformation&>(element);
        asnObject.SetDescription(GetGPRSEventSpecificInformationStaticDescription());
        AddElement(3, element);
    }

    bool OptionGPRSEventSpecificInformation() const
    {
        return Contains(3);
    }

    const GPRSEventSpecificInformation& GetGPRSEventSpecificInformation() const
    {
        ITS_REQUIRE(OptionGPRSEventSpecificInformation());
        return static_cast<const GPRSEventSpecificInformation&> (ElementAt(3));
    }

    void SetPDPID(PDPID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPIDStaticDescription());
        AddElement(4, element);
    }

    void SetPDPID(const PDPID& element)
    {
        its::AsnObject& asnObject = const_cast<PDPID&>(element);
        asnObject.SetDescription(GetPDPIDStaticDescription());
        AddElement(4, element);
    }

    bool OptionPDPID() const
    {
        return Contains(4);
    }

    const PDPID& GetPDPID() const
    {
        ITS_REQUIRE(OptionPDPID());
        return static_cast<const PDPID&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_EVENT_REPORT_GPRS_ARG_H_)

