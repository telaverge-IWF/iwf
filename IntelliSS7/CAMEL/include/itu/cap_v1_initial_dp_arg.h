//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V1_INITIAL_DP_ARG_H_)
#define _CAP_V1_INITIAL_DP_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnChoice.h>
#include <AsnEnumerated.h>

#include <cap_v1_service_key.h>
#include <cap_v1_called_party_number.h>
#include <cap_v1_calling_party_number.h>
#include <cap_v1_calling_partys_category.h>
#include <cap_v1_location_number.h>
#include <cap_v1_original_called_party_id.h>
#include <cap_v1_extension_field.h>
#include <cap_v1_high_layer_compatibility.h>
#include <cap_v1_additional_calling_party_number.h>
#include <cap_v1_bearer_capability.h>
#include <cap_v1_event_type_bcsm.h>
#include <cap_v1_redirecting_party_id.h>
#include <cap_v1_redirection_information.h>
#include <cap_v1_imsi.h>
#include <cap_v1_subscriber_state.h>
#include <cap_v1_location_information.h>
#include <cap_v1_ext_basic_service_code.h>
#include <cap_v1_call_reference_number.h>
#include <cap_v1_isdn_address_string.h>
#include <cap_v1_called_party_bcd_number.h>



namespace cap_v1 {



class InitialDPArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef cap_v1::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef cap_v1::ServiceKey ServiceKey;


        typedef cap_v1::CalledPartyNumber CalledPartyNumber;


        typedef cap_v1::CallingPartyNumber CallingPartyNumber;


        typedef cap_v1::CallingPartysCategory CallingPartysCategory;


        typedef cap_v1::LocationNumber LocationNumber;


        typedef cap_v1::OriginalCalledPartyID OriginalCalledPartyID;


        typedef cap_v1::HighLayerCompatibility HighLayerCompatibility;


        typedef cap_v1::AdditionalCallingPartyNumber AdditionalCallingPartyNumber;


        typedef cap_v1::BearerCapability BearerCapability;


        typedef cap_v1::EventTypeBCSM EventTypeBCSM;


        typedef cap_v1::RedirectingPartyID RedirectingPartyID;


        typedef cap_v1::RedirectionInformation RedirectionInformation;


        typedef cap_v1::IMSI IMSI;


        typedef cap_v1::SubscriberState SubscriberState;


        typedef cap_v1::LocationInformation LocationInformation;


        typedef cap_v1::Ext_BasicServiceCode Ext_BasicServiceCode;


        typedef cap_v1::CallReferenceNumber CallReferenceNumber;


        typedef cap_v1::ISDN_AddressString ISDN_AddressString;


        typedef cap_v1::CalledPartyBCDNumber CalledPartyBCDNumber;


////////// End Nested Class(es) //////////

    InitialDPArg() : its::AsnSequence(20, false)
    {
        Initialize();
    }

    InitialDPArg(its::Octets& octets) : its::AsnSequence(20, false)
    {
        Initialize();
        Decode(octets);
    }

    InitialDPArg(const InitialDPArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InitialDPArg(its::AsnDescObject* description) : its::AsnSequence(20, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetCalledPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetCallingPartysCategoryStaticDescription();
    static its::AsnDescObject* GetLocationNumberStaticDescription();
    static its::AsnDescObject* GetOriginalCalledPartyIDStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();
    static its::AsnDescObject* GetHighLayerCompatibilityStaticDescription();
    static its::AsnDescObject* GetAdditionalCallingPartyNumberStaticDescription();
    static its::AsnDescObject* GetBearerCapabilityStaticDescription();
    static its::AsnDescObject* GetEventTypeBCSMStaticDescription();
    static its::AsnDescObject* GetRedirectingPartyIDStaticDescription();
    static its::AsnDescObject* GetRedirectionInformationStaticDescription();
    static its::AsnDescObject* GetIMSIStaticDescription();
    static its::AsnDescObject* GetSubscriberStateStaticDescription();
    static its::AsnDescObject* GetLocationInformationStaticDescription();
    static its::AsnDescObject* GetExt_basicServiceCodeStaticDescription();
    static its::AsnDescObject* GetCallReferenceNumberStaticDescription();
    static its::AsnDescObject* GetMscAddressStaticDescription();
    static its::AsnDescObject* GetCalledPartyBCDNumberStaticDescription();

public:

    virtual ~InitialDPArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InitialDPArg(*this);
    }

    virtual std::string GetName() const
    { return "InitialDPArg"; }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(0, element);
    }

    const ServiceKey& GetServiceKey() const
    {
        return static_cast<const ServiceKey&> (ElementAt(0));
    }

    void SetCalledPartyNumber(CalledPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(1, element);
    }

    void SetCalledPartyNumber(const CalledPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
        asnObject.SetDescription(GetCalledPartyNumberStaticDescription());
        AddElement(1, element);
    }

    bool OptionCalledPartyNumber() const
    {
        return Contains(1);
    }

    const CalledPartyNumber& GetCalledPartyNumber() const
    {
        ITS_REQUIRE(OptionCalledPartyNumber());
        return static_cast<const CalledPartyNumber&> (ElementAt(1));
    }

    void SetCallingPartyNumber(CallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(2, element);
    }

    void SetCallingPartyNumber(const CallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyNumber&>(element);
        asnObject.SetDescription(GetCallingPartyNumberStaticDescription());
        AddElement(2, element);
    }

    bool OptionCallingPartyNumber() const
    {
        return Contains(2);
    }

    const CallingPartyNumber& GetCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionCallingPartyNumber());
        return static_cast<const CallingPartyNumber&> (ElementAt(2));
    }

    void SetCallingPartysCategory(CallingPartysCategory* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(3, element);
    }

    void SetCallingPartysCategory(const CallingPartysCategory& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartysCategory&>(element);
        asnObject.SetDescription(GetCallingPartysCategoryStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallingPartysCategory() const
    {
        return Contains(3);
    }

    const CallingPartysCategory& GetCallingPartysCategory() const
    {
        ITS_REQUIRE(OptionCallingPartysCategory());
        return static_cast<const CallingPartysCategory&> (ElementAt(3));
    }

    void SetLocationNumber(LocationNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationNumberStaticDescription());
        AddElement(4, element);
    }

    void SetLocationNumber(const LocationNumber& element)
    {
        its::AsnObject& asnObject = const_cast<LocationNumber&>(element);
        asnObject.SetDescription(GetLocationNumberStaticDescription());
        AddElement(4, element);
    }

    bool OptionLocationNumber() const
    {
        return Contains(4);
    }

    const LocationNumber& GetLocationNumber() const
    {
        ITS_REQUIRE(OptionLocationNumber());
        return static_cast<const LocationNumber&> (ElementAt(4));
    }

    void SetOriginalCalledPartyID(OriginalCalledPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(5, element);
    }

    void SetOriginalCalledPartyID(const OriginalCalledPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<OriginalCalledPartyID&>(element);
        asnObject.SetDescription(GetOriginalCalledPartyIDStaticDescription());
        AddElement(5, element);
    }

    bool OptionOriginalCalledPartyID() const
    {
        return Contains(5);
    }

    const OriginalCalledPartyID& GetOriginalCalledPartyID() const
    {
        ITS_REQUIRE(OptionOriginalCalledPartyID());
        return static_cast<const OriginalCalledPartyID&> (ElementAt(5));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(6, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(6, element);
    }

    bool OptionExtensions() const
    {
        return Contains(6);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(6));
    }

    void SetHighLayerCompatibility(HighLayerCompatibility* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(7, element);
    }

    void SetHighLayerCompatibility(const HighLayerCompatibility& element)
    {
        its::AsnObject& asnObject = const_cast<HighLayerCompatibility&>(element);
        asnObject.SetDescription(GetHighLayerCompatibilityStaticDescription());
        AddElement(7, element);
    }

    bool OptionHighLayerCompatibility() const
    {
        return Contains(7);
    }

    const HighLayerCompatibility& GetHighLayerCompatibility() const
    {
        ITS_REQUIRE(OptionHighLayerCompatibility());
        return static_cast<const HighLayerCompatibility&> (ElementAt(7));
    }

    void SetAdditionalCallingPartyNumber(AdditionalCallingPartyNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(8, element);
    }

    void SetAdditionalCallingPartyNumber(const AdditionalCallingPartyNumber& element)
    {
        its::AsnObject& asnObject = const_cast<AdditionalCallingPartyNumber&>(element);
        asnObject.SetDescription(GetAdditionalCallingPartyNumberStaticDescription());
        AddElement(8, element);
    }

    bool OptionAdditionalCallingPartyNumber() const
    {
        return Contains(8);
    }

    const AdditionalCallingPartyNumber& GetAdditionalCallingPartyNumber() const
    {
        ITS_REQUIRE(OptionAdditionalCallingPartyNumber());
        return static_cast<const AdditionalCallingPartyNumber&> (ElementAt(8));
    }

    void SetBearerCapability(BearerCapability* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(9, element);
    }

    void SetBearerCapability(const BearerCapability& element)
    {
        its::AsnObject& asnObject = const_cast<BearerCapability&>(element);
        asnObject.SetDescription(GetBearerCapabilityStaticDescription());
        AddElement(9, element);
    }

    bool OptionBearerCapability() const
    {
        return Contains(9);
    }

    const BearerCapability& GetBearerCapability() const
    {
        ITS_REQUIRE(OptionBearerCapability());
        return static_cast<const BearerCapability&> (ElementAt(9));
    }

    void SetEventTypeBCSM(EventTypeBCSM* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(10, element);
    }

    void SetEventTypeBCSM(const EventTypeBCSM& element)
    {
        its::AsnObject& asnObject = const_cast<EventTypeBCSM&>(element);
        asnObject.SetDescription(GetEventTypeBCSMStaticDescription());
        AddElement(10, element);
    }

    bool OptionEventTypeBCSM() const
    {
        return Contains(10);
    }

    const EventTypeBCSM& GetEventTypeBCSM() const
    {
        ITS_REQUIRE(OptionEventTypeBCSM());
        return static_cast<const EventTypeBCSM&> (ElementAt(10));
    }

    void SetRedirectingPartyID(RedirectingPartyID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(11, element);
    }

    void SetRedirectingPartyID(const RedirectingPartyID& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectingPartyID&>(element);
        asnObject.SetDescription(GetRedirectingPartyIDStaticDescription());
        AddElement(11, element);
    }

    bool OptionRedirectingPartyID() const
    {
        return Contains(11);
    }

    const RedirectingPartyID& GetRedirectingPartyID() const
    {
        ITS_REQUIRE(OptionRedirectingPartyID());
        return static_cast<const RedirectingPartyID&> (ElementAt(11));
    }

    void SetRedirectionInformation(RedirectionInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(12, element);
    }

    void SetRedirectionInformation(const RedirectionInformation& element)
    {
        its::AsnObject& asnObject = const_cast<RedirectionInformation&>(element);
        asnObject.SetDescription(GetRedirectionInformationStaticDescription());
        AddElement(12, element);
    }

    bool OptionRedirectionInformation() const
    {
        return Contains(12);
    }

    const RedirectionInformation& GetRedirectionInformation() const
    {
        ITS_REQUIRE(OptionRedirectionInformation());
        return static_cast<const RedirectionInformation&> (ElementAt(12));
    }

    void SetIMSI(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIMSIStaticDescription());
        AddElement(13, element);
    }

    void SetIMSI(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetIMSIStaticDescription());
        AddElement(13, element);
    }

    bool OptionIMSI() const
    {
        return Contains(13);
    }

    const IMSI& GetIMSI() const
    {
        ITS_REQUIRE(OptionIMSI());
        return static_cast<const IMSI&> (ElementAt(13));
    }

    void SetSubscriberState(SubscriberState* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSubscriberStateStaticDescription());
        AddElement(14, element);
    }

    void SetSubscriberState(const SubscriberState& element)
    {
        its::AsnObject& asnObject = const_cast<SubscriberState&>(element);
        asnObject.SetDescription(GetSubscriberStateStaticDescription());
        AddElement(14, element);
    }

    bool OptionSubscriberState() const
    {
        return Contains(14);
    }

    const SubscriberState& GetSubscriberState() const
    {
        ITS_REQUIRE(OptionSubscriberState());
        return static_cast<const SubscriberState&> (ElementAt(14));
    }

    void SetLocationInformation(LocationInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetLocationInformationStaticDescription());
        AddElement(15, element);
    }

    void SetLocationInformation(const LocationInformation& element)
    {
        its::AsnObject& asnObject = const_cast<LocationInformation&>(element);
        asnObject.SetDescription(GetLocationInformationStaticDescription());
        AddElement(15, element);
    }

    bool OptionLocationInformation() const
    {
        return Contains(15);
    }

    const LocationInformation& GetLocationInformation() const
    {
        ITS_REQUIRE(OptionLocationInformation());
        return static_cast<const LocationInformation&> (ElementAt(15));
    }

    void SetExt_basicServiceCode(Ext_BasicServiceCode* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExt_basicServiceCodeStaticDescription());
        AddElement(16, element);
    }

    void SetExt_basicServiceCode(const Ext_BasicServiceCode& element)
    {
        its::AsnObject& asnObject = const_cast<Ext_BasicServiceCode&>(element);
        asnObject.SetDescription(GetExt_basicServiceCodeStaticDescription());
        AddElement(16, element);
    }

    bool OptionExt_basicServiceCode() const
    {
        return Contains(16);
    }

    const Ext_BasicServiceCode& GetExt_basicServiceCode() const
    {
        ITS_REQUIRE(OptionExt_basicServiceCode());
        return static_cast<const Ext_BasicServiceCode&> (ElementAt(16));
    }

    void SetCallReferenceNumber(CallReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(17, element);
    }

    void SetCallReferenceNumber(const CallReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CallReferenceNumber&>(element);
        asnObject.SetDescription(GetCallReferenceNumberStaticDescription());
        AddElement(17, element);
    }

    bool OptionCallReferenceNumber() const
    {
        return Contains(17);
    }

    const CallReferenceNumber& GetCallReferenceNumber() const
    {
        ITS_REQUIRE(OptionCallReferenceNumber());
        return static_cast<const CallReferenceNumber&> (ElementAt(17));
    }

    void SetMscAddress(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMscAddressStaticDescription());
        AddElement(18, element);
    }

    void SetMscAddress(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMscAddressStaticDescription());
        AddElement(18, element);
    }

    bool OptionMscAddress() const
    {
        return Contains(18);
    }

    const ISDN_AddressString& GetMscAddress() const
    {
        ITS_REQUIRE(OptionMscAddress());
        return static_cast<const ISDN_AddressString&> (ElementAt(18));
    }

    void SetCalledPartyBCDNumber(CalledPartyBCDNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCalledPartyBCDNumberStaticDescription());
        AddElement(19, element);
    }

    void SetCalledPartyBCDNumber(const CalledPartyBCDNumber& element)
    {
        its::AsnObject& asnObject = const_cast<CalledPartyBCDNumber&>(element);
        asnObject.SetDescription(GetCalledPartyBCDNumberStaticDescription());
        AddElement(19, element);
    }

    bool OptionCalledPartyBCDNumber() const
    {
        return Contains(19);
    }

    const CalledPartyBCDNumber& GetCalledPartyBCDNumber() const
    {
        ITS_REQUIRE(OptionCalledPartyBCDNumber());
        return static_cast<const CalledPartyBCDNumber&> (ElementAt(19));
    }

};



} // namespace.

#endif    // !defined(_CAP_V1_INITIAL_DP_ARG_H_)

