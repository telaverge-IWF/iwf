//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V1_EVENT_SPECIFIC_INFORMATION_BCSM_H_)
#define _CAP_V1_EVENT_SPECIFIC_INFORMATION_BCSM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <cap_v1_cause.h>



namespace cap_v1 {



class EventSpecificInformationBCSM : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class ODisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v1::Cause Cause;


    ////////// End Nested Class(es) //////////

        ODisconnectSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        ODisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        ODisconnectSpecificInfo(const ODisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ODisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~ODisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ODisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "ODisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class TDisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v1::Cause Cause;


    ////////// End Nested Class(es) //////////

        TDisconnectSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        TDisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        TDisconnectSpecificInfo(const TDisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TDisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~TDisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TDisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TDisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };


////////// End Nested Class(es) //////////

    EventSpecificInformationBCSM() : its::AsnChoice(false)
    {
        Initialize();
    }

    EventSpecificInformationBCSM(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EventSpecificInformationBCSM(const EventSpecificInformationBCSM& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetODisconnectSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTDisconnectSpecificInfoStaticDescription();

public:

    virtual ~EventSpecificInformationBCSM()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventSpecificInformationBCSM(*this);
    }

    virtual std::string GetName() const
    { return "EventSpecificInformationBCSM"; }

    void SetChoiceODisconnectSpecificInfo(ODisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceODisconnectSpecificInfo(const ODisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<ODisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceODisconnectSpecificInfo() const
    {
        return Contains(GetODisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const ODisconnectSpecificInfo& GetChoiceODisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceODisconnectSpecificInfo());
        return static_cast<const ODisconnectSpecificInfo&> (GetChoice());
    }

    void SetChoiceTDisconnectSpecificInfo(TDisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTDisconnectSpecificInfo(const TDisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TDisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTDisconnectSpecificInfo() const
    {
        return Contains(GetTDisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const TDisconnectSpecificInfo& GetChoiceTDisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTDisconnectSpecificInfo());
        return static_cast<const TDisconnectSpecificInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V1_EVENT_SPECIFIC_INFORMATION_BCSM_H_)

