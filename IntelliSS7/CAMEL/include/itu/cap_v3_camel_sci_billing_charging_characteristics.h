//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CAMEL_SCI_BILLING_CHARGING_CHARACTERISTICS_H_)
#define _CAP_V3_CAMEL_SCI_BILLING_CHARGING_CHARACTERISTICS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>

#include <cap_v3_aoc_before_answer.h>
#include <cap_v3_aoc_subsequent.h>



namespace cap_v3 {



class CAMEL_SCIBillingChargingCharacteristics : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::AOCBeforeAnswer AOCBeforeAnswer;


        typedef cap_v3::AOCSubsequent AOCSubsequent;


////////// End Nested Class(es) //////////

    CAMEL_SCIBillingChargingCharacteristics() : its::AsnSequence(2, false)
    {
        Initialize();
    }

    CAMEL_SCIBillingChargingCharacteristics(its::Octets& octets) : its::AsnSequence(2, false)
    {
        Initialize();
        Decode(octets);
    }

    CAMEL_SCIBillingChargingCharacteristics(const CAMEL_SCIBillingChargingCharacteristics& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CAMEL_SCIBillingChargingCharacteristics(its::AsnDescObject* description) : its::AsnSequence(2, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAOCBeforeAnswerStaticDescription();
    static its::AsnDescObject* GetAOCAfterAnswerStaticDescription();

public:

    virtual ~CAMEL_SCIBillingChargingCharacteristics()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CAMEL_SCIBillingChargingCharacteristics(*this);
    }

    virtual std::string GetName() const
    { return "CAMEL_SCIBillingChargingCharacteristics"; }

    void SetAOCBeforeAnswer(AOCBeforeAnswer* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAOCBeforeAnswerStaticDescription());
        AddElement(0, element);
    }

    void SetAOCBeforeAnswer(const AOCBeforeAnswer& element)
    {
        its::AsnObject& asnObject = const_cast<AOCBeforeAnswer&>(element);
        asnObject.SetDescription(GetAOCBeforeAnswerStaticDescription());
        AddElement(0, element);
    }

    const AOCBeforeAnswer& GetAOCBeforeAnswer() const
    {
        return static_cast<const AOCBeforeAnswer&> (ElementAt(0));
    }

    void SetAOCAfterAnswer(AOCSubsequent* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAOCAfterAnswerStaticDescription());
        AddElement(1, element);
    }

    void SetAOCAfterAnswer(const AOCSubsequent& element)
    {
        its::AsnObject& asnObject = const_cast<AOCSubsequent&>(element);
        asnObject.SetDescription(GetAOCAfterAnswerStaticDescription());
        AddElement(1, element);
    }

    const AOCSubsequent& GetAOCAfterAnswer() const
    {
        return static_cast<const AOCSubsequent&> (ElementAt(1));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CAMEL_SCI_BILLING_CHARGING_CHARACTERISTICS_H_)

