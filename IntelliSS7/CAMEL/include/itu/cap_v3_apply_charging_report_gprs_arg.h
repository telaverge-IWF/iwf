//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_APPLY_CHARGING_REPORT_GPRS_ARG_H_)
#define _CAP_V3_APPLY_CHARGING_REPORT_GPRS_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnBoolean.h>
#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <cap_v3_gprs_reference_number.h>
#include <cap_v3_charging_result.h>
#include <cap_v3_quality_of_service.h>
#include <cap_v3_pdpid.h>



namespace cap_v3 {



class ApplyChargingReportGPRSArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Active : public its::AsnBoolean
    {
    public:

        Active(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        Active(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        Active(const Active& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        Active(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        Active(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~Active()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Active(*this);
        }

        virtual std::string GetName() const
        { return "Active"; }

    };


        typedef cap_v3::GPRS_ReferenceNumber GPRS_ReferenceNumber;


        typedef cap_v3::ChargingResult ChargingResult;


        typedef cap_v3::QualityOfService QualityOfService;


        typedef cap_v3::PDPID PDPID;


////////// End Nested Class(es) //////////

    ApplyChargingReportGPRSArg() : its::AsnSequence(5, false)
    {
        Initialize();
    }

    ApplyChargingReportGPRSArg(its::Octets& octets) : its::AsnSequence(5, false)
    {
        Initialize();
        Decode(octets);
    }

    ApplyChargingReportGPRSArg(const ApplyChargingReportGPRSArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ApplyChargingReportGPRSArg(its::AsnDescObject* description) : its::AsnSequence(5, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGPRS_ReferenceNumberStaticDescription();
    static its::AsnDescObject* GetChargingResultStaticDescription();
    static its::AsnDescObject* GetQualityOfServiceStaticDescription();
    static its::AsnDescObject* GetActiveStaticDescription();
    static its::AsnDescObject* GetPDPIDStaticDescription();

public:

    virtual ~ApplyChargingReportGPRSArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ApplyChargingReportGPRSArg(*this);
    }

    virtual std::string GetName() const
    { return "ApplyChargingReportGPRSArg"; }

    void SetGPRS_ReferenceNumber(GPRS_ReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    void SetGPRS_ReferenceNumber(const GPRS_ReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<GPRS_ReferenceNumber&>(element);
        asnObject.SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    const GPRS_ReferenceNumber& GetGPRS_ReferenceNumber() const
    {
        return static_cast<const GPRS_ReferenceNumber&> (ElementAt(0));
    }

    void SetChargingResult(ChargingResult* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingResultStaticDescription());
        AddElement(1, element);
    }

    void SetChargingResult(const ChargingResult& element)
    {
        its::AsnObject& asnObject = const_cast<ChargingResult&>(element);
        asnObject.SetDescription(GetChargingResultStaticDescription());
        AddElement(1, element);
    }

    const ChargingResult& GetChargingResult() const
    {
        return static_cast<const ChargingResult&> (ElementAt(1));
    }

    void SetQualityOfService(QualityOfService* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQualityOfServiceStaticDescription());
        AddElement(2, element);
    }

    void SetQualityOfService(const QualityOfService& element)
    {
        its::AsnObject& asnObject = const_cast<QualityOfService&>(element);
        asnObject.SetDescription(GetQualityOfServiceStaticDescription());
        AddElement(2, element);
    }

    bool OptionQualityOfService() const
    {
        return Contains(2);
    }

    const QualityOfService& GetQualityOfService() const
    {
        ITS_REQUIRE(OptionQualityOfService());
        return static_cast<const QualityOfService&> (ElementAt(2));
    }

    void SetActive(Active* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetActiveStaticDescription());
        AddElement(3, element);
    }

    void SetActive(const Active& element)
    {
        its::AsnObject& asnObject = const_cast<Active&>(element);
        asnObject.SetDescription(GetActiveStaticDescription());
        AddElement(3, element);
    }

    const Active& GetActive() const
    {
        return static_cast<const Active&> (ElementAt(3));
    }

    void SetPDPID(PDPID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPIDStaticDescription());
        AddElement(4, element);
    }

    void SetPDPID(const PDPID& element)
    {
        its::AsnObject& asnObject = const_cast<PDPID&>(element);
        asnObject.SetDescription(GetPDPIDStaticDescription());
        AddElement(4, element);
    }

    bool OptionPDPID() const
    {
        return Contains(4);
    }

    const PDPID& GetPDPID() const
    {
        ITS_REQUIRE(OptionPDPID());
        return static_cast<const PDPID&> (ElementAt(4));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_APPLY_CHARGING_REPORT_GPRS_ARG_H_)

