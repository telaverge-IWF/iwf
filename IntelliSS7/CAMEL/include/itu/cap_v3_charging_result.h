//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CHARGING_RESULT_H_)
#define _CAP_V3_CHARGING_RESULT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>

#include <cap_v3_transferred_volume.h>
#include <cap_v3_elapsed_time.h>



namespace cap_v3 {



class ChargingResult : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::TransferredVolume TransferredVolume;


        typedef cap_v3::ElapsedTime ElapsedTime;


////////// End Nested Class(es) //////////

    ChargingResult() : its::AsnChoice(false)
    {
        Initialize();
    }

    ChargingResult(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ChargingResult(const ChargingResult& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ChargingResult(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ChargingResult(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTransferredVolumeStaticDescription();
    static its::AsnDescObject* GetElapsedTimeStaticDescription();

public:

    virtual ~ChargingResult()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ChargingResult(*this);
    }

    virtual std::string GetName() const
    { return "ChargingResult"; }

    void SetChoiceTransferredVolume(TransferredVolume* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTransferredVolumeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTransferredVolume(const TransferredVolume& choice)
    {
        its::AsnObject& asnObject = const_cast<TransferredVolume&>(choice);
        asnObject.SetDescription(GetTransferredVolumeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTransferredVolume() const
    {
        return Contains(GetTransferredVolumeStaticDescription()->TagIdentity());
    }

    const TransferredVolume& GetChoiceTransferredVolume() const
    {
        ITS_REQUIRE(ChoiceTransferredVolume());
        return static_cast<const TransferredVolume&> (GetChoice());
    }

    void SetChoiceElapsedTime(ElapsedTime* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetElapsedTimeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceElapsedTime(const ElapsedTime& choice)
    {
        its::AsnObject& asnObject = const_cast<ElapsedTime&>(choice);
        asnObject.SetDescription(GetElapsedTimeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceElapsedTime() const
    {
        return Contains(GetElapsedTimeStaticDescription()->TagIdentity());
    }

    const ElapsedTime& GetChoiceElapsedTime() const
    {
        ITS_REQUIRE(ChoiceElapsedTime());
        return static_cast<const ElapsedTime&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CHARGING_RESULT_H_)

