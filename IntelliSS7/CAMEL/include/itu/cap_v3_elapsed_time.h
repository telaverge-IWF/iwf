//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_ELAPSED_TIME_H_)
#define _CAP_V3_ELAPSED_TIME_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequence.h>



namespace cap_v3 {



class ElapsedTime : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class TimeGPRSIfNoTariffSwitch : public its::AsnInteger
    {
    public:

        TimeGPRSIfNoTariffSwitch() : its::AsnInteger(false)
        {
            Initialize();
        }

        TimeGPRSIfNoTariffSwitch(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        TimeGPRSIfNoTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        TimeGPRSIfNoTariffSwitch(const TimeGPRSIfNoTariffSwitch& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        TimeGPRSIfNoTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        TimeGPRSIfNoTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~TimeGPRSIfNoTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TimeGPRSIfNoTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "TimeGPRSIfNoTariffSwitch"; }

    };



    class TimeGPRSIfTariffSwitch : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class TimeGPRSSinceLastTariffSwitch : public its::AsnInteger
        {
        public:

            TimeGPRSSinceLastTariffSwitch() : its::AsnInteger(false)
            {
                Initialize();
            }

            TimeGPRSSinceLastTariffSwitch(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            TimeGPRSSinceLastTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            TimeGPRSSinceLastTariffSwitch(const TimeGPRSSinceLastTariffSwitch& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            TimeGPRSSinceLastTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            TimeGPRSSinceLastTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~TimeGPRSSinceLastTariffSwitch()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new TimeGPRSSinceLastTariffSwitch(*this);
            }

            virtual std::string GetName() const
            { return "TimeGPRSSinceLastTariffSwitch"; }

        };



        class TimeGPRSTariffSwitchInterval : public its::AsnInteger
        {
        public:

            TimeGPRSTariffSwitchInterval() : its::AsnInteger(false)
            {
                Initialize();
            }

            TimeGPRSTariffSwitchInterval(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            TimeGPRSTariffSwitchInterval(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            TimeGPRSTariffSwitchInterval(const TimeGPRSTariffSwitchInterval& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            TimeGPRSTariffSwitchInterval(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            TimeGPRSTariffSwitchInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~TimeGPRSTariffSwitchInterval()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new TimeGPRSTariffSwitchInterval(*this);
            }

            virtual std::string GetName() const
            { return "TimeGPRSTariffSwitchInterval"; }

        };


    ////////// End Nested Class(es) //////////

        TimeGPRSIfTariffSwitch() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        TimeGPRSIfTariffSwitch(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        TimeGPRSIfTariffSwitch(const TimeGPRSIfTariffSwitch& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TimeGPRSIfTariffSwitch(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetTimeGPRSSinceLastTariffSwitchStaticDescription();
        static its::AsnDescObject* GetTimeGPRSTariffSwitchIntervalStaticDescription();

    public:

        virtual ~TimeGPRSIfTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TimeGPRSIfTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "TimeGPRSIfTariffSwitch"; }

        void SetTimeGPRSSinceLastTariffSwitch(TimeGPRSSinceLastTariffSwitch* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeGPRSSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        void SetTimeGPRSSinceLastTariffSwitch(const TimeGPRSSinceLastTariffSwitch& element)
        {
            its::AsnObject& asnObject = const_cast<TimeGPRSSinceLastTariffSwitch&>(element);
            asnObject.SetDescription(GetTimeGPRSSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        const TimeGPRSSinceLastTariffSwitch& GetTimeGPRSSinceLastTariffSwitch() const
        {
            return static_cast<const TimeGPRSSinceLastTariffSwitch&> (ElementAt(0));
        }

        void SetTimeGPRSTariffSwitchInterval(TimeGPRSTariffSwitchInterval* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeGPRSTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        void SetTimeGPRSTariffSwitchInterval(const TimeGPRSTariffSwitchInterval& element)
        {
            its::AsnObject& asnObject = const_cast<TimeGPRSTariffSwitchInterval&>(element);
            asnObject.SetDescription(GetTimeGPRSTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        const TimeGPRSTariffSwitchInterval& GetTimeGPRSTariffSwitchInterval() const
        {
            return static_cast<const TimeGPRSTariffSwitchInterval&> (ElementAt(1));
        }

    };


////////// End Nested Class(es) //////////

    ElapsedTime() : its::AsnChoice(false)
    {
        Initialize();
    }

    ElapsedTime(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ElapsedTime(const ElapsedTime& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ElapsedTime(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ElapsedTime(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTimeGPRSIfNoTariffSwitchStaticDescription();
    static its::AsnDescObject* GetTimeGPRSIfTariffSwitchStaticDescription();

public:

    virtual ~ElapsedTime()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ElapsedTime(*this);
    }

    virtual std::string GetName() const
    { return "ElapsedTime"; }

    void SetChoiceTimeGPRSIfNoTariffSwitch(TimeGPRSIfNoTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTimeGPRSIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTimeGPRSIfNoTariffSwitch(const TimeGPRSIfNoTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<TimeGPRSIfNoTariffSwitch&>(choice);
        asnObject.SetDescription(GetTimeGPRSIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTimeGPRSIfNoTariffSwitch() const
    {
        return Contains(GetTimeGPRSIfNoTariffSwitchStaticDescription()->TagIdentity());
    }

    const TimeGPRSIfNoTariffSwitch& GetChoiceTimeGPRSIfNoTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceTimeGPRSIfNoTariffSwitch());
        return static_cast<const TimeGPRSIfNoTariffSwitch&> (GetChoice());
    }

    void SetChoiceTimeGPRSIfTariffSwitch(TimeGPRSIfTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTimeGPRSIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTimeGPRSIfTariffSwitch(const TimeGPRSIfTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<TimeGPRSIfTariffSwitch&>(choice);
        asnObject.SetDescription(GetTimeGPRSIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTimeGPRSIfTariffSwitch() const
    {
        return Contains(GetTimeGPRSIfTariffSwitchStaticDescription()->TagIdentity());
    }

    const TimeGPRSIfTariffSwitch& GetChoiceTimeGPRSIfTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceTimeGPRSIfTariffSwitch());
        return static_cast<const TimeGPRSIfTariffSwitch&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_ELAPSED_TIME_H_)

