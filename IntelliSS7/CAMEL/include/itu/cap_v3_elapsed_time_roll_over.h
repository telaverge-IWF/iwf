//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_ELAPSED_TIME_ROLL_OVER_H_)
#define _CAP_V3_ELAPSED_TIME_ROLL_OVER_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequence.h>



namespace cap_v3 {



class ElapsedTimeRollOver : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class RO_TimeGPRSIfNoTariffSwitch : public its::AsnInteger
    {
    public:

        RO_TimeGPRSIfNoTariffSwitch() : its::AsnInteger(false)
        {
            Initialize();
        }

        RO_TimeGPRSIfNoTariffSwitch(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        RO_TimeGPRSIfNoTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        RO_TimeGPRSIfNoTariffSwitch(const RO_TimeGPRSIfNoTariffSwitch& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        RO_TimeGPRSIfNoTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        RO_TimeGPRSIfNoTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~RO_TimeGPRSIfNoTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RO_TimeGPRSIfNoTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "RO_TimeGPRSIfNoTariffSwitch"; }

    };



    class RO_TimeGPRSIfTariffSwitch : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class RO_TimeGPRSSinceLastTariffSwitch : public its::AsnInteger
        {
        public:

            RO_TimeGPRSSinceLastTariffSwitch() : its::AsnInteger(false)
            {
                Initialize();
            }

            RO_TimeGPRSSinceLastTariffSwitch(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            RO_TimeGPRSSinceLastTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            RO_TimeGPRSSinceLastTariffSwitch(const RO_TimeGPRSSinceLastTariffSwitch& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            RO_TimeGPRSSinceLastTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            RO_TimeGPRSSinceLastTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RO_TimeGPRSSinceLastTariffSwitch()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RO_TimeGPRSSinceLastTariffSwitch(*this);
            }

            virtual std::string GetName() const
            { return "RO_TimeGPRSSinceLastTariffSwitch"; }

        };



        class RO_TimeGPRSTariffSwitchInterval : public its::AsnInteger
        {
        public:

            RO_TimeGPRSTariffSwitchInterval() : its::AsnInteger(false)
            {
                Initialize();
            }

            RO_TimeGPRSTariffSwitchInterval(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            RO_TimeGPRSTariffSwitchInterval(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            RO_TimeGPRSTariffSwitchInterval(const RO_TimeGPRSTariffSwitchInterval& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            RO_TimeGPRSTariffSwitchInterval(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            RO_TimeGPRSTariffSwitchInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RO_TimeGPRSTariffSwitchInterval()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RO_TimeGPRSTariffSwitchInterval(*this);
            }

            virtual std::string GetName() const
            { return "RO_TimeGPRSTariffSwitchInterval"; }

        };


    ////////// End Nested Class(es) //////////

        RO_TimeGPRSIfTariffSwitch() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        RO_TimeGPRSIfTariffSwitch(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        RO_TimeGPRSIfTariffSwitch(const RO_TimeGPRSIfTariffSwitch& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        RO_TimeGPRSIfTariffSwitch(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetRO_TimeGPRSSinceLastTariffSwitchStaticDescription();
        static its::AsnDescObject* GetRO_TimeGPRSTariffSwitchIntervalStaticDescription();

    public:

        virtual ~RO_TimeGPRSIfTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RO_TimeGPRSIfTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "RO_TimeGPRSIfTariffSwitch"; }

        void SetRO_TimeGPRSSinceLastTariffSwitch(RO_TimeGPRSSinceLastTariffSwitch* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRO_TimeGPRSSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        void SetRO_TimeGPRSSinceLastTariffSwitch(const RO_TimeGPRSSinceLastTariffSwitch& element)
        {
            its::AsnObject& asnObject = const_cast<RO_TimeGPRSSinceLastTariffSwitch&>(element);
            asnObject.SetDescription(GetRO_TimeGPRSSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        bool OptionRO_TimeGPRSSinceLastTariffSwitch() const
        {
            return Contains(0);
        }

        const RO_TimeGPRSSinceLastTariffSwitch& GetRO_TimeGPRSSinceLastTariffSwitch() const
        {
            ITS_REQUIRE(OptionRO_TimeGPRSSinceLastTariffSwitch());
            return static_cast<const RO_TimeGPRSSinceLastTariffSwitch&> (ElementAt(0));
        }

        void SetRO_TimeGPRSTariffSwitchInterval(RO_TimeGPRSTariffSwitchInterval* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRO_TimeGPRSTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        void SetRO_TimeGPRSTariffSwitchInterval(const RO_TimeGPRSTariffSwitchInterval& element)
        {
            its::AsnObject& asnObject = const_cast<RO_TimeGPRSTariffSwitchInterval&>(element);
            asnObject.SetDescription(GetRO_TimeGPRSTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        bool OptionRO_TimeGPRSTariffSwitchInterval() const
        {
            return Contains(1);
        }

        const RO_TimeGPRSTariffSwitchInterval& GetRO_TimeGPRSTariffSwitchInterval() const
        {
            ITS_REQUIRE(OptionRO_TimeGPRSTariffSwitchInterval());
            return static_cast<const RO_TimeGPRSTariffSwitchInterval&> (ElementAt(1));
        }

    };


////////// End Nested Class(es) //////////

    ElapsedTimeRollOver() : its::AsnChoice(false)
    {
        Initialize();
    }

    ElapsedTimeRollOver(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ElapsedTimeRollOver(const ElapsedTimeRollOver& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ElapsedTimeRollOver(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ElapsedTimeRollOver(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRO_TimeGPRSIfNoTariffSwitchStaticDescription();
    static its::AsnDescObject* GetRO_TimeGPRSIfTariffSwitchStaticDescription();

public:

    virtual ~ElapsedTimeRollOver()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ElapsedTimeRollOver(*this);
    }

    virtual std::string GetName() const
    { return "ElapsedTimeRollOver"; }

    void SetChoiceRO_TimeGPRSIfNoTariffSwitch(RO_TimeGPRSIfNoTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRO_TimeGPRSIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRO_TimeGPRSIfNoTariffSwitch(const RO_TimeGPRSIfNoTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<RO_TimeGPRSIfNoTariffSwitch&>(choice);
        asnObject.SetDescription(GetRO_TimeGPRSIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRO_TimeGPRSIfNoTariffSwitch() const
    {
        return Contains(GetRO_TimeGPRSIfNoTariffSwitchStaticDescription()->TagIdentity());
    }

    const RO_TimeGPRSIfNoTariffSwitch& GetChoiceRO_TimeGPRSIfNoTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceRO_TimeGPRSIfNoTariffSwitch());
        return static_cast<const RO_TimeGPRSIfNoTariffSwitch&> (GetChoice());
    }

    void SetChoiceRO_TimeGPRSIfTariffSwitch(RO_TimeGPRSIfTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRO_TimeGPRSIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRO_TimeGPRSIfTariffSwitch(const RO_TimeGPRSIfTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<RO_TimeGPRSIfTariffSwitch&>(choice);
        asnObject.SetDescription(GetRO_TimeGPRSIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRO_TimeGPRSIfTariffSwitch() const
    {
        return Contains(GetRO_TimeGPRSIfTariffSwitchStaticDescription()->TagIdentity());
    }

    const RO_TimeGPRSIfTariffSwitch& GetChoiceRO_TimeGPRSIfTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceRO_TimeGPRSIfTariffSwitch());
        return static_cast<const RO_TimeGPRSIfTariffSwitch&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_ELAPSED_TIME_ROLL_OVER_H_)

