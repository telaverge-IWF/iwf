//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_EVENT_SPECIFIC_INFORMATION_SMS_H_)
#define _CAP_V3_EVENT_SPECIFIC_INFORMATION_SMS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnEnumerated.h>

#include <cap_v3_sms_cause.h>



namespace cap_v3 {



class EventSpecificInformationSMS : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class O_smsFailureSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::SMSCause SMSCause;


    ////////// End Nested Class(es) //////////

        O_smsFailureSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        O_smsFailureSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        O_smsFailureSpecificInfo(const O_smsFailureSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        O_smsFailureSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetFailureCauseStaticDescription();

    public:

        virtual ~O_smsFailureSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new O_smsFailureSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "O_smsFailureSpecificInfo"; }

        void SetFailureCause(SMSCause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        void SetFailureCause(const SMSCause& element)
        {
            its::AsnObject& asnObject = const_cast<SMSCause&>(element);
            asnObject.SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionFailureCause() const
        {
            return Contains(0);
        }

        const SMSCause& GetFailureCause() const
        {
            ITS_REQUIRE(OptionFailureCause());
            return static_cast<const SMSCause&> (ElementAt(0));
        }

    };



    class O_smsSubmittedSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        O_smsSubmittedSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        O_smsSubmittedSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        O_smsSubmittedSpecificInfo(const O_smsSubmittedSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        O_smsSubmittedSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~O_smsSubmittedSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new O_smsSubmittedSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "O_smsSubmittedSpecificInfo"; }

    };


////////// End Nested Class(es) //////////

    EventSpecificInformationSMS() : its::AsnChoice(false)
    {
        Initialize();
    }

    EventSpecificInformationSMS(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EventSpecificInformationSMS(const EventSpecificInformationSMS& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EventSpecificInformationSMS(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EventSpecificInformationSMS(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetO_smsFailureSpecificInfoStaticDescription();
    static its::AsnDescObject* GetO_smsSubmittedSpecificInfoStaticDescription();

public:

    virtual ~EventSpecificInformationSMS()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventSpecificInformationSMS(*this);
    }

    virtual std::string GetName() const
    { return "EventSpecificInformationSMS"; }

    void SetChoiceO_smsFailureSpecificInfo(O_smsFailureSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetO_smsFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceO_smsFailureSpecificInfo(const O_smsFailureSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<O_smsFailureSpecificInfo&>(choice);
        asnObject.SetDescription(GetO_smsFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceO_smsFailureSpecificInfo() const
    {
        return Contains(GetO_smsFailureSpecificInfoStaticDescription()->TagIdentity());
    }

    const O_smsFailureSpecificInfo& GetChoiceO_smsFailureSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceO_smsFailureSpecificInfo());
        return static_cast<const O_smsFailureSpecificInfo&> (GetChoice());
    }

    void SetChoiceO_smsSubmittedSpecificInfo(O_smsSubmittedSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetO_smsSubmittedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceO_smsSubmittedSpecificInfo(const O_smsSubmittedSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<O_smsSubmittedSpecificInfo&>(choice);
        asnObject.SetDescription(GetO_smsSubmittedSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceO_smsSubmittedSpecificInfo() const
    {
        return Contains(GetO_smsSubmittedSpecificInfoStaticDescription()->TagIdentity());
    }

    const O_smsSubmittedSpecificInfo& GetChoiceO_smsSubmittedSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceO_smsSubmittedSpecificInfo());
        return static_cast<const O_smsSubmittedSpecificInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_EVENT_SPECIFIC_INFORMATION_SMS_H_)

