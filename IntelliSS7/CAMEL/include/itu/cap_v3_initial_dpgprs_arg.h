//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_INITIAL_DPGPRS_ARG_H_)
#define _CAP_V3_INITIAL_DPGPRS_ARG_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>
#include <AsnEnumerated.h>
#include <AsnOctetString.h>

#include <cap_v3_gprs_reference_number.h>
#include <cap_v3_service_key.h>
#include <cap_v3_gprs_event_type.h>
#include <cap_v3_isdn_address_string.h>
#include <cap_v3_imsi.h>
#include <cap_v3_time_and_timezone.h>
#include <cap_v3_gprsms_class.h>
#include <cap_v3_pdp_type.h>
#include <cap_v3_quality_of_service.h>
#include <cap_v3_access_point_name.h>
#include <cap_v3_ra_identity.h>
#include <cap_v3_gprs_charging_id.h>
#include <cap_v3_sgsn_capabilities.h>
#include <cap_v3_extension_field.h>



namespace cap_v3 {



class InitialDPGPRSArg : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class Extensions : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef cap_v3::ExtensionField ExtensionField;


    ////////// End Nested Class //////////

        Extensions() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetExtensionFieldStaticDescription();

    public:

        virtual ~Extensions()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Extensions(*this);
        }

        virtual std::string GetName() const
        { return "Extensions"; }

        void AddElement(ExtensionField* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const ExtensionField& element)
        {
            its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
            asnObject.SetDescription(GetExtensionFieldStaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const ExtensionField& ElementAt(int index) const
        {
            return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
        }

    };


        typedef cap_v3::GPRS_ReferenceNumber GPRS_ReferenceNumber;


        typedef cap_v3::ServiceKey ServiceKey;


        typedef cap_v3::GPRSEventType GPRSEventType;


        typedef cap_v3::ISDN_AddressString ISDN_AddressString;


        typedef cap_v3::IMSI IMSI;


        typedef cap_v3::TimeAndTimezone TimeAndTimezone;


        typedef cap_v3::GPRSMSClass GPRSMSClass;


        typedef cap_v3::PDPType PDPType;


        typedef cap_v3::QualityOfService QualityOfService;


        typedef cap_v3::AccessPointName AccessPointName;


        typedef cap_v3::RAIdentity RAIdentity;


        typedef cap_v3::GPRSChargingID GPRSChargingID;


        typedef cap_v3::SGSNCapabilities SGSNCapabilities;


////////// End Nested Class(es) //////////

    InitialDPGPRSArg() : its::AsnSequence(14, false)
    {
        Initialize();
    }

    InitialDPGPRSArg(its::Octets& octets) : its::AsnSequence(14, false)
    {
        Initialize();
        Decode(octets);
    }

    InitialDPGPRSArg(const InitialDPGPRSArg& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    InitialDPGPRSArg(its::AsnDescObject* description) : its::AsnSequence(14, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetGPRS_ReferenceNumberStaticDescription();
    static its::AsnDescObject* GetServiceKeyStaticDescription();
    static its::AsnDescObject* GetGPRSEventTypeStaticDescription();
    static its::AsnDescObject* GetMSISDNStaticDescription();
    static its::AsnDescObject* GetIMSIStaticDescription();
    static its::AsnDescObject* GetTimeAndTimeZoneStaticDescription();
    static its::AsnDescObject* GetGPRSMSClassStaticDescription();
    static its::AsnDescObject* GetPDPTypeStaticDescription();
    static its::AsnDescObject* GetQualityOfServiceStaticDescription();
    static its::AsnDescObject* GetAccessPointNameStaticDescription();
    static its::AsnDescObject* GetRouteingAreaIdentityStaticDescription();
    static its::AsnDescObject* GetChargingIDStaticDescription();
    static its::AsnDescObject* GetSGSNCapabilitiesStaticDescription();
    static its::AsnDescObject* GetExtensionsStaticDescription();

public:

    virtual ~InitialDPGPRSArg()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InitialDPGPRSArg(*this);
    }

    virtual std::string GetName() const
    { return "InitialDPGPRSArg"; }

    void SetGPRS_ReferenceNumber(GPRS_ReferenceNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    void SetGPRS_ReferenceNumber(const GPRS_ReferenceNumber& element)
    {
        its::AsnObject& asnObject = const_cast<GPRS_ReferenceNumber&>(element);
        asnObject.SetDescription(GetGPRS_ReferenceNumberStaticDescription());
        AddElement(0, element);
    }

    const GPRS_ReferenceNumber& GetGPRS_ReferenceNumber() const
    {
        return static_cast<const GPRS_ReferenceNumber&> (ElementAt(0));
    }

    void SetServiceKey(ServiceKey* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetServiceKeyStaticDescription());
        AddElement(1, element);
    }

    void SetServiceKey(const ServiceKey& element)
    {
        its::AsnObject& asnObject = const_cast<ServiceKey&>(element);
        asnObject.SetDescription(GetServiceKeyStaticDescription());
        AddElement(1, element);
    }

    const ServiceKey& GetServiceKey() const
    {
        return static_cast<const ServiceKey&> (ElementAt(1));
    }

    void SetGPRSEventType(GPRSEventType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRSEventTypeStaticDescription());
        AddElement(2, element);
    }

    void SetGPRSEventType(const GPRSEventType& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSEventType&>(element);
        asnObject.SetDescription(GetGPRSEventTypeStaticDescription());
        AddElement(2, element);
    }

    const GPRSEventType& GetGPRSEventType() const
    {
        return static_cast<const GPRSEventType&> (ElementAt(2));
    }

    void SetMSISDN(ISDN_AddressString* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMSISDNStaticDescription());
        AddElement(3, element);
    }

    void SetMSISDN(const ISDN_AddressString& element)
    {
        its::AsnObject& asnObject = const_cast<ISDN_AddressString&>(element);
        asnObject.SetDescription(GetMSISDNStaticDescription());
        AddElement(3, element);
    }

    const ISDN_AddressString& GetMSISDN() const
    {
        return static_cast<const ISDN_AddressString&> (ElementAt(3));
    }

    void SetIMSI(IMSI* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetIMSIStaticDescription());
        AddElement(4, element);
    }

    void SetIMSI(const IMSI& element)
    {
        its::AsnObject& asnObject = const_cast<IMSI&>(element);
        asnObject.SetDescription(GetIMSIStaticDescription());
        AddElement(4, element);
    }

    const IMSI& GetIMSI() const
    {
        return static_cast<const IMSI&> (ElementAt(4));
    }

    void SetTimeAndTimeZone(TimeAndTimezone* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetTimeAndTimeZoneStaticDescription());
        AddElement(5, element);
    }

    void SetTimeAndTimeZone(const TimeAndTimezone& element)
    {
        its::AsnObject& asnObject = const_cast<TimeAndTimezone&>(element);
        asnObject.SetDescription(GetTimeAndTimeZoneStaticDescription());
        AddElement(5, element);
    }

    const TimeAndTimezone& GetTimeAndTimeZone() const
    {
        return static_cast<const TimeAndTimezone&> (ElementAt(5));
    }

    void SetGPRSMSClass(GPRSMSClass* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetGPRSMSClassStaticDescription());
        AddElement(6, element);
    }

    void SetGPRSMSClass(const GPRSMSClass& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSMSClass&>(element);
        asnObject.SetDescription(GetGPRSMSClassStaticDescription());
        AddElement(6, element);
    }

    bool OptionGPRSMSClass() const
    {
        return Contains(6);
    }

    const GPRSMSClass& GetGPRSMSClass() const
    {
        ITS_REQUIRE(OptionGPRSMSClass());
        return static_cast<const GPRSMSClass&> (ElementAt(6));
    }

    void SetPDPType(PDPType* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPTypeStaticDescription());
        AddElement(7, element);
    }

    void SetPDPType(const PDPType& element)
    {
        its::AsnObject& asnObject = const_cast<PDPType&>(element);
        asnObject.SetDescription(GetPDPTypeStaticDescription());
        AddElement(7, element);
    }

    bool OptionPDPType() const
    {
        return Contains(7);
    }

    const PDPType& GetPDPType() const
    {
        ITS_REQUIRE(OptionPDPType());
        return static_cast<const PDPType&> (ElementAt(7));
    }

    void SetQualityOfService(QualityOfService* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetQualityOfServiceStaticDescription());
        AddElement(8, element);
    }

    void SetQualityOfService(const QualityOfService& element)
    {
        its::AsnObject& asnObject = const_cast<QualityOfService&>(element);
        asnObject.SetDescription(GetQualityOfServiceStaticDescription());
        AddElement(8, element);
    }

    bool OptionQualityOfService() const
    {
        return Contains(8);
    }

    const QualityOfService& GetQualityOfService() const
    {
        ITS_REQUIRE(OptionQualityOfService());
        return static_cast<const QualityOfService&> (ElementAt(8));
    }

    void SetAccessPointName(AccessPointName* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetAccessPointNameStaticDescription());
        AddElement(9, element);
    }

    void SetAccessPointName(const AccessPointName& element)
    {
        its::AsnObject& asnObject = const_cast<AccessPointName&>(element);
        asnObject.SetDescription(GetAccessPointNameStaticDescription());
        AddElement(9, element);
    }

    bool OptionAccessPointName() const
    {
        return Contains(9);
    }

    const AccessPointName& GetAccessPointName() const
    {
        ITS_REQUIRE(OptionAccessPointName());
        return static_cast<const AccessPointName&> (ElementAt(9));
    }

    void SetRouteingAreaIdentity(RAIdentity* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetRouteingAreaIdentityStaticDescription());
        AddElement(10, element);
    }

    void SetRouteingAreaIdentity(const RAIdentity& element)
    {
        its::AsnObject& asnObject = const_cast<RAIdentity&>(element);
        asnObject.SetDescription(GetRouteingAreaIdentityStaticDescription());
        AddElement(10, element);
    }

    bool OptionRouteingAreaIdentity() const
    {
        return Contains(10);
    }

    const RAIdentity& GetRouteingAreaIdentity() const
    {
        ITS_REQUIRE(OptionRouteingAreaIdentity());
        return static_cast<const RAIdentity&> (ElementAt(10));
    }

    void SetChargingID(GPRSChargingID* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetChargingIDStaticDescription());
        AddElement(11, element);
    }

    void SetChargingID(const GPRSChargingID& element)
    {
        its::AsnObject& asnObject = const_cast<GPRSChargingID&>(element);
        asnObject.SetDescription(GetChargingIDStaticDescription());
        AddElement(11, element);
    }

    bool OptionChargingID() const
    {
        return Contains(11);
    }

    const GPRSChargingID& GetChargingID() const
    {
        ITS_REQUIRE(OptionChargingID());
        return static_cast<const GPRSChargingID&> (ElementAt(11));
    }

    void SetSGSNCapabilities(SGSNCapabilities* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetSGSNCapabilitiesStaticDescription());
        AddElement(12, element);
    }

    void SetSGSNCapabilities(const SGSNCapabilities& element)
    {
        its::AsnObject& asnObject = const_cast<SGSNCapabilities&>(element);
        asnObject.SetDescription(GetSGSNCapabilitiesStaticDescription());
        AddElement(12, element);
    }

    bool OptionSGSNCapabilities() const
    {
        return Contains(12);
    }

    const SGSNCapabilities& GetSGSNCapabilities() const
    {
        ITS_REQUIRE(OptionSGSNCapabilities());
        return static_cast<const SGSNCapabilities&> (ElementAt(12));
    }

    void SetExtensions(Extensions* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetExtensionsStaticDescription());
        AddElement(13, element);
    }

    void SetExtensions(const Extensions& element)
    {
        its::AsnObject& asnObject = const_cast<Extensions&>(element);
        asnObject.SetDescription(GetExtensionsStaticDescription());
        AddElement(13, element);
    }

    bool OptionExtensions() const
    {
        return Contains(13);
    }

    const Extensions& GetExtensions() const
    {
        ITS_REQUIRE(OptionExtensions());
        return static_cast<const Extensions&> (ElementAt(13));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_INITIAL_DPGPRS_ARG_H_)

