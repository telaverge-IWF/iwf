//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CHARGING_CHARACTERISTICS_H_)
#define _CAP_V3_CHARGING_CHARACTERISTICS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>



namespace cap_v3 {



class ChargingCharacteristics : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class MaxTransferredVolume : public its::AsnInteger
    {
    public:

        MaxTransferredVolume() : its::AsnInteger(false)
        {
            Initialize();
        }

        MaxTransferredVolume(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MaxTransferredVolume(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MaxTransferredVolume(const MaxTransferredVolume& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MaxTransferredVolume(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MaxTransferredVolume(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MaxTransferredVolume()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MaxTransferredVolume(*this);
        }

        virtual std::string GetName() const
        { return "MaxTransferredVolume"; }

    };



    class MaxElapsedTime : public its::AsnInteger
    {
    public:

        MaxElapsedTime() : its::AsnInteger(false)
        {
            Initialize();
        }

        MaxElapsedTime(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MaxElapsedTime(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MaxElapsedTime(const MaxElapsedTime& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MaxElapsedTime(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MaxElapsedTime(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MaxElapsedTime()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MaxElapsedTime(*this);
        }

        virtual std::string GetName() const
        { return "MaxElapsedTime"; }

    };


////////// End Nested Class(es) //////////

    ChargingCharacteristics() : its::AsnChoice(false)
    {
        Initialize();
    }

    ChargingCharacteristics(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    ChargingCharacteristics(const ChargingCharacteristics& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    ChargingCharacteristics(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    ChargingCharacteristics(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMaxTransferredVolumeStaticDescription();
    static its::AsnDescObject* GetMaxElapsedTimeStaticDescription();

public:

    virtual ~ChargingCharacteristics()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ChargingCharacteristics(*this);
    }

    virtual std::string GetName() const
    { return "ChargingCharacteristics"; }

    void SetChoiceMaxTransferredVolume(MaxTransferredVolume* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMaxTransferredVolumeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMaxTransferredVolume(const MaxTransferredVolume& choice)
    {
        its::AsnObject& asnObject = const_cast<MaxTransferredVolume&>(choice);
        asnObject.SetDescription(GetMaxTransferredVolumeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMaxTransferredVolume() const
    {
        return Contains(GetMaxTransferredVolumeStaticDescription()->TagIdentity());
    }

    const MaxTransferredVolume& GetChoiceMaxTransferredVolume() const
    {
        ITS_REQUIRE(ChoiceMaxTransferredVolume());
        return static_cast<const MaxTransferredVolume&> (GetChoice());
    }

    void SetChoiceMaxElapsedTime(MaxElapsedTime* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetMaxElapsedTimeStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceMaxElapsedTime(const MaxElapsedTime& choice)
    {
        its::AsnObject& asnObject = const_cast<MaxElapsedTime&>(choice);
        asnObject.SetDescription(GetMaxElapsedTimeStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceMaxElapsedTime() const
    {
        return Contains(GetMaxElapsedTimeStaticDescription()->TagIdentity());
    }

    const MaxElapsedTime& GetChoiceMaxElapsedTime() const
    {
        ITS_REQUIRE(ChoiceMaxElapsedTime());
        return static_cast<const MaxElapsedTime&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CHARGING_CHARACTERISTICS_H_)

