//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_SERVICE_INTERACTION_INDICATORS_TWO_H_)
#define _CAP_V3_SERVICE_INTERACTION_INDICATORS_TWO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnNull.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <cap_v3_forward_service_interaction_ind.h>
#include <cap_v3_backward_service_interaction_ind.h>
#include <cap_v3_bothway_through_connection_ind.h>
#include <cap_v3_connected_number_treatment_ind.h>



namespace cap_v3 {



class ServiceInteractionIndicatorsTwo : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class NonCUGCall : public its::AsnNull
    {
    public:

        NonCUGCall() : its::AsnNull(false)
        {
            Initialize();
        }

        NonCUGCall(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        NonCUGCall(const NonCUGCall& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        NonCUGCall(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NonCUGCall()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NonCUGCall(*this);
        }

        virtual std::string GetName() const
        { return "NonCUGCall"; }

    };



    class HoldTreatmentIndicator : public its::AsnOctetString
    {
    public:

        HoldTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        HoldTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        HoldTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        HoldTreatmentIndicator(const HoldTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        HoldTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        HoldTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~HoldTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new HoldTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "HoldTreatmentIndicator"; }

    };



    class CwTreatmentIndicator : public its::AsnOctetString
    {
    public:

        CwTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        CwTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        CwTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        CwTreatmentIndicator(const CwTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        CwTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        CwTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CwTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CwTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "CwTreatmentIndicator"; }

    };



    class EctTreatmentIndicator : public its::AsnOctetString
    {
    public:

        EctTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        EctTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        EctTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        EctTreatmentIndicator(const EctTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        EctTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        EctTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~EctTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new EctTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "EctTreatmentIndicator"; }

    };


        typedef cap_v3::ForwardServiceInteractionInd ForwardServiceInteractionInd;


        typedef cap_v3::BackwardServiceInteractionInd BackwardServiceInteractionInd;


        typedef cap_v3::BothwayThroughConnectionInd BothwayThroughConnectionInd;


        typedef cap_v3::ConnectedNumberTreatmentInd ConnectedNumberTreatmentInd;


////////// End Nested Class(es) //////////

    ServiceInteractionIndicatorsTwo() : its::AsnSequence(8, false)
    {
        Initialize();
    }

    ServiceInteractionIndicatorsTwo(its::Octets& octets) : its::AsnSequence(8, false)
    {
        Initialize();
        Decode(octets);
    }

    ServiceInteractionIndicatorsTwo(const ServiceInteractionIndicatorsTwo& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ServiceInteractionIndicatorsTwo(its::AsnDescObject* description) : its::AsnSequence(8, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetForwardServiceInteractionIndStaticDescription();
    static its::AsnDescObject* GetBackwardServiceInteractionsIndStaticDescription();
    static its::AsnDescObject* GetBothwayThroughConnectionIndStaticDescription();
    static its::AsnDescObject* GetConnectedNumberTreatmentIndStaticDescription();
    static its::AsnDescObject* GetNonCUGCallStaticDescription();
    static its::AsnDescObject* GetHoldTreatmentIndicatorStaticDescription();
    static its::AsnDescObject* GetCwTreatmentIndicatorStaticDescription();
    static its::AsnDescObject* GetEctTreatmentIndicatorStaticDescription();

public:

    virtual ~ServiceInteractionIndicatorsTwo()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ServiceInteractionIndicatorsTwo(*this);
    }

    virtual std::string GetName() const
    { return "ServiceInteractionIndicatorsTwo"; }

    void SetForwardServiceInteractionInd(ForwardServiceInteractionInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetForwardServiceInteractionIndStaticDescription());
        AddElement(0, element);
    }

    void SetForwardServiceInteractionInd(const ForwardServiceInteractionInd& element)
    {
        its::AsnObject& asnObject = const_cast<ForwardServiceInteractionInd&>(element);
        asnObject.SetDescription(GetForwardServiceInteractionIndStaticDescription());
        AddElement(0, element);
    }

    bool OptionForwardServiceInteractionInd() const
    {
        return Contains(0);
    }

    const ForwardServiceInteractionInd& GetForwardServiceInteractionInd() const
    {
        ITS_REQUIRE(OptionForwardServiceInteractionInd());
        return static_cast<const ForwardServiceInteractionInd&> (ElementAt(0));
    }

    void SetBackwardServiceInteractionsInd(BackwardServiceInteractionInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBackwardServiceInteractionsIndStaticDescription());
        AddElement(1, element);
    }

    void SetBackwardServiceInteractionsInd(const BackwardServiceInteractionInd& element)
    {
        its::AsnObject& asnObject = const_cast<BackwardServiceInteractionInd&>(element);
        asnObject.SetDescription(GetBackwardServiceInteractionsIndStaticDescription());
        AddElement(1, element);
    }

    bool OptionBackwardServiceInteractionsInd() const
    {
        return Contains(1);
    }

    const BackwardServiceInteractionInd& GetBackwardServiceInteractionsInd() const
    {
        ITS_REQUIRE(OptionBackwardServiceInteractionsInd());
        return static_cast<const BackwardServiceInteractionInd&> (ElementAt(1));
    }

    void SetBothwayThroughConnectionInd(BothwayThroughConnectionInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetBothwayThroughConnectionIndStaticDescription());
        AddElement(2, element);
    }

    void SetBothwayThroughConnectionInd(const BothwayThroughConnectionInd& element)
    {
        its::AsnObject& asnObject = const_cast<BothwayThroughConnectionInd&>(element);
        asnObject.SetDescription(GetBothwayThroughConnectionIndStaticDescription());
        AddElement(2, element);
    }

    bool OptionBothwayThroughConnectionInd() const
    {
        return Contains(2);
    }

    const BothwayThroughConnectionInd& GetBothwayThroughConnectionInd() const
    {
        ITS_REQUIRE(OptionBothwayThroughConnectionInd());
        return static_cast<const BothwayThroughConnectionInd&> (ElementAt(2));
    }

    void SetConnectedNumberTreatmentInd(ConnectedNumberTreatmentInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetConnectedNumberTreatmentIndStaticDescription());
        AddElement(3, element);
    }

    void SetConnectedNumberTreatmentInd(const ConnectedNumberTreatmentInd& element)
    {
        its::AsnObject& asnObject = const_cast<ConnectedNumberTreatmentInd&>(element);
        asnObject.SetDescription(GetConnectedNumberTreatmentIndStaticDescription());
        AddElement(3, element);
    }

    const ConnectedNumberTreatmentInd& GetConnectedNumberTreatmentInd() const
    {
        return static_cast<const ConnectedNumberTreatmentInd&> (ElementAt(3));
    }

    void SetNonCUGCall(NonCUGCall* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNonCUGCallStaticDescription());
        AddElement(4, element);
    }

    void SetNonCUGCall(const NonCUGCall& element)
    {
        its::AsnObject& asnObject = const_cast<NonCUGCall&>(element);
        asnObject.SetDescription(GetNonCUGCallStaticDescription());
        AddElement(4, element);
    }

    bool OptionNonCUGCall() const
    {
        return Contains(4);
    }

    const NonCUGCall& GetNonCUGCall() const
    {
        ITS_REQUIRE(OptionNonCUGCall());
        return static_cast<const NonCUGCall&> (ElementAt(4));
    }

    void SetHoldTreatmentIndicator(HoldTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetHoldTreatmentIndicatorStaticDescription());
        AddElement(5, element);
    }

    void SetHoldTreatmentIndicator(const HoldTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<HoldTreatmentIndicator&>(element);
        asnObject.SetDescription(GetHoldTreatmentIndicatorStaticDescription());
        AddElement(5, element);
    }

    bool OptionHoldTreatmentIndicator() const
    {
        return Contains(5);
    }

    const HoldTreatmentIndicator& GetHoldTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionHoldTreatmentIndicator());
        return static_cast<const HoldTreatmentIndicator&> (ElementAt(5));
    }

    void SetCwTreatmentIndicator(CwTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCwTreatmentIndicatorStaticDescription());
        AddElement(6, element);
    }

    void SetCwTreatmentIndicator(const CwTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<CwTreatmentIndicator&>(element);
        asnObject.SetDescription(GetCwTreatmentIndicatorStaticDescription());
        AddElement(6, element);
    }

    bool OptionCwTreatmentIndicator() const
    {
        return Contains(6);
    }

    const CwTreatmentIndicator& GetCwTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionCwTreatmentIndicator());
        return static_cast<const CwTreatmentIndicator&> (ElementAt(6));
    }

    void SetEctTreatmentIndicator(EctTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEctTreatmentIndicatorStaticDescription());
        AddElement(7, element);
    }

    void SetEctTreatmentIndicator(const EctTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<EctTreatmentIndicator&>(element);
        asnObject.SetDescription(GetEctTreatmentIndicatorStaticDescription());
        AddElement(7, element);
    }

    bool OptionEctTreatmentIndicator() const
    {
        return Contains(7);
    }

    const EctTreatmentIndicator& GetEctTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionEctTreatmentIndicator());
        return static_cast<const EctTreatmentIndicator&> (ElementAt(7));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_SERVICE_INTERACTION_INDICATORS_TWO_H_)

