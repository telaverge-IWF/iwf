//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V2_MESSAGE_ID_H_)
#define _CAP_V2_MESSAGE_ID_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnBaseString.h>
#include <AsnSequenceOf.h>
#include <AsnInteger.h>

#include <cap_v2_integer4.h>
#include <IA5String.h>
#include <cap_v2_variable_part.h>



namespace cap_v2 {



class MessageID : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class Text : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class Attributes : public its::AsnOctetString
        {
        public:

            Attributes() : its::AsnOctetString(false)
            {
                Initialize();
            }

            Attributes(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            Attributes(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            Attributes(const Attributes& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            Attributes(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            Attributes(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~Attributes()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Attributes(*this);
            }

            virtual std::string GetName() const
            { return "Attributes"; }

        };


        typedef its::IA5String IA5String;


    ////////// End Nested Class(es) //////////

        Text() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        Text(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        Text(const Text& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        Text(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetMessageContentStaticDescription();
        static its::AsnDescObject* GetAttributesStaticDescription();

    public:

        virtual ~Text()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Text(*this);
        }

        virtual std::string GetName() const
        { return "Text"; }

        void SetMessageContent(IA5String* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetMessageContentStaticDescription());
            AddElement(0, element);
        }

        void SetMessageContent(const IA5String& element)
        {
            its::AsnObject& asnObject = const_cast<IA5String&>(element);
            asnObject.SetDescription(GetMessageContentStaticDescription());
            AddElement(0, element);
        }

        const IA5String& GetMessageContent() const
        {
            return static_cast<const IA5String&> (ElementAt(0));
        }

        void SetAttributes(Attributes* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAttributesStaticDescription());
            AddElement(1, element);
        }

        void SetAttributes(const Attributes& element)
        {
            its::AsnObject& asnObject = const_cast<Attributes&>(element);
            asnObject.SetDescription(GetAttributesStaticDescription());
            AddElement(1, element);
        }

        bool OptionAttributes() const
        {
            return Contains(1);
        }

        const Attributes& GetAttributes() const
        {
            ITS_REQUIRE(OptionAttributes());
            return static_cast<const Attributes&> (ElementAt(1));
        }

    };



    class ElementaryMessageIDs : public its::AsnSequenceOf
    {
    public:


    ////////// Begin Nested Class //////////


            typedef cap_v2::Integer4 Integer4;


    ////////// End Nested Class //////////

        ElementaryMessageIDs() : its::AsnSequenceOf(false)
        {
            Initialize();
        }

        ElementaryMessageIDs(its::Octets& octets) : its::AsnSequenceOf(false)
        {
            Initialize();
            Decode(octets);
        }

        ElementaryMessageIDs(const ElementaryMessageIDs& rhs) : its::AsnSequenceOf(rhs)
        {
            // Nothing to do.
        }

        ElementaryMessageIDs(its::AsnDescObject* description) : its::AsnSequenceOf(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetInteger4StaticDescription();

    public:

        virtual ~ElementaryMessageIDs()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ElementaryMessageIDs(*this);
        }

        virtual std::string GetName() const
        { return "ElementaryMessageIDs"; }

        void AddElement(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetInteger4StaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        void AddElement(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetInteger4StaticDescription());
            AsnSequenceOf::AddElement(element);
        }

        const Integer4& ElementAt(int index) const
        {
            return static_cast<const Integer4&> (AsnSequenceOf::ElementAt(index));
        }

    };



    class VariableMessage : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class VariableParts : public its::AsnSequenceOf
        {
        public:


        ////////// Begin Nested Class //////////


                typedef cap_v2::VariablePart VariablePart;


        ////////// End Nested Class //////////

            VariableParts() : its::AsnSequenceOf(false)
            {
                Initialize();
            }

            VariableParts(its::Octets& octets) : its::AsnSequenceOf(false)
            {
                Initialize();
                Decode(octets);
            }

            VariableParts(const VariableParts& rhs) : its::AsnSequenceOf(rhs)
            {
                // Nothing to do.
            }

            VariableParts(its::AsnDescObject* description) : its::AsnSequenceOf(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetVariablePartStaticDescription();

        public:

            virtual ~VariableParts()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new VariableParts(*this);
            }

            virtual std::string GetName() const
            { return "VariableParts"; }

            void AddElement(VariablePart* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetVariablePartStaticDescription());
                AsnSequenceOf::AddElement(element);
            }

            void AddElement(const VariablePart& element)
            {
                its::AsnObject& asnObject = const_cast<VariablePart&>(element);
                asnObject.SetDescription(GetVariablePartStaticDescription());
                AsnSequenceOf::AddElement(element);
            }

            const VariablePart& ElementAt(int index) const
            {
                return static_cast<const VariablePart&> (AsnSequenceOf::ElementAt(index));
            }

        };


            typedef cap_v2::Integer4 Integer4;


    ////////// End Nested Class(es) //////////

        VariableMessage() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        VariableMessage(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        VariableMessage(const VariableMessage& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        VariableMessage(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetElementaryMessageIDStaticDescription();
        static its::AsnDescObject* GetVariablePartsStaticDescription();

    public:

        virtual ~VariableMessage()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VariableMessage(*this);
        }

        virtual std::string GetName() const
        { return "VariableMessage"; }

        void SetElementaryMessageID(Integer4* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetElementaryMessageIDStaticDescription());
            AddElement(0, element);
        }

        void SetElementaryMessageID(const Integer4& element)
        {
            its::AsnObject& asnObject = const_cast<Integer4&>(element);
            asnObject.SetDescription(GetElementaryMessageIDStaticDescription());
            AddElement(0, element);
        }

        const Integer4& GetElementaryMessageID() const
        {
            return static_cast<const Integer4&> (ElementAt(0));
        }

        void SetVariableParts(VariableParts* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetVariablePartsStaticDescription());
            AddElement(1, element);
        }

        void SetVariableParts(const VariableParts& element)
        {
            its::AsnObject& asnObject = const_cast<VariableParts&>(element);
            asnObject.SetDescription(GetVariablePartsStaticDescription());
            AddElement(1, element);
        }

        const VariableParts& GetVariableParts() const
        {
            return static_cast<const VariableParts&> (ElementAt(1));
        }

    };


        typedef cap_v2::Integer4 Integer4;


////////// End Nested Class(es) //////////

    MessageID() : its::AsnChoice(false)
    {
        Initialize();
    }

    MessageID(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    MessageID(const MessageID& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    MessageID(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    MessageID(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetElementaryMessageIDStaticDescription();
    static its::AsnDescObject* GetTextStaticDescription();
    static its::AsnDescObject* GetElementaryMessageIDsStaticDescription();
    static its::AsnDescObject* GetVariableMessageStaticDescription();

public:

    virtual ~MessageID()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new MessageID(*this);
    }

    virtual std::string GetName() const
    { return "MessageID"; }

    void SetChoiceElementaryMessageID(Integer4* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetElementaryMessageIDStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceElementaryMessageID(const Integer4& choice)
    {
        its::AsnObject& asnObject = const_cast<Integer4&>(choice);
        asnObject.SetDescription(GetElementaryMessageIDStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceElementaryMessageID() const
    {
        return Contains(GetElementaryMessageIDStaticDescription()->TagIdentity());
    }

    const Integer4& GetChoiceElementaryMessageID() const
    {
        ITS_REQUIRE(ChoiceElementaryMessageID());
        return static_cast<const Integer4&> (GetChoice());
    }

    void SetChoiceText(Text* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTextStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceText(const Text& choice)
    {
        its::AsnObject& asnObject = const_cast<Text&>(choice);
        asnObject.SetDescription(GetTextStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceText() const
    {
        return Contains(GetTextStaticDescription()->TagIdentity());
    }

    const Text& GetChoiceText() const
    {
        ITS_REQUIRE(ChoiceText());
        return static_cast<const Text&> (GetChoice());
    }

    void SetChoiceElementaryMessageIDs(ElementaryMessageIDs* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetElementaryMessageIDsStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceElementaryMessageIDs(const ElementaryMessageIDs& choice)
    {
        its::AsnObject& asnObject = const_cast<ElementaryMessageIDs&>(choice);
        asnObject.SetDescription(GetElementaryMessageIDsStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceElementaryMessageIDs() const
    {
        return Contains(GetElementaryMessageIDsStaticDescription()->TagIdentity());
    }

    const ElementaryMessageIDs& GetChoiceElementaryMessageIDs() const
    {
        ITS_REQUIRE(ChoiceElementaryMessageIDs());
        return static_cast<const ElementaryMessageIDs&> (GetChoice());
    }

    void SetChoiceVariableMessage(VariableMessage* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetVariableMessageStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceVariableMessage(const VariableMessage& choice)
    {
        its::AsnObject& asnObject = const_cast<VariableMessage&>(choice);
        asnObject.SetDescription(GetVariableMessageStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceVariableMessage() const
    {
        return Contains(GetVariableMessageStaticDescription()->TagIdentity());
    }

    const VariableMessage& GetChoiceVariableMessage() const
    {
        ITS_REQUIRE(ChoiceVariableMessage());
        return static_cast<const VariableMessage&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V2_MESSAGE_ID_H_)

