//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V2_EVENT_TYPE_BCSM_H_)
#define _CAP_V2_EVENT_TYPE_BCSM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnEnumerated.h>



namespace cap_v2 {



class EventTypeBCSM : public its::AsnEnumerated
{
public:

    EventTypeBCSM() : its::AsnEnumerated(false)
    {
        Initialize();
    }

    EventTypeBCSM(long value) : its::AsnEnumerated(value, false)
    {
        Initialize();
    }

    EventTypeBCSM(its::Octets& octets) : its::AsnEnumerated(false)
    {
        Initialize();
        Decode(octets);
    }

    EventTypeBCSM(const EventTypeBCSM& rhs) : its::AsnEnumerated(rhs)
    {
        // Nothing to do.
    }

    EventTypeBCSM(its::AsnDescObject* description) : its::AsnEnumerated(description)
    {
        // Nothing to do.
    }

    EventTypeBCSM(its::AsnDescObject* description, long value) : its::AsnEnumerated(description, value)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

public:

    virtual ~EventTypeBCSM()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventTypeBCSM(*this);
    }

    virtual std::string GetName() const
    { return "EventTypeBCSM"; }

    virtual long Get(const std::string& valueName) const;

    virtual std::string Get(long value) const;

    virtual std::string GetExt(long value) const;

    enum {
        EVENT_TYPE_BCSM_COLLECTED_INFO = 2,
        EVENT_TYPE_BCSM_ROUTE_SELECT_FAILURE = 4,
        EVENT_TYPE_BCSM_OCALLED_PARTY_BUSY = 5,
        EVENT_TYPE_BCSM_ONO_ANSWER = 6,
        EVENT_TYPE_BCSM_OANSWER = 7,
        EVENT_TYPE_BCSM_ODISCONNECT = 9,
        EVENT_TYPE_BCSM_OABANDON = 10,
        EVENT_TYPE_BCSM_TERM_ATTEMPT_AUTHORIZED = 12,
        EVENT_TYPE_BCSM_TBUSY = 13,
        EVENT_TYPE_BCSM_TNO_ANSWER = 14,
        EVENT_TYPE_BCSM_TANSWER = 15,
        EVENT_TYPE_BCSM_TDISCONNECT = 17,
        EVENT_TYPE_BCSM_TABANDON = 18

    };

    void SetCollectedInfo()
    { _value = 2; }

    bool IsCollectedInfo() const
    { return _value == 2; }

    void SetRouteSelectFailure()
    { _value = 4; }

    bool IsRouteSelectFailure() const
    { return _value == 4; }

    void SetOCalledPartyBusy()
    { _value = 5; }

    bool IsOCalledPartyBusy() const
    { return _value == 5; }

    void SetONoAnswer()
    { _value = 6; }

    bool IsONoAnswer() const
    { return _value == 6; }

    void SetOAnswer()
    { _value = 7; }

    bool IsOAnswer() const
    { return _value == 7; }

    void SetODisconnect()
    { _value = 9; }

    bool IsODisconnect() const
    { return _value == 9; }

    void SetOAbandon()
    { _value = 10; }

    bool IsOAbandon() const
    { return _value == 10; }

    void SetTermAttemptAuthorized()
    { _value = 12; }

    bool IsTermAttemptAuthorized() const
    { return _value == 12; }

    void SetTBusy()
    { _value = 13; }

    bool IsTBusy() const
    { return _value == 13; }

    void SetTNoAnswer()
    { _value = 14; }

    bool IsTNoAnswer() const
    { return _value == 14; }

    void SetTAnswer()
    { _value = 15; }

    bool IsTAnswer() const
    { return _value == 15; }

    void SetTDisconnect()
    { _value = 17; }

    bool IsTDisconnect() const
    { return _value == 17; }

    void SetTAbandon()
    { _value = 18; }

    bool IsTAbandon() const
    { return _value == 18; }

};



} // namespace.

#endif    // !defined(_CAP_V2_EVENT_TYPE_BCSM_H_)

