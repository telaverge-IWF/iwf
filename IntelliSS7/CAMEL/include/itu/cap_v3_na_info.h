//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_NA_INFO_H_)
#define _CAP_V3_NA_INFO_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>

#include <cap_v3_na_carrier_information.h>
#include <cap_v3_na_oli_info.h>
#include <cap_v3_na_charge_number.h>



namespace cap_v3 {



class NA_Info : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::NACarrierInformation NACarrierInformation;


        typedef cap_v3::NAOliInfo NAOliInfo;


        typedef cap_v3::NAChargeNumber NAChargeNumber;


////////// End Nested Class(es) //////////

    NA_Info() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    NA_Info(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    NA_Info(const NA_Info& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    NA_Info(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetNaCarrierInformationStaticDescription();
    static its::AsnDescObject* GetNaOliInfoStaticDescription();
    static its::AsnDescObject* GetNaChargeNumberStaticDescription();

public:

    virtual ~NA_Info()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new NA_Info(*this);
    }

    virtual std::string GetName() const
    { return "NA_Info"; }

    void SetNaCarrierInformation(NACarrierInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNaCarrierInformationStaticDescription());
        AddElement(0, element);
    }

    void SetNaCarrierInformation(const NACarrierInformation& element)
    {
        its::AsnObject& asnObject = const_cast<NACarrierInformation&>(element);
        asnObject.SetDescription(GetNaCarrierInformationStaticDescription());
        AddElement(0, element);
    }

    bool OptionNaCarrierInformation() const
    {
        return Contains(0);
    }

    const NACarrierInformation& GetNaCarrierInformation() const
    {
        ITS_REQUIRE(OptionNaCarrierInformation());
        return static_cast<const NACarrierInformation&> (ElementAt(0));
    }

    void SetNaOliInfo(NAOliInfo* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNaOliInfoStaticDescription());
        AddElement(1, element);
    }

    void SetNaOliInfo(const NAOliInfo& element)
    {
        its::AsnObject& asnObject = const_cast<NAOliInfo&>(element);
        asnObject.SetDescription(GetNaOliInfoStaticDescription());
        AddElement(1, element);
    }

    bool OptionNaOliInfo() const
    {
        return Contains(1);
    }

    const NAOliInfo& GetNaOliInfo() const
    {
        ITS_REQUIRE(OptionNaOliInfo());
        return static_cast<const NAOliInfo&> (ElementAt(1));
    }

    void SetNaChargeNumber(NAChargeNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetNaChargeNumberStaticDescription());
        AddElement(2, element);
    }

    void SetNaChargeNumber(const NAChargeNumber& element)
    {
        its::AsnObject& asnObject = const_cast<NAChargeNumber&>(element);
        asnObject.SetDescription(GetNaChargeNumberStaticDescription());
        AddElement(2, element);
    }

    bool OptionNaChargeNumber() const
    {
        return Contains(2);
    }

    const NAChargeNumber& GetNaChargeNumber() const
    {
        ITS_REQUIRE(OptionNaChargeNumber());
        return static_cast<const NAChargeNumber&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_NA_INFO_H_)

