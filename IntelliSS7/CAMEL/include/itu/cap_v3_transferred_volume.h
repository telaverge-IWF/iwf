//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_TRANSFERRED_VOLUME_H_)
#define _CAP_V3_TRANSFERRED_VOLUME_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequence.h>



namespace cap_v3 {



class TransferredVolume : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class VolumeIfNoTariffSwitch : public its::AsnInteger
    {
    public:

        VolumeIfNoTariffSwitch() : its::AsnInteger(false)
        {
            Initialize();
        }

        VolumeIfNoTariffSwitch(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        VolumeIfNoTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        VolumeIfNoTariffSwitch(const VolumeIfNoTariffSwitch& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        VolumeIfNoTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        VolumeIfNoTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VolumeIfNoTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VolumeIfNoTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "VolumeIfNoTariffSwitch"; }

    };



    class VolumeIfTariffSwitch : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class VolumeSinceLastTariffSwitch : public its::AsnInteger
        {
        public:

            VolumeSinceLastTariffSwitch() : its::AsnInteger(false)
            {
                Initialize();
            }

            VolumeSinceLastTariffSwitch(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            VolumeSinceLastTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            VolumeSinceLastTariffSwitch(const VolumeSinceLastTariffSwitch& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            VolumeSinceLastTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            VolumeSinceLastTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~VolumeSinceLastTariffSwitch()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new VolumeSinceLastTariffSwitch(*this);
            }

            virtual std::string GetName() const
            { return "VolumeSinceLastTariffSwitch"; }

        };



        class VolumeTariffSwitchInterval : public its::AsnInteger
        {
        public:

            VolumeTariffSwitchInterval() : its::AsnInteger(false)
            {
                Initialize();
            }

            VolumeTariffSwitchInterval(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            VolumeTariffSwitchInterval(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            VolumeTariffSwitchInterval(const VolumeTariffSwitchInterval& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            VolumeTariffSwitchInterval(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            VolumeTariffSwitchInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~VolumeTariffSwitchInterval()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new VolumeTariffSwitchInterval(*this);
            }

            virtual std::string GetName() const
            { return "VolumeTariffSwitchInterval"; }

        };


    ////////// End Nested Class(es) //////////

        VolumeIfTariffSwitch() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        VolumeIfTariffSwitch(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        VolumeIfTariffSwitch(const VolumeIfTariffSwitch& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        VolumeIfTariffSwitch(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetVolumeSinceLastTariffSwitchStaticDescription();
        static its::AsnDescObject* GetVolumeTariffSwitchIntervalStaticDescription();

    public:

        virtual ~VolumeIfTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VolumeIfTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "VolumeIfTariffSwitch"; }

        void SetVolumeSinceLastTariffSwitch(VolumeSinceLastTariffSwitch* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetVolumeSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        void SetVolumeSinceLastTariffSwitch(const VolumeSinceLastTariffSwitch& element)
        {
            its::AsnObject& asnObject = const_cast<VolumeSinceLastTariffSwitch&>(element);
            asnObject.SetDescription(GetVolumeSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        const VolumeSinceLastTariffSwitch& GetVolumeSinceLastTariffSwitch() const
        {
            return static_cast<const VolumeSinceLastTariffSwitch&> (ElementAt(0));
        }

        void SetVolumeTariffSwitchInterval(VolumeTariffSwitchInterval* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetVolumeTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        void SetVolumeTariffSwitchInterval(const VolumeTariffSwitchInterval& element)
        {
            its::AsnObject& asnObject = const_cast<VolumeTariffSwitchInterval&>(element);
            asnObject.SetDescription(GetVolumeTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        bool OptionVolumeTariffSwitchInterval() const
        {
            return Contains(1);
        }

        const VolumeTariffSwitchInterval& GetVolumeTariffSwitchInterval() const
        {
            ITS_REQUIRE(OptionVolumeTariffSwitchInterval());
            return static_cast<const VolumeTariffSwitchInterval&> (ElementAt(1));
        }

    };


////////// End Nested Class(es) //////////

    TransferredVolume() : its::AsnChoice(false)
    {
        Initialize();
    }

    TransferredVolume(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    TransferredVolume(const TransferredVolume& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    TransferredVolume(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    TransferredVolume(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetVolumeIfNoTariffSwitchStaticDescription();
    static its::AsnDescObject* GetVolumeIfTariffSwitchStaticDescription();

public:

    virtual ~TransferredVolume()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TransferredVolume(*this);
    }

    virtual std::string GetName() const
    { return "TransferredVolume"; }

    void SetChoiceVolumeIfNoTariffSwitch(VolumeIfNoTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetVolumeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceVolumeIfNoTariffSwitch(const VolumeIfNoTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<VolumeIfNoTariffSwitch&>(choice);
        asnObject.SetDescription(GetVolumeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceVolumeIfNoTariffSwitch() const
    {
        return Contains(GetVolumeIfNoTariffSwitchStaticDescription()->TagIdentity());
    }

    const VolumeIfNoTariffSwitch& GetChoiceVolumeIfNoTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceVolumeIfNoTariffSwitch());
        return static_cast<const VolumeIfNoTariffSwitch&> (GetChoice());
    }

    void SetChoiceVolumeIfTariffSwitch(VolumeIfTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetVolumeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceVolumeIfTariffSwitch(const VolumeIfTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<VolumeIfTariffSwitch&>(choice);
        asnObject.SetDescription(GetVolumeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceVolumeIfTariffSwitch() const
    {
        return Contains(GetVolumeIfTariffSwitchStaticDescription()->TagIdentity());
    }

    const VolumeIfTariffSwitch& GetChoiceVolumeIfTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceVolumeIfTariffSwitch());
        return static_cast<const VolumeIfTariffSwitch&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_TRANSFERRED_VOLUME_H_)

