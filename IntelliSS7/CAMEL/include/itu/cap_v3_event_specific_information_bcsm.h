//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_EVENT_SPECIFIC_INFORMATION_BCSM_H_)
#define _CAP_V3_EVENT_SPECIFIC_INFORMATION_BCSM_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnNull.h>

#include <cap_v3_cause.h>
#include <cap_v3_called_party_number.h>



namespace cap_v3 {



class EventSpecificInformationBCSM : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class RouteSelectFailureSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::Cause Cause;


    ////////// End Nested Class(es) //////////

        RouteSelectFailureSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        RouteSelectFailureSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        RouteSelectFailureSpecificInfo(const RouteSelectFailureSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        RouteSelectFailureSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetFailureCauseStaticDescription();

    public:

        virtual ~RouteSelectFailureSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RouteSelectFailureSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "RouteSelectFailureSpecificInfo"; }

        void SetFailureCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        void SetFailureCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetFailureCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionFailureCause() const
        {
            return Contains(0);
        }

        const Cause& GetFailureCause() const
        {
            ITS_REQUIRE(OptionFailureCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class OCalledPartyBusySpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::Cause Cause;


    ////////// End Nested Class(es) //////////

        OCalledPartyBusySpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        OCalledPartyBusySpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        OCalledPartyBusySpecificInfo(const OCalledPartyBusySpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OCalledPartyBusySpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetBusyCauseStaticDescription();

    public:

        virtual ~OCalledPartyBusySpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OCalledPartyBusySpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OCalledPartyBusySpecificInfo"; }

        void SetBusyCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        void SetBusyCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionBusyCause() const
        {
            return Contains(0);
        }

        const Cause& GetBusyCause() const
        {
            ITS_REQUIRE(OptionBusyCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class ONoAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


    ////////// End Nested Class(es) //////////

        ONoAnswerSpecificInfo() : its::AsnSequence(0, false)
        {
            Initialize();
        }

        ONoAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(0, false)
        {
            Initialize();
            Decode(octets);
        }

        ONoAnswerSpecificInfo(const ONoAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ONoAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(0, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ONoAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ONoAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "ONoAnswerSpecificInfo"; }

    };



    class OAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class Or_Call : public its::AsnNull
        {
        public:

            Or_Call() : its::AsnNull(false)
            {
                Initialize();
            }

            Or_Call(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            Or_Call(const Or_Call& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            Or_Call(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~Or_Call()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Or_Call(*this);
            }

            virtual std::string GetName() const
            { return "Or_Call"; }

        };



        class ForwardedCall : public its::AsnNull
        {
        public:

            ForwardedCall() : its::AsnNull(false)
            {
                Initialize();
            }

            ForwardedCall(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            ForwardedCall(const ForwardedCall& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            ForwardedCall(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~ForwardedCall()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new ForwardedCall(*this);
            }

            virtual std::string GetName() const
            { return "ForwardedCall"; }

        };


            typedef cap_v3::CalledPartyNumber CalledPartyNumber;


    ////////// End Nested Class(es) //////////

        OAnswerSpecificInfo() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        OAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        OAnswerSpecificInfo(const OAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        OAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetDestinationAddressStaticDescription();
        static its::AsnDescObject* GetOr_CallStaticDescription();
        static its::AsnDescObject* GetForwardedCallStaticDescription();

    public:

        virtual ~OAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new OAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "OAnswerSpecificInfo"; }

        void SetDestinationAddress(CalledPartyNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetDestinationAddressStaticDescription());
            AddElement(0, element);
        }

        void SetDestinationAddress(const CalledPartyNumber& element)
        {
            its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
            asnObject.SetDescription(GetDestinationAddressStaticDescription());
            AddElement(0, element);
        }

        bool OptionDestinationAddress() const
        {
            return Contains(0);
        }

        const CalledPartyNumber& GetDestinationAddress() const
        {
            ITS_REQUIRE(OptionDestinationAddress());
            return static_cast<const CalledPartyNumber&> (ElementAt(0));
        }

        void SetOr_Call(Or_Call* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetOr_CallStaticDescription());
            AddElement(1, element);
        }

        void SetOr_Call(const Or_Call& element)
        {
            its::AsnObject& asnObject = const_cast<Or_Call&>(element);
            asnObject.SetDescription(GetOr_CallStaticDescription());
            AddElement(1, element);
        }

        bool OptionOr_Call() const
        {
            return Contains(1);
        }

        const Or_Call& GetOr_Call() const
        {
            ITS_REQUIRE(OptionOr_Call());
            return static_cast<const Or_Call&> (ElementAt(1));
        }

        void SetForwardedCall(ForwardedCall* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetForwardedCallStaticDescription());
            AddElement(2, element);
        }

        void SetForwardedCall(const ForwardedCall& element)
        {
            its::AsnObject& asnObject = const_cast<ForwardedCall&>(element);
            asnObject.SetDescription(GetForwardedCallStaticDescription());
            AddElement(2, element);
        }

        bool OptionForwardedCall() const
        {
            return Contains(2);
        }

        const ForwardedCall& GetForwardedCall() const
        {
            ITS_REQUIRE(OptionForwardedCall());
            return static_cast<const ForwardedCall&> (ElementAt(2));
        }

    };



    class ODisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::Cause Cause;


    ////////// End Nested Class(es) //////////

        ODisconnectSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        ODisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        ODisconnectSpecificInfo(const ODisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        ODisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~ODisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ODisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "ODisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };



    class TBusySpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class CallForwarded : public its::AsnNull
        {
        public:

            CallForwarded() : its::AsnNull(false)
            {
                Initialize();
            }

            CallForwarded(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            CallForwarded(const CallForwarded& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            CallForwarded(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CallForwarded()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CallForwarded(*this);
            }

            virtual std::string GetName() const
            { return "CallForwarded"; }

        };



        class RouteNotPermitted : public its::AsnNull
        {
        public:

            RouteNotPermitted() : its::AsnNull(false)
            {
                Initialize();
            }

            RouteNotPermitted(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            RouteNotPermitted(const RouteNotPermitted& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            RouteNotPermitted(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RouteNotPermitted()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RouteNotPermitted(*this);
            }

            virtual std::string GetName() const
            { return "RouteNotPermitted"; }

        };


            typedef cap_v3::Cause Cause;


    ////////// End Nested Class(es) //////////

        TBusySpecificInfo() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        TBusySpecificInfo(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        TBusySpecificInfo(const TBusySpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TBusySpecificInfo(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetBusyCauseStaticDescription();
        static its::AsnDescObject* GetCallForwardedStaticDescription();
        static its::AsnDescObject* GetRouteNotPermittedStaticDescription();

    public:

        virtual ~TBusySpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TBusySpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TBusySpecificInfo"; }

        void SetBusyCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        void SetBusyCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetBusyCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionBusyCause() const
        {
            return Contains(0);
        }

        const Cause& GetBusyCause() const
        {
            ITS_REQUIRE(OptionBusyCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

        void SetCallForwarded(CallForwarded* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallForwardedStaticDescription());
            AddElement(1, element);
        }

        void SetCallForwarded(const CallForwarded& element)
        {
            its::AsnObject& asnObject = const_cast<CallForwarded&>(element);
            asnObject.SetDescription(GetCallForwardedStaticDescription());
            AddElement(1, element);
        }

        bool OptionCallForwarded() const
        {
            return Contains(1);
        }

        const CallForwarded& GetCallForwarded() const
        {
            ITS_REQUIRE(OptionCallForwarded());
            return static_cast<const CallForwarded&> (ElementAt(1));
        }

        void SetRouteNotPermitted(RouteNotPermitted* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRouteNotPermittedStaticDescription());
            AddElement(2, element);
        }

        void SetRouteNotPermitted(const RouteNotPermitted& element)
        {
            its::AsnObject& asnObject = const_cast<RouteNotPermitted&>(element);
            asnObject.SetDescription(GetRouteNotPermittedStaticDescription());
            AddElement(2, element);
        }

        bool OptionRouteNotPermitted() const
        {
            return Contains(2);
        }

        const RouteNotPermitted& GetRouteNotPermitted() const
        {
            ITS_REQUIRE(OptionRouteNotPermitted());
            return static_cast<const RouteNotPermitted&> (ElementAt(2));
        }

    };



    class TNoAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class CallForwarded : public its::AsnNull
        {
        public:

            CallForwarded() : its::AsnNull(false)
            {
                Initialize();
            }

            CallForwarded(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            CallForwarded(const CallForwarded& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            CallForwarded(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CallForwarded()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CallForwarded(*this);
            }

            virtual std::string GetName() const
            { return "CallForwarded"; }

        };


    ////////// End Nested Class(es) //////////

        TNoAnswerSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        TNoAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        TNoAnswerSpecificInfo(const TNoAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TNoAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetCallForwardedStaticDescription();

    public:

        virtual ~TNoAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TNoAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TNoAnswerSpecificInfo"; }

        void SetCallForwarded(CallForwarded* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallForwardedStaticDescription());
            AddElement(0, element);
        }

        void SetCallForwarded(const CallForwarded& element)
        {
            its::AsnObject& asnObject = const_cast<CallForwarded&>(element);
            asnObject.SetDescription(GetCallForwardedStaticDescription());
            AddElement(0, element);
        }

        bool OptionCallForwarded() const
        {
            return Contains(0);
        }

        const CallForwarded& GetCallForwarded() const
        {
            ITS_REQUIRE(OptionCallForwarded());
            return static_cast<const CallForwarded&> (ElementAt(0));
        }

    };



    class TAnswerSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class Or_Call : public its::AsnNull
        {
        public:

            Or_Call() : its::AsnNull(false)
            {
                Initialize();
            }

            Or_Call(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            Or_Call(const Or_Call& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            Or_Call(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~Or_Call()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Or_Call(*this);
            }

            virtual std::string GetName() const
            { return "Or_Call"; }

        };



        class ForwardedCall : public its::AsnNull
        {
        public:

            ForwardedCall() : its::AsnNull(false)
            {
                Initialize();
            }

            ForwardedCall(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            ForwardedCall(const ForwardedCall& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            ForwardedCall(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~ForwardedCall()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new ForwardedCall(*this);
            }

            virtual std::string GetName() const
            { return "ForwardedCall"; }

        };


            typedef cap_v3::CalledPartyNumber CalledPartyNumber;


    ////////// End Nested Class(es) //////////

        TAnswerSpecificInfo() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        TAnswerSpecificInfo(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        TAnswerSpecificInfo(const TAnswerSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TAnswerSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetDestinationAddressStaticDescription();
        static its::AsnDescObject* GetOr_CallStaticDescription();
        static its::AsnDescObject* GetForwardedCallStaticDescription();

    public:

        virtual ~TAnswerSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TAnswerSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TAnswerSpecificInfo"; }

        void SetDestinationAddress(CalledPartyNumber* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetDestinationAddressStaticDescription());
            AddElement(0, element);
        }

        void SetDestinationAddress(const CalledPartyNumber& element)
        {
            its::AsnObject& asnObject = const_cast<CalledPartyNumber&>(element);
            asnObject.SetDescription(GetDestinationAddressStaticDescription());
            AddElement(0, element);
        }

        bool OptionDestinationAddress() const
        {
            return Contains(0);
        }

        const CalledPartyNumber& GetDestinationAddress() const
        {
            ITS_REQUIRE(OptionDestinationAddress());
            return static_cast<const CalledPartyNumber&> (ElementAt(0));
        }

        void SetOr_Call(Or_Call* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetOr_CallStaticDescription());
            AddElement(1, element);
        }

        void SetOr_Call(const Or_Call& element)
        {
            its::AsnObject& asnObject = const_cast<Or_Call&>(element);
            asnObject.SetDescription(GetOr_CallStaticDescription());
            AddElement(1, element);
        }

        bool OptionOr_Call() const
        {
            return Contains(1);
        }

        const Or_Call& GetOr_Call() const
        {
            ITS_REQUIRE(OptionOr_Call());
            return static_cast<const Or_Call&> (ElementAt(1));
        }

        void SetForwardedCall(ForwardedCall* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetForwardedCallStaticDescription());
            AddElement(2, element);
        }

        void SetForwardedCall(const ForwardedCall& element)
        {
            its::AsnObject& asnObject = const_cast<ForwardedCall&>(element);
            asnObject.SetDescription(GetForwardedCallStaticDescription());
            AddElement(2, element);
        }

        bool OptionForwardedCall() const
        {
            return Contains(2);
        }

        const ForwardedCall& GetForwardedCall() const
        {
            ITS_REQUIRE(OptionForwardedCall());
            return static_cast<const ForwardedCall&> (ElementAt(2));
        }

    };



    class TDisconnectSpecificInfo : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::Cause Cause;


    ////////// End Nested Class(es) //////////

        TDisconnectSpecificInfo() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        TDisconnectSpecificInfo(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        TDisconnectSpecificInfo(const TDisconnectSpecificInfo& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TDisconnectSpecificInfo(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetReleaseCauseStaticDescription();

    public:

        virtual ~TDisconnectSpecificInfo()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TDisconnectSpecificInfo(*this);
        }

        virtual std::string GetName() const
        { return "TDisconnectSpecificInfo"; }

        void SetReleaseCause(Cause* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        void SetReleaseCause(const Cause& element)
        {
            its::AsnObject& asnObject = const_cast<Cause&>(element);
            asnObject.SetDescription(GetReleaseCauseStaticDescription());
            AddElement(0, element);
        }

        bool OptionReleaseCause() const
        {
            return Contains(0);
        }

        const Cause& GetReleaseCause() const
        {
            ITS_REQUIRE(OptionReleaseCause());
            return static_cast<const Cause&> (ElementAt(0));
        }

    };


////////// End Nested Class(es) //////////

    EventSpecificInformationBCSM() : its::AsnChoice(false)
    {
        Initialize();
    }

    EventSpecificInformationBCSM(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    EventSpecificInformationBCSM(const EventSpecificInformationBCSM& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    EventSpecificInformationBCSM(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRouteSelectFailureSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOCalledPartyBusySpecificInfoStaticDescription();
    static its::AsnDescObject* GetONoAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetOAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetODisconnectSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTBusySpecificInfoStaticDescription();
    static its::AsnDescObject* GetTNoAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTAnswerSpecificInfoStaticDescription();
    static its::AsnDescObject* GetTDisconnectSpecificInfoStaticDescription();

public:

    virtual ~EventSpecificInformationBCSM()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EventSpecificInformationBCSM(*this);
    }

    virtual std::string GetName() const
    { return "EventSpecificInformationBCSM"; }

    void SetChoiceRouteSelectFailureSpecificInfo(RouteSelectFailureSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRouteSelectFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRouteSelectFailureSpecificInfo(const RouteSelectFailureSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<RouteSelectFailureSpecificInfo&>(choice);
        asnObject.SetDescription(GetRouteSelectFailureSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRouteSelectFailureSpecificInfo() const
    {
        return Contains(GetRouteSelectFailureSpecificInfoStaticDescription()->TagIdentity());
    }

    const RouteSelectFailureSpecificInfo& GetChoiceRouteSelectFailureSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceRouteSelectFailureSpecificInfo());
        return static_cast<const RouteSelectFailureSpecificInfo&> (GetChoice());
    }

    void SetChoiceOCalledPartyBusySpecificInfo(OCalledPartyBusySpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOCalledPartyBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOCalledPartyBusySpecificInfo(const OCalledPartyBusySpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OCalledPartyBusySpecificInfo&>(choice);
        asnObject.SetDescription(GetOCalledPartyBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOCalledPartyBusySpecificInfo() const
    {
        return Contains(GetOCalledPartyBusySpecificInfoStaticDescription()->TagIdentity());
    }

    const OCalledPartyBusySpecificInfo& GetChoiceOCalledPartyBusySpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOCalledPartyBusySpecificInfo());
        return static_cast<const OCalledPartyBusySpecificInfo&> (GetChoice());
    }

    void SetChoiceONoAnswerSpecificInfo(ONoAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetONoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceONoAnswerSpecificInfo(const ONoAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<ONoAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetONoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceONoAnswerSpecificInfo() const
    {
        return Contains(GetONoAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const ONoAnswerSpecificInfo& GetChoiceONoAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceONoAnswerSpecificInfo());
        return static_cast<const ONoAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceOAnswerSpecificInfo(OAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetOAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceOAnswerSpecificInfo(const OAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<OAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetOAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceOAnswerSpecificInfo() const
    {
        return Contains(GetOAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const OAnswerSpecificInfo& GetChoiceOAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceOAnswerSpecificInfo());
        return static_cast<const OAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceODisconnectSpecificInfo(ODisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceODisconnectSpecificInfo(const ODisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<ODisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetODisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceODisconnectSpecificInfo() const
    {
        return Contains(GetODisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const ODisconnectSpecificInfo& GetChoiceODisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceODisconnectSpecificInfo());
        return static_cast<const ODisconnectSpecificInfo&> (GetChoice());
    }

    void SetChoiceTBusySpecificInfo(TBusySpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTBusySpecificInfo(const TBusySpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TBusySpecificInfo&>(choice);
        asnObject.SetDescription(GetTBusySpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTBusySpecificInfo() const
    {
        return Contains(GetTBusySpecificInfoStaticDescription()->TagIdentity());
    }

    const TBusySpecificInfo& GetChoiceTBusySpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTBusySpecificInfo());
        return static_cast<const TBusySpecificInfo&> (GetChoice());
    }

    void SetChoiceTNoAnswerSpecificInfo(TNoAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTNoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTNoAnswerSpecificInfo(const TNoAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TNoAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetTNoAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTNoAnswerSpecificInfo() const
    {
        return Contains(GetTNoAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const TNoAnswerSpecificInfo& GetChoiceTNoAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTNoAnswerSpecificInfo());
        return static_cast<const TNoAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceTAnswerSpecificInfo(TAnswerSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTAnswerSpecificInfo(const TAnswerSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TAnswerSpecificInfo&>(choice);
        asnObject.SetDescription(GetTAnswerSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTAnswerSpecificInfo() const
    {
        return Contains(GetTAnswerSpecificInfoStaticDescription()->TagIdentity());
    }

    const TAnswerSpecificInfo& GetChoiceTAnswerSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTAnswerSpecificInfo());
        return static_cast<const TAnswerSpecificInfo&> (GetChoice());
    }

    void SetChoiceTDisconnectSpecificInfo(TDisconnectSpecificInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTDisconnectSpecificInfo(const TDisconnectSpecificInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<TDisconnectSpecificInfo&>(choice);
        asnObject.SetDescription(GetTDisconnectSpecificInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTDisconnectSpecificInfo() const
    {
        return Contains(GetTDisconnectSpecificInfoStaticDescription()->TagIdentity());
    }

    const TDisconnectSpecificInfo& GetChoiceTDisconnectSpecificInfo() const
    {
        ITS_REQUIRE(ChoiceTDisconnectSpecificInfo());
        return static_cast<const TDisconnectSpecificInfo&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_EVENT_SPECIFIC_INFORMATION_BCSM_H_)

