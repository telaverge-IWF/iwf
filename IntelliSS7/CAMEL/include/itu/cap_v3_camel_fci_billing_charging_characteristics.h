//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CAMEL_FCI_BILLING_CHARGING_CHARACTERISTICS_H_)
#define _CAP_V3_CAMEL_FCI_BILLING_CHARGING_CHARACTERISTICS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnEnumerated.h>

#include <cap_v3_sending_side_id.h>
#include <cap_v3_append_free_format_data.h>



namespace cap_v3 {



class CAMEL_FCIBillingChargingCharacteristics : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class FCIBCCCAMELsequence1 : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class FreeFormatData : public its::AsnOctetString
        {
        public:

            FreeFormatData() : its::AsnOctetString(false)
            {
                Initialize();
            }

            FreeFormatData(const std::vector<byte>& array) : its::AsnOctetString(array, false)
            {
                Initialize();
            }

            FreeFormatData(its::Octets& octets) : its::AsnOctetString(false)
            {
                Initialize();
                Decode(octets);
            }

            FreeFormatData(const FreeFormatData& rhs) : its::AsnOctetString(rhs)
            {
                // Nothing to do.
            }

            FreeFormatData(its::AsnDescObject* description) : its::AsnOctetString(description)
            {
                // Nothing to do.
            }

            FreeFormatData(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~FreeFormatData()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new FreeFormatData(*this);
            }

            virtual std::string GetName() const
            { return "FreeFormatData"; }

        };


            typedef cap_v3::SendingSideID SendingSideID;


            typedef cap_v3::AppendFreeFormatData AppendFreeFormatData;


    ////////// End Nested Class(es) //////////

        FCIBCCCAMELsequence1() : its::AsnSequence(3, false)
        {
            Initialize();
        }

        FCIBCCCAMELsequence1(its::Octets& octets) : its::AsnSequence(3, false)
        {
            Initialize();
            Decode(octets);
        }

        FCIBCCCAMELsequence1(const FCIBCCCAMELsequence1& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        FCIBCCCAMELsequence1(its::AsnDescObject* description) : its::AsnSequence(3, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetFreeFormatDataStaticDescription();
        static its::AsnDescObject* GetPartyToChargeStaticDescription();
        static its::AsnDescObject* GetAppendFreeFormatDataStaticDescription();

    public:

        virtual ~FCIBCCCAMELsequence1()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new FCIBCCCAMELsequence1(*this);
        }

        virtual std::string GetName() const
        { return "FCIBCCCAMELsequence1"; }

        void SetFreeFormatData(FreeFormatData* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetFreeFormatDataStaticDescription());
            AddElement(0, element);
        }

        void SetFreeFormatData(const FreeFormatData& element)
        {
            its::AsnObject& asnObject = const_cast<FreeFormatData&>(element);
            asnObject.SetDescription(GetFreeFormatDataStaticDescription());
            AddElement(0, element);
        }

        const FreeFormatData& GetFreeFormatData() const
        {
            return static_cast<const FreeFormatData&> (ElementAt(0));
        }

        void SetPartyToCharge(SendingSideID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetPartyToChargeStaticDescription());
            AddElement(1, element);
        }

        void SetPartyToCharge(const SendingSideID& element)
        {
            its::AsnObject& asnObject = const_cast<SendingSideID&>(element);
            asnObject.SetDescription(GetPartyToChargeStaticDescription());
            AddElement(1, element);
        }

        const SendingSideID& GetPartyToCharge() const
        {
            return static_cast<const SendingSideID&> (ElementAt(1));
        }

        void SetAppendFreeFormatData(AppendFreeFormatData* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAppendFreeFormatDataStaticDescription());
            AddElement(2, element);
        }

        void SetAppendFreeFormatData(const AppendFreeFormatData& element)
        {
            its::AsnObject& asnObject = const_cast<AppendFreeFormatData&>(element);
            asnObject.SetDescription(GetAppendFreeFormatDataStaticDescription());
            AddElement(2, element);
        }

        const AppendFreeFormatData& GetAppendFreeFormatData() const
        {
            return static_cast<const AppendFreeFormatData&> (ElementAt(2));
        }

    };


////////// End Nested Class(es) //////////

    CAMEL_FCIBillingChargingCharacteristics() : its::AsnChoice(false)
    {
        Initialize();
    }

    CAMEL_FCIBillingChargingCharacteristics(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CAMEL_FCIBillingChargingCharacteristics(const CAMEL_FCIBillingChargingCharacteristics& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CAMEL_FCIBillingChargingCharacteristics(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CAMEL_FCIBillingChargingCharacteristics(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetFCIBCCCAMELsequence1StaticDescription();

public:

    virtual ~CAMEL_FCIBillingChargingCharacteristics()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CAMEL_FCIBillingChargingCharacteristics(*this);
    }

    virtual std::string GetName() const
    { return "CAMEL_FCIBillingChargingCharacteristics"; }

    void SetChoiceFCIBCCCAMELsequence1(FCIBCCCAMELsequence1* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetFCIBCCCAMELsequence1StaticDescription());
        SetChoice(choice);
    }

    void SetChoiceFCIBCCCAMELsequence1(const FCIBCCCAMELsequence1& choice)
    {
        its::AsnObject& asnObject = const_cast<FCIBCCCAMELsequence1&>(choice);
        asnObject.SetDescription(GetFCIBCCCAMELsequence1StaticDescription());
        SetChoice(choice);
    }

    bool ChoiceFCIBCCCAMELsequence1() const
    {
        return Contains(GetFCIBCCCAMELsequence1StaticDescription()->TagIdentity());
    }

    const FCIBCCCAMELsequence1& GetChoiceFCIBCCCAMELsequence1() const
    {
        ITS_REQUIRE(ChoiceFCIBCCCAMELsequence1());
        return static_cast<const FCIBCCCAMELsequence1&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CAMEL_FCI_BILLING_CHARGING_CHARACTERISTICS_H_)

