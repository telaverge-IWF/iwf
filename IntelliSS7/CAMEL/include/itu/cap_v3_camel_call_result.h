//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CAMEL_CALL_RESULT_H_)
#define _CAP_V3_CAMEL_CALL_RESULT_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnBoolean.h>
#include <AsnNull.h>
#include <AsnSequenceOf.h>

#include <cap_v3_receiving_side_id.h>
#include <cap_v3_time_information.h>
#include <cap_v3_extension_field.h>



namespace cap_v3 {



class CAMEL_CallResult : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class TimeDurationChargingResult : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class CallActive : public its::AsnBoolean
        {
        public:

            CallActive(bool value) : its::AsnBoolean(value, false)
            {
                Initialize();
            }

            CallActive(its::Octets& octets) : its::AsnBoolean(false, false)
            {
                Initialize();
                Decode(octets);
            }

            CallActive(const CallActive& rhs) : its::AsnBoolean(rhs)
            {
                // Nothing to do.
            }

            CallActive(its::AsnDescObject* description) : its::AsnBoolean(description)
            {
                // Nothing to do.
            }

            CallActive(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CallActive()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CallActive(*this);
            }

            virtual std::string GetName() const
            { return "CallActive"; }

        };



        class CallReleasedAtTcpExpiry : public its::AsnNull
        {
        public:

            CallReleasedAtTcpExpiry() : its::AsnNull(false)
            {
                Initialize();
            }

            CallReleasedAtTcpExpiry(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            CallReleasedAtTcpExpiry(const CallReleasedAtTcpExpiry& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            CallReleasedAtTcpExpiry(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~CallReleasedAtTcpExpiry()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new CallReleasedAtTcpExpiry(*this);
            }

            virtual std::string GetName() const
            { return "CallReleasedAtTcpExpiry"; }

        };



        class Extensions : public its::AsnSequenceOf
        {
        public:


        ////////// Begin Nested Class //////////


                typedef cap_v3::ExtensionField ExtensionField;


        ////////// End Nested Class //////////

            Extensions() : its::AsnSequenceOf(false)
            {
                Initialize();
            }

            Extensions(its::Octets& octets) : its::AsnSequenceOf(false)
            {
                Initialize();
                Decode(octets);
            }

            Extensions(const Extensions& rhs) : its::AsnSequenceOf(rhs)
            {
                // Nothing to do.
            }

            Extensions(its::AsnDescObject* description) : its::AsnSequenceOf(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

            static its::AsnDescObject* GetExtensionFieldStaticDescription();

        public:

            virtual ~Extensions()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new Extensions(*this);
            }

            virtual std::string GetName() const
            { return "Extensions"; }

            void AddElement(ExtensionField* element)
            {
                ITS_REQUIRE(element != NULL);
                element->AsnObject::SetDescription(GetExtensionFieldStaticDescription());
                AsnSequenceOf::AddElement(element);
            }

            void AddElement(const ExtensionField& element)
            {
                its::AsnObject& asnObject = const_cast<ExtensionField&>(element);
                asnObject.SetDescription(GetExtensionFieldStaticDescription());
                AsnSequenceOf::AddElement(element);
            }

            const ExtensionField& ElementAt(int index) const
            {
                return static_cast<const ExtensionField&> (AsnSequenceOf::ElementAt(index));
            }

        };


            typedef cap_v3::ReceivingSideID ReceivingSideID;


            typedef cap_v3::TimeInformation TimeInformation;


    ////////// End Nested Class(es) //////////

        TimeDurationChargingResult() : its::AsnSequence(5, false)
        {
            Initialize();
        }

        TimeDurationChargingResult(its::Octets& octets) : its::AsnSequence(5, false)
        {
            Initialize();
            Decode(octets);
        }

        TimeDurationChargingResult(const TimeDurationChargingResult& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        TimeDurationChargingResult(its::AsnDescObject* description) : its::AsnSequence(5, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetPartyToChargeStaticDescription();
        static its::AsnDescObject* GetTimeInformationStaticDescription();
        static its::AsnDescObject* GetCallActiveStaticDescription();
        static its::AsnDescObject* GetCallReleasedAtTcpExpiryStaticDescription();
        static its::AsnDescObject* GetExtensionsStaticDescription();

    public:

        virtual ~TimeDurationChargingResult()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new TimeDurationChargingResult(*this);
        }

        virtual std::string GetName() const
        { return "TimeDurationChargingResult"; }

        void SetPartyToCharge(ReceivingSideID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetPartyToChargeStaticDescription());
            AddElement(0, element);
        }

        void SetPartyToCharge(const ReceivingSideID& element)
        {
            its::AsnObject& asnObject = const_cast<ReceivingSideID&>(element);
            asnObject.SetDescription(GetPartyToChargeStaticDescription());
            AddElement(0, element);
        }

        const ReceivingSideID& GetPartyToCharge() const
        {
            return static_cast<const ReceivingSideID&> (ElementAt(0));
        }

        void SetTimeInformation(TimeInformation* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeInformationStaticDescription());
            AddElement(1, element);
        }

        void SetTimeInformation(const TimeInformation& element)
        {
            its::AsnObject& asnObject = const_cast<TimeInformation&>(element);
            asnObject.SetDescription(GetTimeInformationStaticDescription());
            AddElement(1, element);
        }

        const TimeInformation& GetTimeInformation() const
        {
            return static_cast<const TimeInformation&> (ElementAt(1));
        }

        void SetCallActive(CallActive* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallActiveStaticDescription());
            AddElement(2, element);
        }

        void SetCallActive(const CallActive& element)
        {
            its::AsnObject& asnObject = const_cast<CallActive&>(element);
            asnObject.SetDescription(GetCallActiveStaticDescription());
            AddElement(2, element);
        }

        const CallActive& GetCallActive() const
        {
            return static_cast<const CallActive&> (ElementAt(2));
        }

        void SetCallReleasedAtTcpExpiry(CallReleasedAtTcpExpiry* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetCallReleasedAtTcpExpiryStaticDescription());
            AddElement(3, element);
        }

        void SetCallReleasedAtTcpExpiry(const CallReleasedAtTcpExpiry& element)
        {
            its::AsnObject& asnObject = const_cast<CallReleasedAtTcpExpiry&>(element);
            asnObject.SetDescription(GetCallReleasedAtTcpExpiryStaticDescription());
            AddElement(3, element);
        }

        bool OptionCallReleasedAtTcpExpiry() const
        {
            return Contains(3);
        }

        const CallReleasedAtTcpExpiry& GetCallReleasedAtTcpExpiry() const
        {
            ITS_REQUIRE(OptionCallReleasedAtTcpExpiry());
            return static_cast<const CallReleasedAtTcpExpiry&> (ElementAt(3));
        }

        void SetExtensions(Extensions* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetExtensionsStaticDescription());
            AddElement(4, element);
        }

        void SetExtensions(const Extensions& element)
        {
            its::AsnObject& asnObject = const_cast<Extensions&>(element);
            asnObject.SetDescription(GetExtensionsStaticDescription());
            AddElement(4, element);
        }

        bool OptionExtensions() const
        {
            return Contains(4);
        }

        const Extensions& GetExtensions() const
        {
            ITS_REQUIRE(OptionExtensions());
            return static_cast<const Extensions&> (ElementAt(4));
        }

    };


////////// End Nested Class(es) //////////

    CAMEL_CallResult() : its::AsnChoice(false)
    {
        Initialize();
    }

    CAMEL_CallResult(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CAMEL_CallResult(const CAMEL_CallResult& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CAMEL_CallResult(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CAMEL_CallResult(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetTimeDurationChargingResultStaticDescription();

public:

    virtual ~CAMEL_CallResult()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CAMEL_CallResult(*this);
    }

    virtual std::string GetName() const
    { return "CAMEL_CallResult"; }

    void SetChoiceTimeDurationChargingResult(TimeDurationChargingResult* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetTimeDurationChargingResultStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTimeDurationChargingResult(const TimeDurationChargingResult& choice)
    {
        its::AsnObject& asnObject = const_cast<TimeDurationChargingResult&>(choice);
        asnObject.SetDescription(GetTimeDurationChargingResultStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTimeDurationChargingResult() const
    {
        return Contains(GetTimeDurationChargingResultStaticDescription()->TagIdentity());
    }

    const TimeDurationChargingResult& GetChoiceTimeDurationChargingResult() const
    {
        ITS_REQUIRE(ChoiceTimeDurationChargingResult());
        return static_cast<const TimeDurationChargingResult&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CAMEL_CALL_RESULT_H_)

