//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_FORWARD_SERVICE_INTERACTION_IND_H_)
#define _CAP_V3_FORWARD_SERVICE_INTERACTION_IND_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>



namespace cap_v3 {



class ForwardServiceInteractionInd : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class ConferenceTreatmentIndicator : public its::AsnOctetString
    {
    public:

        ConferenceTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        ConferenceTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        ConferenceTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        ConferenceTreatmentIndicator(const ConferenceTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        ConferenceTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        ConferenceTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~ConferenceTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new ConferenceTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "ConferenceTreatmentIndicator"; }

    };



    class CallDiversionTreatmentIndicator : public its::AsnOctetString
    {
    public:

        CallDiversionTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        CallDiversionTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        CallDiversionTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        CallDiversionTreatmentIndicator(const CallDiversionTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        CallDiversionTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        CallDiversionTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallDiversionTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallDiversionTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "CallDiversionTreatmentIndicator"; }

    };



    class CallCompletionTreatmentIndicator : public its::AsnOctetString
    {
    public:

        CallCompletionTreatmentIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        CallCompletionTreatmentIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        CallCompletionTreatmentIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        CallCompletionTreatmentIndicator(const CallCompletionTreatmentIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        CallCompletionTreatmentIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        CallCompletionTreatmentIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallCompletionTreatmentIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallCompletionTreatmentIndicator(*this);
        }

        virtual std::string GetName() const
        { return "CallCompletionTreatmentIndicator"; }

    };



    class CallingPartyRestrictionIndicator : public its::AsnOctetString
    {
    public:

        CallingPartyRestrictionIndicator() : its::AsnOctetString(false)
        {
            Initialize();
        }

        CallingPartyRestrictionIndicator(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        CallingPartyRestrictionIndicator(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        CallingPartyRestrictionIndicator(const CallingPartyRestrictionIndicator& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        CallingPartyRestrictionIndicator(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        CallingPartyRestrictionIndicator(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CallingPartyRestrictionIndicator()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CallingPartyRestrictionIndicator(*this);
        }

        virtual std::string GetName() const
        { return "CallingPartyRestrictionIndicator"; }

    };


////////// End Nested Class(es) //////////

    ForwardServiceInteractionInd() : its::AsnSequence(4, false)
    {
        Initialize();
    }

    ForwardServiceInteractionInd(its::Octets& octets) : its::AsnSequence(4, false)
    {
        Initialize();
        Decode(octets);
    }

    ForwardServiceInteractionInd(const ForwardServiceInteractionInd& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    ForwardServiceInteractionInd(its::AsnDescObject* description) : its::AsnSequence(4, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetConferenceTreatmentIndicatorStaticDescription();
    static its::AsnDescObject* GetCallDiversionTreatmentIndicatorStaticDescription();
    static its::AsnDescObject* GetCallCompletionTreatmentIndicatorStaticDescription();
    static its::AsnDescObject* GetCallingPartyRestrictionIndicatorStaticDescription();

public:

    virtual ~ForwardServiceInteractionInd()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new ForwardServiceInteractionInd(*this);
    }

    virtual std::string GetName() const
    { return "ForwardServiceInteractionInd"; }

    void SetConferenceTreatmentIndicator(ConferenceTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetConferenceTreatmentIndicatorStaticDescription());
        AddElement(0, element);
    }

    void SetConferenceTreatmentIndicator(const ConferenceTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<ConferenceTreatmentIndicator&>(element);
        asnObject.SetDescription(GetConferenceTreatmentIndicatorStaticDescription());
        AddElement(0, element);
    }

    bool OptionConferenceTreatmentIndicator() const
    {
        return Contains(0);
    }

    const ConferenceTreatmentIndicator& GetConferenceTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionConferenceTreatmentIndicator());
        return static_cast<const ConferenceTreatmentIndicator&> (ElementAt(0));
    }

    void SetCallDiversionTreatmentIndicator(CallDiversionTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallDiversionTreatmentIndicatorStaticDescription());
        AddElement(1, element);
    }

    void SetCallDiversionTreatmentIndicator(const CallDiversionTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<CallDiversionTreatmentIndicator&>(element);
        asnObject.SetDescription(GetCallDiversionTreatmentIndicatorStaticDescription());
        AddElement(1, element);
    }

    bool OptionCallDiversionTreatmentIndicator() const
    {
        return Contains(1);
    }

    const CallDiversionTreatmentIndicator& GetCallDiversionTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionCallDiversionTreatmentIndicator());
        return static_cast<const CallDiversionTreatmentIndicator&> (ElementAt(1));
    }

    void SetCallCompletionTreatmentIndicator(CallCompletionTreatmentIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallCompletionTreatmentIndicatorStaticDescription());
        AddElement(2, element);
    }

    void SetCallCompletionTreatmentIndicator(const CallCompletionTreatmentIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<CallCompletionTreatmentIndicator&>(element);
        asnObject.SetDescription(GetCallCompletionTreatmentIndicatorStaticDescription());
        AddElement(2, element);
    }

    bool OptionCallCompletionTreatmentIndicator() const
    {
        return Contains(2);
    }

    const CallCompletionTreatmentIndicator& GetCallCompletionTreatmentIndicator() const
    {
        ITS_REQUIRE(OptionCallCompletionTreatmentIndicator());
        return static_cast<const CallCompletionTreatmentIndicator&> (ElementAt(2));
    }

    void SetCallingPartyRestrictionIndicator(CallingPartyRestrictionIndicator* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCallingPartyRestrictionIndicatorStaticDescription());
        AddElement(3, element);
    }

    void SetCallingPartyRestrictionIndicator(const CallingPartyRestrictionIndicator& element)
    {
        its::AsnObject& asnObject = const_cast<CallingPartyRestrictionIndicator&>(element);
        asnObject.SetDescription(GetCallingPartyRestrictionIndicatorStaticDescription());
        AddElement(3, element);
    }

    bool OptionCallingPartyRestrictionIndicator() const
    {
        return Contains(3);
    }

    const CallingPartyRestrictionIndicator& GetCallingPartyRestrictionIndicator() const
    {
        ITS_REQUIRE(OptionCallingPartyRestrictionIndicator());
        return static_cast<const CallingPartyRestrictionIndicator&> (ElementAt(3));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_FORWARD_SERVICE_INTERACTION_IND_H_)

