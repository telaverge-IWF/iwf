//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V2_CELL_ID_OR_LAI_H_)
#define _CAP_V2_CELL_ID_OR_LAI_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnOctetString.h>

#include <cap_v2_cell_id_fixed_length.h>
#include <cap_v2_lai_fixed_length.h>



namespace cap_v2 {



class CellIdOrLAI : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v2::CellIdFixedLength CellIdFixedLength;


        typedef cap_v2::LAIFixedLength LAIFixedLength;


////////// End Nested Class(es) //////////

    CellIdOrLAI() : its::AsnChoice(false)
    {
        Initialize();
    }

    CellIdOrLAI(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    CellIdOrLAI(const CellIdOrLAI& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    CellIdOrLAI(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    CellIdOrLAI(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetCellIdFixedLengthStaticDescription();
    static its::AsnDescObject* GetLaiFixedLengthStaticDescription();

public:

    virtual ~CellIdOrLAI()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CellIdOrLAI(*this);
    }

    virtual std::string GetName() const
    { return "CellIdOrLAI"; }

    void SetChoiceCellIdFixedLength(CellIdFixedLength* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCellIdFixedLengthStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCellIdFixedLength(const CellIdFixedLength& choice)
    {
        its::AsnObject& asnObject = const_cast<CellIdFixedLength&>(choice);
        asnObject.SetDescription(GetCellIdFixedLengthStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCellIdFixedLength() const
    {
        return Contains(GetCellIdFixedLengthStaticDescription()->TagIdentity());
    }

    const CellIdFixedLength& GetChoiceCellIdFixedLength() const
    {
        ITS_REQUIRE(ChoiceCellIdFixedLength());
        return static_cast<const CellIdFixedLength&> (GetChoice());
    }

    void SetChoiceLaiFixedLength(LAIFixedLength* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetLaiFixedLengthStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceLaiFixedLength(const LAIFixedLength& choice)
    {
        its::AsnObject& asnObject = const_cast<LAIFixedLength&>(choice);
        asnObject.SetDescription(GetLaiFixedLengthStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceLaiFixedLength() const
    {
        return Contains(GetLaiFixedLengthStaticDescription()->TagIdentity());
    }

    const LAIFixedLength& GetChoiceLaiFixedLength() const
    {
        ITS_REQUIRE(ChoiceLaiFixedLength());
        return static_cast<const LAIFixedLength&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V2_CELL_ID_OR_LAI_H_)

