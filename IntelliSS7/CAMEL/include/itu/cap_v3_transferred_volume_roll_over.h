//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_TRANSFERRED_VOLUME_ROLL_OVER_H_)
#define _CAP_V3_TRANSFERRED_VOLUME_ROLL_OVER_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnInteger.h>
#include <AsnSequence.h>



namespace cap_v3 {



class TransferredVolumeRollOver : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class RO_VolumeIfNoTariffSwitch : public its::AsnInteger
    {
    public:

        RO_VolumeIfNoTariffSwitch() : its::AsnInteger(false)
        {
            Initialize();
        }

        RO_VolumeIfNoTariffSwitch(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        RO_VolumeIfNoTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        RO_VolumeIfNoTariffSwitch(const RO_VolumeIfNoTariffSwitch& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        RO_VolumeIfNoTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        RO_VolumeIfNoTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~RO_VolumeIfNoTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RO_VolumeIfNoTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "RO_VolumeIfNoTariffSwitch"; }

    };



    class RO_VolumeIfTariffSwitch : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class RO_VolumeSinceLastTariffSwitch : public its::AsnInteger
        {
        public:

            RO_VolumeSinceLastTariffSwitch() : its::AsnInteger(false)
            {
                Initialize();
            }

            RO_VolumeSinceLastTariffSwitch(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            RO_VolumeSinceLastTariffSwitch(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            RO_VolumeSinceLastTariffSwitch(const RO_VolumeSinceLastTariffSwitch& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            RO_VolumeSinceLastTariffSwitch(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            RO_VolumeSinceLastTariffSwitch(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RO_VolumeSinceLastTariffSwitch()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RO_VolumeSinceLastTariffSwitch(*this);
            }

            virtual std::string GetName() const
            { return "RO_VolumeSinceLastTariffSwitch"; }

        };



        class RO_VolumeTariffSwitchInterval : public its::AsnInteger
        {
        public:

            RO_VolumeTariffSwitchInterval() : its::AsnInteger(false)
            {
                Initialize();
            }

            RO_VolumeTariffSwitchInterval(long value) : its::AsnInteger(value, false)
            {
                Initialize();
            }

            RO_VolumeTariffSwitchInterval(its::Octets& octets) : its::AsnInteger(false)
            {
                Initialize();
                Decode(octets);
            }

            RO_VolumeTariffSwitchInterval(const RO_VolumeTariffSwitchInterval& rhs) : its::AsnInteger(rhs)
            {
                // Nothing to do.
            }

            RO_VolumeTariffSwitchInterval(its::AsnDescObject* description) : its::AsnInteger(description)
            {
                // Nothing to do.
            }

            RO_VolumeTariffSwitchInterval(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RO_VolumeTariffSwitchInterval()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RO_VolumeTariffSwitchInterval(*this);
            }

            virtual std::string GetName() const
            { return "RO_VolumeTariffSwitchInterval"; }

        };


    ////////// End Nested Class(es) //////////

        RO_VolumeIfTariffSwitch() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        RO_VolumeIfTariffSwitch(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        RO_VolumeIfTariffSwitch(const RO_VolumeIfTariffSwitch& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        RO_VolumeIfTariffSwitch(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetRO_VolumeSinceLastTariffSwitchStaticDescription();
        static its::AsnDescObject* GetRO_VolumeTariffSwitchIntervalStaticDescription();

    public:

        virtual ~RO_VolumeIfTariffSwitch()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new RO_VolumeIfTariffSwitch(*this);
        }

        virtual std::string GetName() const
        { return "RO_VolumeIfTariffSwitch"; }

        void SetRO_VolumeSinceLastTariffSwitch(RO_VolumeSinceLastTariffSwitch* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRO_VolumeSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        void SetRO_VolumeSinceLastTariffSwitch(const RO_VolumeSinceLastTariffSwitch& element)
        {
            its::AsnObject& asnObject = const_cast<RO_VolumeSinceLastTariffSwitch&>(element);
            asnObject.SetDescription(GetRO_VolumeSinceLastTariffSwitchStaticDescription());
            AddElement(0, element);
        }

        bool OptionRO_VolumeSinceLastTariffSwitch() const
        {
            return Contains(0);
        }

        const RO_VolumeSinceLastTariffSwitch& GetRO_VolumeSinceLastTariffSwitch() const
        {
            ITS_REQUIRE(OptionRO_VolumeSinceLastTariffSwitch());
            return static_cast<const RO_VolumeSinceLastTariffSwitch&> (ElementAt(0));
        }

        void SetRO_VolumeTariffSwitchInterval(RO_VolumeTariffSwitchInterval* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRO_VolumeTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        void SetRO_VolumeTariffSwitchInterval(const RO_VolumeTariffSwitchInterval& element)
        {
            its::AsnObject& asnObject = const_cast<RO_VolumeTariffSwitchInterval&>(element);
            asnObject.SetDescription(GetRO_VolumeTariffSwitchIntervalStaticDescription());
            AddElement(1, element);
        }

        bool OptionRO_VolumeTariffSwitchInterval() const
        {
            return Contains(1);
        }

        const RO_VolumeTariffSwitchInterval& GetRO_VolumeTariffSwitchInterval() const
        {
            ITS_REQUIRE(OptionRO_VolumeTariffSwitchInterval());
            return static_cast<const RO_VolumeTariffSwitchInterval&> (ElementAt(1));
        }

    };


////////// End Nested Class(es) //////////

    TransferredVolumeRollOver() : its::AsnChoice(false)
    {
        Initialize();
    }

    TransferredVolumeRollOver(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    TransferredVolumeRollOver(const TransferredVolumeRollOver& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    TransferredVolumeRollOver(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    TransferredVolumeRollOver(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetRO_VolumeIfNoTariffSwitchStaticDescription();
    static its::AsnDescObject* GetRO_VolumeIfTariffSwitchStaticDescription();

public:

    virtual ~TransferredVolumeRollOver()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new TransferredVolumeRollOver(*this);
    }

    virtual std::string GetName() const
    { return "TransferredVolumeRollOver"; }

    void SetChoiceRO_VolumeIfNoTariffSwitch(RO_VolumeIfNoTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRO_VolumeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRO_VolumeIfNoTariffSwitch(const RO_VolumeIfNoTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<RO_VolumeIfNoTariffSwitch&>(choice);
        asnObject.SetDescription(GetRO_VolumeIfNoTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRO_VolumeIfNoTariffSwitch() const
    {
        return Contains(GetRO_VolumeIfNoTariffSwitchStaticDescription()->TagIdentity());
    }

    const RO_VolumeIfNoTariffSwitch& GetChoiceRO_VolumeIfNoTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceRO_VolumeIfNoTariffSwitch());
        return static_cast<const RO_VolumeIfNoTariffSwitch&> (GetChoice());
    }

    void SetChoiceRO_VolumeIfTariffSwitch(RO_VolumeIfTariffSwitch* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetRO_VolumeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceRO_VolumeIfTariffSwitch(const RO_VolumeIfTariffSwitch& choice)
    {
        its::AsnObject& asnObject = const_cast<RO_VolumeIfTariffSwitch&>(choice);
        asnObject.SetDescription(GetRO_VolumeIfTariffSwitchStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceRO_VolumeIfTariffSwitch() const
    {
        return Contains(GetRO_VolumeIfTariffSwitchStaticDescription()->TagIdentity());
    }

    const RO_VolumeIfTariffSwitch& GetChoiceRO_VolumeIfTariffSwitch() const
    {
        ITS_REQUIRE(ChoiceRO_VolumeIfTariffSwitch());
        return static_cast<const RO_VolumeIfTariffSwitch&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_TRANSFERRED_VOLUME_ROLL_OVER_H_)

