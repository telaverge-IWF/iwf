//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_CAI_GSM0224_H_)
#define _CAP_V3_CAI_GSM0224_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>



namespace cap_v3 {



class CAI_GSM0224 : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class E1 : public its::AsnInteger
    {
    public:

        E1() : its::AsnInteger(false)
        {
            Initialize();
        }

        E1(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E1(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E1(const E1& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E1(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E1(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E1()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E1(*this);
        }

        virtual std::string GetName() const
        { return "E1"; }

    };



    class E2 : public its::AsnInteger
    {
    public:

        E2() : its::AsnInteger(false)
        {
            Initialize();
        }

        E2(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E2(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E2(const E2& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E2(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E2(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E2()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E2(*this);
        }

        virtual std::string GetName() const
        { return "E2"; }

    };



    class E3 : public its::AsnInteger
    {
    public:

        E3() : its::AsnInteger(false)
        {
            Initialize();
        }

        E3(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E3(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E3(const E3& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E3(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E3(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E3()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E3(*this);
        }

        virtual std::string GetName() const
        { return "E3"; }

    };



    class E4 : public its::AsnInteger
    {
    public:

        E4() : its::AsnInteger(false)
        {
            Initialize();
        }

        E4(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E4(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E4(const E4& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E4(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E4(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E4()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E4(*this);
        }

        virtual std::string GetName() const
        { return "E4"; }

    };



    class E5 : public its::AsnInteger
    {
    public:

        E5() : its::AsnInteger(false)
        {
            Initialize();
        }

        E5(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E5(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E5(const E5& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E5(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E5(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E5()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E5(*this);
        }

        virtual std::string GetName() const
        { return "E5"; }

    };



    class E6 : public its::AsnInteger
    {
    public:

        E6() : its::AsnInteger(false)
        {
            Initialize();
        }

        E6(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E6(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E6(const E6& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E6(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E6(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E6()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E6(*this);
        }

        virtual std::string GetName() const
        { return "E6"; }

    };



    class E7 : public its::AsnInteger
    {
    public:

        E7() : its::AsnInteger(false)
        {
            Initialize();
        }

        E7(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        E7(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        E7(const E7& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        E7(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        E7(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~E7()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new E7(*this);
        }

        virtual std::string GetName() const
        { return "E7"; }

    };


////////// End Nested Class(es) //////////

    CAI_GSM0224() : its::AsnSequence(7, false)
    {
        Initialize();
    }

    CAI_GSM0224(its::Octets& octets) : its::AsnSequence(7, false)
    {
        Initialize();
        Decode(octets);
    }

    CAI_GSM0224(const CAI_GSM0224& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CAI_GSM0224(its::AsnDescObject* description) : its::AsnSequence(7, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetE1StaticDescription();
    static its::AsnDescObject* GetE2StaticDescription();
    static its::AsnDescObject* GetE3StaticDescription();
    static its::AsnDescObject* GetE4StaticDescription();
    static its::AsnDescObject* GetE5StaticDescription();
    static its::AsnDescObject* GetE6StaticDescription();
    static its::AsnDescObject* GetE7StaticDescription();

public:

    virtual ~CAI_GSM0224()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CAI_GSM0224(*this);
    }

    virtual std::string GetName() const
    { return "CAI_GSM0224"; }

    void SetE1(E1* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE1StaticDescription());
        AddElement(0, element);
    }

    void SetE1(const E1& element)
    {
        its::AsnObject& asnObject = const_cast<E1&>(element);
        asnObject.SetDescription(GetE1StaticDescription());
        AddElement(0, element);
    }

    bool OptionE1() const
    {
        return Contains(0);
    }

    const E1& GetE1() const
    {
        ITS_REQUIRE(OptionE1());
        return static_cast<const E1&> (ElementAt(0));
    }

    void SetE2(E2* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE2StaticDescription());
        AddElement(1, element);
    }

    void SetE2(const E2& element)
    {
        its::AsnObject& asnObject = const_cast<E2&>(element);
        asnObject.SetDescription(GetE2StaticDescription());
        AddElement(1, element);
    }

    bool OptionE2() const
    {
        return Contains(1);
    }

    const E2& GetE2() const
    {
        ITS_REQUIRE(OptionE2());
        return static_cast<const E2&> (ElementAt(1));
    }

    void SetE3(E3* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE3StaticDescription());
        AddElement(2, element);
    }

    void SetE3(const E3& element)
    {
        its::AsnObject& asnObject = const_cast<E3&>(element);
        asnObject.SetDescription(GetE3StaticDescription());
        AddElement(2, element);
    }

    bool OptionE3() const
    {
        return Contains(2);
    }

    const E3& GetE3() const
    {
        ITS_REQUIRE(OptionE3());
        return static_cast<const E3&> (ElementAt(2));
    }

    void SetE4(E4* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE4StaticDescription());
        AddElement(3, element);
    }

    void SetE4(const E4& element)
    {
        its::AsnObject& asnObject = const_cast<E4&>(element);
        asnObject.SetDescription(GetE4StaticDescription());
        AddElement(3, element);
    }

    bool OptionE4() const
    {
        return Contains(3);
    }

    const E4& GetE4() const
    {
        ITS_REQUIRE(OptionE4());
        return static_cast<const E4&> (ElementAt(3));
    }

    void SetE5(E5* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE5StaticDescription());
        AddElement(4, element);
    }

    void SetE5(const E5& element)
    {
        its::AsnObject& asnObject = const_cast<E5&>(element);
        asnObject.SetDescription(GetE5StaticDescription());
        AddElement(4, element);
    }

    bool OptionE5() const
    {
        return Contains(4);
    }

    const E5& GetE5() const
    {
        ITS_REQUIRE(OptionE5());
        return static_cast<const E5&> (ElementAt(4));
    }

    void SetE6(E6* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE6StaticDescription());
        AddElement(5, element);
    }

    void SetE6(const E6& element)
    {
        its::AsnObject& asnObject = const_cast<E6&>(element);
        asnObject.SetDescription(GetE6StaticDescription());
        AddElement(5, element);
    }

    bool OptionE6() const
    {
        return Contains(5);
    }

    const E6& GetE6() const
    {
        ITS_REQUIRE(OptionE6());
        return static_cast<const E6&> (ElementAt(5));
    }

    void SetE7(E7* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetE7StaticDescription());
        AddElement(6, element);
    }

    void SetE7(const E7& element)
    {
        its::AsnObject& asnObject = const_cast<E7&>(element);
        asnObject.SetDescription(GetE7StaticDescription());
        AddElement(6, element);
    }

    bool OptionE7() const
    {
        return Contains(6);
    }

    const E7& GetE7() const
    {
        ITS_REQUIRE(OptionE7());
        return static_cast<const E7&> (ElementAt(6));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_CAI_GSM0224_H_)

