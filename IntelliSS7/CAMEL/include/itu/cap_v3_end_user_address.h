//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_END_USER_ADDRESS_H_)
#define _CAP_V3_END_USER_ADDRESS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnOctetString.h>



namespace cap_v3 {



class EndUserAddress : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class PDPTypeOrganization : public its::AsnOctetString
    {
    public:

        PDPTypeOrganization() : its::AsnOctetString(false)
        {
            Initialize();
        }

        PDPTypeOrganization(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        PDPTypeOrganization(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        PDPTypeOrganization(const PDPTypeOrganization& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        PDPTypeOrganization(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        PDPTypeOrganization(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~PDPTypeOrganization()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PDPTypeOrganization(*this);
        }

        virtual std::string GetName() const
        { return "PDPTypeOrganization"; }

    };



    class PDPTypeNumber : public its::AsnOctetString
    {
    public:

        PDPTypeNumber() : its::AsnOctetString(false)
        {
            Initialize();
        }

        PDPTypeNumber(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        PDPTypeNumber(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        PDPTypeNumber(const PDPTypeNumber& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        PDPTypeNumber(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        PDPTypeNumber(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~PDPTypeNumber()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PDPTypeNumber(*this);
        }

        virtual std::string GetName() const
        { return "PDPTypeNumber"; }

    };



    class PDPAddress : public its::AsnOctetString
    {
    public:

        PDPAddress() : its::AsnOctetString(false)
        {
            Initialize();
        }

        PDPAddress(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        PDPAddress(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        PDPAddress(const PDPAddress& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        PDPAddress(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        PDPAddress(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~PDPAddress()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PDPAddress(*this);
        }

        virtual std::string GetName() const
        { return "PDPAddress"; }

    };


////////// End Nested Class(es) //////////

    EndUserAddress() : its::AsnSequence(3, false)
    {
        Initialize();
    }

    EndUserAddress(its::Octets& octets) : its::AsnSequence(3, false)
    {
        Initialize();
        Decode(octets);
    }

    EndUserAddress(const EndUserAddress& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    EndUserAddress(its::AsnDescObject* description) : its::AsnSequence(3, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetPDPTypeOrganizationStaticDescription();
    static its::AsnDescObject* GetPDPTypeNumberStaticDescription();
    static its::AsnDescObject* GetPDPAddressStaticDescription();

public:

    virtual ~EndUserAddress()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new EndUserAddress(*this);
    }

    virtual std::string GetName() const
    { return "EndUserAddress"; }

    void SetPDPTypeOrganization(PDPTypeOrganization* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPTypeOrganizationStaticDescription());
        AddElement(0, element);
    }

    void SetPDPTypeOrganization(const PDPTypeOrganization& element)
    {
        its::AsnObject& asnObject = const_cast<PDPTypeOrganization&>(element);
        asnObject.SetDescription(GetPDPTypeOrganizationStaticDescription());
        AddElement(0, element);
    }

    const PDPTypeOrganization& GetPDPTypeOrganization() const
    {
        return static_cast<const PDPTypeOrganization&> (ElementAt(0));
    }

    void SetPDPTypeNumber(PDPTypeNumber* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPTypeNumberStaticDescription());
        AddElement(1, element);
    }

    void SetPDPTypeNumber(const PDPTypeNumber& element)
    {
        its::AsnObject& asnObject = const_cast<PDPTypeNumber&>(element);
        asnObject.SetDescription(GetPDPTypeNumberStaticDescription());
        AddElement(1, element);
    }

    const PDPTypeNumber& GetPDPTypeNumber() const
    {
        return static_cast<const PDPTypeNumber&> (ElementAt(1));
    }

    void SetPDPAddress(PDPAddress* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetPDPAddressStaticDescription());
        AddElement(2, element);
    }

    void SetPDPAddress(const PDPAddress& element)
    {
        its::AsnObject& asnObject = const_cast<PDPAddress&>(element);
        asnObject.SetDescription(GetPDPAddressStaticDescription());
        AddElement(2, element);
    }

    bool OptionPDPAddress() const
    {
        return Contains(2);
    }

    const PDPAddress& GetPDPAddress() const
    {
        ITS_REQUIRE(OptionPDPAddress());
        return static_cast<const PDPAddress&> (ElementAt(2));
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_END_USER_ADDRESS_H_)

