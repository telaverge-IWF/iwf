//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V2_SUBSCRIBER_STATE_H_)
#define _CAP_V2_SUBSCRIBER_STATE_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>

#include <cap_v2_not_reachable_reason.h>



namespace cap_v2 {



class SubscriberState : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AssumedIdle : public its::AsnNull
    {
    public:

        AssumedIdle() : its::AsnNull(false)
        {
            Initialize();
        }

        AssumedIdle(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        AssumedIdle(const AssumedIdle& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        AssumedIdle(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~AssumedIdle()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AssumedIdle(*this);
        }

        virtual std::string GetName() const
        { return "AssumedIdle"; }

    };



    class CamelBusy : public its::AsnNull
    {
    public:

        CamelBusy() : its::AsnNull(false)
        {
            Initialize();
        }

        CamelBusy(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        CamelBusy(const CamelBusy& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        CamelBusy(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CamelBusy()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CamelBusy(*this);
        }

        virtual std::string GetName() const
        { return "CamelBusy"; }

    };



    class NotProvidedFromVLR : public its::AsnNull
    {
    public:

        NotProvidedFromVLR() : its::AsnNull(false)
        {
            Initialize();
        }

        NotProvidedFromVLR(its::Octets& octets) : its::AsnNull(false)
        {
            Initialize();
            Decode(octets);
        }

        NotProvidedFromVLR(const NotProvidedFromVLR& rhs) : its::AsnNull(rhs)
        {
            // Nothing to do.
        }

        NotProvidedFromVLR(its::AsnDescObject* description) : its::AsnNull(description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~NotProvidedFromVLR()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new NotProvidedFromVLR(*this);
        }

        virtual std::string GetName() const
        { return "NotProvidedFromVLR"; }

    };


        typedef cap_v2::NotReachableReason NotReachableReason;


////////// End Nested Class(es) //////////

    SubscriberState() : its::AsnChoice(false)
    {
        Initialize();
    }

    SubscriberState(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    SubscriberState(const SubscriberState& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    SubscriberState(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    SubscriberState(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAssumedIdleStaticDescription();
    static its::AsnDescObject* GetCamelBusyStaticDescription();
    static its::AsnDescObject* GetNetDetNotReachableStaticDescription();
    static its::AsnDescObject* GetNotProvidedFromVLRStaticDescription();

public:

    virtual ~SubscriberState()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new SubscriberState(*this);
    }

    virtual std::string GetName() const
    { return "SubscriberState"; }

    void SetChoiceAssumedIdle(AssumedIdle* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAssumedIdleStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAssumedIdle(const AssumedIdle& choice)
    {
        its::AsnObject& asnObject = const_cast<AssumedIdle&>(choice);
        asnObject.SetDescription(GetAssumedIdleStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAssumedIdle() const
    {
        return Contains(GetAssumedIdleStaticDescription()->TagIdentity());
    }

    const AssumedIdle& GetChoiceAssumedIdle() const
    {
        ITS_REQUIRE(ChoiceAssumedIdle());
        return static_cast<const AssumedIdle&> (GetChoice());
    }

    void SetChoiceCamelBusy(CamelBusy* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetCamelBusyStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceCamelBusy(const CamelBusy& choice)
    {
        its::AsnObject& asnObject = const_cast<CamelBusy&>(choice);
        asnObject.SetDescription(GetCamelBusyStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceCamelBusy() const
    {
        return Contains(GetCamelBusyStaticDescription()->TagIdentity());
    }

    const CamelBusy& GetChoiceCamelBusy() const
    {
        ITS_REQUIRE(ChoiceCamelBusy());
        return static_cast<const CamelBusy&> (GetChoice());
    }

    void SetChoiceNetDetNotReachable(NotReachableReason* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNetDetNotReachableStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNetDetNotReachable(const NotReachableReason& choice)
    {
        its::AsnObject& asnObject = const_cast<NotReachableReason&>(choice);
        asnObject.SetDescription(GetNetDetNotReachableStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNetDetNotReachable() const
    {
        return Contains(GetNetDetNotReachableStaticDescription()->TagIdentity());
    }

    const NotReachableReason& GetChoiceNetDetNotReachable() const
    {
        ITS_REQUIRE(ChoiceNetDetNotReachable());
        return static_cast<const NotReachableReason&> (GetChoice());
    }

    void SetChoiceNotProvidedFromVLR(NotProvidedFromVLR* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetNotProvidedFromVLRStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceNotProvidedFromVLR(const NotProvidedFromVLR& choice)
    {
        its::AsnObject& asnObject = const_cast<NotProvidedFromVLR&>(choice);
        asnObject.SetDescription(GetNotProvidedFromVLRStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceNotProvidedFromVLR() const
    {
        return Contains(GetNotProvidedFromVLRStaticDescription()->TagIdentity());
    }

    const NotProvidedFromVLR& GetChoiceNotProvidedFromVLR() const
    {
        ITS_REQUIRE(ChoiceNotProvidedFromVLR());
        return static_cast<const NotProvidedFromVLR&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V2_SUBSCRIBER_STATE_H_)

