//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_INFORMATION_TO_SEND_H_)
#define _CAP_V3_INFORMATION_TO_SEND_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>

#include <cap_v3_inband_info.h>
#include <cap_v3_tone.h>



namespace cap_v3 {



class InformationToSend : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////


        typedef cap_v3::InbandInfo InbandInfo;


        typedef cap_v3::Tone Tone;


////////// End Nested Class(es) //////////

    InformationToSend() : its::AsnChoice(false)
    {
        Initialize();
    }

    InformationToSend(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    InformationToSend(const InformationToSend& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    InformationToSend(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    InformationToSend(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetInbandInfoStaticDescription();
    static its::AsnDescObject* GetToneStaticDescription();

public:

    virtual ~InformationToSend()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new InformationToSend(*this);
    }

    virtual std::string GetName() const
    { return "InformationToSend"; }

    void SetChoiceInbandInfo(InbandInfo* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetInbandInfoStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceInbandInfo(const InbandInfo& choice)
    {
        its::AsnObject& asnObject = const_cast<InbandInfo&>(choice);
        asnObject.SetDescription(GetInbandInfoStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceInbandInfo() const
    {
        return Contains(GetInbandInfoStaticDescription()->TagIdentity());
    }

    const InbandInfo& GetChoiceInbandInfo() const
    {
        ITS_REQUIRE(ChoiceInbandInfo());
        return static_cast<const InbandInfo&> (GetChoice());
    }

    void SetChoiceTone(Tone* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetToneStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceTone(const Tone& choice)
    {
        its::AsnObject& asnObject = const_cast<Tone&>(choice);
        asnObject.SetDescription(GetToneStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceTone() const
    {
        return Contains(GetToneStaticDescription()->TagIdentity());
    }

    const Tone& GetChoiceTone() const
    {
        ITS_REQUIRE(ChoiceTone());
        return static_cast<const Tone&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_INFORMATION_TO_SEND_H_)

