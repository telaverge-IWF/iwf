//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V2_COLLECTED_DIGITS_H_)
#define _CAP_V2_COLLECTED_DIGITS_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnSequence.h>
#include <AsnInteger.h>
#include <AsnOctetString.h>
#include <AsnBoolean.h>
#include <AsnEnumerated.h>

#include <cap_v2_error_treatment.h>



namespace cap_v2 {



class CollectedDigits : public its::AsnSequence
{
public:


////////// Begin Nested Class(es) //////////



    class MinimumNbOfDigits : public its::AsnInteger
    {
    public:

        MinimumNbOfDigits() : its::AsnInteger(false)
        {
            Initialize();
        }

        MinimumNbOfDigits(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MinimumNbOfDigits(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MinimumNbOfDigits(const MinimumNbOfDigits& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MinimumNbOfDigits(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MinimumNbOfDigits(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MinimumNbOfDigits()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MinimumNbOfDigits(*this);
        }

        virtual std::string GetName() const
        { return "MinimumNbOfDigits"; }

    };



    class MaximumNbOfDigits : public its::AsnInteger
    {
    public:

        MaximumNbOfDigits() : its::AsnInteger(false)
        {
            Initialize();
        }

        MaximumNbOfDigits(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        MaximumNbOfDigits(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        MaximumNbOfDigits(const MaximumNbOfDigits& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        MaximumNbOfDigits(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        MaximumNbOfDigits(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~MaximumNbOfDigits()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new MaximumNbOfDigits(*this);
        }

        virtual std::string GetName() const
        { return "MaximumNbOfDigits"; }

    };



    class EndOfReplyDigit : public its::AsnOctetString
    {
    public:

        EndOfReplyDigit() : its::AsnOctetString(false)
        {
            Initialize();
        }

        EndOfReplyDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        EndOfReplyDigit(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        EndOfReplyDigit(const EndOfReplyDigit& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        EndOfReplyDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        EndOfReplyDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~EndOfReplyDigit()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new EndOfReplyDigit(*this);
        }

        virtual std::string GetName() const
        { return "EndOfReplyDigit"; }

    };



    class CancelDigit : public its::AsnOctetString
    {
    public:

        CancelDigit() : its::AsnOctetString(false)
        {
            Initialize();
        }

        CancelDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        CancelDigit(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        CancelDigit(const CancelDigit& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        CancelDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        CancelDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~CancelDigit()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new CancelDigit(*this);
        }

        virtual std::string GetName() const
        { return "CancelDigit"; }

    };



    class StartDigit : public its::AsnOctetString
    {
    public:

        StartDigit() : its::AsnOctetString(false)
        {
            Initialize();
        }

        StartDigit(const std::vector<byte>& array) : its::AsnOctetString(array, false)
        {
            Initialize();
        }

        StartDigit(its::Octets& octets) : its::AsnOctetString(false)
        {
            Initialize();
            Decode(octets);
        }

        StartDigit(const StartDigit& rhs) : its::AsnOctetString(rhs)
        {
            // Nothing to do.
        }

        StartDigit(its::AsnDescObject* description) : its::AsnOctetString(description)
        {
            // Nothing to do.
        }

        StartDigit(its::AsnDescObject* description, const std::vector<byte>& array) : its::AsnOctetString(description, array)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~StartDigit()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new StartDigit(*this);
        }

        virtual std::string GetName() const
        { return "StartDigit"; }

    };



    class FirstDigitTimeOut : public its::AsnInteger
    {
    public:

        FirstDigitTimeOut() : its::AsnInteger(false)
        {
            Initialize();
        }

        FirstDigitTimeOut(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        FirstDigitTimeOut(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        FirstDigitTimeOut(const FirstDigitTimeOut& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        FirstDigitTimeOut(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        FirstDigitTimeOut(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~FirstDigitTimeOut()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new FirstDigitTimeOut(*this);
        }

        virtual std::string GetName() const
        { return "FirstDigitTimeOut"; }

    };



    class InterDigitTimeOut : public its::AsnInteger
    {
    public:

        InterDigitTimeOut() : its::AsnInteger(false)
        {
            Initialize();
        }

        InterDigitTimeOut(long value) : its::AsnInteger(value, false)
        {
            Initialize();
        }

        InterDigitTimeOut(its::Octets& octets) : its::AsnInteger(false)
        {
            Initialize();
            Decode(octets);
        }

        InterDigitTimeOut(const InterDigitTimeOut& rhs) : its::AsnInteger(rhs)
        {
            // Nothing to do.
        }

        InterDigitTimeOut(its::AsnDescObject* description) : its::AsnInteger(description)
        {
            // Nothing to do.
        }

        InterDigitTimeOut(its::AsnDescObject* description, long value) : its::AsnInteger(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InterDigitTimeOut()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InterDigitTimeOut(*this);
        }

        virtual std::string GetName() const
        { return "InterDigitTimeOut"; }

    };



    class InterruptableAnnInd : public its::AsnBoolean
    {
    public:

        InterruptableAnnInd(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        InterruptableAnnInd(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        InterruptableAnnInd(const InterruptableAnnInd& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        InterruptableAnnInd(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        InterruptableAnnInd(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~InterruptableAnnInd()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new InterruptableAnnInd(*this);
        }

        virtual std::string GetName() const
        { return "InterruptableAnnInd"; }

    };



    class VoiceInformation : public its::AsnBoolean
    {
    public:

        VoiceInformation(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        VoiceInformation(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        VoiceInformation(const VoiceInformation& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        VoiceInformation(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        VoiceInformation(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VoiceInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VoiceInformation(*this);
        }

        virtual std::string GetName() const
        { return "VoiceInformation"; }

    };



    class VoiceBack : public its::AsnBoolean
    {
    public:

        VoiceBack(bool value) : its::AsnBoolean(value, false)
        {
            Initialize();
        }

        VoiceBack(its::Octets& octets) : its::AsnBoolean(false, false)
        {
            Initialize();
            Decode(octets);
        }

        VoiceBack(const VoiceBack& rhs) : its::AsnBoolean(rhs)
        {
            // Nothing to do.
        }

        VoiceBack(its::AsnDescObject* description) : its::AsnBoolean(description)
        {
            // Nothing to do.
        }

        VoiceBack(its::AsnDescObject* description, bool value) : its::AsnBoolean(description, value)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

    public:

        virtual ~VoiceBack()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new VoiceBack(*this);
        }

        virtual std::string GetName() const
        { return "VoiceBack"; }

    };


        typedef cap_v2::ErrorTreatment ErrorTreatment;


////////// End Nested Class(es) //////////

    CollectedDigits() : its::AsnSequence(11, false)
    {
        Initialize();
    }

    CollectedDigits(its::Octets& octets) : its::AsnSequence(11, false)
    {
        Initialize();
        Decode(octets);
    }

    CollectedDigits(const CollectedDigits& rhs) : its::AsnSequence(rhs)
    {
        // Nothing to do.
    }

    CollectedDigits(its::AsnDescObject* description) : its::AsnSequence(11, description)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetMinimumNbOfDigitsStaticDescription();
    static its::AsnDescObject* GetMaximumNbOfDigitsStaticDescription();
    static its::AsnDescObject* GetEndOfReplyDigitStaticDescription();
    static its::AsnDescObject* GetCancelDigitStaticDescription();
    static its::AsnDescObject* GetStartDigitStaticDescription();
    static its::AsnDescObject* GetFirstDigitTimeOutStaticDescription();
    static its::AsnDescObject* GetInterDigitTimeOutStaticDescription();
    static its::AsnDescObject* GetErrorTreatmentStaticDescription();
    static its::AsnDescObject* GetInterruptableAnnIndStaticDescription();
    static its::AsnDescObject* GetVoiceInformationStaticDescription();
    static its::AsnDescObject* GetVoiceBackStaticDescription();

public:

    virtual ~CollectedDigits()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new CollectedDigits(*this);
    }

    virtual std::string GetName() const
    { return "CollectedDigits"; }

    void SetMinimumNbOfDigits(MinimumNbOfDigits* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMinimumNbOfDigitsStaticDescription());
        AddElement(0, element);
    }

    void SetMinimumNbOfDigits(const MinimumNbOfDigits& element)
    {
        its::AsnObject& asnObject = const_cast<MinimumNbOfDigits&>(element);
        asnObject.SetDescription(GetMinimumNbOfDigitsStaticDescription());
        AddElement(0, element);
    }

    const MinimumNbOfDigits& GetMinimumNbOfDigits() const
    {
        return static_cast<const MinimumNbOfDigits&> (ElementAt(0));
    }

    void SetMaximumNbOfDigits(MaximumNbOfDigits* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetMaximumNbOfDigitsStaticDescription());
        AddElement(1, element);
    }

    void SetMaximumNbOfDigits(const MaximumNbOfDigits& element)
    {
        its::AsnObject& asnObject = const_cast<MaximumNbOfDigits&>(element);
        asnObject.SetDescription(GetMaximumNbOfDigitsStaticDescription());
        AddElement(1, element);
    }

    const MaximumNbOfDigits& GetMaximumNbOfDigits() const
    {
        return static_cast<const MaximumNbOfDigits&> (ElementAt(1));
    }

    void SetEndOfReplyDigit(EndOfReplyDigit* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetEndOfReplyDigitStaticDescription());
        AddElement(2, element);
    }

    void SetEndOfReplyDigit(const EndOfReplyDigit& element)
    {
        its::AsnObject& asnObject = const_cast<EndOfReplyDigit&>(element);
        asnObject.SetDescription(GetEndOfReplyDigitStaticDescription());
        AddElement(2, element);
    }

    bool OptionEndOfReplyDigit() const
    {
        return Contains(2);
    }

    const EndOfReplyDigit& GetEndOfReplyDigit() const
    {
        ITS_REQUIRE(OptionEndOfReplyDigit());
        return static_cast<const EndOfReplyDigit&> (ElementAt(2));
    }

    void SetCancelDigit(CancelDigit* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetCancelDigitStaticDescription());
        AddElement(3, element);
    }

    void SetCancelDigit(const CancelDigit& element)
    {
        its::AsnObject& asnObject = const_cast<CancelDigit&>(element);
        asnObject.SetDescription(GetCancelDigitStaticDescription());
        AddElement(3, element);
    }

    bool OptionCancelDigit() const
    {
        return Contains(3);
    }

    const CancelDigit& GetCancelDigit() const
    {
        ITS_REQUIRE(OptionCancelDigit());
        return static_cast<const CancelDigit&> (ElementAt(3));
    }

    void SetStartDigit(StartDigit* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetStartDigitStaticDescription());
        AddElement(4, element);
    }

    void SetStartDigit(const StartDigit& element)
    {
        its::AsnObject& asnObject = const_cast<StartDigit&>(element);
        asnObject.SetDescription(GetStartDigitStaticDescription());
        AddElement(4, element);
    }

    bool OptionStartDigit() const
    {
        return Contains(4);
    }

    const StartDigit& GetStartDigit() const
    {
        ITS_REQUIRE(OptionStartDigit());
        return static_cast<const StartDigit&> (ElementAt(4));
    }

    void SetFirstDigitTimeOut(FirstDigitTimeOut* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetFirstDigitTimeOutStaticDescription());
        AddElement(5, element);
    }

    void SetFirstDigitTimeOut(const FirstDigitTimeOut& element)
    {
        its::AsnObject& asnObject = const_cast<FirstDigitTimeOut&>(element);
        asnObject.SetDescription(GetFirstDigitTimeOutStaticDescription());
        AddElement(5, element);
    }

    bool OptionFirstDigitTimeOut() const
    {
        return Contains(5);
    }

    const FirstDigitTimeOut& GetFirstDigitTimeOut() const
    {
        ITS_REQUIRE(OptionFirstDigitTimeOut());
        return static_cast<const FirstDigitTimeOut&> (ElementAt(5));
    }

    void SetInterDigitTimeOut(InterDigitTimeOut* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInterDigitTimeOutStaticDescription());
        AddElement(6, element);
    }

    void SetInterDigitTimeOut(const InterDigitTimeOut& element)
    {
        its::AsnObject& asnObject = const_cast<InterDigitTimeOut&>(element);
        asnObject.SetDescription(GetInterDigitTimeOutStaticDescription());
        AddElement(6, element);
    }

    bool OptionInterDigitTimeOut() const
    {
        return Contains(6);
    }

    const InterDigitTimeOut& GetInterDigitTimeOut() const
    {
        ITS_REQUIRE(OptionInterDigitTimeOut());
        return static_cast<const InterDigitTimeOut&> (ElementAt(6));
    }

    void SetErrorTreatment(ErrorTreatment* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetErrorTreatmentStaticDescription());
        AddElement(7, element);
    }

    void SetErrorTreatment(const ErrorTreatment& element)
    {
        its::AsnObject& asnObject = const_cast<ErrorTreatment&>(element);
        asnObject.SetDescription(GetErrorTreatmentStaticDescription());
        AddElement(7, element);
    }

    const ErrorTreatment& GetErrorTreatment() const
    {
        return static_cast<const ErrorTreatment&> (ElementAt(7));
    }

    void SetInterruptableAnnInd(InterruptableAnnInd* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetInterruptableAnnIndStaticDescription());
        AddElement(8, element);
    }

    void SetInterruptableAnnInd(const InterruptableAnnInd& element)
    {
        its::AsnObject& asnObject = const_cast<InterruptableAnnInd&>(element);
        asnObject.SetDescription(GetInterruptableAnnIndStaticDescription());
        AddElement(8, element);
    }

    const InterruptableAnnInd& GetInterruptableAnnInd() const
    {
        return static_cast<const InterruptableAnnInd&> (ElementAt(8));
    }

    void SetVoiceInformation(VoiceInformation* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVoiceInformationStaticDescription());
        AddElement(9, element);
    }

    void SetVoiceInformation(const VoiceInformation& element)
    {
        its::AsnObject& asnObject = const_cast<VoiceInformation&>(element);
        asnObject.SetDescription(GetVoiceInformationStaticDescription());
        AddElement(9, element);
    }

    const VoiceInformation& GetVoiceInformation() const
    {
        return static_cast<const VoiceInformation&> (ElementAt(9));
    }

    void SetVoiceBack(VoiceBack* element)
    {
        ITS_REQUIRE(element != NULL);
        element->AsnObject::SetDescription(GetVoiceBackStaticDescription());
        AddElement(10, element);
    }

    void SetVoiceBack(const VoiceBack& element)
    {
        its::AsnObject& asnObject = const_cast<VoiceBack&>(element);
        asnObject.SetDescription(GetVoiceBackStaticDescription());
        AddElement(10, element);
    }

    const VoiceBack& GetVoiceBack() const
    {
        return static_cast<const VoiceBack&> (ElementAt(10));
    }

};



} // namespace.

#endif    // !defined(_CAP_V2_COLLECTED_DIGITS_H_)

