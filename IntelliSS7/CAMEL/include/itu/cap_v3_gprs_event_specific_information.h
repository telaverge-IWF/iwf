//
// Generated by IntelliAsnCC ASN.1 compiler (C, C++, Java).
//
// Do not edit!
//
//
//
// (C) 2000, 2001 IntelliNet Technologies Inc. All Rights Reserved.
//
//


#if !defined(_CAP_V3_GPRS_EVENT_SPECIFIC_INFORMATION_H_)
#define _CAP_V3_GPRS_EVENT_SPECIFIC_INFORMATION_H_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include <Asn.h>
#include <AsnObject.h>
#include <AsnDescObject.h>
#include <AsnError.h>

#include <AsnChoice.h>
#include <AsnSequence.h>
#include <AsnOctetString.h>
#include <AsnNull.h>
#include <AsnEnumerated.h>

#include <cap_v3_location_information_gprs.h>
#include <cap_v3_access_point_name.h>
#include <cap_v3_gprs_charging_id.h>
#include <cap_v3_end_user_address.h>
#include <cap_v3_quality_of_service.h>
#include <cap_v3_time_and_timezone.h>
#include <cap_v3_gsn_address.h>
#include <cap_v3_initiating_entity.h>
#include <cap_v3_pdp_initiation_type.h>



namespace cap_v3 {



class GPRSEventSpecificInformation : public its::AsnChoice
{
public:


////////// Begin Nested Class(es) //////////



    class AttachChangeOfPositionSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::LocationInformationGPRS LocationInformationGPRS;


    ////////// End Nested Class(es) //////////

        AttachChangeOfPositionSpecificInformation() : its::AsnSequence(1, false)
        {
            Initialize();
        }

        AttachChangeOfPositionSpecificInformation(its::Octets& octets) : its::AsnSequence(1, false)
        {
            Initialize();
            Decode(octets);
        }

        AttachChangeOfPositionSpecificInformation(const AttachChangeOfPositionSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        AttachChangeOfPositionSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(1, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetLocationInformationGPRSStaticDescription();

    public:

        virtual ~AttachChangeOfPositionSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new AttachChangeOfPositionSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "AttachChangeOfPositionSpecificInformation"; }

        void SetLocationInformationGPRS(LocationInformationGPRS* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(0, element);
        }

        void SetLocationInformationGPRS(const LocationInformationGPRS& element)
        {
            its::AsnObject& asnObject = const_cast<LocationInformationGPRS&>(element);
            asnObject.SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(0, element);
        }

        bool OptionLocationInformationGPRS() const
        {
            return Contains(0);
        }

        const LocationInformationGPRS& GetLocationInformationGPRS() const
        {
            ITS_REQUIRE(OptionLocationInformationGPRS());
            return static_cast<const LocationInformationGPRS&> (ElementAt(0));
        }

    };



    class Pdp_ContextchangeOfPositionSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::AccessPointName AccessPointName;


            typedef cap_v3::GPRSChargingID GPRSChargingID;


            typedef cap_v3::LocationInformationGPRS LocationInformationGPRS;


            typedef cap_v3::EndUserAddress EndUserAddress;


            typedef cap_v3::QualityOfService QualityOfService;


            typedef cap_v3::TimeAndTimezone TimeAndTimezone;


            typedef cap_v3::GSN_Address GSN_Address;


    ////////// End Nested Class(es) //////////

        Pdp_ContextchangeOfPositionSpecificInformation() : its::AsnSequence(7, false)
        {
            Initialize();
        }

        Pdp_ContextchangeOfPositionSpecificInformation(its::Octets& octets) : its::AsnSequence(7, false)
        {
            Initialize();
            Decode(octets);
        }

        Pdp_ContextchangeOfPositionSpecificInformation(const Pdp_ContextchangeOfPositionSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        Pdp_ContextchangeOfPositionSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(7, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAccessPointNameStaticDescription();
        static its::AsnDescObject* GetChargingIDStaticDescription();
        static its::AsnDescObject* GetLocationInformationGPRSStaticDescription();
        static its::AsnDescObject* GetEndUserAddressStaticDescription();
        static its::AsnDescObject* GetQualityOfServiceStaticDescription();
        static its::AsnDescObject* GetTimeAndTimeZoneStaticDescription();
        static its::AsnDescObject* GetGGSNAddressStaticDescription();

    public:

        virtual ~Pdp_ContextchangeOfPositionSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new Pdp_ContextchangeOfPositionSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "Pdp_ContextchangeOfPositionSpecificInformation"; }

        void SetAccessPointName(AccessPointName* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        void SetAccessPointName(const AccessPointName& element)
        {
            its::AsnObject& asnObject = const_cast<AccessPointName&>(element);
            asnObject.SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        bool OptionAccessPointName() const
        {
            return Contains(0);
        }

        const AccessPointName& GetAccessPointName() const
        {
            ITS_REQUIRE(OptionAccessPointName());
            return static_cast<const AccessPointName&> (ElementAt(0));
        }

        void SetChargingID(GPRSChargingID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetChargingIDStaticDescription());
            AddElement(1, element);
        }

        void SetChargingID(const GPRSChargingID& element)
        {
            its::AsnObject& asnObject = const_cast<GPRSChargingID&>(element);
            asnObject.SetDescription(GetChargingIDStaticDescription());
            AddElement(1, element);
        }

        bool OptionChargingID() const
        {
            return Contains(1);
        }

        const GPRSChargingID& GetChargingID() const
        {
            ITS_REQUIRE(OptionChargingID());
            return static_cast<const GPRSChargingID&> (ElementAt(1));
        }

        void SetLocationInformationGPRS(LocationInformationGPRS* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(2, element);
        }

        void SetLocationInformationGPRS(const LocationInformationGPRS& element)
        {
            its::AsnObject& asnObject = const_cast<LocationInformationGPRS&>(element);
            asnObject.SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(2, element);
        }

        bool OptionLocationInformationGPRS() const
        {
            return Contains(2);
        }

        const LocationInformationGPRS& GetLocationInformationGPRS() const
        {
            ITS_REQUIRE(OptionLocationInformationGPRS());
            return static_cast<const LocationInformationGPRS&> (ElementAt(2));
        }

        void SetEndUserAddress(EndUserAddress* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetEndUserAddressStaticDescription());
            AddElement(3, element);
        }

        void SetEndUserAddress(const EndUserAddress& element)
        {
            its::AsnObject& asnObject = const_cast<EndUserAddress&>(element);
            asnObject.SetDescription(GetEndUserAddressStaticDescription());
            AddElement(3, element);
        }

        bool OptionEndUserAddress() const
        {
            return Contains(3);
        }

        const EndUserAddress& GetEndUserAddress() const
        {
            ITS_REQUIRE(OptionEndUserAddress());
            return static_cast<const EndUserAddress&> (ElementAt(3));
        }

        void SetQualityOfService(QualityOfService* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(4, element);
        }

        void SetQualityOfService(const QualityOfService& element)
        {
            its::AsnObject& asnObject = const_cast<QualityOfService&>(element);
            asnObject.SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(4, element);
        }

        bool OptionQualityOfService() const
        {
            return Contains(4);
        }

        const QualityOfService& GetQualityOfService() const
        {
            ITS_REQUIRE(OptionQualityOfService());
            return static_cast<const QualityOfService&> (ElementAt(4));
        }

        void SetTimeAndTimeZone(TimeAndTimezone* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(5, element);
        }

        void SetTimeAndTimeZone(const TimeAndTimezone& element)
        {
            its::AsnObject& asnObject = const_cast<TimeAndTimezone&>(element);
            asnObject.SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(5, element);
        }

        bool OptionTimeAndTimeZone() const
        {
            return Contains(5);
        }

        const TimeAndTimezone& GetTimeAndTimeZone() const
        {
            ITS_REQUIRE(OptionTimeAndTimeZone());
            return static_cast<const TimeAndTimezone&> (ElementAt(5));
        }

        void SetGGSNAddress(GSN_Address* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetGGSNAddressStaticDescription());
            AddElement(6, element);
        }

        void SetGGSNAddress(const GSN_Address& element)
        {
            its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
            asnObject.SetDescription(GetGGSNAddressStaticDescription());
            AddElement(6, element);
        }

        bool OptionGGSNAddress() const
        {
            return Contains(6);
        }

        const GSN_Address& GetGGSNAddress() const
        {
            ITS_REQUIRE(OptionGGSNAddress());
            return static_cast<const GSN_Address&> (ElementAt(6));
        }

    };



    class DetachSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class RouteingAreaUpdate : public its::AsnNull
        {
        public:

            RouteingAreaUpdate() : its::AsnNull(false)
            {
                Initialize();
            }

            RouteingAreaUpdate(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            RouteingAreaUpdate(const RouteingAreaUpdate& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            RouteingAreaUpdate(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RouteingAreaUpdate()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RouteingAreaUpdate(*this);
            }

            virtual std::string GetName() const
            { return "RouteingAreaUpdate"; }

        };


            typedef cap_v3::InitiatingEntity InitiatingEntity;


    ////////// End Nested Class(es) //////////

        DetachSpecificInformation() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        DetachSpecificInformation(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        DetachSpecificInformation(const DetachSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        DetachSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetInitiatingEntityStaticDescription();
        static its::AsnDescObject* GetRouteingAreaUpdateStaticDescription();

    public:

        virtual ~DetachSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new DetachSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "DetachSpecificInformation"; }

        void SetInitiatingEntity(InitiatingEntity* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetInitiatingEntityStaticDescription());
            AddElement(0, element);
        }

        void SetInitiatingEntity(const InitiatingEntity& element)
        {
            its::AsnObject& asnObject = const_cast<InitiatingEntity&>(element);
            asnObject.SetDescription(GetInitiatingEntityStaticDescription());
            AddElement(0, element);
        }

        bool OptionInitiatingEntity() const
        {
            return Contains(0);
        }

        const InitiatingEntity& GetInitiatingEntity() const
        {
            ITS_REQUIRE(OptionInitiatingEntity());
            return static_cast<const InitiatingEntity&> (ElementAt(0));
        }

        void SetRouteingAreaUpdate(RouteingAreaUpdate* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRouteingAreaUpdateStaticDescription());
            AddElement(1, element);
        }

        void SetRouteingAreaUpdate(const RouteingAreaUpdate& element)
        {
            its::AsnObject& asnObject = const_cast<RouteingAreaUpdate&>(element);
            asnObject.SetDescription(GetRouteingAreaUpdateStaticDescription());
            AddElement(1, element);
        }

        bool OptionRouteingAreaUpdate() const
        {
            return Contains(1);
        }

        const RouteingAreaUpdate& GetRouteingAreaUpdate() const
        {
            ITS_REQUIRE(OptionRouteingAreaUpdate());
            return static_cast<const RouteingAreaUpdate&> (ElementAt(1));
        }

    };



    class DisconnectSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class RouteingAreaUpdate : public its::AsnNull
        {
        public:

            RouteingAreaUpdate() : its::AsnNull(false)
            {
                Initialize();
            }

            RouteingAreaUpdate(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            RouteingAreaUpdate(const RouteingAreaUpdate& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            RouteingAreaUpdate(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~RouteingAreaUpdate()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new RouteingAreaUpdate(*this);
            }

            virtual std::string GetName() const
            { return "RouteingAreaUpdate"; }

        };


            typedef cap_v3::InitiatingEntity InitiatingEntity;


    ////////// End Nested Class(es) //////////

        DisconnectSpecificInformation() : its::AsnSequence(2, false)
        {
            Initialize();
        }

        DisconnectSpecificInformation(its::Octets& octets) : its::AsnSequence(2, false)
        {
            Initialize();
            Decode(octets);
        }

        DisconnectSpecificInformation(const DisconnectSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        DisconnectSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(2, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetInitiatingEntityStaticDescription();
        static its::AsnDescObject* GetRouteingAreaUpdateStaticDescription();

    public:

        virtual ~DisconnectSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new DisconnectSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "DisconnectSpecificInformation"; }

        void SetInitiatingEntity(InitiatingEntity* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetInitiatingEntityStaticDescription());
            AddElement(0, element);
        }

        void SetInitiatingEntity(const InitiatingEntity& element)
        {
            its::AsnObject& asnObject = const_cast<InitiatingEntity&>(element);
            asnObject.SetDescription(GetInitiatingEntityStaticDescription());
            AddElement(0, element);
        }

        bool OptionInitiatingEntity() const
        {
            return Contains(0);
        }

        const InitiatingEntity& GetInitiatingEntity() const
        {
            ITS_REQUIRE(OptionInitiatingEntity());
            return static_cast<const InitiatingEntity&> (ElementAt(0));
        }

        void SetRouteingAreaUpdate(RouteingAreaUpdate* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetRouteingAreaUpdateStaticDescription());
            AddElement(1, element);
        }

        void SetRouteingAreaUpdate(const RouteingAreaUpdate& element)
        {
            its::AsnObject& asnObject = const_cast<RouteingAreaUpdate&>(element);
            asnObject.SetDescription(GetRouteingAreaUpdateStaticDescription());
            AddElement(1, element);
        }

        bool OptionRouteingAreaUpdate() const
        {
            return Contains(1);
        }

        const RouteingAreaUpdate& GetRouteingAreaUpdate() const
        {
            ITS_REQUIRE(OptionRouteingAreaUpdate());
            return static_cast<const RouteingAreaUpdate&> (ElementAt(1));
        }

    };



    class PDPContextEstablishmentSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////



        class SecondaryPDP_context : public its::AsnNull
        {
        public:

            SecondaryPDP_context() : its::AsnNull(false)
            {
                Initialize();
            }

            SecondaryPDP_context(its::Octets& octets) : its::AsnNull(false)
            {
                Initialize();
                Decode(octets);
            }

            SecondaryPDP_context(const SecondaryPDP_context& rhs) : its::AsnNull(rhs)
            {
                // Nothing to do.
            }

            SecondaryPDP_context(its::AsnDescObject* description) : its::AsnNull(description)
            {
                // Nothing to do.
            }

        protected:

            void Initialize()
            {
                _description = GetStaticDescription();
            }

        public:

            static its::AsnDescObject* GetStaticDescription();

        public:

            virtual ~SecondaryPDP_context()
            {
                // Nothing to do.
            }

            virtual its::AsnObject* Clone() const
            {
                return new SecondaryPDP_context(*this);
            }

            virtual std::string GetName() const
            { return "SecondaryPDP_context"; }

        };


            typedef cap_v3::AccessPointName AccessPointName;


            typedef cap_v3::EndUserAddress EndUserAddress;


            typedef cap_v3::QualityOfService QualityOfService;


            typedef cap_v3::LocationInformationGPRS LocationInformationGPRS;


            typedef cap_v3::TimeAndTimezone TimeAndTimezone;


            typedef cap_v3::PDPInitiationType PDPInitiationType;


    ////////// End Nested Class(es) //////////

        PDPContextEstablishmentSpecificInformation() : its::AsnSequence(7, false)
        {
            Initialize();
        }

        PDPContextEstablishmentSpecificInformation(its::Octets& octets) : its::AsnSequence(7, false)
        {
            Initialize();
            Decode(octets);
        }

        PDPContextEstablishmentSpecificInformation(const PDPContextEstablishmentSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        PDPContextEstablishmentSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(7, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAccessPointNameStaticDescription();
        static its::AsnDescObject* GetEndUserAddressStaticDescription();
        static its::AsnDescObject* GetQualityOfServiceStaticDescription();
        static its::AsnDescObject* GetLocationInformationGPRSStaticDescription();
        static its::AsnDescObject* GetTimeAndTimeZoneStaticDescription();
        static its::AsnDescObject* GetPDPInitiationTypeStaticDescription();
        static its::AsnDescObject* GetSecondaryPDP_contextStaticDescription();

    public:

        virtual ~PDPContextEstablishmentSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PDPContextEstablishmentSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "PDPContextEstablishmentSpecificInformation"; }

        void SetAccessPointName(AccessPointName* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        void SetAccessPointName(const AccessPointName& element)
        {
            its::AsnObject& asnObject = const_cast<AccessPointName&>(element);
            asnObject.SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        bool OptionAccessPointName() const
        {
            return Contains(0);
        }

        const AccessPointName& GetAccessPointName() const
        {
            ITS_REQUIRE(OptionAccessPointName());
            return static_cast<const AccessPointName&> (ElementAt(0));
        }

        void SetEndUserAddress(EndUserAddress* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetEndUserAddressStaticDescription());
            AddElement(1, element);
        }

        void SetEndUserAddress(const EndUserAddress& element)
        {
            its::AsnObject& asnObject = const_cast<EndUserAddress&>(element);
            asnObject.SetDescription(GetEndUserAddressStaticDescription());
            AddElement(1, element);
        }

        bool OptionEndUserAddress() const
        {
            return Contains(1);
        }

        const EndUserAddress& GetEndUserAddress() const
        {
            ITS_REQUIRE(OptionEndUserAddress());
            return static_cast<const EndUserAddress&> (ElementAt(1));
        }

        void SetQualityOfService(QualityOfService* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(2, element);
        }

        void SetQualityOfService(const QualityOfService& element)
        {
            its::AsnObject& asnObject = const_cast<QualityOfService&>(element);
            asnObject.SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(2, element);
        }

        bool OptionQualityOfService() const
        {
            return Contains(2);
        }

        const QualityOfService& GetQualityOfService() const
        {
            ITS_REQUIRE(OptionQualityOfService());
            return static_cast<const QualityOfService&> (ElementAt(2));
        }

        void SetLocationInformationGPRS(LocationInformationGPRS* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(3, element);
        }

        void SetLocationInformationGPRS(const LocationInformationGPRS& element)
        {
            its::AsnObject& asnObject = const_cast<LocationInformationGPRS&>(element);
            asnObject.SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(3, element);
        }

        bool OptionLocationInformationGPRS() const
        {
            return Contains(3);
        }

        const LocationInformationGPRS& GetLocationInformationGPRS() const
        {
            ITS_REQUIRE(OptionLocationInformationGPRS());
            return static_cast<const LocationInformationGPRS&> (ElementAt(3));
        }

        void SetTimeAndTimeZone(TimeAndTimezone* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(4, element);
        }

        void SetTimeAndTimeZone(const TimeAndTimezone& element)
        {
            its::AsnObject& asnObject = const_cast<TimeAndTimezone&>(element);
            asnObject.SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(4, element);
        }

        bool OptionTimeAndTimeZone() const
        {
            return Contains(4);
        }

        const TimeAndTimezone& GetTimeAndTimeZone() const
        {
            ITS_REQUIRE(OptionTimeAndTimeZone());
            return static_cast<const TimeAndTimezone&> (ElementAt(4));
        }

        void SetPDPInitiationType(PDPInitiationType* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetPDPInitiationTypeStaticDescription());
            AddElement(5, element);
        }

        void SetPDPInitiationType(const PDPInitiationType& element)
        {
            its::AsnObject& asnObject = const_cast<PDPInitiationType&>(element);
            asnObject.SetDescription(GetPDPInitiationTypeStaticDescription());
            AddElement(5, element);
        }

        bool OptionPDPInitiationType() const
        {
            return Contains(5);
        }

        const PDPInitiationType& GetPDPInitiationType() const
        {
            ITS_REQUIRE(OptionPDPInitiationType());
            return static_cast<const PDPInitiationType&> (ElementAt(5));
        }

        void SetSecondaryPDP_context(SecondaryPDP_context* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetSecondaryPDP_contextStaticDescription());
            AddElement(6, element);
        }

        void SetSecondaryPDP_context(const SecondaryPDP_context& element)
        {
            its::AsnObject& asnObject = const_cast<SecondaryPDP_context&>(element);
            asnObject.SetDescription(GetSecondaryPDP_contextStaticDescription());
            AddElement(6, element);
        }

        bool OptionSecondaryPDP_context() const
        {
            return Contains(6);
        }

        const SecondaryPDP_context& GetSecondaryPDP_context() const
        {
            ITS_REQUIRE(OptionSecondaryPDP_context());
            return static_cast<const SecondaryPDP_context&> (ElementAt(6));
        }

    };



    class PDPContextEstablishmentAcknowledgementSpecificInformation : public its::AsnSequence
    {
    public:


    ////////// Begin Nested Class(es) //////////


            typedef cap_v3::AccessPointName AccessPointName;


            typedef cap_v3::GPRSChargingID GPRSChargingID;


            typedef cap_v3::EndUserAddress EndUserAddress;


            typedef cap_v3::QualityOfService QualityOfService;


            typedef cap_v3::LocationInformationGPRS LocationInformationGPRS;


            typedef cap_v3::TimeAndTimezone TimeAndTimezone;


            typedef cap_v3::GSN_Address GSN_Address;


    ////////// End Nested Class(es) //////////

        PDPContextEstablishmentAcknowledgementSpecificInformation() : its::AsnSequence(7, false)
        {
            Initialize();
        }

        PDPContextEstablishmentAcknowledgementSpecificInformation(its::Octets& octets) : its::AsnSequence(7, false)
        {
            Initialize();
            Decode(octets);
        }

        PDPContextEstablishmentAcknowledgementSpecificInformation(const PDPContextEstablishmentAcknowledgementSpecificInformation& rhs) : its::AsnSequence(rhs)
        {
            // Nothing to do.
        }

        PDPContextEstablishmentAcknowledgementSpecificInformation(its::AsnDescObject* description) : its::AsnSequence(7, description)
        {
            // Nothing to do.
        }

    protected:

        void Initialize()
        {
            _description = GetStaticDescription();
        }

    public:

        static its::AsnDescObject* GetStaticDescription();

        static its::AsnDescObject* GetAccessPointNameStaticDescription();
        static its::AsnDescObject* GetChargingIDStaticDescription();
        static its::AsnDescObject* GetEndUserAddressStaticDescription();
        static its::AsnDescObject* GetQualityOfServiceStaticDescription();
        static its::AsnDescObject* GetLocationInformationGPRSStaticDescription();
        static its::AsnDescObject* GetTimeAndTimeZoneStaticDescription();
        static its::AsnDescObject* GetGGSNAddressStaticDescription();

    public:

        virtual ~PDPContextEstablishmentAcknowledgementSpecificInformation()
        {
            // Nothing to do.
        }

        virtual its::AsnObject* Clone() const
        {
            return new PDPContextEstablishmentAcknowledgementSpecificInformation(*this);
        }

        virtual std::string GetName() const
        { return "PDPContextEstablishmentAcknowledgementSpecificInformation"; }

        void SetAccessPointName(AccessPointName* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        void SetAccessPointName(const AccessPointName& element)
        {
            its::AsnObject& asnObject = const_cast<AccessPointName&>(element);
            asnObject.SetDescription(GetAccessPointNameStaticDescription());
            AddElement(0, element);
        }

        bool OptionAccessPointName() const
        {
            return Contains(0);
        }

        const AccessPointName& GetAccessPointName() const
        {
            ITS_REQUIRE(OptionAccessPointName());
            return static_cast<const AccessPointName&> (ElementAt(0));
        }

        void SetChargingID(GPRSChargingID* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetChargingIDStaticDescription());
            AddElement(1, element);
        }

        void SetChargingID(const GPRSChargingID& element)
        {
            its::AsnObject& asnObject = const_cast<GPRSChargingID&>(element);
            asnObject.SetDescription(GetChargingIDStaticDescription());
            AddElement(1, element);
        }

        bool OptionChargingID() const
        {
            return Contains(1);
        }

        const GPRSChargingID& GetChargingID() const
        {
            ITS_REQUIRE(OptionChargingID());
            return static_cast<const GPRSChargingID&> (ElementAt(1));
        }

        void SetEndUserAddress(EndUserAddress* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetEndUserAddressStaticDescription());
            AddElement(2, element);
        }

        void SetEndUserAddress(const EndUserAddress& element)
        {
            its::AsnObject& asnObject = const_cast<EndUserAddress&>(element);
            asnObject.SetDescription(GetEndUserAddressStaticDescription());
            AddElement(2, element);
        }

        bool OptionEndUserAddress() const
        {
            return Contains(2);
        }

        const EndUserAddress& GetEndUserAddress() const
        {
            ITS_REQUIRE(OptionEndUserAddress());
            return static_cast<const EndUserAddress&> (ElementAt(2));
        }

        void SetQualityOfService(QualityOfService* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(3, element);
        }

        void SetQualityOfService(const QualityOfService& element)
        {
            its::AsnObject& asnObject = const_cast<QualityOfService&>(element);
            asnObject.SetDescription(GetQualityOfServiceStaticDescription());
            AddElement(3, element);
        }

        bool OptionQualityOfService() const
        {
            return Contains(3);
        }

        const QualityOfService& GetQualityOfService() const
        {
            ITS_REQUIRE(OptionQualityOfService());
            return static_cast<const QualityOfService&> (ElementAt(3));
        }

        void SetLocationInformationGPRS(LocationInformationGPRS* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(4, element);
        }

        void SetLocationInformationGPRS(const LocationInformationGPRS& element)
        {
            its::AsnObject& asnObject = const_cast<LocationInformationGPRS&>(element);
            asnObject.SetDescription(GetLocationInformationGPRSStaticDescription());
            AddElement(4, element);
        }

        bool OptionLocationInformationGPRS() const
        {
            return Contains(4);
        }

        const LocationInformationGPRS& GetLocationInformationGPRS() const
        {
            ITS_REQUIRE(OptionLocationInformationGPRS());
            return static_cast<const LocationInformationGPRS&> (ElementAt(4));
        }

        void SetTimeAndTimeZone(TimeAndTimezone* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(5, element);
        }

        void SetTimeAndTimeZone(const TimeAndTimezone& element)
        {
            its::AsnObject& asnObject = const_cast<TimeAndTimezone&>(element);
            asnObject.SetDescription(GetTimeAndTimeZoneStaticDescription());
            AddElement(5, element);
        }

        bool OptionTimeAndTimeZone() const
        {
            return Contains(5);
        }

        const TimeAndTimezone& GetTimeAndTimeZone() const
        {
            ITS_REQUIRE(OptionTimeAndTimeZone());
            return static_cast<const TimeAndTimezone&> (ElementAt(5));
        }

        void SetGGSNAddress(GSN_Address* element)
        {
            ITS_REQUIRE(element != NULL);
            element->AsnObject::SetDescription(GetGGSNAddressStaticDescription());
            AddElement(6, element);
        }

        void SetGGSNAddress(const GSN_Address& element)
        {
            its::AsnObject& asnObject = const_cast<GSN_Address&>(element);
            asnObject.SetDescription(GetGGSNAddressStaticDescription());
            AddElement(6, element);
        }

        bool OptionGGSNAddress() const
        {
            return Contains(6);
        }

        const GSN_Address& GetGGSNAddress() const
        {
            ITS_REQUIRE(OptionGGSNAddress());
            return static_cast<const GSN_Address&> (ElementAt(6));
        }

    };


////////// End Nested Class(es) //////////

    GPRSEventSpecificInformation() : its::AsnChoice(false)
    {
        Initialize();
    }

    GPRSEventSpecificInformation(its::Octets& octets) : its::AsnChoice(false)
    {
        Initialize();
        Decode(octets);
    }

    GPRSEventSpecificInformation(const GPRSEventSpecificInformation& rhs) : its::AsnChoice(rhs)
    {
        // Nothing to do.
    }

    GPRSEventSpecificInformation(its::AsnDescObject* description) : its::AsnChoice(description)
    {
        // Nothing to do.
    }

    GPRSEventSpecificInformation(its::AsnDescObject* description, its::AsnObject* choice) : its::AsnChoice(description, choice)
    {
        // Nothing to do.
    }

protected:

    void Initialize()
    {
        _description = GetStaticDescription();
    }

public:

    static its::AsnDescObject* GetStaticDescription();

    static its::AsnDescObject* GetAttachChangeOfPositionSpecificInformationStaticDescription();
    static its::AsnDescObject* GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription();
    static its::AsnDescObject* GetDetachSpecificInformationStaticDescription();
    static its::AsnDescObject* GetDisconnectSpecificInformationStaticDescription();
    static its::AsnDescObject* GetPDPContextEstablishmentSpecificInformationStaticDescription();
    static its::AsnDescObject* GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription();

public:

    virtual ~GPRSEventSpecificInformation()
    {
        // Nothing to do.
    }

    virtual its::AsnObject* Clone() const
    {
        return new GPRSEventSpecificInformation(*this);
    }

    virtual std::string GetName() const
    { return "GPRSEventSpecificInformation"; }

    void SetChoiceAttachChangeOfPositionSpecificInformation(AttachChangeOfPositionSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetAttachChangeOfPositionSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceAttachChangeOfPositionSpecificInformation(const AttachChangeOfPositionSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<AttachChangeOfPositionSpecificInformation&>(choice);
        asnObject.SetDescription(GetAttachChangeOfPositionSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceAttachChangeOfPositionSpecificInformation() const
    {
        return Contains(GetAttachChangeOfPositionSpecificInformationStaticDescription()->TagIdentity());
    }

    const AttachChangeOfPositionSpecificInformation& GetChoiceAttachChangeOfPositionSpecificInformation() const
    {
        ITS_REQUIRE(ChoiceAttachChangeOfPositionSpecificInformation());
        return static_cast<const AttachChangeOfPositionSpecificInformation&> (GetChoice());
    }

    void SetChoicePdp_ContextchangeOfPositionSpecificInformation(Pdp_ContextchangeOfPositionSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoicePdp_ContextchangeOfPositionSpecificInformation(const Pdp_ContextchangeOfPositionSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<Pdp_ContextchangeOfPositionSpecificInformation&>(choice);
        asnObject.SetDescription(GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoicePdp_ContextchangeOfPositionSpecificInformation() const
    {
        return Contains(GetPdp_ContextchangeOfPositionSpecificInformationStaticDescription()->TagIdentity());
    }

    const Pdp_ContextchangeOfPositionSpecificInformation& GetChoicePdp_ContextchangeOfPositionSpecificInformation() const
    {
        ITS_REQUIRE(ChoicePdp_ContextchangeOfPositionSpecificInformation());
        return static_cast<const Pdp_ContextchangeOfPositionSpecificInformation&> (GetChoice());
    }

    void SetChoiceDetachSpecificInformation(DetachSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDetachSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDetachSpecificInformation(const DetachSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<DetachSpecificInformation&>(choice);
        asnObject.SetDescription(GetDetachSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDetachSpecificInformation() const
    {
        return Contains(GetDetachSpecificInformationStaticDescription()->TagIdentity());
    }

    const DetachSpecificInformation& GetChoiceDetachSpecificInformation() const
    {
        ITS_REQUIRE(ChoiceDetachSpecificInformation());
        return static_cast<const DetachSpecificInformation&> (GetChoice());
    }

    void SetChoiceDisconnectSpecificInformation(DisconnectSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetDisconnectSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoiceDisconnectSpecificInformation(const DisconnectSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<DisconnectSpecificInformation&>(choice);
        asnObject.SetDescription(GetDisconnectSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoiceDisconnectSpecificInformation() const
    {
        return Contains(GetDisconnectSpecificInformationStaticDescription()->TagIdentity());
    }

    const DisconnectSpecificInformation& GetChoiceDisconnectSpecificInformation() const
    {
        ITS_REQUIRE(ChoiceDisconnectSpecificInformation());
        return static_cast<const DisconnectSpecificInformation&> (GetChoice());
    }

    void SetChoicePDPContextEstablishmentSpecificInformation(PDPContextEstablishmentSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetPDPContextEstablishmentSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoicePDPContextEstablishmentSpecificInformation(const PDPContextEstablishmentSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<PDPContextEstablishmentSpecificInformation&>(choice);
        asnObject.SetDescription(GetPDPContextEstablishmentSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoicePDPContextEstablishmentSpecificInformation() const
    {
        return Contains(GetPDPContextEstablishmentSpecificInformationStaticDescription()->TagIdentity());
    }

    const PDPContextEstablishmentSpecificInformation& GetChoicePDPContextEstablishmentSpecificInformation() const
    {
        ITS_REQUIRE(ChoicePDPContextEstablishmentSpecificInformation());
        return static_cast<const PDPContextEstablishmentSpecificInformation&> (GetChoice());
    }

    void SetChoicePDPContextEstablishmentAcknowledgementSpecificInformation(PDPContextEstablishmentAcknowledgementSpecificInformation* choice)
    {
        ITS_REQUIRE(choice != NULL);
        choice->AsnObject::SetDescription(GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    void SetChoicePDPContextEstablishmentAcknowledgementSpecificInformation(const PDPContextEstablishmentAcknowledgementSpecificInformation& choice)
    {
        its::AsnObject& asnObject = const_cast<PDPContextEstablishmentAcknowledgementSpecificInformation&>(choice);
        asnObject.SetDescription(GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription());
        SetChoice(choice);
    }

    bool ChoicePDPContextEstablishmentAcknowledgementSpecificInformation() const
    {
        return Contains(GetPDPContextEstablishmentAcknowledgementSpecificInformationStaticDescription()->TagIdentity());
    }

    const PDPContextEstablishmentAcknowledgementSpecificInformation& GetChoicePDPContextEstablishmentAcknowledgementSpecificInformation() const
    {
        ITS_REQUIRE(ChoicePDPContextEstablishmentAcknowledgementSpecificInformation());
        return static_cast<const PDPContextEstablishmentAcknowledgementSpecificInformation&> (GetChoice());
    }

};



} // namespace.

#endif    // !defined(_CAP_V3_GPRS_EVENT_SPECIFIC_INFORMATION_H_)

