############################################################################
#                                                                          #
#     Copyright 1997 IntelliNet Technologies, Inc. All Rights Reserved.    #
#             Manufactured in the United States of America.                #
#       1990 W. New Haven Ste. 312, Melbourne, Florida, 32904 U.S.A.       #
#                                                                          #
#   This product and related documentation is protected by copyright and   #
#   distributed under licenses restricting its use, copying, distribution  #
#   and decompilation.  No part of this product or related documentation   #
#   may be reproduced in any form by any means without prior written       #
#   authorization of IntelliNet Technologies and its licensors, if any.    #
#                                                                          #
#   RESTRICTED RIGHTS LEGEND:  Use, duplication, or disclosure by the      #
#   government is subject to restrictions as set forth in subparagraph     #
#   (c)(1)(ii) of the Rights in Technical Data and Computer Software       #
#   clause at DFARS 252.227-7013 and FAR 52.227-19.                        #
#                                                                          #
############################################################################
#                                                                          #
# CONTRACT: INTERNAL                                                       #
#                                                                          #
############################################################################
#
#  ID: $Id: config.vars.solaris,v 9.3 2008/06/12 12:47:00 nvijikumar Exp $
#
# LOG: $Log: config.vars.solaris,v $
# LOG: Revision 9.3  2008/06/12 12:47:00  nvijikumar
# LOG: Renaming from COT to CPOT (CCITT prime - 16bit)
# LOG: ACC-CG-SDS-SS7-V1.0.02::ID:: D6030
# LOG:
# LOG: Revision 9.2  2008/06/04 10:23:12  ssingh
# LOG: porting from ALU (B-0100LX-LUSG-00, 4th June, 2004 codebase)
# LOG:
# LOG: Revision 9.1.10.9  2007/10/15 10:18:28  ssingh
# LOG: -fast option put in release build only
# LOG:
# LOG: Revision 9.1.10.8  2007/10/05 16:47:52  gdevanand
# LOG: No fast option with DEBUG_BUILD=NO
# LOG:
# LOG: Revision 9.1.10.7  2007/10/05 08:16:04  mshanmugam
# LOG: Compilation flag for CPOT stack is defined - skatta
# LOG:
# LOG: Revision 9.1.10.6  2007/09/27 08:34:46  haltaf
# LOG: Changes for 16bit PC flag
# LOG:
# LOG: Revision 9.1.10.5  2007/09/24 06:36:35  ssingh
# LOG: Adding -fast option
# LOG:
# LOG: Revision 9.1.10.4  2007/02/28 12:39:56  sbhaskaran
# LOG: Included -xs flag for solaris in config.vars.solaris
# LOG:
# LOG: Revision 9.1.10.3  2006/09/25 13:57:46  mshanmugam
# LOG: Removed the Q752 Compilation flag
# LOG:
# LOG: Revision 9.1.10.2  2006/09/13 05:23:59  mshanmugam
# LOG: Added new compilation option for Q752 - Q752_ACCELERO
# LOG:
# LOG: Revision 9.1.10.1  2005/11/14 10:32:16  ssingh
# LOG: NEED_LARGE_CONTEXT added
# LOG:
# LOG: Revision 9.1  2005/03/23 12:51:01  cvsadmin
# LOG: Begin PR6.5
# LOG:
# LOG: Revision 8.2  2005/03/21 13:49:06  cvsadmin
# LOG: PR6.4.2 Source Propagated to Current
# LOG:
# LOG: Revision 7.2.14.2  2004/09/22 04:09:38  mmanikandan
# LOG: SO_EXT is added.
# LOG:
# LOG: Revision 7.2.14.1  2004/06/28 05:34:06  mmanikandan
# LOG: USE_HEAP is defined in solaris section.
# LOG:
# LOG: Revision 7.2  2002/10/25 20:25:46  mmiers
# LOG: Kill dead file, add 64 bit target
# LOG:
# LOG: Revision 7.1  2002/08/26 22:08:31  mmiers
# LOG: Begin PR6.2
# LOG:
# LOG: Revision 6.2  2002/08/20 15:53:04  mmiers
# LOG: Update the clean target for china
# LOG:
# LOG: Revision 6.1  2002/02/28 16:13:16  mmiers
# LOG: Begin PR7.
# LOG:
# LOG: Revision 5.6  2002/02/19 15:40:18  ssharma
# LOG: Undo the latest commit.
# LOG:
# LOG: Revision 5.4  2002/02/01 21:46:45  mmiers
# LOG: Current config.vars
# LOG:
# LOG: Revision 5.3  2001/12/19 18:02:32  mmiers
# LOG: ADAX testing on Solaris revealed several build flaws.
# LOG:
# LOG: Revision 5.2  2001/11/26 16:35:38  hdivoux
# LOG: Added compilation flags (ASNRT...) for ASN.1 related libraries.
# LOG:
# LOG: Revision 5.1  2001/08/16 20:45:05  mmiers
# LOG: Start PR6.
# LOG:
# LOG: Revision 4.4  2001/08/16 19:45:04  lbana
# LOG: Included variables for vxworks
# LOG:
# LOG: Revision 4.3  2001/07/19 16:20:12  mmiers
# LOG: Add DSM to the ENGINE build.
# LOG:
# LOG: Revision 4.2  2001/06/20 00:18:19  mmiers
# LOG: Start removing the old short names.
# LOG: Use the heap instead of buffers if the heap implementation is smart.
# LOG: GCC 3.0 and later are ANSI/ISO C++.
# LOG:
# LOG: Revision 4.1  2001/05/01 00:52:59  mmiers
# LOG: Begin PR5
# LOG:
# LOG: Revision 3.17  2001/04/12 14:17:47  mmiers
# LOG: Use PIC, not pic
# LOG:
# LOG: Revision 3.16  2001/04/03 01:11:57  mmiers
# LOG:
# LOG: Debugging.
# LOG:
# LOG: Revision 3.15  2001/04/02 23:34:58  mmiers
# LOG: Add PIC code.
# LOG:
# LOG: Revision 3.14  2001/04/02 19:49:39  mmiers
# LOG: Solaris build.
# LOG:
# LOG: Revision 3.13  2001/03/29 17:08:44  mmiers
# LOG: Missing entry points detected by correct engine build.
# LOG:
# LOG: Revision 3.12  2001/03/29 16:23:40  mmiers
# LOG: Add expat to common build.
# LOG: Split UALs into different libs (avoids symbol collisions).
# LOG: Change shared lib flags.
# LOG:
# LOG: Revision 3.11  2001/03/14 22:06:44  mmiers
# LOG: Finalizing the engine.  Just need to do the thread pools.
# LOG:
# LOG: Revision 3.10  2001/03/07 01:16:02  mmiers
# LOG: Shared lib template.  Need to test to see what happens to
# LOG: symbols in the .so that are defined in the app.
# LOG:
# LOG: Revision 3.9  2001/03/06 02:50:16  mmiers
# LOG: Fixups for DLLs, make
# LOG:
# LOG: Revision 3.8  2001/03/06 02:28:38  mmiers
# LOG: Add dynamic link lib.  Straighten out include order.  Remove instance
# LOG: of CORE++.
# LOG:
# LOG: Revision 3.7  2001/01/04 20:16:50  hdivoux
# LOG: Get it right
# LOG:
# LOG: Revision 3.6  2001/01/04 16:11:35  hdivoux
# LOG: Warning removal, proper flags.
# LOG:
# LOG: Revision 3.5  2001/01/03 23:07:41  hdivoux
# LOG: Get the modifier right
# LOG:
# LOG: Revision 3.4  2001/01/03 18:37:04  mmiers
# LOG: Works better on SMP
# LOG:
# LOG: Revision 3.3  2000/11/29 23:44:17  mmiers
# LOG: Portability repairs.
# LOG:
# LOG: Revision 3.2  2000/09/01 23:31:37  lbana
# LOG:
# LOG:
# LOG: Tracking down bugs.
# LOG:
# LOG: Revision 3.1  2000/08/15 23:55:36  mmiers
# LOG:
# LOG: Begin round 4.
# LOG:
# LOG: Revision 2.3  2000/05/11 02:06:11  mmiers
# LOG:
# LOG:
# LOG: tools: warning removal.  Hubert needs to take over for the comps.
# LOG: common: updates for KASOCK_TRANS.  Set up links for IMAL. TALI
# LOG: needs more work (TALI message formats).  IMAL is ok from SUPPORT
# LOG: perspective, but IMAL class needs implementation.
# LOG: config.vars: correct platform flags for Linux.
# LOG:
# LOG: Revision 2.2  2000/05/03 21:10:55  mmiers
# LOG:
# LOG:
# LOG: Modify this.
# LOG:
# LOG: Revision 2.1  1999/12/17 21:58:30  mmiers
# LOG:
# LOG:
# LOG: Add the linking stuff.
# LOG:
# LOG: Revision 2.0  1999/12/03 23:18:09  mmiers
# LOG:
# LOG: Begin third iteration.
# LOG:
# LOG: Revision 1.54  1999/11/29 16:31:58  mmiers
# LOG:
# LOG:
# LOG: Portability fixes (Linux).
# LOG:
# LOG: Revision 1.53  1999/11/09 22:15:19  labuser
# LOG:
# LOG:
# LOG: Remove optimize flag when building debug.
# LOG:
# LOG: Revision 1.52  1999/08/30 16:06:55  skarmakar
# LOG:
# LOG:
# LOG: Corrected build flags.
# LOG:
# LOG: Revision 1.51  1999/07/01 02:29:12  mmiers
# LOG:
# LOG: On Solaris, you build C++ libraries with the compiler, of all
# LOG: things.  Add new make variables accordingly.
# LOG:
# LOG: Revision 1.50  1999/07/01 01:19:51  mmiers
# LOG:
# LOG: If CXXFLAGS includes CFLAGS, then we don't need its contents duplicated.
# LOG:
# LOG: Revision 1.49  1999/07/01 01:15:46  mmiers
# LOG:
# LOG:
# LOG: Continuing porting issue fixes.
# LOG:
# LOG: Revision 1.48  1999/06/30 19:44:26  mmiers
# LOG:
# LOG:
# LOG: Portability, complete build procedure
# LOG:
# LOG: Revision 1.47  1999/06/30 19:04:33  mmiers
# LOG:
# LOG:
# LOG: Update HPUX configuration.
# LOG:
# LOG: Revision 1.46  1999/06/30 16:11:38  mmiers
# LOG:
# LOG:
# LOG: Use standard flags for solaris build.
# LOG:
# LOG: Revision 1.45  1999/06/30 16:11:16  mmiers
# LOG:
# LOG:
# LOG: Use normal mode flags for building.
# LOG:
# LOG: Revision 1.44  1999/06/29 23:42:30  mmiers
# LOG:
# LOG:
# LOG: Add repository for debug.
# LOG:
# LOG: Revision 1.43  1999/06/29 23:39:24  mmiers
# LOG:
# LOG:
# LOG: More portability fixes.
# LOG:
# LOG: Revision 1.42  1999/06/28 23:49:57  skarmakar
# LOG:
# LOG:
# LOG: Build on Dec using strict_ansi (for C++).
# LOG:
# LOG: Revision 1.41  1999/06/28 23:19:19  skarmakar
# LOG:
# LOG:
# LOG: Portability fixes for alpha
# LOG:
# LOG: Revision 1.40  1999/05/25 00:26:12  mmiers
# LOG:
# LOG:
# LOG: Remove bogus target
# LOG:
# LOG: Revision 1.39  1999/05/13 22:12:20  mmiers
# LOG:
# LOG:
# LOG: Temporary until dual building works.
# LOG:
# LOG: Revision 1.38  1999/05/11 01:27:36  mmiers
# LOG:
# LOG:
# LOG: Start on dual debug/release build rules.
# LOG:
# LOG: Revision 1.37  1999/03/02 23:39:28  mmiers
# LOG:
# LOG:
# LOG: Continue sanitizing the build environment.
# LOG:
# LOG: Revision 1.36  1999/03/02 22:08:37  mmiers
# LOG:
# LOG:
# LOG: Update for prototypes.
# LOG:
# LOG: Revision 1.35  1999/02/26 02:24:39  mmiers
# LOG:
# LOG:
# LOG: Updated TCAP for CC builds.
# LOG:
# LOG: Revision 1.34  1999/01/07 03:47:43  mmiers
# LOG: Porting bugs.
# LOG:
# LOG: Revision 1.33  1998/11/19 03:50:53  mmiers
# LOG: Warning removal.
# LOG:
# LOG: Revision 1.32  1998/11/18 00:34:27  jrao
# LOG: C++ debug info not produced while using g++
# LOG:
# LOG: Revision 1.31  1998/11/17 23:57:38  jrao
# LOG: Changed Library Suffix (LIBSUFFIX) wherever it occured to Debug Suffix (DBGSUFFIX)
# LOG:
# LOG: Revision 1.30  1998/11/17 23:23:06  mmiers
# LOG: Mass build target control.
# LOG:
# LOG: Revision 1.29  1998/11/17 23:05:59  mmiers
# LOG: Create a build_all script for IntelliSS7
# LOG:
# LOG: Revision 1.28  1998/11/17 19:13:28  jrao
# LOG: C++ compiler had no debug flag set for HPUX
# LOG:
# LOG: Revision 1.27  1998/11/17 16:53:36  jrao
# LOG: Added Library Suffixes for all platforms.
# LOG:
# LOG: Revision 1.26  1998/11/17 15:23:16  mmiers
# LOG: Multibuild (debug and opt).
# LOG:
# LOG: Revision 1.25  1998/11/13 15:58:56  mmiers
# LOG: UNIX build.
# LOG:
# LOG: Revision 1.24  1998/10/21 19:43:50  mmiers
# LOG: HPUX update for autobuild.
# LOG:
# LOG: Revision 1.23  1998/10/21 19:20:16  mmiers
# LOG: Update for ALPHA build.
# LOG:
# LOG: Revision 1.22  1998/10/15 02:07:08  mmiers
# LOG: Fixes for Alpha platform.
# LOG:
# LOG: Revision 1.21  1998/10/01 02:05:52  mmiers
# LOG: Add namespace definition to define list
# LOG:
# LOG: Revision 1.20  1998/10/01 01:58:47  mmiers
# LOG: Cleanup for HPUX.
# LOG:
# LOG: Revision 1.19  1998/10/01 01:53:04  mmiers
# LOG: Update for alpha.
# LOG:
# LOG: Revision 1.18  1998/10/01 01:30:23  mmiers
# LOG: Update config.vars for alpha
# LOG:
# LOG: Revision 1.17  1998/09/26 21:01:45  mmiers
# LOG: Adapt DBC to UNIX.
# LOG:
# LOG: Revision 1.16  1998/09/22 23:56:22  jrao
# LOG: Changes made to accomodate HPUX code
# LOG:
# LOG: Revision 1.15  1998/09/21 00:01:29  jrao
# LOG: Added the HPUX target
# LOG:
# LOG: Revision 1.14  1998/06/25 01:11:21  mmiers
# LOG: Add Linux target.
# LOG:
# LOG: Revision 1.13  1998/06/23 02:31:06  mmiers
# LOG: Update Solaris build environment.  Part of getting SCCP working.
# LOG:
# LOG: Revision 1.12  1998/05/27 02:18:10  mmiers
# LOG: Reimplement fifos for NT and Solaris.  Nobody should be affected by this
# LOG: change (from a user perspective), but ITS_Worker has a new transport type,
# LOG: depending on whether or not the FIFO transport is reentrant.
# LOG:
# LOG: Revision 1.11  1998/05/22 03:28:19  mmiers
# LOG: Small update to start creating automatic documentation generation.
# LOG:
# LOG: Revision 1.10  1998/05/21 19:38:44  mmiers
# LOG: Gee whiz.  Building on NT with a real make facility.  What a concept.
# LOG:
# LOG: Revision 1.9  1998/05/20 04:44:02  mmiers
# LOG: Cleanup.
# LOG: Hubert, some iterators need to be constant while others don't.  Please
# LOG: see me about this.
# LOG:
# LOG: Revision 1.8  1998/05/20 02:48:47  mmiers
# LOG: Update the config.vars to contain new macros for $(LEX),
# LOG: $(YACC).
# LOG:
# LOG: Revision 1.7  1998/04/24 02:00:38  mmiers
# LOG: Build on Digital UNIX.
# LOG:
# LOG: Revision 1.6  1998/04/24 01:41:28  mmiers
# LOG: General cleanup of the build system.  Need to verify on Digital Unix
# LOG: to make sure this is ok.
# LOG:
# LOG: Revision 1.5  1998/04/13 21:16:29  mmiers
# LOG: Resolving some cross-platform issues.
# LOG:
# LOG: Revision 1.4  1998/04/09 01:47:16  mmiers
# LOG: Some of these are false positives, but most have had modifications.  More
# LOG: work on the infrastructure.
# LOG:
# LOG: Revision 1.3  1998/04/07 14:33:45  mmiers
# LOG: Add C++ definitions
# LOG:
# LOG: Revision 1.2  1998/03/13 04:46:43  mmiers
# LOG: For the most part, TCAP modifications.  Quite a few of these files are false
# LOG: positive due to timestamps.
# LOG:
# LOG: Revision 1.1  1998/01/24 22:36:54  mmiers
# LOG: Tree cleanup.
# LOG:
# LOG: Revision 1.1.1.1  1997/11/04 20:13:16  mmiers
# LOG: Baseline
# LOG:
#
############################################################################

#
# these variables must be set elsewhere
#
# PROTOCOL=[CCITT|ANSI] - which protocol family to use
# PLATFORM=[solaris|QNX|HPUX|DECUNIX|linux] - platform dependent flags
# ITS_ROOT=[?] - the directory containing this file
# ENABLE_DNS=[yes|no] - whether socket calls should use the resolver lib
# DEBUG_BUILD=[yes|no] - whether to include symbols and extra debug emit
#
# some of these will be defaulted:
#
# PROTOCOL=ANSI
# ENABLE_DNS=no
# DEBUG_BUILD=no
#

#
# whose version?
#
ifeq ($(PROTOCOL),)
PROTOCOL=ANSI
endif

#
# about DNS...
#
ifeq ($(ENABLE_DNS),yes)
DNSDEFS= -DUSE_DNS
else
DNSDEFS=
endif

#
# need to set the DSM type.  Usually this will be stub
#
DSMTYPE=STUB

#
# the platform must be set in the environment.  The structure of this file
# assumes a "make" that understands conditionals.  That may be only GNU
# make, but as we assume GNU C++ or compatible, that's ok.
#

#
# for QNX
#
ifeq ($(PLATFORM),QNX)

AR=        ar
CXXAR=     ar
ARFLAGS=   cruv
CXXARFLAGS=cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        ld
CXX=
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
LN=        ln -s
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDATAKIN -D$(PROTOCOL) -DPLATFORM=$(PLATFORM) $(DNSDEFS)
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=      o
YACC=      yacc
LEX=       lex
LEXLIB=    -ll
EXC=       $(ITS_ROOT)/tools/bin/exc

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -Oile=100 -g2 $(INCLS) -DDEBUG
CXXFLAGS=  -Oile=100 -g2 $(INCLS) -DDEBUG
ASNRTCFLAGS=    -Oile=100 $(INCLS) -DDEBUG
ASNRTCXXFLAGS=  -Oile=100 $(INCLS) -DDEBUG
DBGSUFFIX= D
else
CFLAGS=    -Oile=100 $(INCLS)
CXXFLAGS=  -Oile=100 $(INCLS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX=
endif

#
# end QNX
#
endif

#
# for NMS
#
ifeq ($(PLATFORM),NT)
AR=        echo
CXXAR=     echo
ARFLAGS=
CXXARFLAGS=
CP=        cp
RM=        rm -f
CC=        cl.exe
CXX=       cl.exe
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        link.exe
MV=        copy
LN=        copy
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DNMS -D$(PROTOCOL) -Dalloca=_alloca \
           -DWIN32 -D_DEBUG -D_CONSOLE -D_MBCS -DPLATFORM=$(PLATFORM) \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DHAVE_THROW_SPECS \
           -DHAVE_STL $(DNSDEFS)
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
else
CFLAGS=    $(INCLS) $(DEFINES) -nologo -MLd -W3 -Gm -GX -Zi -Od \
           -YX -FD
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
endif
LDFLAGS=   -nologo -subsystem:console -incremental:yes \
           -debug -machine:I386 -pdbtype:sept 
SOCKLIBS=
THREADLIBS=
SYSLIBS=   kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib \
           advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib \
           odbc32.lib odbccp32.lib
OEXT=      obj
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc
DBGSUFFIX= D
endif

#
# for Alpha
#
ifeq ($(PLATFORM),DECUNIX)
AR=        ar
CXXAR=     ar
ARFLAGS=   cruv
CXXARFLAGS=cruv
CP=        cp
RM=        rm -f
CC=        cc
LD=        cxx
MV=        mv
LN=        ln -s
MKDIR=     mkdir
CXX=       cxx
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -DDECSS7 -D$(PROTOCOL) -DPLATFORM=$(PLATFORM) -D$(PLATFORM) \
           -Dunix -D_REENTRANT \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DHAVE_THROW_SPECS \
           -DHAVE_STL -DUSING_FLEX $(DNSDEFS)
SOCKLIBS=
THREADLIBS=
SYSLIBS=   -ldl
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -pthread -std1 -g2 $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  -pthread -g -std strict_ansi -ptr $(ITS_ROOT)/cxx_repository \
           $(INCLS) $(DEFINES) -DDEBUG
ASNRTCFLAGS=    -pthread -std1 $(INCLS) $(DEFINES) -DDEBUG
ASNRTCXXFLAGS=  -pthread -std strict_ansi -ptr $(ITS_ROOT)/cxx_repository \
                $(INCLS) $(DEFINES) -DDEBUG
DBGSUFFIX= D
else
CFLAGS=    -pthread -std1 $(INCLS) $(DEFINES)
CXXFLAGS=  -pthread -std strict_ansi -ptr $(ITS_ROOT)/cxx_repository \
           $(INCLS) $(DEFINES)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX=
endif
LDFLAGS=   -pthread -ptr $(ITS_ROOT)/cxx_repository
endif

#
# for Solaris
#
ifeq ($(PLATFORM),solaris)

AR=        ar
CXXAR=     CC
ARFLAGS=   cruv
CXXARFLAGS=-xar -o
SHAREDAR=  /usr/ccs/bin/ld
SHAREDARFLAGS=-G -z allextract -o
CXXSHAREDAR=CC
CXXSHAREDARFLAGS=-G -z allextract -o
CP=        cp
RM=        rm -f
CC=        cc
CXX=       CC
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        CC
MV=        mv
LN=        ln -s
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DUSE_HEAP -DNEED_LARGE_CONTEXT \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DHAVE_THROW_SPECS \
           -DHAVE_STL $(DNSDEFS) 
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread -lmtmalloc
SYSLIBS=   -ldl -lrt
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc
SOFLAGS=   -KPIC
SO_EXT=    so
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g -xs $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS) -mt
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS) -mt
ASNRTCXXFLAGS=  $(ASNRTCFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -g $(INCLS) $(DEFINES) $(SOFLAGS) -mt -fast
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX=
LDFLAGS=
endif

ifeq ($(CCITT_USE_16_BIT_PC), yes)
DEFINES:= $(DEFINES) -DCCITT_16BIT_PC
endif

ifeq ($(USE_CPOT_STACK), yes)
DEFINES:= $(DEFINES) -DCPOT_SPLIT_STACK
endif

#
# end solaris
#
endif

#
# for Solaris-64
#
ifeq ($(PLATFORM),solaris64)

AR=        ar
CXXAR=     CC
ARFLAGS=   cruv
CXXARFLAGS=-xar -o
SHAREDAR=  /usr/ccs/bin/ld
SHAREDARFLAGS=-G -z allextract -o
CXXSHAREDAR=/usr/ccs/bin/ld
CXXSHAREDARFLAGS=-G -z allextract -o
CP=        cp
RM=        rm -f
CC=        cc -xtarget=ultra -xarch=v9
CXX=       CC -xtarget=ultra -xarch=v9
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        CC -xtarget=ultra -xarch=v9
MV=        mv
LN=        ln -s
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DPLATFORM=$(PLATFORM) \
           -D$(PLATFORM) -DUSE_HEAP -DNEED_LARGE_CONTEXT \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DHAVE_THROW_SPECS \
           -DHAVE_STL $(DNSDEFS) 
SOCKLIBS=  -lnsl -lsocket
THREADLIBS=-lthread -lmtmalloc
SYSLIBS=   -ldl -lrt
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=
EXC=       $(ITS_ROOT)/tools/bin/exc
SOFLAGS=   -KPIC
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS) -mt -fast
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS) -mt
ASNRTCXXFLAGS=  $(ASNRTCFLAGS)
DBGSUFFIX= D
else
CFLAGS=    $(INCLS) $(DEFINES) $(SOFLAGS) -mt
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX=
LDFLAGS= -xtarget=ultra -xarch=v9
endif


#
# end solaris
#
endif

#
# for Linux
#
ifeq ($(PLATFORM),linux)
AR=        ar
CXXAR=     ar
ARFLAGS=   cruv
CXXARFLAGS=cruv
SHAREDAR=  ld
SHAREDARFLAGS=-shared --whole-archive -o
CXXSHAREDAR=ld
CXXSHAREDARFLAGS=-shared --whole-archive -o
CP=        cp
RM=        rm -f
CC=        gcc -D_GNU_SOURCE -pipe
#
# use this for g++ > 3.0
#
CXX=       g++ -D_GNU_SOURCE -pipe -Wno-deprecated
LD=        g++ -D_GNU_SOURCE -pipe -Wno-deprecated
#
# else this
#
#CXX=       g++ -D_GNU_SOURCE -pipe
#LD=        g++ -D_GNU_SOURCE -pipe
#
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
MV=        mv
LN=        ln -s
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DUSING_FLEX -DUSE_HEAP \
           -DPLATFORM=$(PLATFORM) -D_MIT_POSIX_THREADS \
           -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE -DHAVE_THROW_SPECS \
           -DHAVE_STL $(DNSDEFS)
SOCKLIBS=
THREADLIBS=-lpthread
SYSLIBS=   -ldl
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=    -lfl
EXC=       $(ITS_ROOT)/tools/bin/exc
SOFLAGS=   -fpic
CXXDLLLIBS=--no-whole-archive `g++ -print-libgcc-file-name`
ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g -Wall $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS)
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    -Wall $(INCLS) $(DEFINES) -DDEBUG $(SOFLAGS)
ASNRTCXXFLAGS=  $(ASNRTCFLAGS)
DBGSUFFIX= D
else
CFLAGS=    -Wall $(INCLS) $(DEFINES) -DNDEBUG $(SOFLAGS)
CXXFLAGS=  $(CFLAGS)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX=
endif

#
# end linux
#
endif

#
#
# for HPUX
#
ifeq ($(PLATFORM),hpux)
AR=        ar
CXXAR=     ar
ARFLAGS=   cruv
CXXARFLAGS=cruv
CP=        cp
RM=        rm -f
CC=        cc
CXX=       /opt/aCC/bin/aCC +W749
ASNC=      $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS= -A -a -f
LD=        /opt/aCC/bin/aCC
MV=        mv
LN=        ln -s
MKDIR=     mkdir
INCLS=     -I. -I$(ITS_ROOT)/common/include
DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DRW_MULTI_THREAD -DUSING_FLEX \
           -DPLATFORM=$(PLATFORM) -DHPUX -D_MIT_POSIX_THREADS \
	   -Dunix $(DNSDEFS)
SOCKLIBS=
THREADLIBS=-ldce
SYSLIBS=   -ldl
OEXT=      o
YACC=      bison
LEX=       flex
LEXLIB=
LDFLAGS=
EXC=       $(ITS_ROOT)/tools/bin/exc

# old stuff
#
# CXX=       /opt/CC/bin/CC
# LD=        /opt/CC/bin/CC
# INCLS=     -I. -I$(ITS_ROOT)/common/include -I/opt/aCC/include -I/usr
# DEFINES=   -D$(PROTOCOL) -D_REENTRANT -DRW_MULTI_THREAD -DUSING_FLEX \
#            -DPLATFORM=$(PLATFORM) -DHPUX -D_MIT_POSIX_THREADS
# CFLAGS=    +DAportable +eh -Ae -g $(INCLS) $(DEFINES)
# CXXFLAGS=  +DAportable +eh -g $(INCLS) $(DEFINES)

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    +DAportable -Ae -g $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  +DAportable -g $(INCLS) $(DEFINES)
ASNRTCFLAGS=    +DAportable -Ae $(INCLS) $(DEFINES) -DDEBUG
ASNRTCXXFLAGS=  +DAportable $(INCLS) $(DEFINES)

DBGSUFFIX= D
else
CFLAGS=    +DAportable -Ae $(INCLS) $(DEFINES)
CXXFLAGS=  +DAportable +O1 $(INCLS) $(DEFINES)
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)
DBGSUFFIX= 
endif

#
# end hpux
#
endif

#
#
# for vxworks
#
#
ifeq ($(PLATFORM),vxworks)
#
# Core Information
# Application type to build project
# For more information on processor and tool
# specific variable see vxconfig.vars.

include $(ITS_ROOT)/vxconfig.vars

AR=                 arpentium
AS=                 ccpentium
CXXAR=              arpentium
ARFLAGS=            crusv
CXXARFLAGS=         crusv
#
## Macros specific to the vxworks
#
OPTION_DEFINE_MACRO=-D
OPTION_INCLUDE_DIR= -I
POST_BUILD_RULE= 
PRJ_LIBS= 
SIZE=               sizepentium
VX_CFLAGS=          -mpentium -ansi -DRW_MULTI_THREAD \
                    -fvolatile -nostdlib -fno-builtin \
                    -fno-defer-pop

INCLS=              -I$(ITS_ROOT)/common/include -I$(WIND_BASE)/target/h \
                    -I$(ITS_ROOT)/MTP3/include \
		            -I$(ITS_ROOT)/SCCP/include -I$(ITS_ROOT)/TCAP/include \
                    -I$(ITS_ROOT)/ISUP/include -I.

CFLAGS_AS=          -g -mpentium -ansi -nostdinc -fvolatile \
                    -nostdlib -fno-builtin -fno-defer-pop -P \
                    -x assembler-with-cpp -I$(WIND_BASE)/target/h \
                    -DCPU=PENTIUM $(INCLS)

RM=                 rm -f
CC=                 ccpentium
CXX=                ccpentium 
SHAREDAR=           arpentium
SHAREDARFLAGS=      $(ARFLAGS) 
CXXSHAREDAR=        arpentium
CXXSHAREDARFLAGS=   $(ARFLAGS) 
LD_PARTIAL_FLAGS=   -X -r
LDDEPS= 
LDFLAGS=            -X -N
LD=                 ldpentium
NM=                 nmpentium -g	   
ASNC=               $(ITS_ROOT)/tools/bin/asnc
ASNCFLAGS=          -A -a -f
MV=                 mv
LN=                 ln -s
MKDIR=              mkdir
VPATH=              $(WIND_BASE)/target/h $(ITS_ROOT)/common/include \
                    $(ITS_ROOT)/MTP3/include $(ITS_ROOT)/SCCP/include \
                    $(ITS_ROOT)/TCAP/include $(ITS_ROOT)/ISUP/include


DEFINES=            -D$(PROTOCOL) -Dvxworks -D_REENTRANT -DUSING_FLEX \
                    -D_MIT_POSIX_THREADS \
                    -DHAVE_NAMESPACES -DHAVE_STD_NAMESPACE \
                    -DHAVE_THROW_SPECS -DHAVE_STL $(DNSDEFS)
SOCKLIBS=
THREADLIBS=
SYSLIBS=   
OEXT=               o
YACC=               bison
LEX=                flex
LEXLIB=             -lfl
EXC=                $(ITS_ROOT)/tools/bin/exc.exe

ifeq ($(DEBUG_BUILD),yes)
CFLAGS=    -g -c -DCPU=$(CPU) $(VX_CFLAGS) $(INCLS) $(DEFINES) -DDEBUG
CXXFLAGS=  -g $(CFLAGS) -DINCLUDE_CPLUS_STL $(CFLAGS) \
           -I$(WIND_BASE)/host/$(WIND_HOST_TYPE)/lib/gcc-lib/i586-wrs-vxworks/2.96-PentiumIII-991112/include
ASNRTCFLAGS=    -c -DCPU=$(CPU) $(VX_CFLAGS) $(INCLS) $(DEFINES) -DDEBUG
ASNRTCXXFLAGS=  $(ASNRTCFLAGS) -DINCLUDE_CPLUS_STL $(ASNRTCFLAGS) \
           -I$(WIND_BASE)/host/$(WIND_HOST_TYPE)/lib/gcc-lib/i586-wrs-vxworks/2.96-PentiumIII-991112/include

DBGSUFFIX= D
else
CFLAGS=    -DCPU=$(CPU) -O1 -c $(VX_CFLAGS) $(INCLS) $(DEFINES)
CXXFLAGS=  $(CFLAGS) -DINCLUDE_CPLUS_STL \
          -I$(WIND_BASE)/host/$(WIND_HOST_TYPE)/lib/gcc-lib/i586-wrs-vxworks/2.96-PentiumIII-991112/include
ASNRTCFLAGS=    $(CFLAGS)
ASNRTCXXFLAGS=  $(CXXFLAGS)

DBGSUFFIX=
endif
#
# end VxWorks
#
endif

#
# Globally shared stuff
#
BUILDDIR=.
ifeq ($(DEBUG_BUILD),yes)
BUILDDIR=Debug
else
ifeq ($(DEBUG_BUILD),no)
BUILDDIR=Release
endif
endif
