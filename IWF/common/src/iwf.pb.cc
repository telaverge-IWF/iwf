// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "iwf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* pbState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbState_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbIwfTranslator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbIwfTranslator_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRoutingLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRoutingLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbDiaMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbDiaMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbSccpAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbSccpAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* QualityOfService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QualityOfService_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbTcapDialogue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbTcapDialogue_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbSCCPParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbSCCPParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbTcapComponent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbTcapComponent_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbTcapBeginDialogue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbTcapBeginDialogue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionIdConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionIdConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoredIDPSMSToCCRIData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoredIDPSMSToCCRIData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDPToCCRIData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDPToCCRIData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbERBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbERBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbActivityTimerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbActivityTimerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbIwfDccaSessionCtxt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbIwfDccaSessionCtxt_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbConnectArgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbConnectArgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbACHData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbACHData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbCapRoTsl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbCapRoTsl_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbStoredUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbStoredUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbIwfTimerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbIwfTimerData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pbIwfTimerData_ETimerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* pbIwfTimerData_EKeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* pbSCCP_ADDR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbSCCP_ADDR_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbMtp3_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbMtp3_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbTcapTransactionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbTcapTransactionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbDiameterSessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbDiameterSessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbIwfFsmInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbIwfFsmInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbIwfSessionContextData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbIwfSessionContextData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* pbProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_iwf_2eproto() {
  protobuf_AddDesc_iwf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "iwf.proto");
  GOOGLE_CHECK(file != NULL);
  pbState_descriptor_ = file->message_type(0);
  static const int pbState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbState, name_),
  };
  pbState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbState_descriptor_,
      pbState::default_instance_,
      pbState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbState));
  pbIwfTranslator_descriptor_ = file->message_type(1);
  static const int pbIwfTranslator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTranslator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTranslator, id_),
  };
  pbIwfTranslator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbIwfTranslator_descriptor_,
      pbIwfTranslator::default_instance_,
      pbIwfTranslator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTranslator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTranslator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbIwfTranslator));
  pbRoutingLabel_descriptor_ = file->message_type(2);
  static const int pbRoutingLabel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, opc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, isnational_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, ossn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, usesccpcdpafrominmsg_),
  };
  pbRoutingLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbRoutingLabel_descriptor_,
      pbRoutingLabel::default_instance_,
      pbRoutingLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRoutingLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbRoutingLabel));
  pbDiaMsg_descriptor_ = file->message_type(3);
  static const int pbDiaMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, commandcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, requestbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, sessionid_),
  };
  pbDiaMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbDiaMsg_descriptor_,
      pbDiaMsg::default_instance_,
      pbDiaMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiaMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbDiaMsg));
  pbSccpAddress_descriptor_ = file->message_type(4);
  static const int pbSccpAddress_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, haspc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, hasssn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, routepcssn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, internationalroute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, globaltitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, pointcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, ssn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, gttlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, globtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, gtttype_),
  };
  pbSccpAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbSccpAddress_descriptor_,
      pbSccpAddress::default_instance_,
      pbSccpAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSccpAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbSccpAddress));
  QualityOfService_descriptor_ = file->message_type(5);
  static const int QualityOfService_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, slskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, networkind_),
  };
  QualityOfService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QualityOfService_descriptor_,
      QualityOfService::default_instance_,
      QualityOfService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QualityOfService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QualityOfService));
  pbTcapDialogue_descriptor_ = file->message_type(6);
  static const int pbTcapDialogue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, dialogueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, dialoguetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, abortreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, applicationcontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, qos_),
  };
  pbTcapDialogue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbTcapDialogue_descriptor_,
      pbTcapDialogue::default_instance_,
      pbTcapDialogue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapDialogue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbTcapDialogue));
  pbSCCPParameters_descriptor_ = file->message_type(7);
  static const int pbSCCPParameters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, sccpcallingpartyaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, sccpcalledpartyaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, opc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, dpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, isroutebygt_),
  };
  pbSCCPParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbSCCPParameters_descriptor_,
      pbSCCPParameters::default_instance_,
      pbSCCPParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCPParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbSCCPParameters));
  pbTcapComponent_descriptor_ = file->message_type(8);
  static const int pbTcapComponent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, lastcomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, invokeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, componenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, opcode_),
  };
  pbTcapComponent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbTcapComponent_descriptor_,
      pbTcapComponent::default_instance_,
      pbTcapComponent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapComponent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbTcapComponent));
  pbTcapBeginDialogue_descriptor_ = file->message_type(9);
  static const int pbTcapBeginDialogue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapBeginDialogue, opc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapBeginDialogue, sccpcallingpartyaddr_),
  };
  pbTcapBeginDialogue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbTcapBeginDialogue_descriptor_,
      pbTcapBeginDialogue::default_instance_,
      pbTcapBeginDialogue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapBeginDialogue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapBeginDialogue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbTcapBeginDialogue));
  SubscriptionIdConfig_descriptor_ = file->message_type(10);
  static const int SubscriptionIdConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionIdConfig, subidtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionIdConfig, subiddata_),
  };
  SubscriptionIdConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionIdConfig_descriptor_,
      SubscriptionIdConfig::default_instance_,
      SubscriptionIdConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionIdConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionIdConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionIdConfig));
  StoredIDPSMSToCCRIData_descriptor_ = file->message_type(11);
  static const int StoredIDPSMSToCCRIData_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, calltypeval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_service_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_dialed_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_called_ton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_cli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_location_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_vlr_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_call_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_msc_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_called_npi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_calling_noa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_cli_npi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_smsc_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sgsn_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_statusreportrequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_userdataheaderindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_replypath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_vpformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_messagetypeindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_protocolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_dcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_validityperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sm_rejectduplicate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sccp_callinggt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sccp_calledgt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_tcap_remote_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_tcap_local_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_cellid_areaid_lai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_event_type_sms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_tcap_error_cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_sccp_error_cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, cap_smspecificinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, m_totalgsuccservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, m_totalusuccservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, subscriptionidinfo_),
  };
  StoredIDPSMSToCCRIData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoredIDPSMSToCCRIData_descriptor_,
      StoredIDPSMSToCCRIData::default_instance_,
      StoredIDPSMSToCCRIData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredIDPSMSToCCRIData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoredIDPSMSToCCRIData));
  IDPToCCRIData_descriptor_ = file->message_type(12);
  static const int IDPToCCRIData_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, calltypeval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, service_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, dialed_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, called_ton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, cli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, calling_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, location_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, redirecting_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, redirecting_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, original_redirecting_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, redirection_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, redirecting_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, imsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, vlr_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, call_reference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, msc_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, called_npi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, calling_noa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, cli_npi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, clir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, sccp_callinggt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, sccp_calledgt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, gsm_forwarding_pending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, tcap_remote_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, tcap_local_transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, cellid_areaid_lai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, event_type_bcsm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, tcap_error_cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, sccp_error_cause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, gmsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, ext_basic_service_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, bearer_capability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, bearer_capability_transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, bearer_capability_transfer_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, bearer_capability_transfer_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, bearer_capability_cdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, capisfollowingon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, subscriptionidinfo_),
  };
  IDPToCCRIData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDPToCCRIData_descriptor_,
      IDPToCCRIData::default_instance_,
      IDPToCCRIData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDPToCCRIData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDPToCCRIData));
  pbERBData_descriptor_ = file->message_type(13);
  static const int pbERBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, erbrecvevttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, eventspecinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, recvlegid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, msgtype_),
  };
  pbERBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbERBData_descriptor_,
      pbERBData::default_instance_,
      pbERBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbERBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbERBData));
  pbActivityTimerData_descriptor_ = file->message_type(14);
  static const int pbActivityTimerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, attimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, responsetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, retrycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, invokeid_),
  };
  pbActivityTimerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbActivityTimerData_descriptor_,
      pbActivityTimerData::default_instance_,
      pbActivityTimerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbActivityTimerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbActivityTimerData));
  pbIwfDccaSessionCtxt_descriptor_ = file->message_type(15);
  static const int pbIwfDccaSessionCtxt_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, dccastate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, desthost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, destrealm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, iwfccfhaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, isfailoversupported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, isdone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, retrycount_),
  };
  pbIwfDccaSessionCtxt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbIwfDccaSessionCtxt_descriptor_,
      pbIwfDccaSessionCtxt::default_instance_,
      pbIwfDccaSessionCtxt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfDccaSessionCtxt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbIwfDccaSessionCtxt));
  pbConnectArgData_descriptor_ = file->message_type(16);
  static const int pbConnectArgData_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, hasservicecontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, hascapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, hascapconnectinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capanncaccessno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconnanncnonatrue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconnanncnoinn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconnanncnonpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconndestno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconndestnonature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconndestnonpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconndestinn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnonature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnonpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnonii_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnoari_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnosci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, genericnonqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectingnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectnonoa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectnonpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectnoari_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, origredirectreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectioncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, redirectreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, origcalledpartyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, originalcallednonpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, originalcallednonoa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, originalcallednoari_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconnocsiapplicable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconnsuppressionofannc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, capconncallingcategory_),
  };
  pbConnectArgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbConnectArgData_descriptor_,
      pbConnectArgData::default_instance_,
      pbConnectArgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConnectArgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbConnectArgData));
  pbACHData_descriptor_ = file->message_type(17);
  static const int pbACHData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbACHData, finalunitindication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbACHData, beeptone_),
  };
  pbACHData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbACHData_descriptor_,
      pbACHData::default_instance_,
      pbACHData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbACHData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbACHData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbACHData));
  pbCapRoTsl_descriptor_ = file->message_type(18);
  static const int pbCapRoTsl_offsets_[63] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, bcsmeventflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, capcallingpartynumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, serviceidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, receivedbasicservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, rousersessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, imsichargingidentifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, roservicecontextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, subscriptionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, rocuginformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, capmscaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, capgmscaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccainitialresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccaupdateresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccaterminateresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, receivedtcapcontinue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, receivedasr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, receivedidpsms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, receivedidp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, istimezoneseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, timezoneseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccaupdatemsccresultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isccamsccgrantedcctimezero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isreleasesent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, lastsentccrequesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccrequestnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isfirsterbrcvd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, calltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, scpaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, orgscpaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, capcontrolmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, terminationcause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, mappedidptoccridata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, recvappcontextname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, idpccridata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, recvgsucctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, recvnoanstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, currusucctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, cumulativegsucctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, cumulativeusucctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isfinalunitreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, recvfirsterbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, recverbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, callanswertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isfollowingon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, activitytimerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, strremotetransidforcdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, strlocaltransidforcdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, biscallcontinueset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, sessionstarttimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, connectmaxduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, erbanswertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, erbspecificinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, dccactxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isfailedcdrlogged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, releasecause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, currstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, connectarg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, achdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, discontriggertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, ccfhfailedoverreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, triggerfollowonsession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, updatetriggertimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, isccrtbuiltforinvalidccai_),
  };
  pbCapRoTsl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbCapRoTsl_descriptor_,
      pbCapRoTsl::default_instance_,
      pbCapRoTsl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbCapRoTsl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbCapRoTsl));
  pbStoredUserData_descriptor_ = file->message_type(19);
  static const int pbStoredUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbStoredUserData, caprotsl_),
  };
  pbStoredUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbStoredUserData_descriptor_,
      pbStoredUserData::default_instance_,
      pbStoredUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbStoredUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbStoredUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbStoredUserData));
  pbIwfTimerData_descriptor_ = file->message_type(20);
  static const int pbIwfTimerData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, m_etimertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, m_ekeytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, m_tstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, m_uiduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, m_uitimerid_),
  };
  pbIwfTimerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbIwfTimerData_descriptor_,
      pbIwfTimerData::default_instance_,
      pbIwfTimerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfTimerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbIwfTimerData));
  pbIwfTimerData_ETimerType_descriptor_ = pbIwfTimerData_descriptor_->enum_type(0);
  pbIwfTimerData_EKeyType_descriptor_ = pbIwfTimerData_descriptor_->enum_type(1);
  pbSCCP_ADDR_descriptor_ = file->message_type(21);
  static const int pbSCCP_ADDR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCP_ADDR, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCP_ADDR, length_),
  };
  pbSCCP_ADDR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbSCCP_ADDR_descriptor_,
      pbSCCP_ADDR::default_instance_,
      pbSCCP_ADDR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCP_ADDR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbSCCP_ADDR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbSCCP_ADDR));
  pbMtp3_Header_descriptor_ = file->message_type(22);
  static const int pbMtp3_Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMtp3_Header, sio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMtp3_Header, label_),
  };
  pbMtp3_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbMtp3_Header_descriptor_,
      pbMtp3_Header::default_instance_,
      pbMtp3_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMtp3_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMtp3_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbMtp3_Header));
  pbTcapTransactionData_descriptor_ = file->message_type(23);
  static const int pbTcapTransactionData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, ltid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, oaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, daddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, qos_),
  };
  pbTcapTransactionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbTcapTransactionData_descriptor_,
      pbTcapTransactionData::default_instance_,
      pbTcapTransactionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTcapTransactionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbTcapTransactionData));
  pbDiameterSessionData_descriptor_ = file->message_type(24);
  static const int pbDiameterSessionData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, peerinst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, graceperiod_),
  };
  pbDiameterSessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbDiameterSessionData_descriptor_,
      pbDiameterSessionData::default_instance_,
      pbDiameterSessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbDiameterSessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbDiameterSessionData));
  pbIwfFsmInfo_descriptor_ = file->message_type(25);
  static const int pbIwfFsmInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, prevstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, upstrmreqprotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, dnstrmreqprotocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, diasessionidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, diasessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, tcapdialogueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, currrcvddiamsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, currrcvdtcapdlg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, currrcvdtcapcpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, currtcapbegindlg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, iscurrsenderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, sccpparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, sgsnaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, isdiarespsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, isroutebygt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, translator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, routinglabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, invokeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, selfsccpaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, istcapend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, startnoeventtimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, isfinalupstrmreqsent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, markforrollback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, flowfailure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, isclosestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, timerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, tcapinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, diameterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, freelistkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, actionrulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, callingsccpaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, lastsenttcapcptopcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, isccfhactiontaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, donttriggerfollowonsessionforccauerror_),
  };
  pbIwfFsmInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbIwfFsmInfo_descriptor_,
      pbIwfFsmInfo::default_instance_,
      pbIwfFsmInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfFsmInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbIwfFsmInfo));
  pbIwfSessionContextData_descriptor_ = file->message_type(26);
  static const int pbIwfSessionContextData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, originhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, originrealm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, oldhost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, oldrealm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, sccpparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, oldcpaitu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, oldcallingpartyaddrpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, oldopc_),
  };
  pbIwfSessionContextData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbIwfSessionContextData_descriptor_,
      pbIwfSessionContextData::default_instance_,
      pbIwfSessionContextData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbIwfSessionContextData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbIwfSessionContextData));
  pbProtocol_descriptor_ = file->enum_type(0);
  TransState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_iwf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbState_descriptor_, &pbState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbIwfTranslator_descriptor_, &pbIwfTranslator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbRoutingLabel_descriptor_, &pbRoutingLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbDiaMsg_descriptor_, &pbDiaMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbSccpAddress_descriptor_, &pbSccpAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QualityOfService_descriptor_, &QualityOfService::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbTcapDialogue_descriptor_, &pbTcapDialogue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbSCCPParameters_descriptor_, &pbSCCPParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbTcapComponent_descriptor_, &pbTcapComponent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbTcapBeginDialogue_descriptor_, &pbTcapBeginDialogue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionIdConfig_descriptor_, &SubscriptionIdConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoredIDPSMSToCCRIData_descriptor_, &StoredIDPSMSToCCRIData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDPToCCRIData_descriptor_, &IDPToCCRIData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbERBData_descriptor_, &pbERBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbActivityTimerData_descriptor_, &pbActivityTimerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbIwfDccaSessionCtxt_descriptor_, &pbIwfDccaSessionCtxt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbConnectArgData_descriptor_, &pbConnectArgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbACHData_descriptor_, &pbACHData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbCapRoTsl_descriptor_, &pbCapRoTsl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbStoredUserData_descriptor_, &pbStoredUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbIwfTimerData_descriptor_, &pbIwfTimerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbSCCP_ADDR_descriptor_, &pbSCCP_ADDR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbMtp3_Header_descriptor_, &pbMtp3_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbTcapTransactionData_descriptor_, &pbTcapTransactionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbDiameterSessionData_descriptor_, &pbDiameterSessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbIwfFsmInfo_descriptor_, &pbIwfFsmInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbIwfSessionContextData_descriptor_, &pbIwfSessionContextData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_iwf_2eproto() {
  delete pbState::default_instance_;
  delete pbState_reflection_;
  delete pbIwfTranslator::default_instance_;
  delete pbIwfTranslator_reflection_;
  delete pbRoutingLabel::default_instance_;
  delete pbRoutingLabel_reflection_;
  delete pbDiaMsg::default_instance_;
  delete pbDiaMsg_reflection_;
  delete pbSccpAddress::default_instance_;
  delete pbSccpAddress_reflection_;
  delete QualityOfService::default_instance_;
  delete QualityOfService_reflection_;
  delete pbTcapDialogue::default_instance_;
  delete pbTcapDialogue_reflection_;
  delete pbSCCPParameters::default_instance_;
  delete pbSCCPParameters_reflection_;
  delete pbTcapComponent::default_instance_;
  delete pbTcapComponent_reflection_;
  delete pbTcapBeginDialogue::default_instance_;
  delete pbTcapBeginDialogue_reflection_;
  delete SubscriptionIdConfig::default_instance_;
  delete SubscriptionIdConfig_reflection_;
  delete StoredIDPSMSToCCRIData::default_instance_;
  delete StoredIDPSMSToCCRIData_reflection_;
  delete IDPToCCRIData::default_instance_;
  delete IDPToCCRIData_reflection_;
  delete pbERBData::default_instance_;
  delete pbERBData_reflection_;
  delete pbActivityTimerData::default_instance_;
  delete pbActivityTimerData_reflection_;
  delete pbIwfDccaSessionCtxt::default_instance_;
  delete pbIwfDccaSessionCtxt_reflection_;
  delete pbConnectArgData::default_instance_;
  delete pbConnectArgData_reflection_;
  delete pbACHData::default_instance_;
  delete pbACHData_reflection_;
  delete pbCapRoTsl::default_instance_;
  delete pbCapRoTsl_reflection_;
  delete pbStoredUserData::default_instance_;
  delete pbStoredUserData_reflection_;
  delete pbIwfTimerData::default_instance_;
  delete pbIwfTimerData_reflection_;
  delete pbSCCP_ADDR::default_instance_;
  delete pbSCCP_ADDR_reflection_;
  delete pbMtp3_Header::default_instance_;
  delete pbMtp3_Header_reflection_;
  delete pbTcapTransactionData::default_instance_;
  delete pbTcapTransactionData_reflection_;
  delete pbDiameterSessionData::default_instance_;
  delete pbDiameterSessionData_reflection_;
  delete pbIwfFsmInfo::default_instance_;
  delete pbIwfFsmInfo_reflection_;
  delete pbIwfSessionContextData::default_instance_;
  delete pbIwfSessionContextData_reflection_;
}

void protobuf_AddDesc_iwf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tiwf.proto\"#\n\007pbState\022\n\n\002Id\030\001 \001(\r\022\014\n\004Na"
    "me\030\002 \001(\t\"+\n\017pbIwfTranslator\022\014\n\004Name\030\001 \001("
    "\t\022\n\n\002Id\030\002 \001(\r\"]\n\016pbRoutingLabel\022\013\n\003oPc\030\001"
    " \001(\r\022\022\n\nisNational\030\002 \001(\010\022\014\n\004oSsn\030\003 \001(\r\022\034"
    "\n\024useSccpCdPAFromInMsg\030\004 \001(\010\"X\n\010pbDiaMsg"
    "\022\023\n\013CommandCode\030\001 \001(\r\022\022\n\nRequestBit\030\002 \001("
    "\010\022\020\n\010username\030\003 \001(\t\022\021\n\tSessionId\030\004 \001(\t\"\323"
    "\001\n\rpbSccpAddress\022\n\n\002id\030\001 \001(\t\022\r\n\005hasPc\030\002 "
    "\001(\010\022\016\n\006hasSsn\030\003 \001(\010\022\022\n\nroutePCSSN\030\004 \001(\010\022"
    "\032\n\022internationalRoute\030\005 \001(\010\022\023\n\013globalTit"
    "le\030\006 \001(\010\022\021\n\tPointCode\030\007 \001(\r\022\013\n\003ssn\030\010 \001(\r"
    "\022\016\n\006gttlen\030\t \001(\r\022\021\n\tglobTitle\030\n \001(\014\022\017\n\007g"
    "ttType\030\013 \001(\r\"W\n\020QualityOfService\022\r\n\005flag"
    "s\030\001 \001(\r\022\016\n\006slsKey\030\002 \001(\r\022\020\n\010priority\030\003 \001("
    "\r\022\022\n\nnetworkInd\030\004 \001(\r\"\213\001\n\016pbTcapDialogue"
    "\022\022\n\nDialogueId\030\001 \001(\r\022\024\n\014DialogueType\030\002 \001"
    "(\r\022\023\n\013AbortReason\030\003 \001(\t\022\032\n\022ApplicationCo"
    "ntext\030\004 \001(\014\022\036\n\003Qos\030\005 \001(\0132\021.QualityOfServ"
    "ice\"\234\001\n\020pbSCCPParameters\022,\n\024SccpCallingP"
    "artyAddr\030\001 \001(\0132\016.pbSccpAddress\022+\n\023SccpCa"
    "lledPartyAddr\030\002 \001(\0132\016.pbSccpAddress\022\013\n\003O"
    "pc\030\003 \001(\r\022\013\n\003Dpc\030\004 \001(\r\022\023\n\013isRouteByGt\030\005 \001"
    "(\010\"a\n\017pbTcapComponent\022\025\n\rlastComponent\030\001"
    " \001(\r\022\020\n\010invokeId\030\002 \001(\r\022\025\n\rcomponentType\030"
    "\003 \001(\r\022\016\n\006opCode\030\004 \001(\007\"P\n\023pbTcapBeginDial"
    "ogue\022\013\n\003oPc\030\001 \001(\r\022,\n\024SccpCallingPartyAdd"
    "r\030\002 \001(\0132\016.pbSccpAddress\">\n\024SubscriptionI"
    "dConfig\022\021\n\tsubIdType\030\001 \001(\r\022\023\n\tsubIdData\030"
    "\002 \001(\t:\000\"\254\t\n\026StoredIDPSMSToCCRIData\022\026\n\013ca"
    "llTypeVal\030\001 \001(\r:\0010\022\032\n\017CAP_Service_Key\030\002 "
    "\001(\r:\0010\022\033\n\021CAP_Dialed_Digits\030\003 \001(\t:\000\022\034\n\016C"
    "AP_Called_TON\030\004 \001(\r:\0041000\022\021\n\007CAP_CLI\030\005 \001"
    "(\t:\000\022\035\n\023CAP_Location_Number\030\006 \001(\t:\000\022\022\n\010C"
    "AP_IMSI\030\007 \001(\t:\000\022\030\n\016CAP_VLR_Number\030\010 \001(\t:"
    "\000\022\034\n\022CAP_Call_Reference\030\t \001(\t:\000\022\031\n\017CAP_M"
    "SC_Address\030\n \001(\t:\000\022\034\n\016CAP_Called_NPI\030\013 \001"
    "(\r:\0041000\022\035\n\017CAP_Calling_NOA\030\014 \001(\r:\0041000\022"
    "\031\n\013CAP_CLI_NPI\030\r \001(\r:\0041000\022\031\n\013CAP_Versio"
    "n\030\016 \001(\r:\0041000\022\032\n\020CAP_SMSC_Address\030\017 \001(\t:"
    "\000\022\032\n\020CAP_SGSN_Address\030\020 \001(\t:\000\022\025\n\013CAP_SM_"
    "IMEI\030\021 \001(\t:\000\022$\n\032CAP_SM_StatusReportReque"
    "st\030\022 \001(\t:\000\022(\n\036CAP_SM_UserDataHeaderIndic"
    "ator\030\023 \001(\t:\000\022\032\n\020CAP_SM_ReplyPath\030\024 \001(\t:\000"
    "\022\031\n\017CAP_SM_VPFormat\030\025 \001(\t:\000\022%\n\033CAP_SM_Me"
    "ssageTypeIndicator\030\026 \001(\t:\000\022\033\n\021CAP_SM_Pro"
    "tocolID\030\027 \001(\t:\000\022\024\n\nCAP_SM_DCS\030\030 \001(\t:\000\022\037\n"
    "\025CAP_SM_ValidityPeriod\030\031 \001(\t:\000\022 \n\026CAP_SM"
    "_RejectDuplicate\030\032 \001(\t:\000\022\034\n\022CAP_SCCP_Cal"
    "lingGT\030\033 \001(\t:\000\022\033\n\021CAP_SCCP_CalledGT\030\034 \001("
    "\t:\000\022(\n\036CAP_TCAP_Remote_Transaction_Id\030\035 "
    "\001(\t:\000\022\'\n\035CAP_TCAP_Local_Transaction_Id\030\036"
    " \001(\t:\000\022\037\n\025CAP_CellID_AreaID_LAI\030\037 \001(\t:\000\022"
    " \n\022CAP_Event_Type_SMS\030  \001(\r:\0041000\022!\n\024CAP"
    "_TCAP_Error_Cause\030! \001(\r:\003500\022\037\n\024CAP_SCCP"
    "_Error_Cause\030\" \001(\r:\0010\022\034\n\022CAP_SMSpecificI"
    "nfo\030# \001(\t:\000\022\036\n\023m_totalGSUCCService\030$ \001(\r"
    ":\0010\022\036\n\023m_totalUSUCCService\030% \001(\r:\0010\0221\n\022s"
    "ubscriptionIdInfo\030& \001(\0132\025.SubscriptionId"
    "Config\"\231\t\n\rIDPToCCRIData\022\026\n\013callTypeVal\030"
    "\001 \001(\r:\0010\022\026\n\013Service_Key\030\002 \001(\r:\0010\022\027\n\rDial"
    "ed_Digits\030\003 \001(\014:\000\022\030\n\nCalled_TON\030\004 \001(\r:\0041"
    "000\022\r\n\003CLI\030\005 \001(\014:\000\022\036\n\020Calling_Category\030\006"
    " \001(\r:\0041000\022\031\n\017Location_Number\030\007 \001(\014:\000\022\034\n"
    "\022Redirecting_Number\030\010 \001(\014:\000\022#\n\025Redirecti"
    "ng_Indicator\030\t \001(\r:\0041000\022)\n\033Original_Red"
    "irecting_Reason\030\n \001(\r:\0041000\022!\n\023Redirecti"
    "on_Counter\030\013 \001(\r:\0041000\022 \n\022Redirecting_Re"
    "ason\030\014 \001(\r:\0041000\022\016\n\004IMSI\030\r \001(\014:\000\022\024\n\nVLR_"
    "Number\030\016 \001(\014:\000\022\030\n\016Call_Reference\030\017 \001(\014:\000"
    "\022\025\n\013MSC_Address\030\020 \001(\014:\000\022\030\n\nCalled_NPI\030\021 "
    "\001(\r:\0041000\022\031\n\013Calling_NOA\030\022 \001(\r:\0041000\022\025\n\007"
    "CLI_NPI\030\023 \001(\r:\0041000\022\022\n\004CLIR\030\024 \001(\r:\0041000\022"
    "\025\n\007Version\030\025 \001(\r:\0041000\022\030\n\016SCCP_CallingGT"
    "\030\026 \001(\014:\000\022\027\n\rSCCP_CalledGT\030\027 \001(\014:\000\022$\n\026GSM"
    "_Forwarding_Pending\030\030 \001(\r:\0041000\022$\n\032TCAP_"
    "Remote_Transaction_Id\030\031 \001(\014:\000\022#\n\031TCAP_Lo"
    "cal_Transaction_Id\030\032 \001(\014:\000\022\033\n\021CellID_Are"
    "aID_LAI\030\033 \001(\014:\000\022\035\n\017Event_Type_BCSM\030\034 \001(\r"
    ":\0041000\022\035\n\020TCAP_Error_Cause\030\035 \001(\r:\003500\022\033\n"
    "\020SCCP_Error_Cause\030\036 \001(\r:\0010\022\016\n\004GMSC\030\037 \001(\014"
    ":\000\022 \n\026Ext_Basic_Service_Code\030  \001(\014:\000\022\033\n\021"
    "Bearer_Capability\030! \001(\014:\000\022$\n\032Bearer_Capa"
    "bility_Transfer\030\" \001(\014:\000\022)\n\037Bearer_Capabi"
    "lity_Transfer_Rate\030# \001(\014:\000\022)\n\037Bearer_Cap"
    "ability_Transfer_Mode\030$ \001(\014:\000\022\037\n\025Bearer_"
    "Capability_Cdr\030% \001(\014:\000\022\037\n\020CAPIsFollowing"
    "On\030& \001(\010:\005false\0221\n\022subscriptionIdInfo\030\' "
    "\001(\0132\025.SubscriptionIdConfig\"i\n\tpbERBData\022"
    "\031\n\016erbRecvEvtType\030\001 \001(\r:\0010\022\027\n\reventSpecI"
    "nfo\030\002 \001(\t:\000\022\024\n\trecvlegId\030\003 \001(\r:\0010\022\022\n\007msg"
    "Type\030\004 \001(\r:\0010\"q\n\023pbActivityTimerData\022\022\n\007"
    "atTimer\030\001 \001(\r:\0010\022\032\n\017responseTimeout\030\002 \001("
    "\r:\0010\022\025\n\nretryCount\030\003 \001(\r:\0010\022\023\n\010invokeId\030"
    "\004 \001(\r:\0010\"\271\001\n\024pbIwfDccaSessionCtxt\022\024\n\tDcc"
    "aState\030\001 \001(\r:\0010\022\020\n\010destHost\030\002 \001(\t\022\021\n\tdes"
    "tRealm\030\003 \001(\t\022\025\n\rIwfCCFHAction\030\004 \001(\r\022!\n\023i"
    "sFailoverSupported\030\005 \001(\010:\004true\022\025\n\006isDone"
    "\030\006 \001(\010:\005false\022\025\n\nretryCount\030\007 \001(\r:\0010\"\356\006\n"
    "\020pbConnectArgData\022 \n\021hasServiceControl\030\001"
    " \001(\010:\005false\022\031\n\nhasCapInfo\030\002 \001(\010:\005false\022 "
    "\n\021hasCapConnectInfo\030\003 \001(\010:\005false\022\027\n\017capA"
    "nncAccessNo\030\004 \001(\t\022\033\n\023capConnAnncNoNatrue"
    "\030\005 \001(\r\022\030\n\020capConnAnncNoInn\030\006 \001(\r\022\030\n\020capC"
    "onnAnncNoNPI\030\007 \001(\r\022\025\n\rcapConnDestNo\030\010 \001("
    "\t\022\033\n\023capConnDestNoNature\030\t \001(\r\022\030\n\020capCon"
    "nDestNoNPI\030\n \001(\r\022\026\n\016capConnDestINN\030\013 \001(\r"
    "\022\021\n\tgenericNo\030\014 \001(\t\022\027\n\017genericNoNature\030\r"
    " \001(\r\022\024\n\014genericNoNPI\030\016 \001(\r\022\024\n\014genericNoN"
    "II\030\017 \001(\r\022\024\n\014genericNoARI\030\020 \001(\r\022\024\n\014generi"
    "cNoSCI\030\021 \001(\r\022\024\n\014genericNoNQI\030\022 \001(\r\022\026\n\016re"
    "directingNum\030\023 \001(\t\022\025\n\rredirectNoNOA\030\024 \001("
    "\r\022\025\n\rredirectNoNPI\030\025 \001(\r\022\025\n\rredirectNoAR"
    "I\030\026 \001(\r\022\023\n\013redirectInd\030\027 \001(\r\022\032\n\022origRedi"
    "rectReason\030\030 \001(\r\022\030\n\020redirectionCount\030\031 \001"
    "(\r\022\026\n\016redirectReason\030\032 \001(\r\022\031\n\021origCalled"
    "PartyId\030\033 \001(\t\022\033\n\023originalCalledNoNPI\030\034 \001"
    "(\r\022\033\n\023originalCalledNoNOA\030\035 \001(\r\022\033\n\023origi"
    "nalCalledNoARI\030\036 \001(\r\022\035\n\025capConnOCSIAppli"
    "cable\030\037 \001(\r\022 \n\030capConnSuppressionOfAnnc\030"
    "  \001(\r\022\036\n\026capConnCallingCategory\030! \001(\r\":\n"
    "\tpbACHData\022\033\n\023FinalUnitIndication\030\001 \001(\r\022"
    "\020\n\010BeepTone\030\002 \001(\r\"\217\017\n\npbCapRoTsl\022\025\n\rbcsm"
    "EventFlag\030\001 \001(\010\022\035\n\025capCallingPartyNumber"
    "\030\002 \001(\t\022\031\n\021serviceIdentifier\030\003 \001(\r\022\034\n\024rec"
    "eivedBasicService\030\004 \001(\010\022\027\n\017roUserSession"
    "Id\030\005 \001(\t\022\036\n\026imsiChargingIdentifier\030\006 \001(\t"
    "\022\032\n\022roServiceContextId\030\007 \001(\t\022-\n\016Subscrip"
    "tionId\030\010 \001(\0132\025.SubscriptionIdConfig\022\030\n\020r"
    "oCugInformation\030\t \001(\t\022\025\n\rcapMSCAddress\030\n"
    " \001(\t\022\026\n\016capGMSCAddress\030\013 \001(\t\022\034\n\024ccaIniti"
    "alResultCode\030\014 \001(\r\022\033\n\023ccaUpdateResultCod"
    "e\030\r \001(\r\022\036\n\026ccaTerminateResultCode\030\016 \001(\r\022"
    "#\n\024receivedTcapContinue\030\017 \001(\010:\005false\022\032\n\013"
    "receivedASR\030\020 \001(\010:\005false\022\035\n\016receivedIdpS"
    "ms\030\021 \001(\010:\005false\022\032\n\013receivedIdp\030\022 \001(\010:\005fa"
    "lse\022 \n\021isTimeZoneSeconds\030\023 \001(\010:\005false\022\027\n"
    "\017timeZoneSeconds\030\024 \001(\r\022\037\n\027ccaUpdateMsccR"
    "esultCode\030\025 \001(\r\022)\n\032isccaMsccGrantedCCTim"
    "eZero\030\026 \001(\010:\005false\022\025\n\risReleaseSent\030\027 \001("
    "\010\022\035\n\025lastSentCCRequestType\030\030 \001(\r\022\027\n\017ccRe"
    "questNumber\030\031 \001(\r\022\026\n\016isFirstERBRcvd\030\032 \001("
    "\010\022\020\n\010CallType\030\033 \001(\r\022\024\n\tscpAction\030\034 \001(\r:\001"
    "0\022\027\n\014orgScpAction\030\035 \001(\r:\0010\022\032\n\016capControl"
    "Mode\030\036 \001(\005:\002-1\022\030\n\020terminationCause\030\037 \001(\r"
    "\0224\n\023mappedIDPToCCRIData\030  \001(\0132\027.StoredID"
    "PSMSToCCRIData\022\032\n\022recvAppContextName\030! \001"
    "(\r\022#\n\013IdpCCRIData\030\" \001(\0132\016.IDPToCCRIData\022"
    "\025\n\rrecvGSUCCTime\030# \001(\r\022\025\n\rrecvNoAnsTime\030"
    "$ \001(\r\022\025\n\rcurrUSUCCTime\030% \001(\r\022\033\n\023cumulati"
    "veGSUCCTime\030& \001(\r\022\033\n\023cumulativeUSUCCTime"
    "\030\' \001(\r\022\"\n\023isFinalUnitReceived\030( \001(\010:\005fal"
    "se\022$\n\020recvFirstERBData\030) \001(\0132\n.pbERBData"
    "\022\037\n\013recvERBData\030* \001(\0132\n.pbERBData\022\033\n\023cal"
    "lAnswerTimeStamp\030+ \001(\r\022\025\n\risFollowingOn\030"
    ", \001(\010\022/\n\021activityTimerData\030- \001(\0132\024.pbAct"
    "ivityTimerData\022\036\n\026strRemoteTransIdForCDR"
    "\030. \001(\t\022\035\n\025strLocalTransIdForCDR\030/ \001(\t\022!\n"
    "\022bIsCallContinueSet\0300 \001(\010:\005false\022\035\n\025sess"
    "ionStartTimeStamp\0301 \001(\r\022\032\n\022connectMaxDur"
    "ation\0302 \001(\r\022\032\n\022erbAnswerTimeStamp\0303 \001(\r\022"
    "\027\n\017erbSpecificInfo\0304 \001(\t\022\'\n\010dccaCtxt\0305 \001"
    "(\0132\025.pbIwfDccaSessionCtxt\022 \n\021isFailedCDR"
    "Logged\0306 \001(\010:\005false\022\024\n\014releaseCause\0307 \001("
    "\r\022\036\n\tcurrState\0308 \001(\0162\013.TransState\022%\n\ncon"
    "nectArg\0309 \001(\0132\021.pbConnectArgData\022\033\n\007achd"
    "ata\030: \001(\0132\n.pbACHData\022\036\n\026disconTriggerTi"
    "meStamp\030; \001(\r\022\037\n\024ccfhFailedoverReason\030< "
    "\001(\007:\0010\022!\n\026triggerFollowOnSession\030= \001(\r:\001"
    "1\022\036\n\026updateTriggerTimeStamp\030> \001(\r\022(\n\031IsC"
    "CRTBuiltForInvalidCCAI\030\? \001(\010:\005false\"1\n\020p"
    "bStoredUserData\022\035\n\010caprotsl\030\001 \001(\0132\013.pbCa"
    "pRoTsl\"\215\004\n\016pbIwfTimerData\0220\n\014m_eTimerTyp"
    "e\030\001 \001(\0162\032.pbIwfTimerData.ETimerType\022,\n\nm"
    "_eKeyType\030\002 \001(\0162\030.pbIwfTimerData.EKeyTyp"
    "e\022\024\n\014m_tStartTime\030\003 \001(\007\022\024\n\014m_uiDuration\030"
    "\004 \001(\r\022\023\n\013m_uiTimerId\030\005 \001(\r\"\224\002\n\nETimerTyp"
    "e\022\022\n\016NO_EVENT_TIMER\020\001\022\022\n\016FAKE_ACH_TIMER\020"
    "\002\022\022\n\016ACTIVITY_TIMER\020\003\022\023\n\017ACH_DELTA_TIMER"
    "\020\004\022\r\n\tACR_TIMER\020\005\022\035\n\031CONNECT_MAX_CALL_DU"
    "RATION\020\006\022\033\n\027ACTIVITY_RESPONSE_TIMER\020\007\022\036\n"
    "\032IWF_SUBSCRIBER_AUDIT_TIMER\020\010\022\025\n\021IWF_DCC"
    "A_TX_TIMER\020\t\022\027\n\023IWF_ISFOLLOWN_TIMER\020\n\022\032\n"
    "\rINVALID_TIMER\020\377\377\377\377\377\377\377\377\377\001\"C\n\010EKeyType\022\030\n"
    "\013INVLAID_KEY\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nSESSION_ID\020\001\022"
    "\r\n\tDIALOG_ID\020\002\"+\n\013pbSCCP_ADDR\022\014\n\004addr\030\001 "
    "\001(\014\022\016\n\006length\030\002 \001(\r\"+\n\rpbMtp3_Header\022\013\n\003"
    "sio\030\001 \001(\r\022\r\n\005label\030\002 \001(\t\"\254\001\n\025pbTcapTrans"
    "actionData\022\014\n\004lTid\030\001 \001(\r\022\014\n\004rTid\030\002 \001(\r\022\033"
    "\n\005oaddr\030\003 \001(\0132\014.pbSCCP_ADDR\022\033\n\005daddr\030\004 \001"
    "(\0132\014.pbSCCP_ADDR\022\035\n\005label\030\005 \001(\0132\016.pbMtp3"
    "_Header\022\036\n\003qos\030\006 \001(\0132\021.QualityOfService\""
    "a\n\025pbDiameterSessionData\022\020\n\010peerInst\030\001 \001"
    "(\r\022\017\n\007timeout\030\002 \001(\r\022\020\n\010lifetime\030\003 \001(\r\022\023\n"
    "\013gracePeriod\030\004 \001(\r\"\371\t\n\014pbIwfFsmInfo\022\031\n\007c"
    "urrent\030\001 \002(\0132\010.pbState\022\033\n\tprevState\030\002 \002("
    "\0132\010.pbState\0224\n\021UpstrmReqProtocol\030\003 \001(\0162\013"
    ".pbProtocol:\014DIAMETER_S6A\022.\n\021DnstrmReqPr"
    "otocol\030\004 \001(\0162\013.pbProtocol:\006MAP_GR\022\030\n\rdia"
    "sessionIdx\030\005 \001(\r:\0010\022\026\n\014diaSessionId\030\006 \002("
    "\t:\000\022\031\n\016tcapDialogueId\030\007 \002(\r:\0010\022!\n\016currRc"
    "vdDiaMsg\030\010 \001(\0132\t.pbDiaMsg\022(\n\017currRcvdTca"
    "pDlg\030\t \001(\0132\017.pbTcapDialogue\022)\n\017currRcvdT"
    "capCpt\030\n \001(\0132\020.pbTcapComponent\022.\n\020currTc"
    "apBeginDlg\030\013 \001(\0132\024.pbTcapBeginDialogue\022\025"
    "\n\risCurrSendErr\030\014 \001(\010\022#\n\010userData\030\r \001(\0132"
    "\021.pbStoredUserData\022\022\n\007errCode\030\016 \001(\005:\0010\022\020"
    "\n\010username\030\017 \001(\t\022%\n\nsccpParams\030\020 \001(\0132\021.p"
    "bSCCPParameters\022\023\n\013sgsnAddress\030\021 \001(\t\022\025\n\r"
    "IsDiaRespSent\030\022 \001(\010\022\032\n\013isrouteByGT\030\023 \001(\010"
    ":\005false\022$\n\ntranslator\030\024 \001(\0132\020.pbIwfTrans"
    "lator\022%\n\014routingLabel\030\025 \001(\0132\017.pbRoutingL"
    "abel\022\023\n\010invokeId\030\026 \001(\r:\0010\022$\n\014selfSccpAdd"
    "r\030\027 \001(\0132\016.pbSccpAddress\022\030\n\tisTcapEnd\030\030 \001"
    "(\010:\005false\022 \n\021startNoEventTimer\030\031 \001(\010:\005fa"
    "lse\022\034\n\024isFinalUpstrmReqSent\030\032 \001(\010\022\036\n\017mar"
    "kForRollback\030\033 \001(\010:\005false\022\032\n\013flowFailure"
    "\030\034 \001(\010:\005false\022\033\n\014isCloseState\030\035 \001(\010:\005fal"
    "se\022\"\n\ttimerInfo\030\036 \003(\0132\017.pbIwfTimerData\022("
    "\n\010tcapInfo\030\037 \001(\0132\026.pbTcapTransactionData"
    "\022,\n\014diameterInfo\030  \001(\0132\026.pbDiameterSessi"
    "onData\022\023\n\013freeListKey\030! \001(\007\022\030\n\016actionRul"
    "eName\030\" \001(\t:\000\022\'\n\017callingSccpAddr\030# \001(\0132\016"
    ".pbSccpAddress\022\035\n\025lastSentTcapCptopcode\030"
    "$ \001(\007\022 \n\021isCCFHActionTaken\030% \001(\010:\005false\022"
    "5\n&dontTriggerFollowOnSessionforCCAUErro"
    "r\030& \001(\010:\005false\"\347\001\n\027pbIwfSessionContextDa"
    "ta\022\022\n\noriginHost\030\001 \001(\t\022\023\n\013originRealm\030\002 "
    "\001(\t\022\017\n\007oldHost\030\003 \001(\t\022\020\n\010oldRealm\030\004 \001(\t\022)"
    "\n\016sccpParameters\030\005 \001(\0132\021.pbSCCPParameter"
    "s\022!\n\toldcpaitu\030\006 \001(\0132\016.pbSccpAddress\022\"\n\032"
    "OldCallingPartyAddrpresent\030\007 \001(\010\022\016\n\006oldo"
    "pc\030\010 \001(\007*G\n\npbProtocol\022\020\n\014DIAMETER_S6A\020\000"
    "\022\017\n\013DIAMETER_RO\020\001\022\n\n\006MAP_GR\020\002\022\n\n\006CAP_GE\020"
    "\003*\376\001\n\nTransState\022\021\n\rINVALID_STATE\020\000\022\014\n\010R"
    "RB_SENT\020\001\022\014\n\010ACH_SENT\020\002\022\021\n\rFAKE_ACH_SENT"
    "\020\003\022\014\n\010ERB_RCVD\020\004\022\014\n\010ACR_RCVD\020\005\022\r\n\tFOLLOW"
    "_ON\020\006\022\020\n\014IS_FOLLOW_ON\020\007\022\017\n\013ER_SMS_RCVD\020\010"
    "\022\022\n\016ERB_DISCONNECT\020\t\022\025\n\021ACR_CALLACT_FALS"
    "E\020\n\022\016\n\nABORT_RCVD\020\013\022\017\n\013REJECT_RCVD\020\014\022\024\n\020"
    "ACR_CALLACT_TRUE\020\r", 9578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "iwf.proto", &protobuf_RegisterTypes);
  pbState::default_instance_ = new pbState();
  pbIwfTranslator::default_instance_ = new pbIwfTranslator();
  pbRoutingLabel::default_instance_ = new pbRoutingLabel();
  pbDiaMsg::default_instance_ = new pbDiaMsg();
  pbSccpAddress::default_instance_ = new pbSccpAddress();
  QualityOfService::default_instance_ = new QualityOfService();
  pbTcapDialogue::default_instance_ = new pbTcapDialogue();
  pbSCCPParameters::default_instance_ = new pbSCCPParameters();
  pbTcapComponent::default_instance_ = new pbTcapComponent();
  pbTcapBeginDialogue::default_instance_ = new pbTcapBeginDialogue();
  SubscriptionIdConfig::default_instance_ = new SubscriptionIdConfig();
  StoredIDPSMSToCCRIData::default_instance_ = new StoredIDPSMSToCCRIData();
  IDPToCCRIData::default_instance_ = new IDPToCCRIData();
  pbERBData::default_instance_ = new pbERBData();
  pbActivityTimerData::default_instance_ = new pbActivityTimerData();
  pbIwfDccaSessionCtxt::default_instance_ = new pbIwfDccaSessionCtxt();
  pbConnectArgData::default_instance_ = new pbConnectArgData();
  pbACHData::default_instance_ = new pbACHData();
  pbCapRoTsl::default_instance_ = new pbCapRoTsl();
  pbStoredUserData::default_instance_ = new pbStoredUserData();
  pbIwfTimerData::default_instance_ = new pbIwfTimerData();
  pbSCCP_ADDR::default_instance_ = new pbSCCP_ADDR();
  pbMtp3_Header::default_instance_ = new pbMtp3_Header();
  pbTcapTransactionData::default_instance_ = new pbTcapTransactionData();
  pbDiameterSessionData::default_instance_ = new pbDiameterSessionData();
  pbIwfFsmInfo::default_instance_ = new pbIwfFsmInfo();
  pbIwfSessionContextData::default_instance_ = new pbIwfSessionContextData();
  pbState::default_instance_->InitAsDefaultInstance();
  pbIwfTranslator::default_instance_->InitAsDefaultInstance();
  pbRoutingLabel::default_instance_->InitAsDefaultInstance();
  pbDiaMsg::default_instance_->InitAsDefaultInstance();
  pbSccpAddress::default_instance_->InitAsDefaultInstance();
  QualityOfService::default_instance_->InitAsDefaultInstance();
  pbTcapDialogue::default_instance_->InitAsDefaultInstance();
  pbSCCPParameters::default_instance_->InitAsDefaultInstance();
  pbTcapComponent::default_instance_->InitAsDefaultInstance();
  pbTcapBeginDialogue::default_instance_->InitAsDefaultInstance();
  SubscriptionIdConfig::default_instance_->InitAsDefaultInstance();
  StoredIDPSMSToCCRIData::default_instance_->InitAsDefaultInstance();
  IDPToCCRIData::default_instance_->InitAsDefaultInstance();
  pbERBData::default_instance_->InitAsDefaultInstance();
  pbActivityTimerData::default_instance_->InitAsDefaultInstance();
  pbIwfDccaSessionCtxt::default_instance_->InitAsDefaultInstance();
  pbConnectArgData::default_instance_->InitAsDefaultInstance();
  pbACHData::default_instance_->InitAsDefaultInstance();
  pbCapRoTsl::default_instance_->InitAsDefaultInstance();
  pbStoredUserData::default_instance_->InitAsDefaultInstance();
  pbIwfTimerData::default_instance_->InitAsDefaultInstance();
  pbSCCP_ADDR::default_instance_->InitAsDefaultInstance();
  pbMtp3_Header::default_instance_->InitAsDefaultInstance();
  pbTcapTransactionData::default_instance_->InitAsDefaultInstance();
  pbDiameterSessionData::default_instance_->InitAsDefaultInstance();
  pbIwfFsmInfo::default_instance_->InitAsDefaultInstance();
  pbIwfSessionContextData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_iwf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_iwf_2eproto {
  StaticDescriptorInitializer_iwf_2eproto() {
    protobuf_AddDesc_iwf_2eproto();
  }
} static_descriptor_initializer_iwf_2eproto_;

const ::google::protobuf::EnumDescriptor* pbProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbProtocol_descriptor_;
}
bool pbProtocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransState_descriptor_;
}
bool TransState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pbState::kIdFieldNumber;
const int pbState::kNameFieldNumber;
#endif  // !_MSC_VER

pbState::pbState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbState::InitAsDefaultInstance() {
}

pbState::pbState(const pbState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbState::~pbState() {
  SharedDtor();
}

void pbState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pbState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbState_descriptor_;
}

const pbState& pbState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbState* pbState::default_instance_ = NULL;

pbState* pbState::New() const {
  return new pbState;
}

void pbState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }
      
      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbState::MergeFrom(const pbState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbState::CopyFrom(const pbState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbState::IsInitialized() const {
  
  return true;
}

void pbState::Swap(pbState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbState_descriptor_;
  metadata.reflection = pbState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbIwfTranslator::kNameFieldNumber;
const int pbIwfTranslator::kIdFieldNumber;
#endif  // !_MSC_VER

pbIwfTranslator::pbIwfTranslator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbIwfTranslator::InitAsDefaultInstance() {
}

pbIwfTranslator::pbIwfTranslator(const pbIwfTranslator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbIwfTranslator::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbIwfTranslator::~pbIwfTranslator() {
  SharedDtor();
}

void pbIwfTranslator::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void pbIwfTranslator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbIwfTranslator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfTranslator_descriptor_;
}

const pbIwfTranslator& pbIwfTranslator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbIwfTranslator* pbIwfTranslator::default_instance_ = NULL;

pbIwfTranslator* pbIwfTranslator::New() const {
  return new pbIwfTranslator;
}

void pbIwfTranslator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbIwfTranslator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }
      
      // optional uint32 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbIwfTranslator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbIwfTranslator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbIwfTranslator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbIwfTranslator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbIwfTranslator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbIwfTranslator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbIwfTranslator::MergeFrom(const pbIwfTranslator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbIwfTranslator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbIwfTranslator::CopyFrom(const pbIwfTranslator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbIwfTranslator::IsInitialized() const {
  
  return true;
}

void pbIwfTranslator::Swap(pbIwfTranslator* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbIwfTranslator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbIwfTranslator_descriptor_;
  metadata.reflection = pbIwfTranslator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbRoutingLabel::kOPcFieldNumber;
const int pbRoutingLabel::kIsNationalFieldNumber;
const int pbRoutingLabel::kOSsnFieldNumber;
const int pbRoutingLabel::kUseSccpCdPAFromInMsgFieldNumber;
#endif  // !_MSC_VER

pbRoutingLabel::pbRoutingLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbRoutingLabel::InitAsDefaultInstance() {
}

pbRoutingLabel::pbRoutingLabel(const pbRoutingLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbRoutingLabel::SharedCtor() {
  _cached_size_ = 0;
  opc_ = 0u;
  isnational_ = false;
  ossn_ = 0u;
  usesccpcdpafrominmsg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbRoutingLabel::~pbRoutingLabel() {
  SharedDtor();
}

void pbRoutingLabel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbRoutingLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRoutingLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRoutingLabel_descriptor_;
}

const pbRoutingLabel& pbRoutingLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbRoutingLabel* pbRoutingLabel::default_instance_ = NULL;

pbRoutingLabel* pbRoutingLabel::New() const {
  return new pbRoutingLabel;
}

void pbRoutingLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opc_ = 0u;
    isnational_ = false;
    ossn_ = 0u;
    usesccpcdpafrominmsg_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbRoutingLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oPc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opc_)));
          set_has_opc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isNational;
        break;
      }
      
      // optional bool isNational = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNational:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnational_)));
          set_has_isnational();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oSsn;
        break;
      }
      
      // optional uint32 oSsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oSsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ossn_)));
          set_has_ossn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useSccpCdPAFromInMsg;
        break;
      }
      
      // optional bool useSccpCdPAFromInMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useSccpCdPAFromInMsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usesccpcdpafrominmsg_)));
          set_has_usesccpcdpafrominmsg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbRoutingLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oPc = 1;
  if (has_opc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opc(), output);
  }
  
  // optional bool isNational = 2;
  if (has_isnational()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isnational(), output);
  }
  
  // optional uint32 oSsn = 3;
  if (has_ossn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ossn(), output);
  }
  
  // optional bool useSccpCdPAFromInMsg = 4;
  if (has_usesccpcdpafrominmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->usesccpcdpafrominmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbRoutingLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oPc = 1;
  if (has_opc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opc(), target);
  }
  
  // optional bool isNational = 2;
  if (has_isnational()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isnational(), target);
  }
  
  // optional uint32 oSsn = 3;
  if (has_ossn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ossn(), target);
  }
  
  // optional bool useSccpCdPAFromInMsg = 4;
  if (has_usesccpcdpafrominmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->usesccpcdpafrominmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbRoutingLabel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oPc = 1;
    if (has_opc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opc());
    }
    
    // optional bool isNational = 2;
    if (has_isnational()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 oSsn = 3;
    if (has_ossn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ossn());
    }
    
    // optional bool useSccpCdPAFromInMsg = 4;
    if (has_usesccpcdpafrominmsg()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRoutingLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbRoutingLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbRoutingLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbRoutingLabel::MergeFrom(const pbRoutingLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opc()) {
      set_opc(from.opc());
    }
    if (from.has_isnational()) {
      set_isnational(from.isnational());
    }
    if (from.has_ossn()) {
      set_ossn(from.ossn());
    }
    if (from.has_usesccpcdpafrominmsg()) {
      set_usesccpcdpafrominmsg(from.usesccpcdpafrominmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbRoutingLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRoutingLabel::CopyFrom(const pbRoutingLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRoutingLabel::IsInitialized() const {
  
  return true;
}

void pbRoutingLabel::Swap(pbRoutingLabel* other) {
  if (other != this) {
    std::swap(opc_, other->opc_);
    std::swap(isnational_, other->isnational_);
    std::swap(ossn_, other->ossn_);
    std::swap(usesccpcdpafrominmsg_, other->usesccpcdpafrominmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbRoutingLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRoutingLabel_descriptor_;
  metadata.reflection = pbRoutingLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbDiaMsg::kCommandCodeFieldNumber;
const int pbDiaMsg::kRequestBitFieldNumber;
const int pbDiaMsg::kUsernameFieldNumber;
const int pbDiaMsg::kSessionIdFieldNumber;
#endif  // !_MSC_VER

pbDiaMsg::pbDiaMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbDiaMsg::InitAsDefaultInstance() {
}

pbDiaMsg::pbDiaMsg(const pbDiaMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbDiaMsg::SharedCtor() {
  _cached_size_ = 0;
  commandcode_ = 0u;
  requestbit_ = false;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbDiaMsg::~pbDiaMsg() {
  SharedDtor();
}

void pbDiaMsg::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void pbDiaMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbDiaMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbDiaMsg_descriptor_;
}

const pbDiaMsg& pbDiaMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbDiaMsg* pbDiaMsg::default_instance_ = NULL;

pbDiaMsg* pbDiaMsg::New() const {
  return new pbDiaMsg;
}

void pbDiaMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commandcode_ = 0u;
    requestbit_ = false;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbDiaMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CommandCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commandcode_)));
          set_has_commandcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RequestBit;
        break;
      }
      
      // optional bool RequestBit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requestbit_)));
          set_has_requestbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SessionId;
        break;
      }
      
      // optional string SessionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbDiaMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CommandCode = 1;
  if (has_commandcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commandcode(), output);
  }
  
  // optional bool RequestBit = 2;
  if (has_requestbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->requestbit(), output);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // optional string SessionId = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbDiaMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 CommandCode = 1;
  if (has_commandcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->commandcode(), target);
  }
  
  // optional bool RequestBit = 2;
  if (has_requestbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->requestbit(), target);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  // optional string SessionId = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbDiaMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommandCode = 1;
    if (has_commandcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commandcode());
    }
    
    // optional bool RequestBit = 2;
    if (has_requestbit()) {
      total_size += 1 + 1;
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string SessionId = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbDiaMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbDiaMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbDiaMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbDiaMsg::MergeFrom(const pbDiaMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandcode()) {
      set_commandcode(from.commandcode());
    }
    if (from.has_requestbit()) {
      set_requestbit(from.requestbit());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbDiaMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbDiaMsg::CopyFrom(const pbDiaMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbDiaMsg::IsInitialized() const {
  
  return true;
}

void pbDiaMsg::Swap(pbDiaMsg* other) {
  if (other != this) {
    std::swap(commandcode_, other->commandcode_);
    std::swap(requestbit_, other->requestbit_);
    std::swap(username_, other->username_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbDiaMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbDiaMsg_descriptor_;
  metadata.reflection = pbDiaMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbSccpAddress::kIdFieldNumber;
const int pbSccpAddress::kHasPcFieldNumber;
const int pbSccpAddress::kHasSsnFieldNumber;
const int pbSccpAddress::kRoutePCSSNFieldNumber;
const int pbSccpAddress::kInternationalRouteFieldNumber;
const int pbSccpAddress::kGlobalTitleFieldNumber;
const int pbSccpAddress::kPointCodeFieldNumber;
const int pbSccpAddress::kSsnFieldNumber;
const int pbSccpAddress::kGttlenFieldNumber;
const int pbSccpAddress::kGlobTitleFieldNumber;
const int pbSccpAddress::kGttTypeFieldNumber;
#endif  // !_MSC_VER

pbSccpAddress::pbSccpAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbSccpAddress::InitAsDefaultInstance() {
}

pbSccpAddress::pbSccpAddress(const pbSccpAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbSccpAddress::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haspc_ = false;
  hasssn_ = false;
  routepcssn_ = false;
  internationalroute_ = false;
  globaltitle_ = false;
  pointcode_ = 0u;
  ssn_ = 0u;
  gttlen_ = 0u;
  globtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gtttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbSccpAddress::~pbSccpAddress() {
  SharedDtor();
}

void pbSccpAddress::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (globtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete globtitle_;
  }
  if (this != default_instance_) {
  }
}

void pbSccpAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbSccpAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbSccpAddress_descriptor_;
}

const pbSccpAddress& pbSccpAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbSccpAddress* pbSccpAddress::default_instance_ = NULL;

pbSccpAddress* pbSccpAddress::New() const {
  return new pbSccpAddress;
}

void pbSccpAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    haspc_ = false;
    hasssn_ = false;
    routepcssn_ = false;
    internationalroute_ = false;
    globaltitle_ = false;
    pointcode_ = 0u;
    ssn_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gttlen_ = 0u;
    if (has_globtitle()) {
      if (globtitle_ != &::google::protobuf::internal::kEmptyString) {
        globtitle_->clear();
      }
    }
    gtttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbSccpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasPc;
        break;
      }
      
      // optional bool hasPc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasPc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspc_)));
          set_has_haspc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasSsn;
        break;
      }
      
      // optional bool hasSsn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasSsn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasssn_)));
          set_has_hasssn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_routePCSSN;
        break;
      }
      
      // optional bool routePCSSN = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routePCSSN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &routepcssn_)));
          set_has_routepcssn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_internationalRoute;
        break;
      }
      
      // optional bool internationalRoute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internationalRoute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &internationalroute_)));
          set_has_internationalroute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_globalTitle;
        break;
      }
      
      // optional bool globalTitle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &globaltitle_)));
          set_has_globaltitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PointCode;
        break;
      }
      
      // optional uint32 PointCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PointCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointcode_)));
          set_has_pointcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ssn;
        break;
      }
      
      // optional uint32 ssn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssn_)));
          set_has_ssn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gttlen;
        break;
      }
      
      // optional uint32 gttlen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gttlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gttlen_)));
          set_has_gttlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_globTitle;
        break;
      }
      
      // optional bytes globTitle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_globtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gttType;
        break;
      }
      
      // optional uint32 gttType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gttType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gtttype_)));
          set_has_gtttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbSccpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional bool hasPc = 2;
  if (has_haspc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->haspc(), output);
  }
  
  // optional bool hasSsn = 3;
  if (has_hasssn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasssn(), output);
  }
  
  // optional bool routePCSSN = 4;
  if (has_routepcssn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->routepcssn(), output);
  }
  
  // optional bool internationalRoute = 5;
  if (has_internationalroute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->internationalroute(), output);
  }
  
  // optional bool globalTitle = 6;
  if (has_globaltitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->globaltitle(), output);
  }
  
  // optional uint32 PointCode = 7;
  if (has_pointcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pointcode(), output);
  }
  
  // optional uint32 ssn = 8;
  if (has_ssn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ssn(), output);
  }
  
  // optional uint32 gttlen = 9;
  if (has_gttlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gttlen(), output);
  }
  
  // optional bytes globTitle = 10;
  if (has_globtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->globtitle(), output);
  }
  
  // optional uint32 gttType = 11;
  if (has_gtttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gtttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbSccpAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional bool hasPc = 2;
  if (has_haspc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->haspc(), target);
  }
  
  // optional bool hasSsn = 3;
  if (has_hasssn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasssn(), target);
  }
  
  // optional bool routePCSSN = 4;
  if (has_routepcssn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->routepcssn(), target);
  }
  
  // optional bool internationalRoute = 5;
  if (has_internationalroute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->internationalroute(), target);
  }
  
  // optional bool globalTitle = 6;
  if (has_globaltitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->globaltitle(), target);
  }
  
  // optional uint32 PointCode = 7;
  if (has_pointcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pointcode(), target);
  }
  
  // optional uint32 ssn = 8;
  if (has_ssn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ssn(), target);
  }
  
  // optional uint32 gttlen = 9;
  if (has_gttlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gttlen(), target);
  }
  
  // optional bytes globTitle = 10;
  if (has_globtitle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->globtitle(), target);
  }
  
  // optional uint32 gttType = 11;
  if (has_gtttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gtttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbSccpAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional bool hasPc = 2;
    if (has_haspc()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasSsn = 3;
    if (has_hasssn()) {
      total_size += 1 + 1;
    }
    
    // optional bool routePCSSN = 4;
    if (has_routepcssn()) {
      total_size += 1 + 1;
    }
    
    // optional bool internationalRoute = 5;
    if (has_internationalroute()) {
      total_size += 1 + 1;
    }
    
    // optional bool globalTitle = 6;
    if (has_globaltitle()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 PointCode = 7;
    if (has_pointcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointcode());
    }
    
    // optional uint32 ssn = 8;
    if (has_ssn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssn());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 gttlen = 9;
    if (has_gttlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gttlen());
    }
    
    // optional bytes globTitle = 10;
    if (has_globtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->globtitle());
    }
    
    // optional uint32 gttType = 11;
    if (has_gtttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gtttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbSccpAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbSccpAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbSccpAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbSccpAddress::MergeFrom(const pbSccpAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_haspc()) {
      set_haspc(from.haspc());
    }
    if (from.has_hasssn()) {
      set_hasssn(from.hasssn());
    }
    if (from.has_routepcssn()) {
      set_routepcssn(from.routepcssn());
    }
    if (from.has_internationalroute()) {
      set_internationalroute(from.internationalroute());
    }
    if (from.has_globaltitle()) {
      set_globaltitle(from.globaltitle());
    }
    if (from.has_pointcode()) {
      set_pointcode(from.pointcode());
    }
    if (from.has_ssn()) {
      set_ssn(from.ssn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gttlen()) {
      set_gttlen(from.gttlen());
    }
    if (from.has_globtitle()) {
      set_globtitle(from.globtitle());
    }
    if (from.has_gtttype()) {
      set_gtttype(from.gtttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbSccpAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbSccpAddress::CopyFrom(const pbSccpAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbSccpAddress::IsInitialized() const {
  
  return true;
}

void pbSccpAddress::Swap(pbSccpAddress* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(haspc_, other->haspc_);
    std::swap(hasssn_, other->hasssn_);
    std::swap(routepcssn_, other->routepcssn_);
    std::swap(internationalroute_, other->internationalroute_);
    std::swap(globaltitle_, other->globaltitle_);
    std::swap(pointcode_, other->pointcode_);
    std::swap(ssn_, other->ssn_);
    std::swap(gttlen_, other->gttlen_);
    std::swap(globtitle_, other->globtitle_);
    std::swap(gtttype_, other->gtttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbSccpAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbSccpAddress_descriptor_;
  metadata.reflection = pbSccpAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QualityOfService::kFlagsFieldNumber;
const int QualityOfService::kSlsKeyFieldNumber;
const int QualityOfService::kPriorityFieldNumber;
const int QualityOfService::kNetworkIndFieldNumber;
#endif  // !_MSC_VER

QualityOfService::QualityOfService()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QualityOfService::InitAsDefaultInstance() {
}

QualityOfService::QualityOfService(const QualityOfService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QualityOfService::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0u;
  slskey_ = 0u;
  priority_ = 0u;
  networkind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QualityOfService::~QualityOfService() {
  SharedDtor();
}

void QualityOfService::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QualityOfService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QualityOfService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QualityOfService_descriptor_;
}

const QualityOfService& QualityOfService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

QualityOfService* QualityOfService::default_instance_ = NULL;

QualityOfService* QualityOfService::New() const {
  return new QualityOfService;
}

void QualityOfService::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flags_ = 0u;
    slskey_ = 0u;
    priority_ = 0u;
    networkind_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QualityOfService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slsKey;
        break;
      }
      
      // optional uint32 slsKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slsKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slskey_)));
          set_has_slskey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }
      
      // optional uint32 priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_networkInd;
        break;
      }
      
      // optional uint32 networkInd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_networkInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networkind_)));
          set_has_networkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QualityOfService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flags = 1;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }
  
  // optional uint32 slsKey = 2;
  if (has_slskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slskey(), output);
  }
  
  // optional uint32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->priority(), output);
  }
  
  // optional uint32 networkInd = 4;
  if (has_networkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->networkind(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QualityOfService::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flags = 1;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }
  
  // optional uint32 slsKey = 2;
  if (has_slskey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slskey(), target);
  }
  
  // optional uint32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->priority(), target);
  }
  
  // optional uint32 networkInd = 4;
  if (has_networkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->networkind(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QualityOfService::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flags = 1;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional uint32 slsKey = 2;
    if (has_slskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slskey());
    }
    
    // optional uint32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->priority());
    }
    
    // optional uint32 networkInd = 4;
    if (has_networkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networkind());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QualityOfService::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QualityOfService* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QualityOfService*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QualityOfService::MergeFrom(const QualityOfService& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_slskey()) {
      set_slskey(from.slskey());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_networkind()) {
      set_networkind(from.networkind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QualityOfService::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualityOfService::CopyFrom(const QualityOfService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualityOfService::IsInitialized() const {
  
  return true;
}

void QualityOfService::Swap(QualityOfService* other) {
  if (other != this) {
    std::swap(flags_, other->flags_);
    std::swap(slskey_, other->slskey_);
    std::swap(priority_, other->priority_);
    std::swap(networkind_, other->networkind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QualityOfService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QualityOfService_descriptor_;
  metadata.reflection = QualityOfService_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbTcapDialogue::kDialogueIdFieldNumber;
const int pbTcapDialogue::kDialogueTypeFieldNumber;
const int pbTcapDialogue::kAbortReasonFieldNumber;
const int pbTcapDialogue::kApplicationContextFieldNumber;
const int pbTcapDialogue::kQosFieldNumber;
#endif  // !_MSC_VER

pbTcapDialogue::pbTcapDialogue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbTcapDialogue::InitAsDefaultInstance() {
  qos_ = const_cast< ::QualityOfService*>(&::QualityOfService::default_instance());
}

pbTcapDialogue::pbTcapDialogue(const pbTcapDialogue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbTcapDialogue::SharedCtor() {
  _cached_size_ = 0;
  dialogueid_ = 0u;
  dialoguetype_ = 0u;
  abortreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicationcontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbTcapDialogue::~pbTcapDialogue() {
  SharedDtor();
}

void pbTcapDialogue::SharedDtor() {
  if (abortreason_ != &::google::protobuf::internal::kEmptyString) {
    delete abortreason_;
  }
  if (applicationcontext_ != &::google::protobuf::internal::kEmptyString) {
    delete applicationcontext_;
  }
  if (this != default_instance_) {
    delete qos_;
  }
}

void pbTcapDialogue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbTcapDialogue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbTcapDialogue_descriptor_;
}

const pbTcapDialogue& pbTcapDialogue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbTcapDialogue* pbTcapDialogue::default_instance_ = NULL;

pbTcapDialogue* pbTcapDialogue::New() const {
  return new pbTcapDialogue;
}

void pbTcapDialogue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dialogueid_ = 0u;
    dialoguetype_ = 0u;
    if (has_abortreason()) {
      if (abortreason_ != &::google::protobuf::internal::kEmptyString) {
        abortreason_->clear();
      }
    }
    if (has_applicationcontext()) {
      if (applicationcontext_ != &::google::protobuf::internal::kEmptyString) {
        applicationcontext_->clear();
      }
    }
    if (has_qos()) {
      if (qos_ != NULL) qos_->::QualityOfService::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbTcapDialogue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DialogueId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialogueid_)));
          set_has_dialogueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DialogueType;
        break;
      }
      
      // optional uint32 DialogueType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DialogueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dialoguetype_)));
          set_has_dialoguetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AbortReason;
        break;
      }
      
      // optional string AbortReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AbortReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abortreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abortreason().data(), this->abortreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ApplicationContext;
        break;
      }
      
      // optional bytes ApplicationContext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ApplicationContext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_applicationcontext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Qos;
        break;
      }
      
      // optional .QualityOfService Qos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Qos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbTcapDialogue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DialogueId = 1;
  if (has_dialogueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dialogueid(), output);
  }
  
  // optional uint32 DialogueType = 2;
  if (has_dialoguetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dialoguetype(), output);
  }
  
  // optional string AbortReason = 3;
  if (has_abortreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abortreason().data(), this->abortreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->abortreason(), output);
  }
  
  // optional bytes ApplicationContext = 4;
  if (has_applicationcontext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->applicationcontext(), output);
  }
  
  // optional .QualityOfService Qos = 5;
  if (has_qos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->qos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbTcapDialogue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DialogueId = 1;
  if (has_dialogueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dialogueid(), target);
  }
  
  // optional uint32 DialogueType = 2;
  if (has_dialoguetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dialoguetype(), target);
  }
  
  // optional string AbortReason = 3;
  if (has_abortreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abortreason().data(), this->abortreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abortreason(), target);
  }
  
  // optional bytes ApplicationContext = 4;
  if (has_applicationcontext()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->applicationcontext(), target);
  }
  
  // optional .QualityOfService Qos = 5;
  if (has_qos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->qos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbTcapDialogue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DialogueId = 1;
    if (has_dialogueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dialogueid());
    }
    
    // optional uint32 DialogueType = 2;
    if (has_dialoguetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dialoguetype());
    }
    
    // optional string AbortReason = 3;
    if (has_abortreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abortreason());
    }
    
    // optional bytes ApplicationContext = 4;
    if (has_applicationcontext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->applicationcontext());
    }
    
    // optional .QualityOfService Qos = 5;
    if (has_qos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbTcapDialogue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbTcapDialogue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbTcapDialogue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbTcapDialogue::MergeFrom(const pbTcapDialogue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dialogueid()) {
      set_dialogueid(from.dialogueid());
    }
    if (from.has_dialoguetype()) {
      set_dialoguetype(from.dialoguetype());
    }
    if (from.has_abortreason()) {
      set_abortreason(from.abortreason());
    }
    if (from.has_applicationcontext()) {
      set_applicationcontext(from.applicationcontext());
    }
    if (from.has_qos()) {
      mutable_qos()->::QualityOfService::MergeFrom(from.qos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbTcapDialogue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTcapDialogue::CopyFrom(const pbTcapDialogue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTcapDialogue::IsInitialized() const {
  
  return true;
}

void pbTcapDialogue::Swap(pbTcapDialogue* other) {
  if (other != this) {
    std::swap(dialogueid_, other->dialogueid_);
    std::swap(dialoguetype_, other->dialoguetype_);
    std::swap(abortreason_, other->abortreason_);
    std::swap(applicationcontext_, other->applicationcontext_);
    std::swap(qos_, other->qos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbTcapDialogue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbTcapDialogue_descriptor_;
  metadata.reflection = pbTcapDialogue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbSCCPParameters::kSccpCallingPartyAddrFieldNumber;
const int pbSCCPParameters::kSccpCalledPartyAddrFieldNumber;
const int pbSCCPParameters::kOpcFieldNumber;
const int pbSCCPParameters::kDpcFieldNumber;
const int pbSCCPParameters::kIsRouteByGtFieldNumber;
#endif  // !_MSC_VER

pbSCCPParameters::pbSCCPParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbSCCPParameters::InitAsDefaultInstance() {
  sccpcallingpartyaddr_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
  sccpcalledpartyaddr_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
}

pbSCCPParameters::pbSCCPParameters(const pbSCCPParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbSCCPParameters::SharedCtor() {
  _cached_size_ = 0;
  sccpcallingpartyaddr_ = NULL;
  sccpcalledpartyaddr_ = NULL;
  opc_ = 0u;
  dpc_ = 0u;
  isroutebygt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbSCCPParameters::~pbSCCPParameters() {
  SharedDtor();
}

void pbSCCPParameters::SharedDtor() {
  if (this != default_instance_) {
    delete sccpcallingpartyaddr_;
    delete sccpcalledpartyaddr_;
  }
}

void pbSCCPParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbSCCPParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbSCCPParameters_descriptor_;
}

const pbSCCPParameters& pbSCCPParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbSCCPParameters* pbSCCPParameters::default_instance_ = NULL;

pbSCCPParameters* pbSCCPParameters::New() const {
  return new pbSCCPParameters;
}

void pbSCCPParameters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sccpcallingpartyaddr()) {
      if (sccpcallingpartyaddr_ != NULL) sccpcallingpartyaddr_->::pbSccpAddress::Clear();
    }
    if (has_sccpcalledpartyaddr()) {
      if (sccpcalledpartyaddr_ != NULL) sccpcalledpartyaddr_->::pbSccpAddress::Clear();
    }
    opc_ = 0u;
    dpc_ = 0u;
    isroutebygt_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbSCCPParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbSccpAddress SccpCallingPartyAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sccpcallingpartyaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SccpCalledPartyAddr;
        break;
      }
      
      // optional .pbSccpAddress SccpCalledPartyAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SccpCalledPartyAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sccpcalledpartyaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Opc;
        break;
      }
      
      // optional uint32 Opc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Opc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opc_)));
          set_has_opc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Dpc;
        break;
      }
      
      // optional uint32 Dpc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dpc_)));
          set_has_dpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isRouteByGt;
        break;
      }
      
      // optional bool isRouteByGt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRouteByGt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isroutebygt_)));
          set_has_isroutebygt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbSCCPParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pbSccpAddress SccpCallingPartyAddr = 1;
  if (has_sccpcallingpartyaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sccpcallingpartyaddr(), output);
  }
  
  // optional .pbSccpAddress SccpCalledPartyAddr = 2;
  if (has_sccpcalledpartyaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sccpcalledpartyaddr(), output);
  }
  
  // optional uint32 Opc = 3;
  if (has_opc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opc(), output);
  }
  
  // optional uint32 Dpc = 4;
  if (has_dpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dpc(), output);
  }
  
  // optional bool isRouteByGt = 5;
  if (has_isroutebygt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isroutebygt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbSCCPParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pbSccpAddress SccpCallingPartyAddr = 1;
  if (has_sccpcallingpartyaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sccpcallingpartyaddr(), target);
  }
  
  // optional .pbSccpAddress SccpCalledPartyAddr = 2;
  if (has_sccpcalledpartyaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sccpcalledpartyaddr(), target);
  }
  
  // optional uint32 Opc = 3;
  if (has_opc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opc(), target);
  }
  
  // optional uint32 Dpc = 4;
  if (has_dpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dpc(), target);
  }
  
  // optional bool isRouteByGt = 5;
  if (has_isroutebygt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isroutebygt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbSCCPParameters::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pbSccpAddress SccpCallingPartyAddr = 1;
    if (has_sccpcallingpartyaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sccpcallingpartyaddr());
    }
    
    // optional .pbSccpAddress SccpCalledPartyAddr = 2;
    if (has_sccpcalledpartyaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sccpcalledpartyaddr());
    }
    
    // optional uint32 Opc = 3;
    if (has_opc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opc());
    }
    
    // optional uint32 Dpc = 4;
    if (has_dpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dpc());
    }
    
    // optional bool isRouteByGt = 5;
    if (has_isroutebygt()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbSCCPParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbSCCPParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbSCCPParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbSCCPParameters::MergeFrom(const pbSCCPParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sccpcallingpartyaddr()) {
      mutable_sccpcallingpartyaddr()->::pbSccpAddress::MergeFrom(from.sccpcallingpartyaddr());
    }
    if (from.has_sccpcalledpartyaddr()) {
      mutable_sccpcalledpartyaddr()->::pbSccpAddress::MergeFrom(from.sccpcalledpartyaddr());
    }
    if (from.has_opc()) {
      set_opc(from.opc());
    }
    if (from.has_dpc()) {
      set_dpc(from.dpc());
    }
    if (from.has_isroutebygt()) {
      set_isroutebygt(from.isroutebygt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbSCCPParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbSCCPParameters::CopyFrom(const pbSCCPParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbSCCPParameters::IsInitialized() const {
  
  return true;
}

void pbSCCPParameters::Swap(pbSCCPParameters* other) {
  if (other != this) {
    std::swap(sccpcallingpartyaddr_, other->sccpcallingpartyaddr_);
    std::swap(sccpcalledpartyaddr_, other->sccpcalledpartyaddr_);
    std::swap(opc_, other->opc_);
    std::swap(dpc_, other->dpc_);
    std::swap(isroutebygt_, other->isroutebygt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbSCCPParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbSCCPParameters_descriptor_;
  metadata.reflection = pbSCCPParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbTcapComponent::kLastComponentFieldNumber;
const int pbTcapComponent::kInvokeIdFieldNumber;
const int pbTcapComponent::kComponentTypeFieldNumber;
const int pbTcapComponent::kOpCodeFieldNumber;
#endif  // !_MSC_VER

pbTcapComponent::pbTcapComponent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbTcapComponent::InitAsDefaultInstance() {
}

pbTcapComponent::pbTcapComponent(const pbTcapComponent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbTcapComponent::SharedCtor() {
  _cached_size_ = 0;
  lastcomponent_ = 0u;
  invokeid_ = 0u;
  componenttype_ = 0u;
  opcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbTcapComponent::~pbTcapComponent() {
  SharedDtor();
}

void pbTcapComponent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbTcapComponent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbTcapComponent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbTcapComponent_descriptor_;
}

const pbTcapComponent& pbTcapComponent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbTcapComponent* pbTcapComponent::default_instance_ = NULL;

pbTcapComponent* pbTcapComponent::New() const {
  return new pbTcapComponent;
}

void pbTcapComponent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lastcomponent_ = 0u;
    invokeid_ = 0u;
    componenttype_ = 0u;
    opcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbTcapComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lastComponent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastcomponent_)));
          set_has_lastcomponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invokeId;
        break;
      }
      
      // optional uint32 invokeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invokeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invokeid_)));
          set_has_invokeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_componentType;
        break;
      }
      
      // optional uint32 componentType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_componentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &componenttype_)));
          set_has_componenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_opCode;
        break;
      }
      
      // optional fixed32 opCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbTcapComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lastComponent = 1;
  if (has_lastcomponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lastcomponent(), output);
  }
  
  // optional uint32 invokeId = 2;
  if (has_invokeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invokeid(), output);
  }
  
  // optional uint32 componentType = 3;
  if (has_componenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->componenttype(), output);
  }
  
  // optional fixed32 opCode = 4;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->opcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbTcapComponent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lastComponent = 1;
  if (has_lastcomponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lastcomponent(), target);
  }
  
  // optional uint32 invokeId = 2;
  if (has_invokeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invokeid(), target);
  }
  
  // optional uint32 componentType = 3;
  if (has_componenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->componenttype(), target);
  }
  
  // optional fixed32 opCode = 4;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->opcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbTcapComponent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lastComponent = 1;
    if (has_lastcomponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastcomponent());
    }
    
    // optional uint32 invokeId = 2;
    if (has_invokeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invokeid());
    }
    
    // optional uint32 componentType = 3;
    if (has_componenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->componenttype());
    }
    
    // optional fixed32 opCode = 4;
    if (has_opcode()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbTcapComponent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbTcapComponent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbTcapComponent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbTcapComponent::MergeFrom(const pbTcapComponent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lastcomponent()) {
      set_lastcomponent(from.lastcomponent());
    }
    if (from.has_invokeid()) {
      set_invokeid(from.invokeid());
    }
    if (from.has_componenttype()) {
      set_componenttype(from.componenttype());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbTcapComponent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTcapComponent::CopyFrom(const pbTcapComponent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTcapComponent::IsInitialized() const {
  
  return true;
}

void pbTcapComponent::Swap(pbTcapComponent* other) {
  if (other != this) {
    std::swap(lastcomponent_, other->lastcomponent_);
    std::swap(invokeid_, other->invokeid_);
    std::swap(componenttype_, other->componenttype_);
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbTcapComponent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbTcapComponent_descriptor_;
  metadata.reflection = pbTcapComponent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbTcapBeginDialogue::kOPcFieldNumber;
const int pbTcapBeginDialogue::kSccpCallingPartyAddrFieldNumber;
#endif  // !_MSC_VER

pbTcapBeginDialogue::pbTcapBeginDialogue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbTcapBeginDialogue::InitAsDefaultInstance() {
  sccpcallingpartyaddr_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
}

pbTcapBeginDialogue::pbTcapBeginDialogue(const pbTcapBeginDialogue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbTcapBeginDialogue::SharedCtor() {
  _cached_size_ = 0;
  opc_ = 0u;
  sccpcallingpartyaddr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbTcapBeginDialogue::~pbTcapBeginDialogue() {
  SharedDtor();
}

void pbTcapBeginDialogue::SharedDtor() {
  if (this != default_instance_) {
    delete sccpcallingpartyaddr_;
  }
}

void pbTcapBeginDialogue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbTcapBeginDialogue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbTcapBeginDialogue_descriptor_;
}

const pbTcapBeginDialogue& pbTcapBeginDialogue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbTcapBeginDialogue* pbTcapBeginDialogue::default_instance_ = NULL;

pbTcapBeginDialogue* pbTcapBeginDialogue::New() const {
  return new pbTcapBeginDialogue;
}

void pbTcapBeginDialogue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opc_ = 0u;
    if (has_sccpcallingpartyaddr()) {
      if (sccpcallingpartyaddr_ != NULL) sccpcallingpartyaddr_->::pbSccpAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbTcapBeginDialogue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oPc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opc_)));
          set_has_opc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SccpCallingPartyAddr;
        break;
      }
      
      // optional .pbSccpAddress SccpCallingPartyAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SccpCallingPartyAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sccpcallingpartyaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbTcapBeginDialogue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 oPc = 1;
  if (has_opc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opc(), output);
  }
  
  // optional .pbSccpAddress SccpCallingPartyAddr = 2;
  if (has_sccpcallingpartyaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sccpcallingpartyaddr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbTcapBeginDialogue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oPc = 1;
  if (has_opc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opc(), target);
  }
  
  // optional .pbSccpAddress SccpCallingPartyAddr = 2;
  if (has_sccpcallingpartyaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sccpcallingpartyaddr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbTcapBeginDialogue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oPc = 1;
    if (has_opc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opc());
    }
    
    // optional .pbSccpAddress SccpCallingPartyAddr = 2;
    if (has_sccpcallingpartyaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sccpcallingpartyaddr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbTcapBeginDialogue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbTcapBeginDialogue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbTcapBeginDialogue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbTcapBeginDialogue::MergeFrom(const pbTcapBeginDialogue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opc()) {
      set_opc(from.opc());
    }
    if (from.has_sccpcallingpartyaddr()) {
      mutable_sccpcallingpartyaddr()->::pbSccpAddress::MergeFrom(from.sccpcallingpartyaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbTcapBeginDialogue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTcapBeginDialogue::CopyFrom(const pbTcapBeginDialogue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTcapBeginDialogue::IsInitialized() const {
  
  return true;
}

void pbTcapBeginDialogue::Swap(pbTcapBeginDialogue* other) {
  if (other != this) {
    std::swap(opc_, other->opc_);
    std::swap(sccpcallingpartyaddr_, other->sccpcallingpartyaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbTcapBeginDialogue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbTcapBeginDialogue_descriptor_;
  metadata.reflection = pbTcapBeginDialogue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionIdConfig::kSubIdTypeFieldNumber;
const int SubscriptionIdConfig::kSubIdDataFieldNumber;
#endif  // !_MSC_VER

SubscriptionIdConfig::SubscriptionIdConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionIdConfig::InitAsDefaultInstance() {
}

SubscriptionIdConfig::SubscriptionIdConfig(const SubscriptionIdConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionIdConfig::SharedCtor() {
  _cached_size_ = 0;
  subidtype_ = 0u;
  subiddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionIdConfig::~SubscriptionIdConfig() {
  SharedDtor();
}

void SubscriptionIdConfig::SharedDtor() {
  if (subiddata_ != &::google::protobuf::internal::kEmptyString) {
    delete subiddata_;
  }
  if (this != default_instance_) {
  }
}

void SubscriptionIdConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionIdConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionIdConfig_descriptor_;
}

const SubscriptionIdConfig& SubscriptionIdConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

SubscriptionIdConfig* SubscriptionIdConfig::default_instance_ = NULL;

SubscriptionIdConfig* SubscriptionIdConfig::New() const {
  return new SubscriptionIdConfig;
}

void SubscriptionIdConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subidtype_ = 0u;
    if (has_subiddata()) {
      if (subiddata_ != &::google::protobuf::internal::kEmptyString) {
        subiddata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionIdConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 subIdType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subidtype_)));
          set_has_subidtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subIdData;
        break;
      }
      
      // optional string subIdData = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subIdData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subiddata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subiddata().data(), this->subiddata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionIdConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 subIdType = 1;
  if (has_subidtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subidtype(), output);
  }
  
  // optional string subIdData = 2 [default = ""];
  if (has_subiddata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subiddata().data(), this->subiddata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subiddata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionIdConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 subIdType = 1;
  if (has_subidtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subidtype(), target);
  }
  
  // optional string subIdData = 2 [default = ""];
  if (has_subiddata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subiddata().data(), this->subiddata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subiddata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionIdConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 subIdType = 1;
    if (has_subidtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subidtype());
    }
    
    // optional string subIdData = 2 [default = ""];
    if (has_subiddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subiddata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionIdConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionIdConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionIdConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionIdConfig::MergeFrom(const SubscriptionIdConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subidtype()) {
      set_subidtype(from.subidtype());
    }
    if (from.has_subiddata()) {
      set_subiddata(from.subiddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionIdConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionIdConfig::CopyFrom(const SubscriptionIdConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionIdConfig::IsInitialized() const {
  
  return true;
}

void SubscriptionIdConfig::Swap(SubscriptionIdConfig* other) {
  if (other != this) {
    std::swap(subidtype_, other->subidtype_);
    std::swap(subiddata_, other->subiddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionIdConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionIdConfig_descriptor_;
  metadata.reflection = SubscriptionIdConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoredIDPSMSToCCRIData::kCallTypeValFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPServiceKeyFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPDialedDigitsFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCalledTONFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCLIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPLocationNumberFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPIMSIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPVLRNumberFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCallReferenceFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPMSCAddressFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCalledNPIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCallingNOAFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCLINPIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPVersionFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMSCAddressFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSGSNAddressFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMIMEIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMStatusReportRequestFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMUserDataHeaderIndicatorFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMReplyPathFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMVPFormatFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMMessageTypeIndicatorFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMProtocolIDFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMDCSFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMValidityPeriodFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMRejectDuplicateFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSCCPCallingGTFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSCCPCalledGTFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPTCAPRemoteTransactionIdFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPTCAPLocalTransactionIdFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPCellIDAreaIDLAIFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPEventTypeSMSFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPTCAPErrorCauseFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSCCPErrorCauseFieldNumber;
const int StoredIDPSMSToCCRIData::kCAPSMSpecificInfoFieldNumber;
const int StoredIDPSMSToCCRIData::kMTotalGSUCCServiceFieldNumber;
const int StoredIDPSMSToCCRIData::kMTotalUSUCCServiceFieldNumber;
const int StoredIDPSMSToCCRIData::kSubscriptionIdInfoFieldNumber;
#endif  // !_MSC_VER

StoredIDPSMSToCCRIData::StoredIDPSMSToCCRIData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoredIDPSMSToCCRIData::InitAsDefaultInstance() {
  subscriptionidinfo_ = const_cast< ::SubscriptionIdConfig*>(&::SubscriptionIdConfig::default_instance());
}

StoredIDPSMSToCCRIData::StoredIDPSMSToCCRIData(const StoredIDPSMSToCCRIData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoredIDPSMSToCCRIData::SharedCtor() {
  _cached_size_ = 0;
  calltypeval_ = 0u;
  cap_service_key_ = 0u;
  cap_dialed_digits_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_called_ton_ = 1000u;
  cap_cli_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_location_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_vlr_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_call_reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_msc_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_called_npi_ = 1000u;
  cap_calling_noa_ = 1000u;
  cap_cli_npi_ = 1000u;
  cap_version_ = 1000u;
  cap_smsc_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sgsn_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_statusreportrequest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_userdataheaderindicator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_replypath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_vpformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_messagetypeindicator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_protocolid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_dcs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_validityperiod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sm_rejectduplicate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sccp_callinggt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_sccp_calledgt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_tcap_remote_transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_tcap_local_transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_cellid_areaid_lai_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cap_event_type_sms_ = 1000u;
  cap_tcap_error_cause_ = 500u;
  cap_sccp_error_cause_ = 0u;
  cap_smspecificinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_totalgsuccservice_ = 0u;
  m_totalusuccservice_ = 0u;
  subscriptionidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoredIDPSMSToCCRIData::~StoredIDPSMSToCCRIData() {
  SharedDtor();
}

void StoredIDPSMSToCCRIData::SharedDtor() {
  if (cap_dialed_digits_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_dialed_digits_;
  }
  if (cap_cli_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_cli_;
  }
  if (cap_location_number_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_location_number_;
  }
  if (cap_imsi_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_imsi_;
  }
  if (cap_vlr_number_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_vlr_number_;
  }
  if (cap_call_reference_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_call_reference_;
  }
  if (cap_msc_address_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_msc_address_;
  }
  if (cap_smsc_address_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_smsc_address_;
  }
  if (cap_sgsn_address_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sgsn_address_;
  }
  if (cap_sm_imei_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_imei_;
  }
  if (cap_sm_statusreportrequest_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_statusreportrequest_;
  }
  if (cap_sm_userdataheaderindicator_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_userdataheaderindicator_;
  }
  if (cap_sm_replypath_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_replypath_;
  }
  if (cap_sm_vpformat_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_vpformat_;
  }
  if (cap_sm_messagetypeindicator_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_messagetypeindicator_;
  }
  if (cap_sm_protocolid_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_protocolid_;
  }
  if (cap_sm_dcs_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_dcs_;
  }
  if (cap_sm_validityperiod_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_validityperiod_;
  }
  if (cap_sm_rejectduplicate_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sm_rejectduplicate_;
  }
  if (cap_sccp_callinggt_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sccp_callinggt_;
  }
  if (cap_sccp_calledgt_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_sccp_calledgt_;
  }
  if (cap_tcap_remote_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_tcap_remote_transaction_id_;
  }
  if (cap_tcap_local_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_tcap_local_transaction_id_;
  }
  if (cap_cellid_areaid_lai_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_cellid_areaid_lai_;
  }
  if (cap_smspecificinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete cap_smspecificinfo_;
  }
  if (this != default_instance_) {
    delete subscriptionidinfo_;
  }
}

void StoredIDPSMSToCCRIData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoredIDPSMSToCCRIData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoredIDPSMSToCCRIData_descriptor_;
}

const StoredIDPSMSToCCRIData& StoredIDPSMSToCCRIData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

StoredIDPSMSToCCRIData* StoredIDPSMSToCCRIData::default_instance_ = NULL;

StoredIDPSMSToCCRIData* StoredIDPSMSToCCRIData::New() const {
  return new StoredIDPSMSToCCRIData;
}

void StoredIDPSMSToCCRIData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    calltypeval_ = 0u;
    cap_service_key_ = 0u;
    if (has_cap_dialed_digits()) {
      if (cap_dialed_digits_ != &::google::protobuf::internal::kEmptyString) {
        cap_dialed_digits_->clear();
      }
    }
    cap_called_ton_ = 1000u;
    if (has_cap_cli()) {
      if (cap_cli_ != &::google::protobuf::internal::kEmptyString) {
        cap_cli_->clear();
      }
    }
    if (has_cap_location_number()) {
      if (cap_location_number_ != &::google::protobuf::internal::kEmptyString) {
        cap_location_number_->clear();
      }
    }
    if (has_cap_imsi()) {
      if (cap_imsi_ != &::google::protobuf::internal::kEmptyString) {
        cap_imsi_->clear();
      }
    }
    if (has_cap_vlr_number()) {
      if (cap_vlr_number_ != &::google::protobuf::internal::kEmptyString) {
        cap_vlr_number_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cap_call_reference()) {
      if (cap_call_reference_ != &::google::protobuf::internal::kEmptyString) {
        cap_call_reference_->clear();
      }
    }
    if (has_cap_msc_address()) {
      if (cap_msc_address_ != &::google::protobuf::internal::kEmptyString) {
        cap_msc_address_->clear();
      }
    }
    cap_called_npi_ = 1000u;
    cap_calling_noa_ = 1000u;
    cap_cli_npi_ = 1000u;
    cap_version_ = 1000u;
    if (has_cap_smsc_address()) {
      if (cap_smsc_address_ != &::google::protobuf::internal::kEmptyString) {
        cap_smsc_address_->clear();
      }
    }
    if (has_cap_sgsn_address()) {
      if (cap_sgsn_address_ != &::google::protobuf::internal::kEmptyString) {
        cap_sgsn_address_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cap_sm_imei()) {
      if (cap_sm_imei_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_imei_->clear();
      }
    }
    if (has_cap_sm_statusreportrequest()) {
      if (cap_sm_statusreportrequest_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_statusreportrequest_->clear();
      }
    }
    if (has_cap_sm_userdataheaderindicator()) {
      if (cap_sm_userdataheaderindicator_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_userdataheaderindicator_->clear();
      }
    }
    if (has_cap_sm_replypath()) {
      if (cap_sm_replypath_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_replypath_->clear();
      }
    }
    if (has_cap_sm_vpformat()) {
      if (cap_sm_vpformat_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_vpformat_->clear();
      }
    }
    if (has_cap_sm_messagetypeindicator()) {
      if (cap_sm_messagetypeindicator_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_messagetypeindicator_->clear();
      }
    }
    if (has_cap_sm_protocolid()) {
      if (cap_sm_protocolid_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_protocolid_->clear();
      }
    }
    if (has_cap_sm_dcs()) {
      if (cap_sm_dcs_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_dcs_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_cap_sm_validityperiod()) {
      if (cap_sm_validityperiod_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_validityperiod_->clear();
      }
    }
    if (has_cap_sm_rejectduplicate()) {
      if (cap_sm_rejectduplicate_ != &::google::protobuf::internal::kEmptyString) {
        cap_sm_rejectduplicate_->clear();
      }
    }
    if (has_cap_sccp_callinggt()) {
      if (cap_sccp_callinggt_ != &::google::protobuf::internal::kEmptyString) {
        cap_sccp_callinggt_->clear();
      }
    }
    if (has_cap_sccp_calledgt()) {
      if (cap_sccp_calledgt_ != &::google::protobuf::internal::kEmptyString) {
        cap_sccp_calledgt_->clear();
      }
    }
    if (has_cap_tcap_remote_transaction_id()) {
      if (cap_tcap_remote_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        cap_tcap_remote_transaction_id_->clear();
      }
    }
    if (has_cap_tcap_local_transaction_id()) {
      if (cap_tcap_local_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        cap_tcap_local_transaction_id_->clear();
      }
    }
    if (has_cap_cellid_areaid_lai()) {
      if (cap_cellid_areaid_lai_ != &::google::protobuf::internal::kEmptyString) {
        cap_cellid_areaid_lai_->clear();
      }
    }
    cap_event_type_sms_ = 1000u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    cap_tcap_error_cause_ = 500u;
    cap_sccp_error_cause_ = 0u;
    if (has_cap_smspecificinfo()) {
      if (cap_smspecificinfo_ != &::google::protobuf::internal::kEmptyString) {
        cap_smspecificinfo_->clear();
      }
    }
    m_totalgsuccservice_ = 0u;
    m_totalusuccservice_ = 0u;
    if (has_subscriptionidinfo()) {
      if (subscriptionidinfo_ != NULL) subscriptionidinfo_->::SubscriptionIdConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoredIDPSMSToCCRIData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 callTypeVal = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calltypeval_)));
          set_has_calltypeval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CAP_Service_Key;
        break;
      }
      
      // optional uint32 CAP_Service_Key = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Service_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_service_key_)));
          set_has_cap_service_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CAP_Dialed_Digits;
        break;
      }
      
      // optional string CAP_Dialed_Digits = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_Dialed_Digits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_dialed_digits()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_dialed_digits().data(), this->cap_dialed_digits().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CAP_Called_TON;
        break;
      }
      
      // optional uint32 CAP_Called_TON = 4 [default = 1000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Called_TON:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_called_ton_)));
          set_has_cap_called_ton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CAP_CLI;
        break;
      }
      
      // optional string CAP_CLI = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_CLI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_cli()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_cli().data(), this->cap_cli().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CAP_Location_Number;
        break;
      }
      
      // optional string CAP_Location_Number = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_Location_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_location_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_location_number().data(), this->cap_location_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CAP_IMSI;
        break;
      }
      
      // optional string CAP_IMSI = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_IMSI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_imsi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_imsi().data(), this->cap_imsi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CAP_VLR_Number;
        break;
      }
      
      // optional string CAP_VLR_Number = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_VLR_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_vlr_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_vlr_number().data(), this->cap_vlr_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CAP_Call_Reference;
        break;
      }
      
      // optional string CAP_Call_Reference = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_Call_Reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_call_reference()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_call_reference().data(), this->cap_call_reference().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CAP_MSC_Address;
        break;
      }
      
      // optional string CAP_MSC_Address = 10 [default = ""];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_MSC_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_msc_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_msc_address().data(), this->cap_msc_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CAP_Called_NPI;
        break;
      }
      
      // optional uint32 CAP_Called_NPI = 11 [default = 1000];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Called_NPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_called_npi_)));
          set_has_cap_called_npi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CAP_Calling_NOA;
        break;
      }
      
      // optional uint32 CAP_Calling_NOA = 12 [default = 1000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Calling_NOA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_calling_noa_)));
          set_has_cap_calling_noa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_CAP_CLI_NPI;
        break;
      }
      
      // optional uint32 CAP_CLI_NPI = 13 [default = 1000];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_CLI_NPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_cli_npi_)));
          set_has_cap_cli_npi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CAP_Version;
        break;
      }
      
      // optional uint32 CAP_Version = 14 [default = 1000];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_version_)));
          set_has_cap_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_CAP_SMSC_Address;
        break;
      }
      
      // optional string CAP_SMSC_Address = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SMSC_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_smsc_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_smsc_address().data(), this->cap_smsc_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_CAP_SGSN_Address;
        break;
      }
      
      // optional string CAP_SGSN_Address = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SGSN_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sgsn_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sgsn_address().data(), this->cap_sgsn_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_CAP_SM_IMEI;
        break;
      }
      
      // optional string CAP_SM_IMEI = 17 [default = ""];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_IMEI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_imei().data(), this->cap_sm_imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_CAP_SM_StatusReportRequest;
        break;
      }
      
      // optional string CAP_SM_StatusReportRequest = 18 [default = ""];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_StatusReportRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_statusreportrequest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_statusreportrequest().data(), this->cap_sm_statusreportrequest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_CAP_SM_UserDataHeaderIndicator;
        break;
      }
      
      // optional string CAP_SM_UserDataHeaderIndicator = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_UserDataHeaderIndicator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_userdataheaderindicator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_userdataheaderindicator().data(), this->cap_sm_userdataheaderindicator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_CAP_SM_ReplyPath;
        break;
      }
      
      // optional string CAP_SM_ReplyPath = 20 [default = ""];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_ReplyPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_replypath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_replypath().data(), this->cap_sm_replypath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CAP_SM_VPFormat;
        break;
      }
      
      // optional string CAP_SM_VPFormat = 21 [default = ""];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_VPFormat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_vpformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_vpformat().data(), this->cap_sm_vpformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_CAP_SM_MessageTypeIndicator;
        break;
      }
      
      // optional string CAP_SM_MessageTypeIndicator = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_MessageTypeIndicator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_messagetypeindicator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_messagetypeindicator().data(), this->cap_sm_messagetypeindicator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CAP_SM_ProtocolID;
        break;
      }
      
      // optional string CAP_SM_ProtocolID = 23 [default = ""];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_ProtocolID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_protocolid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_protocolid().data(), this->cap_sm_protocolid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_CAP_SM_DCS;
        break;
      }
      
      // optional string CAP_SM_DCS = 24 [default = ""];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_DCS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_dcs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_dcs().data(), this->cap_sm_dcs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_CAP_SM_ValidityPeriod;
        break;
      }
      
      // optional string CAP_SM_ValidityPeriod = 25 [default = ""];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_ValidityPeriod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_validityperiod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_validityperiod().data(), this->cap_sm_validityperiod().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_CAP_SM_RejectDuplicate;
        break;
      }
      
      // optional string CAP_SM_RejectDuplicate = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SM_RejectDuplicate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sm_rejectduplicate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sm_rejectduplicate().data(), this->cap_sm_rejectduplicate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_CAP_SCCP_CallingGT;
        break;
      }
      
      // optional string CAP_SCCP_CallingGT = 27 [default = ""];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SCCP_CallingGT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sccp_callinggt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sccp_callinggt().data(), this->cap_sccp_callinggt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_CAP_SCCP_CalledGT;
        break;
      }
      
      // optional string CAP_SCCP_CalledGT = 28 [default = ""];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SCCP_CalledGT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_sccp_calledgt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_sccp_calledgt().data(), this->cap_sccp_calledgt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_CAP_TCAP_Remote_Transaction_Id;
        break;
      }
      
      // optional string CAP_TCAP_Remote_Transaction_Id = 29 [default = ""];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_TCAP_Remote_Transaction_Id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_tcap_remote_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_tcap_remote_transaction_id().data(), this->cap_tcap_remote_transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_CAP_TCAP_Local_Transaction_Id;
        break;
      }
      
      // optional string CAP_TCAP_Local_Transaction_Id = 30 [default = ""];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_TCAP_Local_Transaction_Id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_tcap_local_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_tcap_local_transaction_id().data(), this->cap_tcap_local_transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_CAP_CellID_AreaID_LAI;
        break;
      }
      
      // optional string CAP_CellID_AreaID_LAI = 31 [default = ""];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_CellID_AreaID_LAI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_cellid_areaid_lai()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_cellid_areaid_lai().data(), this->cap_cellid_areaid_lai().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_CAP_Event_Type_SMS;
        break;
      }
      
      // optional uint32 CAP_Event_Type_SMS = 32 [default = 1000];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_Event_Type_SMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_event_type_sms_)));
          set_has_cap_event_type_sms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_CAP_TCAP_Error_Cause;
        break;
      }
      
      // optional uint32 CAP_TCAP_Error_Cause = 33 [default = 500];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_TCAP_Error_Cause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_tcap_error_cause_)));
          set_has_cap_tcap_error_cause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_CAP_SCCP_Error_Cause;
        break;
      }
      
      // optional uint32 CAP_SCCP_Error_Cause = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAP_SCCP_Error_Cause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cap_sccp_error_cause_)));
          set_has_cap_sccp_error_cause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_CAP_SMSpecificInfo;
        break;
      }
      
      // optional string CAP_SMSpecificInfo = 35 [default = ""];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAP_SMSpecificInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cap_smspecificinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cap_smspecificinfo().data(), this->cap_smspecificinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_totalGSUCCService;
        break;
      }
      
      // optional uint32 m_totalGSUCCService = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalGSUCCService:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_totalgsuccservice_)));
          set_has_m_totalgsuccservice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_totalUSUCCService;
        break;
      }
      
      // optional uint32 m_totalUSUCCService = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalUSUCCService:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_totalusuccservice_)));
          set_has_m_totalusuccservice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_subscriptionIdInfo;
        break;
      }
      
      // optional .SubscriptionIdConfig subscriptionIdInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptionIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriptionidinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoredIDPSMSToCCRIData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 callTypeVal = 1 [default = 0];
  if (has_calltypeval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->calltypeval(), output);
  }
  
  // optional uint32 CAP_Service_Key = 2 [default = 0];
  if (has_cap_service_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cap_service_key(), output);
  }
  
  // optional string CAP_Dialed_Digits = 3 [default = ""];
  if (has_cap_dialed_digits()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_dialed_digits().data(), this->cap_dialed_digits().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cap_dialed_digits(), output);
  }
  
  // optional uint32 CAP_Called_TON = 4 [default = 1000];
  if (has_cap_called_ton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cap_called_ton(), output);
  }
  
  // optional string CAP_CLI = 5 [default = ""];
  if (has_cap_cli()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_cli().data(), this->cap_cli().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cap_cli(), output);
  }
  
  // optional string CAP_Location_Number = 6 [default = ""];
  if (has_cap_location_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_location_number().data(), this->cap_location_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cap_location_number(), output);
  }
  
  // optional string CAP_IMSI = 7 [default = ""];
  if (has_cap_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_imsi().data(), this->cap_imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cap_imsi(), output);
  }
  
  // optional string CAP_VLR_Number = 8 [default = ""];
  if (has_cap_vlr_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_vlr_number().data(), this->cap_vlr_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cap_vlr_number(), output);
  }
  
  // optional string CAP_Call_Reference = 9 [default = ""];
  if (has_cap_call_reference()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_call_reference().data(), this->cap_call_reference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cap_call_reference(), output);
  }
  
  // optional string CAP_MSC_Address = 10 [default = ""];
  if (has_cap_msc_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_msc_address().data(), this->cap_msc_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cap_msc_address(), output);
  }
  
  // optional uint32 CAP_Called_NPI = 11 [default = 1000];
  if (has_cap_called_npi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cap_called_npi(), output);
  }
  
  // optional uint32 CAP_Calling_NOA = 12 [default = 1000];
  if (has_cap_calling_noa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cap_calling_noa(), output);
  }
  
  // optional uint32 CAP_CLI_NPI = 13 [default = 1000];
  if (has_cap_cli_npi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cap_cli_npi(), output);
  }
  
  // optional uint32 CAP_Version = 14 [default = 1000];
  if (has_cap_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cap_version(), output);
  }
  
  // optional string CAP_SMSC_Address = 15 [default = ""];
  if (has_cap_smsc_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_smsc_address().data(), this->cap_smsc_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->cap_smsc_address(), output);
  }
  
  // optional string CAP_SGSN_Address = 16 [default = ""];
  if (has_cap_sgsn_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sgsn_address().data(), this->cap_sgsn_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->cap_sgsn_address(), output);
  }
  
  // optional string CAP_SM_IMEI = 17 [default = ""];
  if (has_cap_sm_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_imei().data(), this->cap_sm_imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->cap_sm_imei(), output);
  }
  
  // optional string CAP_SM_StatusReportRequest = 18 [default = ""];
  if (has_cap_sm_statusreportrequest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_statusreportrequest().data(), this->cap_sm_statusreportrequest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->cap_sm_statusreportrequest(), output);
  }
  
  // optional string CAP_SM_UserDataHeaderIndicator = 19 [default = ""];
  if (has_cap_sm_userdataheaderindicator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_userdataheaderindicator().data(), this->cap_sm_userdataheaderindicator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->cap_sm_userdataheaderindicator(), output);
  }
  
  // optional string CAP_SM_ReplyPath = 20 [default = ""];
  if (has_cap_sm_replypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_replypath().data(), this->cap_sm_replypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->cap_sm_replypath(), output);
  }
  
  // optional string CAP_SM_VPFormat = 21 [default = ""];
  if (has_cap_sm_vpformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_vpformat().data(), this->cap_sm_vpformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->cap_sm_vpformat(), output);
  }
  
  // optional string CAP_SM_MessageTypeIndicator = 22 [default = ""];
  if (has_cap_sm_messagetypeindicator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_messagetypeindicator().data(), this->cap_sm_messagetypeindicator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->cap_sm_messagetypeindicator(), output);
  }
  
  // optional string CAP_SM_ProtocolID = 23 [default = ""];
  if (has_cap_sm_protocolid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_protocolid().data(), this->cap_sm_protocolid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->cap_sm_protocolid(), output);
  }
  
  // optional string CAP_SM_DCS = 24 [default = ""];
  if (has_cap_sm_dcs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_dcs().data(), this->cap_sm_dcs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->cap_sm_dcs(), output);
  }
  
  // optional string CAP_SM_ValidityPeriod = 25 [default = ""];
  if (has_cap_sm_validityperiod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_validityperiod().data(), this->cap_sm_validityperiod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->cap_sm_validityperiod(), output);
  }
  
  // optional string CAP_SM_RejectDuplicate = 26 [default = ""];
  if (has_cap_sm_rejectduplicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_rejectduplicate().data(), this->cap_sm_rejectduplicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->cap_sm_rejectduplicate(), output);
  }
  
  // optional string CAP_SCCP_CallingGT = 27 [default = ""];
  if (has_cap_sccp_callinggt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sccp_callinggt().data(), this->cap_sccp_callinggt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->cap_sccp_callinggt(), output);
  }
  
  // optional string CAP_SCCP_CalledGT = 28 [default = ""];
  if (has_cap_sccp_calledgt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sccp_calledgt().data(), this->cap_sccp_calledgt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->cap_sccp_calledgt(), output);
  }
  
  // optional string CAP_TCAP_Remote_Transaction_Id = 29 [default = ""];
  if (has_cap_tcap_remote_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_tcap_remote_transaction_id().data(), this->cap_tcap_remote_transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->cap_tcap_remote_transaction_id(), output);
  }
  
  // optional string CAP_TCAP_Local_Transaction_Id = 30 [default = ""];
  if (has_cap_tcap_local_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_tcap_local_transaction_id().data(), this->cap_tcap_local_transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->cap_tcap_local_transaction_id(), output);
  }
  
  // optional string CAP_CellID_AreaID_LAI = 31 [default = ""];
  if (has_cap_cellid_areaid_lai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_cellid_areaid_lai().data(), this->cap_cellid_areaid_lai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->cap_cellid_areaid_lai(), output);
  }
  
  // optional uint32 CAP_Event_Type_SMS = 32 [default = 1000];
  if (has_cap_event_type_sms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->cap_event_type_sms(), output);
  }
  
  // optional uint32 CAP_TCAP_Error_Cause = 33 [default = 500];
  if (has_cap_tcap_error_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->cap_tcap_error_cause(), output);
  }
  
  // optional uint32 CAP_SCCP_Error_Cause = 34 [default = 0];
  if (has_cap_sccp_error_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->cap_sccp_error_cause(), output);
  }
  
  // optional string CAP_SMSpecificInfo = 35 [default = ""];
  if (has_cap_smspecificinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_smspecificinfo().data(), this->cap_smspecificinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->cap_smspecificinfo(), output);
  }
  
  // optional uint32 m_totalGSUCCService = 36 [default = 0];
  if (has_m_totalgsuccservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->m_totalgsuccservice(), output);
  }
  
  // optional uint32 m_totalUSUCCService = 37 [default = 0];
  if (has_m_totalusuccservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->m_totalusuccservice(), output);
  }
  
  // optional .SubscriptionIdConfig subscriptionIdInfo = 38;
  if (has_subscriptionidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->subscriptionidinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoredIDPSMSToCCRIData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 callTypeVal = 1 [default = 0];
  if (has_calltypeval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->calltypeval(), target);
  }
  
  // optional uint32 CAP_Service_Key = 2 [default = 0];
  if (has_cap_service_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cap_service_key(), target);
  }
  
  // optional string CAP_Dialed_Digits = 3 [default = ""];
  if (has_cap_dialed_digits()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_dialed_digits().data(), this->cap_dialed_digits().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cap_dialed_digits(), target);
  }
  
  // optional uint32 CAP_Called_TON = 4 [default = 1000];
  if (has_cap_called_ton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cap_called_ton(), target);
  }
  
  // optional string CAP_CLI = 5 [default = ""];
  if (has_cap_cli()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_cli().data(), this->cap_cli().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cap_cli(), target);
  }
  
  // optional string CAP_Location_Number = 6 [default = ""];
  if (has_cap_location_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_location_number().data(), this->cap_location_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cap_location_number(), target);
  }
  
  // optional string CAP_IMSI = 7 [default = ""];
  if (has_cap_imsi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_imsi().data(), this->cap_imsi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cap_imsi(), target);
  }
  
  // optional string CAP_VLR_Number = 8 [default = ""];
  if (has_cap_vlr_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_vlr_number().data(), this->cap_vlr_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cap_vlr_number(), target);
  }
  
  // optional string CAP_Call_Reference = 9 [default = ""];
  if (has_cap_call_reference()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_call_reference().data(), this->cap_call_reference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cap_call_reference(), target);
  }
  
  // optional string CAP_MSC_Address = 10 [default = ""];
  if (has_cap_msc_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_msc_address().data(), this->cap_msc_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cap_msc_address(), target);
  }
  
  // optional uint32 CAP_Called_NPI = 11 [default = 1000];
  if (has_cap_called_npi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cap_called_npi(), target);
  }
  
  // optional uint32 CAP_Calling_NOA = 12 [default = 1000];
  if (has_cap_calling_noa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cap_calling_noa(), target);
  }
  
  // optional uint32 CAP_CLI_NPI = 13 [default = 1000];
  if (has_cap_cli_npi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cap_cli_npi(), target);
  }
  
  // optional uint32 CAP_Version = 14 [default = 1000];
  if (has_cap_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cap_version(), target);
  }
  
  // optional string CAP_SMSC_Address = 15 [default = ""];
  if (has_cap_smsc_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_smsc_address().data(), this->cap_smsc_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cap_smsc_address(), target);
  }
  
  // optional string CAP_SGSN_Address = 16 [default = ""];
  if (has_cap_sgsn_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sgsn_address().data(), this->cap_sgsn_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cap_sgsn_address(), target);
  }
  
  // optional string CAP_SM_IMEI = 17 [default = ""];
  if (has_cap_sm_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_imei().data(), this->cap_sm_imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cap_sm_imei(), target);
  }
  
  // optional string CAP_SM_StatusReportRequest = 18 [default = ""];
  if (has_cap_sm_statusreportrequest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_statusreportrequest().data(), this->cap_sm_statusreportrequest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->cap_sm_statusreportrequest(), target);
  }
  
  // optional string CAP_SM_UserDataHeaderIndicator = 19 [default = ""];
  if (has_cap_sm_userdataheaderindicator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_userdataheaderindicator().data(), this->cap_sm_userdataheaderindicator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->cap_sm_userdataheaderindicator(), target);
  }
  
  // optional string CAP_SM_ReplyPath = 20 [default = ""];
  if (has_cap_sm_replypath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_replypath().data(), this->cap_sm_replypath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->cap_sm_replypath(), target);
  }
  
  // optional string CAP_SM_VPFormat = 21 [default = ""];
  if (has_cap_sm_vpformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_vpformat().data(), this->cap_sm_vpformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->cap_sm_vpformat(), target);
  }
  
  // optional string CAP_SM_MessageTypeIndicator = 22 [default = ""];
  if (has_cap_sm_messagetypeindicator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_messagetypeindicator().data(), this->cap_sm_messagetypeindicator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->cap_sm_messagetypeindicator(), target);
  }
  
  // optional string CAP_SM_ProtocolID = 23 [default = ""];
  if (has_cap_sm_protocolid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_protocolid().data(), this->cap_sm_protocolid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->cap_sm_protocolid(), target);
  }
  
  // optional string CAP_SM_DCS = 24 [default = ""];
  if (has_cap_sm_dcs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_dcs().data(), this->cap_sm_dcs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->cap_sm_dcs(), target);
  }
  
  // optional string CAP_SM_ValidityPeriod = 25 [default = ""];
  if (has_cap_sm_validityperiod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_validityperiod().data(), this->cap_sm_validityperiod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->cap_sm_validityperiod(), target);
  }
  
  // optional string CAP_SM_RejectDuplicate = 26 [default = ""];
  if (has_cap_sm_rejectduplicate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sm_rejectduplicate().data(), this->cap_sm_rejectduplicate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->cap_sm_rejectduplicate(), target);
  }
  
  // optional string CAP_SCCP_CallingGT = 27 [default = ""];
  if (has_cap_sccp_callinggt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sccp_callinggt().data(), this->cap_sccp_callinggt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->cap_sccp_callinggt(), target);
  }
  
  // optional string CAP_SCCP_CalledGT = 28 [default = ""];
  if (has_cap_sccp_calledgt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_sccp_calledgt().data(), this->cap_sccp_calledgt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->cap_sccp_calledgt(), target);
  }
  
  // optional string CAP_TCAP_Remote_Transaction_Id = 29 [default = ""];
  if (has_cap_tcap_remote_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_tcap_remote_transaction_id().data(), this->cap_tcap_remote_transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->cap_tcap_remote_transaction_id(), target);
  }
  
  // optional string CAP_TCAP_Local_Transaction_Id = 30 [default = ""];
  if (has_cap_tcap_local_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_tcap_local_transaction_id().data(), this->cap_tcap_local_transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->cap_tcap_local_transaction_id(), target);
  }
  
  // optional string CAP_CellID_AreaID_LAI = 31 [default = ""];
  if (has_cap_cellid_areaid_lai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_cellid_areaid_lai().data(), this->cap_cellid_areaid_lai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->cap_cellid_areaid_lai(), target);
  }
  
  // optional uint32 CAP_Event_Type_SMS = 32 [default = 1000];
  if (has_cap_event_type_sms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->cap_event_type_sms(), target);
  }
  
  // optional uint32 CAP_TCAP_Error_Cause = 33 [default = 500];
  if (has_cap_tcap_error_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->cap_tcap_error_cause(), target);
  }
  
  // optional uint32 CAP_SCCP_Error_Cause = 34 [default = 0];
  if (has_cap_sccp_error_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->cap_sccp_error_cause(), target);
  }
  
  // optional string CAP_SMSpecificInfo = 35 [default = ""];
  if (has_cap_smspecificinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cap_smspecificinfo().data(), this->cap_smspecificinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->cap_smspecificinfo(), target);
  }
  
  // optional uint32 m_totalGSUCCService = 36 [default = 0];
  if (has_m_totalgsuccservice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->m_totalgsuccservice(), target);
  }
  
  // optional uint32 m_totalUSUCCService = 37 [default = 0];
  if (has_m_totalusuccservice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->m_totalusuccservice(), target);
  }
  
  // optional .SubscriptionIdConfig subscriptionIdInfo = 38;
  if (has_subscriptionidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->subscriptionidinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoredIDPSMSToCCRIData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 callTypeVal = 1 [default = 0];
    if (has_calltypeval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calltypeval());
    }
    
    // optional uint32 CAP_Service_Key = 2 [default = 0];
    if (has_cap_service_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_service_key());
    }
    
    // optional string CAP_Dialed_Digits = 3 [default = ""];
    if (has_cap_dialed_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_dialed_digits());
    }
    
    // optional uint32 CAP_Called_TON = 4 [default = 1000];
    if (has_cap_called_ton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_called_ton());
    }
    
    // optional string CAP_CLI = 5 [default = ""];
    if (has_cap_cli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_cli());
    }
    
    // optional string CAP_Location_Number = 6 [default = ""];
    if (has_cap_location_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_location_number());
    }
    
    // optional string CAP_IMSI = 7 [default = ""];
    if (has_cap_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_imsi());
    }
    
    // optional string CAP_VLR_Number = 8 [default = ""];
    if (has_cap_vlr_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_vlr_number());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CAP_Call_Reference = 9 [default = ""];
    if (has_cap_call_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_call_reference());
    }
    
    // optional string CAP_MSC_Address = 10 [default = ""];
    if (has_cap_msc_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_msc_address());
    }
    
    // optional uint32 CAP_Called_NPI = 11 [default = 1000];
    if (has_cap_called_npi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_called_npi());
    }
    
    // optional uint32 CAP_Calling_NOA = 12 [default = 1000];
    if (has_cap_calling_noa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_calling_noa());
    }
    
    // optional uint32 CAP_CLI_NPI = 13 [default = 1000];
    if (has_cap_cli_npi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_cli_npi());
    }
    
    // optional uint32 CAP_Version = 14 [default = 1000];
    if (has_cap_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_version());
    }
    
    // optional string CAP_SMSC_Address = 15 [default = ""];
    if (has_cap_smsc_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_smsc_address());
    }
    
    // optional string CAP_SGSN_Address = 16 [default = ""];
    if (has_cap_sgsn_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sgsn_address());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string CAP_SM_IMEI = 17 [default = ""];
    if (has_cap_sm_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_imei());
    }
    
    // optional string CAP_SM_StatusReportRequest = 18 [default = ""];
    if (has_cap_sm_statusreportrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_statusreportrequest());
    }
    
    // optional string CAP_SM_UserDataHeaderIndicator = 19 [default = ""];
    if (has_cap_sm_userdataheaderindicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_userdataheaderindicator());
    }
    
    // optional string CAP_SM_ReplyPath = 20 [default = ""];
    if (has_cap_sm_replypath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_replypath());
    }
    
    // optional string CAP_SM_VPFormat = 21 [default = ""];
    if (has_cap_sm_vpformat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_vpformat());
    }
    
    // optional string CAP_SM_MessageTypeIndicator = 22 [default = ""];
    if (has_cap_sm_messagetypeindicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_messagetypeindicator());
    }
    
    // optional string CAP_SM_ProtocolID = 23 [default = ""];
    if (has_cap_sm_protocolid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_protocolid());
    }
    
    // optional string CAP_SM_DCS = 24 [default = ""];
    if (has_cap_sm_dcs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_dcs());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string CAP_SM_ValidityPeriod = 25 [default = ""];
    if (has_cap_sm_validityperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_validityperiod());
    }
    
    // optional string CAP_SM_RejectDuplicate = 26 [default = ""];
    if (has_cap_sm_rejectduplicate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sm_rejectduplicate());
    }
    
    // optional string CAP_SCCP_CallingGT = 27 [default = ""];
    if (has_cap_sccp_callinggt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sccp_callinggt());
    }
    
    // optional string CAP_SCCP_CalledGT = 28 [default = ""];
    if (has_cap_sccp_calledgt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_sccp_calledgt());
    }
    
    // optional string CAP_TCAP_Remote_Transaction_Id = 29 [default = ""];
    if (has_cap_tcap_remote_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_tcap_remote_transaction_id());
    }
    
    // optional string CAP_TCAP_Local_Transaction_Id = 30 [default = ""];
    if (has_cap_tcap_local_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_tcap_local_transaction_id());
    }
    
    // optional string CAP_CellID_AreaID_LAI = 31 [default = ""];
    if (has_cap_cellid_areaid_lai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_cellid_areaid_lai());
    }
    
    // optional uint32 CAP_Event_Type_SMS = 32 [default = 1000];
    if (has_cap_event_type_sms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_event_type_sms());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 CAP_TCAP_Error_Cause = 33 [default = 500];
    if (has_cap_tcap_error_cause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_tcap_error_cause());
    }
    
    // optional uint32 CAP_SCCP_Error_Cause = 34 [default = 0];
    if (has_cap_sccp_error_cause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cap_sccp_error_cause());
    }
    
    // optional string CAP_SMSpecificInfo = 35 [default = ""];
    if (has_cap_smspecificinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cap_smspecificinfo());
    }
    
    // optional uint32 m_totalGSUCCService = 36 [default = 0];
    if (has_m_totalgsuccservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_totalgsuccservice());
    }
    
    // optional uint32 m_totalUSUCCService = 37 [default = 0];
    if (has_m_totalusuccservice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_totalusuccservice());
    }
    
    // optional .SubscriptionIdConfig subscriptionIdInfo = 38;
    if (has_subscriptionidinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptionidinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoredIDPSMSToCCRIData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoredIDPSMSToCCRIData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoredIDPSMSToCCRIData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoredIDPSMSToCCRIData::MergeFrom(const StoredIDPSMSToCCRIData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calltypeval()) {
      set_calltypeval(from.calltypeval());
    }
    if (from.has_cap_service_key()) {
      set_cap_service_key(from.cap_service_key());
    }
    if (from.has_cap_dialed_digits()) {
      set_cap_dialed_digits(from.cap_dialed_digits());
    }
    if (from.has_cap_called_ton()) {
      set_cap_called_ton(from.cap_called_ton());
    }
    if (from.has_cap_cli()) {
      set_cap_cli(from.cap_cli());
    }
    if (from.has_cap_location_number()) {
      set_cap_location_number(from.cap_location_number());
    }
    if (from.has_cap_imsi()) {
      set_cap_imsi(from.cap_imsi());
    }
    if (from.has_cap_vlr_number()) {
      set_cap_vlr_number(from.cap_vlr_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cap_call_reference()) {
      set_cap_call_reference(from.cap_call_reference());
    }
    if (from.has_cap_msc_address()) {
      set_cap_msc_address(from.cap_msc_address());
    }
    if (from.has_cap_called_npi()) {
      set_cap_called_npi(from.cap_called_npi());
    }
    if (from.has_cap_calling_noa()) {
      set_cap_calling_noa(from.cap_calling_noa());
    }
    if (from.has_cap_cli_npi()) {
      set_cap_cli_npi(from.cap_cli_npi());
    }
    if (from.has_cap_version()) {
      set_cap_version(from.cap_version());
    }
    if (from.has_cap_smsc_address()) {
      set_cap_smsc_address(from.cap_smsc_address());
    }
    if (from.has_cap_sgsn_address()) {
      set_cap_sgsn_address(from.cap_sgsn_address());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cap_sm_imei()) {
      set_cap_sm_imei(from.cap_sm_imei());
    }
    if (from.has_cap_sm_statusreportrequest()) {
      set_cap_sm_statusreportrequest(from.cap_sm_statusreportrequest());
    }
    if (from.has_cap_sm_userdataheaderindicator()) {
      set_cap_sm_userdataheaderindicator(from.cap_sm_userdataheaderindicator());
    }
    if (from.has_cap_sm_replypath()) {
      set_cap_sm_replypath(from.cap_sm_replypath());
    }
    if (from.has_cap_sm_vpformat()) {
      set_cap_sm_vpformat(from.cap_sm_vpformat());
    }
    if (from.has_cap_sm_messagetypeindicator()) {
      set_cap_sm_messagetypeindicator(from.cap_sm_messagetypeindicator());
    }
    if (from.has_cap_sm_protocolid()) {
      set_cap_sm_protocolid(from.cap_sm_protocolid());
    }
    if (from.has_cap_sm_dcs()) {
      set_cap_sm_dcs(from.cap_sm_dcs());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cap_sm_validityperiod()) {
      set_cap_sm_validityperiod(from.cap_sm_validityperiod());
    }
    if (from.has_cap_sm_rejectduplicate()) {
      set_cap_sm_rejectduplicate(from.cap_sm_rejectduplicate());
    }
    if (from.has_cap_sccp_callinggt()) {
      set_cap_sccp_callinggt(from.cap_sccp_callinggt());
    }
    if (from.has_cap_sccp_calledgt()) {
      set_cap_sccp_calledgt(from.cap_sccp_calledgt());
    }
    if (from.has_cap_tcap_remote_transaction_id()) {
      set_cap_tcap_remote_transaction_id(from.cap_tcap_remote_transaction_id());
    }
    if (from.has_cap_tcap_local_transaction_id()) {
      set_cap_tcap_local_transaction_id(from.cap_tcap_local_transaction_id());
    }
    if (from.has_cap_cellid_areaid_lai()) {
      set_cap_cellid_areaid_lai(from.cap_cellid_areaid_lai());
    }
    if (from.has_cap_event_type_sms()) {
      set_cap_event_type_sms(from.cap_event_type_sms());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_cap_tcap_error_cause()) {
      set_cap_tcap_error_cause(from.cap_tcap_error_cause());
    }
    if (from.has_cap_sccp_error_cause()) {
      set_cap_sccp_error_cause(from.cap_sccp_error_cause());
    }
    if (from.has_cap_smspecificinfo()) {
      set_cap_smspecificinfo(from.cap_smspecificinfo());
    }
    if (from.has_m_totalgsuccservice()) {
      set_m_totalgsuccservice(from.m_totalgsuccservice());
    }
    if (from.has_m_totalusuccservice()) {
      set_m_totalusuccservice(from.m_totalusuccservice());
    }
    if (from.has_subscriptionidinfo()) {
      mutable_subscriptionidinfo()->::SubscriptionIdConfig::MergeFrom(from.subscriptionidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoredIDPSMSToCCRIData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredIDPSMSToCCRIData::CopyFrom(const StoredIDPSMSToCCRIData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredIDPSMSToCCRIData::IsInitialized() const {
  
  return true;
}

void StoredIDPSMSToCCRIData::Swap(StoredIDPSMSToCCRIData* other) {
  if (other != this) {
    std::swap(calltypeval_, other->calltypeval_);
    std::swap(cap_service_key_, other->cap_service_key_);
    std::swap(cap_dialed_digits_, other->cap_dialed_digits_);
    std::swap(cap_called_ton_, other->cap_called_ton_);
    std::swap(cap_cli_, other->cap_cli_);
    std::swap(cap_location_number_, other->cap_location_number_);
    std::swap(cap_imsi_, other->cap_imsi_);
    std::swap(cap_vlr_number_, other->cap_vlr_number_);
    std::swap(cap_call_reference_, other->cap_call_reference_);
    std::swap(cap_msc_address_, other->cap_msc_address_);
    std::swap(cap_called_npi_, other->cap_called_npi_);
    std::swap(cap_calling_noa_, other->cap_calling_noa_);
    std::swap(cap_cli_npi_, other->cap_cli_npi_);
    std::swap(cap_version_, other->cap_version_);
    std::swap(cap_smsc_address_, other->cap_smsc_address_);
    std::swap(cap_sgsn_address_, other->cap_sgsn_address_);
    std::swap(cap_sm_imei_, other->cap_sm_imei_);
    std::swap(cap_sm_statusreportrequest_, other->cap_sm_statusreportrequest_);
    std::swap(cap_sm_userdataheaderindicator_, other->cap_sm_userdataheaderindicator_);
    std::swap(cap_sm_replypath_, other->cap_sm_replypath_);
    std::swap(cap_sm_vpformat_, other->cap_sm_vpformat_);
    std::swap(cap_sm_messagetypeindicator_, other->cap_sm_messagetypeindicator_);
    std::swap(cap_sm_protocolid_, other->cap_sm_protocolid_);
    std::swap(cap_sm_dcs_, other->cap_sm_dcs_);
    std::swap(cap_sm_validityperiod_, other->cap_sm_validityperiod_);
    std::swap(cap_sm_rejectduplicate_, other->cap_sm_rejectduplicate_);
    std::swap(cap_sccp_callinggt_, other->cap_sccp_callinggt_);
    std::swap(cap_sccp_calledgt_, other->cap_sccp_calledgt_);
    std::swap(cap_tcap_remote_transaction_id_, other->cap_tcap_remote_transaction_id_);
    std::swap(cap_tcap_local_transaction_id_, other->cap_tcap_local_transaction_id_);
    std::swap(cap_cellid_areaid_lai_, other->cap_cellid_areaid_lai_);
    std::swap(cap_event_type_sms_, other->cap_event_type_sms_);
    std::swap(cap_tcap_error_cause_, other->cap_tcap_error_cause_);
    std::swap(cap_sccp_error_cause_, other->cap_sccp_error_cause_);
    std::swap(cap_smspecificinfo_, other->cap_smspecificinfo_);
    std::swap(m_totalgsuccservice_, other->m_totalgsuccservice_);
    std::swap(m_totalusuccservice_, other->m_totalusuccservice_);
    std::swap(subscriptionidinfo_, other->subscriptionidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoredIDPSMSToCCRIData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoredIDPSMSToCCRIData_descriptor_;
  metadata.reflection = StoredIDPSMSToCCRIData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDPToCCRIData::kCallTypeValFieldNumber;
const int IDPToCCRIData::kServiceKeyFieldNumber;
const int IDPToCCRIData::kDialedDigitsFieldNumber;
const int IDPToCCRIData::kCalledTONFieldNumber;
const int IDPToCCRIData::kCLIFieldNumber;
const int IDPToCCRIData::kCallingCategoryFieldNumber;
const int IDPToCCRIData::kLocationNumberFieldNumber;
const int IDPToCCRIData::kRedirectingNumberFieldNumber;
const int IDPToCCRIData::kRedirectingIndicatorFieldNumber;
const int IDPToCCRIData::kOriginalRedirectingReasonFieldNumber;
const int IDPToCCRIData::kRedirectionCounterFieldNumber;
const int IDPToCCRIData::kRedirectingReasonFieldNumber;
const int IDPToCCRIData::kIMSIFieldNumber;
const int IDPToCCRIData::kVLRNumberFieldNumber;
const int IDPToCCRIData::kCallReferenceFieldNumber;
const int IDPToCCRIData::kMSCAddressFieldNumber;
const int IDPToCCRIData::kCalledNPIFieldNumber;
const int IDPToCCRIData::kCallingNOAFieldNumber;
const int IDPToCCRIData::kCLINPIFieldNumber;
const int IDPToCCRIData::kCLIRFieldNumber;
const int IDPToCCRIData::kVersionFieldNumber;
const int IDPToCCRIData::kSCCPCallingGTFieldNumber;
const int IDPToCCRIData::kSCCPCalledGTFieldNumber;
const int IDPToCCRIData::kGSMForwardingPendingFieldNumber;
const int IDPToCCRIData::kTCAPRemoteTransactionIdFieldNumber;
const int IDPToCCRIData::kTCAPLocalTransactionIdFieldNumber;
const int IDPToCCRIData::kCellIDAreaIDLAIFieldNumber;
const int IDPToCCRIData::kEventTypeBCSMFieldNumber;
const int IDPToCCRIData::kTCAPErrorCauseFieldNumber;
const int IDPToCCRIData::kSCCPErrorCauseFieldNumber;
const int IDPToCCRIData::kGMSCFieldNumber;
const int IDPToCCRIData::kExtBasicServiceCodeFieldNumber;
const int IDPToCCRIData::kBearerCapabilityFieldNumber;
const int IDPToCCRIData::kBearerCapabilityTransferFieldNumber;
const int IDPToCCRIData::kBearerCapabilityTransferRateFieldNumber;
const int IDPToCCRIData::kBearerCapabilityTransferModeFieldNumber;
const int IDPToCCRIData::kBearerCapabilityCdrFieldNumber;
const int IDPToCCRIData::kCAPIsFollowingOnFieldNumber;
const int IDPToCCRIData::kSubscriptionIdInfoFieldNumber;
#endif  // !_MSC_VER

IDPToCCRIData::IDPToCCRIData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDPToCCRIData::InitAsDefaultInstance() {
  subscriptionidinfo_ = const_cast< ::SubscriptionIdConfig*>(&::SubscriptionIdConfig::default_instance());
}

IDPToCCRIData::IDPToCCRIData(const IDPToCCRIData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDPToCCRIData::SharedCtor() {
  _cached_size_ = 0;
  calltypeval_ = 0u;
  service_key_ = 0u;
  dialed_digits_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  called_ton_ = 1000u;
  cli_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  calling_category_ = 1000u;
  location_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redirecting_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redirecting_indicator_ = 1000u;
  original_redirecting_reason_ = 1000u;
  redirection_counter_ = 1000u;
  redirecting_reason_ = 1000u;
  imsi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vlr_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_reference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msc_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  called_npi_ = 1000u;
  calling_noa_ = 1000u;
  cli_npi_ = 1000u;
  clir_ = 1000u;
  version_ = 1000u;
  sccp_callinggt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sccp_calledgt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gsm_forwarding_pending_ = 1000u;
  tcap_remote_transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcap_local_transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cellid_areaid_lai_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_type_bcsm_ = 1000u;
  tcap_error_cause_ = 500u;
  sccp_error_cause_ = 0u;
  gmsc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_basic_service_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bearer_capability_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bearer_capability_transfer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bearer_capability_transfer_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bearer_capability_transfer_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bearer_capability_cdr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capisfollowingon_ = false;
  subscriptionidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDPToCCRIData::~IDPToCCRIData() {
  SharedDtor();
}

void IDPToCCRIData::SharedDtor() {
  if (dialed_digits_ != &::google::protobuf::internal::kEmptyString) {
    delete dialed_digits_;
  }
  if (cli_ != &::google::protobuf::internal::kEmptyString) {
    delete cli_;
  }
  if (location_number_ != &::google::protobuf::internal::kEmptyString) {
    delete location_number_;
  }
  if (redirecting_number_ != &::google::protobuf::internal::kEmptyString) {
    delete redirecting_number_;
  }
  if (imsi_ != &::google::protobuf::internal::kEmptyString) {
    delete imsi_;
  }
  if (vlr_number_ != &::google::protobuf::internal::kEmptyString) {
    delete vlr_number_;
  }
  if (call_reference_ != &::google::protobuf::internal::kEmptyString) {
    delete call_reference_;
  }
  if (msc_address_ != &::google::protobuf::internal::kEmptyString) {
    delete msc_address_;
  }
  if (sccp_callinggt_ != &::google::protobuf::internal::kEmptyString) {
    delete sccp_callinggt_;
  }
  if (sccp_calledgt_ != &::google::protobuf::internal::kEmptyString) {
    delete sccp_calledgt_;
  }
  if (tcap_remote_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete tcap_remote_transaction_id_;
  }
  if (tcap_local_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete tcap_local_transaction_id_;
  }
  if (cellid_areaid_lai_ != &::google::protobuf::internal::kEmptyString) {
    delete cellid_areaid_lai_;
  }
  if (gmsc_ != &::google::protobuf::internal::kEmptyString) {
    delete gmsc_;
  }
  if (ext_basic_service_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_basic_service_code_;
  }
  if (bearer_capability_ != &::google::protobuf::internal::kEmptyString) {
    delete bearer_capability_;
  }
  if (bearer_capability_transfer_ != &::google::protobuf::internal::kEmptyString) {
    delete bearer_capability_transfer_;
  }
  if (bearer_capability_transfer_rate_ != &::google::protobuf::internal::kEmptyString) {
    delete bearer_capability_transfer_rate_;
  }
  if (bearer_capability_transfer_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete bearer_capability_transfer_mode_;
  }
  if (bearer_capability_cdr_ != &::google::protobuf::internal::kEmptyString) {
    delete bearer_capability_cdr_;
  }
  if (this != default_instance_) {
    delete subscriptionidinfo_;
  }
}

void IDPToCCRIData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDPToCCRIData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDPToCCRIData_descriptor_;
}

const IDPToCCRIData& IDPToCCRIData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

IDPToCCRIData* IDPToCCRIData::default_instance_ = NULL;

IDPToCCRIData* IDPToCCRIData::New() const {
  return new IDPToCCRIData;
}

void IDPToCCRIData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    calltypeval_ = 0u;
    service_key_ = 0u;
    if (has_dialed_digits()) {
      if (dialed_digits_ != &::google::protobuf::internal::kEmptyString) {
        dialed_digits_->clear();
      }
    }
    called_ton_ = 1000u;
    if (has_cli()) {
      if (cli_ != &::google::protobuf::internal::kEmptyString) {
        cli_->clear();
      }
    }
    calling_category_ = 1000u;
    if (has_location_number()) {
      if (location_number_ != &::google::protobuf::internal::kEmptyString) {
        location_number_->clear();
      }
    }
    if (has_redirecting_number()) {
      if (redirecting_number_ != &::google::protobuf::internal::kEmptyString) {
        redirecting_number_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    redirecting_indicator_ = 1000u;
    original_redirecting_reason_ = 1000u;
    redirection_counter_ = 1000u;
    redirecting_reason_ = 1000u;
    if (has_imsi()) {
      if (imsi_ != &::google::protobuf::internal::kEmptyString) {
        imsi_->clear();
      }
    }
    if (has_vlr_number()) {
      if (vlr_number_ != &::google::protobuf::internal::kEmptyString) {
        vlr_number_->clear();
      }
    }
    if (has_call_reference()) {
      if (call_reference_ != &::google::protobuf::internal::kEmptyString) {
        call_reference_->clear();
      }
    }
    if (has_msc_address()) {
      if (msc_address_ != &::google::protobuf::internal::kEmptyString) {
        msc_address_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    called_npi_ = 1000u;
    calling_noa_ = 1000u;
    cli_npi_ = 1000u;
    clir_ = 1000u;
    version_ = 1000u;
    if (has_sccp_callinggt()) {
      if (sccp_callinggt_ != &::google::protobuf::internal::kEmptyString) {
        sccp_callinggt_->clear();
      }
    }
    if (has_sccp_calledgt()) {
      if (sccp_calledgt_ != &::google::protobuf::internal::kEmptyString) {
        sccp_calledgt_->clear();
      }
    }
    gsm_forwarding_pending_ = 1000u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_tcap_remote_transaction_id()) {
      if (tcap_remote_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        tcap_remote_transaction_id_->clear();
      }
    }
    if (has_tcap_local_transaction_id()) {
      if (tcap_local_transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        tcap_local_transaction_id_->clear();
      }
    }
    if (has_cellid_areaid_lai()) {
      if (cellid_areaid_lai_ != &::google::protobuf::internal::kEmptyString) {
        cellid_areaid_lai_->clear();
      }
    }
    event_type_bcsm_ = 1000u;
    tcap_error_cause_ = 500u;
    sccp_error_cause_ = 0u;
    if (has_gmsc()) {
      if (gmsc_ != &::google::protobuf::internal::kEmptyString) {
        gmsc_->clear();
      }
    }
    if (has_ext_basic_service_code()) {
      if (ext_basic_service_code_ != &::google::protobuf::internal::kEmptyString) {
        ext_basic_service_code_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_bearer_capability()) {
      if (bearer_capability_ != &::google::protobuf::internal::kEmptyString) {
        bearer_capability_->clear();
      }
    }
    if (has_bearer_capability_transfer()) {
      if (bearer_capability_transfer_ != &::google::protobuf::internal::kEmptyString) {
        bearer_capability_transfer_->clear();
      }
    }
    if (has_bearer_capability_transfer_rate()) {
      if (bearer_capability_transfer_rate_ != &::google::protobuf::internal::kEmptyString) {
        bearer_capability_transfer_rate_->clear();
      }
    }
    if (has_bearer_capability_transfer_mode()) {
      if (bearer_capability_transfer_mode_ != &::google::protobuf::internal::kEmptyString) {
        bearer_capability_transfer_mode_->clear();
      }
    }
    if (has_bearer_capability_cdr()) {
      if (bearer_capability_cdr_ != &::google::protobuf::internal::kEmptyString) {
        bearer_capability_cdr_->clear();
      }
    }
    capisfollowingon_ = false;
    if (has_subscriptionidinfo()) {
      if (subscriptionidinfo_ != NULL) subscriptionidinfo_->::SubscriptionIdConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDPToCCRIData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 callTypeVal = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calltypeval_)));
          set_has_calltypeval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Service_Key;
        break;
      }
      
      // optional uint32 Service_Key = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Service_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_key_)));
          set_has_service_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Dialed_Digits;
        break;
      }
      
      // optional bytes Dialed_Digits = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dialed_Digits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dialed_digits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Called_TON;
        break;
      }
      
      // optional uint32 Called_TON = 4 [default = 1000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Called_TON:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &called_ton_)));
          set_has_called_ton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CLI;
        break;
      }
      
      // optional bytes CLI = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CLI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cli()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Calling_Category;
        break;
      }
      
      // optional uint32 Calling_Category = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Calling_Category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calling_category_)));
          set_has_calling_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Location_Number;
        break;
      }
      
      // optional bytes Location_Number = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Location_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_location_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Redirecting_Number;
        break;
      }
      
      // optional bytes Redirecting_Number = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Redirecting_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_redirecting_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Redirecting_Indicator;
        break;
      }
      
      // optional uint32 Redirecting_Indicator = 9 [default = 1000];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Redirecting_Indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirecting_indicator_)));
          set_has_redirecting_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Original_Redirecting_Reason;
        break;
      }
      
      // optional uint32 Original_Redirecting_Reason = 10 [default = 1000];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Original_Redirecting_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_redirecting_reason_)));
          set_has_original_redirecting_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Redirection_Counter;
        break;
      }
      
      // optional uint32 Redirection_Counter = 11 [default = 1000];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Redirection_Counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirection_counter_)));
          set_has_redirection_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Redirecting_Reason;
        break;
      }
      
      // optional uint32 Redirecting_Reason = 12 [default = 1000];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Redirecting_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirecting_reason_)));
          set_has_redirecting_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_IMSI;
        break;
      }
      
      // optional bytes IMSI = 13 [default = ""];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IMSI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imsi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_VLR_Number;
        break;
      }
      
      // optional bytes VLR_Number = 14 [default = ""];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VLR_Number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vlr_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Call_Reference;
        break;
      }
      
      // optional bytes Call_Reference = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Call_Reference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call_reference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_MSC_Address;
        break;
      }
      
      // optional bytes MSC_Address = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MSC_Address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msc_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Called_NPI;
        break;
      }
      
      // optional uint32 Called_NPI = 17 [default = 1000];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Called_NPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &called_npi_)));
          set_has_called_npi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Calling_NOA;
        break;
      }
      
      // optional uint32 Calling_NOA = 18 [default = 1000];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Calling_NOA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calling_noa_)));
          set_has_calling_noa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_CLI_NPI;
        break;
      }
      
      // optional uint32 CLI_NPI = 19 [default = 1000];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLI_NPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cli_npi_)));
          set_has_cli_npi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_CLIR;
        break;
      }
      
      // optional uint32 CLIR = 20 [default = 1000];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLIR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clir_)));
          set_has_clir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Version;
        break;
      }
      
      // optional uint32 Version = 21 [default = 1000];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_SCCP_CallingGT;
        break;
      }
      
      // optional bytes SCCP_CallingGT = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SCCP_CallingGT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sccp_callinggt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_SCCP_CalledGT;
        break;
      }
      
      // optional bytes SCCP_CalledGT = 23 [default = ""];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SCCP_CalledGT:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sccp_calledgt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_GSM_Forwarding_Pending;
        break;
      }
      
      // optional uint32 GSM_Forwarding_Pending = 24 [default = 1000];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GSM_Forwarding_Pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gsm_forwarding_pending_)));
          set_has_gsm_forwarding_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_TCAP_Remote_Transaction_Id;
        break;
      }
      
      // optional bytes TCAP_Remote_Transaction_Id = 25 [default = ""];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TCAP_Remote_Transaction_Id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tcap_remote_transaction_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_TCAP_Local_Transaction_Id;
        break;
      }
      
      // optional bytes TCAP_Local_Transaction_Id = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TCAP_Local_Transaction_Id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tcap_local_transaction_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_CellID_AreaID_LAI;
        break;
      }
      
      // optional bytes CellID_AreaID_LAI = 27 [default = ""];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CellID_AreaID_LAI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cellid_areaid_lai()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_Event_Type_BCSM;
        break;
      }
      
      // optional uint32 Event_Type_BCSM = 28 [default = 1000];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Event_Type_BCSM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_bcsm_)));
          set_has_event_type_bcsm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_TCAP_Error_Cause;
        break;
      }
      
      // optional uint32 TCAP_Error_Cause = 29 [default = 500];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TCAP_Error_Cause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcap_error_cause_)));
          set_has_tcap_error_cause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_SCCP_Error_Cause;
        break;
      }
      
      // optional uint32 SCCP_Error_Cause = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SCCP_Error_Cause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sccp_error_cause_)));
          set_has_sccp_error_cause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_GMSC;
        break;
      }
      
      // optional bytes GMSC = 31 [default = ""];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMSC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gmsc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_Ext_Basic_Service_Code;
        break;
      }
      
      // optional bytes Ext_Basic_Service_Code = 32 [default = ""];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ext_Basic_Service_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ext_basic_service_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_Bearer_Capability;
        break;
      }
      
      // optional bytes Bearer_Capability = 33 [default = ""];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bearer_Capability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bearer_capability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_Bearer_Capability_Transfer;
        break;
      }
      
      // optional bytes Bearer_Capability_Transfer = 34 [default = ""];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bearer_Capability_Transfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bearer_capability_transfer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_Bearer_Capability_Transfer_Rate;
        break;
      }
      
      // optional bytes Bearer_Capability_Transfer_Rate = 35 [default = ""];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bearer_Capability_Transfer_Rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bearer_capability_transfer_rate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_Bearer_Capability_Transfer_Mode;
        break;
      }
      
      // optional bytes Bearer_Capability_Transfer_Mode = 36 [default = ""];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bearer_Capability_Transfer_Mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bearer_capability_transfer_mode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_Bearer_Capability_Cdr;
        break;
      }
      
      // optional bytes Bearer_Capability_Cdr = 37 [default = ""];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Bearer_Capability_Cdr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bearer_capability_cdr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_CAPIsFollowingOn;
        break;
      }
      
      // optional bool CAPIsFollowingOn = 38 [default = false];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAPIsFollowingOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capisfollowingon_)));
          set_has_capisfollowingon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_subscriptionIdInfo;
        break;
      }
      
      // optional .SubscriptionIdConfig subscriptionIdInfo = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptionIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriptionidinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDPToCCRIData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 callTypeVal = 1 [default = 0];
  if (has_calltypeval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->calltypeval(), output);
  }
  
  // optional uint32 Service_Key = 2 [default = 0];
  if (has_service_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_key(), output);
  }
  
  // optional bytes Dialed_Digits = 3 [default = ""];
  if (has_dialed_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dialed_digits(), output);
  }
  
  // optional uint32 Called_TON = 4 [default = 1000];
  if (has_called_ton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->called_ton(), output);
  }
  
  // optional bytes CLI = 5 [default = ""];
  if (has_cli()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->cli(), output);
  }
  
  // optional uint32 Calling_Category = 6 [default = 1000];
  if (has_calling_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->calling_category(), output);
  }
  
  // optional bytes Location_Number = 7 [default = ""];
  if (has_location_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->location_number(), output);
  }
  
  // optional bytes Redirecting_Number = 8 [default = ""];
  if (has_redirecting_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->redirecting_number(), output);
  }
  
  // optional uint32 Redirecting_Indicator = 9 [default = 1000];
  if (has_redirecting_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->redirecting_indicator(), output);
  }
  
  // optional uint32 Original_Redirecting_Reason = 10 [default = 1000];
  if (has_original_redirecting_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->original_redirecting_reason(), output);
  }
  
  // optional uint32 Redirection_Counter = 11 [default = 1000];
  if (has_redirection_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->redirection_counter(), output);
  }
  
  // optional uint32 Redirecting_Reason = 12 [default = 1000];
  if (has_redirecting_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->redirecting_reason(), output);
  }
  
  // optional bytes IMSI = 13 [default = ""];
  if (has_imsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->imsi(), output);
  }
  
  // optional bytes VLR_Number = 14 [default = ""];
  if (has_vlr_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->vlr_number(), output);
  }
  
  // optional bytes Call_Reference = 15 [default = ""];
  if (has_call_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->call_reference(), output);
  }
  
  // optional bytes MSC_Address = 16 [default = ""];
  if (has_msc_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->msc_address(), output);
  }
  
  // optional uint32 Called_NPI = 17 [default = 1000];
  if (has_called_npi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->called_npi(), output);
  }
  
  // optional uint32 Calling_NOA = 18 [default = 1000];
  if (has_calling_noa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->calling_noa(), output);
  }
  
  // optional uint32 CLI_NPI = 19 [default = 1000];
  if (has_cli_npi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->cli_npi(), output);
  }
  
  // optional uint32 CLIR = 20 [default = 1000];
  if (has_clir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->clir(), output);
  }
  
  // optional uint32 Version = 21 [default = 1000];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->version(), output);
  }
  
  // optional bytes SCCP_CallingGT = 22 [default = ""];
  if (has_sccp_callinggt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->sccp_callinggt(), output);
  }
  
  // optional bytes SCCP_CalledGT = 23 [default = ""];
  if (has_sccp_calledgt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->sccp_calledgt(), output);
  }
  
  // optional uint32 GSM_Forwarding_Pending = 24 [default = 1000];
  if (has_gsm_forwarding_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->gsm_forwarding_pending(), output);
  }
  
  // optional bytes TCAP_Remote_Transaction_Id = 25 [default = ""];
  if (has_tcap_remote_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      25, this->tcap_remote_transaction_id(), output);
  }
  
  // optional bytes TCAP_Local_Transaction_Id = 26 [default = ""];
  if (has_tcap_local_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->tcap_local_transaction_id(), output);
  }
  
  // optional bytes CellID_AreaID_LAI = 27 [default = ""];
  if (has_cellid_areaid_lai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      27, this->cellid_areaid_lai(), output);
  }
  
  // optional uint32 Event_Type_BCSM = 28 [default = 1000];
  if (has_event_type_bcsm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->event_type_bcsm(), output);
  }
  
  // optional uint32 TCAP_Error_Cause = 29 [default = 500];
  if (has_tcap_error_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->tcap_error_cause(), output);
  }
  
  // optional uint32 SCCP_Error_Cause = 30 [default = 0];
  if (has_sccp_error_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->sccp_error_cause(), output);
  }
  
  // optional bytes GMSC = 31 [default = ""];
  if (has_gmsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      31, this->gmsc(), output);
  }
  
  // optional bytes Ext_Basic_Service_Code = 32 [default = ""];
  if (has_ext_basic_service_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      32, this->ext_basic_service_code(), output);
  }
  
  // optional bytes Bearer_Capability = 33 [default = ""];
  if (has_bearer_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      33, this->bearer_capability(), output);
  }
  
  // optional bytes Bearer_Capability_Transfer = 34 [default = ""];
  if (has_bearer_capability_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      34, this->bearer_capability_transfer(), output);
  }
  
  // optional bytes Bearer_Capability_Transfer_Rate = 35 [default = ""];
  if (has_bearer_capability_transfer_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      35, this->bearer_capability_transfer_rate(), output);
  }
  
  // optional bytes Bearer_Capability_Transfer_Mode = 36 [default = ""];
  if (has_bearer_capability_transfer_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      36, this->bearer_capability_transfer_mode(), output);
  }
  
  // optional bytes Bearer_Capability_Cdr = 37 [default = ""];
  if (has_bearer_capability_cdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      37, this->bearer_capability_cdr(), output);
  }
  
  // optional bool CAPIsFollowingOn = 38 [default = false];
  if (has_capisfollowingon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->capisfollowingon(), output);
  }
  
  // optional .SubscriptionIdConfig subscriptionIdInfo = 39;
  if (has_subscriptionidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->subscriptionidinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDPToCCRIData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 callTypeVal = 1 [default = 0];
  if (has_calltypeval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->calltypeval(), target);
  }
  
  // optional uint32 Service_Key = 2 [default = 0];
  if (has_service_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_key(), target);
  }
  
  // optional bytes Dialed_Digits = 3 [default = ""];
  if (has_dialed_digits()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dialed_digits(), target);
  }
  
  // optional uint32 Called_TON = 4 [default = 1000];
  if (has_called_ton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->called_ton(), target);
  }
  
  // optional bytes CLI = 5 [default = ""];
  if (has_cli()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cli(), target);
  }
  
  // optional uint32 Calling_Category = 6 [default = 1000];
  if (has_calling_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->calling_category(), target);
  }
  
  // optional bytes Location_Number = 7 [default = ""];
  if (has_location_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->location_number(), target);
  }
  
  // optional bytes Redirecting_Number = 8 [default = ""];
  if (has_redirecting_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->redirecting_number(), target);
  }
  
  // optional uint32 Redirecting_Indicator = 9 [default = 1000];
  if (has_redirecting_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->redirecting_indicator(), target);
  }
  
  // optional uint32 Original_Redirecting_Reason = 10 [default = 1000];
  if (has_original_redirecting_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->original_redirecting_reason(), target);
  }
  
  // optional uint32 Redirection_Counter = 11 [default = 1000];
  if (has_redirection_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->redirection_counter(), target);
  }
  
  // optional uint32 Redirecting_Reason = 12 [default = 1000];
  if (has_redirecting_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->redirecting_reason(), target);
  }
  
  // optional bytes IMSI = 13 [default = ""];
  if (has_imsi()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->imsi(), target);
  }
  
  // optional bytes VLR_Number = 14 [default = ""];
  if (has_vlr_number()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->vlr_number(), target);
  }
  
  // optional bytes Call_Reference = 15 [default = ""];
  if (has_call_reference()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->call_reference(), target);
  }
  
  // optional bytes MSC_Address = 16 [default = ""];
  if (has_msc_address()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->msc_address(), target);
  }
  
  // optional uint32 Called_NPI = 17 [default = 1000];
  if (has_called_npi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->called_npi(), target);
  }
  
  // optional uint32 Calling_NOA = 18 [default = 1000];
  if (has_calling_noa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->calling_noa(), target);
  }
  
  // optional uint32 CLI_NPI = 19 [default = 1000];
  if (has_cli_npi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->cli_npi(), target);
  }
  
  // optional uint32 CLIR = 20 [default = 1000];
  if (has_clir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->clir(), target);
  }
  
  // optional uint32 Version = 21 [default = 1000];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->version(), target);
  }
  
  // optional bytes SCCP_CallingGT = 22 [default = ""];
  if (has_sccp_callinggt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->sccp_callinggt(), target);
  }
  
  // optional bytes SCCP_CalledGT = 23 [default = ""];
  if (has_sccp_calledgt()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->sccp_calledgt(), target);
  }
  
  // optional uint32 GSM_Forwarding_Pending = 24 [default = 1000];
  if (has_gsm_forwarding_pending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->gsm_forwarding_pending(), target);
  }
  
  // optional bytes TCAP_Remote_Transaction_Id = 25 [default = ""];
  if (has_tcap_remote_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->tcap_remote_transaction_id(), target);
  }
  
  // optional bytes TCAP_Local_Transaction_Id = 26 [default = ""];
  if (has_tcap_local_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->tcap_local_transaction_id(), target);
  }
  
  // optional bytes CellID_AreaID_LAI = 27 [default = ""];
  if (has_cellid_areaid_lai()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        27, this->cellid_areaid_lai(), target);
  }
  
  // optional uint32 Event_Type_BCSM = 28 [default = 1000];
  if (has_event_type_bcsm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->event_type_bcsm(), target);
  }
  
  // optional uint32 TCAP_Error_Cause = 29 [default = 500];
  if (has_tcap_error_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->tcap_error_cause(), target);
  }
  
  // optional uint32 SCCP_Error_Cause = 30 [default = 0];
  if (has_sccp_error_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->sccp_error_cause(), target);
  }
  
  // optional bytes GMSC = 31 [default = ""];
  if (has_gmsc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        31, this->gmsc(), target);
  }
  
  // optional bytes Ext_Basic_Service_Code = 32 [default = ""];
  if (has_ext_basic_service_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        32, this->ext_basic_service_code(), target);
  }
  
  // optional bytes Bearer_Capability = 33 [default = ""];
  if (has_bearer_capability()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->bearer_capability(), target);
  }
  
  // optional bytes Bearer_Capability_Transfer = 34 [default = ""];
  if (has_bearer_capability_transfer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        34, this->bearer_capability_transfer(), target);
  }
  
  // optional bytes Bearer_Capability_Transfer_Rate = 35 [default = ""];
  if (has_bearer_capability_transfer_rate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        35, this->bearer_capability_transfer_rate(), target);
  }
  
  // optional bytes Bearer_Capability_Transfer_Mode = 36 [default = ""];
  if (has_bearer_capability_transfer_mode()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        36, this->bearer_capability_transfer_mode(), target);
  }
  
  // optional bytes Bearer_Capability_Cdr = 37 [default = ""];
  if (has_bearer_capability_cdr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->bearer_capability_cdr(), target);
  }
  
  // optional bool CAPIsFollowingOn = 38 [default = false];
  if (has_capisfollowingon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->capisfollowingon(), target);
  }
  
  // optional .SubscriptionIdConfig subscriptionIdInfo = 39;
  if (has_subscriptionidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->subscriptionidinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDPToCCRIData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 callTypeVal = 1 [default = 0];
    if (has_calltypeval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calltypeval());
    }
    
    // optional uint32 Service_Key = 2 [default = 0];
    if (has_service_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_key());
    }
    
    // optional bytes Dialed_Digits = 3 [default = ""];
    if (has_dialed_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dialed_digits());
    }
    
    // optional uint32 Called_TON = 4 [default = 1000];
    if (has_called_ton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->called_ton());
    }
    
    // optional bytes CLI = 5 [default = ""];
    if (has_cli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cli());
    }
    
    // optional uint32 Calling_Category = 6 [default = 1000];
    if (has_calling_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calling_category());
    }
    
    // optional bytes Location_Number = 7 [default = ""];
    if (has_location_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->location_number());
    }
    
    // optional bytes Redirecting_Number = 8 [default = ""];
    if (has_redirecting_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->redirecting_number());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Redirecting_Indicator = 9 [default = 1000];
    if (has_redirecting_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirecting_indicator());
    }
    
    // optional uint32 Original_Redirecting_Reason = 10 [default = 1000];
    if (has_original_redirecting_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_redirecting_reason());
    }
    
    // optional uint32 Redirection_Counter = 11 [default = 1000];
    if (has_redirection_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirection_counter());
    }
    
    // optional uint32 Redirecting_Reason = 12 [default = 1000];
    if (has_redirecting_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirecting_reason());
    }
    
    // optional bytes IMSI = 13 [default = ""];
    if (has_imsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imsi());
    }
    
    // optional bytes VLR_Number = 14 [default = ""];
    if (has_vlr_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vlr_number());
    }
    
    // optional bytes Call_Reference = 15 [default = ""];
    if (has_call_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call_reference());
    }
    
    // optional bytes MSC_Address = 16 [default = ""];
    if (has_msc_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msc_address());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 Called_NPI = 17 [default = 1000];
    if (has_called_npi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->called_npi());
    }
    
    // optional uint32 Calling_NOA = 18 [default = 1000];
    if (has_calling_noa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calling_noa());
    }
    
    // optional uint32 CLI_NPI = 19 [default = 1000];
    if (has_cli_npi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cli_npi());
    }
    
    // optional uint32 CLIR = 20 [default = 1000];
    if (has_clir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clir());
    }
    
    // optional uint32 Version = 21 [default = 1000];
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional bytes SCCP_CallingGT = 22 [default = ""];
    if (has_sccp_callinggt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sccp_callinggt());
    }
    
    // optional bytes SCCP_CalledGT = 23 [default = ""];
    if (has_sccp_calledgt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sccp_calledgt());
    }
    
    // optional uint32 GSM_Forwarding_Pending = 24 [default = 1000];
    if (has_gsm_forwarding_pending()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gsm_forwarding_pending());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes TCAP_Remote_Transaction_Id = 25 [default = ""];
    if (has_tcap_remote_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tcap_remote_transaction_id());
    }
    
    // optional bytes TCAP_Local_Transaction_Id = 26 [default = ""];
    if (has_tcap_local_transaction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tcap_local_transaction_id());
    }
    
    // optional bytes CellID_AreaID_LAI = 27 [default = ""];
    if (has_cellid_areaid_lai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cellid_areaid_lai());
    }
    
    // optional uint32 Event_Type_BCSM = 28 [default = 1000];
    if (has_event_type_bcsm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type_bcsm());
    }
    
    // optional uint32 TCAP_Error_Cause = 29 [default = 500];
    if (has_tcap_error_cause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcap_error_cause());
    }
    
    // optional uint32 SCCP_Error_Cause = 30 [default = 0];
    if (has_sccp_error_cause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sccp_error_cause());
    }
    
    // optional bytes GMSC = 31 [default = ""];
    if (has_gmsc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gmsc());
    }
    
    // optional bytes Ext_Basic_Service_Code = 32 [default = ""];
    if (has_ext_basic_service_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ext_basic_service_code());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes Bearer_Capability = 33 [default = ""];
    if (has_bearer_capability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bearer_capability());
    }
    
    // optional bytes Bearer_Capability_Transfer = 34 [default = ""];
    if (has_bearer_capability_transfer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bearer_capability_transfer());
    }
    
    // optional bytes Bearer_Capability_Transfer_Rate = 35 [default = ""];
    if (has_bearer_capability_transfer_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bearer_capability_transfer_rate());
    }
    
    // optional bytes Bearer_Capability_Transfer_Mode = 36 [default = ""];
    if (has_bearer_capability_transfer_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bearer_capability_transfer_mode());
    }
    
    // optional bytes Bearer_Capability_Cdr = 37 [default = ""];
    if (has_bearer_capability_cdr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bearer_capability_cdr());
    }
    
    // optional bool CAPIsFollowingOn = 38 [default = false];
    if (has_capisfollowingon()) {
      total_size += 2 + 1;
    }
    
    // optional .SubscriptionIdConfig subscriptionIdInfo = 39;
    if (has_subscriptionidinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptionidinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDPToCCRIData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDPToCCRIData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDPToCCRIData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDPToCCRIData::MergeFrom(const IDPToCCRIData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calltypeval()) {
      set_calltypeval(from.calltypeval());
    }
    if (from.has_service_key()) {
      set_service_key(from.service_key());
    }
    if (from.has_dialed_digits()) {
      set_dialed_digits(from.dialed_digits());
    }
    if (from.has_called_ton()) {
      set_called_ton(from.called_ton());
    }
    if (from.has_cli()) {
      set_cli(from.cli());
    }
    if (from.has_calling_category()) {
      set_calling_category(from.calling_category());
    }
    if (from.has_location_number()) {
      set_location_number(from.location_number());
    }
    if (from.has_redirecting_number()) {
      set_redirecting_number(from.redirecting_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_redirecting_indicator()) {
      set_redirecting_indicator(from.redirecting_indicator());
    }
    if (from.has_original_redirecting_reason()) {
      set_original_redirecting_reason(from.original_redirecting_reason());
    }
    if (from.has_redirection_counter()) {
      set_redirection_counter(from.redirection_counter());
    }
    if (from.has_redirecting_reason()) {
      set_redirecting_reason(from.redirecting_reason());
    }
    if (from.has_imsi()) {
      set_imsi(from.imsi());
    }
    if (from.has_vlr_number()) {
      set_vlr_number(from.vlr_number());
    }
    if (from.has_call_reference()) {
      set_call_reference(from.call_reference());
    }
    if (from.has_msc_address()) {
      set_msc_address(from.msc_address());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_called_npi()) {
      set_called_npi(from.called_npi());
    }
    if (from.has_calling_noa()) {
      set_calling_noa(from.calling_noa());
    }
    if (from.has_cli_npi()) {
      set_cli_npi(from.cli_npi());
    }
    if (from.has_clir()) {
      set_clir(from.clir());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_sccp_callinggt()) {
      set_sccp_callinggt(from.sccp_callinggt());
    }
    if (from.has_sccp_calledgt()) {
      set_sccp_calledgt(from.sccp_calledgt());
    }
    if (from.has_gsm_forwarding_pending()) {
      set_gsm_forwarding_pending(from.gsm_forwarding_pending());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tcap_remote_transaction_id()) {
      set_tcap_remote_transaction_id(from.tcap_remote_transaction_id());
    }
    if (from.has_tcap_local_transaction_id()) {
      set_tcap_local_transaction_id(from.tcap_local_transaction_id());
    }
    if (from.has_cellid_areaid_lai()) {
      set_cellid_areaid_lai(from.cellid_areaid_lai());
    }
    if (from.has_event_type_bcsm()) {
      set_event_type_bcsm(from.event_type_bcsm());
    }
    if (from.has_tcap_error_cause()) {
      set_tcap_error_cause(from.tcap_error_cause());
    }
    if (from.has_sccp_error_cause()) {
      set_sccp_error_cause(from.sccp_error_cause());
    }
    if (from.has_gmsc()) {
      set_gmsc(from.gmsc());
    }
    if (from.has_ext_basic_service_code()) {
      set_ext_basic_service_code(from.ext_basic_service_code());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bearer_capability()) {
      set_bearer_capability(from.bearer_capability());
    }
    if (from.has_bearer_capability_transfer()) {
      set_bearer_capability_transfer(from.bearer_capability_transfer());
    }
    if (from.has_bearer_capability_transfer_rate()) {
      set_bearer_capability_transfer_rate(from.bearer_capability_transfer_rate());
    }
    if (from.has_bearer_capability_transfer_mode()) {
      set_bearer_capability_transfer_mode(from.bearer_capability_transfer_mode());
    }
    if (from.has_bearer_capability_cdr()) {
      set_bearer_capability_cdr(from.bearer_capability_cdr());
    }
    if (from.has_capisfollowingon()) {
      set_capisfollowingon(from.capisfollowingon());
    }
    if (from.has_subscriptionidinfo()) {
      mutable_subscriptionidinfo()->::SubscriptionIdConfig::MergeFrom(from.subscriptionidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDPToCCRIData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDPToCCRIData::CopyFrom(const IDPToCCRIData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDPToCCRIData::IsInitialized() const {
  
  return true;
}

void IDPToCCRIData::Swap(IDPToCCRIData* other) {
  if (other != this) {
    std::swap(calltypeval_, other->calltypeval_);
    std::swap(service_key_, other->service_key_);
    std::swap(dialed_digits_, other->dialed_digits_);
    std::swap(called_ton_, other->called_ton_);
    std::swap(cli_, other->cli_);
    std::swap(calling_category_, other->calling_category_);
    std::swap(location_number_, other->location_number_);
    std::swap(redirecting_number_, other->redirecting_number_);
    std::swap(redirecting_indicator_, other->redirecting_indicator_);
    std::swap(original_redirecting_reason_, other->original_redirecting_reason_);
    std::swap(redirection_counter_, other->redirection_counter_);
    std::swap(redirecting_reason_, other->redirecting_reason_);
    std::swap(imsi_, other->imsi_);
    std::swap(vlr_number_, other->vlr_number_);
    std::swap(call_reference_, other->call_reference_);
    std::swap(msc_address_, other->msc_address_);
    std::swap(called_npi_, other->called_npi_);
    std::swap(calling_noa_, other->calling_noa_);
    std::swap(cli_npi_, other->cli_npi_);
    std::swap(clir_, other->clir_);
    std::swap(version_, other->version_);
    std::swap(sccp_callinggt_, other->sccp_callinggt_);
    std::swap(sccp_calledgt_, other->sccp_calledgt_);
    std::swap(gsm_forwarding_pending_, other->gsm_forwarding_pending_);
    std::swap(tcap_remote_transaction_id_, other->tcap_remote_transaction_id_);
    std::swap(tcap_local_transaction_id_, other->tcap_local_transaction_id_);
    std::swap(cellid_areaid_lai_, other->cellid_areaid_lai_);
    std::swap(event_type_bcsm_, other->event_type_bcsm_);
    std::swap(tcap_error_cause_, other->tcap_error_cause_);
    std::swap(sccp_error_cause_, other->sccp_error_cause_);
    std::swap(gmsc_, other->gmsc_);
    std::swap(ext_basic_service_code_, other->ext_basic_service_code_);
    std::swap(bearer_capability_, other->bearer_capability_);
    std::swap(bearer_capability_transfer_, other->bearer_capability_transfer_);
    std::swap(bearer_capability_transfer_rate_, other->bearer_capability_transfer_rate_);
    std::swap(bearer_capability_transfer_mode_, other->bearer_capability_transfer_mode_);
    std::swap(bearer_capability_cdr_, other->bearer_capability_cdr_);
    std::swap(capisfollowingon_, other->capisfollowingon_);
    std::swap(subscriptionidinfo_, other->subscriptionidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDPToCCRIData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDPToCCRIData_descriptor_;
  metadata.reflection = IDPToCCRIData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbERBData::kErbRecvEvtTypeFieldNumber;
const int pbERBData::kEventSpecInfoFieldNumber;
const int pbERBData::kRecvlegIdFieldNumber;
const int pbERBData::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

pbERBData::pbERBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbERBData::InitAsDefaultInstance() {
}

pbERBData::pbERBData(const pbERBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbERBData::SharedCtor() {
  _cached_size_ = 0;
  erbrecvevttype_ = 0u;
  eventspecinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recvlegid_ = 0u;
  msgtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbERBData::~pbERBData() {
  SharedDtor();
}

void pbERBData::SharedDtor() {
  if (eventspecinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete eventspecinfo_;
  }
  if (this != default_instance_) {
  }
}

void pbERBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbERBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbERBData_descriptor_;
}

const pbERBData& pbERBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbERBData* pbERBData::default_instance_ = NULL;

pbERBData* pbERBData::New() const {
  return new pbERBData;
}

void pbERBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    erbrecvevttype_ = 0u;
    if (has_eventspecinfo()) {
      if (eventspecinfo_ != &::google::protobuf::internal::kEmptyString) {
        eventspecinfo_->clear();
      }
    }
    recvlegid_ = 0u;
    msgtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbERBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 erbRecvEvtType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &erbrecvevttype_)));
          set_has_erbrecvevttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventSpecInfo;
        break;
      }
      
      // optional string eventSpecInfo = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventSpecInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventspecinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventspecinfo().data(), this->eventspecinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recvlegId;
        break;
      }
      
      // optional uint32 recvlegId = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvlegId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvlegid_)));
          set_has_recvlegid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgType;
        break;
      }
      
      // optional uint32 msgType = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbERBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 erbRecvEvtType = 1 [default = 0];
  if (has_erbrecvevttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->erbrecvevttype(), output);
  }
  
  // optional string eventSpecInfo = 2 [default = ""];
  if (has_eventspecinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventspecinfo().data(), this->eventspecinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventspecinfo(), output);
  }
  
  // optional uint32 recvlegId = 3 [default = 0];
  if (has_recvlegid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recvlegid(), output);
  }
  
  // optional uint32 msgType = 4 [default = 0];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbERBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 erbRecvEvtType = 1 [default = 0];
  if (has_erbrecvevttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->erbrecvevttype(), target);
  }
  
  // optional string eventSpecInfo = 2 [default = ""];
  if (has_eventspecinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventspecinfo().data(), this->eventspecinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventspecinfo(), target);
  }
  
  // optional uint32 recvlegId = 3 [default = 0];
  if (has_recvlegid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recvlegid(), target);
  }
  
  // optional uint32 msgType = 4 [default = 0];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbERBData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 erbRecvEvtType = 1 [default = 0];
    if (has_erbrecvevttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->erbrecvevttype());
    }
    
    // optional string eventSpecInfo = 2 [default = ""];
    if (has_eventspecinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventspecinfo());
    }
    
    // optional uint32 recvlegId = 3 [default = 0];
    if (has_recvlegid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvlegid());
    }
    
    // optional uint32 msgType = 4 [default = 0];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbERBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbERBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbERBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbERBData::MergeFrom(const pbERBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_erbrecvevttype()) {
      set_erbrecvevttype(from.erbrecvevttype());
    }
    if (from.has_eventspecinfo()) {
      set_eventspecinfo(from.eventspecinfo());
    }
    if (from.has_recvlegid()) {
      set_recvlegid(from.recvlegid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbERBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbERBData::CopyFrom(const pbERBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbERBData::IsInitialized() const {
  
  return true;
}

void pbERBData::Swap(pbERBData* other) {
  if (other != this) {
    std::swap(erbrecvevttype_, other->erbrecvevttype_);
    std::swap(eventspecinfo_, other->eventspecinfo_);
    std::swap(recvlegid_, other->recvlegid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbERBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbERBData_descriptor_;
  metadata.reflection = pbERBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbActivityTimerData::kAtTimerFieldNumber;
const int pbActivityTimerData::kResponseTimeoutFieldNumber;
const int pbActivityTimerData::kRetryCountFieldNumber;
const int pbActivityTimerData::kInvokeIdFieldNumber;
#endif  // !_MSC_VER

pbActivityTimerData::pbActivityTimerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbActivityTimerData::InitAsDefaultInstance() {
}

pbActivityTimerData::pbActivityTimerData(const pbActivityTimerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbActivityTimerData::SharedCtor() {
  _cached_size_ = 0;
  attimer_ = 0u;
  responsetimeout_ = 0u;
  retrycount_ = 0u;
  invokeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbActivityTimerData::~pbActivityTimerData() {
  SharedDtor();
}

void pbActivityTimerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbActivityTimerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbActivityTimerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbActivityTimerData_descriptor_;
}

const pbActivityTimerData& pbActivityTimerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbActivityTimerData* pbActivityTimerData::default_instance_ = NULL;

pbActivityTimerData* pbActivityTimerData::New() const {
  return new pbActivityTimerData;
}

void pbActivityTimerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attimer_ = 0u;
    responsetimeout_ = 0u;
    retrycount_ = 0u;
    invokeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbActivityTimerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atTimer = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attimer_)));
          set_has_attimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_responseTimeout;
        break;
      }
      
      // optional uint32 responseTimeout = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_responseTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &responsetimeout_)));
          set_has_responsetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_retryCount;
        break;
      }
      
      // optional uint32 retryCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrycount_)));
          set_has_retrycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_invokeId;
        break;
      }
      
      // optional uint32 invokeId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invokeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invokeid_)));
          set_has_invokeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbActivityTimerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 atTimer = 1 [default = 0];
  if (has_attimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attimer(), output);
  }
  
  // optional uint32 responseTimeout = 2 [default = 0];
  if (has_responsetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->responsetimeout(), output);
  }
  
  // optional uint32 retryCount = 3 [default = 0];
  if (has_retrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->retrycount(), output);
  }
  
  // optional uint32 invokeId = 4 [default = 0];
  if (has_invokeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->invokeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbActivityTimerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 atTimer = 1 [default = 0];
  if (has_attimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attimer(), target);
  }
  
  // optional uint32 responseTimeout = 2 [default = 0];
  if (has_responsetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->responsetimeout(), target);
  }
  
  // optional uint32 retryCount = 3 [default = 0];
  if (has_retrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->retrycount(), target);
  }
  
  // optional uint32 invokeId = 4 [default = 0];
  if (has_invokeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->invokeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbActivityTimerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atTimer = 1 [default = 0];
    if (has_attimer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attimer());
    }
    
    // optional uint32 responseTimeout = 2 [default = 0];
    if (has_responsetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->responsetimeout());
    }
    
    // optional uint32 retryCount = 3 [default = 0];
    if (has_retrycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrycount());
    }
    
    // optional uint32 invokeId = 4 [default = 0];
    if (has_invokeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invokeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbActivityTimerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbActivityTimerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbActivityTimerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbActivityTimerData::MergeFrom(const pbActivityTimerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attimer()) {
      set_attimer(from.attimer());
    }
    if (from.has_responsetimeout()) {
      set_responsetimeout(from.responsetimeout());
    }
    if (from.has_retrycount()) {
      set_retrycount(from.retrycount());
    }
    if (from.has_invokeid()) {
      set_invokeid(from.invokeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbActivityTimerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbActivityTimerData::CopyFrom(const pbActivityTimerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbActivityTimerData::IsInitialized() const {
  
  return true;
}

void pbActivityTimerData::Swap(pbActivityTimerData* other) {
  if (other != this) {
    std::swap(attimer_, other->attimer_);
    std::swap(responsetimeout_, other->responsetimeout_);
    std::swap(retrycount_, other->retrycount_);
    std::swap(invokeid_, other->invokeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbActivityTimerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbActivityTimerData_descriptor_;
  metadata.reflection = pbActivityTimerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbIwfDccaSessionCtxt::kDccaStateFieldNumber;
const int pbIwfDccaSessionCtxt::kDestHostFieldNumber;
const int pbIwfDccaSessionCtxt::kDestRealmFieldNumber;
const int pbIwfDccaSessionCtxt::kIwfCCFHActionFieldNumber;
const int pbIwfDccaSessionCtxt::kIsFailoverSupportedFieldNumber;
const int pbIwfDccaSessionCtxt::kIsDoneFieldNumber;
const int pbIwfDccaSessionCtxt::kRetryCountFieldNumber;
#endif  // !_MSC_VER

pbIwfDccaSessionCtxt::pbIwfDccaSessionCtxt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbIwfDccaSessionCtxt::InitAsDefaultInstance() {
}

pbIwfDccaSessionCtxt::pbIwfDccaSessionCtxt(const pbIwfDccaSessionCtxt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbIwfDccaSessionCtxt::SharedCtor() {
  _cached_size_ = 0;
  dccastate_ = 0u;
  desthost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destrealm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iwfccfhaction_ = 0u;
  isfailoversupported_ = true;
  isdone_ = false;
  retrycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbIwfDccaSessionCtxt::~pbIwfDccaSessionCtxt() {
  SharedDtor();
}

void pbIwfDccaSessionCtxt::SharedDtor() {
  if (desthost_ != &::google::protobuf::internal::kEmptyString) {
    delete desthost_;
  }
  if (destrealm_ != &::google::protobuf::internal::kEmptyString) {
    delete destrealm_;
  }
  if (this != default_instance_) {
  }
}

void pbIwfDccaSessionCtxt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbIwfDccaSessionCtxt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfDccaSessionCtxt_descriptor_;
}

const pbIwfDccaSessionCtxt& pbIwfDccaSessionCtxt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbIwfDccaSessionCtxt* pbIwfDccaSessionCtxt::default_instance_ = NULL;

pbIwfDccaSessionCtxt* pbIwfDccaSessionCtxt::New() const {
  return new pbIwfDccaSessionCtxt;
}

void pbIwfDccaSessionCtxt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dccastate_ = 0u;
    if (has_desthost()) {
      if (desthost_ != &::google::protobuf::internal::kEmptyString) {
        desthost_->clear();
      }
    }
    if (has_destrealm()) {
      if (destrealm_ != &::google::protobuf::internal::kEmptyString) {
        destrealm_->clear();
      }
    }
    iwfccfhaction_ = 0u;
    isfailoversupported_ = true;
    isdone_ = false;
    retrycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbIwfDccaSessionCtxt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DccaState = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dccastate_)));
          set_has_dccastate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_destHost;
        break;
      }
      
      // optional string destHost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desthost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desthost().data(), this->desthost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_destRealm;
        break;
      }
      
      // optional string destRealm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destRealm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destrealm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destrealm().data(), this->destrealm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IwfCCFHAction;
        break;
      }
      
      // optional uint32 IwfCCFHAction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IwfCCFHAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iwfccfhaction_)));
          set_has_iwfccfhaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isFailoverSupported;
        break;
      }
      
      // optional bool isFailoverSupported = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFailoverSupported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfailoversupported_)));
          set_has_isfailoversupported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isDone;
        break;
      }
      
      // optional bool isDone = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdone_)));
          set_has_isdone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_retryCount;
        break;
      }
      
      // optional uint32 retryCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retrycount_)));
          set_has_retrycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbIwfDccaSessionCtxt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 DccaState = 1 [default = 0];
  if (has_dccastate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dccastate(), output);
  }
  
  // optional string destHost = 2;
  if (has_desthost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desthost().data(), this->desthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desthost(), output);
  }
  
  // optional string destRealm = 3;
  if (has_destrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destrealm().data(), this->destrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->destrealm(), output);
  }
  
  // optional uint32 IwfCCFHAction = 4;
  if (has_iwfccfhaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iwfccfhaction(), output);
  }
  
  // optional bool isFailoverSupported = 5 [default = true];
  if (has_isfailoversupported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isfailoversupported(), output);
  }
  
  // optional bool isDone = 6 [default = false];
  if (has_isdone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdone(), output);
  }
  
  // optional uint32 retryCount = 7 [default = 0];
  if (has_retrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->retrycount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbIwfDccaSessionCtxt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 DccaState = 1 [default = 0];
  if (has_dccastate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dccastate(), target);
  }
  
  // optional string destHost = 2;
  if (has_desthost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desthost().data(), this->desthost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desthost(), target);
  }
  
  // optional string destRealm = 3;
  if (has_destrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destrealm().data(), this->destrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destrealm(), target);
  }
  
  // optional uint32 IwfCCFHAction = 4;
  if (has_iwfccfhaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iwfccfhaction(), target);
  }
  
  // optional bool isFailoverSupported = 5 [default = true];
  if (has_isfailoversupported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isfailoversupported(), target);
  }
  
  // optional bool isDone = 6 [default = false];
  if (has_isdone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdone(), target);
  }
  
  // optional uint32 retryCount = 7 [default = 0];
  if (has_retrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->retrycount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbIwfDccaSessionCtxt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DccaState = 1 [default = 0];
    if (has_dccastate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dccastate());
    }
    
    // optional string destHost = 2;
    if (has_desthost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desthost());
    }
    
    // optional string destRealm = 3;
    if (has_destrealm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destrealm());
    }
    
    // optional uint32 IwfCCFHAction = 4;
    if (has_iwfccfhaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iwfccfhaction());
    }
    
    // optional bool isFailoverSupported = 5 [default = true];
    if (has_isfailoversupported()) {
      total_size += 1 + 1;
    }
    
    // optional bool isDone = 6 [default = false];
    if (has_isdone()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 retryCount = 7 [default = 0];
    if (has_retrycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retrycount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbIwfDccaSessionCtxt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbIwfDccaSessionCtxt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbIwfDccaSessionCtxt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbIwfDccaSessionCtxt::MergeFrom(const pbIwfDccaSessionCtxt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dccastate()) {
      set_dccastate(from.dccastate());
    }
    if (from.has_desthost()) {
      set_desthost(from.desthost());
    }
    if (from.has_destrealm()) {
      set_destrealm(from.destrealm());
    }
    if (from.has_iwfccfhaction()) {
      set_iwfccfhaction(from.iwfccfhaction());
    }
    if (from.has_isfailoversupported()) {
      set_isfailoversupported(from.isfailoversupported());
    }
    if (from.has_isdone()) {
      set_isdone(from.isdone());
    }
    if (from.has_retrycount()) {
      set_retrycount(from.retrycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbIwfDccaSessionCtxt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbIwfDccaSessionCtxt::CopyFrom(const pbIwfDccaSessionCtxt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbIwfDccaSessionCtxt::IsInitialized() const {
  
  return true;
}

void pbIwfDccaSessionCtxt::Swap(pbIwfDccaSessionCtxt* other) {
  if (other != this) {
    std::swap(dccastate_, other->dccastate_);
    std::swap(desthost_, other->desthost_);
    std::swap(destrealm_, other->destrealm_);
    std::swap(iwfccfhaction_, other->iwfccfhaction_);
    std::swap(isfailoversupported_, other->isfailoversupported_);
    std::swap(isdone_, other->isdone_);
    std::swap(retrycount_, other->retrycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbIwfDccaSessionCtxt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbIwfDccaSessionCtxt_descriptor_;
  metadata.reflection = pbIwfDccaSessionCtxt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbConnectArgData::kHasServiceControlFieldNumber;
const int pbConnectArgData::kHasCapInfoFieldNumber;
const int pbConnectArgData::kHasCapConnectInfoFieldNumber;
const int pbConnectArgData::kCapAnncAccessNoFieldNumber;
const int pbConnectArgData::kCapConnAnncNoNatrueFieldNumber;
const int pbConnectArgData::kCapConnAnncNoInnFieldNumber;
const int pbConnectArgData::kCapConnAnncNoNPIFieldNumber;
const int pbConnectArgData::kCapConnDestNoFieldNumber;
const int pbConnectArgData::kCapConnDestNoNatureFieldNumber;
const int pbConnectArgData::kCapConnDestNoNPIFieldNumber;
const int pbConnectArgData::kCapConnDestINNFieldNumber;
const int pbConnectArgData::kGenericNoFieldNumber;
const int pbConnectArgData::kGenericNoNatureFieldNumber;
const int pbConnectArgData::kGenericNoNPIFieldNumber;
const int pbConnectArgData::kGenericNoNIIFieldNumber;
const int pbConnectArgData::kGenericNoARIFieldNumber;
const int pbConnectArgData::kGenericNoSCIFieldNumber;
const int pbConnectArgData::kGenericNoNQIFieldNumber;
const int pbConnectArgData::kRedirectingNumFieldNumber;
const int pbConnectArgData::kRedirectNoNOAFieldNumber;
const int pbConnectArgData::kRedirectNoNPIFieldNumber;
const int pbConnectArgData::kRedirectNoARIFieldNumber;
const int pbConnectArgData::kRedirectIndFieldNumber;
const int pbConnectArgData::kOrigRedirectReasonFieldNumber;
const int pbConnectArgData::kRedirectionCountFieldNumber;
const int pbConnectArgData::kRedirectReasonFieldNumber;
const int pbConnectArgData::kOrigCalledPartyIdFieldNumber;
const int pbConnectArgData::kOriginalCalledNoNPIFieldNumber;
const int pbConnectArgData::kOriginalCalledNoNOAFieldNumber;
const int pbConnectArgData::kOriginalCalledNoARIFieldNumber;
const int pbConnectArgData::kCapConnOCSIApplicableFieldNumber;
const int pbConnectArgData::kCapConnSuppressionOfAnncFieldNumber;
const int pbConnectArgData::kCapConnCallingCategoryFieldNumber;
#endif  // !_MSC_VER

pbConnectArgData::pbConnectArgData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbConnectArgData::InitAsDefaultInstance() {
}

pbConnectArgData::pbConnectArgData(const pbConnectArgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbConnectArgData::SharedCtor() {
  _cached_size_ = 0;
  hasservicecontrol_ = false;
  hascapinfo_ = false;
  hascapconnectinfo_ = false;
  capanncaccessno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capconnanncnonatrue_ = 0u;
  capconnanncnoinn_ = 0u;
  capconnanncnonpi_ = 0u;
  capconndestno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capconndestnonature_ = 0u;
  capconndestnonpi_ = 0u;
  capconndestinn_ = 0u;
  genericno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  genericnonature_ = 0u;
  genericnonpi_ = 0u;
  genericnonii_ = 0u;
  genericnoari_ = 0u;
  genericnosci_ = 0u;
  genericnonqi_ = 0u;
  redirectingnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redirectnonoa_ = 0u;
  redirectnonpi_ = 0u;
  redirectnoari_ = 0u;
  redirectind_ = 0u;
  origredirectreason_ = 0u;
  redirectioncount_ = 0u;
  redirectreason_ = 0u;
  origcalledpartyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  originalcallednonpi_ = 0u;
  originalcallednonoa_ = 0u;
  originalcallednoari_ = 0u;
  capconnocsiapplicable_ = 0u;
  capconnsuppressionofannc_ = 0u;
  capconncallingcategory_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbConnectArgData::~pbConnectArgData() {
  SharedDtor();
}

void pbConnectArgData::SharedDtor() {
  if (capanncaccessno_ != &::google::protobuf::internal::kEmptyString) {
    delete capanncaccessno_;
  }
  if (capconndestno_ != &::google::protobuf::internal::kEmptyString) {
    delete capconndestno_;
  }
  if (genericno_ != &::google::protobuf::internal::kEmptyString) {
    delete genericno_;
  }
  if (redirectingnum_ != &::google::protobuf::internal::kEmptyString) {
    delete redirectingnum_;
  }
  if (origcalledpartyid_ != &::google::protobuf::internal::kEmptyString) {
    delete origcalledpartyid_;
  }
  if (this != default_instance_) {
  }
}

void pbConnectArgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbConnectArgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbConnectArgData_descriptor_;
}

const pbConnectArgData& pbConnectArgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbConnectArgData* pbConnectArgData::default_instance_ = NULL;

pbConnectArgData* pbConnectArgData::New() const {
  return new pbConnectArgData;
}

void pbConnectArgData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasservicecontrol_ = false;
    hascapinfo_ = false;
    hascapconnectinfo_ = false;
    if (has_capanncaccessno()) {
      if (capanncaccessno_ != &::google::protobuf::internal::kEmptyString) {
        capanncaccessno_->clear();
      }
    }
    capconnanncnonatrue_ = 0u;
    capconnanncnoinn_ = 0u;
    capconnanncnonpi_ = 0u;
    if (has_capconndestno()) {
      if (capconndestno_ != &::google::protobuf::internal::kEmptyString) {
        capconndestno_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    capconndestnonature_ = 0u;
    capconndestnonpi_ = 0u;
    capconndestinn_ = 0u;
    if (has_genericno()) {
      if (genericno_ != &::google::protobuf::internal::kEmptyString) {
        genericno_->clear();
      }
    }
    genericnonature_ = 0u;
    genericnonpi_ = 0u;
    genericnonii_ = 0u;
    genericnoari_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    genericnosci_ = 0u;
    genericnonqi_ = 0u;
    if (has_redirectingnum()) {
      if (redirectingnum_ != &::google::protobuf::internal::kEmptyString) {
        redirectingnum_->clear();
      }
    }
    redirectnonoa_ = 0u;
    redirectnonpi_ = 0u;
    redirectnoari_ = 0u;
    redirectind_ = 0u;
    origredirectreason_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    redirectioncount_ = 0u;
    redirectreason_ = 0u;
    if (has_origcalledpartyid()) {
      if (origcalledpartyid_ != &::google::protobuf::internal::kEmptyString) {
        origcalledpartyid_->clear();
      }
    }
    originalcallednonpi_ = 0u;
    originalcallednonoa_ = 0u;
    originalcallednoari_ = 0u;
    capconnocsiapplicable_ = 0u;
    capconnsuppressionofannc_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    capconncallingcategory_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbConnectArgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasServiceControl = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasservicecontrol_)));
          set_has_hasservicecontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasCapInfo;
        break;
      }
      
      // optional bool hasCapInfo = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCapInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascapinfo_)));
          set_has_hascapinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasCapConnectInfo;
        break;
      }
      
      // optional bool hasCapConnectInfo = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCapConnectInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascapconnectinfo_)));
          set_has_hascapconnectinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_capAnncAccessNo;
        break;
      }
      
      // optional string capAnncAccessNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capAnncAccessNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capanncaccessno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capanncaccessno().data(), this->capanncaccessno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_capConnAnncNoNatrue;
        break;
      }
      
      // optional uint32 capConnAnncNoNatrue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnAnncNoNatrue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconnanncnonatrue_)));
          set_has_capconnanncnonatrue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_capConnAnncNoInn;
        break;
      }
      
      // optional uint32 capConnAnncNoInn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnAnncNoInn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconnanncnoinn_)));
          set_has_capconnanncnoinn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_capConnAnncNoNPI;
        break;
      }
      
      // optional uint32 capConnAnncNoNPI = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnAnncNoNPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconnanncnonpi_)));
          set_has_capconnanncnonpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_capConnDestNo;
        break;
      }
      
      // optional string capConnDestNo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capConnDestNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capconndestno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capconndestno().data(), this->capconndestno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_capConnDestNoNature;
        break;
      }
      
      // optional uint32 capConnDestNoNature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnDestNoNature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconndestnonature_)));
          set_has_capconndestnonature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_capConnDestNoNPI;
        break;
      }
      
      // optional uint32 capConnDestNoNPI = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnDestNoNPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconndestnonpi_)));
          set_has_capconndestnonpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_capConnDestINN;
        break;
      }
      
      // optional uint32 capConnDestINN = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnDestINN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconndestinn_)));
          set_has_capconndestinn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_genericNo;
        break;
      }
      
      // optional string genericNo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genericNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genericno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genericno().data(), this->genericno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_genericNoNature;
        break;
      }
      
      // optional uint32 genericNoNature = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoNature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnonature_)));
          set_has_genericnonature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_genericNoNPI;
        break;
      }
      
      // optional uint32 genericNoNPI = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoNPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnonpi_)));
          set_has_genericnonpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_genericNoNII;
        break;
      }
      
      // optional uint32 genericNoNII = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoNII:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnonii_)));
          set_has_genericnonii();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_genericNoARI;
        break;
      }
      
      // optional uint32 genericNoARI = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoARI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnoari_)));
          set_has_genericnoari();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_genericNoSCI;
        break;
      }
      
      // optional uint32 genericNoSCI = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoSCI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnosci_)));
          set_has_genericnosci();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_genericNoNQI;
        break;
      }
      
      // optional uint32 genericNoNQI = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genericNoNQI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &genericnonqi_)));
          set_has_genericnonqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_redirectingNum;
        break;
      }
      
      // optional string redirectingNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redirectingNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirectingnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redirectingnum().data(), this->redirectingnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_redirectNoNOA;
        break;
      }
      
      // optional uint32 redirectNoNOA = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectNoNOA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectnonoa_)));
          set_has_redirectnonoa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_redirectNoNPI;
        break;
      }
      
      // optional uint32 redirectNoNPI = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectNoNPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectnonpi_)));
          set_has_redirectnonpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_redirectNoARI;
        break;
      }
      
      // optional uint32 redirectNoARI = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectNoARI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectnoari_)));
          set_has_redirectnoari();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_redirectInd;
        break;
      }
      
      // optional uint32 redirectInd = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectind_)));
          set_has_redirectind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_origRedirectReason;
        break;
      }
      
      // optional uint32 origRedirectReason = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origRedirectReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origredirectreason_)));
          set_has_origredirectreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_redirectionCount;
        break;
      }
      
      // optional uint32 redirectionCount = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectioncount_)));
          set_has_redirectioncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_redirectReason;
        break;
      }
      
      // optional uint32 redirectReason = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirectReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirectreason_)));
          set_has_redirectreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_origCalledPartyId;
        break;
      }
      
      // optional string origCalledPartyId = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origCalledPartyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origcalledpartyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origcalledpartyid().data(), this->origcalledpartyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_originalCalledNoNPI;
        break;
      }
      
      // optional uint32 originalCalledNoNPI = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalCalledNoNPI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalcallednonpi_)));
          set_has_originalcallednonpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_originalCalledNoNOA;
        break;
      }
      
      // optional uint32 originalCalledNoNOA = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalCalledNoNOA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalcallednonoa_)));
          set_has_originalcallednonoa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_originalCalledNoARI;
        break;
      }
      
      // optional uint32 originalCalledNoARI = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_originalCalledNoARI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &originalcallednoari_)));
          set_has_originalcallednoari();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_capConnOCSIApplicable;
        break;
      }
      
      // optional uint32 capConnOCSIApplicable = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnOCSIApplicable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconnocsiapplicable_)));
          set_has_capconnocsiapplicable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_capConnSuppressionOfAnnc;
        break;
      }
      
      // optional uint32 capConnSuppressionOfAnnc = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnSuppressionOfAnnc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconnsuppressionofannc_)));
          set_has_capconnsuppressionofannc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_capConnCallingCategory;
        break;
      }
      
      // optional uint32 capConnCallingCategory = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capConnCallingCategory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capconncallingcategory_)));
          set_has_capconncallingcategory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbConnectArgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasServiceControl = 1 [default = false];
  if (has_hasservicecontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasservicecontrol(), output);
  }
  
  // optional bool hasCapInfo = 2 [default = false];
  if (has_hascapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hascapinfo(), output);
  }
  
  // optional bool hasCapConnectInfo = 3 [default = false];
  if (has_hascapconnectinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hascapconnectinfo(), output);
  }
  
  // optional string capAnncAccessNo = 4;
  if (has_capanncaccessno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capanncaccessno().data(), this->capanncaccessno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->capanncaccessno(), output);
  }
  
  // optional uint32 capConnAnncNoNatrue = 5;
  if (has_capconnanncnonatrue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->capconnanncnonatrue(), output);
  }
  
  // optional uint32 capConnAnncNoInn = 6;
  if (has_capconnanncnoinn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->capconnanncnoinn(), output);
  }
  
  // optional uint32 capConnAnncNoNPI = 7;
  if (has_capconnanncnonpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->capconnanncnonpi(), output);
  }
  
  // optional string capConnDestNo = 8;
  if (has_capconndestno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capconndestno().data(), this->capconndestno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->capconndestno(), output);
  }
  
  // optional uint32 capConnDestNoNature = 9;
  if (has_capconndestnonature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->capconndestnonature(), output);
  }
  
  // optional uint32 capConnDestNoNPI = 10;
  if (has_capconndestnonpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->capconndestnonpi(), output);
  }
  
  // optional uint32 capConnDestINN = 11;
  if (has_capconndestinn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->capconndestinn(), output);
  }
  
  // optional string genericNo = 12;
  if (has_genericno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genericno().data(), this->genericno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->genericno(), output);
  }
  
  // optional uint32 genericNoNature = 13;
  if (has_genericnonature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->genericnonature(), output);
  }
  
  // optional uint32 genericNoNPI = 14;
  if (has_genericnonpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->genericnonpi(), output);
  }
  
  // optional uint32 genericNoNII = 15;
  if (has_genericnonii()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->genericnonii(), output);
  }
  
  // optional uint32 genericNoARI = 16;
  if (has_genericnoari()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->genericnoari(), output);
  }
  
  // optional uint32 genericNoSCI = 17;
  if (has_genericnosci()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->genericnosci(), output);
  }
  
  // optional uint32 genericNoNQI = 18;
  if (has_genericnonqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->genericnonqi(), output);
  }
  
  // optional string redirectingNum = 19;
  if (has_redirectingnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redirectingnum().data(), this->redirectingnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->redirectingnum(), output);
  }
  
  // optional uint32 redirectNoNOA = 20;
  if (has_redirectnonoa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->redirectnonoa(), output);
  }
  
  // optional uint32 redirectNoNPI = 21;
  if (has_redirectnonpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->redirectnonpi(), output);
  }
  
  // optional uint32 redirectNoARI = 22;
  if (has_redirectnoari()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->redirectnoari(), output);
  }
  
  // optional uint32 redirectInd = 23;
  if (has_redirectind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->redirectind(), output);
  }
  
  // optional uint32 origRedirectReason = 24;
  if (has_origredirectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->origredirectreason(), output);
  }
  
  // optional uint32 redirectionCount = 25;
  if (has_redirectioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->redirectioncount(), output);
  }
  
  // optional uint32 redirectReason = 26;
  if (has_redirectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->redirectreason(), output);
  }
  
  // optional string origCalledPartyId = 27;
  if (has_origcalledpartyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origcalledpartyid().data(), this->origcalledpartyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->origcalledpartyid(), output);
  }
  
  // optional uint32 originalCalledNoNPI = 28;
  if (has_originalcallednonpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->originalcallednonpi(), output);
  }
  
  // optional uint32 originalCalledNoNOA = 29;
  if (has_originalcallednonoa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->originalcallednonoa(), output);
  }
  
  // optional uint32 originalCalledNoARI = 30;
  if (has_originalcallednoari()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->originalcallednoari(), output);
  }
  
  // optional uint32 capConnOCSIApplicable = 31;
  if (has_capconnocsiapplicable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->capconnocsiapplicable(), output);
  }
  
  // optional uint32 capConnSuppressionOfAnnc = 32;
  if (has_capconnsuppressionofannc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->capconnsuppressionofannc(), output);
  }
  
  // optional uint32 capConnCallingCategory = 33;
  if (has_capconncallingcategory()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->capconncallingcategory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbConnectArgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasServiceControl = 1 [default = false];
  if (has_hasservicecontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasservicecontrol(), target);
  }
  
  // optional bool hasCapInfo = 2 [default = false];
  if (has_hascapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hascapinfo(), target);
  }
  
  // optional bool hasCapConnectInfo = 3 [default = false];
  if (has_hascapconnectinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hascapconnectinfo(), target);
  }
  
  // optional string capAnncAccessNo = 4;
  if (has_capanncaccessno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capanncaccessno().data(), this->capanncaccessno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->capanncaccessno(), target);
  }
  
  // optional uint32 capConnAnncNoNatrue = 5;
  if (has_capconnanncnonatrue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->capconnanncnonatrue(), target);
  }
  
  // optional uint32 capConnAnncNoInn = 6;
  if (has_capconnanncnoinn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->capconnanncnoinn(), target);
  }
  
  // optional uint32 capConnAnncNoNPI = 7;
  if (has_capconnanncnonpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->capconnanncnonpi(), target);
  }
  
  // optional string capConnDestNo = 8;
  if (has_capconndestno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capconndestno().data(), this->capconndestno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->capconndestno(), target);
  }
  
  // optional uint32 capConnDestNoNature = 9;
  if (has_capconndestnonature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->capconndestnonature(), target);
  }
  
  // optional uint32 capConnDestNoNPI = 10;
  if (has_capconndestnonpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->capconndestnonpi(), target);
  }
  
  // optional uint32 capConnDestINN = 11;
  if (has_capconndestinn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->capconndestinn(), target);
  }
  
  // optional string genericNo = 12;
  if (has_genericno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genericno().data(), this->genericno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->genericno(), target);
  }
  
  // optional uint32 genericNoNature = 13;
  if (has_genericnonature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->genericnonature(), target);
  }
  
  // optional uint32 genericNoNPI = 14;
  if (has_genericnonpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->genericnonpi(), target);
  }
  
  // optional uint32 genericNoNII = 15;
  if (has_genericnonii()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->genericnonii(), target);
  }
  
  // optional uint32 genericNoARI = 16;
  if (has_genericnoari()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->genericnoari(), target);
  }
  
  // optional uint32 genericNoSCI = 17;
  if (has_genericnosci()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->genericnosci(), target);
  }
  
  // optional uint32 genericNoNQI = 18;
  if (has_genericnonqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->genericnonqi(), target);
  }
  
  // optional string redirectingNum = 19;
  if (has_redirectingnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redirectingnum().data(), this->redirectingnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->redirectingnum(), target);
  }
  
  // optional uint32 redirectNoNOA = 20;
  if (has_redirectnonoa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->redirectnonoa(), target);
  }
  
  // optional uint32 redirectNoNPI = 21;
  if (has_redirectnonpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->redirectnonpi(), target);
  }
  
  // optional uint32 redirectNoARI = 22;
  if (has_redirectnoari()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->redirectnoari(), target);
  }
  
  // optional uint32 redirectInd = 23;
  if (has_redirectind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->redirectind(), target);
  }
  
  // optional uint32 origRedirectReason = 24;
  if (has_origredirectreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->origredirectreason(), target);
  }
  
  // optional uint32 redirectionCount = 25;
  if (has_redirectioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->redirectioncount(), target);
  }
  
  // optional uint32 redirectReason = 26;
  if (has_redirectreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->redirectreason(), target);
  }
  
  // optional string origCalledPartyId = 27;
  if (has_origcalledpartyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origcalledpartyid().data(), this->origcalledpartyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->origcalledpartyid(), target);
  }
  
  // optional uint32 originalCalledNoNPI = 28;
  if (has_originalcallednonpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->originalcallednonpi(), target);
  }
  
  // optional uint32 originalCalledNoNOA = 29;
  if (has_originalcallednonoa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->originalcallednonoa(), target);
  }
  
  // optional uint32 originalCalledNoARI = 30;
  if (has_originalcallednoari()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->originalcallednoari(), target);
  }
  
  // optional uint32 capConnOCSIApplicable = 31;
  if (has_capconnocsiapplicable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->capconnocsiapplicable(), target);
  }
  
  // optional uint32 capConnSuppressionOfAnnc = 32;
  if (has_capconnsuppressionofannc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->capconnsuppressionofannc(), target);
  }
  
  // optional uint32 capConnCallingCategory = 33;
  if (has_capconncallingcategory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->capconncallingcategory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbConnectArgData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasServiceControl = 1 [default = false];
    if (has_hasservicecontrol()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCapInfo = 2 [default = false];
    if (has_hascapinfo()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCapConnectInfo = 3 [default = false];
    if (has_hascapconnectinfo()) {
      total_size += 1 + 1;
    }
    
    // optional string capAnncAccessNo = 4;
    if (has_capanncaccessno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capanncaccessno());
    }
    
    // optional uint32 capConnAnncNoNatrue = 5;
    if (has_capconnanncnonatrue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconnanncnonatrue());
    }
    
    // optional uint32 capConnAnncNoInn = 6;
    if (has_capconnanncnoinn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconnanncnoinn());
    }
    
    // optional uint32 capConnAnncNoNPI = 7;
    if (has_capconnanncnonpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconnanncnonpi());
    }
    
    // optional string capConnDestNo = 8;
    if (has_capconndestno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capconndestno());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 capConnDestNoNature = 9;
    if (has_capconndestnonature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconndestnonature());
    }
    
    // optional uint32 capConnDestNoNPI = 10;
    if (has_capconndestnonpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconndestnonpi());
    }
    
    // optional uint32 capConnDestINN = 11;
    if (has_capconndestinn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconndestinn());
    }
    
    // optional string genericNo = 12;
    if (has_genericno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genericno());
    }
    
    // optional uint32 genericNoNature = 13;
    if (has_genericnonature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnonature());
    }
    
    // optional uint32 genericNoNPI = 14;
    if (has_genericnonpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnonpi());
    }
    
    // optional uint32 genericNoNII = 15;
    if (has_genericnonii()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnonii());
    }
    
    // optional uint32 genericNoARI = 16;
    if (has_genericnoari()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnoari());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 genericNoSCI = 17;
    if (has_genericnosci()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnosci());
    }
    
    // optional uint32 genericNoNQI = 18;
    if (has_genericnonqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->genericnonqi());
    }
    
    // optional string redirectingNum = 19;
    if (has_redirectingnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirectingnum());
    }
    
    // optional uint32 redirectNoNOA = 20;
    if (has_redirectnonoa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectnonoa());
    }
    
    // optional uint32 redirectNoNPI = 21;
    if (has_redirectnonpi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectnonpi());
    }
    
    // optional uint32 redirectNoARI = 22;
    if (has_redirectnoari()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectnoari());
    }
    
    // optional uint32 redirectInd = 23;
    if (has_redirectind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectind());
    }
    
    // optional uint32 origRedirectReason = 24;
    if (has_origredirectreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origredirectreason());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 redirectionCount = 25;
    if (has_redirectioncount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectioncount());
    }
    
    // optional uint32 redirectReason = 26;
    if (has_redirectreason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redirectreason());
    }
    
    // optional string origCalledPartyId = 27;
    if (has_origcalledpartyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origcalledpartyid());
    }
    
    // optional uint32 originalCalledNoNPI = 28;
    if (has_originalcallednonpi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originalcallednonpi());
    }
    
    // optional uint32 originalCalledNoNOA = 29;
    if (has_originalcallednonoa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originalcallednonoa());
    }
    
    // optional uint32 originalCalledNoARI = 30;
    if (has_originalcallednoari()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->originalcallednoari());
    }
    
    // optional uint32 capConnOCSIApplicable = 31;
    if (has_capconnocsiapplicable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconnocsiapplicable());
    }
    
    // optional uint32 capConnSuppressionOfAnnc = 32;
    if (has_capconnsuppressionofannc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconnsuppressionofannc());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 capConnCallingCategory = 33;
    if (has_capconncallingcategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capconncallingcategory());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbConnectArgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbConnectArgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbConnectArgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbConnectArgData::MergeFrom(const pbConnectArgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasservicecontrol()) {
      set_hasservicecontrol(from.hasservicecontrol());
    }
    if (from.has_hascapinfo()) {
      set_hascapinfo(from.hascapinfo());
    }
    if (from.has_hascapconnectinfo()) {
      set_hascapconnectinfo(from.hascapconnectinfo());
    }
    if (from.has_capanncaccessno()) {
      set_capanncaccessno(from.capanncaccessno());
    }
    if (from.has_capconnanncnonatrue()) {
      set_capconnanncnonatrue(from.capconnanncnonatrue());
    }
    if (from.has_capconnanncnoinn()) {
      set_capconnanncnoinn(from.capconnanncnoinn());
    }
    if (from.has_capconnanncnonpi()) {
      set_capconnanncnonpi(from.capconnanncnonpi());
    }
    if (from.has_capconndestno()) {
      set_capconndestno(from.capconndestno());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capconndestnonature()) {
      set_capconndestnonature(from.capconndestnonature());
    }
    if (from.has_capconndestnonpi()) {
      set_capconndestnonpi(from.capconndestnonpi());
    }
    if (from.has_capconndestinn()) {
      set_capconndestinn(from.capconndestinn());
    }
    if (from.has_genericno()) {
      set_genericno(from.genericno());
    }
    if (from.has_genericnonature()) {
      set_genericnonature(from.genericnonature());
    }
    if (from.has_genericnonpi()) {
      set_genericnonpi(from.genericnonpi());
    }
    if (from.has_genericnonii()) {
      set_genericnonii(from.genericnonii());
    }
    if (from.has_genericnoari()) {
      set_genericnoari(from.genericnoari());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_genericnosci()) {
      set_genericnosci(from.genericnosci());
    }
    if (from.has_genericnonqi()) {
      set_genericnonqi(from.genericnonqi());
    }
    if (from.has_redirectingnum()) {
      set_redirectingnum(from.redirectingnum());
    }
    if (from.has_redirectnonoa()) {
      set_redirectnonoa(from.redirectnonoa());
    }
    if (from.has_redirectnonpi()) {
      set_redirectnonpi(from.redirectnonpi());
    }
    if (from.has_redirectnoari()) {
      set_redirectnoari(from.redirectnoari());
    }
    if (from.has_redirectind()) {
      set_redirectind(from.redirectind());
    }
    if (from.has_origredirectreason()) {
      set_origredirectreason(from.origredirectreason());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_redirectioncount()) {
      set_redirectioncount(from.redirectioncount());
    }
    if (from.has_redirectreason()) {
      set_redirectreason(from.redirectreason());
    }
    if (from.has_origcalledpartyid()) {
      set_origcalledpartyid(from.origcalledpartyid());
    }
    if (from.has_originalcallednonpi()) {
      set_originalcallednonpi(from.originalcallednonpi());
    }
    if (from.has_originalcallednonoa()) {
      set_originalcallednonoa(from.originalcallednonoa());
    }
    if (from.has_originalcallednoari()) {
      set_originalcallednoari(from.originalcallednoari());
    }
    if (from.has_capconnocsiapplicable()) {
      set_capconnocsiapplicable(from.capconnocsiapplicable());
    }
    if (from.has_capconnsuppressionofannc()) {
      set_capconnsuppressionofannc(from.capconnsuppressionofannc());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_capconncallingcategory()) {
      set_capconncallingcategory(from.capconncallingcategory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbConnectArgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbConnectArgData::CopyFrom(const pbConnectArgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbConnectArgData::IsInitialized() const {
  
  return true;
}

void pbConnectArgData::Swap(pbConnectArgData* other) {
  if (other != this) {
    std::swap(hasservicecontrol_, other->hasservicecontrol_);
    std::swap(hascapinfo_, other->hascapinfo_);
    std::swap(hascapconnectinfo_, other->hascapconnectinfo_);
    std::swap(capanncaccessno_, other->capanncaccessno_);
    std::swap(capconnanncnonatrue_, other->capconnanncnonatrue_);
    std::swap(capconnanncnoinn_, other->capconnanncnoinn_);
    std::swap(capconnanncnonpi_, other->capconnanncnonpi_);
    std::swap(capconndestno_, other->capconndestno_);
    std::swap(capconndestnonature_, other->capconndestnonature_);
    std::swap(capconndestnonpi_, other->capconndestnonpi_);
    std::swap(capconndestinn_, other->capconndestinn_);
    std::swap(genericno_, other->genericno_);
    std::swap(genericnonature_, other->genericnonature_);
    std::swap(genericnonpi_, other->genericnonpi_);
    std::swap(genericnonii_, other->genericnonii_);
    std::swap(genericnoari_, other->genericnoari_);
    std::swap(genericnosci_, other->genericnosci_);
    std::swap(genericnonqi_, other->genericnonqi_);
    std::swap(redirectingnum_, other->redirectingnum_);
    std::swap(redirectnonoa_, other->redirectnonoa_);
    std::swap(redirectnonpi_, other->redirectnonpi_);
    std::swap(redirectnoari_, other->redirectnoari_);
    std::swap(redirectind_, other->redirectind_);
    std::swap(origredirectreason_, other->origredirectreason_);
    std::swap(redirectioncount_, other->redirectioncount_);
    std::swap(redirectreason_, other->redirectreason_);
    std::swap(origcalledpartyid_, other->origcalledpartyid_);
    std::swap(originalcallednonpi_, other->originalcallednonpi_);
    std::swap(originalcallednonoa_, other->originalcallednonoa_);
    std::swap(originalcallednoari_, other->originalcallednoari_);
    std::swap(capconnocsiapplicable_, other->capconnocsiapplicable_);
    std::swap(capconnsuppressionofannc_, other->capconnsuppressionofannc_);
    std::swap(capconncallingcategory_, other->capconncallingcategory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbConnectArgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbConnectArgData_descriptor_;
  metadata.reflection = pbConnectArgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbACHData::kFinalUnitIndicationFieldNumber;
const int pbACHData::kBeepToneFieldNumber;
#endif  // !_MSC_VER

pbACHData::pbACHData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbACHData::InitAsDefaultInstance() {
}

pbACHData::pbACHData(const pbACHData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbACHData::SharedCtor() {
  _cached_size_ = 0;
  finalunitindication_ = 0u;
  beeptone_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbACHData::~pbACHData() {
  SharedDtor();
}

void pbACHData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbACHData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbACHData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbACHData_descriptor_;
}

const pbACHData& pbACHData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbACHData* pbACHData::default_instance_ = NULL;

pbACHData* pbACHData::New() const {
  return new pbACHData;
}

void pbACHData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finalunitindication_ = 0u;
    beeptone_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbACHData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FinalUnitIndication = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalunitindication_)));
          set_has_finalunitindication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BeepTone;
        break;
      }
      
      // optional uint32 BeepTone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeepTone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beeptone_)));
          set_has_beeptone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbACHData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 FinalUnitIndication = 1;
  if (has_finalunitindication()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->finalunitindication(), output);
  }
  
  // optional uint32 BeepTone = 2;
  if (has_beeptone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beeptone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbACHData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 FinalUnitIndication = 1;
  if (has_finalunitindication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->finalunitindication(), target);
  }
  
  // optional uint32 BeepTone = 2;
  if (has_beeptone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beeptone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbACHData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FinalUnitIndication = 1;
    if (has_finalunitindication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalunitindication());
    }
    
    // optional uint32 BeepTone = 2;
    if (has_beeptone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beeptone());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbACHData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbACHData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbACHData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbACHData::MergeFrom(const pbACHData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finalunitindication()) {
      set_finalunitindication(from.finalunitindication());
    }
    if (from.has_beeptone()) {
      set_beeptone(from.beeptone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbACHData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbACHData::CopyFrom(const pbACHData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbACHData::IsInitialized() const {
  
  return true;
}

void pbACHData::Swap(pbACHData* other) {
  if (other != this) {
    std::swap(finalunitindication_, other->finalunitindication_);
    std::swap(beeptone_, other->beeptone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbACHData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbACHData_descriptor_;
  metadata.reflection = pbACHData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbCapRoTsl::kBcsmEventFlagFieldNumber;
const int pbCapRoTsl::kCapCallingPartyNumberFieldNumber;
const int pbCapRoTsl::kServiceIdentifierFieldNumber;
const int pbCapRoTsl::kReceivedBasicServiceFieldNumber;
const int pbCapRoTsl::kRoUserSessionIdFieldNumber;
const int pbCapRoTsl::kImsiChargingIdentifierFieldNumber;
const int pbCapRoTsl::kRoServiceContextIdFieldNumber;
const int pbCapRoTsl::kSubscriptionIdFieldNumber;
const int pbCapRoTsl::kRoCugInformationFieldNumber;
const int pbCapRoTsl::kCapMSCAddressFieldNumber;
const int pbCapRoTsl::kCapGMSCAddressFieldNumber;
const int pbCapRoTsl::kCcaInitialResultCodeFieldNumber;
const int pbCapRoTsl::kCcaUpdateResultCodeFieldNumber;
const int pbCapRoTsl::kCcaTerminateResultCodeFieldNumber;
const int pbCapRoTsl::kReceivedTcapContinueFieldNumber;
const int pbCapRoTsl::kReceivedASRFieldNumber;
const int pbCapRoTsl::kReceivedIdpSmsFieldNumber;
const int pbCapRoTsl::kReceivedIdpFieldNumber;
const int pbCapRoTsl::kIsTimeZoneSecondsFieldNumber;
const int pbCapRoTsl::kTimeZoneSecondsFieldNumber;
const int pbCapRoTsl::kCcaUpdateMsccResultCodeFieldNumber;
const int pbCapRoTsl::kIsccaMsccGrantedCCTimeZeroFieldNumber;
const int pbCapRoTsl::kIsReleaseSentFieldNumber;
const int pbCapRoTsl::kLastSentCCRequestTypeFieldNumber;
const int pbCapRoTsl::kCcRequestNumberFieldNumber;
const int pbCapRoTsl::kIsFirstERBRcvdFieldNumber;
const int pbCapRoTsl::kCallTypeFieldNumber;
const int pbCapRoTsl::kScpActionFieldNumber;
const int pbCapRoTsl::kOrgScpActionFieldNumber;
const int pbCapRoTsl::kCapControlModeFieldNumber;
const int pbCapRoTsl::kTerminationCauseFieldNumber;
const int pbCapRoTsl::kMappedIDPToCCRIDataFieldNumber;
const int pbCapRoTsl::kRecvAppContextNameFieldNumber;
const int pbCapRoTsl::kIdpCCRIDataFieldNumber;
const int pbCapRoTsl::kRecvGSUCCTimeFieldNumber;
const int pbCapRoTsl::kRecvNoAnsTimeFieldNumber;
const int pbCapRoTsl::kCurrUSUCCTimeFieldNumber;
const int pbCapRoTsl::kCumulativeGSUCCTimeFieldNumber;
const int pbCapRoTsl::kCumulativeUSUCCTimeFieldNumber;
const int pbCapRoTsl::kIsFinalUnitReceivedFieldNumber;
const int pbCapRoTsl::kRecvFirstERBDataFieldNumber;
const int pbCapRoTsl::kRecvERBDataFieldNumber;
const int pbCapRoTsl::kCallAnswerTimeStampFieldNumber;
const int pbCapRoTsl::kIsFollowingOnFieldNumber;
const int pbCapRoTsl::kActivityTimerDataFieldNumber;
const int pbCapRoTsl::kStrRemoteTransIdForCDRFieldNumber;
const int pbCapRoTsl::kStrLocalTransIdForCDRFieldNumber;
const int pbCapRoTsl::kBIsCallContinueSetFieldNumber;
const int pbCapRoTsl::kSessionStartTimeStampFieldNumber;
const int pbCapRoTsl::kConnectMaxDurationFieldNumber;
const int pbCapRoTsl::kErbAnswerTimeStampFieldNumber;
const int pbCapRoTsl::kErbSpecificInfoFieldNumber;
const int pbCapRoTsl::kDccaCtxtFieldNumber;
const int pbCapRoTsl::kIsFailedCDRLoggedFieldNumber;
const int pbCapRoTsl::kReleaseCauseFieldNumber;
const int pbCapRoTsl::kCurrStateFieldNumber;
const int pbCapRoTsl::kConnectArgFieldNumber;
const int pbCapRoTsl::kAchdataFieldNumber;
const int pbCapRoTsl::kDisconTriggerTimeStampFieldNumber;
const int pbCapRoTsl::kCcfhFailedoverReasonFieldNumber;
const int pbCapRoTsl::kTriggerFollowOnSessionFieldNumber;
const int pbCapRoTsl::kUpdateTriggerTimeStampFieldNumber;
const int pbCapRoTsl::kIsCCRTBuiltForInvalidCCAIFieldNumber;
#endif  // !_MSC_VER

pbCapRoTsl::pbCapRoTsl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbCapRoTsl::InitAsDefaultInstance() {
  subscriptionid_ = const_cast< ::SubscriptionIdConfig*>(&::SubscriptionIdConfig::default_instance());
  mappedidptoccridata_ = const_cast< ::StoredIDPSMSToCCRIData*>(&::StoredIDPSMSToCCRIData::default_instance());
  idpccridata_ = const_cast< ::IDPToCCRIData*>(&::IDPToCCRIData::default_instance());
  recvfirsterbdata_ = const_cast< ::pbERBData*>(&::pbERBData::default_instance());
  recverbdata_ = const_cast< ::pbERBData*>(&::pbERBData::default_instance());
  activitytimerdata_ = const_cast< ::pbActivityTimerData*>(&::pbActivityTimerData::default_instance());
  dccactxt_ = const_cast< ::pbIwfDccaSessionCtxt*>(&::pbIwfDccaSessionCtxt::default_instance());
  connectarg_ = const_cast< ::pbConnectArgData*>(&::pbConnectArgData::default_instance());
  achdata_ = const_cast< ::pbACHData*>(&::pbACHData::default_instance());
}

pbCapRoTsl::pbCapRoTsl(const pbCapRoTsl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbCapRoTsl::SharedCtor() {
  _cached_size_ = 0;
  bcsmeventflag_ = false;
  capcallingpartynumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serviceidentifier_ = 0u;
  receivedbasicservice_ = false;
  rousersessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imsichargingidentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roservicecontextid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subscriptionid_ = NULL;
  rocuginformation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capmscaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capgmscaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccainitialresultcode_ = 0u;
  ccaupdateresultcode_ = 0u;
  ccaterminateresultcode_ = 0u;
  receivedtcapcontinue_ = false;
  receivedasr_ = false;
  receivedidpsms_ = false;
  receivedidp_ = false;
  istimezoneseconds_ = false;
  timezoneseconds_ = 0u;
  ccaupdatemsccresultcode_ = 0u;
  isccamsccgrantedcctimezero_ = false;
  isreleasesent_ = false;
  lastsentccrequesttype_ = 0u;
  ccrequestnumber_ = 0u;
  isfirsterbrcvd_ = false;
  calltype_ = 0u;
  scpaction_ = 0u;
  orgscpaction_ = 0u;
  capcontrolmode_ = -1;
  terminationcause_ = 0u;
  mappedidptoccridata_ = NULL;
  recvappcontextname_ = 0u;
  idpccridata_ = NULL;
  recvgsucctime_ = 0u;
  recvnoanstime_ = 0u;
  currusucctime_ = 0u;
  cumulativegsucctime_ = 0u;
  cumulativeusucctime_ = 0u;
  isfinalunitreceived_ = false;
  recvfirsterbdata_ = NULL;
  recverbdata_ = NULL;
  callanswertimestamp_ = 0u;
  isfollowingon_ = false;
  activitytimerdata_ = NULL;
  strremotetransidforcdr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strlocaltransidforcdr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  biscallcontinueset_ = false;
  sessionstarttimestamp_ = 0u;
  connectmaxduration_ = 0u;
  erbanswertimestamp_ = 0u;
  erbspecificinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dccactxt_ = NULL;
  isfailedcdrlogged_ = false;
  releasecause_ = 0u;
  currstate_ = 0;
  connectarg_ = NULL;
  achdata_ = NULL;
  discontriggertimestamp_ = 0u;
  ccfhfailedoverreason_ = 0u;
  triggerfollowonsession_ = 1u;
  updatetriggertimestamp_ = 0u;
  isccrtbuiltforinvalidccai_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbCapRoTsl::~pbCapRoTsl() {
  SharedDtor();
}

void pbCapRoTsl::SharedDtor() {
  if (capcallingpartynumber_ != &::google::protobuf::internal::kEmptyString) {
    delete capcallingpartynumber_;
  }
  if (rousersessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete rousersessionid_;
  }
  if (imsichargingidentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete imsichargingidentifier_;
  }
  if (roservicecontextid_ != &::google::protobuf::internal::kEmptyString) {
    delete roservicecontextid_;
  }
  if (rocuginformation_ != &::google::protobuf::internal::kEmptyString) {
    delete rocuginformation_;
  }
  if (capmscaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete capmscaddress_;
  }
  if (capgmscaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete capgmscaddress_;
  }
  if (strremotetransidforcdr_ != &::google::protobuf::internal::kEmptyString) {
    delete strremotetransidforcdr_;
  }
  if (strlocaltransidforcdr_ != &::google::protobuf::internal::kEmptyString) {
    delete strlocaltransidforcdr_;
  }
  if (erbspecificinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete erbspecificinfo_;
  }
  if (this != default_instance_) {
    delete subscriptionid_;
    delete mappedidptoccridata_;
    delete idpccridata_;
    delete recvfirsterbdata_;
    delete recverbdata_;
    delete activitytimerdata_;
    delete dccactxt_;
    delete connectarg_;
    delete achdata_;
  }
}

void pbCapRoTsl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbCapRoTsl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbCapRoTsl_descriptor_;
}

const pbCapRoTsl& pbCapRoTsl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbCapRoTsl* pbCapRoTsl::default_instance_ = NULL;

pbCapRoTsl* pbCapRoTsl::New() const {
  return new pbCapRoTsl;
}

void pbCapRoTsl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bcsmeventflag_ = false;
    if (has_capcallingpartynumber()) {
      if (capcallingpartynumber_ != &::google::protobuf::internal::kEmptyString) {
        capcallingpartynumber_->clear();
      }
    }
    serviceidentifier_ = 0u;
    receivedbasicservice_ = false;
    if (has_rousersessionid()) {
      if (rousersessionid_ != &::google::protobuf::internal::kEmptyString) {
        rousersessionid_->clear();
      }
    }
    if (has_imsichargingidentifier()) {
      if (imsichargingidentifier_ != &::google::protobuf::internal::kEmptyString) {
        imsichargingidentifier_->clear();
      }
    }
    if (has_roservicecontextid()) {
      if (roservicecontextid_ != &::google::protobuf::internal::kEmptyString) {
        roservicecontextid_->clear();
      }
    }
    if (has_subscriptionid()) {
      if (subscriptionid_ != NULL) subscriptionid_->::SubscriptionIdConfig::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rocuginformation()) {
      if (rocuginformation_ != &::google::protobuf::internal::kEmptyString) {
        rocuginformation_->clear();
      }
    }
    if (has_capmscaddress()) {
      if (capmscaddress_ != &::google::protobuf::internal::kEmptyString) {
        capmscaddress_->clear();
      }
    }
    if (has_capgmscaddress()) {
      if (capgmscaddress_ != &::google::protobuf::internal::kEmptyString) {
        capgmscaddress_->clear();
      }
    }
    ccainitialresultcode_ = 0u;
    ccaupdateresultcode_ = 0u;
    ccaterminateresultcode_ = 0u;
    receivedtcapcontinue_ = false;
    receivedasr_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    receivedidpsms_ = false;
    receivedidp_ = false;
    istimezoneseconds_ = false;
    timezoneseconds_ = 0u;
    ccaupdatemsccresultcode_ = 0u;
    isccamsccgrantedcctimezero_ = false;
    isreleasesent_ = false;
    lastsentccrequesttype_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ccrequestnumber_ = 0u;
    isfirsterbrcvd_ = false;
    calltype_ = 0u;
    scpaction_ = 0u;
    orgscpaction_ = 0u;
    capcontrolmode_ = -1;
    terminationcause_ = 0u;
    if (has_mappedidptoccridata()) {
      if (mappedidptoccridata_ != NULL) mappedidptoccridata_->::StoredIDPSMSToCCRIData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    recvappcontextname_ = 0u;
    if (has_idpccridata()) {
      if (idpccridata_ != NULL) idpccridata_->::IDPToCCRIData::Clear();
    }
    recvgsucctime_ = 0u;
    recvnoanstime_ = 0u;
    currusucctime_ = 0u;
    cumulativegsucctime_ = 0u;
    cumulativeusucctime_ = 0u;
    isfinalunitreceived_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_recvfirsterbdata()) {
      if (recvfirsterbdata_ != NULL) recvfirsterbdata_->::pbERBData::Clear();
    }
    if (has_recverbdata()) {
      if (recverbdata_ != NULL) recverbdata_->::pbERBData::Clear();
    }
    callanswertimestamp_ = 0u;
    isfollowingon_ = false;
    if (has_activitytimerdata()) {
      if (activitytimerdata_ != NULL) activitytimerdata_->::pbActivityTimerData::Clear();
    }
    if (has_strremotetransidforcdr()) {
      if (strremotetransidforcdr_ != &::google::protobuf::internal::kEmptyString) {
        strremotetransidforcdr_->clear();
      }
    }
    if (has_strlocaltransidforcdr()) {
      if (strlocaltransidforcdr_ != &::google::protobuf::internal::kEmptyString) {
        strlocaltransidforcdr_->clear();
      }
    }
    biscallcontinueset_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    sessionstarttimestamp_ = 0u;
    connectmaxduration_ = 0u;
    erbanswertimestamp_ = 0u;
    if (has_erbspecificinfo()) {
      if (erbspecificinfo_ != &::google::protobuf::internal::kEmptyString) {
        erbspecificinfo_->clear();
      }
    }
    if (has_dccactxt()) {
      if (dccactxt_ != NULL) dccactxt_->::pbIwfDccaSessionCtxt::Clear();
    }
    isfailedcdrlogged_ = false;
    releasecause_ = 0u;
    currstate_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_connectarg()) {
      if (connectarg_ != NULL) connectarg_->::pbConnectArgData::Clear();
    }
    if (has_achdata()) {
      if (achdata_ != NULL) achdata_->::pbACHData::Clear();
    }
    discontriggertimestamp_ = 0u;
    ccfhfailedoverreason_ = 0u;
    triggerfollowonsession_ = 1u;
    updatetriggertimestamp_ = 0u;
    isccrtbuiltforinvalidccai_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbCapRoTsl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bcsmEventFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bcsmeventflag_)));
          set_has_bcsmeventflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_capCallingPartyNumber;
        break;
      }
      
      // optional string capCallingPartyNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capCallingPartyNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capcallingpartynumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capcallingpartynumber().data(), this->capcallingpartynumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serviceIdentifier;
        break;
      }
      
      // optional uint32 serviceIdentifier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serviceIdentifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceidentifier_)));
          set_has_serviceidentifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_receivedBasicService;
        break;
      }
      
      // optional bool receivedBasicService = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedBasicService:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivedbasicservice_)));
          set_has_receivedbasicservice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_roUserSessionId;
        break;
      }
      
      // optional string roUserSessionId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roUserSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rousersessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rousersessionid().data(), this->rousersessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_imsiChargingIdentifier;
        break;
      }
      
      // optional string imsiChargingIdentifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imsiChargingIdentifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imsichargingidentifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imsichargingidentifier().data(), this->imsichargingidentifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_roServiceContextId;
        break;
      }
      
      // optional string roServiceContextId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roServiceContextId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roservicecontextid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roservicecontextid().data(), this->roservicecontextid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SubscriptionId;
        break;
      }
      
      // optional .SubscriptionIdConfig SubscriptionId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubscriptionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriptionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_roCugInformation;
        break;
      }
      
      // optional string roCugInformation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roCugInformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rocuginformation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rocuginformation().data(), this->rocuginformation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capMSCAddress;
        break;
      }
      
      // optional string capMSCAddress = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capMSCAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capmscaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capmscaddress().data(), this->capmscaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_capGMSCAddress;
        break;
      }
      
      // optional string capGMSCAddress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capGMSCAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capgmscaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capgmscaddress().data(), this->capgmscaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ccaInitialResultCode;
        break;
      }
      
      // optional uint32 ccaInitialResultCode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccaInitialResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccainitialresultcode_)));
          set_has_ccainitialresultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ccaUpdateResultCode;
        break;
      }
      
      // optional uint32 ccaUpdateResultCode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccaUpdateResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccaupdateresultcode_)));
          set_has_ccaupdateresultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ccaTerminateResultCode;
        break;
      }
      
      // optional uint32 ccaTerminateResultCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccaTerminateResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccaterminateresultcode_)));
          set_has_ccaterminateresultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_receivedTcapContinue;
        break;
      }
      
      // optional bool receivedTcapContinue = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedTcapContinue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivedtcapcontinue_)));
          set_has_receivedtcapcontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_receivedASR;
        break;
      }
      
      // optional bool receivedASR = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedASR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivedasr_)));
          set_has_receivedasr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_receivedIdpSms;
        break;
      }
      
      // optional bool receivedIdpSms = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedIdpSms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivedidpsms_)));
          set_has_receivedidpsms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_receivedIdp;
        break;
      }
      
      // optional bool receivedIdp = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receivedIdp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receivedidp_)));
          set_has_receivedidp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isTimeZoneSeconds;
        break;
      }
      
      // optional bool isTimeZoneSeconds = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTimeZoneSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istimezoneseconds_)));
          set_has_istimezoneseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_timeZoneSeconds;
        break;
      }
      
      // optional uint32 timeZoneSeconds = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeZoneSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timezoneseconds_)));
          set_has_timezoneseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_ccaUpdateMsccResultCode;
        break;
      }
      
      // optional uint32 ccaUpdateMsccResultCode = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccaUpdateMsccResultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccaupdatemsccresultcode_)));
          set_has_ccaupdatemsccresultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_isccaMsccGrantedCCTimeZero;
        break;
      }
      
      // optional bool isccaMsccGrantedCCTimeZero = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isccaMsccGrantedCCTimeZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isccamsccgrantedcctimezero_)));
          set_has_isccamsccgrantedcctimezero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_isReleaseSent;
        break;
      }
      
      // optional bool isReleaseSent = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReleaseSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreleasesent_)));
          set_has_isreleasesent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_lastSentCCRequestType;
        break;
      }
      
      // optional uint32 lastSentCCRequestType = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSentCCRequestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastsentccrequesttype_)));
          set_has_lastsentccrequesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ccRequestNumber;
        break;
      }
      
      // optional uint32 ccRequestNumber = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccRequestNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccrequestnumber_)));
          set_has_ccrequestnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_isFirstERBRcvd;
        break;
      }
      
      // optional bool isFirstERBRcvd = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFirstERBRcvd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirsterbrcvd_)));
          set_has_isfirsterbrcvd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_CallType;
        break;
      }
      
      // optional uint32 CallType = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calltype_)));
          set_has_calltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_scpAction;
        break;
      }
      
      // optional uint32 scpAction = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scpAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scpaction_)));
          set_has_scpaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_orgScpAction;
        break;
      }
      
      // optional uint32 orgScpAction = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orgScpAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orgscpaction_)));
          set_has_orgscpaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_capControlMode;
        break;
      }
      
      // optional int32 capControlMode = 30 [default = -1];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capControlMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capcontrolmode_)));
          set_has_capcontrolmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_terminationCause;
        break;
      }
      
      // optional uint32 terminationCause = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminationCause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terminationcause_)));
          set_has_terminationcause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_mappedIDPToCCRIData;
        break;
      }
      
      // optional .StoredIDPSMSToCCRIData mappedIDPToCCRIData = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mappedIDPToCCRIData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mappedidptoccridata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_recvAppContextName;
        break;
      }
      
      // optional uint32 recvAppContextName = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvAppContextName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvappcontextname_)));
          set_has_recvappcontextname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_IdpCCRIData;
        break;
      }
      
      // optional .IDPToCCRIData IdpCCRIData = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IdpCCRIData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_idpccridata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_recvGSUCCTime;
        break;
      }
      
      // optional uint32 recvGSUCCTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvGSUCCTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvgsucctime_)));
          set_has_recvgsucctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_recvNoAnsTime;
        break;
      }
      
      // optional uint32 recvNoAnsTime = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvNoAnsTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvnoanstime_)));
          set_has_recvnoanstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_currUSUCCTime;
        break;
      }
      
      // optional uint32 currUSUCCTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currUSUCCTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currusucctime_)));
          set_has_currusucctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_cumulativeGSUCCTime;
        break;
      }
      
      // optional uint32 cumulativeGSUCCTime = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cumulativeGSUCCTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulativegsucctime_)));
          set_has_cumulativegsucctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_cumulativeUSUCCTime;
        break;
      }
      
      // optional uint32 cumulativeUSUCCTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cumulativeUSUCCTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulativeusucctime_)));
          set_has_cumulativeusucctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_isFinalUnitReceived;
        break;
      }
      
      // optional bool isFinalUnitReceived = 40 [default = false];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinalUnitReceived:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalunitreceived_)));
          set_has_isfinalunitreceived();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_recvFirstERBData;
        break;
      }
      
      // optional .pbERBData recvFirstERBData = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvFirstERBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvfirsterbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_recvERBData;
        break;
      }
      
      // optional .pbERBData recvERBData = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvERBData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recverbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_callAnswerTimeStamp;
        break;
      }
      
      // optional uint32 callAnswerTimeStamp = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callAnswerTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &callanswertimestamp_)));
          set_has_callanswertimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_isFollowingOn;
        break;
      }
      
      // optional bool isFollowingOn = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFollowingOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollowingon_)));
          set_has_isfollowingon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_activityTimerData;
        break;
      }
      
      // optional .pbActivityTimerData activityTimerData = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityTimerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activitytimerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_strRemoteTransIdForCDR;
        break;
      }
      
      // optional string strRemoteTransIdForCDR = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRemoteTransIdForCDR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strremotetransidforcdr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strremotetransidforcdr().data(), this->strremotetransidforcdr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_strLocalTransIdForCDR;
        break;
      }
      
      // optional string strLocalTransIdForCDR = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strLocalTransIdForCDR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlocaltransidforcdr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strlocaltransidforcdr().data(), this->strlocaltransidforcdr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_bIsCallContinueSet;
        break;
      }
      
      // optional bool bIsCallContinueSet = 48 [default = false];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsCallContinueSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biscallcontinueset_)));
          set_has_biscallcontinueset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_sessionStartTimeStamp;
        break;
      }
      
      // optional uint32 sessionStartTimeStamp = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionStartTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionstarttimestamp_)));
          set_has_sessionstarttimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_connectMaxDuration;
        break;
      }
      
      // optional uint32 connectMaxDuration = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectMaxDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connectmaxduration_)));
          set_has_connectmaxduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_erbAnswerTimeStamp;
        break;
      }
      
      // optional uint32 erbAnswerTimeStamp = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_erbAnswerTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &erbanswertimestamp_)));
          set_has_erbanswertimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_erbSpecificInfo;
        break;
      }
      
      // optional string erbSpecificInfo = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_erbSpecificInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_erbspecificinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->erbspecificinfo().data(), this->erbspecificinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_dccaCtxt;
        break;
      }
      
      // optional .pbIwfDccaSessionCtxt dccaCtxt = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dccaCtxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dccactxt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_isFailedCDRLogged;
        break;
      }
      
      // optional bool isFailedCDRLogged = 54 [default = false];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFailedCDRLogged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfailedcdrlogged_)));
          set_has_isfailedcdrlogged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_releaseCause;
        break;
      }
      
      // optional uint32 releaseCause = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_releaseCause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &releasecause_)));
          set_has_releasecause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_currState;
        break;
      }
      
      // optional .TransState currState = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (TransState_IsValid(value)) {
            set_currstate(static_cast< TransState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(56, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_connectArg;
        break;
      }
      
      // optional .pbConnectArgData connectArg = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectArg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectarg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_achdata;
        break;
      }
      
      // optional .pbACHData achdata = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_disconTriggerTimeStamp;
        break;
      }
      
      // optional uint32 disconTriggerTimeStamp = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disconTriggerTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discontriggertimestamp_)));
          set_has_discontriggertimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_ccfhFailedoverReason;
        break;
      }
      
      // optional fixed32 ccfhFailedoverReason = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ccfhFailedoverReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ccfhfailedoverreason_)));
          set_has_ccfhfailedoverreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_triggerFollowOnSession;
        break;
      }
      
      // optional uint32 triggerFollowOnSession = 61 [default = 1];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerFollowOnSession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggerfollowonsession_)));
          set_has_triggerfollowonsession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_updateTriggerTimeStamp;
        break;
      }
      
      // optional uint32 updateTriggerTimeStamp = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTriggerTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetriggertimestamp_)));
          set_has_updatetriggertimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_IsCCRTBuiltForInvalidCCAI;
        break;
      }
      
      // optional bool IsCCRTBuiltForInvalidCCAI = 63 [default = false];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCCRTBuiltForInvalidCCAI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isccrtbuiltforinvalidccai_)));
          set_has_isccrtbuiltforinvalidccai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbCapRoTsl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bcsmEventFlag = 1;
  if (has_bcsmeventflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bcsmeventflag(), output);
  }
  
  // optional string capCallingPartyNumber = 2;
  if (has_capcallingpartynumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capcallingpartynumber().data(), this->capcallingpartynumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->capcallingpartynumber(), output);
  }
  
  // optional uint32 serviceIdentifier = 3;
  if (has_serviceidentifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serviceidentifier(), output);
  }
  
  // optional bool receivedBasicService = 4;
  if (has_receivedbasicservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->receivedbasicservice(), output);
  }
  
  // optional string roUserSessionId = 5;
  if (has_rousersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rousersessionid().data(), this->rousersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rousersessionid(), output);
  }
  
  // optional string imsiChargingIdentifier = 6;
  if (has_imsichargingidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imsichargingidentifier().data(), this->imsichargingidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->imsichargingidentifier(), output);
  }
  
  // optional string roServiceContextId = 7;
  if (has_roservicecontextid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roservicecontextid().data(), this->roservicecontextid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->roservicecontextid(), output);
  }
  
  // optional .SubscriptionIdConfig SubscriptionId = 8;
  if (has_subscriptionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->subscriptionid(), output);
  }
  
  // optional string roCugInformation = 9;
  if (has_rocuginformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rocuginformation().data(), this->rocuginformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rocuginformation(), output);
  }
  
  // optional string capMSCAddress = 10;
  if (has_capmscaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capmscaddress().data(), this->capmscaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->capmscaddress(), output);
  }
  
  // optional string capGMSCAddress = 11;
  if (has_capgmscaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capgmscaddress().data(), this->capgmscaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->capgmscaddress(), output);
  }
  
  // optional uint32 ccaInitialResultCode = 12;
  if (has_ccainitialresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ccainitialresultcode(), output);
  }
  
  // optional uint32 ccaUpdateResultCode = 13;
  if (has_ccaupdateresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ccaupdateresultcode(), output);
  }
  
  // optional uint32 ccaTerminateResultCode = 14;
  if (has_ccaterminateresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ccaterminateresultcode(), output);
  }
  
  // optional bool receivedTcapContinue = 15 [default = false];
  if (has_receivedtcapcontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->receivedtcapcontinue(), output);
  }
  
  // optional bool receivedASR = 16 [default = false];
  if (has_receivedasr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->receivedasr(), output);
  }
  
  // optional bool receivedIdpSms = 17 [default = false];
  if (has_receivedidpsms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->receivedidpsms(), output);
  }
  
  // optional bool receivedIdp = 18 [default = false];
  if (has_receivedidp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->receivedidp(), output);
  }
  
  // optional bool isTimeZoneSeconds = 19 [default = false];
  if (has_istimezoneseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->istimezoneseconds(), output);
  }
  
  // optional uint32 timeZoneSeconds = 20;
  if (has_timezoneseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->timezoneseconds(), output);
  }
  
  // optional uint32 ccaUpdateMsccResultCode = 21;
  if (has_ccaupdatemsccresultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->ccaupdatemsccresultcode(), output);
  }
  
  // optional bool isccaMsccGrantedCCTimeZero = 22 [default = false];
  if (has_isccamsccgrantedcctimezero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isccamsccgrantedcctimezero(), output);
  }
  
  // optional bool isReleaseSent = 23;
  if (has_isreleasesent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isreleasesent(), output);
  }
  
  // optional uint32 lastSentCCRequestType = 24;
  if (has_lastsentccrequesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->lastsentccrequesttype(), output);
  }
  
  // optional uint32 ccRequestNumber = 25;
  if (has_ccrequestnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->ccrequestnumber(), output);
  }
  
  // optional bool isFirstERBRcvd = 26;
  if (has_isfirsterbrcvd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isfirsterbrcvd(), output);
  }
  
  // optional uint32 CallType = 27;
  if (has_calltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->calltype(), output);
  }
  
  // optional uint32 scpAction = 28 [default = 0];
  if (has_scpaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->scpaction(), output);
  }
  
  // optional uint32 orgScpAction = 29 [default = 0];
  if (has_orgscpaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->orgscpaction(), output);
  }
  
  // optional int32 capControlMode = 30 [default = -1];
  if (has_capcontrolmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->capcontrolmode(), output);
  }
  
  // optional uint32 terminationCause = 31;
  if (has_terminationcause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->terminationcause(), output);
  }
  
  // optional .StoredIDPSMSToCCRIData mappedIDPToCCRIData = 32;
  if (has_mappedidptoccridata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->mappedidptoccridata(), output);
  }
  
  // optional uint32 recvAppContextName = 33;
  if (has_recvappcontextname()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->recvappcontextname(), output);
  }
  
  // optional .IDPToCCRIData IdpCCRIData = 34;
  if (has_idpccridata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->idpccridata(), output);
  }
  
  // optional uint32 recvGSUCCTime = 35;
  if (has_recvgsucctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->recvgsucctime(), output);
  }
  
  // optional uint32 recvNoAnsTime = 36;
  if (has_recvnoanstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->recvnoanstime(), output);
  }
  
  // optional uint32 currUSUCCTime = 37;
  if (has_currusucctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->currusucctime(), output);
  }
  
  // optional uint32 cumulativeGSUCCTime = 38;
  if (has_cumulativegsucctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->cumulativegsucctime(), output);
  }
  
  // optional uint32 cumulativeUSUCCTime = 39;
  if (has_cumulativeusucctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->cumulativeusucctime(), output);
  }
  
  // optional bool isFinalUnitReceived = 40 [default = false];
  if (has_isfinalunitreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->isfinalunitreceived(), output);
  }
  
  // optional .pbERBData recvFirstERBData = 41;
  if (has_recvfirsterbdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->recvfirsterbdata(), output);
  }
  
  // optional .pbERBData recvERBData = 42;
  if (has_recverbdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->recverbdata(), output);
  }
  
  // optional uint32 callAnswerTimeStamp = 43;
  if (has_callanswertimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->callanswertimestamp(), output);
  }
  
  // optional bool isFollowingOn = 44;
  if (has_isfollowingon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->isfollowingon(), output);
  }
  
  // optional .pbActivityTimerData activityTimerData = 45;
  if (has_activitytimerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->activitytimerdata(), output);
  }
  
  // optional string strRemoteTransIdForCDR = 46;
  if (has_strremotetransidforcdr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strremotetransidforcdr().data(), this->strremotetransidforcdr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->strremotetransidforcdr(), output);
  }
  
  // optional string strLocalTransIdForCDR = 47;
  if (has_strlocaltransidforcdr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlocaltransidforcdr().data(), this->strlocaltransidforcdr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->strlocaltransidforcdr(), output);
  }
  
  // optional bool bIsCallContinueSet = 48 [default = false];
  if (has_biscallcontinueset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->biscallcontinueset(), output);
  }
  
  // optional uint32 sessionStartTimeStamp = 49;
  if (has_sessionstarttimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->sessionstarttimestamp(), output);
  }
  
  // optional uint32 connectMaxDuration = 50;
  if (has_connectmaxduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->connectmaxduration(), output);
  }
  
  // optional uint32 erbAnswerTimeStamp = 51;
  if (has_erbanswertimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->erbanswertimestamp(), output);
  }
  
  // optional string erbSpecificInfo = 52;
  if (has_erbspecificinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->erbspecificinfo().data(), this->erbspecificinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->erbspecificinfo(), output);
  }
  
  // optional .pbIwfDccaSessionCtxt dccaCtxt = 53;
  if (has_dccactxt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->dccactxt(), output);
  }
  
  // optional bool isFailedCDRLogged = 54 [default = false];
  if (has_isfailedcdrlogged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->isfailedcdrlogged(), output);
  }
  
  // optional uint32 releaseCause = 55;
  if (has_releasecause()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->releasecause(), output);
  }
  
  // optional .TransState currState = 56;
  if (has_currstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      56, this->currstate(), output);
  }
  
  // optional .pbConnectArgData connectArg = 57;
  if (has_connectarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->connectarg(), output);
  }
  
  // optional .pbACHData achdata = 58;
  if (has_achdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->achdata(), output);
  }
  
  // optional uint32 disconTriggerTimeStamp = 59;
  if (has_discontriggertimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->discontriggertimestamp(), output);
  }
  
  // optional fixed32 ccfhFailedoverReason = 60 [default = 0];
  if (has_ccfhfailedoverreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(60, this->ccfhfailedoverreason(), output);
  }
  
  // optional uint32 triggerFollowOnSession = 61 [default = 1];
  if (has_triggerfollowonsession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->triggerfollowonsession(), output);
  }
  
  // optional uint32 updateTriggerTimeStamp = 62;
  if (has_updatetriggertimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->updatetriggertimestamp(), output);
  }
  
  // optional bool IsCCRTBuiltForInvalidCCAI = 63 [default = false];
  if (has_isccrtbuiltforinvalidccai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->isccrtbuiltforinvalidccai(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbCapRoTsl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bcsmEventFlag = 1;
  if (has_bcsmeventflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bcsmeventflag(), target);
  }
  
  // optional string capCallingPartyNumber = 2;
  if (has_capcallingpartynumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capcallingpartynumber().data(), this->capcallingpartynumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->capcallingpartynumber(), target);
  }
  
  // optional uint32 serviceIdentifier = 3;
  if (has_serviceidentifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serviceidentifier(), target);
  }
  
  // optional bool receivedBasicService = 4;
  if (has_receivedbasicservice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->receivedbasicservice(), target);
  }
  
  // optional string roUserSessionId = 5;
  if (has_rousersessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rousersessionid().data(), this->rousersessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rousersessionid(), target);
  }
  
  // optional string imsiChargingIdentifier = 6;
  if (has_imsichargingidentifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imsichargingidentifier().data(), this->imsichargingidentifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imsichargingidentifier(), target);
  }
  
  // optional string roServiceContextId = 7;
  if (has_roservicecontextid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roservicecontextid().data(), this->roservicecontextid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->roservicecontextid(), target);
  }
  
  // optional .SubscriptionIdConfig SubscriptionId = 8;
  if (has_subscriptionid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->subscriptionid(), target);
  }
  
  // optional string roCugInformation = 9;
  if (has_rocuginformation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rocuginformation().data(), this->rocuginformation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rocuginformation(), target);
  }
  
  // optional string capMSCAddress = 10;
  if (has_capmscaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capmscaddress().data(), this->capmscaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->capmscaddress(), target);
  }
  
  // optional string capGMSCAddress = 11;
  if (has_capgmscaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capgmscaddress().data(), this->capgmscaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->capgmscaddress(), target);
  }
  
  // optional uint32 ccaInitialResultCode = 12;
  if (has_ccainitialresultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ccainitialresultcode(), target);
  }
  
  // optional uint32 ccaUpdateResultCode = 13;
  if (has_ccaupdateresultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ccaupdateresultcode(), target);
  }
  
  // optional uint32 ccaTerminateResultCode = 14;
  if (has_ccaterminateresultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ccaterminateresultcode(), target);
  }
  
  // optional bool receivedTcapContinue = 15 [default = false];
  if (has_receivedtcapcontinue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->receivedtcapcontinue(), target);
  }
  
  // optional bool receivedASR = 16 [default = false];
  if (has_receivedasr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->receivedasr(), target);
  }
  
  // optional bool receivedIdpSms = 17 [default = false];
  if (has_receivedidpsms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->receivedidpsms(), target);
  }
  
  // optional bool receivedIdp = 18 [default = false];
  if (has_receivedidp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->receivedidp(), target);
  }
  
  // optional bool isTimeZoneSeconds = 19 [default = false];
  if (has_istimezoneseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->istimezoneseconds(), target);
  }
  
  // optional uint32 timeZoneSeconds = 20;
  if (has_timezoneseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->timezoneseconds(), target);
  }
  
  // optional uint32 ccaUpdateMsccResultCode = 21;
  if (has_ccaupdatemsccresultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->ccaupdatemsccresultcode(), target);
  }
  
  // optional bool isccaMsccGrantedCCTimeZero = 22 [default = false];
  if (has_isccamsccgrantedcctimezero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isccamsccgrantedcctimezero(), target);
  }
  
  // optional bool isReleaseSent = 23;
  if (has_isreleasesent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isreleasesent(), target);
  }
  
  // optional uint32 lastSentCCRequestType = 24;
  if (has_lastsentccrequesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->lastsentccrequesttype(), target);
  }
  
  // optional uint32 ccRequestNumber = 25;
  if (has_ccrequestnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->ccrequestnumber(), target);
  }
  
  // optional bool isFirstERBRcvd = 26;
  if (has_isfirsterbrcvd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isfirsterbrcvd(), target);
  }
  
  // optional uint32 CallType = 27;
  if (has_calltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->calltype(), target);
  }
  
  // optional uint32 scpAction = 28 [default = 0];
  if (has_scpaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->scpaction(), target);
  }
  
  // optional uint32 orgScpAction = 29 [default = 0];
  if (has_orgscpaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->orgscpaction(), target);
  }
  
  // optional int32 capControlMode = 30 [default = -1];
  if (has_capcontrolmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->capcontrolmode(), target);
  }
  
  // optional uint32 terminationCause = 31;
  if (has_terminationcause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->terminationcause(), target);
  }
  
  // optional .StoredIDPSMSToCCRIData mappedIDPToCCRIData = 32;
  if (has_mappedidptoccridata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->mappedidptoccridata(), target);
  }
  
  // optional uint32 recvAppContextName = 33;
  if (has_recvappcontextname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->recvappcontextname(), target);
  }
  
  // optional .IDPToCCRIData IdpCCRIData = 34;
  if (has_idpccridata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->idpccridata(), target);
  }
  
  // optional uint32 recvGSUCCTime = 35;
  if (has_recvgsucctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->recvgsucctime(), target);
  }
  
  // optional uint32 recvNoAnsTime = 36;
  if (has_recvnoanstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->recvnoanstime(), target);
  }
  
  // optional uint32 currUSUCCTime = 37;
  if (has_currusucctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->currusucctime(), target);
  }
  
  // optional uint32 cumulativeGSUCCTime = 38;
  if (has_cumulativegsucctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->cumulativegsucctime(), target);
  }
  
  // optional uint32 cumulativeUSUCCTime = 39;
  if (has_cumulativeusucctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->cumulativeusucctime(), target);
  }
  
  // optional bool isFinalUnitReceived = 40 [default = false];
  if (has_isfinalunitreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->isfinalunitreceived(), target);
  }
  
  // optional .pbERBData recvFirstERBData = 41;
  if (has_recvfirsterbdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->recvfirsterbdata(), target);
  }
  
  // optional .pbERBData recvERBData = 42;
  if (has_recverbdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->recverbdata(), target);
  }
  
  // optional uint32 callAnswerTimeStamp = 43;
  if (has_callanswertimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->callanswertimestamp(), target);
  }
  
  // optional bool isFollowingOn = 44;
  if (has_isfollowingon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->isfollowingon(), target);
  }
  
  // optional .pbActivityTimerData activityTimerData = 45;
  if (has_activitytimerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->activitytimerdata(), target);
  }
  
  // optional string strRemoteTransIdForCDR = 46;
  if (has_strremotetransidforcdr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strremotetransidforcdr().data(), this->strremotetransidforcdr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->strremotetransidforcdr(), target);
  }
  
  // optional string strLocalTransIdForCDR = 47;
  if (has_strlocaltransidforcdr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlocaltransidforcdr().data(), this->strlocaltransidforcdr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->strlocaltransidforcdr(), target);
  }
  
  // optional bool bIsCallContinueSet = 48 [default = false];
  if (has_biscallcontinueset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->biscallcontinueset(), target);
  }
  
  // optional uint32 sessionStartTimeStamp = 49;
  if (has_sessionstarttimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->sessionstarttimestamp(), target);
  }
  
  // optional uint32 connectMaxDuration = 50;
  if (has_connectmaxduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->connectmaxduration(), target);
  }
  
  // optional uint32 erbAnswerTimeStamp = 51;
  if (has_erbanswertimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->erbanswertimestamp(), target);
  }
  
  // optional string erbSpecificInfo = 52;
  if (has_erbspecificinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->erbspecificinfo().data(), this->erbspecificinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->erbspecificinfo(), target);
  }
  
  // optional .pbIwfDccaSessionCtxt dccaCtxt = 53;
  if (has_dccactxt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->dccactxt(), target);
  }
  
  // optional bool isFailedCDRLogged = 54 [default = false];
  if (has_isfailedcdrlogged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->isfailedcdrlogged(), target);
  }
  
  // optional uint32 releaseCause = 55;
  if (has_releasecause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->releasecause(), target);
  }
  
  // optional .TransState currState = 56;
  if (has_currstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      56, this->currstate(), target);
  }
  
  // optional .pbConnectArgData connectArg = 57;
  if (has_connectarg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->connectarg(), target);
  }
  
  // optional .pbACHData achdata = 58;
  if (has_achdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->achdata(), target);
  }
  
  // optional uint32 disconTriggerTimeStamp = 59;
  if (has_discontriggertimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->discontriggertimestamp(), target);
  }
  
  // optional fixed32 ccfhFailedoverReason = 60 [default = 0];
  if (has_ccfhfailedoverreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(60, this->ccfhfailedoverreason(), target);
  }
  
  // optional uint32 triggerFollowOnSession = 61 [default = 1];
  if (has_triggerfollowonsession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->triggerfollowonsession(), target);
  }
  
  // optional uint32 updateTriggerTimeStamp = 62;
  if (has_updatetriggertimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->updatetriggertimestamp(), target);
  }
  
  // optional bool IsCCRTBuiltForInvalidCCAI = 63 [default = false];
  if (has_isccrtbuiltforinvalidccai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->isccrtbuiltforinvalidccai(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbCapRoTsl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bcsmEventFlag = 1;
    if (has_bcsmeventflag()) {
      total_size += 1 + 1;
    }
    
    // optional string capCallingPartyNumber = 2;
    if (has_capcallingpartynumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capcallingpartynumber());
    }
    
    // optional uint32 serviceIdentifier = 3;
    if (has_serviceidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceidentifier());
    }
    
    // optional bool receivedBasicService = 4;
    if (has_receivedbasicservice()) {
      total_size += 1 + 1;
    }
    
    // optional string roUserSessionId = 5;
    if (has_rousersessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rousersessionid());
    }
    
    // optional string imsiChargingIdentifier = 6;
    if (has_imsichargingidentifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imsichargingidentifier());
    }
    
    // optional string roServiceContextId = 7;
    if (has_roservicecontextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roservicecontextid());
    }
    
    // optional .SubscriptionIdConfig SubscriptionId = 8;
    if (has_subscriptionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptionid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string roCugInformation = 9;
    if (has_rocuginformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rocuginformation());
    }
    
    // optional string capMSCAddress = 10;
    if (has_capmscaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capmscaddress());
    }
    
    // optional string capGMSCAddress = 11;
    if (has_capgmscaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capgmscaddress());
    }
    
    // optional uint32 ccaInitialResultCode = 12;
    if (has_ccainitialresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccainitialresultcode());
    }
    
    // optional uint32 ccaUpdateResultCode = 13;
    if (has_ccaupdateresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccaupdateresultcode());
    }
    
    // optional uint32 ccaTerminateResultCode = 14;
    if (has_ccaterminateresultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccaterminateresultcode());
    }
    
    // optional bool receivedTcapContinue = 15 [default = false];
    if (has_receivedtcapcontinue()) {
      total_size += 1 + 1;
    }
    
    // optional bool receivedASR = 16 [default = false];
    if (has_receivedasr()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool receivedIdpSms = 17 [default = false];
    if (has_receivedidpsms()) {
      total_size += 2 + 1;
    }
    
    // optional bool receivedIdp = 18 [default = false];
    if (has_receivedidp()) {
      total_size += 2 + 1;
    }
    
    // optional bool isTimeZoneSeconds = 19 [default = false];
    if (has_istimezoneseconds()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 timeZoneSeconds = 20;
    if (has_timezoneseconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timezoneseconds());
    }
    
    // optional uint32 ccaUpdateMsccResultCode = 21;
    if (has_ccaupdatemsccresultcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccaupdatemsccresultcode());
    }
    
    // optional bool isccaMsccGrantedCCTimeZero = 22 [default = false];
    if (has_isccamsccgrantedcctimezero()) {
      total_size += 2 + 1;
    }
    
    // optional bool isReleaseSent = 23;
    if (has_isreleasesent()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 lastSentCCRequestType = 24;
    if (has_lastsentccrequesttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastsentccrequesttype());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 ccRequestNumber = 25;
    if (has_ccrequestnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccrequestnumber());
    }
    
    // optional bool isFirstERBRcvd = 26;
    if (has_isfirsterbrcvd()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 CallType = 27;
    if (has_calltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calltype());
    }
    
    // optional uint32 scpAction = 28 [default = 0];
    if (has_scpaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scpaction());
    }
    
    // optional uint32 orgScpAction = 29 [default = 0];
    if (has_orgscpaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orgscpaction());
    }
    
    // optional int32 capControlMode = 30 [default = -1];
    if (has_capcontrolmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capcontrolmode());
    }
    
    // optional uint32 terminationCause = 31;
    if (has_terminationcause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terminationcause());
    }
    
    // optional .StoredIDPSMSToCCRIData mappedIDPToCCRIData = 32;
    if (has_mappedidptoccridata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mappedidptoccridata());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 recvAppContextName = 33;
    if (has_recvappcontextname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvappcontextname());
    }
    
    // optional .IDPToCCRIData IdpCCRIData = 34;
    if (has_idpccridata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->idpccridata());
    }
    
    // optional uint32 recvGSUCCTime = 35;
    if (has_recvgsucctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvgsucctime());
    }
    
    // optional uint32 recvNoAnsTime = 36;
    if (has_recvnoanstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvnoanstime());
    }
    
    // optional uint32 currUSUCCTime = 37;
    if (has_currusucctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currusucctime());
    }
    
    // optional uint32 cumulativeGSUCCTime = 38;
    if (has_cumulativegsucctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cumulativegsucctime());
    }
    
    // optional uint32 cumulativeUSUCCTime = 39;
    if (has_cumulativeusucctime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cumulativeusucctime());
    }
    
    // optional bool isFinalUnitReceived = 40 [default = false];
    if (has_isfinalunitreceived()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .pbERBData recvFirstERBData = 41;
    if (has_recvfirsterbdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvfirsterbdata());
    }
    
    // optional .pbERBData recvERBData = 42;
    if (has_recverbdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recverbdata());
    }
    
    // optional uint32 callAnswerTimeStamp = 43;
    if (has_callanswertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->callanswertimestamp());
    }
    
    // optional bool isFollowingOn = 44;
    if (has_isfollowingon()) {
      total_size += 2 + 1;
    }
    
    // optional .pbActivityTimerData activityTimerData = 45;
    if (has_activitytimerdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activitytimerdata());
    }
    
    // optional string strRemoteTransIdForCDR = 46;
    if (has_strremotetransidforcdr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strremotetransidforcdr());
    }
    
    // optional string strLocalTransIdForCDR = 47;
    if (has_strlocaltransidforcdr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strlocaltransidforcdr());
    }
    
    // optional bool bIsCallContinueSet = 48 [default = false];
    if (has_biscallcontinueset()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 sessionStartTimeStamp = 49;
    if (has_sessionstarttimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionstarttimestamp());
    }
    
    // optional uint32 connectMaxDuration = 50;
    if (has_connectmaxduration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connectmaxduration());
    }
    
    // optional uint32 erbAnswerTimeStamp = 51;
    if (has_erbanswertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->erbanswertimestamp());
    }
    
    // optional string erbSpecificInfo = 52;
    if (has_erbspecificinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->erbspecificinfo());
    }
    
    // optional .pbIwfDccaSessionCtxt dccaCtxt = 53;
    if (has_dccactxt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dccactxt());
    }
    
    // optional bool isFailedCDRLogged = 54 [default = false];
    if (has_isfailedcdrlogged()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 releaseCause = 55;
    if (has_releasecause()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->releasecause());
    }
    
    // optional .TransState currState = 56;
    if (has_currstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->currstate());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .pbConnectArgData connectArg = 57;
    if (has_connectarg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectarg());
    }
    
    // optional .pbACHData achdata = 58;
    if (has_achdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achdata());
    }
    
    // optional uint32 disconTriggerTimeStamp = 59;
    if (has_discontriggertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discontriggertimestamp());
    }
    
    // optional fixed32 ccfhFailedoverReason = 60 [default = 0];
    if (has_ccfhfailedoverreason()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 triggerFollowOnSession = 61 [default = 1];
    if (has_triggerfollowonsession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggerfollowonsession());
    }
    
    // optional uint32 updateTriggerTimeStamp = 62;
    if (has_updatetriggertimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetriggertimestamp());
    }
    
    // optional bool IsCCRTBuiltForInvalidCCAI = 63 [default = false];
    if (has_isccrtbuiltforinvalidccai()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbCapRoTsl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbCapRoTsl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbCapRoTsl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbCapRoTsl::MergeFrom(const pbCapRoTsl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bcsmeventflag()) {
      set_bcsmeventflag(from.bcsmeventflag());
    }
    if (from.has_capcallingpartynumber()) {
      set_capcallingpartynumber(from.capcallingpartynumber());
    }
    if (from.has_serviceidentifier()) {
      set_serviceidentifier(from.serviceidentifier());
    }
    if (from.has_receivedbasicservice()) {
      set_receivedbasicservice(from.receivedbasicservice());
    }
    if (from.has_rousersessionid()) {
      set_rousersessionid(from.rousersessionid());
    }
    if (from.has_imsichargingidentifier()) {
      set_imsichargingidentifier(from.imsichargingidentifier());
    }
    if (from.has_roservicecontextid()) {
      set_roservicecontextid(from.roservicecontextid());
    }
    if (from.has_subscriptionid()) {
      mutable_subscriptionid()->::SubscriptionIdConfig::MergeFrom(from.subscriptionid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rocuginformation()) {
      set_rocuginformation(from.rocuginformation());
    }
    if (from.has_capmscaddress()) {
      set_capmscaddress(from.capmscaddress());
    }
    if (from.has_capgmscaddress()) {
      set_capgmscaddress(from.capgmscaddress());
    }
    if (from.has_ccainitialresultcode()) {
      set_ccainitialresultcode(from.ccainitialresultcode());
    }
    if (from.has_ccaupdateresultcode()) {
      set_ccaupdateresultcode(from.ccaupdateresultcode());
    }
    if (from.has_ccaterminateresultcode()) {
      set_ccaterminateresultcode(from.ccaterminateresultcode());
    }
    if (from.has_receivedtcapcontinue()) {
      set_receivedtcapcontinue(from.receivedtcapcontinue());
    }
    if (from.has_receivedasr()) {
      set_receivedasr(from.receivedasr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_receivedidpsms()) {
      set_receivedidpsms(from.receivedidpsms());
    }
    if (from.has_receivedidp()) {
      set_receivedidp(from.receivedidp());
    }
    if (from.has_istimezoneseconds()) {
      set_istimezoneseconds(from.istimezoneseconds());
    }
    if (from.has_timezoneseconds()) {
      set_timezoneseconds(from.timezoneseconds());
    }
    if (from.has_ccaupdatemsccresultcode()) {
      set_ccaupdatemsccresultcode(from.ccaupdatemsccresultcode());
    }
    if (from.has_isccamsccgrantedcctimezero()) {
      set_isccamsccgrantedcctimezero(from.isccamsccgrantedcctimezero());
    }
    if (from.has_isreleasesent()) {
      set_isreleasesent(from.isreleasesent());
    }
    if (from.has_lastsentccrequesttype()) {
      set_lastsentccrequesttype(from.lastsentccrequesttype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ccrequestnumber()) {
      set_ccrequestnumber(from.ccrequestnumber());
    }
    if (from.has_isfirsterbrcvd()) {
      set_isfirsterbrcvd(from.isfirsterbrcvd());
    }
    if (from.has_calltype()) {
      set_calltype(from.calltype());
    }
    if (from.has_scpaction()) {
      set_scpaction(from.scpaction());
    }
    if (from.has_orgscpaction()) {
      set_orgscpaction(from.orgscpaction());
    }
    if (from.has_capcontrolmode()) {
      set_capcontrolmode(from.capcontrolmode());
    }
    if (from.has_terminationcause()) {
      set_terminationcause(from.terminationcause());
    }
    if (from.has_mappedidptoccridata()) {
      mutable_mappedidptoccridata()->::StoredIDPSMSToCCRIData::MergeFrom(from.mappedidptoccridata());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_recvappcontextname()) {
      set_recvappcontextname(from.recvappcontextname());
    }
    if (from.has_idpccridata()) {
      mutable_idpccridata()->::IDPToCCRIData::MergeFrom(from.idpccridata());
    }
    if (from.has_recvgsucctime()) {
      set_recvgsucctime(from.recvgsucctime());
    }
    if (from.has_recvnoanstime()) {
      set_recvnoanstime(from.recvnoanstime());
    }
    if (from.has_currusucctime()) {
      set_currusucctime(from.currusucctime());
    }
    if (from.has_cumulativegsucctime()) {
      set_cumulativegsucctime(from.cumulativegsucctime());
    }
    if (from.has_cumulativeusucctime()) {
      set_cumulativeusucctime(from.cumulativeusucctime());
    }
    if (from.has_isfinalunitreceived()) {
      set_isfinalunitreceived(from.isfinalunitreceived());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_recvfirsterbdata()) {
      mutable_recvfirsterbdata()->::pbERBData::MergeFrom(from.recvfirsterbdata());
    }
    if (from.has_recverbdata()) {
      mutable_recverbdata()->::pbERBData::MergeFrom(from.recverbdata());
    }
    if (from.has_callanswertimestamp()) {
      set_callanswertimestamp(from.callanswertimestamp());
    }
    if (from.has_isfollowingon()) {
      set_isfollowingon(from.isfollowingon());
    }
    if (from.has_activitytimerdata()) {
      mutable_activitytimerdata()->::pbActivityTimerData::MergeFrom(from.activitytimerdata());
    }
    if (from.has_strremotetransidforcdr()) {
      set_strremotetransidforcdr(from.strremotetransidforcdr());
    }
    if (from.has_strlocaltransidforcdr()) {
      set_strlocaltransidforcdr(from.strlocaltransidforcdr());
    }
    if (from.has_biscallcontinueset()) {
      set_biscallcontinueset(from.biscallcontinueset());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_sessionstarttimestamp()) {
      set_sessionstarttimestamp(from.sessionstarttimestamp());
    }
    if (from.has_connectmaxduration()) {
      set_connectmaxduration(from.connectmaxduration());
    }
    if (from.has_erbanswertimestamp()) {
      set_erbanswertimestamp(from.erbanswertimestamp());
    }
    if (from.has_erbspecificinfo()) {
      set_erbspecificinfo(from.erbspecificinfo());
    }
    if (from.has_dccactxt()) {
      mutable_dccactxt()->::pbIwfDccaSessionCtxt::MergeFrom(from.dccactxt());
    }
    if (from.has_isfailedcdrlogged()) {
      set_isfailedcdrlogged(from.isfailedcdrlogged());
    }
    if (from.has_releasecause()) {
      set_releasecause(from.releasecause());
    }
    if (from.has_currstate()) {
      set_currstate(from.currstate());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_connectarg()) {
      mutable_connectarg()->::pbConnectArgData::MergeFrom(from.connectarg());
    }
    if (from.has_achdata()) {
      mutable_achdata()->::pbACHData::MergeFrom(from.achdata());
    }
    if (from.has_discontriggertimestamp()) {
      set_discontriggertimestamp(from.discontriggertimestamp());
    }
    if (from.has_ccfhfailedoverreason()) {
      set_ccfhfailedoverreason(from.ccfhfailedoverreason());
    }
    if (from.has_triggerfollowonsession()) {
      set_triggerfollowonsession(from.triggerfollowonsession());
    }
    if (from.has_updatetriggertimestamp()) {
      set_updatetriggertimestamp(from.updatetriggertimestamp());
    }
    if (from.has_isccrtbuiltforinvalidccai()) {
      set_isccrtbuiltforinvalidccai(from.isccrtbuiltforinvalidccai());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbCapRoTsl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbCapRoTsl::CopyFrom(const pbCapRoTsl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbCapRoTsl::IsInitialized() const {
  
  return true;
}

void pbCapRoTsl::Swap(pbCapRoTsl* other) {
  if (other != this) {
    std::swap(bcsmeventflag_, other->bcsmeventflag_);
    std::swap(capcallingpartynumber_, other->capcallingpartynumber_);
    std::swap(serviceidentifier_, other->serviceidentifier_);
    std::swap(receivedbasicservice_, other->receivedbasicservice_);
    std::swap(rousersessionid_, other->rousersessionid_);
    std::swap(imsichargingidentifier_, other->imsichargingidentifier_);
    std::swap(roservicecontextid_, other->roservicecontextid_);
    std::swap(subscriptionid_, other->subscriptionid_);
    std::swap(rocuginformation_, other->rocuginformation_);
    std::swap(capmscaddress_, other->capmscaddress_);
    std::swap(capgmscaddress_, other->capgmscaddress_);
    std::swap(ccainitialresultcode_, other->ccainitialresultcode_);
    std::swap(ccaupdateresultcode_, other->ccaupdateresultcode_);
    std::swap(ccaterminateresultcode_, other->ccaterminateresultcode_);
    std::swap(receivedtcapcontinue_, other->receivedtcapcontinue_);
    std::swap(receivedasr_, other->receivedasr_);
    std::swap(receivedidpsms_, other->receivedidpsms_);
    std::swap(receivedidp_, other->receivedidp_);
    std::swap(istimezoneseconds_, other->istimezoneseconds_);
    std::swap(timezoneseconds_, other->timezoneseconds_);
    std::swap(ccaupdatemsccresultcode_, other->ccaupdatemsccresultcode_);
    std::swap(isccamsccgrantedcctimezero_, other->isccamsccgrantedcctimezero_);
    std::swap(isreleasesent_, other->isreleasesent_);
    std::swap(lastsentccrequesttype_, other->lastsentccrequesttype_);
    std::swap(ccrequestnumber_, other->ccrequestnumber_);
    std::swap(isfirsterbrcvd_, other->isfirsterbrcvd_);
    std::swap(calltype_, other->calltype_);
    std::swap(scpaction_, other->scpaction_);
    std::swap(orgscpaction_, other->orgscpaction_);
    std::swap(capcontrolmode_, other->capcontrolmode_);
    std::swap(terminationcause_, other->terminationcause_);
    std::swap(mappedidptoccridata_, other->mappedidptoccridata_);
    std::swap(recvappcontextname_, other->recvappcontextname_);
    std::swap(idpccridata_, other->idpccridata_);
    std::swap(recvgsucctime_, other->recvgsucctime_);
    std::swap(recvnoanstime_, other->recvnoanstime_);
    std::swap(currusucctime_, other->currusucctime_);
    std::swap(cumulativegsucctime_, other->cumulativegsucctime_);
    std::swap(cumulativeusucctime_, other->cumulativeusucctime_);
    std::swap(isfinalunitreceived_, other->isfinalunitreceived_);
    std::swap(recvfirsterbdata_, other->recvfirsterbdata_);
    std::swap(recverbdata_, other->recverbdata_);
    std::swap(callanswertimestamp_, other->callanswertimestamp_);
    std::swap(isfollowingon_, other->isfollowingon_);
    std::swap(activitytimerdata_, other->activitytimerdata_);
    std::swap(strremotetransidforcdr_, other->strremotetransidforcdr_);
    std::swap(strlocaltransidforcdr_, other->strlocaltransidforcdr_);
    std::swap(biscallcontinueset_, other->biscallcontinueset_);
    std::swap(sessionstarttimestamp_, other->sessionstarttimestamp_);
    std::swap(connectmaxduration_, other->connectmaxduration_);
    std::swap(erbanswertimestamp_, other->erbanswertimestamp_);
    std::swap(erbspecificinfo_, other->erbspecificinfo_);
    std::swap(dccactxt_, other->dccactxt_);
    std::swap(isfailedcdrlogged_, other->isfailedcdrlogged_);
    std::swap(releasecause_, other->releasecause_);
    std::swap(currstate_, other->currstate_);
    std::swap(connectarg_, other->connectarg_);
    std::swap(achdata_, other->achdata_);
    std::swap(discontriggertimestamp_, other->discontriggertimestamp_);
    std::swap(ccfhfailedoverreason_, other->ccfhfailedoverreason_);
    std::swap(triggerfollowonsession_, other->triggerfollowonsession_);
    std::swap(updatetriggertimestamp_, other->updatetriggertimestamp_);
    std::swap(isccrtbuiltforinvalidccai_, other->isccrtbuiltforinvalidccai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbCapRoTsl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbCapRoTsl_descriptor_;
  metadata.reflection = pbCapRoTsl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbStoredUserData::kCaprotslFieldNumber;
#endif  // !_MSC_VER

pbStoredUserData::pbStoredUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbStoredUserData::InitAsDefaultInstance() {
  caprotsl_ = const_cast< ::pbCapRoTsl*>(&::pbCapRoTsl::default_instance());
}

pbStoredUserData::pbStoredUserData(const pbStoredUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbStoredUserData::SharedCtor() {
  _cached_size_ = 0;
  caprotsl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbStoredUserData::~pbStoredUserData() {
  SharedDtor();
}

void pbStoredUserData::SharedDtor() {
  if (this != default_instance_) {
    delete caprotsl_;
  }
}

void pbStoredUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbStoredUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbStoredUserData_descriptor_;
}

const pbStoredUserData& pbStoredUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbStoredUserData* pbStoredUserData::default_instance_ = NULL;

pbStoredUserData* pbStoredUserData::New() const {
  return new pbStoredUserData;
}

void pbStoredUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_caprotsl()) {
      if (caprotsl_ != NULL) caprotsl_->::pbCapRoTsl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbStoredUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbCapRoTsl caprotsl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caprotsl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbStoredUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pbCapRoTsl caprotsl = 1;
  if (has_caprotsl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caprotsl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbStoredUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pbCapRoTsl caprotsl = 1;
  if (has_caprotsl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caprotsl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbStoredUserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pbCapRoTsl caprotsl = 1;
    if (has_caprotsl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caprotsl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbStoredUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbStoredUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbStoredUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbStoredUserData::MergeFrom(const pbStoredUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caprotsl()) {
      mutable_caprotsl()->::pbCapRoTsl::MergeFrom(from.caprotsl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbStoredUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbStoredUserData::CopyFrom(const pbStoredUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbStoredUserData::IsInitialized() const {
  
  return true;
}

void pbStoredUserData::Swap(pbStoredUserData* other) {
  if (other != this) {
    std::swap(caprotsl_, other->caprotsl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbStoredUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbStoredUserData_descriptor_;
  metadata.reflection = pbStoredUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* pbIwfTimerData_ETimerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfTimerData_ETimerType_descriptor_;
}
bool pbIwfTimerData_ETimerType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const pbIwfTimerData_ETimerType pbIwfTimerData::NO_EVENT_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::FAKE_ACH_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::ACTIVITY_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::ACH_DELTA_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::ACR_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::CONNECT_MAX_CALL_DURATION;
const pbIwfTimerData_ETimerType pbIwfTimerData::ACTIVITY_RESPONSE_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::IWF_SUBSCRIBER_AUDIT_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::IWF_DCCA_TX_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::IWF_ISFOLLOWN_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::INVALID_TIMER;
const pbIwfTimerData_ETimerType pbIwfTimerData::ETimerType_MIN;
const pbIwfTimerData_ETimerType pbIwfTimerData::ETimerType_MAX;
const int pbIwfTimerData::ETimerType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* pbIwfTimerData_EKeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfTimerData_EKeyType_descriptor_;
}
bool pbIwfTimerData_EKeyType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const pbIwfTimerData_EKeyType pbIwfTimerData::INVLAID_KEY;
const pbIwfTimerData_EKeyType pbIwfTimerData::SESSION_ID;
const pbIwfTimerData_EKeyType pbIwfTimerData::DIALOG_ID;
const pbIwfTimerData_EKeyType pbIwfTimerData::EKeyType_MIN;
const pbIwfTimerData_EKeyType pbIwfTimerData::EKeyType_MAX;
const int pbIwfTimerData::EKeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int pbIwfTimerData::kMETimerTypeFieldNumber;
const int pbIwfTimerData::kMEKeyTypeFieldNumber;
const int pbIwfTimerData::kMTStartTimeFieldNumber;
const int pbIwfTimerData::kMUiDurationFieldNumber;
const int pbIwfTimerData::kMUiTimerIdFieldNumber;
#endif  // !_MSC_VER

pbIwfTimerData::pbIwfTimerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbIwfTimerData::InitAsDefaultInstance() {
}

pbIwfTimerData::pbIwfTimerData(const pbIwfTimerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbIwfTimerData::SharedCtor() {
  _cached_size_ = 0;
  m_etimertype_ = 1;
  m_ekeytype_ = -1;
  m_tstarttime_ = 0u;
  m_uiduration_ = 0u;
  m_uitimerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbIwfTimerData::~pbIwfTimerData() {
  SharedDtor();
}

void pbIwfTimerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbIwfTimerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbIwfTimerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfTimerData_descriptor_;
}

const pbIwfTimerData& pbIwfTimerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbIwfTimerData* pbIwfTimerData::default_instance_ = NULL;

pbIwfTimerData* pbIwfTimerData::New() const {
  return new pbIwfTimerData;
}

void pbIwfTimerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_etimertype_ = 1;
    m_ekeytype_ = -1;
    m_tstarttime_ = 0u;
    m_uiduration_ = 0u;
    m_uitimerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbIwfTimerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pbIwfTimerData.ETimerType m_eTimerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbIwfTimerData_ETimerType_IsValid(value)) {
            set_m_etimertype(static_cast< ::pbIwfTimerData_ETimerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_eKeyType;
        break;
      }
      
      // optional .pbIwfTimerData.EKeyType m_eKeyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eKeyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pbIwfTimerData_EKeyType_IsValid(value)) {
            set_m_ekeytype(static_cast< ::pbIwfTimerData_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_m_tStartTime;
        break;
      }
      
      // optional fixed32 m_tStartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_tStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &m_tstarttime_)));
          set_has_m_tstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_uiDuration;
        break;
      }
      
      // optional uint32 m_uiDuration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uiDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uiduration_)));
          set_has_m_uiduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_uiTimerId;
        break;
      }
      
      // optional uint32 m_uiTimerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_uiTimerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_uitimerid_)));
          set_has_m_uitimerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbIwfTimerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pbIwfTimerData.ETimerType m_eTimerType = 1;
  if (has_m_etimertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_etimertype(), output);
  }
  
  // optional .pbIwfTimerData.EKeyType m_eKeyType = 2;
  if (has_m_ekeytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->m_ekeytype(), output);
  }
  
  // optional fixed32 m_tStartTime = 3;
  if (has_m_tstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->m_tstarttime(), output);
  }
  
  // optional uint32 m_uiDuration = 4;
  if (has_m_uiduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m_uiduration(), output);
  }
  
  // optional uint32 m_uiTimerId = 5;
  if (has_m_uitimerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m_uitimerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbIwfTimerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pbIwfTimerData.ETimerType m_eTimerType = 1;
  if (has_m_etimertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_etimertype(), target);
  }
  
  // optional .pbIwfTimerData.EKeyType m_eKeyType = 2;
  if (has_m_ekeytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->m_ekeytype(), target);
  }
  
  // optional fixed32 m_tStartTime = 3;
  if (has_m_tstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->m_tstarttime(), target);
  }
  
  // optional uint32 m_uiDuration = 4;
  if (has_m_uiduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m_uiduration(), target);
  }
  
  // optional uint32 m_uiTimerId = 5;
  if (has_m_uitimerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m_uitimerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbIwfTimerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pbIwfTimerData.ETimerType m_eTimerType = 1;
    if (has_m_etimertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_etimertype());
    }
    
    // optional .pbIwfTimerData.EKeyType m_eKeyType = 2;
    if (has_m_ekeytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_ekeytype());
    }
    
    // optional fixed32 m_tStartTime = 3;
    if (has_m_tstarttime()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 m_uiDuration = 4;
    if (has_m_uiduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uiduration());
    }
    
    // optional uint32 m_uiTimerId = 5;
    if (has_m_uitimerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_uitimerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbIwfTimerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbIwfTimerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbIwfTimerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbIwfTimerData::MergeFrom(const pbIwfTimerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_etimertype()) {
      set_m_etimertype(from.m_etimertype());
    }
    if (from.has_m_ekeytype()) {
      set_m_ekeytype(from.m_ekeytype());
    }
    if (from.has_m_tstarttime()) {
      set_m_tstarttime(from.m_tstarttime());
    }
    if (from.has_m_uiduration()) {
      set_m_uiduration(from.m_uiduration());
    }
    if (from.has_m_uitimerid()) {
      set_m_uitimerid(from.m_uitimerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbIwfTimerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbIwfTimerData::CopyFrom(const pbIwfTimerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbIwfTimerData::IsInitialized() const {
  
  return true;
}

void pbIwfTimerData::Swap(pbIwfTimerData* other) {
  if (other != this) {
    std::swap(m_etimertype_, other->m_etimertype_);
    std::swap(m_ekeytype_, other->m_ekeytype_);
    std::swap(m_tstarttime_, other->m_tstarttime_);
    std::swap(m_uiduration_, other->m_uiduration_);
    std::swap(m_uitimerid_, other->m_uitimerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbIwfTimerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbIwfTimerData_descriptor_;
  metadata.reflection = pbIwfTimerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbSCCP_ADDR::kAddrFieldNumber;
const int pbSCCP_ADDR::kLengthFieldNumber;
#endif  // !_MSC_VER

pbSCCP_ADDR::pbSCCP_ADDR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbSCCP_ADDR::InitAsDefaultInstance() {
}

pbSCCP_ADDR::pbSCCP_ADDR(const pbSCCP_ADDR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbSCCP_ADDR::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbSCCP_ADDR::~pbSCCP_ADDR() {
  SharedDtor();
}

void pbSCCP_ADDR::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void pbSCCP_ADDR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbSCCP_ADDR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbSCCP_ADDR_descriptor_;
}

const pbSCCP_ADDR& pbSCCP_ADDR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbSCCP_ADDR* pbSCCP_ADDR::default_instance_ = NULL;

pbSCCP_ADDR* pbSCCP_ADDR::New() const {
  return new pbSCCP_ADDR;
}

void pbSCCP_ADDR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbSCCP_ADDR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }
      
      // optional uint32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbSCCP_ADDR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->addr(), output);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbSCCP_ADDR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes addr = 1;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addr(), target);
  }
  
  // optional uint32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbSCCP_ADDR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }
    
    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbSCCP_ADDR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbSCCP_ADDR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbSCCP_ADDR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbSCCP_ADDR::MergeFrom(const pbSCCP_ADDR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbSCCP_ADDR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbSCCP_ADDR::CopyFrom(const pbSCCP_ADDR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbSCCP_ADDR::IsInitialized() const {
  
  return true;
}

void pbSCCP_ADDR::Swap(pbSCCP_ADDR* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbSCCP_ADDR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbSCCP_ADDR_descriptor_;
  metadata.reflection = pbSCCP_ADDR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbMtp3_Header::kSioFieldNumber;
const int pbMtp3_Header::kLabelFieldNumber;
#endif  // !_MSC_VER

pbMtp3_Header::pbMtp3_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbMtp3_Header::InitAsDefaultInstance() {
}

pbMtp3_Header::pbMtp3_Header(const pbMtp3_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbMtp3_Header::SharedCtor() {
  _cached_size_ = 0;
  sio_ = 0u;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbMtp3_Header::~pbMtp3_Header() {
  SharedDtor();
}

void pbMtp3_Header::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void pbMtp3_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbMtp3_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbMtp3_Header_descriptor_;
}

const pbMtp3_Header& pbMtp3_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbMtp3_Header* pbMtp3_Header::default_instance_ = NULL;

pbMtp3_Header* pbMtp3_Header::New() const {
  return new pbMtp3_Header;
}

void pbMtp3_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sio_ = 0u;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbMtp3_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sio_)));
          set_has_sio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }
      
      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbMtp3_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sio = 1;
  if (has_sio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sio(), output);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbMtp3_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sio = 1;
  if (has_sio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sio(), target);
  }
  
  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbMtp3_Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sio = 1;
    if (has_sio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sio());
    }
    
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbMtp3_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbMtp3_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbMtp3_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbMtp3_Header::MergeFrom(const pbMtp3_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sio()) {
      set_sio(from.sio());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbMtp3_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMtp3_Header::CopyFrom(const pbMtp3_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMtp3_Header::IsInitialized() const {
  
  return true;
}

void pbMtp3_Header::Swap(pbMtp3_Header* other) {
  if (other != this) {
    std::swap(sio_, other->sio_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbMtp3_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbMtp3_Header_descriptor_;
  metadata.reflection = pbMtp3_Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbTcapTransactionData::kLTidFieldNumber;
const int pbTcapTransactionData::kRTidFieldNumber;
const int pbTcapTransactionData::kOaddrFieldNumber;
const int pbTcapTransactionData::kDaddrFieldNumber;
const int pbTcapTransactionData::kLabelFieldNumber;
const int pbTcapTransactionData::kQosFieldNumber;
#endif  // !_MSC_VER

pbTcapTransactionData::pbTcapTransactionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbTcapTransactionData::InitAsDefaultInstance() {
  oaddr_ = const_cast< ::pbSCCP_ADDR*>(&::pbSCCP_ADDR::default_instance());
  daddr_ = const_cast< ::pbSCCP_ADDR*>(&::pbSCCP_ADDR::default_instance());
  label_ = const_cast< ::pbMtp3_Header*>(&::pbMtp3_Header::default_instance());
  qos_ = const_cast< ::QualityOfService*>(&::QualityOfService::default_instance());
}

pbTcapTransactionData::pbTcapTransactionData(const pbTcapTransactionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbTcapTransactionData::SharedCtor() {
  _cached_size_ = 0;
  ltid_ = 0u;
  rtid_ = 0u;
  oaddr_ = NULL;
  daddr_ = NULL;
  label_ = NULL;
  qos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbTcapTransactionData::~pbTcapTransactionData() {
  SharedDtor();
}

void pbTcapTransactionData::SharedDtor() {
  if (this != default_instance_) {
    delete oaddr_;
    delete daddr_;
    delete label_;
    delete qos_;
  }
}

void pbTcapTransactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbTcapTransactionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbTcapTransactionData_descriptor_;
}

const pbTcapTransactionData& pbTcapTransactionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbTcapTransactionData* pbTcapTransactionData::default_instance_ = NULL;

pbTcapTransactionData* pbTcapTransactionData::New() const {
  return new pbTcapTransactionData;
}

void pbTcapTransactionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ltid_ = 0u;
    rtid_ = 0u;
    if (has_oaddr()) {
      if (oaddr_ != NULL) oaddr_->::pbSCCP_ADDR::Clear();
    }
    if (has_daddr()) {
      if (daddr_ != NULL) daddr_->::pbSCCP_ADDR::Clear();
    }
    if (has_label()) {
      if (label_ != NULL) label_->::pbMtp3_Header::Clear();
    }
    if (has_qos()) {
      if (qos_ != NULL) qos_->::QualityOfService::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbTcapTransactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lTid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ltid_)));
          set_has_ltid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rTid;
        break;
      }
      
      // optional uint32 rTid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oaddr;
        break;
      }
      
      // optional .pbSCCP_ADDR oaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_daddr;
        break;
      }
      
      // optional .pbSCCP_ADDR daddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_label;
        break;
      }
      
      // optional .pbMtp3_Header label = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_label()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_qos;
        break;
      }
      
      // optional .QualityOfService qos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbTcapTransactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lTid = 1;
  if (has_ltid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ltid(), output);
  }
  
  // optional uint32 rTid = 2;
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rtid(), output);
  }
  
  // optional .pbSCCP_ADDR oaddr = 3;
  if (has_oaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->oaddr(), output);
  }
  
  // optional .pbSCCP_ADDR daddr = 4;
  if (has_daddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->daddr(), output);
  }
  
  // optional .pbMtp3_Header label = 5;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->label(), output);
  }
  
  // optional .QualityOfService qos = 6;
  if (has_qos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->qos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbTcapTransactionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lTid = 1;
  if (has_ltid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ltid(), target);
  }
  
  // optional uint32 rTid = 2;
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rtid(), target);
  }
  
  // optional .pbSCCP_ADDR oaddr = 3;
  if (has_oaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->oaddr(), target);
  }
  
  // optional .pbSCCP_ADDR daddr = 4;
  if (has_daddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->daddr(), target);
  }
  
  // optional .pbMtp3_Header label = 5;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->label(), target);
  }
  
  // optional .QualityOfService qos = 6;
  if (has_qos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->qos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbTcapTransactionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lTid = 1;
    if (has_ltid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ltid());
    }
    
    // optional uint32 rTid = 2;
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtid());
    }
    
    // optional .pbSCCP_ADDR oaddr = 3;
    if (has_oaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oaddr());
    }
    
    // optional .pbSCCP_ADDR daddr = 4;
    if (has_daddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daddr());
    }
    
    // optional .pbMtp3_Header label = 5;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label());
    }
    
    // optional .QualityOfService qos = 6;
    if (has_qos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbTcapTransactionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbTcapTransactionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbTcapTransactionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbTcapTransactionData::MergeFrom(const pbTcapTransactionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ltid()) {
      set_ltid(from.ltid());
    }
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
    if (from.has_oaddr()) {
      mutable_oaddr()->::pbSCCP_ADDR::MergeFrom(from.oaddr());
    }
    if (from.has_daddr()) {
      mutable_daddr()->::pbSCCP_ADDR::MergeFrom(from.daddr());
    }
    if (from.has_label()) {
      mutable_label()->::pbMtp3_Header::MergeFrom(from.label());
    }
    if (from.has_qos()) {
      mutable_qos()->::QualityOfService::MergeFrom(from.qos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbTcapTransactionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTcapTransactionData::CopyFrom(const pbTcapTransactionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTcapTransactionData::IsInitialized() const {
  
  return true;
}

void pbTcapTransactionData::Swap(pbTcapTransactionData* other) {
  if (other != this) {
    std::swap(ltid_, other->ltid_);
    std::swap(rtid_, other->rtid_);
    std::swap(oaddr_, other->oaddr_);
    std::swap(daddr_, other->daddr_);
    std::swap(label_, other->label_);
    std::swap(qos_, other->qos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbTcapTransactionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbTcapTransactionData_descriptor_;
  metadata.reflection = pbTcapTransactionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbDiameterSessionData::kPeerInstFieldNumber;
const int pbDiameterSessionData::kTimeoutFieldNumber;
const int pbDiameterSessionData::kLifetimeFieldNumber;
const int pbDiameterSessionData::kGracePeriodFieldNumber;
#endif  // !_MSC_VER

pbDiameterSessionData::pbDiameterSessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbDiameterSessionData::InitAsDefaultInstance() {
}

pbDiameterSessionData::pbDiameterSessionData(const pbDiameterSessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbDiameterSessionData::SharedCtor() {
  _cached_size_ = 0;
  peerinst_ = 0u;
  timeout_ = 0u;
  lifetime_ = 0u;
  graceperiod_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbDiameterSessionData::~pbDiameterSessionData() {
  SharedDtor();
}

void pbDiameterSessionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbDiameterSessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbDiameterSessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbDiameterSessionData_descriptor_;
}

const pbDiameterSessionData& pbDiameterSessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbDiameterSessionData* pbDiameterSessionData::default_instance_ = NULL;

pbDiameterSessionData* pbDiameterSessionData::New() const {
  return new pbDiameterSessionData;
}

void pbDiameterSessionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peerinst_ = 0u;
    timeout_ = 0u;
    lifetime_ = 0u;
    graceperiod_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbDiameterSessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 peerInst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerinst_)));
          set_has_peerinst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }
      
      // optional uint32 timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lifetime;
        break;
      }
      
      // optional uint32 lifetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gracePeriod;
        break;
      }
      
      // optional uint32 gracePeriod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gracePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &graceperiod_)));
          set_has_graceperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbDiameterSessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 peerInst = 1;
  if (has_peerinst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->peerinst(), output);
  }
  
  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }
  
  // optional uint32 lifetime = 3;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lifetime(), output);
  }
  
  // optional uint32 gracePeriod = 4;
  if (has_graceperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->graceperiod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbDiameterSessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 peerInst = 1;
  if (has_peerinst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->peerinst(), target);
  }
  
  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }
  
  // optional uint32 lifetime = 3;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lifetime(), target);
  }
  
  // optional uint32 gracePeriod = 4;
  if (has_graceperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->graceperiod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbDiameterSessionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 peerInst = 1;
    if (has_peerinst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peerinst());
    }
    
    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }
    
    // optional uint32 lifetime = 3;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime());
    }
    
    // optional uint32 gracePeriod = 4;
    if (has_graceperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->graceperiod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbDiameterSessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbDiameterSessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbDiameterSessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbDiameterSessionData::MergeFrom(const pbDiameterSessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peerinst()) {
      set_peerinst(from.peerinst());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
    if (from.has_graceperiod()) {
      set_graceperiod(from.graceperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbDiameterSessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbDiameterSessionData::CopyFrom(const pbDiameterSessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbDiameterSessionData::IsInitialized() const {
  
  return true;
}

void pbDiameterSessionData::Swap(pbDiameterSessionData* other) {
  if (other != this) {
    std::swap(peerinst_, other->peerinst_);
    std::swap(timeout_, other->timeout_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(graceperiod_, other->graceperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbDiameterSessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbDiameterSessionData_descriptor_;
  metadata.reflection = pbDiameterSessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbIwfFsmInfo::kCurrentFieldNumber;
const int pbIwfFsmInfo::kPrevStateFieldNumber;
const int pbIwfFsmInfo::kUpstrmReqProtocolFieldNumber;
const int pbIwfFsmInfo::kDnstrmReqProtocolFieldNumber;
const int pbIwfFsmInfo::kDiasessionIdxFieldNumber;
const int pbIwfFsmInfo::kDiaSessionIdFieldNumber;
const int pbIwfFsmInfo::kTcapDialogueIdFieldNumber;
const int pbIwfFsmInfo::kCurrRcvdDiaMsgFieldNumber;
const int pbIwfFsmInfo::kCurrRcvdTcapDlgFieldNumber;
const int pbIwfFsmInfo::kCurrRcvdTcapCptFieldNumber;
const int pbIwfFsmInfo::kCurrTcapBeginDlgFieldNumber;
const int pbIwfFsmInfo::kIsCurrSendErrFieldNumber;
const int pbIwfFsmInfo::kUserDataFieldNumber;
const int pbIwfFsmInfo::kErrCodeFieldNumber;
const int pbIwfFsmInfo::kUsernameFieldNumber;
const int pbIwfFsmInfo::kSccpParamsFieldNumber;
const int pbIwfFsmInfo::kSgsnAddressFieldNumber;
const int pbIwfFsmInfo::kIsDiaRespSentFieldNumber;
const int pbIwfFsmInfo::kIsrouteByGTFieldNumber;
const int pbIwfFsmInfo::kTranslatorFieldNumber;
const int pbIwfFsmInfo::kRoutingLabelFieldNumber;
const int pbIwfFsmInfo::kInvokeIdFieldNumber;
const int pbIwfFsmInfo::kSelfSccpAddrFieldNumber;
const int pbIwfFsmInfo::kIsTcapEndFieldNumber;
const int pbIwfFsmInfo::kStartNoEventTimerFieldNumber;
const int pbIwfFsmInfo::kIsFinalUpstrmReqSentFieldNumber;
const int pbIwfFsmInfo::kMarkForRollbackFieldNumber;
const int pbIwfFsmInfo::kFlowFailureFieldNumber;
const int pbIwfFsmInfo::kIsCloseStateFieldNumber;
const int pbIwfFsmInfo::kTimerInfoFieldNumber;
const int pbIwfFsmInfo::kTcapInfoFieldNumber;
const int pbIwfFsmInfo::kDiameterInfoFieldNumber;
const int pbIwfFsmInfo::kFreeListKeyFieldNumber;
const int pbIwfFsmInfo::kActionRuleNameFieldNumber;
const int pbIwfFsmInfo::kCallingSccpAddrFieldNumber;
const int pbIwfFsmInfo::kLastSentTcapCptopcodeFieldNumber;
const int pbIwfFsmInfo::kIsCCFHActionTakenFieldNumber;
const int pbIwfFsmInfo::kDontTriggerFollowOnSessionforCCAUErrorFieldNumber;
#endif  // !_MSC_VER

pbIwfFsmInfo::pbIwfFsmInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbIwfFsmInfo::InitAsDefaultInstance() {
  current_ = const_cast< ::pbState*>(&::pbState::default_instance());
  prevstate_ = const_cast< ::pbState*>(&::pbState::default_instance());
  currrcvddiamsg_ = const_cast< ::pbDiaMsg*>(&::pbDiaMsg::default_instance());
  currrcvdtcapdlg_ = const_cast< ::pbTcapDialogue*>(&::pbTcapDialogue::default_instance());
  currrcvdtcapcpt_ = const_cast< ::pbTcapComponent*>(&::pbTcapComponent::default_instance());
  currtcapbegindlg_ = const_cast< ::pbTcapBeginDialogue*>(&::pbTcapBeginDialogue::default_instance());
  userdata_ = const_cast< ::pbStoredUserData*>(&::pbStoredUserData::default_instance());
  sccpparams_ = const_cast< ::pbSCCPParameters*>(&::pbSCCPParameters::default_instance());
  translator_ = const_cast< ::pbIwfTranslator*>(&::pbIwfTranslator::default_instance());
  routinglabel_ = const_cast< ::pbRoutingLabel*>(&::pbRoutingLabel::default_instance());
  selfsccpaddr_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
  tcapinfo_ = const_cast< ::pbTcapTransactionData*>(&::pbTcapTransactionData::default_instance());
  diameterinfo_ = const_cast< ::pbDiameterSessionData*>(&::pbDiameterSessionData::default_instance());
  callingsccpaddr_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
}

pbIwfFsmInfo::pbIwfFsmInfo(const pbIwfFsmInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbIwfFsmInfo::SharedCtor() {
  _cached_size_ = 0;
  current_ = NULL;
  prevstate_ = NULL;
  upstrmreqprotocol_ = 0;
  dnstrmreqprotocol_ = 2;
  diasessionidx_ = 0u;
  diasessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcapdialogueid_ = 0u;
  currrcvddiamsg_ = NULL;
  currrcvdtcapdlg_ = NULL;
  currrcvdtcapcpt_ = NULL;
  currtcapbegindlg_ = NULL;
  iscurrsenderr_ = false;
  userdata_ = NULL;
  errcode_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sccpparams_ = NULL;
  sgsnaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdiarespsent_ = false;
  isroutebygt_ = false;
  translator_ = NULL;
  routinglabel_ = NULL;
  invokeid_ = 0u;
  selfsccpaddr_ = NULL;
  istcapend_ = false;
  startnoeventtimer_ = false;
  isfinalupstrmreqsent_ = false;
  markforrollback_ = false;
  flowfailure_ = false;
  isclosestate_ = false;
  tcapinfo_ = NULL;
  diameterinfo_ = NULL;
  freelistkey_ = 0u;
  actionrulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  callingsccpaddr_ = NULL;
  lastsenttcapcptopcode_ = 0u;
  isccfhactiontaken_ = false;
  donttriggerfollowonsessionforccauerror_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbIwfFsmInfo::~pbIwfFsmInfo() {
  SharedDtor();
}

void pbIwfFsmInfo::SharedDtor() {
  if (diasessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete diasessionid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (sgsnaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete sgsnaddress_;
  }
  if (actionrulename_ != &::google::protobuf::internal::kEmptyString) {
    delete actionrulename_;
  }
  if (this != default_instance_) {
    delete current_;
    delete prevstate_;
    delete currrcvddiamsg_;
    delete currrcvdtcapdlg_;
    delete currrcvdtcapcpt_;
    delete currtcapbegindlg_;
    delete userdata_;
    delete sccpparams_;
    delete translator_;
    delete routinglabel_;
    delete selfsccpaddr_;
    delete tcapinfo_;
    delete diameterinfo_;
    delete callingsccpaddr_;
  }
}

void pbIwfFsmInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbIwfFsmInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfFsmInfo_descriptor_;
}

const pbIwfFsmInfo& pbIwfFsmInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbIwfFsmInfo* pbIwfFsmInfo::default_instance_ = NULL;

pbIwfFsmInfo* pbIwfFsmInfo::New() const {
  return new pbIwfFsmInfo;
}

void pbIwfFsmInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_current()) {
      if (current_ != NULL) current_->::pbState::Clear();
    }
    if (has_prevstate()) {
      if (prevstate_ != NULL) prevstate_->::pbState::Clear();
    }
    upstrmreqprotocol_ = 0;
    dnstrmreqprotocol_ = 2;
    diasessionidx_ = 0u;
    if (has_diasessionid()) {
      if (diasessionid_ != &::google::protobuf::internal::kEmptyString) {
        diasessionid_->clear();
      }
    }
    tcapdialogueid_ = 0u;
    if (has_currrcvddiamsg()) {
      if (currrcvddiamsg_ != NULL) currrcvddiamsg_->::pbDiaMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_currrcvdtcapdlg()) {
      if (currrcvdtcapdlg_ != NULL) currrcvdtcapdlg_->::pbTcapDialogue::Clear();
    }
    if (has_currrcvdtcapcpt()) {
      if (currrcvdtcapcpt_ != NULL) currrcvdtcapcpt_->::pbTcapComponent::Clear();
    }
    if (has_currtcapbegindlg()) {
      if (currtcapbegindlg_ != NULL) currtcapbegindlg_->::pbTcapBeginDialogue::Clear();
    }
    iscurrsenderr_ = false;
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pbStoredUserData::Clear();
    }
    errcode_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_sccpparams()) {
      if (sccpparams_ != NULL) sccpparams_->::pbSCCPParameters::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sgsnaddress()) {
      if (sgsnaddress_ != &::google::protobuf::internal::kEmptyString) {
        sgsnaddress_->clear();
      }
    }
    isdiarespsent_ = false;
    isroutebygt_ = false;
    if (has_translator()) {
      if (translator_ != NULL) translator_->::pbIwfTranslator::Clear();
    }
    if (has_routinglabel()) {
      if (routinglabel_ != NULL) routinglabel_->::pbRoutingLabel::Clear();
    }
    invokeid_ = 0u;
    if (has_selfsccpaddr()) {
      if (selfsccpaddr_ != NULL) selfsccpaddr_->::pbSccpAddress::Clear();
    }
    istcapend_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    startnoeventtimer_ = false;
    isfinalupstrmreqsent_ = false;
    markforrollback_ = false;
    flowfailure_ = false;
    isclosestate_ = false;
    if (has_tcapinfo()) {
      if (tcapinfo_ != NULL) tcapinfo_->::pbTcapTransactionData::Clear();
    }
    if (has_diameterinfo()) {
      if (diameterinfo_ != NULL) diameterinfo_->::pbDiameterSessionData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    freelistkey_ = 0u;
    if (has_actionrulename()) {
      if (actionrulename_ != &::google::protobuf::internal::kEmptyString) {
        actionrulename_->clear();
      }
    }
    if (has_callingsccpaddr()) {
      if (callingsccpaddr_ != NULL) callingsccpaddr_->::pbSccpAddress::Clear();
    }
    lastsenttcapcptopcode_ = 0u;
    isccfhactiontaken_ = false;
    donttriggerfollowonsessionforccauerror_ = false;
  }
  timerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbIwfFsmInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pbState current = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prevState;
        break;
      }
      
      // required .pbState prevState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prevState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prevstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UpstrmReqProtocol;
        break;
      }
      
      // optional .pbProtocol UpstrmReqProtocol = 3 [default = DIAMETER_S6A];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpstrmReqProtocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (pbProtocol_IsValid(value)) {
            set_upstrmreqprotocol(static_cast< pbProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DnstrmReqProtocol;
        break;
      }
      
      // optional .pbProtocol DnstrmReqProtocol = 4 [default = MAP_GR];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DnstrmReqProtocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (pbProtocol_IsValid(value)) {
            set_dnstrmreqprotocol(static_cast< pbProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diasessionIdx;
        break;
      }
      
      // optional uint32 diasessionIdx = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diasessionIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diasessionidx_)));
          set_has_diasessionidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_diaSessionId;
        break;
      }
      
      // required string diaSessionId = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diaSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diasessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diasessionid().data(), this->diasessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tcapDialogueId;
        break;
      }
      
      // required uint32 tcapDialogueId = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tcapDialogueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcapdialogueid_)));
          set_has_tcapdialogueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_currRcvdDiaMsg;
        break;
      }
      
      // optional .pbDiaMsg currRcvdDiaMsg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currRcvdDiaMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currrcvddiamsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_currRcvdTcapDlg;
        break;
      }
      
      // optional .pbTcapDialogue currRcvdTcapDlg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currRcvdTcapDlg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currrcvdtcapdlg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_currRcvdTcapCpt;
        break;
      }
      
      // optional .pbTcapComponent currRcvdTcapCpt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currRcvdTcapCpt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currrcvdtcapcpt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_currTcapBeginDlg;
        break;
      }
      
      // optional .pbTcapBeginDialogue currTcapBeginDlg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currTcapBeginDlg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currtcapbegindlg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isCurrSendErr;
        break;
      }
      
      // optional bool isCurrSendErr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCurrSendErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurrsenderr_)));
          set_has_iscurrsenderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_userData;
        break;
      }
      
      // optional .pbStoredUserData userData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errCode;
        break;
      }
      
      // optional int32 errCode = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_username;
        break;
      }
      
      // optional string username = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sccpParams;
        break;
      }
      
      // optional .pbSCCPParameters sccpParams = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sccpParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sccpparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_sgsnAddress;
        break;
      }
      
      // optional string sgsnAddress = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sgsnAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgsnaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sgsnaddress().data(), this->sgsnaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_IsDiaRespSent;
        break;
      }
      
      // optional bool IsDiaRespSent = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDiaRespSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdiarespsent_)));
          set_has_isdiarespsent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isrouteByGT;
        break;
      }
      
      // optional bool isrouteByGT = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrouteByGT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isroutebygt_)));
          set_has_isroutebygt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_translator;
        break;
      }
      
      // optional .pbIwfTranslator translator = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_routingLabel;
        break;
      }
      
      // optional .pbRoutingLabel routingLabel = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routingLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_routinglabel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_invokeId;
        break;
      }
      
      // optional uint32 invokeId = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invokeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invokeid_)));
          set_has_invokeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_selfSccpAddr;
        break;
      }
      
      // optional .pbSccpAddress selfSccpAddr = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfSccpAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfsccpaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isTcapEnd;
        break;
      }
      
      // optional bool isTcapEnd = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTcapEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istcapend_)));
          set_has_istcapend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_startNoEventTimer;
        break;
      }
      
      // optional bool startNoEventTimer = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startNoEventTimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startnoeventtimer_)));
          set_has_startnoeventtimer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_isFinalUpstrmReqSent;
        break;
      }
      
      // optional bool isFinalUpstrmReqSent = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinalUpstrmReqSent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinalupstrmreqsent_)));
          set_has_isfinalupstrmreqsent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_markForRollback;
        break;
      }
      
      // optional bool markForRollback = 27 [default = false];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_markForRollback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &markforrollback_)));
          set_has_markforrollback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_flowFailure;
        break;
      }
      
      // optional bool flowFailure = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flowFailure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flowfailure_)));
          set_has_flowfailure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_isCloseState;
        break;
      }
      
      // optional bool isCloseState = 29 [default = false];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCloseState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclosestate_)));
          set_has_isclosestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_timerInfo;
        break;
      }
      
      // repeated .pbIwfTimerData timerInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_timerInfo;
        if (input->ExpectTag(250)) goto parse_tcapInfo;
        break;
      }
      
      // optional .pbTcapTransactionData tcapInfo = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcapinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_diameterInfo;
        break;
      }
      
      // optional .pbDiameterSessionData diameterInfo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diameterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diameterinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_freeListKey;
        break;
      }
      
      // optional fixed32 freeListKey = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freeListKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &freelistkey_)));
          set_has_freelistkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_actionRuleName;
        break;
      }
      
      // optional string actionRuleName = 34 [default = ""];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionRuleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionrulename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actionrulename().data(), this->actionrulename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_callingSccpAddr;
        break;
      }
      
      // optional .pbSccpAddress callingSccpAddr = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_callingSccpAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callingsccpaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_lastSentTcapCptopcode;
        break;
      }
      
      // optional fixed32 lastSentTcapCptopcode = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastSentTcapCptopcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &lastsenttcapcptopcode_)));
          set_has_lastsenttcapcptopcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_isCCFHActionTaken;
        break;
      }
      
      // optional bool isCCFHActionTaken = 37 [default = false];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCCFHActionTaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isccfhactiontaken_)));
          set_has_isccfhactiontaken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_dontTriggerFollowOnSessionforCCAUError;
        break;
      }
      
      // optional bool dontTriggerFollowOnSessionforCCAUError = 38 [default = false];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dontTriggerFollowOnSessionforCCAUError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &donttriggerfollowonsessionforccauerror_)));
          set_has_donttriggerfollowonsessionforccauerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbIwfFsmInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pbState current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current(), output);
  }
  
  // required .pbState prevState = 2;
  if (has_prevstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prevstate(), output);
  }
  
  // optional .pbProtocol UpstrmReqProtocol = 3 [default = DIAMETER_S6A];
  if (has_upstrmreqprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->upstrmreqprotocol(), output);
  }
  
  // optional .pbProtocol DnstrmReqProtocol = 4 [default = MAP_GR];
  if (has_dnstrmreqprotocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dnstrmreqprotocol(), output);
  }
  
  // optional uint32 diasessionIdx = 5 [default = 0];
  if (has_diasessionidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diasessionidx(), output);
  }
  
  // required string diaSessionId = 6 [default = ""];
  if (has_diasessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diasessionid().data(), this->diasessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->diasessionid(), output);
  }
  
  // required uint32 tcapDialogueId = 7 [default = 0];
  if (has_tcapdialogueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tcapdialogueid(), output);
  }
  
  // optional .pbDiaMsg currRcvdDiaMsg = 8;
  if (has_currrcvddiamsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->currrcvddiamsg(), output);
  }
  
  // optional .pbTcapDialogue currRcvdTcapDlg = 9;
  if (has_currrcvdtcapdlg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->currrcvdtcapdlg(), output);
  }
  
  // optional .pbTcapComponent currRcvdTcapCpt = 10;
  if (has_currrcvdtcapcpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->currrcvdtcapcpt(), output);
  }
  
  // optional .pbTcapBeginDialogue currTcapBeginDlg = 11;
  if (has_currtcapbegindlg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->currtcapbegindlg(), output);
  }
  
  // optional bool isCurrSendErr = 12;
  if (has_iscurrsenderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->iscurrsenderr(), output);
  }
  
  // optional .pbStoredUserData userData = 13;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->userdata(), output);
  }
  
  // optional int32 errCode = 14 [default = 0];
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errcode(), output);
  }
  
  // optional string username = 15;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->username(), output);
  }
  
  // optional .pbSCCPParameters sccpParams = 16;
  if (has_sccpparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sccpparams(), output);
  }
  
  // optional string sgsnAddress = 17;
  if (has_sgsnaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sgsnaddress().data(), this->sgsnaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->sgsnaddress(), output);
  }
  
  // optional bool IsDiaRespSent = 18;
  if (has_isdiarespsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isdiarespsent(), output);
  }
  
  // optional bool isrouteByGT = 19 [default = false];
  if (has_isroutebygt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isroutebygt(), output);
  }
  
  // optional .pbIwfTranslator translator = 20;
  if (has_translator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->translator(), output);
  }
  
  // optional .pbRoutingLabel routingLabel = 21;
  if (has_routinglabel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->routinglabel(), output);
  }
  
  // optional uint32 invokeId = 22 [default = 0];
  if (has_invokeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->invokeid(), output);
  }
  
  // optional .pbSccpAddress selfSccpAddr = 23;
  if (has_selfsccpaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->selfsccpaddr(), output);
  }
  
  // optional bool isTcapEnd = 24 [default = false];
  if (has_istcapend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->istcapend(), output);
  }
  
  // optional bool startNoEventTimer = 25 [default = false];
  if (has_startnoeventtimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->startnoeventtimer(), output);
  }
  
  // optional bool isFinalUpstrmReqSent = 26;
  if (has_isfinalupstrmreqsent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->isfinalupstrmreqsent(), output);
  }
  
  // optional bool markForRollback = 27 [default = false];
  if (has_markforrollback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->markforrollback(), output);
  }
  
  // optional bool flowFailure = 28 [default = false];
  if (has_flowfailure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->flowfailure(), output);
  }
  
  // optional bool isCloseState = 29 [default = false];
  if (has_isclosestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->isclosestate(), output);
  }
  
  // repeated .pbIwfTimerData timerInfo = 30;
  for (int i = 0; i < this->timerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->timerinfo(i), output);
  }
  
  // optional .pbTcapTransactionData tcapInfo = 31;
  if (has_tcapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->tcapinfo(), output);
  }
  
  // optional .pbDiameterSessionData diameterInfo = 32;
  if (has_diameterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->diameterinfo(), output);
  }
  
  // optional fixed32 freeListKey = 33;
  if (has_freelistkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(33, this->freelistkey(), output);
  }
  
  // optional string actionRuleName = 34 [default = ""];
  if (has_actionrulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionrulename().data(), this->actionrulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->actionrulename(), output);
  }
  
  // optional .pbSccpAddress callingSccpAddr = 35;
  if (has_callingsccpaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->callingsccpaddr(), output);
  }
  
  // optional fixed32 lastSentTcapCptopcode = 36;
  if (has_lastsenttcapcptopcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(36, this->lastsenttcapcptopcode(), output);
  }
  
  // optional bool isCCFHActionTaken = 37 [default = false];
  if (has_isccfhactiontaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->isccfhactiontaken(), output);
  }
  
  // optional bool dontTriggerFollowOnSessionforCCAUError = 38 [default = false];
  if (has_donttriggerfollowonsessionforccauerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->donttriggerfollowonsessionforccauerror(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbIwfFsmInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .pbState current = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->current(), target);
  }
  
  // required .pbState prevState = 2;
  if (has_prevstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prevstate(), target);
  }
  
  // optional .pbProtocol UpstrmReqProtocol = 3 [default = DIAMETER_S6A];
  if (has_upstrmreqprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->upstrmreqprotocol(), target);
  }
  
  // optional .pbProtocol DnstrmReqProtocol = 4 [default = MAP_GR];
  if (has_dnstrmreqprotocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dnstrmreqprotocol(), target);
  }
  
  // optional uint32 diasessionIdx = 5 [default = 0];
  if (has_diasessionidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diasessionidx(), target);
  }
  
  // required string diaSessionId = 6 [default = ""];
  if (has_diasessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diasessionid().data(), this->diasessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->diasessionid(), target);
  }
  
  // required uint32 tcapDialogueId = 7 [default = 0];
  if (has_tcapdialogueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tcapdialogueid(), target);
  }
  
  // optional .pbDiaMsg currRcvdDiaMsg = 8;
  if (has_currrcvddiamsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->currrcvddiamsg(), target);
  }
  
  // optional .pbTcapDialogue currRcvdTcapDlg = 9;
  if (has_currrcvdtcapdlg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->currrcvdtcapdlg(), target);
  }
  
  // optional .pbTcapComponent currRcvdTcapCpt = 10;
  if (has_currrcvdtcapcpt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->currrcvdtcapcpt(), target);
  }
  
  // optional .pbTcapBeginDialogue currTcapBeginDlg = 11;
  if (has_currtcapbegindlg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->currtcapbegindlg(), target);
  }
  
  // optional bool isCurrSendErr = 12;
  if (has_iscurrsenderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->iscurrsenderr(), target);
  }
  
  // optional .pbStoredUserData userData = 13;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->userdata(), target);
  }
  
  // optional int32 errCode = 14 [default = 0];
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errcode(), target);
  }
  
  // optional string username = 15;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->username(), target);
  }
  
  // optional .pbSCCPParameters sccpParams = 16;
  if (has_sccpparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sccpparams(), target);
  }
  
  // optional string sgsnAddress = 17;
  if (has_sgsnaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sgsnaddress().data(), this->sgsnaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->sgsnaddress(), target);
  }
  
  // optional bool IsDiaRespSent = 18;
  if (has_isdiarespsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isdiarespsent(), target);
  }
  
  // optional bool isrouteByGT = 19 [default = false];
  if (has_isroutebygt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isroutebygt(), target);
  }
  
  // optional .pbIwfTranslator translator = 20;
  if (has_translator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->translator(), target);
  }
  
  // optional .pbRoutingLabel routingLabel = 21;
  if (has_routinglabel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->routinglabel(), target);
  }
  
  // optional uint32 invokeId = 22 [default = 0];
  if (has_invokeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->invokeid(), target);
  }
  
  // optional .pbSccpAddress selfSccpAddr = 23;
  if (has_selfsccpaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->selfsccpaddr(), target);
  }
  
  // optional bool isTcapEnd = 24 [default = false];
  if (has_istcapend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->istcapend(), target);
  }
  
  // optional bool startNoEventTimer = 25 [default = false];
  if (has_startnoeventtimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->startnoeventtimer(), target);
  }
  
  // optional bool isFinalUpstrmReqSent = 26;
  if (has_isfinalupstrmreqsent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->isfinalupstrmreqsent(), target);
  }
  
  // optional bool markForRollback = 27 [default = false];
  if (has_markforrollback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->markforrollback(), target);
  }
  
  // optional bool flowFailure = 28 [default = false];
  if (has_flowfailure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->flowfailure(), target);
  }
  
  // optional bool isCloseState = 29 [default = false];
  if (has_isclosestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->isclosestate(), target);
  }
  
  // repeated .pbIwfTimerData timerInfo = 30;
  for (int i = 0; i < this->timerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->timerinfo(i), target);
  }
  
  // optional .pbTcapTransactionData tcapInfo = 31;
  if (has_tcapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->tcapinfo(), target);
  }
  
  // optional .pbDiameterSessionData diameterInfo = 32;
  if (has_diameterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->diameterinfo(), target);
  }
  
  // optional fixed32 freeListKey = 33;
  if (has_freelistkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(33, this->freelistkey(), target);
  }
  
  // optional string actionRuleName = 34 [default = ""];
  if (has_actionrulename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionrulename().data(), this->actionrulename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->actionrulename(), target);
  }
  
  // optional .pbSccpAddress callingSccpAddr = 35;
  if (has_callingsccpaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->callingsccpaddr(), target);
  }
  
  // optional fixed32 lastSentTcapCptopcode = 36;
  if (has_lastsenttcapcptopcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(36, this->lastsenttcapcptopcode(), target);
  }
  
  // optional bool isCCFHActionTaken = 37 [default = false];
  if (has_isccfhactiontaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->isccfhactiontaken(), target);
  }
  
  // optional bool dontTriggerFollowOnSessionforCCAUError = 38 [default = false];
  if (has_donttriggerfollowonsessionforccauerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->donttriggerfollowonsessionforccauerror(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbIwfFsmInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pbState current = 1;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current());
    }
    
    // required .pbState prevState = 2;
    if (has_prevstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prevstate());
    }
    
    // optional .pbProtocol UpstrmReqProtocol = 3 [default = DIAMETER_S6A];
    if (has_upstrmreqprotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->upstrmreqprotocol());
    }
    
    // optional .pbProtocol DnstrmReqProtocol = 4 [default = MAP_GR];
    if (has_dnstrmreqprotocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dnstrmreqprotocol());
    }
    
    // optional uint32 diasessionIdx = 5 [default = 0];
    if (has_diasessionidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diasessionidx());
    }
    
    // required string diaSessionId = 6 [default = ""];
    if (has_diasessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diasessionid());
    }
    
    // required uint32 tcapDialogueId = 7 [default = 0];
    if (has_tcapdialogueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcapdialogueid());
    }
    
    // optional .pbDiaMsg currRcvdDiaMsg = 8;
    if (has_currrcvddiamsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currrcvddiamsg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pbTcapDialogue currRcvdTcapDlg = 9;
    if (has_currrcvdtcapdlg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currrcvdtcapdlg());
    }
    
    // optional .pbTcapComponent currRcvdTcapCpt = 10;
    if (has_currrcvdtcapcpt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currrcvdtcapcpt());
    }
    
    // optional .pbTcapBeginDialogue currTcapBeginDlg = 11;
    if (has_currtcapbegindlg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currtcapbegindlg());
    }
    
    // optional bool isCurrSendErr = 12;
    if (has_iscurrsenderr()) {
      total_size += 1 + 1;
    }
    
    // optional .pbStoredUserData userData = 13;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }
    
    // optional int32 errCode = 14 [default = 0];
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // optional string username = 15;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional .pbSCCPParameters sccpParams = 16;
    if (has_sccpparams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sccpparams());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string sgsnAddress = 17;
    if (has_sgsnaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sgsnaddress());
    }
    
    // optional bool IsDiaRespSent = 18;
    if (has_isdiarespsent()) {
      total_size += 2 + 1;
    }
    
    // optional bool isrouteByGT = 19 [default = false];
    if (has_isroutebygt()) {
      total_size += 2 + 1;
    }
    
    // optional .pbIwfTranslator translator = 20;
    if (has_translator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translator());
    }
    
    // optional .pbRoutingLabel routingLabel = 21;
    if (has_routinglabel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->routinglabel());
    }
    
    // optional uint32 invokeId = 22 [default = 0];
    if (has_invokeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invokeid());
    }
    
    // optional .pbSccpAddress selfSccpAddr = 23;
    if (has_selfsccpaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfsccpaddr());
    }
    
    // optional bool isTcapEnd = 24 [default = false];
    if (has_istcapend()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool startNoEventTimer = 25 [default = false];
    if (has_startnoeventtimer()) {
      total_size += 2 + 1;
    }
    
    // optional bool isFinalUpstrmReqSent = 26;
    if (has_isfinalupstrmreqsent()) {
      total_size += 2 + 1;
    }
    
    // optional bool markForRollback = 27 [default = false];
    if (has_markforrollback()) {
      total_size += 2 + 1;
    }
    
    // optional bool flowFailure = 28 [default = false];
    if (has_flowfailure()) {
      total_size += 2 + 1;
    }
    
    // optional bool isCloseState = 29 [default = false];
    if (has_isclosestate()) {
      total_size += 2 + 1;
    }
    
    // optional .pbTcapTransactionData tcapInfo = 31;
    if (has_tcapinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tcapinfo());
    }
    
    // optional .pbDiameterSessionData diameterInfo = 32;
    if (has_diameterinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diameterinfo());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional fixed32 freeListKey = 33;
    if (has_freelistkey()) {
      total_size += 2 + 4;
    }
    
    // optional string actionRuleName = 34 [default = ""];
    if (has_actionrulename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionrulename());
    }
    
    // optional .pbSccpAddress callingSccpAddr = 35;
    if (has_callingsccpaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callingsccpaddr());
    }
    
    // optional fixed32 lastSentTcapCptopcode = 36;
    if (has_lastsenttcapcptopcode()) {
      total_size += 2 + 4;
    }
    
    // optional bool isCCFHActionTaken = 37 [default = false];
    if (has_isccfhactiontaken()) {
      total_size += 2 + 1;
    }
    
    // optional bool dontTriggerFollowOnSessionforCCAUError = 38 [default = false];
    if (has_donttriggerfollowonsessionforccauerror()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .pbIwfTimerData timerInfo = 30;
  total_size += 2 * this->timerinfo_size();
  for (int i = 0; i < this->timerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timerinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbIwfFsmInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbIwfFsmInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbIwfFsmInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbIwfFsmInfo::MergeFrom(const pbIwfFsmInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  timerinfo_.MergeFrom(from.timerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      mutable_current()->::pbState::MergeFrom(from.current());
    }
    if (from.has_prevstate()) {
      mutable_prevstate()->::pbState::MergeFrom(from.prevstate());
    }
    if (from.has_upstrmreqprotocol()) {
      set_upstrmreqprotocol(from.upstrmreqprotocol());
    }
    if (from.has_dnstrmreqprotocol()) {
      set_dnstrmreqprotocol(from.dnstrmreqprotocol());
    }
    if (from.has_diasessionidx()) {
      set_diasessionidx(from.diasessionidx());
    }
    if (from.has_diasessionid()) {
      set_diasessionid(from.diasessionid());
    }
    if (from.has_tcapdialogueid()) {
      set_tcapdialogueid(from.tcapdialogueid());
    }
    if (from.has_currrcvddiamsg()) {
      mutable_currrcvddiamsg()->::pbDiaMsg::MergeFrom(from.currrcvddiamsg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currrcvdtcapdlg()) {
      mutable_currrcvdtcapdlg()->::pbTcapDialogue::MergeFrom(from.currrcvdtcapdlg());
    }
    if (from.has_currrcvdtcapcpt()) {
      mutable_currrcvdtcapcpt()->::pbTcapComponent::MergeFrom(from.currrcvdtcapcpt());
    }
    if (from.has_currtcapbegindlg()) {
      mutable_currtcapbegindlg()->::pbTcapBeginDialogue::MergeFrom(from.currtcapbegindlg());
    }
    if (from.has_iscurrsenderr()) {
      set_iscurrsenderr(from.iscurrsenderr());
    }
    if (from.has_userdata()) {
      mutable_userdata()->::pbStoredUserData::MergeFrom(from.userdata());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_sccpparams()) {
      mutable_sccpparams()->::pbSCCPParameters::MergeFrom(from.sccpparams());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sgsnaddress()) {
      set_sgsnaddress(from.sgsnaddress());
    }
    if (from.has_isdiarespsent()) {
      set_isdiarespsent(from.isdiarespsent());
    }
    if (from.has_isroutebygt()) {
      set_isroutebygt(from.isroutebygt());
    }
    if (from.has_translator()) {
      mutable_translator()->::pbIwfTranslator::MergeFrom(from.translator());
    }
    if (from.has_routinglabel()) {
      mutable_routinglabel()->::pbRoutingLabel::MergeFrom(from.routinglabel());
    }
    if (from.has_invokeid()) {
      set_invokeid(from.invokeid());
    }
    if (from.has_selfsccpaddr()) {
      mutable_selfsccpaddr()->::pbSccpAddress::MergeFrom(from.selfsccpaddr());
    }
    if (from.has_istcapend()) {
      set_istcapend(from.istcapend());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_startnoeventtimer()) {
      set_startnoeventtimer(from.startnoeventtimer());
    }
    if (from.has_isfinalupstrmreqsent()) {
      set_isfinalupstrmreqsent(from.isfinalupstrmreqsent());
    }
    if (from.has_markforrollback()) {
      set_markforrollback(from.markforrollback());
    }
    if (from.has_flowfailure()) {
      set_flowfailure(from.flowfailure());
    }
    if (from.has_isclosestate()) {
      set_isclosestate(from.isclosestate());
    }
    if (from.has_tcapinfo()) {
      mutable_tcapinfo()->::pbTcapTransactionData::MergeFrom(from.tcapinfo());
    }
    if (from.has_diameterinfo()) {
      mutable_diameterinfo()->::pbDiameterSessionData::MergeFrom(from.diameterinfo());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_freelistkey()) {
      set_freelistkey(from.freelistkey());
    }
    if (from.has_actionrulename()) {
      set_actionrulename(from.actionrulename());
    }
    if (from.has_callingsccpaddr()) {
      mutable_callingsccpaddr()->::pbSccpAddress::MergeFrom(from.callingsccpaddr());
    }
    if (from.has_lastsenttcapcptopcode()) {
      set_lastsenttcapcptopcode(from.lastsenttcapcptopcode());
    }
    if (from.has_isccfhactiontaken()) {
      set_isccfhactiontaken(from.isccfhactiontaken());
    }
    if (from.has_donttriggerfollowonsessionforccauerror()) {
      set_donttriggerfollowonsessionforccauerror(from.donttriggerfollowonsessionforccauerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbIwfFsmInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbIwfFsmInfo::CopyFrom(const pbIwfFsmInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbIwfFsmInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;
  
  return true;
}

void pbIwfFsmInfo::Swap(pbIwfFsmInfo* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(prevstate_, other->prevstate_);
    std::swap(upstrmreqprotocol_, other->upstrmreqprotocol_);
    std::swap(dnstrmreqprotocol_, other->dnstrmreqprotocol_);
    std::swap(diasessionidx_, other->diasessionidx_);
    std::swap(diasessionid_, other->diasessionid_);
    std::swap(tcapdialogueid_, other->tcapdialogueid_);
    std::swap(currrcvddiamsg_, other->currrcvddiamsg_);
    std::swap(currrcvdtcapdlg_, other->currrcvdtcapdlg_);
    std::swap(currrcvdtcapcpt_, other->currrcvdtcapcpt_);
    std::swap(currtcapbegindlg_, other->currtcapbegindlg_);
    std::swap(iscurrsenderr_, other->iscurrsenderr_);
    std::swap(userdata_, other->userdata_);
    std::swap(errcode_, other->errcode_);
    std::swap(username_, other->username_);
    std::swap(sccpparams_, other->sccpparams_);
    std::swap(sgsnaddress_, other->sgsnaddress_);
    std::swap(isdiarespsent_, other->isdiarespsent_);
    std::swap(isroutebygt_, other->isroutebygt_);
    std::swap(translator_, other->translator_);
    std::swap(routinglabel_, other->routinglabel_);
    std::swap(invokeid_, other->invokeid_);
    std::swap(selfsccpaddr_, other->selfsccpaddr_);
    std::swap(istcapend_, other->istcapend_);
    std::swap(startnoeventtimer_, other->startnoeventtimer_);
    std::swap(isfinalupstrmreqsent_, other->isfinalupstrmreqsent_);
    std::swap(markforrollback_, other->markforrollback_);
    std::swap(flowfailure_, other->flowfailure_);
    std::swap(isclosestate_, other->isclosestate_);
    timerinfo_.Swap(&other->timerinfo_);
    std::swap(tcapinfo_, other->tcapinfo_);
    std::swap(diameterinfo_, other->diameterinfo_);
    std::swap(freelistkey_, other->freelistkey_);
    std::swap(actionrulename_, other->actionrulename_);
    std::swap(callingsccpaddr_, other->callingsccpaddr_);
    std::swap(lastsenttcapcptopcode_, other->lastsenttcapcptopcode_);
    std::swap(isccfhactiontaken_, other->isccfhactiontaken_);
    std::swap(donttriggerfollowonsessionforccauerror_, other->donttriggerfollowonsessionforccauerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbIwfFsmInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbIwfFsmInfo_descriptor_;
  metadata.reflection = pbIwfFsmInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbIwfSessionContextData::kOriginHostFieldNumber;
const int pbIwfSessionContextData::kOriginRealmFieldNumber;
const int pbIwfSessionContextData::kOldHostFieldNumber;
const int pbIwfSessionContextData::kOldRealmFieldNumber;
const int pbIwfSessionContextData::kSccpParametersFieldNumber;
const int pbIwfSessionContextData::kOldcpaituFieldNumber;
const int pbIwfSessionContextData::kOldCallingPartyAddrpresentFieldNumber;
const int pbIwfSessionContextData::kOldopcFieldNumber;
#endif  // !_MSC_VER

pbIwfSessionContextData::pbIwfSessionContextData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbIwfSessionContextData::InitAsDefaultInstance() {
  sccpparameters_ = const_cast< ::pbSCCPParameters*>(&::pbSCCPParameters::default_instance());
  oldcpaitu_ = const_cast< ::pbSccpAddress*>(&::pbSccpAddress::default_instance());
}

pbIwfSessionContextData::pbIwfSessionContextData(const pbIwfSessionContextData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbIwfSessionContextData::SharedCtor() {
  _cached_size_ = 0;
  originhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  originrealm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldrealm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sccpparameters_ = NULL;
  oldcpaitu_ = NULL;
  oldcallingpartyaddrpresent_ = false;
  oldopc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbIwfSessionContextData::~pbIwfSessionContextData() {
  SharedDtor();
}

void pbIwfSessionContextData::SharedDtor() {
  if (originhost_ != &::google::protobuf::internal::kEmptyString) {
    delete originhost_;
  }
  if (originrealm_ != &::google::protobuf::internal::kEmptyString) {
    delete originrealm_;
  }
  if (oldhost_ != &::google::protobuf::internal::kEmptyString) {
    delete oldhost_;
  }
  if (oldrealm_ != &::google::protobuf::internal::kEmptyString) {
    delete oldrealm_;
  }
  if (this != default_instance_) {
    delete sccpparameters_;
    delete oldcpaitu_;
  }
}

void pbIwfSessionContextData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbIwfSessionContextData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbIwfSessionContextData_descriptor_;
}

const pbIwfSessionContextData& pbIwfSessionContextData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_iwf_2eproto();  return *default_instance_;
}

pbIwfSessionContextData* pbIwfSessionContextData::default_instance_ = NULL;

pbIwfSessionContextData* pbIwfSessionContextData::New() const {
  return new pbIwfSessionContextData;
}

void pbIwfSessionContextData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_originhost()) {
      if (originhost_ != &::google::protobuf::internal::kEmptyString) {
        originhost_->clear();
      }
    }
    if (has_originrealm()) {
      if (originrealm_ != &::google::protobuf::internal::kEmptyString) {
        originrealm_->clear();
      }
    }
    if (has_oldhost()) {
      if (oldhost_ != &::google::protobuf::internal::kEmptyString) {
        oldhost_->clear();
      }
    }
    if (has_oldrealm()) {
      if (oldrealm_ != &::google::protobuf::internal::kEmptyString) {
        oldrealm_->clear();
      }
    }
    if (has_sccpparameters()) {
      if (sccpparameters_ != NULL) sccpparameters_->::pbSCCPParameters::Clear();
    }
    if (has_oldcpaitu()) {
      if (oldcpaitu_ != NULL) oldcpaitu_->::pbSccpAddress::Clear();
    }
    oldcallingpartyaddrpresent_ = false;
    oldopc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbIwfSessionContextData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string originHost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originhost().data(), this->originhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originRealm;
        break;
      }
      
      // optional string originRealm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originRealm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originrealm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originrealm().data(), this->originrealm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oldHost;
        break;
      }
      
      // optional string oldHost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldhost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldhost().data(), this->oldhost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oldRealm;
        break;
      }
      
      // optional string oldRealm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldRealm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldrealm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldrealm().data(), this->oldrealm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sccpParameters;
        break;
      }
      
      // optional .pbSCCPParameters sccpParameters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sccpParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sccpparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oldcpaitu;
        break;
      }
      
      // optional .pbSccpAddress oldcpaitu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldcpaitu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldcpaitu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OldCallingPartyAddrpresent;
        break;
      }
      
      // optional bool OldCallingPartyAddrpresent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OldCallingPartyAddrpresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oldcallingpartyaddrpresent_)));
          set_has_oldcallingpartyaddrpresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_oldopc;
        break;
      }
      
      // optional fixed32 oldopc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_oldopc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &oldopc_)));
          set_has_oldopc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbIwfSessionContextData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string originHost = 1;
  if (has_originhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originhost().data(), this->originhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->originhost(), output);
  }
  
  // optional string originRealm = 2;
  if (has_originrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originrealm().data(), this->originrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->originrealm(), output);
  }
  
  // optional string oldHost = 3;
  if (has_oldhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldhost().data(), this->oldhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oldhost(), output);
  }
  
  // optional string oldRealm = 4;
  if (has_oldrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldrealm().data(), this->oldrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->oldrealm(), output);
  }
  
  // optional .pbSCCPParameters sccpParameters = 5;
  if (has_sccpparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sccpparameters(), output);
  }
  
  // optional .pbSccpAddress oldcpaitu = 6;
  if (has_oldcpaitu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->oldcpaitu(), output);
  }
  
  // optional bool OldCallingPartyAddrpresent = 7;
  if (has_oldcallingpartyaddrpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->oldcallingpartyaddrpresent(), output);
  }
  
  // optional fixed32 oldopc = 8;
  if (has_oldopc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->oldopc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbIwfSessionContextData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string originHost = 1;
  if (has_originhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originhost().data(), this->originhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->originhost(), target);
  }
  
  // optional string originRealm = 2;
  if (has_originrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originrealm().data(), this->originrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originrealm(), target);
  }
  
  // optional string oldHost = 3;
  if (has_oldhost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldhost().data(), this->oldhost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->oldhost(), target);
  }
  
  // optional string oldRealm = 4;
  if (has_oldrealm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldrealm().data(), this->oldrealm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldrealm(), target);
  }
  
  // optional .pbSCCPParameters sccpParameters = 5;
  if (has_sccpparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sccpparameters(), target);
  }
  
  // optional .pbSccpAddress oldcpaitu = 6;
  if (has_oldcpaitu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->oldcpaitu(), target);
  }
  
  // optional bool OldCallingPartyAddrpresent = 7;
  if (has_oldcallingpartyaddrpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->oldcallingpartyaddrpresent(), target);
  }
  
  // optional fixed32 oldopc = 8;
  if (has_oldopc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->oldopc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbIwfSessionContextData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string originHost = 1;
    if (has_originhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originhost());
    }
    
    // optional string originRealm = 2;
    if (has_originrealm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originrealm());
    }
    
    // optional string oldHost = 3;
    if (has_oldhost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldhost());
    }
    
    // optional string oldRealm = 4;
    if (has_oldrealm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldrealm());
    }
    
    // optional .pbSCCPParameters sccpParameters = 5;
    if (has_sccpparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sccpparameters());
    }
    
    // optional .pbSccpAddress oldcpaitu = 6;
    if (has_oldcpaitu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldcpaitu());
    }
    
    // optional bool OldCallingPartyAddrpresent = 7;
    if (has_oldcallingpartyaddrpresent()) {
      total_size += 1 + 1;
    }
    
    // optional fixed32 oldopc = 8;
    if (has_oldopc()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbIwfSessionContextData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbIwfSessionContextData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbIwfSessionContextData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbIwfSessionContextData::MergeFrom(const pbIwfSessionContextData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_originhost()) {
      set_originhost(from.originhost());
    }
    if (from.has_originrealm()) {
      set_originrealm(from.originrealm());
    }
    if (from.has_oldhost()) {
      set_oldhost(from.oldhost());
    }
    if (from.has_oldrealm()) {
      set_oldrealm(from.oldrealm());
    }
    if (from.has_sccpparameters()) {
      mutable_sccpparameters()->::pbSCCPParameters::MergeFrom(from.sccpparameters());
    }
    if (from.has_oldcpaitu()) {
      mutable_oldcpaitu()->::pbSccpAddress::MergeFrom(from.oldcpaitu());
    }
    if (from.has_oldcallingpartyaddrpresent()) {
      set_oldcallingpartyaddrpresent(from.oldcallingpartyaddrpresent());
    }
    if (from.has_oldopc()) {
      set_oldopc(from.oldopc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbIwfSessionContextData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbIwfSessionContextData::CopyFrom(const pbIwfSessionContextData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbIwfSessionContextData::IsInitialized() const {
  
  return true;
}

void pbIwfSessionContextData::Swap(pbIwfSessionContextData* other) {
  if (other != this) {
    std::swap(originhost_, other->originhost_);
    std::swap(originrealm_, other->originrealm_);
    std::swap(oldhost_, other->oldhost_);
    std::swap(oldrealm_, other->oldrealm_);
    std::swap(sccpparameters_, other->sccpparameters_);
    std::swap(oldcpaitu_, other->oldcpaitu_);
    std::swap(oldcallingpartyaddrpresent_, other->oldcallingpartyaddrpresent_);
    std::swap(oldopc_, other->oldopc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbIwfSessionContextData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbIwfSessionContextData_descriptor_;
  metadata.reflection = pbIwfSessionContextData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
